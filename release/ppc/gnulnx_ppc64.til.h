#define HAVETYPE___u32
#define HAVETYPE___u16
#define HAVETYPE___u64
#define HAVETYPE___kernel_uid32_t
#define HAVETYPE___kernel_mqd_t
#define GHIDRA
#ifndef INCLUDE_GUARD_gnulnx_ppc64_til
#define INCLUDE_GUARD_gnulnx_ppc64_til
#include "../__idatilcommon.h"



struct btrfs_ioctl_vol_args_v2___0E1BBE3C4D92C29D6483496511BFB0E5___97070D54DF9902B037972BD3BA33C07B;
struct snd_seq_queue_timer___3C9D4FA6EACDE415FCF2F668B28F5C6D___D2D61BAD79E4054FA57FCFB656984E98;
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___05719DDC85B8D2B16E2A67EB61F3015B;
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___56EF40E009C635B406D22EE789E37734;
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___8AF31E8B5E1384F211913090B725D1EF;
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___C37227497D6F74F01EA58293C74B5A27;
struct usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B___0F39C91C7DBDCC74C5766049C47658C1;
struct usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B___2571549C4A7486545CEF5C221FD27B39;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___16150796182201030812428BD2F4D48E;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5355185EB8EFB70EF804337A514801F4;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5D4484EFAC362B9C4E377EE9D3C2BA2F;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5D56A3B05DC79D2B39CE2065DB667513;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___67AFCD26D9906A14E8CE0368700EBABB;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___835C5C2F1D39D04DA38329CAD2148D35;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___83773ADBAD3B93FDD4B93390256209A7;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___88F788ECB28BCCE1F1BB53FF78063EDE;
struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___A8715AB24EE22E2A929A76D7931F76D0;
struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___49195614F6319582F6FB6EA7B8D4CCE9;
struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___8A9F28F90D71C0EDE080B89C7B8F7CEB;
struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___CCD79EED25FBA0A6EB1729EB5401A8B9;
struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___0A024C9A9BA58F0A63BD780E6C8FAD05;
struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___7CB675A7FE3B771F7EED94A658A00CF2;
struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___F2BB21E50B3B06F7946E9B016EF3FE56;
struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___090D2B91546D13E6DEEAE2B35DAA114F;
struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___4AD0A116567558B22CFABFC49C5FFE0A;
struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___09DF2535E6DA103D7F29916F5EF0F37F;
struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___417F44919A114DFD176AABDB9ECD58A2;
union xt_connlimit_info___2316CCD6442B00724D40925D6B9B4268___185FF880A31D1CBC1AF0F20DFB0DEDD2;
struct xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E___3F36A97FCC75B2C3787A521E6B8B77EF;
struct xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E___EE820D7A7447C58C4FD6EEB80D72CED7;
struct kvm_ioapic_state___DD5945FC8609333C0DC47555F67F1F87___22B2FEED7AAD3155BA3FE7D4BF196114;
struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___CA6086BB8AC19E5B352F0637E4160722;
struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___E1020325AD69165DDCE560DF1208AB92;
struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___EBC2A1B437D5ACA45358D03849DB19E5;
struct v4l2_encoder_cmd___52D6E5497D79C1B4EFA05317CEE49696___6499AC71176CBE4D887BAA80F7F1110D;
struct fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4___719E9A969D439A9871DE8EAA9BE35CAF;
struct fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4___9AE2B409811208BBEC845B39EFD02679;
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___245BDAF14406869F855F2314AA540EA2;
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___92D3420542E1CF2B3B5BFC49E99E7277;
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___A59A4479E68D84CE19315FC94EF5BECC;
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___E133F9469844536D4848E7460598F6BA;
struct xt_entry_target___47536B2923186FE397875189D0BFAE98___84A7A9A013369EBAD6CAAE27DB63CB8D;
struct xt_entry_target___47536B2923186FE397875189D0BFAE98___FB47B6E93E27087F0FEB5CEECBFB98BB;
struct COFF_auxent______B43E3C95070E5A6C461F1A8FACE73978___DD24CBB9BDA2635ADD0C8F5B2B6C0707;
struct COFF_auxent______BC4ABED5B595E3E8C165C6A75882B0B0___5B40661CB552EBE7B7ADF18FDA423A8F;
struct COFF_auxent______BC4ABED5B595E3E8C165C6A75882B0B0___AE9B05ABEC1048BE339BB828F6FDD6C6;
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___BFD7413E14FC21CAB05150D69A0647C0;
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___C081DE2363A7D6E022ACDA68492DBB3F;
struct rejected_reply___D36433C375B856769A86CDA2CFADE497___C081DE2363A7D6E022ACDA68492DBB3F;
struct xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718___E697E25CA4F698AF2CEDF10AA576C38D;
struct xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718___E8D3D8264EBDE8DDA40BE8682F61E36C;
struct xt_policy_elem___506B8192831C4DA2E38D1FD681CA6263___00E7F3FC1EA1F2190C2936946F94EE86;
struct xt_set_info_v0___5FA737C7984580A7156FEACCCEF959DE___B1EE31AB57794F087E09CB38893522FB;
struct xt_string_info___C39E5CEE57601962F961C038F8A50B86___C70A73FBCF83193366EABA9582FA4B4D;
struct xt_string_info___C39E5CEE57601962F961C038F8A50B86___D243FA1A6B620F6FE40A610B1BA3DAB2;
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___B8AD833485FADDB6F1E0494B45611EC6;
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FB6660946ED728575FB5339601D7D5BE;
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FD3E7DCAA1FA6D37E77316D970071F0A;
struct snd_ctl_event___B1C3D1BE79EA6FA03579F1A08F6F0A3D___F4D573410A5F3854575F2E2B75797C20;
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___1AAAF31CDB477A122FA4B8DB27C17EE4;
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___4F2B88AF6086A93C20CDE0CF8C7B9238;
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___A2C680A566487F30C6207078F99D1152;
union sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___E4FE2715AED4C6C7BAE0E08F234A7CEC;
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___F08C5679DFE1125AD1988C42E32336AC;
struct sockaddr_tipc___E58F941474A2167ADFB4DB3CD3C86AFF___6DE9A15E0505DC1D36F657D5804C4D5B;
struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___CA6086BB8AC19E5B352F0637E4160722;
struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___E1020325AD69165DDCE560DF1208AB92;
struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___EBC2A1B437D5ACA45358D03849DB19E5;
union br_mdb_entry___3B884394841494F5C5BD79CCBB95D21B___A23C08DB19462DC1007FAED6DA7C98CC;
struct dtv_property___B98ACA724107A4780966790F8E6F51AE___E85D121AEF2FD57774AEAE3C80475EA9;
struct hdspm_status___9A4D23CEA97C8F2269F11F81D9BD27E8___9F98F9191317024E22BFFFB63D520E77;
struct irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD___F507A81B129D990840BB4B6C65CE09C4;
struct irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD___FD3F387589D8DBAF03E7F59401F513FD;
struct sockaddr_can___F47FAF2DB8D039FA9C579D1D02AFD16F___888F1D5EABBD72B66F9BAD01300731CD;
union COFF_auxent___8BBA864C406C799E487F50DA03CFED8B___B43E3C95070E5A6C461F1A8FACE73978;
union COFF_auxent___8BBA864C406C799E487F50DA03CFED8B___BC4ABED5B595E3E8C165C6A75882B0B0;
struct COFF_auxent___A007460A5209B8A49642556855958EDD___269C1D88824C4EBB14FAA70E77D8D034;
struct COFF_syment___012205A2FD59DD97F518116F0BCD0B1F___83545BEAD29F54571CFA44BED0AC2C0D;
struct __res_state___E19F19286CA79C25813C29B2F37D7904___9F1FBFA3B280393606EA65BB64E9684F;
struct rta_session___D973AC1711B483EC871F326B7831CCB7___1773C2309B9F5A0B912D9E6D7AA20BD2;
struct rta_session___D973AC1711B483EC871F326B7831CCB7___9B3C115401ADAEEEC088EE222696ABF6;
struct xt_ecn_info___96739E9C55C04822E8C6EA3C08F21247___845FF427DB7004B7E89C377EFD0F9017;
union _xEvent______F60DFC41729ECCA7C121C44CBFE60E95___82F47A5C57D4899F304609D6061CA549;
struct atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4___0818C7DDE51664281A126620DABD8E4B;
struct atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4___9610A77582F2A392DD1CBF879E698EA0;
struct fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F___C39E03481AFE0E573C312A59C4C671D6;
struct fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F___E76D94573918C22570AE3AA9276993EE;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A___5875BC7EBFDF39B43C4D68A641A956DA;
union tftphdr______9DF8B9116CFCAEDEA835550C8A86965C___45C12AF7FE255FC44175B22DB1DFFF77;
struct phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7___1C126A4DD303F51C1B963FE9DA319A63;
struct phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7___79F9F606AEF972467561C7C3244F0049;
struct atm_blli___0572EE5627218739C843F51EF75EFA8A___BA7E10FCB28575EA7EE39DE7BC7A718D;
struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___0F6B4EFD9333C782E1CC1D8BF79C584F;
struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___90930356AF01700B0B1F8C799478F0DA;
struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___B6C23F42B327BC00499A13D234739E58;
struct sigevent___4FA236EFE1337B09F044CA22D4984BE4___24DBCF560A8F0BCF4BC9504FE41525CE;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___06CC3EE1C785FF4C65A358F81D4770E3;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0782806FB5FEE125636C30F93EC424E5;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0D5E0D9ECA38FABF7ACF740E3D46813C;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0F73BC087B0175F837E61BF86166AB84;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___210E680417EC90CA260E4854A6751754;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___316B218C709051C178B3BB07E6B18196;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___3284E488B37AEC742A022E833068D497;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___3F936A3A9A06092B5B70BD26A7DFD789;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___40ECE1105C1C479EC11371480E0EAEEE;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___4D6B1C2E2FE6C1124CAB2311E897D1AB;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___5A60174FC6A07BE0049C674473C6C1C3;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___674F3E4AE65A41A1BBF2ACE37596CB1B;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___99F5A2754EC45011AB028BB1CC2CE3C7;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___9C75AB6DDEADA42926A4005EFC1B4241;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___9E59406F0409BDE74EEED2CE1F683A76;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___B56843D1A807D13D0FEC0C0069626892;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___B652DCB1C62512FA77E4252B8A422175;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___C927E5D571B5CC43049437141E992D5C;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___CB6A6FBD4AABDC204CA09785462A5EAC;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___CF45A70F1381AC3E41639336F8DCFD08;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___D4E6015299E8C3BAFA52E0C7400AB6A6;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___E3E63ACF9DBDF6C56161A285CC120760;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___EDE3B33B7AF26E05A2A60AEE6589519E;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F0E773388BCCF7D4D022A846E01785CC;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F0EDD24BB588AB1974F0CC5CC47343A0;
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F60DFC41729ECCA7C121C44CBFE60E95;
struct icmphdr___44B9F435D952314818895718F3518D16___6EE1EE5693408D5F1EEE7E152919407C;
struct icmphdr___44B9F435D952314818895718F3518D16___FAA42A1B1B50669B023341484BA7B095;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___00575168428C2A87979258BF9A2B69BD;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___0D41B3811F015B06FF7F97F1123DECB6;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___2604A667C73FB069A2304F8E765BD24B;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___649D61653448803413F3B321FF9BAB70;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___7EAD3D9EE1A56EB81EC14AA86DEFD2DA;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8B28E511ABDF7664AE4A66D9651FF4E2;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8BD831D3F26E755231EE226110EFBC25;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8C611F25D4ACBFD17F2D17F4C0FF238C;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___9A8CADB17020C23A50EF184344A8FCB4;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___A1B67C45776BD8EF9064084D47210D40;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___A9751E5CD96116865FFC28C49DDEBD33;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___BD1B4A354AF725BA74D732704C5A145B;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___CC6BD5761BCACBE21B81D4A929CF3C3D;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___CC925405885A04949E6CA336967D4693;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___E359DA8D54736DEF55DE0FF520F1219C;
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___EDA0495B17FF03E79A1AEDDCBD8E1B5C;
struct objdata___B3007D6063AF66DF722E8A0D3E39E00C___C5CA305DAC14A48247D92F909AB77E9C;
struct rpc_err___055F5448726BC1208A44545720AB7286___B2A2E5E144C6CE84264379628A685064;
struct rpc_err___055F5448726BC1208A44545720AB7286___C081DE2363A7D6E022ACDA68492DBB3F;
struct tftphdr___F0E260BA94295889B6F0F49F83AB5E48___9DF8B9116CFCAEDEA835550C8A86965C;
struct icmp___EEC48C5976A17953B310258F40698883___18EAF2C5161535AE6831887B3FEB9817;
struct icmp___EEC48C5976A17953B310258F40698883___E13592CBDF627F773A21D4C55E8BB1FD;
struct ____1C1E9EA25555F3A04518B10EE9DF4602___5BEEE552B0DC6B217341171DE42CA55F;
struct ____1C1E9EA25555F3A04518B10EE9DF4602___CB6A6FBD4AABDC204CA09785462A5EAC;
struct ____1C1E9EA25555F3A04518B10EE9DF4602___FA18AEC49CDA3F922B926DB83731E944;
struct ____41B0E947727B04B281BBEA4B1896A8BE___002955E8B5DE3B92E30DFEF7AB65BFE2;
struct ____41B0E947727B04B281BBEA4B1896A8BE___394784BEE55B7018BCA7354475FB2ABC;
struct ____41B0E947727B04B281BBEA4B1896A8BE___4B29161E04CAD4BCDD788B201A5E8E5E;
struct ____41B0E947727B04B281BBEA4B1896A8BE___8A1A9DC09BDADE4F3456EDCC5E429445;
struct ____41B0E947727B04B281BBEA4B1896A8BE___A0026EAD564A6656D0C8BDAAC752A4B0;
struct ____41B0E947727B04B281BBEA4B1896A8BE___DDF278A5B88F81FEC3CBEE828E282CB3;
struct ____41B0E947727B04B281BBEA4B1896A8BE___F43D85AC31CEBD8CC07B08111ABDF065;
struct ____4C8070B9675DF490D49D1F7749E052FB___554023DFD94A0D1F1DC623A35C397FCE;
struct ____4C8070B9675DF490D49D1F7749E052FB___CB6A6FBD4AABDC204CA09785462A5EAC;
struct _095E04B97CE84C59083222C7D172F70D___CDF557A927ED2BFF93B09908D4EFCA76;
struct _1C4035FDEAFFF0FCE26E66A96F6BBEB4___20EFCB5FAA72B851457C6BAA266EC02E;
union _5077D3CC3DD590AF02C9E55403D17F9F___7DEDE306671FD382A7675926A9A7F037;
struct _6105F69743B5F4DC3D2725A2474E8E7A___226E8492299A9657BCCDB2FD50B1B3D8;
union _6954A090FF674864C2EF0B367DFBE910___4C8070B9675DF490D49D1F7749E052FB;
struct _6DF3DE276417BF858702C9AB9AD460CB___471377A4EE616195936A53166C2E8985;
struct _6DF3DE276417BF858702C9AB9AD460CB___C80D1A5D569DC2D014AF103056E679B8;
union _8E3F17DF06268256B33C950219C36638___933121F4FA1889599F702E16603DBB9F;
union _9E389EF8DB18C75445DC45CE7C2FFB9B___2798575F521600C1E26DD161E22996D8;
union _9E6A7A2F5B8444BF3F540E884EB664C9___1C1E9EA25555F3A04518B10EE9DF4602;
struct _AEC512E533A23DF0E4E7770B7D3B7341___D894E3326F078364D3B6CBCD0A540AF0;
union _CC029EE2801424412B933EF9795F5046___199E9548C3C848AC2EFDDFCE03257421;
union _E8B6B3D679DDF9A2A9F1E31A29349D07___E20C8C1B4A7C82F1CEEE602013DD1F57;
union _E9F5FE92D7DB981290475B0A784F5155___BADCA52C29225A708D9C0115E5B974AC;
union _F9E7774477A9727B3397D0BE30B022B2___9A662A763779714768031DA711D3415F;
union _FF42BAC5ED235A895D76875BB02F1547___41B0E947727B04B281BBEA4B1896A8BE;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__coredump_proc_event;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__ptrace_proc_event;
union _XIMStatusDrawCallbackStruct___D9A2F521BD917AA4B9408853DE8DEFA7;
union btrfs_ioctl_dev_replace_args___8CED39FF33B2CC36321DD496F5286BEA;
union proc_event_____id_proc_event___709BA8BF96562A3C1103B79568DD6831;
union proc_event_____id_proc_event___7E5CB78A3BF3DAEBB3EE71E5C1A8F53E;
union ethtool_rx_ntuple_flow_spec___49C1EC9C75B2A393400303E9A6ECBAF2;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__comm_proc_event;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__exec_proc_event;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__exit_proc_event;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__fork_proc_event;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__sid_proc_event;
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__id_proc_event;
union _XIMStringConversionText___DE48A4CD3A06187C4ACE99002CF90FB4;
union snd_seq_ev_queue_control___BD7710A1463C8082981532940790AA20;
union btrfs_ioctl_vol_args_v2___0E1BBE3C4D92C29D6483496511BFB0E5;
union dvb_frontend_parameters___E55F16FEE6BC5557BD32C16048937597;
union mei_connect_client_data___A40A474C8C4A815854F508746723EC79;
struct nf_conntrack_man_proto___AA6E5880199E696CC896E03DACE929E6;
struct nf_conntrack_man_proto___B48BD05349DE676D76CC685BEB0DC163;
struct nf_conntrack_man_proto___B56350B8BCA52A0B7CED2F9F39DFA71F;
union v4l2_mpeg_vbi_fmt_ivtv___EF14CA7044B5CADA38B858153B761553;
union kvm_irq_routing_entry___D9076952D2DFC423F3B6B09BF4822D49;
struct xcb_xkb_get_kbd_by_name_replies_other_names_value_list_t;
struct _RequestBlock_struct___ACD4FD9060306C0152C059073058268C;
union kvm_assigned_pci_dev___46ACB1F2FA2487EC224C9DB07A2A3B2E;
union usb_functionfs_event___2FE4DF590A0960BC953C17B3843D0178;
struct _MoreErrInfo_struct___00DBD85E10A37A41C143DBD374F1292B;
struct _MoreErrInfo_struct___850DDD04F051AEAB5762E411F2D3B073;
struct ieee854_long_double___301A90221CF54AA61D03B5601C453EBC;
struct ieee854_long_double___FB8E818610133F718AF156918955DD46;
struct ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314__ip6_hdrctl;
union snd_seq_queue_timer___3C9D4FA6EACDE415FCF2F668B28F5C6D;
union v4l2_dv_timings_cap___BBA7AD257D986D794DDFA325331581FD;
struct xcb_composite_create_region_from_border_clip_request_t;
struct xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t;
struct fc_bsg_ctels_reply___D358A143548AB973F1CBBF682DE7DAAF;
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351;
union tc_fq_codel_xstats___63E5352AB2938D62EC3B11B547C81E55;
union usb_gadgetfs_event___5A876FC4CBDC178B2CD4FCE0CED7F161;
union usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B;
struct xcb_input_change_device_dont_propagate_list_request_t;
struct _955F1759725876F7F898C71A8A4DCDA3____pthread_mutex_s;
struct _SCSI3Addr_struct___6965806F62356BC0A797529058F9C84D;
struct _SCSI3Addr_struct___8CB8CA02CCA8FA2CB0393D22371E4F6E;
struct _SCSI3Addr_struct___FA627A8FBA596FD3BD82259322F441D8;
union dlm_write_request___9167CBF46B13F18B48FAFD6E250329B3;
union edd_device_params___77E84888D903973077CE4CFDC6BFCF35;
union edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243;
union ib_ucm_event_resp___4F0FE8C059D2B0E7A4098317275AB69C;
union ib_uverbs_send_wr___3DB9C648727C4FF416E200CBAEEA3871;
union ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A;
union media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4;
struct sctp_notification___C5201E10A3BA1990E1BB7800BD4B4755;
union snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4;
union snd_ctl_elem_info___F0D55FA891E3966931869115E5BD8961;
struct xcb_xf86dri_query_direct_rendering_capable_request_t;
struct xcb_xkb_get_kbd_by_name_replies_client_symbols_map_t;
struct xcb_xkb_get_kbd_by_name_replies_server_symbols_map_t;
struct xt_connbytes_info___7751BED587E51DB2A173CBFFFE6F548E;
union xt_connlimit_info___2316CCD6442B00724D40925D6B9B4268;
union xt_hashlimit_info___36FD1D4A07CE693D744388849A922979;
union xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E;
union gfs2_meta_header___36B1B7A4DC3E2283F03CC74A1F220CF9;
union kvm_assigned_irq___290E15ACA7FF071DF6EF2EB627B02119;
union kvm_ioapic_state___DD5945FC8609333C0DC47555F67F1F87;
union snd_pcm_sync_ptr___6C91CFB586BA7C43700D4DD67E507598;
union snd_pcm_sync_ptr___B547EC122A9F3EBA28D1B9F9B8E2C390;
union v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB;
union v4l2_encoder_cmd___52D6E5497D79C1B4EFA05317CEE49696;
union v4l2_ext_control___69E76359D6A92B09615B31A0CD58076A;
union v4l2_frmivalenum___93B3680D9D1B117CA0A49F04AB26F1D3;
union v4l2_frmsizeenum___AB1B6A5DBF64E5DBD6E4918CD3F58D99;
struct xcb_xf86dri_query_direct_rendering_capable_cookie_t;
union fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4;
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_rtradv;
struct kvm_vcpu_events___1CFDC73C128D5D93EB72FA493B7308C8;
struct kvm_vcpu_events___23BE99AFA671DB58DC2BAA381F92428C;
struct kvm_vcpu_events___59E0C1196A233DB3DDF4599083599B26;
union net_dm_user_msg___15ACACB6C2BBBF436ECFD1AF3E0A1DF0;
union rds_atomic_args___F92BFCF0AE7692DF19980549DF229223;
struct sockaddr_atmpvc___43BC5BD14FF5343B21515253C57232B1;
struct sockaddr_atmsvc___28FFA2D832CE4CF9061331F52341A4DE;
union v4l2_dv_timings___96E49C2E99AC3243D1D72E7D0CCE1702;
union v4l2_event_ctrl___877A83439B5014158313B7A496DCA350;
union v4l2_streamparm___27A26CB990F090CF49B51711EB49A596;
union vlan_ioctl_args___94757F94B6A54079544B78B6544C33D2;
struct xcb_input_get_device_dont_propagate_list_request_t;
struct xcb_selinux_get_selection_create_context_request_t;
struct xcb_selinux_set_selection_create_context_request_t;
struct xcb_xf86dri_query_direct_rendering_capable_reply_t;
struct xcb_xkb_get_kbd_by_name_replies_t___client_symbols;
struct xcb_xkb_get_kbd_by_name_replies_t___indicator_maps;
struct xcb_xkb_get_kbd_by_name_replies_t___server_symbols;
union xt_entry_target___47536B2923186FE397875189D0BFAE98;
union _i2o_hrt_entry___D55E159E5D75E3EA17BD777F24FDBACF;
union accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023;
union fc_bsg_request___6D97E0FCCC65F66D321CF0BDF9DCBB2C;
union i2400m_msg_hdr___22B7D1DBBF1ADFD158475D81DBFFC78D;
union i2400m_msg_hdr___2714A6542DBCB9EFDD6DA7143E760F28;
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_idseq;
struct ieee754_double___D177F1DF27478B0248C6745F72EEAEB0;
struct ieee754_double___DD584A325266113E3D0838C6650565BE;
union rejected_reply___D36433C375B856769A86CDA2CFADE497;
union sockaddr_pppox___E63C2AB07B6ED8C642925DD42DC4C468;
union v4l2_dbg_match___9221E6CCFE3ED5A42DA7B217EF6A225C;
union v4l2_querymenu___F0EB35073D18D1D762C948D5819F4E2D;
struct xcb_input_get_device_dont_propagate_list_cookie_t;
struct xcb_input_get_selected_extension_events_request_t;
struct xcb_selinux_get_property_create_context_request_t;
struct xcb_selinux_get_selection_create_context_cookie_t;
struct xcb_selinux_set_property_create_context_request_t;
struct xcb_x_print_print_get_screen_of_context_request_t;
struct xcb_xkb_permament_radio_group_behavior_iterator_t;
union xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718;
union xt_policy_elem___506B8192831C4DA2E38D1FD681CA6263;
union xt_set_info_v0___5FA737C7984580A7156FEACCCEF959DE;
union xt_string_info___C39E5CEE57601962F961C038F8A50B86;
struct directory_obj___1F9DB6EC5B4D38C4C9C3429D1A4D637D;
struct directory_obj___C1C9E10248BAA10524C7D0EEA27D2609;
union ebt_802_3_hdr___5C10EBC4813C05B19E3AE7B3F350E3AD;
union hdlcdrv_ioctl___3EABF1CC9C5D017A39C9F4CBC11E5536;
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_pmtu;
struct ieee754_float___C1CC197CEBD9377945A71E8A21F83EB1;
struct ieee754_float___CCFA8EFBEFBEB58ABED61A4627F05411;
union kvm_dirty_log___2B14A28C4DCCD1DA7D9F0B5F8695D8BE;
union kvm_irq_level___2C42BCD169011235984D59B666AD220A;
union snd_ctl_event___B1C3D1BE79EA6FA03579F1A08F6F0A3D;
union snd_seq_event___C9940212CE0DEEA5F05F1BFFC3461EB8;
union sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C;
union sockaddr_tipc___E58F941474A2167ADFB4DB3CD3C86AFF;
struct ubi_rnvol_req___F09893DCAECAFD0B6ABDD7E485962E11;
union video_command___33EDB0D7B1B9386905594C9DF664C3AC;
struct xcb_input_get_device_dont_propagate_list_reply_t;
struct xcb_input_get_selected_extension_events_cookie_t;
struct xcb_randr_get_screen_resources_current_request_t;
struct xcb_render_set_picture_clip_rectangles_request_t;
struct xcb_selinux_get_property_create_context_cookie_t;
struct xcb_selinux_get_selection_create_context_reply_t;
struct xcb_selinux_get_selection_data_context_request_t;
struct xcb_x_print_print_get_image_resolution_request_t;
struct xcb_x_print_print_get_screen_of_context_cookie_t;
struct xcb_x_print_print_set_image_resolution_request_t;
union authdes_verf___7A6CF749D39778C1B89693A36BA727C7;
union baycom_ioctl___F7F4D081547B704FD9326E93E92455B8;
struct br_mdb_entry___3B884394841494F5C5BD79CCBB95D21B;
union dtv_property___B98ACA724107A4780966790F8E6F51AE;
union ebt_ip6_info___26363C14217845B81957C820750DD008;
union ebt_ip6_info___AB7A6A2EFD5D2D8A9CC0BEC5B58393A0;
struct etheraddress___DC2CBD42B28FE4DE7724D288168FAA30;
union fc_bsg_reply___DCDC26EFCFC60F96113FB0BD491A52D4;
union hdspm_status___9A4D23CEA97C8F2269F11F81D9BD27E8;
union ib_uverbs_wc___3DB9C648727C4FF416E200CBAEEA3871;
union irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD;
union key_netstres___2176196DCBB8522A9A1E300DB0535BE5;
union klm_testrply___40F9D261D31BF2147C1606393BAB8476;
union nlm_testrply___25E723FE95144319ADEDD57F4FF59DDE;
union sockaddr_can___F47FAF2DB8D039FA9C579D1D02AFD16F;
union td_event_msg___93B01EC8B2A37DE149D5B3F5BB1472F3;
struct vfs_cap_data___1A090B8EA054F4F02D05FCE87D20A421;
struct xcb_input_get_device_modifier_mapping_request_t;
struct xcb_input_get_selected_extension_events_reply_t;
struct xcb_input_set_device_modifier_mapping_request_t;
struct xcb_randr_get_screen_resources_current_cookie_t;
struct xcb_selinux_get_device_create_context_request_t;
struct xcb_selinux_get_property_create_context_reply_t;
struct xcb_selinux_get_property_data_context_request_t;
struct xcb_selinux_get_selection_data_context_cookie_t;
struct xcb_selinux_get_selection_use_context_request_t;
struct xcb_selinux_get_window_create_context_request_t;
struct xcb_selinux_set_device_create_context_request_t;
struct xcb_selinux_set_selection_use_context_request_t;
struct xcb_selinux_set_window_create_context_request_t;
struct xcb_x_print_print_get_image_resolution_cookie_t;
struct xcb_x_print_print_get_page_dimensions_request_t;
struct xcb_x_print_print_get_screen_of_context_reply_t;
struct xcb_x_print_print_rehash_printer_list_request_t;
struct xcb_x_print_print_set_image_resolution_cookie_t;
struct xcb_xfixes_create_region_from_picture_request_t;
struct xcb_xkb_get_kbd_by_name_replies_t___other_names;
struct xcb_xkb_permament_overlay_1_behavior_iterator_t;
struct xcb_xkb_permament_overlay_2_behavior_iterator_t;
struct COFF_auxent___0711A204FF8D49621BD1F59D962A7168;
struct COFF_auxent___8BBA864C406C799E487F50DA03CFED8B;
union COFF_auxent___A007460A5209B8A49642556855958EDD;
struct COFF_auxent___DEE18EBA7EBA49272E803725DF2433AA;
union COFF_lineno___EB2C3E8F56ACA6629C4DF3C25298B95B;
union COFF_syment___012205A2FD59DD97F518116F0BCD0B1F;
struct __res_state___A41D3F045172AF5618492D381489FAF0;
union __res_state___E19F19286CA79C25813C29B2F37D7904;
union arpt_mangle___966621F5207D1D909BB79365A6E3D80A;
union arpt_mangle___F65E77752E3CFFFEA995A77A594CEF9A;
union cryptkeyres___EF36972044157FC290EE2FE4EF835697;
union if_irda_req___4AF2B49FDDB54BAFABDFAE063E6E4A98;
union if_irda_req___9DA9AA7ECA440A9F5CDA74F00DBFB189;
union kvm_irqchip___0F8588548802CF435BA0DA1F00B7AD77;
struct nis_taglist___D5235F6F3B62BCE7910AF756FE53E6D0;
union rta_session___D973AC1711B483EC871F326B7831CCB7;
union v4l2_buffer___60C6B35876E0AE46B602D9AFD0188855;
union v4l2_format___11C340EB5DA759242BAA851A9D990106;
union video_event___67F2EB9310C2BF96BF5213AE56F4A830;
struct xcb_composite_release_overlay_window_request_t;
struct xcb_glx_get_compressed_tex_image_arb_request_t;
struct xcb_input_get_device_modifier_mapping_cookie_t;
struct xcb_input_set_device_modifier_mapping_cookie_t;
struct xcb_randr_get_screen_resources_current_reply_t;
struct xcb_selinux_get_device_create_context_cookie_t;
struct xcb_selinux_get_property_data_context_cookie_t;
struct xcb_selinux_get_property_use_context_request_t;
struct xcb_selinux_get_selection_data_context_reply_t;
struct xcb_selinux_get_selection_use_context_cookie_t;
struct xcb_selinux_get_window_create_context_cookie_t;
struct xcb_selinux_set_property_use_context_request_t;
struct xcb_x_print_print_get_image_resolution_reply_t;
struct xcb_x_print_print_get_one_attributes_request_t;
struct xcb_x_print_print_get_page_dimensions_cookie_t;
struct xcb_x_print_print_set_image_resolution_reply_t;
struct xcb_xfixes_create_region_from_bitmap_request_t;
struct xcb_xfixes_create_region_from_window_request_t;
struct xcb_xfixes_get_cursor_image_and_name_request_t;
struct xcb_xkb_get_kbd_by_name_replies_t___compat_map;
union xt_ecn_info___96739E9C55C04822E8C6EA3C08F21247;
union ypbind_resp___CD49527FE086EB7F6D0E69C2C3AD50AC;
union atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4;
union bp_address___3B940BBAFE206A608BBBF7EC1987BA49;
struct cback_data___8577E6F7A3DA394015609B473F63AD7B;
union fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F;
union getcredres___C5134A0BDA290BA80D31944F899AB902;
struct ib_request___284138CD61DEACF1E3B0F8ADC9D2B817;
struct ib_request___2D577313DCD2E74CD5A0055993933E3C;
struct ib_request___BC4F227684F3C8C9122828D0FF4C6B30;
struct log_result___946B3E427CBAEF2C8E64E80E43621ACD;
struct nis_result___4B6B45C3F1C3815D68D653B8D499AE33;
struct nis_server___DA92845B88BF4FFBAAA2281E50DC5AF5;
struct ns_request___C16B7AFEC0429C3BD747A37F4D827FFD;
union proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A;
union reply_body___3176F759A4E4A0B30BE44C0FA3C218CC;
union shaperconf___47AAC6CDC41711CE8CC9377BCA1EA0FF;
union sigcontext___828E61C1A573428F501E0B4A68357797;
union v4l2_event___8B28A54845FF2EA0761A5ED508965B6E;
union v4l2_plane___7F64AB741C97E078016A97B1EA8BEEFE;
struct xcb_composite_unredirect_subwindows_request_t;
struct xcb_glx_get_color_table_parameterfv_request_t;
struct xcb_glx_get_color_table_parameteriv_request_t;
struct xcb_glx_get_compressed_tex_image_arb_cookie_t;
struct xcb_glx_get_convolution_parameterfv_request_t;
struct xcb_glx_get_convolution_parameteriv_request_t;
struct xcb_input_change_device_key_mapping_request_t;
struct xcb_input_get_device_button_mapping_request_t;
struct xcb_input_get_device_modifier_mapping_reply_t;
struct xcb_input_set_device_button_mapping_request_t;
struct xcb_input_set_device_modifier_mapping_reply_t;
struct xcb_randr_configure_output_property_request_t;
struct xcb_selinux_get_device_create_context_reply_t;
struct xcb_selinux_get_property_data_context_reply_t;
struct xcb_selinux_get_property_use_context_cookie_t;
struct xcb_selinux_get_selection_use_context_reply_t;
struct xcb_selinux_get_window_create_context_reply_t;
struct xcb_x_print_print_get_document_data_request_t;
struct xcb_x_print_print_get_one_attributes_cookie_t;
struct xcb_x_print_print_get_page_dimensions_reply_t;
struct xcb_x_print_print_put_document_data_request_t;
struct xcb_xfixes_get_cursor_image_and_name_cookie_t;
struct xcb_xkb_get_kbd_by_name_replies_t___key_names;
union ypresp_all___438EB5C0F713AEE99C9EADC1C626DC0A;
struct _XDisplay___40E717ABED307E15FC65B9096F5C7074;
union _xkbEvent___1A318C185F777B9ECB86573CC964DEF2;
struct des_block___8E96D37FBE99CA069DD91238980BB651;
union desparams___F38C3328E965CE3ADB16864418918AD0;
union dtv_stats___6DB0D4BB6C903E0E24B38DB1D5FBBC78;
struct dump_args___00C533AE8545A66FA38641508A3DC473;
struct entry_col___E942B815045DEE9FABC14DA0AE6314FC;
struct entry_obj___9954B692FACAC347CBA764979909DFF4;
struct fd_result___864956CB4DA79F92CA310E20E4E9B271;
struct fd_result___E188DDB4946479B1B04909415F6D7A2E;
struct group_obj___6B1AF3D1F6DE7092D80225088D6E3A34;
union icmp6_hdr___85A0B7966B981BE593FDADBE0B8685D7;
union k_message___206C2CB577A0C945CCF3D164C4BDBFF4;
struct log_entry___1E639176190539C4AF5A837E820AE922;
union phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7;
struct rex_start___27D82728F37DDE14700CB9E3D9A87412;
struct rex_start___4E8F7DC4996D24194F1417703DE27DA2;
union sigaction___CF138106520E5A28DAF2A67779B92EE8;
struct table_obj___37F826B7C2AFF7B3E483E0E1EE89ED51;
union td_notify___143F0EF771439D241AFD6E8AB1506B64;
struct xcb_glx_change_drawable_attributes_request_t;
struct xcb_glx_create_context_attribs_arb_request_t;
struct xcb_glx_get_color_table_parameterfv_cookie_t;
struct xcb_glx_get_color_table_parameteriv_cookie_t;
struct xcb_glx_get_compressed_tex_image_arb_reply_t;
struct xcb_glx_get_convolution_parameterfv_cookie_t;
struct xcb_glx_get_convolution_parameteriv_cookie_t;
struct xcb_input_device_button_state_notify_event_t;
struct xcb_input_device_resolution_state_iterator_t;
struct xcb_input_get_device_button_mapping_cookie_t;
struct xcb_input_get_device_motion_events_request_t;
struct xcb_input_set_device_button_mapping_cookie_t;
struct xcb_render_create_conical_gradient_request_t;
struct xcb_render_query_pict_index_values_request_t;
struct xcb_selinux_get_property_use_context_reply_t;
struct xcb_x_print_print_get_document_data_cookie_t;
struct xcb_x_print_print_get_one_attributes_reply_t;
struct xcb_x_print_print_get_printer_list_request_t;
struct xcb_xf86dri_get_client_driver_name_request_t;
struct xcb_xfixes_get_cursor_image_and_name_reply_t;
struct xcb_xfixes_set_picture_clip_region_request_t;
struct xcb_xfixes_set_window_shape_region_request_t;
struct xcb_xkb_get_kbd_by_name_replies_t___geometry;
union _XIMText___8281806D2C2C5E9220BA18F83AF5F330;
union atm_blli___0572EE5627218739C843F51EF75EFA8A;
union atm_blli___F33FFBC35AC6DBBD1109622F8FE46785;
union fhstatus___5A86E21E7BD06EF982D138486E7C27D0;
union in6_addr___B80A5568EDCB3DEA112C17957211D170;
union knfsd_fh___925CA116668CC790A9CAB8C177903946;
struct link_obj___6E2208C80A69EAD3D69988E63D048B29;
struct nis_attr___F2081D9F3F0358B3A954C101A2B200CE;
union sigevent___4FA236EFE1337B09F044CA22D4984BE4;
struct unixcred___B86B6406BF4F2F34B5DC36D552B35DA0;
struct xcb_composite_redirect_subwindows_request_t;
struct xcb_glx_get_color_table_parameterfv_reply_t;
struct xcb_glx_get_color_table_parameteriv_reply_t;
struct xcb_glx_get_convolution_parameterfv_reply_t;
struct xcb_glx_get_convolution_parameteriv_reply_t;
struct xcb_glx_get_histogram_parameterfv_request_t;
struct xcb_glx_get_histogram_parameteriv_request_t;
struct xcb_glx_get_tex_level_parameterfv_request_t;
struct xcb_glx_get_tex_level_parameteriv_request_t;
struct xcb_glx_vendor_private_with_reply_request_t;
struct xcb_input_device_abs_calib_state_iterator_t;
struct xcb_input_get_device_button_mapping_reply_t;
struct xcb_input_get_device_motion_events_cookie_t;
struct xcb_input_integer_feedback_state_iterator_t;
struct xcb_input_set_device_button_mapping_reply_t;
struct xcb_render_create_linear_gradient_request_t;
struct xcb_render_create_radial_gradient_request_t;
struct xcb_render_query_pict_index_values_cookie_t;
struct xcb_res_query_client_pixmap_bytes_request_t;
struct xcb_selinux_get_selection_context_request_t;
struct xcb_x_print_print_destroy_context_request_t;
struct xcb_x_print_print_get_document_data_reply_t;
struct xcb_x_print_print_get_printer_list_cookie_t;
struct xcb_xf86dri_get_client_driver_name_cookie_t;
struct xcb_xfixes_select_selection_input_request_t;
struct xcb_xkb_get_kbd_by_name_replies_types_map_t;
union _xEvent___8D9F8CFA4742D6E00DB874B9F876609D;
union arc_cap___693039C66FBA5C91E273DA0B47DDAEBD;
union cld_msg___4B56EB8A9D6FEFEB7556C99AA13CA4F5;
union dynamic___355B7563D908D50B4B67712FB263B5CD;
union fddihdr___938C6FB260523AB5682B137AC0052733;
union icmphdr___44B9F435D952314818895718F3518D16;
union ifaddrs___5A9FB6B4293E0982D0D9C18B84AAF77B;
union ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314;
union kvm_run___A194019CF89D0E9161B41DDFC9778C55;
union kvm_run___F43018F8AEE5B5844153EFD33BC1C430;
union objdata___B3007D6063AF66DF722E8A0D3E39E00C;
union obstack___F91006FBD6EB572A801247A9C58C8B69;
union rpc_err___055F5448726BC1208A44545720AB7286;
union rpc_msg___7D774571B4FAB0E4BBD540829030FA52;
union tftphdr___F0E260BA94295889B6F0F49F83AB5E48;
struct xcb_composite_get_overlay_window_request_t;
struct xcb_composite_name_window_pixmap_request_t;
struct xcb_dri2_get_buffers_with_format_request_t;
struct xcb_glx_get_histogram_parameterfv_cookie_t;
struct xcb_glx_get_histogram_parameteriv_cookie_t;
struct xcb_glx_get_tex_level_parameterfv_cookie_t;
struct xcb_glx_get_tex_level_parameteriv_cookie_t;
struct xcb_glx_vendor_private_with_reply_cookie_t;
struct xcb_input_change_keyboard_device_request_t;
struct xcb_input_device_abs_area_state_iterator_t;
struct xcb_input_device_resolution_ctl_iterator_t;
struct xcb_input_get_device_key_mapping_request_t;
struct xcb_input_get_device_motion_events_reply_t;
struct xcb_input_select_extension_event_request_t;
struct xcb_input_string_feedback_state_iterator_t;
struct xcb_randr_change_output_property_request_t;
struct xcb_randr_delete_output_property_request_t;
struct xcb_randr_list_output_properties_request_t;
struct xcb_render_query_pict_index_values_reply_t;
struct xcb_render_set_picture_transform_request_t;
struct xcb_res_query_client_pixmap_bytes_cookie_t;
struct xcb_screensaver_unset_attributes_request_t;
struct xcb_selinux_get_property_context_request_t;
struct xcb_selinux_get_selection_context_cookie_t;
struct xcb_x_print_print_get_attributes_request_t;
struct xcb_x_print_print_get_printer_list_reply_t;
struct xcb_x_print_print_input_selected_request_t;
struct xcb_x_print_print_set_attributes_request_t;
struct xcb_xf86dri_get_client_driver_name_reply_t;
struct xcb_xfixes_change_cursor_by_name_request_t;
struct xcb_xfixes_create_region_from_gc_request_t;
struct xcb_xkb_permament_lock_behavior_iterator_t;
union archdr___4ABDB8A35AA038764FD59B8E94C5785D;
union ifaddr___0DF00F875CAF96EB397809642F17405E;
union ifconf___6BFF7D1955055D26BF83C89630184638;
union rusage___053CCAE027B5BFCB43679F38B0BBAFFB;
union rusage___1358501C97B7AC417CB67978351D7ED8;
union rusage___2C815BBF04E92D15CDB4A45E8AD3A3E5;
union rusage___3B4947AE73BD84433438D8F38CADF7D5;
union rusage___432FF46A9027D949EED7182447443219;
union rusage___5B25822D21B23C62AAC800B59197C0E9;
union rusage___9F5E3C17DD7C53B5A698FB11C246C70B;
union rusage___BE0BA0CA85EE8DDDB4C2D45E2D812E33;
union rusage___C0F0170E03C25EB818136FFBEB1A4400;
union rusage___C564AC21F6E5BE8C627FEDECB4652ACF;
union rusage___C83E8E9C9ADD361154E0D8EBED847957;
union rusage___C8E0368DFE215138D5FE989391EDF66A;
union rusage___D61F8409E13EA6E11D92C6D9757A1531;
union rusage___E7EE59A34ECBA4FFAE4E24E03E23B031;
union vifctl___1C189D187363D064D33CA1A5631EE3F5;
struct xcb_composite_get_overlay_window_cookie_t;
struct xcb_composite_unredirect_window_request_t;
struct xcb_dri2_get_buffers_with_format_cookie_t;
struct xcb_glx_get_drawable_attributes_request_t;
struct xcb_glx_get_histogram_parameterfv_reply_t;
struct xcb_glx_get_histogram_parameteriv_reply_t;
struct xcb_glx_get_query_objectuiv_arb_request_t;
struct xcb_glx_get_tex_level_parameterfv_reply_t;
struct xcb_glx_get_tex_level_parameteriv_reply_t;
struct xcb_glx_query_extensions_string_request_t;
struct xcb_glx_vendor_private_with_reply_reply_t;
struct xcb_input_change_keyboard_device_cookie_t;
struct xcb_input_change_pointer_device_request_t;
struct xcb_input_device_abs_area_ctrl_iterator_t;
struct xcb_input_device_abs_calib_ctl_iterator_t;
struct xcb_input_device_key_state_notify_event_t;
struct xcb_input_get_device_key_mapping_cookie_t;
struct xcb_input_get_extension_version_request_t;
struct xcb_input_integer_feedback_ctl_iterator_t;
struct xcb_randr_get_screen_size_range_request_t;
struct xcb_randr_list_output_properties_cookie_t;
struct xcb_randr_query_output_property_request_t;
struct xcb_res_query_client_pixmap_bytes_reply_t;
struct xcb_selinux_get_property_context_cookie_t;
struct xcb_selinux_get_selection_context_reply_t;
struct xcb_x_print_print_get_attributes_cookie_t;
struct xcb_x_print_print_input_selected_cookie_t;
struct xcb_x_print_print_query_screens_request_t;
struct xcb_x_print_print_query_version_request_t;
struct xcb_xkb_get_kbd_by_name_replies_t___types;
union ifreq___4AF2B49FDDB54BAFABDFAE063E6E4A98;
union ifreq___75060FE57352FD064152EAF8FAEB1426;
union nlist___34B1BE95F83DF5B7277E649894D7700C;
struct utmpx___4FC64FD635E0E5C6E29ADA80B3E686D5;
struct xcb_change_active_pointer_grab_request_t;
struct xcb_composite_get_overlay_window_reply_t;
struct xcb_dri2_get_buffers_with_format_reply_t;
struct xcb_glx_get_convolution_filter_request_t;
struct xcb_glx_get_drawable_attributes_cookie_t;
struct xcb_glx_get_minmax_parameterfv_request_t;
struct xcb_glx_get_minmax_parameteriv_request_t;
struct xcb_glx_get_query_objectiv_arb_request_t;
struct xcb_glx_get_query_objectuiv_arb_cookie_t;
struct xcb_glx_query_extensions_string_cookie_t;
struct xcb_input_bell_feedback_state_iterator_t;
struct xcb_input_change_keyboard_device_reply_t;
struct xcb_input_change_pointer_device_cookie_t;
struct xcb_input_device_enable_state_iterator_t;
struct xcb_input_device_presence_notify_event_t;
struct xcb_input_get_device_key_mapping_reply_t;
struct xcb_input_get_extension_version_cookie_t;
struct xcb_input_get_feedback_control_request_t;
struct xcb_input_send_extension_event_request_t;
struct xcb_input_set_device_valuators_request_t;
struct xcb_input_string_feedback_ctl_iterator_t;
struct xcb_input_ungrab_device_button_request_t;
struct xcb_randr_get_screen_resources_request_t;
struct xcb_randr_get_screen_size_range_cookie_t;
struct xcb_randr_list_output_properties_reply_t;
struct xcb_randr_query_output_property_cookie_t;
struct xcb_render_composite_glyphs_16_request_t;
struct xcb_render_composite_glyphs_32_request_t;
struct xcb_render_reference_glyph_set_request_t;
struct xcb_res_query_client_resources_request_t;
struct xcb_screensaver_set_attributes_request_t;
struct xcb_selinux_get_client_context_request_t;
struct xcb_selinux_get_device_context_request_t;
struct xcb_selinux_get_property_context_reply_t;
struct xcb_selinux_get_window_context_request_t;
struct xcb_selinux_set_device_context_request_t;
struct xcb_x_print_print_get_attributes_reply_t;
struct xcb_x_print_print_input_selected_reply_t;
struct xcb_x_print_print_query_screens_cookie_t;
struct xcb_x_print_print_query_version_cookie_t;
struct xcb_x_print_print_select_input_request_t;
struct xcb_xfixes_select_cursor_input_request_t;
struct xcb_xkb_permament_radio_group_behavior_t;
struct xcb_xvmc_list_subpicture_types_request_t;
union icmp___893B68B5BC55935E15A63F398B6517AD;
union icmp___EEC48C5976A17953B310258F40698883;
struct uac_format_type_i_continuous_descriptor;
union user___14E988142F1DB33DBF0B6F42088802D2;
union user___1E59340A5D06056FAFB2C11BCCCBF73A;
struct utmp___D1644BFB760C8D02595F7CD5DC7921A3;
struct wait___39CA23F4E14B66D514B108A5928EF219;
struct wait___E9BF053A98CA6B253628237B5A23E48D;
struct xcb_composite_redirect_window_request_t;
struct xcb_glx_are_textures_resident_request_t;
struct xcb_glx_get_convolution_filter_cookie_t;
struct xcb_glx_get_drawable_attributes_reply_t;
struct xcb_glx_get_minmax_parameterfv_cookie_t;
struct xcb_glx_get_minmax_parameteriv_cookie_t;
struct xcb_glx_get_query_objectiv_arb_cookie_t;
struct xcb_glx_get_query_objectuiv_arb_reply_t;
struct xcb_glx_query_extensions_string_reply_t;
struct xcb_input_allow_device_events_request_t;
struct xcb_input_change_pointer_device_reply_t;
struct xcb_input_device_enable_ctrl_iterator_t;
struct xcb_input_device_mapping_notify_event_t;
struct xcb_input_get_extension_version_reply_t;
struct xcb_input_get_feedback_control_cookie_t;
struct xcb_input_kbd_feedback_state_iterator_t;
struct xcb_input_led_feedback_state_iterator_t;
struct xcb_input_ptr_feedback_state_iterator_t;
struct xcb_input_set_device_valuators_cookie_t;
struct xcb_randr_get_crtc_gamma_size_request_t;
struct xcb_randr_get_output_property_request_t;
struct xcb_randr_get_screen_resources_cookie_t;
struct xcb_randr_get_screen_size_range_reply_t;
struct xcb_randr_query_output_property_reply_t;
struct xcb_record_unregister_clients_request_t;
struct xcb_render_composite_glyphs_8_request_t;
struct xcb_render_create_anim_cursor_request_t;
struct xcb_render_query_pict_formats_request_t;
struct xcb_render_set_picture_filter_request_t;
struct xcb_res_query_client_resources_cookie_t;
struct xcb_screensaver_query_version_request_t;
struct xcb_selinux_get_client_context_cookie_t;
struct xcb_selinux_get_device_context_cookie_t;
struct xcb_selinux_get_window_context_cookie_t;
struct xcb_sync_list_system_counters_request_t;
struct xcb_x_print_print_get_context_request_t;
struct xcb_x_print_print_query_screens_reply_t;
struct xcb_x_print_print_query_version_reply_t;
struct xcb_x_print_print_set_context_request_t;
struct xcb_xf86dri_get_drawable_info_request_t;
struct xcb_xfixes_set_gc_clip_region_request_t;
struct xcb_xinerama_get_screen_count_request_t;
struct xcb_xkb_extension_device_notify_event_t;
struct xcb_xkb_radio_group_behavior_iterator_t;
struct xcb_xv_query_image_attributes_request_t;
struct xcb_xvmc_list_subpicture_types_cookie_t;
union rip___AFFF135AAACB9FA320A59FAF8451ECA8;
union tsp___E78A65B7E52D74DB905DCAA7AEC02B40;
struct uac_format_type_ii_discrete_descriptor;
struct virtio_blk_config__virtio_blk_geometry;
struct xcb_change_window_attributes_request_t;
struct xcb_glx_are_textures_resident_cookie_t;
struct xcb_glx_get_convolution_filter_reply_t;
struct xcb_glx_get_minmax_parameterfv_reply_t;
struct xcb_glx_get_minmax_parameteriv_reply_t;
struct xcb_glx_get_query_objectiv_arb_reply_t;
struct xcb_glx_get_separable_filter_request_t;
struct xcb_glx_make_context_current_request_t;
struct xcb_glx_set_client_info_2arb_request_t;
struct xcb_input_bell_feedback_ctl_iterator_t;
struct xcb_input_change_device_notify_event_t;
struct xcb_input_device_core_state_iterator_t;
struct xcb_input_device_time_coord_iterator_t;
struct xcb_input_get_device_control_request_t;
struct xcb_input_get_feedback_control_reply_t;
struct xcb_input_grab_device_button_request_t;
struct xcb_input_list_input_devices_request_t;
struct xcb_input_query_device_state_request_t;
struct xcb_input_set_device_valuators_reply_t;
struct xcb_list_installed_colormaps_request_t;
struct xcb_randr_delete_output_mode_request_t;
struct xcb_randr_get_crtc_gamma_size_cookie_t;
struct xcb_randr_get_crtc_transform_request_t;
struct xcb_randr_get_output_primary_request_t;
struct xcb_randr_get_output_property_cookie_t;
struct xcb_randr_get_screen_resources_reply_t;
struct xcb_randr_screen_change_notify_event_t;
struct xcb_randr_set_crtc_transform_request_t;
struct xcb_randr_set_output_primary_request_t;
struct xcb_render_create_solid_fill_request_t;
struct xcb_render_query_pict_formats_cookie_t;
struct xcb_res_query_client_resources_reply_t;
struct xcb_screensaver_query_version_cookie_t;
struct xcb_screensaver_select_input_request_t;
struct xcb_selinux_get_client_context_reply_t;
struct xcb_selinux_get_device_context_reply_t;
struct xcb_selinux_get_window_context_reply_t;
struct xcb_sync_list_system_counters_cookie_t;
struct xcb_x_print_print_get_context_cookie_t;
struct xcb_x_print_print_start_page_request_t;
struct xcb_xf86dri_close_connection_request_t;
struct xcb_xf86dri_destroy_drawable_request_t;
struct xcb_xf86dri_get_drawable_info_cookie_t;
struct xcb_xinerama_get_screen_count_cookie_t;
struct xcb_xinerama_get_screen_size_request_t;
struct xcb_xkb_indicator_state_notify_event_t;
struct xcb_xkb_permament_overlay_1_behavior_t;
struct xcb_xkb_permament_overlay_2_behavior_t;
struct xcb_xv_query_image_attributes_cookie_t;
struct xcb_xv_query_port_attributes_request_t;
struct xcb_xvmc_list_subpicture_types_reply_t;
struct btrfs_ioctl_dev_replace_status_params;
struct uac_format_type_i_discrete_descriptor;
struct xcb_change_keyboard_control_request_t;
struct xcb_change_keyboard_mapping_request_t;
struct xcb_composite_query_version_request_t;
struct xcb_dri2_buffer_swap_complete_event_t;
struct xcb_glx_are_textures_resident_reply_t;
struct xcb_glx_get_polygon_stipple_request_t;
struct xcb_glx_get_separable_filter_cookie_t;
struct xcb_glx_get_tex_parameterfv_request_t;
struct xcb_glx_get_tex_parameteriv_request_t;
struct xcb_glx_make_context_current_cookie_t;
struct xcb_glx_query_server_string_request_t;
struct xcb_glx_set_client_info_arb_request_t;
struct xcb_input_device_core_ctrl_iterator_t;
struct xcb_input_device_state_notify_event_t;
struct xcb_input_get_device_control_cookie_t;
struct xcb_input_input_class_info_iterator_t;
struct xcb_input_kbd_feedback_ctl_iterator_t;
struct xcb_input_led_feedback_ctl_iterator_t;
struct xcb_input_list_input_devices_cookie_t;
struct xcb_input_ptr_feedback_ctl_iterator_t;
struct xcb_input_query_device_state_cookie_t;
struct xcb_input_ungrab_device_key_request_t;
struct xcb_list_installed_colormaps_cookie_t;
struct xcb_randr_get_crtc_gamma_size_reply_t;
struct xcb_randr_get_crtc_transform_cookie_t;
struct xcb_randr_get_output_primary_cookie_t;
struct xcb_randr_get_output_property_reply_t;
struct xcb_randr_set_screen_config_request_t;
struct xcb_record_register_clients_request_t;
struct xcb_render_create_glyph_set_request_t;
struct xcb_render_query_pict_formats_reply_t;
struct xcb_screensaver_query_version_reply_t;
struct xcb_selinux_list_properties_request_t;
struct xcb_selinux_list_selections_request_t;
struct xcb_sync_list_system_counters_reply_t;
struct xcb_x_print_print_get_context_reply_t;
struct xcb_x_print_print_start_doc_request_t;
struct xcb_x_print_print_start_job_request_t;
struct xcb_xf86dri_auth_connection_request_t;
struct xcb_xf86dri_create_drawable_request_t;
struct xcb_xf86dri_destroy_context_request_t;
struct xcb_xf86dri_get_device_info_request_t;
struct xcb_xf86dri_get_drawable_info_reply_t;
struct xcb_xf86dri_open_connection_request_t;
struct xcb_xfixes_get_cursor_image_request_t;
struct xcb_xfixes_intersect_region_request_t;
struct xcb_xfixes_translate_region_request_t;
struct xcb_xinerama_get_screen_count_reply_t;
struct xcb_xinerama_get_screen_size_cookie_t;
struct xcb_xkb_get_indicator_state_request_t;
struct xcb_xkb_get_named_indicator_request_t;
struct xcb_xkb_overlay_1_behavior_iterator_t;
struct xcb_xkb_overlay_2_behavior_iterator_t;
struct xcb_xkb_sa_device_valuator_iterator_t;
struct xcb_xkb_sa_lock_device_btn_iterator_t;
struct xcb_xkb_set_debugging_flags_request_t;
struct xcb_xkb_set_named_indicator_request_t;
struct xcb_xv_query_image_attributes_reply_t;
struct xcb_xv_query_port_attributes_cookie_t;
struct xcb_xvmc_destroy_subpicture_request_t;
struct xcb_xvmc_list_surface_types_request_t;
union ____933121F4FA1889599F702E16603DBB9F;
struct _XIMPreeditStateNotifyCallbackStruct;
struct btrfs_ioctl_dev_replace_start_params;
struct xcb_change_pointer_control_request_t;
struct xcb_composite_query_version_cookie_t;
struct xcb_copy_colormap_and_free_request_t;
struct xcb_glx_create_new_context_request_t;
struct xcb_glx_delete_queries_arb_request_t;
struct xcb_glx_destroy_glx_pixmap_request_t;
struct xcb_glx_get_polygon_stipple_cookie_t;
struct xcb_glx_get_separable_filter_reply_t;
struct xcb_glx_get_tex_parameterfv_cookie_t;
struct xcb_glx_get_tex_parameteriv_cookie_t;
struct xcb_glx_get_visual_configs_request_t;
struct xcb_glx_make_context_current_reply_t;
struct xcb_glx_query_server_string_cookie_t;
struct xcb_input_get_device_control_reply_t;
struct xcb_input_get_device_focus_request_t;
struct xcb_input_list_input_devices_reply_t;
struct xcb_input_query_device_state_reply_t;
struct xcb_input_set_device_focus_request_t;
struct xcb_list_installed_colormaps_reply_t;
struct xcb_randr_get_crtc_transform_reply_t;
struct xcb_randr_get_output_primary_reply_t;
struct xcb_randr_output_property_iterator_t;
struct xcb_randr_set_screen_config_cookie_t;
struct xcb_record_disable_context_request_t;
struct xcb_record_element_header_iterator_t;
struct xcb_render_fill_rectangles_request_t;
struct xcb_screensaver_query_info_request_t;
struct xcb_selinux_list_properties_cookie_t;
struct xcb_selinux_list_selections_cookie_t;
struct xcb_x_print_create_context_request_t;
struct xcb_x_print_print_end_page_request_t;
struct xcb_xf86dri_auth_connection_cookie_t;
struct xcb_xf86dri_create_context_request_t;
struct xcb_xf86dri_create_drawable_cookie_t;
struct xcb_xf86dri_drm_clip_rect_iterator_t;
struct xcb_xf86dri_get_device_info_cookie_t;
struct xcb_xf86dri_open_connection_cookie_t;
struct xcb_xfixes_change_save_set_request_t;
struct xcb_xfixes_get_cursor_image_cookie_t;
struct xcb_xfixes_get_cursor_name_request_t;
struct xcb_xfixes_set_cursor_name_request_t;
struct xcb_xfixes_subtract_region_request_t;
struct xcb_xinerama_get_screen_size_reply_t;
struct xcb_xinerama_query_screens_request_t;
struct xcb_xinerama_query_version_request_t;
struct xcb_xkb_counted_string_16_iterator_t;
struct xcb_xkb_get_indicator_state_cookie_t;
struct xcb_xkb_get_named_indicator_cookie_t;
struct xcb_xkb_indicator_map_notify_event_t;
struct xcb_xkb_sa_action_message_iterator_t;
struct xcb_xkb_set_debugging_flags_cookie_t;
struct xcb_xv_query_port_attributes_reply_t;
struct xcb_xv_select_video_notify_request_t;
struct xcb_xvmc_create_subpicture_request_t;
struct xcb_xvmc_list_surface_types_cookie_t;
struct _xSecurityAuthorizationRevokedEvent;
struct xcb_composite_query_version_reply_t;
struct xcb_dri2_destroy_drawable_request_t;
struct xcb_dri2_invalidate_buffers_event_t;
struct xcb_get_window_attributes_request_t;
struct xcb_glx_create_glx_pixmap_request_t;
struct xcb_glx_get_polygon_stipple_reply_t;
struct xcb_glx_get_tex_parameterfv_reply_t;
struct xcb_glx_get_tex_parameteriv_reply_t;
struct xcb_glx_get_visual_configs_cookie_t;
struct xcb_glx_query_server_string_reply_t;
struct xcb_input_device_resolution_state_t;
struct xcb_input_feedback_state_iterator_t;
struct xcb_input_get_device_focus_cookie_t;
struct xcb_input_grab_device_key_request_t;
struct xcb_input_set_device_mode_request_t;
struct xcb_input_valuator_state_iterator_t;
struct xcb_randr_add_output_mode_request_t;
struct xcb_randr_get_output_info_request_t;
struct xcb_randr_get_screen_info_request_t;
struct xcb_randr_set_crtc_config_request_t;
struct xcb_randr_set_screen_config_reply_t;
struct xcb_randr_set_screen_size_request_t;
struct xcb_record_create_context_request_t;
struct xcb_record_enable_context_request_t;
struct xcb_render_animcursorelt_iterator_t;
struct xcb_render_change_picture_request_t;
struct xcb_render_create_picture_request_t;
struct xcb_render_free_glyph_set_request_t;
struct xcb_screensaver_query_info_cookie_t;
struct xcb_selinux_list_properties_reply_t;
struct xcb_selinux_list_selections_reply_t;
struct xcb_selinux_query_version_request_t;
struct xcb_translate_coordinates_request_t;
struct xcb_x_print_attribut_notify_event_t;
struct xcb_x_print_print_end_doc_request_t;
struct xcb_x_print_print_end_job_request_t;
struct xcb_xc_misc_get_xid_range_request_t;
struct xcb_xf86dri_auth_connection_reply_t;
struct xcb_xf86dri_create_context_cookie_t;
struct xcb_xf86dri_create_drawable_reply_t;
struct xcb_xf86dri_get_device_info_reply_t;
struct xcb_xf86dri_open_connection_reply_t;
struct xcb_xf86dri_query_version_request_t;
struct xcb_xfixes_destroy_region_request_t;
struct xcb_xfixes_get_cursor_image_reply_t;
struct xcb_xfixes_get_cursor_name_cookie_t;
struct xcb_xfixes_region_extents_request_t;
struct xcb_xfixes_selection_notify_event_t;
struct xcb_xinerama_query_screens_cookie_t;
struct xcb_xinerama_query_version_cookie_t;
struct xcb_xinerama_screen_info_iterator_t;
struct xcb_xkb_counted_string_8_iterator_t;
struct xcb_xkb_default_behavior_iterator_t;
struct xcb_xkb_get_indicator_map_request_t;
struct xcb_xkb_get_indicator_state_reply_t;
struct xcb_xkb_get_named_indicator_reply_t;
struct xcb_xkb_indicator_doodad_iterator_t;
struct xcb_xkb_kt_set_map_entry_iterator_t;
struct xcb_xkb_new_keyboard_notify_event_t;
struct xcb_xkb_sa_lock_controls_iterator_t;
struct xcb_xkb_sa_switch_screen_iterator_t;
struct xcb_xkb_set_debugging_flags_reply_t;
struct xcb_xkb_set_indicator_map_request_t;
struct xcb_xv_get_port_attribute_request_t;
struct xcb_xv_image_format_info_iterator_t;
struct xcb_xv_list_image_formats_request_t;
struct xcb_xv_select_port_notify_request_t;
struct xcb_xv_set_port_attribute_request_t;
struct xcb_xvmc_create_subpicture_cookie_t;
struct xcb_xvmc_list_surface_types_reply_t;
struct _XIMStringConversionCallbackStruct;
struct ib_uverbs_create_comp_channel_resp;
struct xcb_client_message_data_iterator_t;
struct xcb_damage_query_version_request_t;
struct xcb_dri2_create_drawable_request_t;
struct xcb_get_keyboard_control_request_t;
struct xcb_get_keyboard_mapping_request_t;
struct xcb_get_modifier_mapping_request_t;
struct xcb_get_window_attributes_cookie_t;
struct xcb_glx_get_pixel_mapuiv_request_t;
struct xcb_glx_get_pixel_mapusv_request_t;
struct xcb_glx_get_visual_configs_reply_t;
struct xcb_input_device_abs_calib_state_t;
struct xcb_input_device_key_press_event_t;
struct xcb_input_get_device_focus_reply_t;
struct xcb_input_integer_feedback_state_t;
struct xcb_input_set_device_mode_cookie_t;
struct xcb_input_valuator_info_iterator_t;
struct xcb_list_fonts_with_info_request_t;
struct xcb_randr_get_crtc_gamma_request_t;
struct xcb_randr_get_output_info_cookie_t;
struct xcb_randr_get_screen_info_cookie_t;
struct xcb_randr_output_change_iterator_t;
struct xcb_randr_refresh_rates_iterator_t;
struct xcb_randr_set_crtc_config_cookie_t;
struct xcb_randr_set_crtc_gamma_request_t;
struct xcb_record_enable_context_cookie_t;
struct xcb_record_query_version_request_t;
struct xcb_render_create_cursor_request_t;
struct xcb_render_directformat_iterator_t;
struct xcb_render_pictforminfo_iterator_t;
struct xcb_render_query_filters_request_t;
struct xcb_render_query_version_request_t;
struct xcb_screensaver_query_info_reply_t;
struct xcb_selinux_query_version_cookie_t;
struct xcb_set_modifier_mapping_request_t;
struct xcb_shape_get_rectangles_request_t;
struct xcb_shape_input_selected_request_t;
struct xcb_sync_destroy_counter_request_t;
struct xcb_translate_coordinates_cookie_t;
struct xcb_xc_misc_get_xid_list_request_t;
struct xcb_xc_misc_get_xid_range_cookie_t;
struct xcb_xf86dri_create_context_reply_t;
struct xcb_xf86dri_query_version_cookie_t;
struct xcb_xfixes_change_cursor_request_t;
struct xcb_xfixes_create_region_request_t;
struct xcb_xfixes_expand_region_request_t;
struct xcb_xfixes_get_cursor_name_reply_t;
struct xcb_xfixes_invert_region_request_t;
struct xcb_xfixes_query_version_request_t;
struct xcb_xinerama_query_screens_reply_t;
struct xcb_xinerama_query_version_reply_t;
struct xcb_xkb_bell_class_spec_iterator_t;
struct xcb_xkb_common_behavior_iterator_t;
struct xcb_xkb_device_led_info_iterator_t;
struct xcb_xkb_get_indicator_map_cookie_t;
struct xcb_xkb_latch_lock_state_request_t;
struct xcb_xkb_per_client_flags_request_t;
struct xcb_xkb_sa_lock_ptr_btn_iterator_t;
struct xcb_xkb_sa_redirect_key_iterator_t;
struct xcb_xkb_sa_set_controls_iterator_t;
struct xcb_xkb_sa_set_ptr_dflt_iterator_t;
struct xcb_xv_get_port_attribute_cookie_t;
struct xcb_xv_list_image_formats_cookie_t;
struct xcb_xvmc_create_subpicture_reply_t;
struct xcb_xvmc_destroy_context_request_t;
struct xcb_xvmc_destroy_surface_request_t;
struct _00580D67DBBDE0DF5EC3B468D69A2E22;
struct _00C45C682C101D7F0C6E69C609547065;
struct _0187150EB0144696EE5998F276804071;
struct _019B8CCB864AFF4771EC3D9E3020C8B5;
struct _019CECDD6753AAB6598130682127E88A;
struct _01D78593398EF5D4C7B0D882F4AC2769;
struct _021E9AD0CA1321D22959C0410667B3A9;
struct _0274777D2FCFAE6C6A54957AD1D04326;
struct _02B7C110B96F422043FD747664A5A945;
struct _02D3975949B56402107C534E336AFF12;
struct _0340F183E3D57BA98D278D6E8F4BBAEC;
struct _038B891F4881F16F541AE58F6D49FAEC;
struct _0394AD1A4355901AA0166B57E4564BFE;
struct _03C803DDC9061B143F519D4D73BD5571;
struct _0461405B9932B2ED05AF0EE41FC655EB;
struct _048EDDC221AC6C2316AA6C5DA748547D;
struct _0490893E281F28CD04BB03B56188F30F;
struct _04D0ADC31935FE4C3A858C08EAEE2E45;
struct _04E4DAE4A3CDECE9860BD3B57B108BDE;
struct _050D667D91EB5E6EF621582721732C5C;
struct _0566ABB5D656E83D377732EE088CAE2E;
struct _06385DA08CE18FAF207AB6F3372C4AC2;
struct _069CA722659D31B5E21E1ACEADA10473;
struct _06CAB5296C39900A9CE51DBF4F560AD6;
struct _0702AFAE85E523028461380896C86760;
struct _0733D28D39B544C0D1FF9AB5A89F168E;
struct _0782F5328933DE790EA437AB6F909CFD;
struct _07A0BBE0F3D6D0E97B5A30869B6D39C4;
struct _0822494CA8335A3B81E4FAC70FD7E6A7;
struct _0894F55B6F728822A381396F6EE8B24B;
struct _089D19AFE35A3BB9549C0E2B9D96DA0E;
struct _091A8121C3C792D8858188DBB434C01C;
struct _091D8C0512871595A9DC831969F12B34;
struct _092DD72AC6B9BBA1C79AF097B6F8E844;
struct _095E04B97CE84C59083222C7D172F70D;
struct _095E6FF95FC66C44DDF436071BD80AA6;
struct _096B79C2878CB1494F01039365F649CF;
struct _097BEF8EA5AD56087B71A05CBB409B26;
struct _09D1663D7DAEECED4A739563D5B83B0D;
struct _09E69E0556021A33BB43607C87C36B45;
struct _0A00068ABA4408D4F92644683EE31C51;
struct _0A270F69B196F9EFA6F2CD4624EE5655;
struct _0A710E56E462CA6F472C6BEF95652ED5;
struct _0B4ED8A417FCECA210AD3881277BFA25;
struct _0BFF5F3619172B7B9D3CD50426ED3418;
struct _0C1A989C237847E9E0FEF5D20B714342;
struct _0C21A611EFF1A0A24872DDA75B66705A;
struct _0C41D669CC7829CF12B135747142967F;
struct _0C4B847EA89D426433C47107E0756204;
struct _0C5B3DDBD9AAB3637C3C3A1D41E42158;
union _0C72A33DA16A3FF6F4A3A372A725953A;
struct _0CA5FB17303BD72ED823DD36CD7B7A7D;
struct _0CBB5A6AED43B7843759DE8BFE16890A;
struct _0CCE02F838D9CC63825202C012B6DAD4;
struct _0D0114D795552F54A79F202DB3226B55;
struct _0D158C80ECE88D73A8DF0C6BE4079214;
struct _0D1FFF2FD08E009A212466AD439E256D;
struct _0D364CBB4DE5622667695AC90920144B;
struct _0D45806D0AFB3D6C5E140525A7935E9C;
struct _0D9E7AE1C1D47F10E3F53D770D6A64FD;
struct _0DACB856E79E56F4174777CC52DD3C58;
struct _0DEEDF24E65D3751BB6E7763FD103A13;
struct _0E536A4A735E73BADC27E9D377D18348;
struct _0E6A401F8BD845D438E717B135D77D29;
struct _0E70E9A2AD7D0637C6C018491CDB8CD9;
struct _0F2B39C4889BFBA0BBC9C66D38A1F5D3;
struct _0F4B06D36BC906735A699C1D59FCE038;
struct _0F63C52D50F31C01632B7951AEFCA4FD;
struct _0FED49E1AEFB77840C2E86EAD6756677;
struct _10184D3025615BB97A779285FBA6EAF5;
struct _10D33281027157B4990D02C2868FA96A;
struct _113ADE3249D8CE9145901B23810AE272;
struct _11B292B49D7574EDADD15F3F19C7735E;
struct _11DD07E0BD355014207FDEFC87674481;
union _12139D15327A66BC6BD2CA276E233382;
struct _121BB16CF18BA8DCF6DED8D25AA283B5;
struct _12883A0710B467FBB4742064A9BE69DF;
struct _1296C23E7EDA709A08D87BF116515624;
struct _129AE17A1813221886388BE0CE8ED06D;
struct _12C70FB380D888247B65F57E99B647A7;
struct _1309DA1401AD871232334AF15910FB3C;
struct _13745364EEA695BC65B7D4AAC1B24515;
struct _139D55FE8C88418352B74C39DE937D4F;
struct _13C78DD7EDF1CF1C4AE9B0D54E891AA2;
struct _1463B1446DFC3BE3591F88FAF0B4315C;
struct _149F28F052847359C6CBD46BA265755A;
struct _14A823895445B846828F3D4F9D47C3C9;
struct _15146D0240F64972E1BB855D6E1C4620;
struct _15A7CADFA0C3B6AF2858DE2248F61F64;
struct _160641F2D897670075418D2E6B733231;
struct _1647B670B91D8E45F62891AE6C005714;
struct _16B1457F639623288195B3438C14DD7C;
struct _16D469E4E47B7327E679AF2DCECA539C;
struct _176B59BEDA9B70C3FEBB155A23358FC4;
struct _17BA7F3533648026466E6A0BBE53DC05;
struct _17E8534BCB72EE42B6B6995F8B90F203;
struct _18A7FF309BE85B010DF59BF700116658;
struct _194914D9D4C0AE9A8FC55BCBB00ED166;
struct _19819260117A2122793EF6A7F838A8D8;
struct _19958847318214F780EFE5EAB3B1A0C9;
struct _19D622DBC46A6E651ECC62511BF64658;
struct _19DEE1C64F7EC3DDB040A3404BEC0D9F;
struct _19FC7662DCA21D9E3B89E1DCC09F0A20;
struct _1A38A2B7DACF749A0F420E169943E110;
struct _1A68CE477B37BE31DCB043B6F4664E49;
struct _1ACEBBD1BA76D1519A3D809460AEA55C;
struct _1B380CA5B169C2B25F5DE0AF08CB7E59;
struct _1B5F367B5963C48BD3F34F9922AB12D3;
struct _1BB85DE3512B339811D8B67FC16B212D;
struct _1BDC7C7F49C92F644328BBE26F29D5DE;
union _1C4035FDEAFFF0FCE26E66A96F6BBEB4;
struct _1C8B88A4B2A3D81E79624372BB131558;
struct _1C989109A1E2AFEC30347169F1D74F63;
struct _1CFFE104D7DFB51E74C0A01BE327DA92;
struct _1D1C51FD6E0EDC1C8CC0D22E01FA7C4E;
struct _1E42E411FAE309B90570872BD6DA89F0;
struct _1E4927A029C92C0FD595CCC76CE8B139;
struct _1E68C84E6BE3B673D767CBEC47B3DECA;
struct _1F0742A31307BC27E4EE3AB33F15E494;
struct _1F1AC3FACFBF0931A43D0CD999C4D927;
struct _1FC9C4745BFE4A4C45A6D008A791D581;
struct _20372CCC7895932BACE6325FD7981C66;
struct _20B3D843FDD34C018CF0822ABEE24A07;
struct _2178B426BC8C8AE0F5D29E93EB059F03;
struct _221FB40353091864D31474CD79EAAEF6;
struct _232CF08580C586A710BC040E507CB83C;
struct _23D39CEB96D177F7D0B7BFAD0D72AB23;
struct _2427DE1D26AE87CC436F1C07EF51166C;
struct _242BB1C523CD001B2A53A1A084DAE0C6;
struct _246DDDA2B420E716CCF540DCDA3D282B;
struct _24BF153529F05C45F0A0621575016FCA;
struct _24F12A37FE1D1AEA7948B3C7A0452456;
struct _254D69ABE7D19BD30B5C577476AC4C63;
struct _256B6D485D886C7434E6D059DF9BE864;
struct _271D5A48EF70FFAE3A8D1DC7505162EA;
struct _2736801EDAA297EDD6CADD7FD51E7640;
struct _276527E852EBD04F842021527F4FA45F;
struct _27AC02CFF97A742F93959B98FA171589;
struct _28183F13DB7442E77993ED2BEDDC9E43;
struct _281923904974B9915ABD548A82CFE427;
struct _28432349E9E6DB3D22D342B43F161279;
struct _286A111ACEDB435E271A47289B65D34E;
struct _28DBCFF2F5EB26695C388B23D6931809;
struct _292923DDD4ED46EE83D974C820DC3932;
struct _297345D7B065E1B097A8423BD8077946;
struct _2979C697EC1DBCBD00D7AAFFAA91F55E;
struct _29C593C589279C3E7D511580F3E78129;
struct _29CF6037BDB08BCCAAEBB0F049E81934;
struct _29DBA087DFE16744A29CB8F8CD68D43B;
struct _2A2BB2E6A1A637B547E2DF81ADC3376A;
struct _2A4E2A3E6DCC7FD4DDF34506A216CCE0;
struct _2A5F331BE8D13DBE7F0EFE2DE0745FC4;
struct _2A73BF0E4CA9808D683BEEEFEEB2900C;
struct _2A859DA02CD5E3593B5918B42FA7FFEB;
struct _2AC87F894EE3258143DDE890FCFACB0D;
struct _2AE07F4A994C5FC6C65BC46898F1D740;
struct _2AF778DA43FB8122C2FB509EA1A1C573;
struct _2C268D9809C6E9DE2B818A0BB7518C2E;
struct _2C303F742F1AA0AC713FA8EB1EC01C89;
struct _2C76E819DF093E6F4CE4D5F76713877F;
struct _2CBA644A081B49363F2046758E32CF0D;
struct _2D0C5444B9314DA523692ACDBC5F4808;
struct _2D59FDEE4261500A2FE9AC0FF5270F5C;
struct _2D6D05448839E8D39EF22D0A7A7B9E49;
struct _2D75EBE1A6467BFFE36F9C7798C50507;
struct _2DDFDD5DD8CD88FDBBE41C4BA29EE9C7;
struct _2DE9659B7EEC2253521CC6BF2372B999;
struct _2E0E2C12F04118C9E52BAE749EE378FF;
struct _2E22270806C47E05D9B4938893A6CA7A;
struct _2E4398F466C16291FBF2DFDFDD4EEEFA;
struct _2E55BACA418C7D9DC01173D7FC9AB491;
struct _2E56E956F88F593FE24676E86AAE3518;
struct _2E669CC187FBBB2ECC14F5757D46E269;
struct _2E67F07AE07052B8E2E5530980B63AB8;
struct _2E734CDD133C90FA8809C11E24CF40CD;
struct _2E772061F36030946C15A90398CEA89B;
struct _2E8E071D0F1855B453728BF138794906;
struct _2E963936DF2C8EEC00CED466180278DB;
struct _2EA2B750C06C2344CAE427A9270EC33C;
struct _2F57F65BEC0740F2386441D498F16321;
struct _2FC2A6BC4D5C4BA98ABB1F848EBDDDCB;
struct _2FC37C12F50461D7B99376C23209E757;
struct _3088BFAEEF676422C10800B8EA2DDE0D;
struct _30B70AE4F294613C62268FE45513ED13;
struct _31656A24DD6A4D60E66F5C984119D448;
struct _31724D647FFD3CAE2535F1783448B15A;
struct _31DC1A9A30C8BE83503485AFF4563DAB;
struct _3208E1BA8126707DC1A488F29A0DED72;
struct _32138DB0B6D2C0E6C623C7DE1AD597BF;
struct _3224684BD501E054CF1A67297C7290FB;
struct _322E4D740D2A723112F8227414848916;
struct _32453B3EC12C1083BBBEA47A258ADABA;
struct _32814486483B74398EA3D6D6C36E06C2;
struct _32EEA813D9DAD40A14F6989D3C5227A8;
struct _33436B6E470EAB040EE5564712CFCD29;
struct _335EDB02744B103283B800FF919FC940;
struct _3369594E17BD6DC3517892D04DD0216E;
struct _338A332AC07B59A36792FEE160C5A511;
struct _33AF8112BACFF99F66629433CE03587D;
struct _33E0BD21BC9E25CB376AFEED9A297D0A;
struct _345FECB84F456AF148A04283FEB93B5B;
struct _34681C3D6FB58953006C9844DC50C14F;
struct _34E3615AA1F5E404F43F7626305BA1D6;
struct _34EAD46D4136C0FB62D0AF99E563E31F;
struct _355FFBAADB08B4CAA5BBFAF829DED10A;
struct _3578C73785DC808474EBF8D1E351F2D3;
struct _357A9604AFCE0041C6457BE84E687FE7;
struct _366B0E14DFFB947D75CD3E464CBAF37C;
struct _36BEE3A57B9FB4D58D0EF1CD5EE3E1F6;
struct _37808375AC776F173FF34D4AD244857E;
struct _37A9DB4B311662424B6FA129E06762F1;
struct _37BE2491590EE7EB76B44447C3CB76CA;
struct _37CF6FD3D8604C440825361FBCF768B5;
struct _3896B2BCF45D7EED33CC60DD2030F7DF;
struct _389F741C4688F992C1DDC28AB9B68F46;
struct _38AB55CADF3218184FF2A828A7079C62;
struct _38BC431CF83E096863532D796A6E7F77;
struct _38D9E3C539C38752A8877DF0574E9A10;
struct _395B269B2EB9353EDAC9E4036758953F;
struct _3982B52BB2F6F242AE0CDAAD29A77640;
struct _3A28C96D52FB29F9635C6203D2891B70;
struct _3A8E116D72DF0C8D49D51593D925AF55;
struct _3ACF1F82BEC6DEE83FE33E625399BBD7;
struct _3B00234C5998E2ECB70FFF97A8C8B026;
struct _3B0A3C5E53A42F20C20C43D841AB73C8;
struct _3B81704CAFF80915670BCDC93E5E5502;
struct _3B895FF4AB049C141C5F7C25E8036379;
struct _3B8E4E23B9740784A6100A2DE9D445C8;
struct _3BE679DC1FFA371624A790DBC1F4853A;
struct _3BEEF239534EE9E2D4AD58999E56F197;
struct _3C0F511821AED167BDBDCCDEFF5867E2;
struct _3C37F6B251EFBC95637A014CFEA9DDEB;
struct _3C4960FCBBDB3233211578F053843777;
struct _3C4C38FC10522588E30AD31A846C8E7D;
struct _3C57A176DA13593CE98DBC4E12CE23DD;
struct _3C663E68C00512772EEEF9594AC2C00F;
struct _3C68DE36615A2A96935F4E8A62136411;
struct _3CB4B96D60588C36FFA558911245B240;
struct _3CF9C552218676756FBC5AC837F62592;
struct _3D2747B906FBDDB46B196214774699C1;
struct _3D278926CADFDD0A67AC279ACD531B59;
struct _3D6C9E6FC2A1930EF06F70ECE24ED2E6;
struct _3D73D80F45981F599F79B091582EFD16;
struct _3D7F29ED0930CC4F7BF457E53790E4B5;
struct _3DA4CDB67EF3124D6BB6A4128B3FCD7C;
struct _3DAB27C0C642F6AD6A1592659EA9CCF3;
struct _3DC7B7400B12314EE6EFE34533277AB7;
struct _3DD3CD96FAD56E1211E0F63114C705EF;
struct _3DDB46D984C469553E00D9B3BEA3349C;
struct _3DF25DAA63A6E3C01476C2ACB580EE52;
struct _3E18A7AAF5D17F3F11EB968C0A78AED4;
struct _3E53CB2ED1FED691C94CE793AD197BA2;
struct _3E84D1386F10E26A4E3E4F22FDD3C8B8;
struct _3F0A60266B45B227E929296904C751DD;
struct _3F2E090B53825C071BE42E5C77B221DD;
struct _3F85C0DE38758494B25116473C086153;
struct _3FAE0D239BF72F1C4090C29672BF8F72;
struct _3FC3C3386C6C3548296DFC9EB081B6FE;
struct _403017519C186A112CAA8988372FD914;
struct _408ECFFBDBCCAB2F4BE7BF225F1A7284;
struct _4098D4947D8DDC1E7B8C97E1A94B6364;
struct _418C74B7659B6963E50B421CB8AEDCF3;
struct _41C7698D6770F38A993CF1591C6D9C21;
struct _421551632E56BA5B9AAA3C53AC32257E;
struct _425D596FFB295BDC9ECE8B5455A7138C;
struct _431023746282E83C34446CE1DCC859AA;
struct _431497C136870E9873948068EF0F03D8;
struct _434B3255D002B67E7352AD09968BC579;
struct _4489EB38A238A95680D8722B994EE839;
struct _44921DDD4632BD4A3848A6F76E5AB5A7;
struct _4496CBA88907C11C6361D9179E75F570;
struct _44989FB912D962B2DEA21D74F6F43DAE;
struct _44C6D9B4A8493A71FE6AEB2BA1147362;
struct _44DBA8761062EA5D0E0445C058A5F0FB;
struct _44E50AEC2878F8A6376C06FA64195504;
struct _450D4081AC7D58DC5B6C23FB01500D9F;
struct _45331FD382D3B76DE50383933A2C35C9;
struct _4543C93AEA47F6ED8C90F8F964657E96;
struct _4550F01C1AE59E404A8C00C15C6A89B9;
struct _4581608EB282A4CD84CF9A6FF906DD32;
struct _45BD469DC424D3F368EE6E10DDB8D8EE;
struct _45DCCDFC0525EE913BAEBC241F6FB2DF;
struct _4664B325D7B1C568276997F8FB024EC2;
struct _470449F8043B0E95436C3AE3811CEA11;
struct _477257A9E00A927C5CA4C8DCAD23E65C;
struct _47789CAF959FABE2F5D937697F56BE05;
struct _4788A0C65CEF1424AE2DE816674E1913;
struct _47DAAB86EBF09131080EDB83B3644219;
struct _4856EFEBDD7E53CA21A9CBFC75FEF206;
struct _488FF45B2B0EF525AA1AD13B1739492B;
struct _48974C792553FBFA318CEC22C625F222;
struct _48A6A373861130075F8524D5C353FEE6;
struct _49A9C69F1FAAE36175A766361397A248;
struct _4A016A5603D15160CDD9BBBD4586D83A;
struct _4A5D5D546E7D786034D6559D1E5FBE4A;
union _4A6884A56FE442900684DB208A74F8AB;
struct _4B29FBEAFEB74D66435D912679576990;
struct _4BB2E57EB8074CF4622278B169F475B1;
struct _4C0A166D0FCB5B830093FB9F7D7DFC34;
struct _4C6601BAE3B7FB7226E40FC6ABCCD221;
struct _4C6B28AF05B44434FD231A2EDF3D1534;
struct _4C9FC87DA575F754989D5BFCDDDAE424;
struct _4CAA9B0307CCA9BCFEBCF54A65F793DC;
struct _4CEF0DA0B6BB912CC29F60746948E744;
struct _4D0B2EE74E9FAFCBF56BDC59F25A7FDB;
struct _4D2E0013E954DA651F15636ABC395F09;
struct _4D69B6347F056FE268056727CEA155AA;
struct _4DBA840A262C58E6AC422C7E2FFFF3EA;
struct _4DCAC2088B3F168EF4BFBCEA383ECFD2;
struct _4E034CF603E977B1C171CF8061167D87;
struct _4E2DFB9F6290197309D31FB10928FA58;
struct _4E7073A36C65C782742204589C7C453B;
struct _4F622AD2F1F50F32A9A86AA5D4320B7D;
struct _4F69801DA156947B017328D4DF73EF11;
struct _4F75C09F59EAA25C6312C1809A75A428;
struct _4FE6F5ECACFA93E764B6E0B251EFE623;
struct _4FFA9527088137D66D8D180D61C68358;
struct _50157A8979FD42735599E52566CAF2B0;
struct _5017C5E321C1F8BFCB8C657324B6EA8C;
struct _5077D3CC3DD590AF02C9E55403D17F9F;
struct _50E42323027751282F1104957020037E;
struct _51727A972DDFA83BAA2CC416714856EF;
struct _523CE37B1F7AC95341854764E619AB82;
struct _524CF13A1D734F6153C9475201DD66D0;
struct _528C256D64E70EF258C44321FAFFDA35;
struct _5342985482DA4551756A03BE632E6931;
struct _53996C97E395EF20FC508697C3EEF92C;
struct _53A84E5818A8BF56A6CBC41177A9FFE2;
struct _53B2C5E872CF4691EFE90F887D66B7FD;
struct _53D806E392066563D2EB8AD5676DF4C5;
struct _54527827121C21F3031526454FE9C7A8;
struct _548F59098DBA4939E643BBEF2AD26EEA;
struct _5588D47BF677798F0DBD9E168C93317B;
struct _55C4BAE65683A06129AA1262EA0CD4D4;
struct _55D1EED960AB10AAD38BEA1E9F59F1B6;
struct _560A03400C719BC685F99AA3989F50DD;
struct _56236F995320E9550D01648098F1E75E;
struct _56876A3CF1ED32735E0999A0D66A4738;
struct _56F965C4CB1B37CA1C9344E914749FD8;
struct _5763F2EC7349805D26B2ED34581CC2B6;
struct _57642C20A930BC40CC56BFA51EFC45F8;
struct _57E6A23A76D16D83EF023BCC9C7B7628;
struct _58058F4C4926147A1BF935BBE1E04307;
struct _586CBC0EC33709906F5B6EA510EDE79F;
struct _58C3F68DE6E766EC315A68C29D87018F;
struct _5AAA2BA072F64AA18930C6E033859039;
struct _5C0DD3C4E70CCCC9965B24A6BE5ED8FB;
struct _5C2B60FA26E73A1BF39A96E97412C65C;
struct _5C360CD6F7BDFED17568144DDDEE5A5E;
struct _5C7A236BA0562DB05D77CA85FA8CD202;
struct _5C8033F90A64FC4676BFB935617D1B44;
struct _5CD0DDA75FC8A64FD62E45433429A157;
struct _5CD4A96D42C01A4BC625F6F1B381D291;
struct _5CE23C12CE680B06D74E0C7033A4C5D0;
struct _5CFC2639D93A82964D22ABF82B05BF7F;
struct _5E29C5FF94304EAD83140C47151323A4;
struct _5E5FECD46FC629FFA3831CFFFA8A0613;
struct _5E8F645B7662834A694E868B27EBBB24;
struct _5EC50BA61A7AE0BB02D4340472A7D806;
struct _5EC6E86656B6684A0C8370E4CB53DCE1;
struct _5ED203E6BF1B06D8F06879722F6B66D4;
struct _5EDD4B4F882E321F07D8AFF023DDDD7D;
struct _5F0218706A29D3B501048FD21A470406;
struct _5F1426FF167D9E06CE7F137AEA610D0C;
struct _5F1D1C367F851FDE7EA3DDE22527B9A9;
struct _5F6963A5B3CCD1D3B53748FF8C021BB0;
struct _5FD5198515091F6F9684846B8D2DAFFB;
struct _60FD28E41E68D30D206D9EC072DAC7C8;
struct _6105F69743B5F4DC3D2725A2474E8E7A;
struct _6136D91980F3ED417B16959F6289782F;
struct _616DFE8EE921B679729534094133FEFF;
struct _618636EC27B0E4EC9B44F71D22005A57;
struct _6197E9F903ED803C824E8A215640B820;
struct _61B607A2274ED5109A268B0B2173104D;
struct _61DCC48F09BF582DF809A259BD2C270C;
struct _621D16500987A711CC39A0AD4484DBF8;
struct _624041EF38A3D722ECC431A5F82DF930;
struct _625B72EC204AD184FA367A67F4C8645C;
struct _625DD72E42D2E4120693244DFAAD3348;
struct _62E4225A05F3FA192F1EADC1962F3FA7;
struct _6313E54CC161B7E5C4F7C30B4DF21654;
struct _636E06EF14FC653C9FA755BCE21D4A3F;
struct _64419251F3172C7227A52AC30EAD3C9D;
struct _6459665531F174B64FEE3BC376E34521;
struct _648B167E5FE8430EFE8E72D1CD79C82D;
struct _648D5B97A5A1D2D2729A4C51B6643734;
struct _649615F18ACD2676C0117F64906D4BB8;
struct _64A10EE371E893EA59638110B65879C5;
struct _65CC1628E84FE837888FBDC426B5411E;
struct _666210E100F3CB5D4A75782C69E711A8;
struct _66669466698BDB410095AFB1AF18F4BC;
struct _67223C7576264C1E3F5454254FA2FCB7;
struct _67BA815F7CB0308CE8EF90A300D23A50;
struct _67EB8B73AFD8C3C32B210944A0EE6A33;
struct _68EFEC536F03412D58850C40CDE6BAE5;
struct _691123D744001B8BE68B84780CEE447C;
struct _6954A090FF674864C2EF0B367DFBE910;
struct _696BFCCA82AE9FEB0738E58DD35D6784;
struct _6999C5F45A7509ACAEE4435BC7D6BE11;
struct _69AF41EBDA657EE1FC7AC417361C4229;
struct _69E09FDE2534802BF7D73EA82BFCF169;
struct _69EBDB3A774B1AFC7F282884D9B780FC;
struct _6A1E68C5A198D57F5F76A65BA6AE762A;
struct _6B1106A64659663BF4BA9950E3F10E4F;
struct _6B16D0CDF8A6D24951AF7FC52FCEB99B;
struct _6B1E97362D63C40B98094F056DF5AEF5;
struct _6B48FEBDDFB0C4A6A52F69D91E3552AD;
struct _6B88FAC29A9971BB7647F24C04F63FBE;
struct _6B8E614C81B948CB69ED41556D403C37;
struct _6BA9BAD34CD581FCA2A7610248080448;
struct _6C157D281FCCF3AD18E5920BAFADC6E6;
struct _6C1CA9801472DA3CC516BCC310DA8AB0;
struct _6C531080E0330861B126A2833D727845;
struct _6C8DA88AE0F795AA91A7651F5464995D;
struct _6CDBBC56673808DBC2DA2091B1C251E0;
struct _6DC10CFFA94DA978AABC1A085F692023;
union _6DF3DE276417BF858702C9AB9AD460CB;
struct _6E58DE7E5977316D543695706C282257;
struct _6ECE5F7C46F37A2EF909042FBC6F3E21;
struct _6ED97C3403DE0E72A6D3A9179DE884AD;
struct _6EF26E53794972BE8CF37E7A46EF3D5C;
struct _6F2DCBF5C42D0C323967E7E74FBCE3A0;
struct _6FA9C15AF3974CA3A341A1191B3752B4;
struct _6FB552EA524F38554FA8528F506D34FD;
struct _7086C2867C7D4B0306B00A1789D67F56;
struct _70AE50C60636BA34AE17DCBE089831D2;
struct _70B44F1B75B46BEFA77A9E3E77B6A4A4;
struct _70CE59A0CFDF5BD02F17410240B55142;
struct _70E4CC7E54BA43D6E5622AB555079691;
struct _7223AFE63A8123EF6F49E197890FAA10;
struct _7227A9398068B3A0AEE87CBD043E51D6;
struct _7250734D77F79F0949305E641023FE62;
struct _7286F01C0F25CC9697D9D7CFCD5C4B3B;
struct _728753621D8EDC45EC3551358A89F0F0;
struct _72F0243C2EB87E20847F7DC0E66AC2E3;
struct _730B0A961A25B34AF2CAA3D5B8639BBB;
struct _73354D6822628524A3CBE7BEEEBEA7FE;
struct _7374270A99571F2A61066392503F95BA;
struct _73B4058B96DB787648F70BEB3765CE40;
struct _73FDACF34BD773846371F264A3DF2411;
struct _740C46A196F463FF63DE6C8E1A8E1740;
struct _748E6396DB81A71CC67026C5868B0A61;
struct _749257863A78ACF83BA10F9F553F4560;
struct _7545E18792FF2C20F9BB4220259E75A2;
struct _7552ACBA9FE9B8170F87BF8276CCD8D3;
struct _75FC8135A7E79B969971564222AED43C;
struct _75FD820D0CE6C215ACE04A8FAA270A6D;
struct _768514BAAACF268575EBDB64572D2040;
struct _769EDCF54321544EF8E3F46B10230032;
struct _76C432023C30A60D6F0CA03B71EF1A2A;
struct _77B5DA89F8222E8D6D7C1ABF47542A30;
struct _7801A91C37AF2AAC45BD7DD78FEE34EA;
struct _783627FE6E647043A8324E9AB2705236;
struct _786884C59B8460C39A9F20EFE8931D61;
union _78749F0999040F0464754753F1A300EC;
struct _78B46019F679C5E70AAD7C2ED28277AC;
struct _7905F1106D6192C786F48B3D63EB8F32;
struct _791AF81D366397FAE28AFC7E5E3FF4B5;
struct _797907A242F94DB9200676D3A724828B;
struct _79D3745B39F9E71262BFBA7985E1C7DE;
struct _79F2479F433F63099A0390C39EAA789F;
struct _79FC17A0C7A3F31E1105D33CC8C2AA30;
struct _7A455DB3BD331D79AF16B3231F86E0C5;
struct _7A75335468D0F989B2CF91A04174818E;
struct _7AC6EBFF84C7D5C6D4B5835EAB8E1003;
struct _7B1AACD52ED53B3363F77B2C48FE4393;
struct _7B203B1D6B17DB4D229BE0C85CFA6293;
struct _7BC974A8E90EFB1AB4A63682D9BB99C5;
struct _7C0193CACD5E2992F63533D0F1598B1A;
struct _7CA3BFA0E2ACF16B623A64955922766D;
struct _7CE69C85D0575A23F013545F3194CABE;
struct _7D044E98E295B1AE6D053F4E096E3E34;
struct _7D569909FEB0E294999F498DE699AF74;
struct _7E3EB1143DB1648EACC9B112CB231A1D;
struct _7E7BC6786790AB56FAE456C8962F7E9D;
struct _7E8BAC4262F9B7E47F22B721CB72642D;
struct _7F1527F4980126EB9203A44DB3E05AC8;
struct _7F79EDEFC3CE5D4824B190E83A46D022;
struct _7FBA3E320C553851CFD795D35ADFF810;
struct _7FFBF4E81BEBC201DEAF468EBD0F9AD5;
struct _801F83CB04C22E52C720D7D622E0E540;
struct _80262239D5DEFAC7F5C75EBAC6CCD93C;
struct _80FA3E9E2CB8CB94E88F4B4B7A4726B2;
struct _8101C547F89E636B6C8AA4FE510BA77D;
struct _81227E6A2E975B2588700A3A20196845;
union _8172E892401C380D352F1B0F85477F39;
struct _819D62649EAF67B78691543FCA1EE6A8;
struct _8215DDD75066012239D919FF6D1C96FC;
struct _82ABCF53CC2EA0D7663831DD8801F474;
struct _82CA72D52CE6587547984538D976BD84;
struct _82D86B5B3C9D9E6A7BE98808A956EE82;
struct _83A9560127C5CA1AF601DD4E7C3B278F;
struct _83DC73F186BDA0868BCE8C2AD62B1A32;
struct _85FDB541DDB6AD166616600B6EEC2237;
struct _8608EF80BDF2C775EBE0E30BF11DBE52;
struct _86FF50E5653523180B04F1ED7D105C35;
struct _873989352E2697A1AEEAE6DD5F2AF6D9;
struct _875800A09C817D61F833D1479DE8ED86;
struct _87651D9D31681607819E457EB5237059;
struct _880211171E610BEC08A41169F91F4D60;
struct _88C1685F053777CC7A3B1D0ED0ED52E3;
struct _88CB499CEF7C95AB64991FDC4A8C267A;
struct _895A6AA0EC03D09B638DC82C89B5E3C4;
struct _896D23E0DCE5181A858CD1FDEDFC63B0;
struct _8973D72E68A3D7427BDE924AB847E810;
struct _89ACFCE72F27CF3E8997F0C88CBC1FEF;
struct _89C19CA17CD4EE2490EC1EBDB53AA079;
struct _8A4D2DD0535D3740C9D9302B62B9E8F3;
struct _8AC915922B7872008F9FA0F659707AB7;
struct _8AF8D50F7459E989F83B822632060AA0;
struct _8B1EAF7AAA57F33F38F96E94C6EE2E44;
struct _8B5E934A02E5303CBD075C3822A8790B;
struct _8BBFFC8A8A28EE3AA7AE1BC2A0B06E26;
struct _8BC4543EF695142B249D7CC5D558FED0;
struct _8BD856D0EABB45DC0AE6203B505E4C05;
struct _8BE617EABEB75C8FAB9CB9A4A240FEE3;
struct _8C2FD448F8CF6A602A866F997822A598;
struct _8C544AC6C871408AE6573DA61B3B8C70;
struct _8C606E8C629293621C4597F91F88DAA0;
struct _8CF3D5156D7798F5A42A7DF6A044CF98;
struct _8D1982C4FDB5289A11AD10918D95A5A0;
struct _8D276D88AE7A52B5A0CD113CDF9731AA;
struct _8DDBCDCB4EEBED7E3946A9A0AA381214;
struct _8E1349AD4AC8D9A4F1DC84C54B0BE169;
struct _8E399329B49199432AAC98786CEB8DFC;
struct _8E3F17DF06268256B33C950219C36638;
struct _8E9D6FDA341A5CD3E2BA41AECEFC8DB5;
struct _8ED1EDE36117F631290006C3E9446427;
struct _8ED815E5FBCF56EC30B814FDB5559582;
struct _8F4F122E327FAA30019691AE8AD7A3FD;
struct _8F523C6F05AE02FCAAA5D62A1D3E087B;
struct _8FAAC4C6A9B09454B312C1AFE3312BB1;
struct _8FB70F9DF6D59D5E0632B90366E8D2D5;
struct _9081086C0126123317B5AEBA108CF51B;
struct _909A0603F1AED8DD09B6D1E58BF56A67;
struct _90B3239242A1E7B072ABC9D9983310BF;
struct _90E70BB8598364AAEAF6E156E433A864;
struct _9116D1D1673D46BDBD8F6CDE5760A584;
struct _914C84823AB334B2B6A44B1454234A7D;
struct _91B6CB490464A345E007449761AA48F2;
struct _91DA6C1759B9453440D37A912FAA4391;
struct _92276D725373BB3B16F8CB5C6778E662;
struct _923A7E11775A94934B3B1E345D223966;
struct _925C5E9ADF13AF08F8E4BE2898EADC8C;
struct _9260E9DF4F900591ED372CA82BEE9A23;
struct _9299B18999A9011A0F23F2925A47CC5A;
struct _92C41753C7AFA0CB8157A9B4DAA6D4C8;
struct _932C98117C7FBC3E6D86F96BD678D2D1;
struct _9375A326D5D02800B5E28ACECE8480CB;
struct _93B69AC16094E7C5789E83029DFD84BC;
struct _940A6A704B5145F6559156337DBE573E;
struct _9411444C71E1E75572D5F3D9F74657B9;
struct _942EBE9ABD97793534DEB0950390C4AB;
struct _94C04A488373DB802AA4CC07AF27941B;
struct _94FA839E2A2E2CDB2FF04022E6E0CAA1;
struct _9522E807BA7B29263AAB53074ABFE969;
union _955F1759725876F7F898C71A8A4DCDA3;
struct _95A1135F6D8D8F6471E320B5C82E7B21;
struct _95AD98905D37F3C4828B107878AF9BCB;
struct _95C1FEB0645AD02B5C1E9ED7A3FFD156;
struct _95C51ACBAA3B94C874709B766C465057;
struct _95F74D7453875C15752E25CB7F1BF0CB;
struct _96852D299A3BC18B35313C48EFA48634;
struct _9722585E737591D9DBBFC1CA80083F53;
struct _975F191B774855E1091B820C10595CF2;
struct _9763FFEA107F886AC733AD6B5D71CF1E;
struct _979FA3DE6ECCF956231BFC297C4278E6;
struct _9862706C0A5BB87114D8D1264CC215A3;
struct _988632284A71C49D1170FC4598DEA165;
struct _989300C65D48D4487CD63431A5B756B7;
struct _991DB0B5CB0892F70B164889AA9E2739;
struct _992D1839AC8E639F23406CD0C00EF002;
struct _9990F7522FA29648C94CCC0846165B95;
struct _99C954413A17768447BF0852A4562C6B;
struct _99CEDDFDC374B3E2BEA3B5EBC859ABB7;
struct _9A02475B75BDC9A6C1FC81F46F9E4217;
struct _9A79A86C67FC8B79D589DEFE9BCD3BC9;
struct _9B4395DE66E8574EC0897BBFC5E468E1;
struct _9B8DBD56B2ADF437D63C1746D87B8C1A;
struct _9B9FAE43572AF8916E11706D7ECE195D;
struct _9C224668B7E64BE6AE9499E6FD772938;
struct _9C8855C5416F841FBC956426CB420C87;
struct _9C9793AFB485CBCDC1723AA9DA7467C7;
struct _9C9B4F43840092878ABB719655C0F912;
struct _9D6FB564ED57422FFB268B9144C446E8;
struct _9D856B837113E1B9C553BEF8F42066D9;
struct _9DBA678C3E373C7A30D5EC7DD13ED3FC;
struct _9DC1427BFA5A30405B067C9596620D04;
struct _9DF5225FB79C7EC3237B4B73EEC9C169;
struct _9E1D181561E0D2ACA87E09ABA7C14355;
struct _9E389EF8DB18C75445DC45CE7C2FFB9B;
struct _9E637E3D30D4EE6DC2F7DCF094554036;
struct _9E6A7A2F5B8444BF3F540E884EB664C9;
struct _9ED58EEAFF80161A60B7DFF5CDA307D2;
struct _9F32140EDDFB9662C56CD8A9697883BB;
struct _9F8356FA3F6B7BB65CCFE589AF8F3C28;
struct _9FABDCAC63F9A2F0CDDE223D7391684B;
struct _A03D8E09E1901FA73C4A77E2D3267500;
struct _A043DEDA58AACB0ED59B54E1362CDED0;
struct _A0565235DB0A025ED98270EC8F0003BF;
struct _A06AF73261543B69A785AD9B5C737D11;
struct _A0997E1460B127CFD45B0CF477ECACD8;
struct _A0C7E3A5A810FD3BF4087852A9D616F8;
struct _A1602EFEF26A0DD20EAD389B18F82E81;
struct _A18F96C8DBFB2F1615E2CE49B44750F7;
struct _A1A32FB2C00492E90944DE52B5668962;
struct _A1AC26B3F52FABB6E699F530F015B0DD;
struct _A23F2D0A331F720D631E2B6171CC3ECA;
struct _A27B2EF13B029B6AC017266492BED372;
struct _A27C0735E8A7EB8595B640D9B7BEF349;
struct _A2DE5C624CAE7E415130221DEBE38D94;
struct _A2FB221EC01549407EDCF016C4C0632F;
struct _A313ED2DE25BE046A874D492CFBD731F;
struct _A35F2E1A5E531ECFC152E2BA15F78A6A;
struct _A365B987896F695263E94A4D93A744FD;
struct _A386896A7A6A8667CB6DAB8066B01EA8;
struct _A400BCBF43F87F2088946A887ADD242F;
struct _A42D6322032E0C7A7A9C932B10DA502C;
union _A43692C56D550C478BB98A946A0505D5;
struct _A46BFD4B6B8C284ED478D587B5722CAB;
struct _A4A7C3BD565590D1E17F737ABF60719A;
struct _A4DBC252F7392490EC4C7D58273D4CD1;
struct _A4EF4A77E40471EF410BD1BFBD9E090A;
struct _A545D31055C82AF5215FB86F909CA367;
struct _A55E8F963C5B6AC40AFF9FD81070CC8F;
struct _A56827FA99728A529A1C213E34F0D83D;
struct _A64E5FDBC99443F3D6ECB2BCB6D30607;
struct _A66CD72C4F75B61BA7A5B80768A132ED;
struct _A7019015FC7C2C37D01376608F5D1FF2;
struct _A78B9460B3A970BB806E84788697D919;
struct _A7F49BCAD2F54790AC5A5BD9DFF19382;
struct _A7FA0352B3D2D5994DC9E111A361682C;
struct _A81A12901E1DD22594C62DD882F5E1C7;
struct _A8C15E0CCC4F1BB7303BFAC73A97A837;
struct _A94EB43F2838EBEBCA936AD6F7EBA6B5;
struct _A9B1BAFFCE9059101A2CA55F4DE425B3;
struct _AAD257271AAA9A190B14D3482C45D035;
struct _AAD518AFB58856180F72F894AD441DEE;
struct _AAE8A52A0C0419608DDD9DF8462D9921;
struct _AAECD496E21460385AB9540869BF9C78;
struct _AB5F7E1CFB8B75B23227FD0CD252BAA6;
struct _AB98B12C01F884E8BC2DC3D07B35D622;
struct _ABE60368F0168DDE4E32B527D5287C6B;
struct _AC1F0727205AA235F31FA7E4FBAB6931;
struct _AC4DD9D92E70F28730FDAF46AFF0094D;
struct _AC93509FFB6B9C1B98C9154A5D973C79;
struct _AD58CDA99C93F34C31A743157D5C3E5C;
struct _AE0B01F07923BA2B607EE52A3BD72CF8;
struct _AE25578E94EB9DEB13D122608361EF67;
struct _AE7090D44B263C525193247B1C3DC203;
union _AEC512E533A23DF0E4E7770B7D3B7341;
struct _AEEA76D8CE49243D0419CEF55BCA8374;
struct _AF27679C824E3E5901AA7DC2B9114169;
struct _AF323DE6ACA1BD5E0BC0872A156AE035;
struct _AF39247D48CF164753A445931539035C;
struct _AF5FB4080A51E8992C2DCC85F9B13FAA;
struct _B030971557B6948BCB07CDE1436E426E;
struct _B09B64BCB86C923CE64AD6544D183118;
struct _B0A4657A0F832627789EEFA30E2C3FE8;
struct _B16FC8566897364FB8F68A61B8D500EB;
struct _B17A026830C769E803D493B7F2598A70;
struct _B1BFEFE2106F3BB5718738D899DB0721;
struct _B1F3B1E8AC6C76EBFB982A13A87B6D55;
union _B20031452D9C70A13D819C8DDA3A0BA9;
struct _B269B0A5851D241ECE7A73512E496A13;
struct _B2D1347A7314B3F7BD8A6C26E40DE0B3;
struct _B2D730F73A56FF96C6A7A740CAA96BFE;
struct _B2F7B8A6150007A0765871980FCF4D2A;
struct _B3154DDC89CC03C065CC7D94E90D12B0;
struct _B366CC5B56440B0B1B4971EDF28ED7EF;
struct _B36C03EE0DB03800CDBEDA1CF8CFFD5F;
struct _B39400A659C1078B091D331E19541038;
struct _B39E143921B528937FA4C70092531C43;
struct _B3BD77590CC72559D1303DD07BD38410;
struct _B3CBED78BE28E2F7F53FDE1AC472584A;
struct _B4654CD279B33E607B3273E64CC6A8CF;
struct _B466B6127C4D0EA4542034CCB3136555;
struct _B4B234DF51BFD6860BC6DFAD9B63C9C2;
struct _B4C695B0250A38B82AFFE65B8304A51A;
struct _B4DBE4004D983CDD99352ECA92D175EF;
struct _B4ED38EDC55356A7E931AC6DC9C0CA0A;
struct _B4F2C86EC2AFA3B90E8AE0EA0F71367B;
struct _B511218BDE8923632D5391031F827DC7;
struct _B584FC37E760C222478B879BC253DCF4;
struct _B58F2A65D6A08A32CD1EAF6D9DE3C432;
struct _B5E8E02F7A52D99CF4C865E96F59C543;
struct _B6C2B50A2126E272B3960EB4DC4F6604;
struct _B700DEC12E3C3D556A5FC194447E1A6E;
struct _B753CC28BE97AA51EF6C665DC0F564ED;
struct _B818E9DF3118804B08A86ECE79240C1A;
struct _B8340C644CDB6E95F3781F01B22F6B41;
struct _B8E9EA4A4551E0BACF327E18B2707DE7;
struct _B91A488201B9E841F1A5B4B4EA09BBDD;
struct _BA1C9873524F37DFA28FC6E8B2A0BC7B;
struct _BA3BC151FA826CD0885676DC609737ED;
struct _BA51B89E4C593A6AA4F22AA051FCA364;
struct _BA7B5543ABAE7B9E6314E3F267492402;
struct _BAC7E67B0C2C05C40DFF67087D59816E;
struct _BAE4AA77CC43BF06F4D3ADF31CFD29F5;
struct _BB279EA07E8836E412716D1B8B41E21D;
struct _BB307DE81D005F0ABA15BB97E20A0808;
struct _BB397765FF281DD1E4BC80FF297308E9;
struct _BBFFAC2C7D7C298A8C1E91F0BFE75A53;
struct _BC0C03DE100E0ADBA9BE7AF77D01715A;
struct _BC21E3DCA2DEF6CD8EB07ED07E074597;
struct _BC4B0D515307F8380CCAE7BF44CFA97C;
struct _BCDE0020825236A8F8A72B60AFA7374C;
struct _BD0CD7113069CF1296E061F976B1B743;
struct _BD619B2F7AFF7BA6F06506AA27210664;
struct _BD6B6A249F1B6C2CBC1F20B0596A95AC;
struct _BD71CB07C4DDF44AC99036AEC3635494;
struct _BDA8B21BBF344B8E23C198E46F24428F;
struct _BDC2BC4E1FC4E3665C531F87A904F1CB;
struct _BDD68B3DF04F37D9F686ADD9C1D78922;
struct _BE4469CD69A158FEF141EB99E29DC657;
struct _BE873DF30A0F36F7B74D63F54E76D60A;
struct _BE90B4AC206CC1F52CC4D15D587652C4;
struct _BEA3E970906BDE5578391186783FC521;
struct _BF1396F4A988D0ACD0874F9F43763CE5;
struct _BFB970BD49ED9B406D7CBF54A76D57DD;
struct _C0A0DF669A9A28D262D6289CF39399F2;
struct _C0A8173FD3695D4670457D810A0436B3;
struct _C0A8BBE9C57177701090E972AEA8D416;
struct _C16308A46254792F555119C61B977CA2;
struct _C178C08748CCB321711F58A9FBA92C23;
struct _C19E6F380814408DFD31968534DDA3C5;
struct _C1A5A3DCCCA94F161802FCE22321BD34;
struct _C1A851173DD816DDF7F0E0D062CEFEE2;
struct _C201FB0F2222C07B40D490F1CBB06D58;
struct _C260757490C306CA273BB590CB913883;
struct _C277CB81CBAA95C145BFA0CE4951774F;
struct _C30FF1240D2A8075F6967DECC9305E3F;
struct _C32D75228195D08F6D42072DC87ED14F;
struct _C4AF4D457027AFDE6D53E29D5E02871C;
struct _C552EBCACAEF1EC592A2129D44400B77;
struct _C636080007C4706D90F0D4DC955336B1;
struct _C65DFB72B3FBEEE777E9E71274DF712D;
struct _C7406CB336B739A87F2A2E6FB42BC742;
struct _C772EEB8BDF2D9B03BC2113DCD14FF9B;
struct _C785CF6C4EEFEB89ECBC9FAC0351909D;
struct _C8091AD492510FDF271EFEA57BB3787D;
struct _C889EC8CC43E7C0CC7EDA4C569652F40;
struct _C95899C55C523B7B6DD91187BD37B39A;
struct _C9793B2A88A40550F3E6FCBE57C78800;
struct _C98069716B69DDD3E3DFFC1FB582A369;
struct _C9AC95BFF7586B97AA4528D76B874D4D;
struct _CA18D99C52BF47BA3661A7BE783B3F23;
struct _CA1CD5B08005403884A7641019451813;
struct _CB514849AD88F11A467565D13DD0C300;
struct _CB86ED79A67F464A5E5DD7E35915D8C3;
struct _CBA5F02AFFC4EA4A3305BB276E7E8CDE;
struct _CBEB826488D526BABFC41413DDE1C327;
struct _CC029EE2801424412B933EF9795F5046;
struct _CC1BC89F17F8E2D162EA4A62A1B63DC5;
struct _CC7B73821EC10F3655DDE5DAA21E5635;
struct _CCAEDA52B750854C25441FD25B4DA915;
struct _CCAFB83A0FC0BF591DA5D736B6BAF8AE;
struct _CE845F89F9878C873199BB4116C12DE5;
struct _CE866585EA90BEF8E1777B84F5242003;
struct _CF03470A90651644D6E7B9A83DE18936;
struct _CF062F67C3439FCE826EEADEB80EF798;
struct _CF1CBE9BFB7E9609B8A4034B734E37B9;
struct _CF3111049F55256272BC67C062EAE4FA;
struct _CF8EABCA377A8F90C7BBBD004ED67F2E;
union _CF90EBC219EB1F519A4BDB6194EF3B11;
struct _CF9B220DED91D4DB6D14DD6E06C7164B;
union _CFB4FEE1CB4302FAF2C3A1BC0E8F3BDD;
struct _CFD68B7ADBC82BE7EABF4FDEA780590F;
struct _D0A230E2822E6F114388A4393E99A918;
struct _D0A88ECD5B9151D3C71E69B7AE3ECA15;
struct _D0DECA1AE238766CAB6224F38ED2C117;
struct _D0F732F65C44B5672B29FFE38726918A;
struct _D1AF0406CAF4CC1ABBF1AF1A913684DE;
struct _D1CC089C043B8A5C6F39977960C72D3D;
union _D1D0F511BF997F52624AFB2B0CE27B40;
struct _D293AA008B167A5482334DF4B9C04D8D;
struct _D293DB0BD17AE7654E9C3A224EBA1B54;
struct _D30E1CD2E9753287075FA3466243327C;
struct _D32AD62C57B9AFC5935156850A4EC9F1;
struct _D33AAE3110C188617B7959564922C41D;
struct _D3FB05D1960191678CEDB7021036F6D1;
struct _D414AB5C490C563DD84DD380518CE003;
struct _D467916C3587874006E0A38FD04B2C07;
struct _D484A87E94E3DD0BB42E942E2185E2EE;
struct _D499544929243D34F0E5D505EF6E776A;
struct _D4B7CCBA990A156E447947BB060E0786;
struct _D4E78A805D3B4AC5F724CECE1911262F;
struct _D51E2BFC694F46296AEDCFF248667504;
struct _D53EE25F80C41C95CC04B700465E64D8;
struct _D570BD474412728E81DF3D371018F9FB;
struct _D60B59C14E4F896E4A7591EB7765B14B;
struct _D70593ABB97D9ADE4A069324C98D63AE;
struct _D758E79311354DDC9AF0CC7E7C22CD10;
struct _D7F0CB1571AAC0714CF3A2A9DC0827E7;
union _D8231012D0728EC3472C30FA3109CEFA;
struct _D8420CC1363AF2C8EAD0CBC387915DA6;
struct _D91C2DCC69F66A043F2E243F7B809339;
struct _D9975735FE375B63E13B12CE4075213A;
struct _DA12207DA6457E73E677233E4BD11235;
struct _DA4CA76774A2C175F5D0B77BF61D79A2;
struct _DA732864DAD897F0B587BCCAD8E078EE;
struct _DB0E3B2132CB3BCDB478CD47716D7AA6;
struct _DB0EFD4055EE50FF77A024DEFEA8EE37;
struct _DB14CFE2E08779D243D914BBAB2B5230;
struct _DB2D4F6E439022CA547DF8AA2CE83D6E;
struct _DB64A8459715AF3CEFE23597C08B5967;
struct _DBDB4AF8E469679C3A4CD785AB502395;
struct _DBF1C752AC6FF12C0FE21B58BD0D2479;
struct _DC1F4185A69167B259A83E436A7DD097;
struct _DC32A0924BDC2649CEA8C5E8AC72EF13;
struct _DC91CDF27CF0E1CD3A7D6CD60E761811;
struct _DCF698E6B500C8966BB9EAE5B50075E1;
struct _DD1A60F664AD301361B26C5800787B5E;
struct _DD90A90D33B6DCFC05E4E875B7D49A5E;
struct _DDAC1D07D44FFC2E5C65864F60CCE1DF;
struct _DDB9E5FBB16C40A976BC405025678C57;
struct _DE2D2D600621BF6A9A3C6AB05D887D2A;
struct _DE5295A524AE5E785ED4C88469459F67;
struct _DE99FD7022C5FF7012AC4CC23AAA0836;
struct _DEEBBF9E678AFA2413B9A4D363D90472;
struct _DF1F6B2A10DE489D1BD3908B3045E5A6;
struct _DF21E726BD65398407620C5BBBA9E08C;
struct _DF2660A74F633C8EB56A7225DE8125F3;
struct _DFC468A573BED393F8C22B677D1D24EF;
struct _E011BF1EAEBA58EFCBDC3D43230C2DBF;
struct _E088F45CD187D3D735EE0ADD637BCD24;
struct _E0C447414AA97F974326ACA5E0A3E4C8;
struct _E0F65D5058ACC2BC5F9AF2EDFFAF29D1;
struct _E1188CFE1A0E0A12BD195964AFA7C49B;
struct _E1260AB78985DBC228459590506E4C92;
struct _E1655291D14CE59495117F42FECB583D;
struct _E1B611A0324DBC10371E6C5C458A41ED;
struct _E1CFC36011533414D97A1ABDF69EC869;
struct _E253BFAEF58A5A0733BD8E7952BEDE5F;
struct _E286A6BB4A6F2654A491CFFF4E402FC9;
struct _E2CAB82FD115FB5CD111E5D354459422;
struct _E2CD2B01FA038266E5DB6C7E58157C2E;
struct _E2FA2D6AC7903AC733F449DE69784828;
struct _E38AF46511CCA77388BA66BB0D6EA6C9;
struct _E38CC4C8385B7649E275253761B49FA9;
struct _E3DAF80DA6E2FC3B2711E1BFC9612898;
struct _E4BD27FA28615E7C40C852B0946EB2BB;
struct _E520267D12BF4FCD5BA9F753AB237D0B;
struct _E52A8F32C8A3F3878A2B0A4A62B69464;
struct _E55E0FA3BC2293A808012744A07CC3F2;
struct _E59953A36063650DE92A1957B98E4A1B;
struct _E5FCE84481A5DA4B542276D3CC112A29;
struct _E5FEC4B44082A4B8B21FC86BB58EB49C;
struct _E63B05C5B736EEB1B492508D1A96BE3C;
struct _E67E3CE40ADACFAFDB3FFE1938BD0D7E;
struct _E688C0674EF62F7B7CE00CF8BBC4E652;
struct _E6A7EC26390A1436F354D6A4637276C8;
struct _E6CAD5F58B0D02B91FD47A036636D1EC;
struct _E6E23F4F2E9628A3BBE27C1C5CFEEEE2;
struct _E714B4690DCD4CE2097239CD07373860;
struct _E77CCBE5D8B1F0833042AA57AE35DB28;
struct _E7AFD6532C2786B1E1EBCA6ADECADE75;
struct _E7F9FD2C37FD56671DBF7E32D3F10830;
struct _E8B6B3D679DDF9A2A9F1E31A29349D07;
struct _E8D391135C8469DFAA1B91EC6A7D7277;
struct _E979E361A2908732FE24CBF47752810D;
struct _E97BFE069D0E69649C7DF89B8901896C;
struct _E98D3537A10D6D7A36EB2CF02D2A733B;
struct _E997A7E9262D40FC83356A066D96F704;
struct _E9AF2F2A8EA064B789B183AF44D2C131;
struct _E9ECFF0EA05AD5C4AE006A43157FC997;
struct _E9F5FE92D7DB981290475B0A784F5155;
struct _EAD4BA1AA5D214B5D4E5F46AB8426598;
struct _EBA30041B1367D967CE55670260EF592;
struct _EBA61ABD6EAEDF513D00140FC4172EAC;
struct _EBE355A101A506B8BB9BC1A4B6A6F5B0;
struct _EC87D4E5EFECFC4D155F79244EABA9BB;
struct _ECC0E2C5AD5080F3204655729300624A;
struct _ED8D04F85EE8AAEAC5043F9A38E051F9;
struct _EDB85F966E4A638CA0FF7E75C4B94ACF;
struct _EDCAE6FAA77F2844B16FB7E0B618EDD7;
struct _EDE17C06FAF221A5878FFED27CF569B6;
struct _EE65B23A4559DB1BF795CF28121204EB;
struct _EE866C64B9E084E52F8894370051FA3D;
struct _EEC12600E3B3BC42C851475B8200B3A2;
struct _EF15DCB28339270802C69A46485DD45C;
struct _EF3075C2F2980D34C2767B31474F1A14;
struct _EF54914952AB89C7E0EBAF949772487D;
struct _EF8F73C6C596F3380A5120BEC2D3F264;
struct _EFD218D8CB6E2125874F3715AA0C6AA7;
struct _EFD6C7D4777DD13E0B1CDD145692A98C;
struct _F059149F541946541B5DFE9F6EB20E96;
struct _F0B6F56018B35AE6D958AA393C56DA44;
struct _F0BD037E525ACFEA0C1F272EFA8FD580;
struct _F0D1009415F4F398C0AA24385D596C1B;
struct _F0F833B8645551F58CD05873A995AFBD;
struct _F134966C153EAA2FEEB175F7114F713D;
struct _F14124C6CA524F54899508FD11C59AF5;
struct _F1472F09D9F4F4B2B771740E265DAEF8;
struct _F19CD3A20937CEF33F3E2EF5E2D906EF;
struct _F1BE47758A5CB841C0CD1587E7EC02C0;
struct _F1CA5290AFDA1F8F382C2CF8549939AD;
struct _F1DC5359840258F1056D6AC9280CBC0A;
struct _F1E1BB7F23F71F625712F6F0DB53C50A;
struct _F1F9335C32D188513BC2595A34A539C6;
struct _F1FCB6DD93472D8B068BCACD2B6CBA02;
struct _F1FFDF0E76C6F940FFACBA8A13B33CEB;
struct _F21D8018CF145B47A329D27C35E96B99;
struct _F2B249C6E9F478F0CD898D371C46DBB5;
struct _F2B759443FC190F802FE53FB7862F04C;
struct _F2C3184CEEDD49A7FB665043E59AF1F0;
struct _F2ECD6480817AB9433FAAAFCD2A3757B;
struct _F2F9B6351970DCB60CFA1FAEAB4D2E42;
struct _F38DCD124B444AE28722F96474B80F5D;
struct _F3C08B9B3A2B2160E2DEB46E97A36321;
struct _F3EFAA27463B93CC96181BFE5F29A4C5;
struct _F41DB5A7C32B97CBCEE09CBFE1E8FA57;
struct _F466B234F46A211DC597B6DC6FDB33CA;
struct _F48CE0DBD7E8B40C5BE46DCA241B28C2;
struct _F4F17E25C7BB477B61B5A580F872EC7D;
struct _F52D9FC92091A8183F87E95DDBDC622D;
struct _F5409A53EFE8E3D243CC0647BA303F63;
struct _F571D10236F18BD99A11DF3B50D0C123;
struct _F57445CCAF99E2554B974CAECD301767;
struct _F5EF5DA862DE88FCCA82FCE0F474E907;
struct _F683121DA6B0B811B23B9D483FF7482A;
struct _F7503CDF5949AE94D9EE93F1613B3477;
struct _F761E35AAB0F963E8328223906FB41E6;
struct _F7C1CEA4394D109A2161A09361931998;
struct _F80E3F154E69694439090B67229FB6AA;
struct _F81C4DFCF4FD8DAD229D0D8C30F8406E;
struct _F8536B884003ADBD90188302B8AD267C;
struct _F88DFF0D39F146217256B482FD360ACC;
struct _F97BA04A84B56701784896B95A4002D0;
struct _F9A11BF5FCA53245437FD040CE8F0807;
struct _F9E7774477A9727B3397D0BE30B022B2;
struct _F9ED97278D4922C5DE254E13FEAC389D;
struct _FA4FE0B2CA883E06053CBA1706060353;
struct _FB619B5CE8E6B82A3D0938CCE57F62CA;
struct _FC3BB1A81303FA005E7D17D8401F89AB;
struct _FCB7777383764032C418362DA6B02328;
struct _FCC23D59EDC7C9AEBCA8416FDF631F7E;
union _FCCE1A1F8B9F9C96C548060B126B0081;
struct _FCE16AE268B388C13B857015D638E9ED;
struct _FD8FCB430836D04139012301F63EB9C6;
struct _FD9EA5F23BD8EC0F64EDF9068C14C969;
struct _FDE03FEB32A19C100EEAC3636148FF44;
struct _FDFBD601B4BD2833D8A740F2A9550A80;
struct _FE43560485AD2DF497423A9D2646B91A;
struct _FE74AE40C36D9F9A6F621CCCBCB7D423;
struct _FE8C559F4B68F5A3A5D9DBCE5E9919CF;
struct _FEC8B8888F3B689040694BF1F630E941;
struct _FED2578BDF2A9AA68C400E8DB47E2B4E;
struct _FED59B4CD78CD28406B031702718F8F9;
struct _FF16F36C84D77908C186E6C9218E9417;
struct _FF2B271BD07173775CE163A4BE842405;
struct _FF42BAC5ED235A895D76875BB02F1547;
struct _FF5F1AAD05AC8DB2C41E7ADC05E9F823;
struct _FF9246841A32B78E17B3644398C154C0;
struct _FFD82B8BDC4823D2EC5A0D9DC75F48E0;
struct _FFD94501D319906E4D5D8BC1834D8469;
struct _FFDDF8AD41840F2444187795E69FE4AB;
struct i2400m_tlv_config_d2h_data_format;
struct i2400m_tlv_config_dl_host_reorder;
struct i2400m_tlv_config_idle_parameters;
struct uac_format_type_ii_ext_descriptor;
struct xcb_big_requests_enable_request_t;
struct xcb_create_glyph_cursor_request_t;
struct xcb_damage_query_version_cookie_t;
struct xcb_dri2_attach_format_iterator_t;
struct xcb_get_keyboard_control_cookie_t;
struct xcb_get_keyboard_mapping_cookie_t;
struct xcb_get_modifier_mapping_cookie_t;
struct xcb_get_pointer_control_request_t;
struct xcb_get_pointer_mapping_request_t;
struct xcb_get_selection_owner_request_t;
struct xcb_get_window_attributes_reply_t;
struct xcb_glx_delete_textures_request_t;
struct xcb_glx_destroy_context_request_t;
struct xcb_glx_destroy_pbuffer_request_t;
struct xcb_glx_feedback_buffer_request_t;
struct xcb_glx_gen_queries_arb_request_t;
struct xcb_glx_get_color_table_request_t;
struct xcb_glx_get_pixel_mapfv_request_t;
struct xcb_glx_get_pixel_mapuiv_cookie_t;
struct xcb_glx_get_pixel_mapusv_cookie_t;
struct xcb_glx_get_queryiv_arb_request_t;
struct xcb_input_button_state_iterator_t;
struct xcb_input_device_abs_area_state_t;
struct xcb_input_device_resolution_ctl_t;
struct xcb_input_device_state_iterator_t;
struct xcb_input_device_valuator_event_t;
struct xcb_input_feedback_ctl_iterator_t;
struct xcb_input_set_device_mode_reply_t;
struct xcb_input_string_feedback_state_t;
struct xcb_input_ungrab_device_request_t;
struct xcb_list_fonts_with_info_cookie_t;
struct xcb_poly_fill_rectangle_request_t;
struct xcb_randr_get_crtc_gamma_cookie_t;
struct xcb_randr_get_crtc_info_request_t;
struct xcb_randr_get_output_info_reply_t;
struct xcb_randr_get_screen_info_reply_t;
struct xcb_randr_query_version_request_t;
struct xcb_randr_set_crtc_config_reply_t;
struct xcb_record_client_info_iterator_t;
struct xcb_record_client_spec_iterator_t;
struct xcb_record_enable_context_reply_t;
struct xcb_record_free_context_request_t;
struct xcb_record_query_version_cookie_t;
struct xcb_render_free_picture_request_t;
struct xcb_render_query_filters_cookie_t;
struct xcb_render_query_version_cookie_t;
struct xcb_screensaver_suspend_request_t;
struct xcb_selinux_query_version_reply_t;
struct xcb_set_clip_rectangles_request_t;
struct xcb_set_close_down_mode_request_t;
struct xcb_set_modifier_mapping_cookie_t;
struct xcb_set_pointer_mapping_request_t;
struct xcb_set_selection_owner_request_t;
struct xcb_setup_authenticate_iterator_t;
struct xcb_shape_get_rectangles_cookie_t;
struct xcb_shape_input_selected_cookie_t;
struct xcb_shape_query_extents_request_t;
struct xcb_shape_query_version_request_t;
struct xcb_sync_change_counter_request_t;
struct xcb_sync_create_counter_request_t;
struct xcb_sync_systemcounter_iterator_t;
struct xcb_sync_waitcondition_iterator_t;
struct xcb_test_compare_cursor_request_t;
struct xcb_translate_coordinates_reply_t;
struct xcb_xc_misc_get_version_request_t;
struct xcb_xc_misc_get_xid_list_cookie_t;
struct xcb_xc_misc_get_xid_range_reply_t;
struct xcb_xevie_query_version_request_t;
struct xcb_xf86dri_query_version_reply_t;
struct xcb_xfixes_fetch_region_request_t;
struct xcb_xfixes_query_version_cookie_t;
struct xcb_xfixes_union_region_request_t;
struct xcb_xkb_compat_map_notify_event_t;
struct xcb_xkb_get_device_info_request_t;
struct xcb_xkb_get_indicator_map_reply_t;
struct xcb_xkb_get_kbd_by_name_replies_t;
struct xcb_xkb_get_kbd_by_name_request_t;
struct xcb_xkb_led_class_spec_iterator_t;
struct xcb_xkb_list_components_request_t;
struct xcb_xkb_per_client_flags_cookie_t;
struct xcb_xkb_permament_lock_behavior_t;
struct xcb_xkb_sa_latch_group_iterator_t;
struct xcb_xkb_set_device_info_request_t;
struct xcb_xv_get_port_attribute_reply_t;
struct xcb_xv_list_image_formats_reply_t;
struct xcb_xvmc_create_context_request_t;
struct xcb_xvmc_create_surface_request_t;
struct btrfs_ioctl_received_subvol_args;
struct uac_format_type_i_ext_descriptor;
struct usb_endpoint_descriptor_no_audio;
struct xcb_alloc_color_planes_request_t;
struct xcb_big_requests_enable_cookie_t;
struct xcb_damage_query_version_reply_t;
struct xcb_destroy_subwindows_request_t;
struct xcb_dri2_query_version_request_t;
struct xcb_dri2_swap_interval_request_t;
struct xcb_force_screen_saver_request_t;
struct xcb_get_keyboard_control_reply_t;
struct xcb_get_keyboard_mapping_reply_t;
struct xcb_get_modifier_mapping_reply_t;
struct xcb_get_pointer_control_cookie_t;
struct xcb_get_pointer_mapping_cookie_t;
struct xcb_get_selection_owner_cookie_t;
struct xcb_glx_create_context_request_t;
struct xcb_glx_create_pbuffer_request_t;
struct xcb_glx_destroy_pixmap_request_t;
struct xcb_glx_gen_queries_arb_cookie_t;
struct xcb_glx_get_clip_plane_request_t;
struct xcb_glx_get_color_table_cookie_t;
struct xcb_glx_get_fb_configs_request_t;
struct xcb_glx_get_materialfv_request_t;
struct xcb_glx_get_materialiv_request_t;
struct xcb_glx_get_pixel_mapfv_cookie_t;
struct xcb_glx_get_pixel_mapuiv_reply_t;
struct xcb_glx_get_pixel_mapusv_reply_t;
struct xcb_glx_get_queryiv_arb_cookie_t;
struct xcb_glx_vendor_private_request_t;
struct xcb_input_button_info_iterator_t;
struct xcb_input_close_device_request_t;
struct xcb_input_device_abs_area_ctrl_t;
struct xcb_input_device_abs_calib_ctl_t;
struct xcb_input_device_info_iterator_t;
struct xcb_input_event_class_iterator_t;
struct xcb_input_input_state_iterator_t;
struct xcb_input_integer_feedback_ctl_t;
struct xcb_list_fonts_with_info_reply_t;
struct xcb_query_text_extents_request_t;
struct xcb_randr_crtc_change_iterator_t;
struct xcb_randr_destroy_mode_request_t;
struct xcb_randr_get_crtc_gamma_reply_t;
struct xcb_randr_get_crtc_info_cookie_t;
struct xcb_randr_notify_data_iterator_t;
struct xcb_randr_query_version_cookie_t;
struct xcb_randr_screen_size_iterator_t;
struct xcb_randr_select_input_request_t;
struct xcb_record_get_context_request_t;
struct xcb_record_query_version_reply_t;
struct xcb_render_free_glyphs_request_t;
struct xcb_render_indexvalue_iterator_t;
struct xcb_render_pictformat_iterator_t;
struct xcb_render_pictscreen_iterator_t;
struct xcb_render_pictvisual_iterator_t;
struct xcb_render_query_filters_reply_t;
struct xcb_render_query_version_reply_t;
struct xcb_selinux_list_item_iterator_t;
struct xcb_set_access_control_request_t;
struct xcb_set_modifier_mapping_reply_t;
struct xcb_set_pointer_mapping_cookie_t;
struct xcb_shape_get_rectangles_reply_t;
struct xcb_shape_input_selected_reply_t;
struct xcb_shape_query_extents_cookie_t;
struct xcb_shape_query_version_cookie_t;
struct xcb_shape_select_input_request_t;
struct xcb_sync_destroy_alarm_request_t;
struct xcb_sync_destroy_fence_request_t;
struct xcb_sync_query_counter_request_t;
struct xcb_sync_trigger_fence_request_t;
struct xcb_test_compare_cursor_cookie_t;
struct xcb_uninstall_colormap_request_t;
struct xcb_x_print_bad_sequence_error_t;
struct xcb_xc_misc_get_version_cookie_t;
struct xcb_xc_misc_get_xid_list_reply_t;
struct xcb_xevie_query_version_cookie_t;
struct xcb_xevie_select_input_request_t;
struct xcb_xfixes_copy_region_request_t;
struct xcb_xfixes_cursor_notify_event_t;
struct xcb_xfixes_fetch_region_cookie_t;
struct xcb_xfixes_hide_cursor_request_t;
struct xcb_xfixes_query_version_reply_t;
struct xcb_xfixes_show_cursor_request_t;
struct xcb_xinerama_get_state_request_t;
struct xcb_xinerama_is_active_request_t;
struct xcb_xkb_common_doodad_iterator_t;
struct xcb_xkb_get_compat_map_request_t;
struct xcb_xkb_get_device_info_cookie_t;
struct xcb_xkb_get_kbd_by_name_cookie_t;
struct xcb_xkb_indicator_map_iterator_t;
struct xcb_xkb_key_v_mod_map_iterator_t;
struct xcb_xkb_list_components_cookie_t;
struct xcb_xkb_lock_behavior_iterator_t;
struct xcb_xkb_per_client_flags_reply_t;
struct xcb_xkb_sa_device_btn_iterator_t;
struct xcb_xkb_sa_latch_mods_iterator_t;
struct xcb_xkb_sa_lock_group_iterator_t;
struct xcb_xkb_set_compat_map_request_t;
struct xcb_xv_attribute_info_iterator_t;
struct xcb_xv_query_best_size_request_t;
struct xcb_xv_query_encodings_request_t;
struct xcb_xv_query_extension_request_t;
struct xcb_xvmc_create_context_cookie_t;
struct xcb_xvmc_create_surface_cookie_t;
struct xcb_xvmc_query_version_request_t;
struct xcb_xvmc_surface_info_iterator_t;
struct _XF86OldVidModeValidateModeLine;
struct _XcupGetReservedColormapEntries;
struct i2400m_tlv_detailed_device_info;
struct openvpn_plugin_args_func_return;
struct openvpn_plugin_args_open_return;
struct uac1_output_terminal_descriptor;
struct usb_cdc_country_functional_desc;
struct usb_wireless_ep_comp_descriptor;
struct uvc_control_endpoint_descriptor;
struct v4l2_subdev_frame_interval_enum;
struct xcb_alloc_color_cells_request_t;
struct xcb_alloc_color_planes_cookie_t;
struct xcb_alloc_named_color_request_t;
struct xcb_big_requests_enable_reply_t;
struct xcb_convert_selection_request_t;
struct xcb_dpms_get_timeouts_request_t;
struct xcb_dpms_set_timeouts_request_t;
struct xcb_dri2_authenticate_request_t;
struct xcb_dri2_dri2_buffer_iterator_t;
struct xcb_dri2_query_version_cookie_t;
struct xcb_dri2_swap_buffers_request_t;
struct xcb_get_motion_events_request_t;
struct xcb_get_pointer_control_reply_t;
struct xcb_get_pointer_mapping_reply_t;
struct xcb_get_selection_owner_reply_t;
struct xcb_glx_create_pixmap_request_t;
struct xcb_glx_create_window_request_t;
struct xcb_glx_delete_window_request_t;
struct xcb_glx_gen_queries_arb_reply_t;
struct xcb_glx_get_clip_plane_cookie_t;
struct xcb_glx_get_color_table_reply_t;
struct xcb_glx_get_fb_configs_cookie_t;
struct xcb_glx_get_histogram_request_t;
struct xcb_glx_get_materialfv_cookie_t;
struct xcb_glx_get_materialiv_cookie_t;
struct xcb_glx_get_pixel_mapfv_reply_t;
struct xcb_glx_get_queryiv_arb_reply_t;
struct xcb_glx_get_tex_envfv_request_t;
struct xcb_glx_get_tex_enviv_request_t;
struct xcb_glx_get_tex_gendv_request_t;
struct xcb_glx_get_tex_genfv_request_t;
struct xcb_glx_get_tex_geniv_request_t;
struct xcb_glx_get_tex_image_request_t;
struct xcb_glx_pbuffer_clobber_event_t;
struct xcb_glx_query_context_request_t;
struct xcb_glx_query_version_request_t;
struct xcb_glx_select_buffer_request_t;
struct xcb_input_bell_feedback_state_t;
struct xcb_input_device_bell_request_t;
struct xcb_input_device_ctl_iterator_t;
struct xcb_input_device_enable_state_t;
struct xcb_input_grab_device_request_t;
struct xcb_input_input_info_iterator_t;
struct xcb_input_open_device_request_t;
struct xcb_input_string_feedback_ctl_t;
struct xcb_query_text_extents_cookie_t;
struct xcb_randr_create_mode_request_t;
struct xcb_randr_get_crtc_info_reply_t;
struct xcb_randr_get_panning_request_t;
struct xcb_randr_query_version_reply_t;
struct xcb_randr_set_panning_request_t;
struct xcb_record_ext_range_iterator_t;
struct xcb_record_get_context_cookie_t;
struct xcb_render_add_glyphs_request_t;
struct xcb_render_glyphinfo_iterator_t;
struct xcb_render_pictdepth_iterator_t;
struct xcb_render_transform_iterator_t;
struct xcb_render_trapezoid_iterator_t;
struct xcb_render_trapezoids_request_t;
struct xcb_res_query_clients_request_t;
struct xcb_res_query_version_request_t;
struct xcb_rotate_properties_request_t;
struct xcb_set_pointer_mapping_reply_t;
struct xcb_shape_query_extents_reply_t;
struct xcb_shape_query_version_reply_t;
struct xcb_shm_create_pixmap_request_t;
struct xcb_shm_query_version_request_t;
struct xcb_store_named_color_request_t;
struct xcb_sync_change_alarm_request_t;
struct xcb_sync_counter_notify_event_t;
struct xcb_sync_create_alarm_request_t;
struct xcb_sync_create_fence_request_t;
struct xcb_sync_get_priority_request_t;
struct xcb_sync_query_counter_cookie_t;
struct xcb_sync_set_priority_request_t;
struct xcb_test_compare_cursor_reply_t;
struct xcb_test_grab_control_request_t;
struct xcb_x_print_bad_context_error_t;
struct xcb_x_print_pcontext_iterator_t;
struct xcb_xc_misc_get_version_reply_t;
struct xcb_xevie_query_version_reply_t;
struct xcb_xevie_select_input_cookie_t;
struct xcb_xfixes_fetch_region_reply_t;
struct xcb_xfixes_set_region_request_t;
struct xcb_xinerama_get_state_cookie_t;
struct xcb_xinerama_is_active_cookie_t;
struct xcb_xkb_access_x_notify_event_t;
struct xcb_xkb_controls_notify_event_t;
struct xcb_xkb_get_compat_map_cookie_t;
struct xcb_xkb_get_device_info_reply_t;
struct xcb_xkb_get_kbd_by_name_reply_t;
struct xcb_xkb_kt_map_entry_iterator_t;
struct xcb_xkb_list_components_reply_t;
struct xcb_xkb_sa_lock_mods_iterator_t;
struct xcb_xkb_sa_no_action_iterator_t;
struct xcb_xkb_sa_set_group_iterator_t;
struct xcb_xkb_sa_terminate_iterator_t;
struct xcb_xkb_select_events_details_t;
struct xcb_xkb_select_events_request_t;
struct xcb_xkb_set_behavior_iterator_t;
struct xcb_xkb_set_explicit_iterator_t;
struct xcb_xkb_set_key_type_iterator_t;
struct xcb_xkb_shape_doodad_iterator_t;
struct xcb_xkb_use_extension_request_t;
struct xcb_xv_encoding_info_iterator_t;
struct xcb_xv_query_adaptors_request_t;
struct xcb_xv_query_best_size_cookie_t;
struct xcb_xv_query_encodings_cookie_t;
struct xcb_xv_query_extension_cookie_t;
struct xcb_xvmc_create_context_reply_t;
struct xcb_xvmc_create_surface_reply_t;
struct xcb_xvmc_query_version_cookie_t;
struct _XIMPreeditCaretCallbackStruct;
struct __libc_lock_recursive_opaque__;
struct btrfs_ioctl_qgroup_assign_args;
struct btrfs_ioctl_qgroup_create_args;
struct fw_cdev_event_iso_interrupt_mc;
struct i2400m_tlv_config_idle_timeout;
struct i2400m_tlv_l4_message_versions;
struct ioctl_evtchn_bind_unbound_port;
struct nf_nat_ipv4_multi_range_compat;
struct uac_processing_unit_descriptor;
struct usb_interface_assoc_descriptor;
struct usb_ss_container_id_descriptor;
struct uvc_camera_terminal_descriptor;
struct uvc_output_terminal_descriptor;
struct uvc_processing_unit_descriptor;
struct xcb_alloc_color_cells_cookie_t;
struct xcb_alloc_color_planes_reply_t;
struct xcb_alloc_named_color_cookie_t;
struct xcb_circulate_window_request_t;
struct xcb_configure_window_request_t;
struct xcb_dpms_force_level_request_t;
struct xcb_dpms_get_timeouts_cookie_t;
struct xcb_dpms_get_version_request_t;
struct xcb_dri2_authenticate_cookie_t;
struct xcb_dri2_copy_region_request_t;
struct xcb_dri2_get_buffers_request_t;
struct xcb_dri2_query_version_reply_t;
struct xcb_dri2_swap_buffers_cookie_t;
struct xcb_get_motion_events_cookie_t;
struct xcb_get_screen_saver_request_t;
struct xcb_glx_context_tag_iterator_t;
struct xcb_glx_copy_context_request_t;
struct xcb_glx_delete_lists_request_t;
struct xcb_glx_gen_textures_request_t;
struct xcb_glx_get_booleanv_request_t;
struct xcb_glx_get_clip_plane_reply_t;
struct xcb_glx_get_fb_configs_reply_t;
struct xcb_glx_get_histogram_cookie_t;
struct xcb_glx_get_integerv_request_t;
struct xcb_glx_get_materialfv_reply_t;
struct xcb_glx_get_materialiv_reply_t;
struct xcb_glx_get_tex_envfv_cookie_t;
struct xcb_glx_get_tex_enviv_cookie_t;
struct xcb_glx_get_tex_gendv_cookie_t;
struct xcb_glx_get_tex_genfv_cookie_t;
struct xcb_glx_get_tex_geniv_cookie_t;
struct xcb_glx_get_tex_image_cookie_t;
struct xcb_glx_is_query_arb_request_t;
struct xcb_glx_make_current_request_t;
struct xcb_glx_pixel_storef_request_t;
struct xcb_glx_pixel_storei_request_t;
struct xcb_glx_query_context_cookie_t;
struct xcb_glx_query_version_cookie_t;
struct xcb_glx_render_large_request_t;
struct xcb_glx_swap_buffers_request_t;
struct xcb_input_axis_info_iterator_t;
struct xcb_input_device_enable_ctrl_t;
struct xcb_input_grab_device_cookie_t;
struct xcb_input_kbd_feedback_state_t;
struct xcb_input_key_state_iterator_t;
struct xcb_input_led_feedback_state_t;
struct xcb_input_open_device_cookie_t;
struct xcb_input_ptr_feedback_state_t;
struct xcb_install_colormap_request_t;
struct xcb_query_text_extents_reply_t;
struct xcb_randr_create_mode_cookie_t;
struct xcb_randr_get_panning_cookie_t;
struct xcb_randr_mode_info_iterator_t;
struct xcb_randr_set_panning_cookie_t;
struct xcb_record_bad_context_error_t;
struct xcb_record_get_context_reply_t;
struct xcb_record_range_16_iterator_t;
struct xcb_render_add_traps_request_t;
struct xcb_render_composite_request_t;
struct xcb_render_glyphset_iterator_t;
struct xcb_render_pict_format_error_t;
struct xcb_render_pointfix_iterator_t;
struct xcb_render_tri_strip_request_t;
struct xcb_render_triangle_iterator_t;
struct xcb_render_triangles_request_t;
struct xcb_res_query_clients_cookie_t;
struct xcb_res_query_version_cookie_t;
struct xcb_screensaver_notify_event_t;
struct xcb_set_screen_saver_request_t;
struct xcb_shape_rectangles_request_t;
struct xcb_shm_query_version_cookie_t;
struct xcb_sync_await_fence_request_t;
struct xcb_sync_get_priority_cookie_t;
struct xcb_sync_query_alarm_request_t;
struct xcb_sync_query_counter_reply_t;
struct xcb_sync_query_fence_request_t;
struct xcb_sync_reset_fence_request_t;
struct xcb_sync_set_counter_request_t;
struct xcb_test_get_version_request_t;
struct xcb_unmap_subwindows_request_t;
struct xcb_x_print_printer_iterator_t;
struct xcb_x_print_string8_iterator_t;
struct xcb_xevie_select_input_reply_t;
struct xcb_xinerama_get_state_reply_t;
struct xcb_xinerama_is_active_reply_t;
struct xcb_xkb_action_message_event_t;
struct xcb_xkb_device_spec_iterator_t;
struct xcb_xkb_get_compat_map_reply_t;
struct xcb_xkb_get_controls_request_t;
struct xcb_xkb_get_geometry_request_t;
struct xcb_xkb_get_names_value_list_t;
struct xcb_xkb_key_mod_map_iterator_t;
struct xcb_xkb_key_sym_map_iterator_t;
struct xcb_xkb_logo_doodad_iterator_t;
struct xcb_xkb_overlay_key_iterator_t;
struct xcb_xkb_overlay_row_iterator_t;
struct xcb_xkb_radio_group_behavior_t;
struct xcb_xkb_sa_iso_lock_iterator_t;
struct xcb_xkb_sa_move_ptr_iterator_t;
struct xcb_xkb_sa_set_mods_iterator_t;
struct xcb_xkb_set_controls_request_t;
struct xcb_xkb_set_geometry_request_t;
struct xcb_xkb_text_doodad_iterator_t;
struct xcb_xkb_use_extension_cookie_t;
struct xcb_xv_adaptor_info_iterator_t;
struct xcb_xv_query_adaptors_cookie_t;
struct xcb_xv_query_best_size_reply_t;
struct xcb_xv_query_encodings_reply_t;
struct xcb_xv_query_extension_reply_t;
struct xcb_xv_shm_put_image_request_t;
struct xcb_xvmc_query_version_reply_t;
struct xcb_xvmc_subpicture_iterator_t;
struct _XIMPreeditDrawCallbackStruct;
struct btrfs_ioctl_qgroup_limit_args;
struct btrfs_ioctl_quota_rescan_args;
struct cpufreq_available_frequencies;
struct fw_cdev_allocate_iso_resource;
struct i2400m_tlv_rf_switches_status;
struct ib_uverbs_create_comp_channel;
struct ioctl_evtchn_bind_interdomain;
struct uac_input_terminal_descriptor;
struct usb_cdc_network_terminal_desc;
struct uvc_color_matching_descriptor;
struct uvc_extension_unit_descriptor;
struct uvc_input_terminal_descriptor;
struct xcb_alloc_color_cells_reply_t;
struct xcb_alloc_named_color_reply_t;
struct xcb_change_property_request_t;
struct xcb_change_save_set_request_t;
struct xcb_configure_request_event_t;
struct xcb_create_colormap_request_t;
struct xcb_damage_bad_damage_error_t;
struct xcb_damage_subtract_request_t;
struct xcb_delete_property_request_t;
struct xcb_dpms_get_timeouts_reply_t;
struct xcb_dpms_get_version_cookie_t;
struct xcb_dri2_authenticate_reply_t;
struct xcb_dri2_copy_region_cookie_t;
struct xcb_dri2_get_buffers_cookie_t;
struct xcb_dri2_swap_buffers_reply_t;
struct xcb_get_input_focus_request_t;
struct xcb_get_motion_events_reply_t;
struct xcb_get_screen_saver_cookie_t;
struct xcb_glx_client_info_request_t;
struct xcb_glx_gen_textures_cookie_t;
struct xcb_glx_get_booleanv_cookie_t;
struct xcb_glx_get_doublev_request_t;
struct xcb_glx_get_histogram_reply_t;
struct xcb_glx_get_integerv_cookie_t;
struct xcb_glx_get_lightfv_request_t;
struct xcb_glx_get_lightiv_request_t;
struct xcb_glx_get_tex_envfv_reply_t;
struct xcb_glx_get_tex_enviv_reply_t;
struct xcb_glx_get_tex_gendv_reply_t;
struct xcb_glx_get_tex_genfv_reply_t;
struct xcb_glx_get_tex_geniv_reply_t;
struct xcb_glx_get_tex_image_reply_t;
struct xcb_glx_is_query_arb_cookie_t;
struct xcb_glx_make_current_cookie_t;
struct xcb_glx_query_context_reply_t;
struct xcb_glx_query_version_reply_t;
struct xcb_glx_read_pixels_request_t;
struct xcb_glx_render_mode_request_t;
struct xcb_graphics_exposure_event_t;
struct xcb_input_bell_feedback_ctl_t;
struct xcb_input_device_busy_error_t;
struct xcb_input_device_core_state_t;
struct xcb_input_device_time_coord_t;
struct xcb_input_grab_device_reply_t;
struct xcb_input_key_code_iterator_t;
struct xcb_input_key_info_iterator_t;
struct xcb_input_open_device_reply_t;
struct xcb_list_extensions_request_t;
struct xcb_list_properties_request_t;
struct xcb_query_best_size_request_t;
struct xcb_query_extension_request_t;
struct xcb_randr_create_mode_reply_t;
struct xcb_randr_get_panning_reply_t;
struct xcb_randr_set_panning_reply_t;
struct xcb_record_context_iterator_t;
struct xcb_record_range_8_iterator_t;
struct xcb_render_linefix_iterator_t;
struct xcb_render_picture_iterator_t;
struct xcb_render_spanfix_iterator_t;
struct xcb_reparent_window_request_t;
struct xcb_res_query_clients_reply_t;
struct xcb_res_query_version_reply_t;
struct xcb_selection_request_event_t;
struct xcb_set_input_focus_request_t;
struct xcb_shm_query_version_reply_t;
struct xcb_sync_alarm_notify_event_t;
struct xcb_sync_get_priority_reply_t;
struct xcb_sync_initialize_request_t;
struct xcb_sync_query_alarm_cookie_t;
struct xcb_sync_query_fence_cookie_t;
struct xcb_test_fake_input_request_t;
struct xcb_test_get_version_cookie_t;
struct xcb_ungrab_keyboard_request_t;
struct xcb_visibility_notify_event_t;
struct xcb_xfixes_bad_region_error_t;
struct xcb_xkb_get_controls_cookie_t;
struct xcb_xkb_get_geometry_cookie_t;
struct xcb_xkb_sa_ptr_btn_iterator_t;
struct xcb_xkb_use_extension_reply_t;
struct xcb_xv_query_adaptors_reply_t;
struct Dwarf_Obj_Access_Interface_s;
struct _XF86VidModeGetGammaRampSize;
struct _XF86VidModeSetClientVersion;
struct _XF86VidModeValidateModeLine;
struct _XIMStatusDrawCallbackStruct;
struct btrfs_ioctl_clone_range_args;
struct btrfs_ioctl_dev_replace_args;
struct btrfs_ioctl_logical_ino_args;
struct i2400m_tlv_device_reset_type;
struct ib_uverbs_post_srq_recv_resp;
struct ipmi_channel_lun_address_set;
struct iso_supplementary_descriptor;
struct uac_selector_unit_descriptor;
struct usb_cdc_call_mgmt_descriptor;
struct usb_midi_out_jack_descriptor;
struct uvc_output_header_descriptor;
struct uvc_selector_unit_descriptor;
struct xcb_circulate_notify_event_t;
struct xcb_configure_notify_event_t;
struct xcb_damage_damage_iterator_t;
struct xcb_damage_destroy_request_t;
struct xcb_destroy_window_request_t;
struct xcb_dpms_get_version_reply_t;
struct xcb_dri2_copy_region_reply_t;
struct xcb_dri2_get_buffers_reply_t;
struct xcb_dri2_get_param_request_t;
struct xcb_get_input_focus_cookie_t;
struct xcb_get_screen_saver_reply_t;
struct xcb_glx_gen_textures_reply_t;
struct xcb_glx_get_booleanv_reply_t;
struct xcb_glx_get_doublev_cookie_t;
struct xcb_glx_get_floatv_request_t;
struct xcb_glx_get_integerv_reply_t;
struct xcb_glx_get_lightfv_cookie_t;
struct xcb_glx_get_lightiv_cookie_t;
struct xcb_glx_get_minmax_request_t;
struct xcb_glx_get_string_request_t;
struct xcb_glx_is_query_arb_reply_t;
struct xcb_glx_is_texture_request_t;
struct xcb_glx_make_current_reply_t;
struct xcb_glx_read_pixels_cookie_t;
struct xcb_glx_render_mode_cookie_t;
struct xcb_glx_use_x_font_request_t;
struct xcb_input_device_core_ctrl_t;
struct xcb_input_input_class_info_t;
struct xcb_input_kbd_feedback_ctl_t;
struct xcb_input_led_feedback_ctl_t;
struct xcb_input_ptr_feedback_ctl_t;
struct xcb_list_extensions_cookie_t;
struct xcb_list_properties_cookie_t;
struct xcb_map_subwindows_request_t;
struct xcb_poly_rectangle_request_t;
struct xcb_query_best_size_cookie_t;
struct xcb_query_extension_cookie_t;
struct xcb_randr_bad_output_error_t;
struct xcb_recolor_cursor_request_t;
struct xcb_render_glyph_set_error_t;
struct xcb_render_tri_fan_request_t;
struct xcb_selection_notify_event_t;
struct xcb_setup_request_iterator_t;
struct xcb_sync_initialize_cookie_t;
struct xcb_sync_query_alarm_reply_t;
struct xcb_sync_query_fence_reply_t;
struct xcb_test_get_version_reply_t;
struct xcb_ungrab_pointer_request_t;
struct xcb_xfixes_region_iterator_t;
struct xcb_xkb_ax_option_iterator_t;
struct xcb_xkb_get_controls_reply_t;
struct xcb_xkb_get_geometry_reply_t;
struct xcb_xkb_key_alias_iterator_t;
struct xcb_xkb_names_notify_event_t;
struct xcb_xkb_overlay_1_behavior_t;
struct xcb_xkb_overlay_2_behavior_t;
struct xcb_xkb_sa_device_valuator_t;
struct xcb_xkb_sa_lock_device_btn_t;
struct xcb_xkb_state_notify_event_t;
struct xcb_xv_ungrab_port_request_t;
struct _ScreenSaverUnsetAttributes;
struct _XResQueryClientPixmapBytes;
struct _xkbIndicatorDoodadWireDesc;
struct btrfs_ioctl_ino_lookup_args;
struct cpufreq_available_governors;
struct ethtool_rx_ntuple_flow_spec;
struct fuse_notify_inval_entry_out;
struct fuse_notify_inval_inode_out;
struct fuse_notify_poll_wakeup_out;
struct fw_cdev_event_iso_interrupt;
struct fw_cdev_receive_phy_packets;
struct ib_uverbs_query_device_resp;
struct kvm_userspace_memory_region;
struct nfulnl_msg_packet_timestamp;
struct omap3isp_ccdc_update_config;
struct omap3isp_prev_update_config;
struct openvpn_plugin_args_func_in;
struct openvpn_plugin_args_open_in;
struct uac_feature_unit_descriptor;
struct uac_iso_endpoint_descriptor;
struct usb_functionfs_strings_head;
struct usb_midi_in_jack_descriptor;
struct usb_wireless_cap_descriptor;
struct uvc_input_header_descriptor;
struct v4l2_subdev_frame_size_enum;
struct xcb_colormap_notify_event_t;
struct xcb_create_cursor_request_t;
struct xcb_create_pixmap_request_t;
struct xcb_create_window_request_t;
struct xcb_damage_create_request_t;
struct xcb_dri2_get_param_cookie_t;
struct xcb_dri2_wait_msc_request_t;
struct xcb_dri2_wait_sbc_request_t;
struct xcb_free_colormap_request_t;
struct xcb_get_atom_name_request_t;
struct xcb_get_font_path_request_t;
struct xcb_get_input_focus_reply_t;
struct xcb_glx_drawable_iterator_t;
struct xcb_glx_fbconfig_iterator_t;
struct xcb_glx_gen_lists_request_t;
struct xcb_glx_get_doublev_reply_t;
struct xcb_glx_get_error_request_t;
struct xcb_glx_get_floatv_cookie_t;
struct xcb_glx_get_lightfv_reply_t;
struct xcb_glx_get_lightiv_reply_t;
struct xcb_glx_get_mapdv_request_t;
struct xcb_glx_get_mapfv_request_t;
struct xcb_glx_get_mapiv_request_t;
struct xcb_glx_get_minmax_cookie_t;
struct xcb_glx_get_string_cookie_t;
struct xcb_glx_is_direct_request_t;
struct xcb_glx_is_texture_cookie_t;
struct xcb_glx_read_pixels_reply_t;
struct xcb_glx_render_mode_reply_t;
struct xcb_grab_keyboard_request_t;
struct xcb_image_text_16_request_t;
struct xcb_list_extensions_reply_t;
struct xcb_list_properties_reply_t;
struct xcb_poly_fill_arc_request_t;
struct xcb_property_notify_event_t;
struct xcb_query_best_size_reply_t;
struct xcb_query_extension_reply_t;
struct xcb_query_pointer_request_t;
struct xcb_randr_output_iterator_t;
struct xcb_randr_output_property_t;
struct xcb_record_range_iterator_t;
struct xcb_render_color_iterator_t;
struct xcb_render_fixed_iterator_t;
struct xcb_render_glyph_iterator_t;
struct xcb_reparent_notify_event_t;
struct xcb_selection_clear_event_t;
struct xcb_set_font_path_request_t;
struct xcb_setup_failed_iterator_t;
struct xcb_shape_combine_request_t;
struct xcb_shm_get_image_request_t;
struct xcb_shm_put_image_request_t;
struct xcb_sync_counter_iterator_t;
struct xcb_sync_initialize_reply_t;
struct xcb_sync_trigger_iterator_t;
struct xcb_ungrab_button_request_t;
struct xcb_ungrab_server_request_t;
struct xcb_xf86dri_drm_clip_rect_t;
struct xcb_xkb_behavior_iterator_t;
struct xcb_xkb_bell_notify_event_t;
struct xcb_xkb_counted_string_16_t;
struct xcb_xkb_get_names_request_t;
struct xcb_xkb_get_state_request_t;
struct xcb_xkb_key_name_iterator_t;
struct xcb_xkb_key_type_iterator_t;
struct xcb_xkb_property_iterator_t;
struct xcb_xkb_sa_action_message_t;
struct xcb_xkb_set_names_request_t;
struct xcb_xv_bad_encoding_error_t;
struct xcb_xv_stop_video_request_t;
struct xcb_xv_video_notify_event_t;
struct xcb_xvmc_context_iterator_t;
struct xcb_xvmc_surface_iterator_t;
struct Dwarf_Obj_Access_Methods_s;
struct Dwarf_Obj_Access_Section_s;
struct _XF86OldVidModeAddModeLine;
struct _XF86OldVidModeModModeLine;
struct _XF86VidModeLockModeSwitch;
struct _xkbGetIndicatorStateReply;
struct _xkbGetNamedIndicatorReply;
struct _xkbSetDebuggingFlagsReply;
struct autofs_packet_expire_multi;
struct btrfs_ioctl_quota_ctl_args;
struct ethtool_get_features_block;
struct ethtool_set_features_block;
struct fw_cdev_create_iso_context;
struct fw_cdev_event_iso_resource;
struct fw_cdev_initiate_bus_reset;
struct fw_cdev_send_stream_packet;
struct ib_ucm_sidr_rep_event_resp;
struct ib_ucm_sidr_req_event_resp;
struct ib_uverbs_async_event_desc;
struct ib_uverbs_destroy_srq_resp;
struct ib_uverbs_get_context_resp;
struct ipmi_system_interface_addr;
struct nfqnl_msg_packet_timestamp;
struct omap3isp_stat_event_status;
struct openvpn_plugin_string_list;
struct usb_cdc_ncm_ndp_input_size;
struct usb_cdc_ncm_ntb_parameters;
struct usb_ms_endpoint_descriptor;
struct v4l2_subdev_frame_interval;
struct v4l2_subdev_mbus_code_enum;
struct vfio_iommu_type1_dma_unmap;
struct xcb_allow_events_request_t;
struct xcb_change_hosts_request_t;
struct xcb_client_message_event_t;
struct xcb_destroy_notify_event_t;
struct xcb_dpms_capable_request_t;
struct xcb_dpms_disable_request_t;
struct xcb_dri2_connect_request_t;
struct xcb_dri2_get_msc_request_t;
struct xcb_dri2_get_param_reply_t;
struct xcb_dri2_wait_msc_cookie_t;
struct xcb_dri2_wait_sbc_cookie_t;
struct xcb_get_atom_name_cookie_t;
struct xcb_get_font_path_cookie_t;
struct xcb_get_geometry_request_t;
struct xcb_get_property_request_t;
struct xcb_glx_context_iterator_t;
struct xcb_glx_end_list_request_t;
struct xcb_glx_float32_iterator_t;
struct xcb_glx_float64_iterator_t;
struct xcb_glx_gen_lists_cookie_t;
struct xcb_glx_get_error_cookie_t;
struct xcb_glx_get_floatv_reply_t;
struct xcb_glx_get_mapdv_cookie_t;
struct xcb_glx_get_mapfv_cookie_t;
struct xcb_glx_get_mapiv_cookie_t;
struct xcb_glx_get_minmax_reply_t;
struct xcb_glx_get_string_reply_t;
struct xcb_glx_is_direct_cookie_t;
struct xcb_glx_is_texture_reply_t;
struct xcb_glx_new_list_request_t;
struct xcb_glx_pbuffer_iterator_t;
struct xcb_grab_keyboard_cookie_t;
struct xcb_grab_pointer_request_t;
struct xcb_gravity_notify_event_t;
struct xcb_image_text_8_request_t;
struct xcb_input_feedback_state_t;
struct xcb_input_focus_in_event_t;
struct xcb_input_valuator_state_t;
struct xcb_lookup_color_request_t;
struct xcb_mapping_notify_event_t;
struct xcb_no_operation_request_t;
struct xcb_poly_segment_request_t;
struct xcb_poly_text_16_request_t;
struct xcb_query_colors_request_t;
struct xcb_query_keymap_request_t;
struct xcb_query_pointer_cookie_t;
struct xcb_randr_bad_crtc_error_t;
struct xcb_randr_bad_mode_error_t;
struct xcb_render_animcursorelt_t;
struct xcb_render_pict_op_error_t;
struct xcb_render_picture_error_t;
struct xcb_render_trap_iterator_t;
struct xcb_resize_request_event_t;
struct xcb_shape_offset_request_t;
struct xcb_shm_completion_event_t;
struct xcb_shm_get_image_cookie_t;
struct xcb_store_colors_request_t;
struct xcb_unmap_window_request_t;
struct xcb_warp_pointer_request_t;
struct xcb_x_print_notify_event_t;
struct xcb_xevie_event_iterator_t;
struct xcb_xinerama_screen_info_t;
struct xcb_xkb_counted_string_8_t;
struct xcb_xkb_default_behavior_t;
struct xcb_xkb_get_names_cookie_t;
struct xcb_xkb_get_state_cookie_t;
struct xcb_xkb_id_spec_iterator_t;
struct xcb_xkb_indicator_doodad_t;
struct xcb_xkb_kt_set_map_entry_t;
struct xcb_xkb_listing_iterator_t;
struct xcb_xkb_map_notify_event_t;
struct xcb_xkb_mod_def_iterator_t;
struct xcb_xkb_outline_iterator_t;
struct xcb_xkb_overlay_iterator_t;
struct xcb_xkb_sa_lock_controls_t;
struct xcb_xkb_sa_switch_screen_t;
struct xcb_xkb_section_iterator_t;
struct xcb_xkb_set_names_values_t;
struct xcb_xkb_string8_iterator_t;
struct xcb_xv_bad_control_error_t;
struct xcb_xv_encoding_iterator_t;
struct xcb_xv_get_still_request_t;
struct xcb_xv_get_video_request_t;
struct xcb_xv_grab_port_request_t;
struct xcb_xv_image_format_info_t;
struct xcb_xv_port_notify_event_t;
struct xcb_xv_put_image_request_t;
struct xcb_xv_put_still_request_t;
struct xcb_xv_put_video_request_t;
struct xcb_xv_rational_iterator_t;
struct xt_connsecmark_target_info;
struct xt_tcpoptstrip_target_info;
struct _BIG_IOCTL_Command_struct;
struct _ScreenSaverSetAttributes;
struct _XF86MiscGetMouseSettings;
struct _XF86MiscSetClientVersion;
struct _XF86MiscSetGrabKeysState;
struct _XF86MiscSetMouseSettings;
struct _XResQueryClientResources;
struct _XkbExtensionDeviceNotify;
struct __kernel_sockaddr_storage;
struct _xkbExtensionDeviceNotify;
struct _xkbKTSetMapEntryWireDesc;
struct btrfs_ioctl_dev_info_args;
struct btrfs_ioctl_get_dev_stats;
struct btrfs_ioctl_ino_path_args;
struct btrfs_ioctl_search_header;
struct fw_cdev_remove_descriptor;
struct hdlcdrv_old_channel_state;
struct ib_uverbs_comp_event_desc;
struct ib_uverbs_create_srq_resp;
struct ib_uverbs_destroy_cq_resp;
struct ib_uverbs_destroy_qp_resp;
struct ib_uverbs_query_port_resp;
struct kvm_ppc_one_seg_page_size;
struct uac1_ac_header_descriptor;
struct uac1_as_header_descriptor;
struct uac_mixer_unit_descriptor;
struct usb_encryption_descriptor;
struct usb_functionfs_descs_head;
struct usb_ss_ep_comp_descriptor;
struct usbdevfs_disconnect_claim;
struct usbdevfs_disconnectsignal;
struct vfio_iommu_spapr_tce_info;
struct xcb_alloc_color_request_t;
union xcb_client_message_data_t;
struct xcb_create_notify_event_t;
struct xcb_damage_notify_event_t;
struct xcb_dpms_capable_cookie_t;
struct xcb_dpms_enable_request_t;
struct xcb_dri2_connect_cookie_t;
struct xcb_dri2_get_msc_cookie_t;
struct xcb_dri2_wait_msc_reply_t;
struct xcb_dri2_wait_sbc_reply_t;
struct xcb_free_colors_request_t;
struct xcb_free_cursor_request_t;
struct xcb_free_pixmap_request_t;
struct xcb_get_atom_name_reply_t;
struct xcb_get_font_path_reply_t;
struct xcb_get_geometry_cookie_t;
struct xcb_get_property_cookie_t;
struct xcb_glx_bool32_iterator_t;
struct xcb_glx_gen_lists_reply_t;
struct xcb_glx_get_error_reply_t;
struct xcb_glx_get_mapdv_reply_t;
struct xcb_glx_get_mapfv_reply_t;
struct xcb_glx_get_mapiv_reply_t;
struct xcb_glx_is_direct_reply_t;
struct xcb_glx_is_list_request_t;
struct xcb_glx_pixmap_iterator_t;
struct xcb_glx_wait_gl_request_t;
struct xcb_glx_window_iterator_t;
struct xcb_grab_button_request_t;
struct xcb_grab_keyboard_reply_t;
struct xcb_grab_pointer_cookie_t;
struct xcb_grab_server_request_t;
struct xcb_input_valuator_info_t;
struct xcb_intern_atom_request_t;
struct xcb_keymap_notify_event_t;
struct xcb_kill_client_request_t;
struct xcb_lookup_color_cookie_t;
struct xcb_motion_notify_event_t;
struct xcb_poly_text_8_request_t;
struct xcb_query_colors_cookie_t;
struct xcb_query_keymap_cookie_t;
struct xcb_query_pointer_reply_t;
struct xcb_randr_crtc_iterator_t;
struct xcb_randr_mode_iterator_t;
struct xcb_randr_output_change_t;
struct xcb_randr_refresh_rates_t;
struct xcb_render_directformat_t;
struct xcb_render_pictforminfo_t;
struct xcb_res_client_iterator_t;
struct xcb_shape_kind_iterator_t;
struct xcb_shm_get_image_reply_t;
struct xcb_sync_alarm_iterator_t;
struct xcb_sync_fence_iterator_t;
struct xcb_sync_int64_iterator_t;
struct xcb_visualtype_iterator_t;
struct xcb_xevie_start_request_t;
struct xcb_xkb_action_iterator_t;
struct xcb_xkb_common_behavior_t;
struct xcb_xkb_device_led_info_t;
struct xcb_xkb_doodad_iterator_t;
struct xcb_xkb_get_map_request_t;
struct xcb_xkb_get_names_reply_t;
struct xcb_xkb_get_state_reply_t;
struct xcb_xkb_sa_lock_ptr_btn_t;
struct xcb_xkb_sa_redirect_key_t;
struct xcb_xkb_sa_set_controls_t;
struct xcb_xkb_sa_set_ptr_dflt_t;
struct xcb_xkb_set_map_request_t;
struct xcb_xv_grab_port_cookie_t;
struct _PanoramiXGetScreenCount;
struct _ScreenSaverQueryVersion;
struct _XDGACopyTransparentArea;
struct _XF86BigfontQueryVersion;
struct _XF86DGAQueryDirectVideo;
struct _XF86VidModeGetGammaRamp;
struct _XF86VidModeQueryVersion;
struct _XF86VidModeSetGammaRamp;
struct _XIMStringConversionText;
struct _XkbDeviceValuatorAction;
struct __user_cap_header_struct;
struct _xSyncCounterNotifyEvent;
struct _xSyncListSystemCounters;
struct _xkbGetIndicatorMapReply;
struct _xkbIndicatorMapWireDesc;
struct _xkbSymInterpretWireDesc;
struct btrfs_ioctl_balance_args;
struct btrfs_ioctl_fs_info_args;
struct fc_bsg_host_vendor_reply;
struct fuse_notify_retrieve_out;
struct fw_cdev_event_phy_packet;
struct fw_cdev_get_cycle_timer2;
struct fw_cdev_set_iso_channels;
struct hiddev_string_descriptor;
struct hidraw_report_descriptor;
struct ib_uverbs_create_ah_resp;
struct ib_uverbs_create_cq_resp;
struct ib_uverbs_create_qp_resp;
struct ib_uverbs_modify_qp_resp;
struct ib_uverbs_open_xrcd_resp;
struct ib_uverbs_post_recv_resp;
struct ib_uverbs_post_send_resp;
struct ib_uverbs_query_srq_resp;
struct ib_uverbs_resize_cq_resp;
struct ipx_interface_definition;
struct omap3isp_ccdc_lsc_config;
struct omap3isp_h3a_aewb_config;
struct omapfb_update_window_old;
struct openvpn_plugin_callbacks;
struct rds_get_mr_for_dest_args;
struct rds_info_rdma_connection;
struct reiserfs_security_handle;
struct snd_seq_ev_queue_control;
struct usb_cdc_mdlm_detail_desc;
struct usb_interface_descriptor;
struct usb_ms_header_descriptor;
struct usb_qualifier_descriptor;
struct usbdevfs_iso_packet_desc;
struct vfio_iommu_type1_dma_map;
struct virtio_net_hdr_mrg_rxbuf;
struct xcb_alloc_color_cookie_t;
struct xcb_button_press_event_t;
struct xcb_clear_area_request_t;
struct xcb_close_font_request_t;
struct xcb_coloritem_iterator_t;
struct xcb_copy_plane_request_t;
struct xcb_damage_add_request_t;
struct xcb_dpms_capable_reply_t;
struct xcb_dri2_attach_format_t;
struct xcb_dri2_connect_reply_t;
struct xcb_dri2_get_msc_reply_t;
struct xcb_enter_notify_event_t;
struct xcb_get_geometry_reply_t;
struct xcb_get_property_reply_t;
struct xcb_glx_finish_request_t;
struct xcb_glx_is_list_cookie_t;
struct xcb_glx_render_request_t;
struct xcb_glx_wait_x_request_t;
struct xcb_grab_pointer_reply_t;
struct xcb_input_button_state_t;
struct xcb_input_device_error_t;
struct xcb_input_device_state_t;
struct xcb_input_feedback_ctl_t;
struct xcb_intern_atom_cookie_t;
struct xcb_list_fonts_request_t;
struct xcb_list_hosts_request_t;
struct xcb_lookup_color_reply_t;
struct xcb_map_window_request_t;
struct xcb_poly_point_request_t;
struct xcb_query_colors_reply_t;
struct xcb_query_font_request_t;
struct xcb_query_keymap_reply_t;
struct xcb_query_tree_request_t;
struct xcb_randr_notify_event_t;
struct xcb_record_client_info_t;
struct xcb_rectangle_iterator_t;
struct xcb_render_glyph_error_t;
struct xcb_send_event_request_t;
struct xcb_set_dashes_request_t;
struct xcb_setup_authenticate_t;
struct xcb_shape_mask_request_t;
struct xcb_shape_notify_event_t;
struct xcb_shm_attach_request_t;
struct xcb_shm_detach_request_t;
struct xcb_sync_await_request_t;
struct xcb_sync_counter_error_t;
struct xcb_sync_systemcounter_t;
struct xcb_sync_waitcondition_t;
struct xcb_timecoord_iterator_t;
struct xcb_timestamp_iterator_t;
struct xcb_ungrab_key_request_t;
struct xcb_unmap_notify_event_t;
struct xcb_xevie_send_request_t;
struct xcb_xevie_start_cookie_t;
struct xcb_xkb_get_map_cookie_t;
struct xcb_xkb_keyboard_error_t;
struct xcb_xkb_sa_latch_group_t;
struct xcb_xkb_set_map_values_t;
struct xcb_xkb_shape_iterator_t;
struct xcb_xv_format_iterator_t;
struct xcb_xv_grab_port_reply_t;
struct xt_tproxy_target_info_v1;
struct Dwarf_Regtable_Entry3_s;
struct Dwarf_Relocation_Data_s;
struct _LbxQueryExtensionReply;
struct _PanoramiXGetScreenSize;
struct _ScreenSaverSelectInput;
struct _XEVIGetVisualInfoReply;
struct _XF86DGAGetViewPortSize;
struct _XF86DGAInstallColormap;
struct _XF86DGAViewPortChanged;
struct _XF86MiscGetKbdSettings;
struct _XF86MiscSetKbdSettings;
struct _XF86VidModeAddModeLine;
struct _XF86VidModeGetModeLine;
struct _XF86VidModeModModeLine;
struct _XF86VidModeSetViewPort;
struct _XResQueryResourceBytes;
struct __pthread_cleanup_frame;
struct __pthread_internal_list;
struct _pthread_cleanup_buffer;
struct _xSyncDestroyCounterReq;
struct _xkbListComponentsReply;
struct _xkbPerClientFlagsReply;
struct _xkbShapeDoodadWireDesc;
struct btrfs_ioctl_search_args;
struct btrfs_ioctl_vol_args_v2;
struct dvb_frontend_parameters;
struct dvd_host_send_challenge;
struct fanotify_event_metadata;
struct fuse_notify_retrieve_in;
struct fw_cdev_event_bus_reset;
struct fw_cdev_get_cycle_timer;
struct fw_cdev_send_phy_packet;
struct gnet_stats_basic_packed;
struct i2400m_tlv_media_status;
struct i2400m_tlv_rf_operation;
struct i2400m_tlv_system_state;
struct ib_uverbs_alloc_mw_resp;
struct ib_uverbs_alloc_pd_resp;
struct ib_uverbs_post_srq_recv;
struct ib_uverbs_query_qp_resp;
struct ib_uverbs_req_notify_cq;
struct kvm_assigned_msix_entry;
struct kvm_coalesced_mmio_ring;
struct kvm_coalesced_mmio_zone;
struct kvm_irq_routing_irqchip;
struct mdp_device_descriptor_s;
struct mei_connect_client_data;
struct nfqnl_msg_config_params;
struct serial_multiport_struct;
struct soundfont_voice_rec_hdr;
struct usb_endpoint_descriptor;
struct usb_security_descriptor;
struct uvc_format_uncompressed;
struct v4l2_event_subscription;
struct v4l2_mpeg_vbi_itv0_line;
struct xcb_alloc_color_reply_t;
struct xcb_change_gc_request_t;
struct xcb_charinfo_iterator_t;
struct xcb_colormap_iterator_t;
struct xcb_copy_area_request_t;
struct xcb_create_gc_request_t;
struct xcb_dpms_info_request_t;
struct xcb_drawable_iterator_t;
struct xcb_fill_poly_request_t;
struct xcb_fontable_iterator_t;
struct xcb_fontprop_iterator_t;
struct xcb_gcontext_iterator_t;
struct xcb_get_image_request_t;
struct xcb_glx_finish_cookie_t;
struct xcb_glx_flush_request_t;
struct xcb_glx_generic_error_t;
struct xcb_glx_is_list_reply_t;
struct xcb_input_button_info_t;
struct xcb_input_class_error_t;
struct xcb_input_device_info_t;
struct xcb_input_event_error_t;
struct xcb_input_input_state_t;
struct xcb_intern_atom_reply_t;
struct xcb_list_fonts_cookie_t;
struct xcb_list_hosts_cookie_t;
struct xcb_map_request_event_t;
struct xcb_no_exposure_event_t;
struct xcb_open_font_request_t;
struct xcb_poly_line_request_t;
struct xcb_put_image_request_t;
struct xcb_query_font_cookie_t;
struct xcb_query_tree_cookie_t;
struct xcb_randr_crtc_change_t;
union xcb_randr_notify_data_t;
struct xcb_randr_screen_size_t;
struct xcb_render_indexvalue_t;
struct xcb_render_pictscreen_t;
struct xcb_render_pictvisual_t;
struct xcb_res_type_iterator_t;
struct xcb_selinux_list_item_t;
struct xcb_shape_op_iterator_t;
struct xcb_visualid_iterator_t;
struct xcb_xevie_end_request_t;
struct xcb_xevie_send_cookie_t;
struct xcb_xevie_start_reply_t;
struct xcb_xkb_common_doodad_t;
struct xcb_xkb_get_map_reply_t;
struct xcb_xkb_indicator_map_t;
struct xcb_xkb_key_v_mod_map_t;
struct xcb_xkb_lock_behavior_t;
struct xcb_xkb_sa_device_btn_t;
struct xcb_xkb_sa_latch_mods_t;
struct xcb_xkb_sa_lock_group_t;
struct xcb_xv_attribute_info_t;
struct xcb_xv_bad_port_error_t;
struct xcb_xv_image_iterator_t;
struct xcb_xvmc_surface_info_t;
struct xt_classify_target_info;
struct xt_u32_location_element;
struct Dwarf_Regtable_Entry_s;
struct _LbxGetKeyboardMapping;
struct _LbxGetModifierMapping;
struct _LbxInvalidateTagEvent;
struct _PanoramiXQueryVersion;
struct _XDGAGetViewportStatus;
struct _XF86VidModeSwitchMode;
struct _XResResourceSizeValue;
struct _XkbSwitchScreenAction;
struct __libc_rwlock_opaque__;
struct __user_cap_data_struct;
struct _cciss_pci_info_struct;
struct _xSyncAlarmNotifyEvent;
struct _xSyncChangeCounterReq;
struct _xSyncCreateCounterReq;
struct _xkbDeviceLedsWireDesc;
struct _xkbGetDeviceInfoReply;
struct _xkbKTMapEntryWireDesc;
struct _xkbLogoDoodadWireDesc;
struct _xkbOverlayKeyWireDesc;
struct _xkbOverlayRowWireDesc;
struct _xkbTextDoodadWireDesc;
union autofs_v5_packet_union;
struct avmb1_loadandconfigdef;
struct btrfs_balance_progress;
struct btrfs_ioctl_scrub_args;
struct btrfs_ioctl_search_key;
struct btrfs_ioctl_space_args;
struct btrfs_ioctl_space_info;
struct changer_element_status;
struct dvb_diseqc_slave_reply;
struct dvd_host_send_rpcstate;
struct ebt_mac_wormhash_tuple;
struct ethtool_ah_espip4_spec;
struct fuse_notify_delete_out;
struct fw_cdev_add_descriptor;
struct fw_cdev_event_request2;
struct fw_cdev_event_response;
struct hdlcdrv_channel_params;
struct hiddev_collection_info;
struct hiddev_usage_ref_multi;
struct ib_ucm_destroy_id_resp;
struct ib_uverbs_attach_mcast;
struct ib_uverbs_detach_mcast;
struct ib_uverbs_global_route;
struct ib_uverbs_poll_cq_resp;
struct ib_uverbs_query_device;
struct ioctl_evtchn_bind_virq;
struct ipt_clusterip_tgt_info;
struct iso_primary_descriptor;
struct nd_opt_home_agent_info;
union nf_conntrack_man_proto;
struct nfulnl_msg_config_mode;
struct omap3isp_h3a_af_config;
struct omap3isp_prev_rgbtorgb;
struct rose_facilities_struct;
struct serial_icounter_struct;
struct snd_seq_port_subscribe;
struct sockaddr_pppol2tpv3in6;
struct usb_cdc_acm_descriptor;
struct usb_connection_context;
struct usb_ext_cap_descriptor;
struct uvc_frame_uncompressed;
struct uvc_xu_control_mapping;
struct v4l2_mpeg_vbi_fmt_ivtv;
struct v4l2_pix_format_mplane;
struct v4l2_sliced_vbi_format;
struct virtio_console_control;
struct xcb_dpms_info_cookie_t;
struct xcb_dri2_dri2_buffer_t;
struct xcb_get_image_cookie_t;
struct xcb_glx_finish_reply_t;
struct xcb_grab_key_request_t;
struct xcb_input_device_ctl_t;
struct xcb_input_input_info_t;
struct xcb_input_mode_error_t;
struct xcb_keycode_iterator_t;
struct xcb_list_fonts_reply_t;
struct xcb_list_hosts_reply_t;
struct xcb_map_notify_event_t;
struct xcb_poly_arc_request_t;
struct xcb_query_font_reply_t;
struct xcb_query_tree_reply_t;
struct xcb_record_ext_range_t;
struct xcb_render_glyphinfo_t;
struct xcb_render_pictdepth_t;
struct xcb_render_transform_t;
struct xcb_render_trapezoid_t;
struct xcb_segment_iterator_t;
struct xcb_shm_seg_iterator_t;
struct xcb_sync_alarm_error_t;
struct xcb_xevie_end_cookie_t;
struct xcb_xevie_send_reply_t;
struct xcb_xkb_bell_request_t;
struct xcb_xkb_key_iterator_t;
struct xcb_xkb_kt_map_entry_t;
struct xcb_xkb_row_iterator_t;
struct xcb_xkb_sa_lock_mods_t;
struct xcb_xkb_sa_no_action_t;
struct xcb_xkb_sa_set_group_t;
struct xcb_xkb_sa_terminate_t;
struct xcb_xkb_set_behavior_t;
struct xcb_xkb_set_explicit_t;
struct xcb_xkb_set_key_type_t;
struct xcb_xkb_shape_doodad_t;
struct xcb_xv_encoding_info_t;
struct xcb_xv_port_iterator_t;
struct xt_rateest_target_info;
struct xt_secmark_target_info;
struct Dwarf_Macro_Details_s;
struct Dwarf_P_String_Attr_s;
struct SjLj_Function_Context;
struct _IOCTL_Command_struct;
struct _LbxBeginLargeRequest;
struct _LbxGetWinAttrAndGeom;
struct _ScreenSaverQueryInfo;
struct _XDGACloseFramebuffer;
struct _XDGASetClientVersion;
struct _XEVIGetVisualInfoReq;
struct _XF86BigfontQueryFont;
struct _XF86MiscGetFilePaths;
struct _XF86MiscQueryVersion;
struct _XResResourceSizeSpec;
struct _XkbNewKeyboardNotify;
struct _XkbRedirectKeyAction;
struct __gconv_loaded_object;
struct _cciss_coalint_struct;
struct _xSyncDestroyAlarmReq;
struct _xSyncDestroyFenceReq;
struct _xSyncQueryCounterReq;
struct _xSyncTriggerFenceReq;
struct _xkbAnyDoodadWireDesc;
struct _xkbGetCompatMapReply;
struct _xkbGetIndicatorState;
struct _xkbGetKbdByNameReply;
struct _xkbGetNamedIndicator;
struct _xkbNewKeyboardNotify;
struct _xkbSetDebuggingFlags;
struct _xkbSetNamedIndicator;
struct _xkbUseExtensionReply;
struct autofs_packet_missing;
struct ax25_route_opt_struct;
struct btrfs_ioctl_send_args;
struct capi_manufacturer_cmd;
struct cdrom_generic_command;
struct changer_vendor_params;
struct cpufreq_affected_cpus;
struct dmx_pes_filter_params;
struct dmx_sct_filter_params;
struct dvb_diseqc_master_cmd;
struct dvd_lu_send_challenge;
struct dvd_lu_send_title_key;
struct fc_bsg_host_add_rport;
struct fc_bsg_host_del_rport;
struct fsl_hv_ioctl_doorbell;
struct fuse_notify_store_out;
struct fw_cdev_event_request;
struct fw_cdev_send_response;
struct gnet_stats_rate_est64;
struct hdlcdrv_channel_state;
struct hs_primary_descriptor;
struct i2400m_bootrom_header;
struct ib_ucm_apr_event_resp;
struct ib_ucm_create_id_resp;
struct ib_ucm_lap_event_resp;
struct ib_ucm_mra_event_resp;
struct ib_ucm_rej_event_resp;
struct ib_ucm_rep_event_resp;
struct ib_ucm_req_event_resp;
struct ib_uverbs_create_xsrq;
struct ib_uverbs_destroy_srq;
struct ib_uverbs_get_context;
struct ib_uverbs_reg_mr_resp;
struct ifla_vlan_qos_mapping;
struct ifla_vxlan_port_range;
struct iso_volume_descriptor;
struct kvm_irq_routing_entry;
struct kvm_mmu_op_release_pt;
struct kvm_pit_channel_state;
struct kvm_ppc_one_page_size;
struct kvm_s390_ucas_mapping;
struct matroxioc_output_mode;
struct nfqnl_msg_verdict_hdr;
struct nfulnl_msg_config_cmd;
struct nfulnl_msg_packet_hdr;
struct omap3isp_ccdc_culling;
struct omap3isp_h3a_af_paxel;
struct omap3isp_prev_gtables;
struct omap3isp_prev_yclimit;
struct reiserfs_xattr_header;
struct sctp_adaptation_event;
struct sctp_sender_dry_event;
struct snd_compressed_buffer;
struct snd_seq_remove_events;
struct soundfont_sample_info;
struct tipc_name_table_query;
struct usb_config_descriptor;
struct usb_descriptor_header;
struct usb_device_descriptor;
struct usb_ss_cap_descriptor;
struct usb_string_descriptor;
struct usbdevfs_bulktransfer;
struct usbdevfs_ctrltransfer;
struct usbdevfs_hub_portinfo;
struct usbdevfs_setinterface;
struct uvc_descriptor_header;
struct uvc_header_descriptor;
struct uvc_streaming_control;
struct v4l2_event_frame_sync;
struct v4l2_frmival_stepwise;
struct v4l2_frmsize_discrete;
struct v4l2_frmsize_stepwise;
struct v4l2_plane_pix_format;
struct v4l2_subdev_selection;
struct vfio_iommu_type1_info;
struct virtio_balloon_config;
struct virtio_console_config;
struct xcb_button_iterator_t;
struct xcb_char2b_iterator_t;
struct xcb_copy_gc_request_t;
struct xcb_cursor_iterator_t;
struct xcb_dpms_info_reply_t;
struct xcb_format_iterator_t;
struct xcb_free_gc_request_t;
struct xcb_get_image_reply_t;
struct xcb_input_axis_info_t;
struct xcb_input_key_state_t;
struct xcb_key_press_event_t;
struct xcb_keysym_iterator_t;
struct xcb_pixmap_iterator_t;
struct xcb_randr_mode_info_t;
struct xcb_record_range_16_t;
struct xcb_render_pointfix_t;
struct xcb_render_triangle_t;
struct xcb_screen_iterator_t;
struct xcb_window_iterator_t;
struct xcb_x_print_printer_t;
struct xcb_xevie_end_reply_t;
struct xcb_xkb_get_map_map_t;
struct xcb_xkb_key_mod_map_t;
struct xcb_xkb_key_sym_map_t;
struct xcb_xkb_logo_doodad_t;
struct xcb_xkb_overlay_key_t;
struct xcb_xkb_overlay_row_t;
struct xcb_xkb_sa_iso_lock_t;
struct xcb_xkb_sa_move_ptr_t;
struct xcb_xkb_sa_set_mods_t;
struct xcb_xkb_text_doodad_t;
struct xcb_xv_adaptor_info_t;
struct xfrm_replay_state_esn;
struct xt_cluster_match_info;
struct xt_rateest_match_info;
struct xt_set_info_target_v0;
struct xt_set_info_target_v1;
struct xt_set_info_target_v2;
struct xt_tproxy_target_info;
struct _LbxLargeRequestData;
struct _LbxListenToAllEvent;
struct _LbxListenToOneEvent;
struct _LbxReleaseCmapEvent;
struct _LbxSendTagDataEvent;
struct _QueryEncodingsReply;
struct _QueryExtensionReply;
struct _RequestBlock_struct;
struct _XDGAInstallColormap;
struct _XDGAOpenFramebuffer;
struct _XF86DGAQueryVersion;
struct _XF86MiscPassMessage;
struct _XF86VidModeGetGamma;
struct _XF86VidModeSetGamma;
struct _XkbDeviceLedChanges;
struct _XkbIndicatorChanges;
struct _XkbStateNotifyEvent;
struct __libc_lock_opaque__;
struct _xExtendedVisualInfo;
struct _xSyncChangeAlarmReq;
struct _xSyncCreateAlarmReq;
struct _xSyncCreateFenceReq;
struct _xkbBehaviorWireDesc;
struct _xkbGetControlsReply;
struct _xkbGetGeometryReply;
struct autofs_packet_expire;
struct blk_user_trace_setup;
struct btrfs_data_container;
struct btrfs_ioctl_timespec;
struct btrfs_ioctl_vol_args;
struct btrfs_qgroup_inherit;
struct btrfs_scrub_progress;
struct capi_register_params;
struct dvd_lu_send_rpcstate;
struct ethtool_rx_flow_spec;
struct fsl_hv_ioctl_restart;
struct fuse_batch_forget_in;
struct fw_cdev_event_common;
struct fw_cdev_send_request;
struct hs_volume_descriptor;
struct i2c_smbus_ioctl_data;
struct ib_uverbs_close_xrcd;
struct ib_uverbs_create_srq;
struct ib_uverbs_dealloc_mw;
struct ib_uverbs_dealloc_pd;
struct ib_uverbs_destroy_ah;
struct ib_uverbs_destroy_cq;
struct ib_uverbs_destroy_qp;
struct ib_uverbs_modify_srq;
struct ib_uverbs_query_port;
struct ip6t_ipv6header_info;
struct ip_set_counter_match;
struct ipx_route_definition;
struct iso_directory_record;
struct kvm_assigned_msix_nr;
struct kvm_assigned_pci_dev;
struct kvm_guest_debug_arch;
struct kvm_mmu_op_flush_tlb;
struct kvm_mmu_op_write_pte;
struct kvm_reinject_control;
struct kvm_user_trace_setup;
struct kvm_vcpu_pv_apf_data;
struct nfqnl_msg_config_cmd;
struct nfqnl_msg_packet_hdr;
struct nfulnl_msg_packet_hw;
struct omap3isp_ccdc_bclamp;
struct omap3isp_ccdc_blcomp;
struct omap3isp_hist_config;
struct omap3isp_hist_region;
struct omap3isp_prev_blkadj;
struct omapfb_ovl_colormode;
struct omapfb_tearsync_info;
struct omapfb_update_window;
struct ovs_action_push_vlan;
struct r3964_client_message;
struct sctp_event_subscribe;
struct selnl_msg_policyload;
struct selnl_msg_setenforce;
struct snd_compr_codec_caps;
struct snd_hwdep_dsp_status;
struct snd_pcm_channel_info;
struct snd_pcm_mmap_control;
struct snd_sb_csp_mc_header;
struct snd_sb_csp_microcode;
struct snd_seq_event_bounce;
struct snd_seq_queue_client;
struct snd_seq_queue_status;
struct snd_seq_running_info;
struct sockaddr_pppol2tpin6;
struct soundfont_patch_info;
struct soundfont_voice_info;
struct soundfont_voice_parm;
struct tc_fq_codel_cl_stats;
struct tc_fq_codel_qd_stats;
struct ubi_set_vol_prop_req;
struct usb_cdc_notification;
struct usb_cdc_speed_change;
struct usb_debug_descriptor;
struct usb_functionfs_event;
struct usbdevfs_connectinfo;
struct uvc_xu_control_query;
struct v4l2_enum_dv_timings;
struct v4l2_jpegcompression;
struct v4l2_sliced_vbi_data;
struct vm86plus_info_struct;
struct xcb_depth_iterator_t;
struct xcb_focus_in_event_t;
struct xcb_input_key_info_t;
struct xcb_point_iterator_t;
struct xcb_record_range_8_t;
struct xcb_render_linefix_t;
struct xcb_render_spanfix_t;
struct xcb_setup_iterator_t;
struct xcb_xkb_sa_ptr_btn_t;
struct xfrm_userpolicy_info;
struct xfrm_userpolicy_type;
struct xt_conntrack_mtinfo1;
struct xt_conntrack_mtinfo2;
struct xt_conntrack_mtinfo3;
struct xt_ct_target_info_v1;
struct xt_hashlimit_mtinfo1;
struct xt_nfacct_match_info;
struct xt_set_info_match_v0;
struct xt_set_info_match_v1;
struct xt_set_info_match_v3;
struct xt_tcpmss_match_info;
struct xt_u32_value_element;
struct _LbxEndLargeRequest;
union _MoreErrInfo_struct;
struct _PhysDevAddr_struct;
struct _QueryAdaptorsReply;
struct _ScreenSaverSuspend;
struct _ShapeGetRectangles;
struct _ShapeInputSelected;
struct _XDGACreateColormap;
struct _XF86DGADirectVideo;
struct _XF86DGASetViewPort;
struct _XResQueryClientIds;
struct _XResResourceIdSpec;
struct _XkbCompatMapNotify;
struct _XkbControlsChanges;
struct _XkbDeviceBtnAction;
struct _XkbIndicatorDoodad;
struct _XkbIndicatorMapRec;
struct _XkbIndicatorNotify;
struct _XkbSymInterpretRec;
struct _xSyncAwaitFenceReq;
struct _xSyncQueryAlarmReq;
struct _xSyncQueryFenceReq;
struct _xSyncResetFenceReq;
struct _xSyncSetCounterReq;
struct _xSyncWaitCondition;
struct _xkbCompatMapNotify;
struct _xkbGetIndicatorMap;
struct _xkbIndicatorNotify;
struct _xkbKeyTypeWireDesc;
struct _xkbOutlineWireDesc;
struct _xkbOverlayWireDesc;
struct _xkbSectionWireDesc;
struct _xkbSetIndicatorMap;
struct _xkbVModMapWireDesc;
union autofs_packet_union;
struct ax25_bpqaddr_struct;
struct can_bittiming_const;
struct changer_get_element;
struct cyclades_idle_stats;
struct dvb_ofdm_parameters;
struct dvb_qpsk_parameters;
struct ebt_stp_config_info;
struct elf32_fdpic_loadmap;
struct elf32_fdpic_loadseg;
struct ethtool_tcpip4_spec;
struct ethtool_usrip4_spec;
struct floppy_drive_params;
struct floppy_drive_struct;
struct floppy_write_errors;
struct fsl_hv_ioctl_memcpy;
struct fsl_hv_ioctl_status;
struct gfs2_log_descriptor;
struct gnet_stats_rate_est;
struct i2400m_pl_edata_hdr;
struct i2c_rdwr_ioctl_data;
struct ib_ucm_attr_id_resp;
struct ib_ucm_init_qp_attr;
struct ib_ucm_private_data;
struct ib_user_mad_hdr_old;
struct ib_user_mad_reg_req;
struct ib_uverbs_create_ah;
struct ib_uverbs_create_cq;
struct ib_uverbs_create_qp;
struct ib_uverbs_modify_qp;
struct ib_uverbs_open_xrcd;
struct ib_uverbs_post_recv;
struct ib_uverbs_post_send;
struct ib_uverbs_query_srq;
struct ib_uverbs_resize_cq;
union ieee854_long_double;
struct ioctl_evtchn_notify;
struct ioctl_evtchn_unbind;
struct ip_vs_service_entry;
struct kvm_arm_device_addr;
struct kvm_debug_exit_arch;
struct kvm_irq_routing_msi;
struct nand_ecclayout_user;
struct nd_neighbor_solicit;
struct nd_opt_adv_interval;
struct net_dm_config_entry;
struct nfqnl_msg_packet_hw;
struct omap3isp_h3a_af_hmf;
struct omap3isp_h3a_af_iir;
struct omapfb_display_info;
struct rds_info_connection;
struct rds_info_tcp_socket;
struct sadb_x_ipsecrequest;
struct sctp_shutdown_event;
struct seg7_conversion_map;
struct snd_hwdep_dsp_image;
struct snd_pcm_mmap_status;
struct snd_seq_client_info;
struct snd_seq_client_pool;
struct snd_seq_queue_tempo;
struct snd_seq_queue_timer;
struct snd_seq_system_info;
struct sockaddr_pppol2tpv3;
struct soundfont_open_parm;
struct soundfont_voice_map;
struct tcf_ematch_tree_hdr;
union telephony_exception;
struct usb_cdc_header_desc;
struct usb_cdc_line_coding;
struct usb_midi_source_pin;
struct v4l2_bt_timings_cap;
struct v4l2_create_buffers;
struct v4l2_dv_timings_cap;
struct v4l2_frequency_band;
struct v4l2_requestbuffers;
struct v4l2_sliced_vbi_cap;
struct vhost_memory_region;
struct video_still_picture;
struct virtio_balloon_stat;
struct virtio_net_ctrl_hdr;
struct virtio_net_ctrl_mac;
struct x25_subscrip_struct;
struct xcb_atom_iterator_t;
struct xcb_font_iterator_t;
struct xcb_host_iterator_t;
struct xcb_request_error_t;
struct xcb_setup_request_t;
union xcb_xkb_ax_option_t;
struct xcb_xkb_key_alias_t;
struct xfrm_user_kmaddress;
struct xfrm_user_polexpire;
struct xt_addrtype_info_v1;
struct xt_connlabel_mtinfo;
struct xt_connmark_mtinfo1;
struct xt_connmark_tginfo1;
struct xt_hashlimit_htable;
struct xt_owner_match_info;
struct xt_recent_mtinfo_v1;
struct Dwarf_Reg_value3_s;
struct _LbxChangeProperty;
struct _LbxFreeCellsEvent;
struct _LbxIncrementPixel;
struct _LbxModifySequence;
struct _LbxQueryExtension;
struct _LogDevAddr_struct;
struct _LogvolInfo_struct;
struct _PanoramiXGetState;
struct _ScreenSaverNotify;
struct _ShapeQueryExtents;
struct _ShapeQueryVersion;
struct _XDGAFillRectangle;
struct _XF86DGAGetVidPage;
struct _XF86DGAGetVideoLL;
struct _XF86DGASetVidPage;
struct _XIMHotKeyTriggers;
struct _XResClientIdValue;
struct _XevieQueryVersion;
struct _XkbComponentNames;
struct _XkbControlsNotify;
struct _XkbMapNotifyEvent;
struct __gconv_trans_data;
struct _i2o_eisa_bus_info;
struct _xkbActionWireDesc;
struct _xkbControlsNotify;
union _xkbDoodadWireDesc;
struct _xkbLatchLockState;
struct _xkbListComponents;
struct _xkbPerClientFlags;
struct _xkbSymMapWireDesc;
struct ax25_routes_struct;
struct blk_io_trace_remap;
struct btrfs_balance_args;
struct btrfs_qgroup_limit;
struct cdrom_multisession;
struct changer_set_voltag;
struct dlm_device_version;
struct dm_target_versions;
struct dvb_frontend_event;
struct dvb_qam_parameters;
struct dvb_vsb_parameters;
union ethtool_flow_union;
struct ethtool_pauseparam;
struct ethtool_rxfh_indir;
struct fc_bsg_ctels_reply;
struct fc_bsg_host_vendor;
struct fsl_hv_ioctl_start;
struct full_sockaddr_ax25;
struct full_sockaddr_rose;
struct fw_cdev_deallocate;
struct fw_cdev_iso_packet;
struct gfs2_statfs_change;
struct gmon_cg_arc_record;
struct hdspm_channelfader;
struct hiddev_report_info;
struct i2400m_pl_data_hdr;
struct i2o_cmd_passthru32;
struct ib_uverbs_alloc_mw;
struct ib_uverbs_alloc_pd;
struct ib_uverbs_dereg_mr;
struct ib_uverbs_query_qp;
struct icmp6_router_renum;
struct ifla_vf_link_state;
struct inet_diag_hostcond;
struct ip_set_req_get_set;
struct ip_set_req_version;
struct ip_vs_get_services;
struct ip_vs_service_user;
struct ip_vs_timeout_user;
struct ipmi_cmdspec_chans;
struct isdn_ppp_comp_data;
struct jffs2_unknown_node;
struct kvm_coalesced_mmio;
struct kvm_s390_interrupt;
struct kvm_tpr_access_ctl;
struct kvm_xen_hvm_config;
struct minix3_super_block;
struct ncp_request_header;
struct nd_neighbor_advert;
struct nd_opt_prefix_info;
struct nw_modify_dos_info;
struct nw_search_sequence;
struct omap3isp_prev_csup;
struct omap3isp_prev_dcor;
struct omap3isp_prev_hmed;
struct omap3isp_prev_luma;
struct omap3isp_prev_wbal;
struct omap3isp_stat_data;
struct omapfb_memory_read;
struct packet_diag_mclist;
struct pppol2tpv3in6_addr;
struct ptp_perout_request;
struct raw_config_request;
struct sctp_authkey_event;
struct sctp_setadaptation;
struct snd_cea_861_aud_if;
struct snd_compr_metadata;
struct snd_ctl_elem_value;
struct snd_emux_misc_mode;
struct snd_rawmidi_params;
struct snd_rawmidi_status;
struct snd_seq_query_subs;
struct snd_seq_queue_info;
struct snd_seq_queue_skew;
struct tc_fq_codel_xstats;
struct tipc_bearer_config;
struct ubi_leb_change_req;
struct usb_bos_descriptor;
struct usb_cdc_ether_desc;
struct usb_cdc_union_desc;
struct usb_dev_cap_header;
struct usb_gadgetfs_event;
struct usb_hub_descriptor;
struct usb_key_descriptor;
struct usb_otg_descriptor;
struct usbdevfs_getdriver;
struct user_fpregs_struct;
struct v4l2_dbg_chip_info;
struct v4l2_enc_idx_entry;
struct v4l2_mbus_framefmt;
struct v4l2_mpeg_vbi_ITV0;
struct v4l2_mpeg_vbi_itv0;
struct v4l2_subdev_format;
struct virtio_net_ctrl_mq;
struct x25_dte_facilities;
struct xcb_arc_iterator_t;
struct xcb_bell_request_t;
struct xcb_expose_event_t;
struct xcb_record_range_t;
struct xcb_render_color_t;
struct xcb_rgb_iterator_t;
struct xcb_setup_failed_t;
struct xcb_str_iterator_t;
struct xcb_sync_trigger_t;
union xcb_xkb_behavior_t;
struct xcb_xkb_key_name_t;
struct xcb_xkb_key_type_t;
struct xcb_xkb_property_t;
struct xfrm_userpolicy_id;
struct xt_osf_user_finger;
struct xt_standard_target;
struct xt_tos_target_info;
struct Dwarf_Regtable3_s;
struct _ErrorInfo_struct;
struct _LbxInvalidateTag;
union _SCSI3Addr_struct;
struct _ShapeSelectInput;
struct _ShmGetImageReply;
struct _Unwind_Exception;
struct _XDGAQueryVersion;
struct _XEVIQueryVersion;
struct _XIMHotKeyTrigger;
struct _XResClientIdSpec;
struct _XResQueryClients;
struct _XResQueryVersion;
struct _XcupQueryVersion;
struct _XevieSelectInput;
struct _XkbAccessXNotify;
struct _XkbActionMessage;
struct _XkbCompatChanges;
struct _XkbComponentList;
struct _XkbComponentName;
struct _XkbDeviceChanges;
struct _XkbDeviceLedInfo;
struct _XkbGeometrySizes;
struct _XkbMessageAction;
struct _XkbPtrDfltAction;
struct _XrmHashBucketRec;
struct __gconv_step_data;
struct __old_kernel_stat;
struct _i2o_status_block;
struct _xSyncGetPriority;
struct _xSyncSetPriority;
struct _xkbAccessXNotify;
struct _xkbActionMessage;
struct _xkbGetDeviceInfo;
struct _xkbGetNamesReply;
struct _xkbGetStateReply;
struct _xkbPointWireDesc;
struct _xkbSetDeviceInfo;
struct _xkbShapeWireDesc;
struct arpt_devaddr_info;
struct atmlec_config_msg;
struct autofs_packet_hdr;
struct ax25_parms_struct;
struct baycom_debug_data;
union capi_ioctl_struct;
struct dcb_peer_app_info;
struct dccp_hdr_ack_bits;
struct dccp_hdr_response;
struct dlm_lspace_params;
struct dlm_write_request;
struct dvb_frontend_info;
struct ebt_arpreply_info;
struct ebt_redirect_info;
struct edd_device_params;
struct erase_info_user64;
struct ethtool_gfeatures;
struct ethtool_perm_addr;
struct ethtool_ringparam;
struct ethtool_rx_ntuple;
struct ethtool_sfeatures;
struct ethtool_sset_info;
struct fanotify_response;
struct fb_fix_screeninfo;
struct fb_var_screeninfo;
struct files_stat_struct;
struct floppy_max_errors;
struct fsl_hv_ioctl_prop;
struct fsl_hv_ioctl_stop;
struct fuse_fallocate_in;
struct fuse_getxattr_out;
struct fuse_interrupt_in;
struct fw_cdev_flush_iso;
struct fw_cdev_queue_iso;
struct fw_cdev_start_iso;
struct gfs2_quota_change;
struct hdspm_config_info;
struct hdspm_mixer_ioctl;
struct hiddev_field_info;
struct hipnet_statistics;
struct ib_ucm_destroy_id;
struct ib_ucm_event_resp;
struct ib_uverbs_ah_attr;
struct ib_uverbs_cmd_hdr;
struct ib_uverbs_open_qp;
struct ib_uverbs_poll_cq;
struct ib_uverbs_qp_attr;
struct ib_uverbs_qp_dest;
struct ib_uverbs_recv_wr;
struct ib_uverbs_send_wr;
struct idletimer_tg_info;
struct inet_diag_meminfo;
union ip_set_name_index;
struct ip_vs_daemon_user;
struct ipmi_timing_parms;
union jffs2_device_node;
struct jffs2_raw_summary;
struct kvm_create_device;
struct kvm_memory_region;
struct kvm_mmu_op_header;
struct kvm_ppc_smmu_info;
struct mdu_bitmap_file_s;
struct media_device_info;
struct media_entity_desc;
struct minix_super_block;
struct ncp_mount_data_v4;
struct nd_router_solicit;
struct net_dm_config_msg;
struct net_dm_drop_point;
struct netlink_diag_ring;
struct nf_nat_ipv4_range;
struct ns_tcp_tsig_state;
struct omap3isp_ccdc_fpc;
struct omap3isp_prev_cfa;
struct omap3isp_prev_csc;
struct omapfb_plane_info;
struct ppdev_frob_struct;
struct ptp_extts_request;
struct re_pattern_buffer;
struct revectored_struct;
struct romfs_super_block;
struct rose_cause_struct;
struct rose_route_struct;
struct rtnl_link_stats64;
struct rwrt_feature_desc;
struct sadb_x_nat_t_port;
struct sadb_x_nat_t_type;
struct sctp_assoc_change;
struct sctp_getaddrs_old;
union sctp_notification;
struct sctp_paddr_change;
struct sctp_remote_error;
union snd_codec_options;
struct snd_ctl_card_info;
struct snd_ctl_elem_info;
struct snd_ctl_elem_list;
struct snd_pcm_hw_params;
struct snd_pcm_sw_params;
struct snd_seq_port_info;
struct snd_seq_real_time;
union snd_seq_timestamp;
struct snd_timer_gparams;
struct snd_timer_gstatus;
struct sock_extended_err;
struct sockaddr_pppol2tp;
struct usb_cdc_mbim_desc;
struct usb_cdc_mdlm_desc;
struct usb_cdc_ncm_dpe16;
struct usb_cdc_ncm_dpe32;
struct usb_cdc_ncm_ndp16;
struct usb_cdc_ncm_ndp32;
struct usb_cdc_ncm_nth16;
struct usb_cdc_ncm_nth32;
struct usb_cdc_obex_desc;
struct v4l2_dbg_register;
struct v4l2_exportbuffer;
struct v4l2_ext_controls;
struct v4l2_hw_freq_seek;
struct vfio_group_status;
struct vhost_scsi_target;
struct vhost_vring_state;
struct video_spu_palette;
struct virtio_blk_config;
struct virtio_blk_outhdr;
struct virtio_net_config;
struct virtio_scsi_inhdr;
struct xcb_render_trap_t;
struct xcb_value_error_t;
struct xcb_xevie_event_t;
struct xcb_xkb_listing_t;
struct xcb_xkb_mod_def_t;
struct xcb_xkb_outline_t;
struct xcb_xkb_overlay_t;
struct xcb_xkb_section_t;
struct xcb_xv_rational_t;
struct xfrm_lifetime_cfg;
struct xfrm_lifetime_cur;
struct xfrm_replay_state;
struct xfrm_user_acquire;
struct xfrm_user_mapping;
struct xfrm_user_migrate;
struct xfrm_user_sec_ctx;
struct xfrm_usersa_flush;
struct xfrm_userspi_info;
struct xt_connbytes_info;
struct xt_connlimit_data;
struct xt_connlimit_info;
struct xt_ct_target_info;
struct xt_hashlimit_info;
struct xt_iprange_mtinfo;
struct xt_sctp_flag_info;
struct xt_socket_mtinfo1;
struct xt_socket_mtinfo2;
struct xt_statistic_info;
struct xt_statistic_priv;
struct xt_tos_match_info;
struct CLIENT__clnt_ops;
struct Dwarf_P_Marker_s;
struct Dwarf_Regtable_s;
struct INFTLMediaHeader;
struct La_x86_64_retval;
struct _FontPathElement;
struct _LbxQueryVersion;
struct _ShapeRectangles;
struct _ShmCreatePixmap;
struct _ShmQueryVersion;
struct _XConnectionInfo;
struct _XDGASelectInput;
struct _XDGASetViewport;
struct _XagDestroyAssoc;
struct _XagQueryVersion;
struct _XcmsFunctionSet;
struct _XcmsPerScrnInfo;
struct _XcupStoreColors;
struct _XkbClientMapRec;
struct _XkbCompatMapRec;
struct _XkbIndicatorRec;
struct _XkbPtrBtnAction;
struct _XkbServerMapRec;
struct _XvMCMpegControl;
struct __dvb_net_if_old;
struct _xQueryFontReply;
struct _xSyncInitialize;
struct _xkbGetCompatMap;
struct _xkbGetKbdByName;
struct _xkbModsWireDesc;
struct _xkbSelectEvents;
struct _xkbSetCompatMap;
struct _xkbUseExtension;
struct _xwd_file_header;
struct arpt_get_entries;
struct audit_tty_status;
struct authdes_fullname;
struct autofs_v5_packet;
struct avmb1_extcarddef;
struct ax25_info_struct;
struct bridge_vlan_info;
struct can_berr_counter;
struct can_device_stats;
struct ccs_modesel_head;
struct cdrom_read_audio;
struct changer_exchange;
struct changer_position;
struct clusterip_config;
struct cyclades_monitor;
struct dccp_hdr_request;
struct dlm_purge_params;
struct dvd_lu_send_agid;
struct ebt_mac_wormhash;
struct ebt_pkttype_info;
struct ethtool_channels;
struct ethtool_coalesce;
struct ethtool_flow_ext;
struct ethtool_gstrings;
struct fc_bsg_rport_els;
struct fc_els_rnid_resp;
struct fc_els_rscn_page;
struct floppy_fdc_state;
struct fuse_getxattr_in;
struct fuse_ioctl_iovec;
struct fuse_setxattr_in;
struct fw_cdev_allocate;
struct fw_cdev_get_info;
struct fw_cdev_stop_iso;
struct gfs2_meta_header;
struct gnet_stats_basic;
struct gnet_stats_queue;
struct group_source_req;
struct hdsp_config_info;
struct hiddev_usage_ref;
struct i2o_cmd_passthru;
struct ib_path_rec_data;
struct ib_ucm_create_id;
struct ib_ucm_event_get;
struct ib_user_path_rec;
struct ib_uverbs_reg_mr;
struct ifla_vf_spoofchk;
struct inet_diag_req_v2;
struct inet_diag_sockid;
struct ip6t_get_entries;
struct ip6t_reject_info;
struct ip_vs_dest_entry;
struct ip_vs_stats_user;
struct ipmi_req_settime;
struct irda_device_info;
struct irda_device_list;
struct ivtvfb_dma_frame;
union jffs2_node_union;
struct jffs2_raw_dirent;
struct kvm_assigned_irq;
struct kvm_cpuid_entry2;
struct kvm_ioapic_state;
struct kvm_memory_alias;
struct mdp_superblock_1;
struct mdp_superblock_s;
struct mdu_array_info_s;
struct mdu_start_info_s;
struct media_links_enum;
struct minix3_dir_entry;
struct mode_page_header;
struct mrw_feature_desc;
struct name_table_entry;
struct ncp_reply_header;
struct nd_router_advert;
struct net_dm_alert_msg;
struct netlink_diag_msg;
struct netlink_diag_req;
struct old_linux_dirent;
struct omap3isp_prev_nf;
struct omapfb_color_key;
struct omapfb_vram_info;
struct ovs_key_ethernet;
struct packet_diag_info;
struct packet_diag_ring;
struct phone_capability;
struct phone_codec_data;
struct pkt_ctrl_command;
struct pppol2tpin6_addr;
struct prefix_cacheinfo;
struct qnx4_inode_entry;
struct qnx4_super_block;
struct rdma_cm_id_stats;
struct rds_free_mr_args;
struct rds_info_counter;
struct rds_info_message;
struct region_info_user;
struct resume_swap_area;
struct robust_list_head;
struct sadb_x_kmaddress;
struct sadb_x_kmprivate;
struct sctp_assoc_stats;
struct sctp_assoc_value;
struct sctp_assocparams;
struct sctp_paddrparams;
struct sctp_pdapi_event;
struct sctp_send_failed;
struct sctp_setpeerprim;
struct signalfd_siginfo;
struct snd_compr_params;
struct snd_compr_tstamp;
struct snd_dm_fm_params;
struct snd_pcm_sync_ptr;
struct snd_rawmidi_info;
struct snd_sb_csp_start;
struct snd_seq_ev_quote;
struct snd_seq_ev_raw32;
struct snd_timer_params;
struct snd_timer_select;
struct snd_timer_status;
struct sockaddr_l2tpip6;
struct sockaddr_storage;
struct sound_timer_info;
struct spi_ioc_transfer;
struct tc_netem_corrupt;
struct tc_netem_gemodel;
struct tc_netem_gimodel;
struct tc_netem_reorder;
struct tc_service_curve;
struct tipc_cfg_msg_hdr;
struct tipc_link_config;
struct uac1_status_word;
struct usb_cdc_dmm_desc;
struct usb_cdc_ncm_desc;
struct user_regs_struct;
struct uvc_format_mjpeg;
struct v4l2_captureparm;
struct v4l2_decoder_cmd;
struct v4l2_encoder_cmd;
struct v4l2_event_vsync;
struct v4l2_ext_control;
struct v4l2_framebuffer;
struct v4l2_frmivalenum;
struct v4l2_frmsizeenum;
struct v4l2_subdev_crop;
struct v4l2_subdev_edid;
struct vfio_device_info;
struct vfio_region_info;
struct vhost_vring_addr;
struct vhost_vring_file;
struct virtio_9p_config;
struct x25_calluserdata;
struct x25_route_struct;
struct xcb_connection_t;
struct xcb_res_client_t;
struct xcb_sync_int64_t;
struct xcb_visualtype_t;
union xcb_xkb_action_t;
union xcb_xkb_doodad_t;
struct xfrm_user_expire;
struct xfrm_user_report;
struct xfrm_usersa_info;
struct xt_CHECKSUM_info;
struct xt_addrtype_info;
struct xt_counters_info;
struct xt_devgroup_info;
struct xt_recent_mtinfo;
struct NFTLMediaHeader;
struct SVCXPRT__xp_ops;
struct _FontResolution;
struct _IO_cookie_file;
union _LUNAddr_struct;
struct _LbxAllowMotion;
struct _LbxCloseClient;
struct _LbxGetProperty;
struct _LbxInternAtoms;
struct _LbxSwitchEvent;
struct _Unwind_Context;
struct _XComposeStatus;
struct _XConnWatchInfo;
struct _XDGAQueryModes;
struct _XInternalAsync;
struct _XagCreateAssoc;
struct _XcmsColorSpace;
struct _XkbCtrlsAction;
struct _XkbGroupAction;
struct _XkbKbdDpyState;
struct _XkbKeyAliasRec;
struct _XkbNameChanges;
struct _XkbNamesNotify;
struct _XkbShapeDoodad;
struct __locale_struct;
struct _old_mixer_info;
struct _xkbGetControls;
struct _xkbGetGeometry;
struct _xkbGetMapReply;
struct _xkbKeyWireDesc;
struct _xkbNamesNotify;
struct _xkbRowWireDesc;
struct _xkbSetControls;
struct _xkbSetGeometry;
struct _xkbStateNotify;
struct adfs_discrecord;
struct atm_backend_ppp;
struct audit_rule_data;
struct ax25_ctl_struct;
struct ax25_fwd_struct;
struct bfs_super_block;
struct blkpg_ioctl_arg;
struct blkpg_partition;
struct console_font_op;
struct consolefontdesc;
struct dlm_lock_params;
struct dlm_lock_result;
struct dm_ulog_request;
struct dvd_lu_send_asf;
struct ebt_mark_m_info;
struct ebt_mark_t_info;
struct eni_multipliers;
struct erase_info_user;
struct ethtool_drvinfo;
struct ethtool_modinfo;
struct ethtool_ts_info;
struct ethtool_wolinfo;
struct fat_boot_fsinfo;
struct fat_boot_sector;
struct fc_bsg_host_els;
struct fc_bsg_rport_ct;
struct fc_els_rls_resp;
struct fc_els_rnid_cid;
struct fc_els_rnid_gen;
struct fc_els_rpl_resp;
struct fc_els_rps_resp;
struct fc_frame_header;
struct fddi_8022_1_hdr;
struct fddi_8022_2_hdr;
struct fuse_direntplus;
struct fuse_forget_one;
struct fuse_getattr_in;
struct fuse_out_header;
struct fuse_release_in;
struct fuse_setattr_in;
struct fuse_statfs_out;
struct gfs2_inum_range;
struct gfs2_log_header;
struct hwtstamp_config;
struct i2400m_l3l4_hdr;
struct i2o_cmd_psetget;
struct ib_ucm_sidr_rep;
struct ib_ucm_sidr_req;
struct ib_user_mad_hdr;
struct ifla_vf_tx_rate;
struct ifla_vlan_flags;
struct inet_diag_bc_op;
struct inftl_unithead1;
struct inftl_unithead2;
struct ip6t_npt_tginfo;
struct ip_vs_dest_user;
struct ip_vs_get_dests;
struct ipt_get_entries;
struct ipt_reject_info;
struct ipx_config_data;
struct jffs2_raw_inode;
struct jffs2_raw_xattr;
struct kernel_ipmi_msg;
struct kvm_cpuid_entry;
struct kvm_debug_guest;
struct kvm_device_attr;
struct kvm_guest_debug;
struct kvm_irq_routing;
struct kvm_lapic_state;
struct kvm_signal_mask;
struct kvm_translation;
struct kvm_vcpu_events;
struct mdu_disk_info_s;
struct media_link_desc;
struct minix_dir_entry;
struct mixer_vol_table;
struct mmap_arg_struct;
struct msdos_dir_entry;
struct mtrr_state_type;
struct ncp_volume_info;
struct net_dm_user_msg;
struct nf_ct_tcp_flags;
struct nfs4_mount_data;
struct nr_parms_struct;
struct nr_route_struct;
struct olpc_ofw_header;
struct omapfb_mem_info;
struct ovs_vport_stats;
struct packet_diag_msg;
struct packet_diag_req;
struct perf_event_attr;
struct ppp_option_data;
struct pppol2tpv3_addr;
struct ptp_extts_event;
struct rds_atomic_args;
struct rds_get_mr_args;
struct rds_info_socket;
struct rds_rdma_notify;
struct relocation_info;
struct rm_feature_desc;
struct rtnl_link_ifmap;
struct rtnl_link_stats;
struct sctp_authchunks;
struct sctp_paddrthlds;
struct sctp_sndrcvinfo;
struct short_hand_verf;
struct slaving_request;
struct snd_compr_avail;
struct snd_ctl_elem_id;
struct snd_dm_fm_voice;
struct snd_enc_generic;
union snd_pcm_sync_id;
struct snd_sb_csp_info;
struct snd_seq_connect;
struct snd_seq_ev_ctrl;
struct snd_seq_ev_note;
struct snd_seq_ev_raw8;
struct snd_timer_ginfo;
struct snd_timer_tread;
struct sockaddr_atmpvc;
struct sockaddr_atmsvc;
struct sockaddr_l2tpip;
struct tc_choke_xstats;
struct tc_codel_xstats;
struct tc_sfqred_stats;
struct tiocl_selection;
struct tipc_genlmsghdr;
struct ulog_packet_msg;
struct unix_diag_rqlen;
struct usb_ctrlrequest;
struct usb_port_status;
struct usb_set_sel_req;
struct uvc_frame_mjpeg;
struct v4l2_bt_timings;
struct v4l2_capability;
struct v4l2_dv_timings;
struct v4l2_event_ctrl;
struct v4l2_outputparm;
struct v4l2_pix_format;
struct v4l2_streamparm;
struct v4l2_vbi_format;
struct video_highlight;
struct video_navi_pack;
struct vlan_ioctl_args;
struct vm86plus_struct;
struct vring_used_elem;
struct xMbufBufferInfo;
struct xcb_auth_info_t;
struct xcb_coloritem_t;
struct xcb_extension_t;
struct xcb_rectangle_t;
struct xcb_timecoord_t;
struct xcb_xkb_shape_t;
struct xcb_xv_format_t;
struct xfrm_encap_tmpl;
struct xt_comment_info;
struct xt_entry_target;
struct xt_error_target;
struct xt_get_revision;
struct xt_mark_mtinfo1;
struct xt_mark_tginfo2;
struct xt_multiport_v1;
struct xt_physdev_info;
struct xt_pkttype_info;
struct AUTH__auth_ops;
struct INFTLPartition;
struct La_x86_64_regs;
struct PartitionBlock;
struct RigidDiskBlock;
struct _LbxCloseEvent;
struct _LbxStartProxy;
struct _ShmCompletion;
struct _XExtEventInfo;
struct _XImage__funcs;
struct _XkbBellNotify;
struct _XkbDeviceInfo;
struct _XkbKTMapEntry;
struct _XkbKeyNameRec;
struct _XkbLogoDoodad;
struct _XkbMapChanges;
struct _XkbOverlayKey;
struct _XkbOverlayRow;
struct _XkbTextDoodad;
struct _i2o_hrt_entry;
struct _i2o_lct_entry;
struct _i2o_local_bus;
struct _i2o_other_bus;
struct _obstack_chunk;
struct _xAnyClassinfo;
struct _xSyncAwaitReq;
struct _xValuatorInfo;
struct _xkbBellNotify;
struct accepted_reply;
struct atalk_netrange;
struct atmtcp_control;
struct audio_buf_info;
struct authunix_parms;
struct avmb1_resetdef;
struct bp_getfile_arg;
struct bp_getfile_res;
struct cdrom_tocentry;
struct changer_params;
struct compat_timeval;
struct copr_debug_buf;
struct cpufreq_policy;
struct cycx_fw_header;
struct dccp_hdr_reset;
struct dlm_plock_info;
struct dm_target_deps;
struct dm_target_spec;
struct dtv_properties;
struct ebt_802_3_info;
struct ebt_among_info;
struct ebt_limit_info;
struct ebt_nflog_info;
struct ethtool_eeprom;
struct fc_bsg_host_ct;
struct fc_bsg_request;
struct fc_els_rec_acc;
struct fc_els_rtv_acc;
struct fc_gid_pn_resp;
struct fc_gpn_ft_resp;
struct feature_header;
struct floppy_raw_cmd;
struct fuse_access_in;
struct fuse_create_in;
struct fuse_entry_out;
struct fuse_file_lock;
struct fuse_forget_in;
struct fuse_in_header;
struct fuse_ioctl_out;
struct fuse_rename_in;
struct fuse_write_out;
struct gaih_addrtuple;
struct gfs2_ea_header;
struct gfs2_quota_lvb;
struct gnet_estimator;
struct hashlimit_cfg1;
struct hdlcdrv_params;
struct hdspm_peak_rms;
struct hiddev_devinfo;
struct hidraw_devinfo;
struct hippi_snap_hdr;
struct i2400m_bcf_hdr;
struct i2400m_msg_hdr;
struct i2400m_tlv_hdr;
union i2c_smbus_data;
struct i2o_cmd_hrtlct;
struct ib_ucm_attr_id;
struct ib_ucm_cmd_hdr;
struct idt77105_stats;
union ieee754_double;
struct ifla_cacheinfo;
struct ifpppcstatsreq;
struct inftl_unittail;
struct ip6_opt_router;
struct ip6_opt_tunnel;
struct ip_mreq_source;
struct ipmi_ipmb_addr;
struct iso_path_table;
struct ivtv_dma_frame;
struct jffs2_raw_xref;
struct klm_unlockargs;
struct kvm_breakpoint;
struct kvm_clock_data;
struct kvm_config_tlb;
struct kvm_enable_cap;
struct kvm_pit_config;
struct kvm_pit_state2;
struct kvm_ppc_pvinfo;
struct kvm_steal_time;
struct kvm_vapic_addr;
struct linux_dirent64;
struct media_pad_desc;
struct mii_ioctl_data;
struct mpc_parameters;
struct msdos_dir_slot;
struct mtrr_var_range;
struct ncp_mount_data;
struct nfs_fhbase_new;
struct nfs_fhbase_old;
struct nlm_unlockargs;
struct nw_info_struct;
struct oldold_utsname;
struct ovs_flow_stats;
struct ovs_key_icmpv6;
struct ppp_comp_stats;
union pthread_attr_t;
struct ptp_clock_caps;
struct ptp_clock_time;
struct ptp_sys_offset;
struct qnx4_link_info;
struct rand_pool_info;
struct rejected_reply;
struct sadb_supported;
struct sadb_x_sec_ctx;
struct sbi_instrument;
struct scc_mem_config;
struct sctp_assoc_ids;
struct sctp_authchunk;
struct sctp_authkeyid;
struct sctp_paddrinfo;
struct sctp_sack_info;
struct sdla_dlci_conf;
struct sel_arg_struct;
struct snd_aes_iec958;
struct snd_codec_desc;
struct snd_compr_caps;
struct snd_dm_fm_info;
struct snd_dm_fm_note;
struct snd_enc_vorbis;
struct snd_hwdep_info;
struct snd_pcm_status;
struct snd_seq_ev_ext;
struct snd_seq_result;
struct snd_timer_info;
struct snd_timer_read;
struct sockaddr_pppox;
struct sys_desc_table;
struct tc_mqprio_qopt;
struct tc_multiq_qopt;
struct tc_sfq_qopt_v1;
struct tcf_ematch_hdr;
struct tipc_link_info;
struct tipc_node_info;
struct ubi_attach_req;
struct usb_hub_status;
struct usbdevfs_ioctl;
struct v4l2_dbg_match;
struct v4l2_frequency;
struct v4l2_modulator;
struct v4l2_queryctrl;
struct v4l2_querymenu;
struct v4l2_selection;
struct virtio_net_hdr;
struct vt_setactivate;
struct x25_facilities;
struct xcb_charinfo_t;
struct xcb_fontprop_t;
struct xcb_res_type_t;
struct xcb_xv_image_t;
struct xfrm_aevent_id;
struct xfrm_algo_aead;
struct xfrm_algo_auth;
struct xfrm_user_tmpl;
struct xfrm_usersa_id;
struct xfrmu_sadhinfo;
struct xfrmu_spdhinfo;
struct xt_NFQ_info_v1;
struct xt_NFQ_info_v2;
struct xt_NFQ_info_v3;
struct xt_entry_match;
struct xt_helper_info;
struct xt_ipvs_mtinfo;
struct xt_length_info;
union xt_policy_addr;
struct xt_policy_elem;
struct xt_policy_info;
struct xt_policy_spec;
struct xt_set_info_v0;
struct xt_string_info;
struct xt_tcpmss_info;
struct ypall_callback;
struct ypbind_binding;
struct yppushresp_xfr;
struct ypresp_key_val;
struct ypresp_maplist;
struct zatm_pool_info;
struct CYZ_BOOT_CTRL;
struct _FPEFunctions;
struct _IO_FILE_plus;
struct _LbxCopyPlane;
struct _LbxImageText;
struct _LbxNewClient;
struct _LbxPolyPoint;
struct _LbxQueryFont;
struct _LbxStopProxy;
struct _ShapeCombine;
struct _XAsyncEState;
struct _XDGACopyArea;
struct _XkbAnyAction;
struct _XkbAnyDoodad;
struct _XkbISOAction;
struct _XkbModAction;
struct _XkbPtrAction;
struct _XkbSymMapRec;
struct __bridge_info;
struct __exit_status;
struct __jmp_buf_tag;
struct __sched_param;
struct __sysctl_args;
struct _agp_allocate;
struct _fpx_sw_bytes;
struct _libc_fpstate;
struct _win_st__pdat;
struct _xkbMapNotify;
struct accessdata_dn;
struct apm_bios_info;
struct arc_eth_encap;
struct atm_aal_stats;
struct atm_dev_stats;
struct audio_karaoke;
struct avmb1_carddef;
struct avmb1_loaddef;
struct bp_whoami_arg;
struct bp_whoami_res;
struct ca_descr_info;
struct can_bittiming;
struct cdrom_subchnl;
struct cdrom_volctrl;
struct cgw_csum_crc8;
struct cgw_frame_mod;
struct cpufreq_stats;
struct cuse_init_out;
struct cycx_firmware;
struct directory_obj;
struct dlm_lock_data;
struct dm_target_msg;
struct dvd_copyright;
struct ebt_802_3_hdr;
struct ebt_vlan_info;
struct ethtool_flash;
struct ethtool_rxnfc;
struct ethtool_stats;
struct ethtool_value;
struct fc_els_ls_acc;
struct fc_els_ls_rjt;
struct fddi_snap_hdr;
struct fiemap_extent;
struct floppy_struct;
struct fs_disk_quota;
struct fs_quota_stat;
struct fuse_attr_out;
struct fuse_bmap_out;
struct fuse_flush_in;
struct fuse_fsync_in;
struct fuse_init_out;
struct fuse_ioctl_in;
struct fuse_mkdir_in;
struct fuse_mknod_in;
struct fuse_open_out;
struct fuse_poll_out;
struct fuse_write_in;
union fw_cdev_event;
struct gfs2_rgrp_lvb;
struct gmon_hist_hdr;
struct hashlimit_cfg;
struct hdlcdrv_ioctl;
struct hdsp_9632_aeb;
struct hdsp_firmware;
struct hdsp_peak_rms;
struct hdspm_version;
struct hsc_rx_config;
struct hsc_tx_config;
struct i2o_sg_io_hdr;
struct ib_ucm_listen;
struct ib_ucm_notify;
struct ib_uverbs_sge;
union ieee754_float;
struct ifa_cacheinfo;
struct ifla_port_vsi;
struct ifpppstatsreq;
struct igmpv3_report;
struct inet_diag_msg;
struct inet_diag_req;
struct inodes_stat_t;
struct inotify_event;
struct ip6_opt_jumbo;
struct ip6_tnl_parm2;
struct ip6t_standard;
struct ip_vs_getinfo;
struct ipmi_lan_addr;
struct ipt_ulog_info;
struct ipx_route_def;
struct kcapi_carddef;
struct kcapi_flagdef;
struct kexec_segment;
struct kvm_debugregs;
struct kvm_dirty_log;
struct kvm_dirty_tlb;
struct kvm_interrupt;
struct kvm_ioeventfd;
struct kvm_irq_level;
struct kvm_msr_entry;
struct kvm_pic_state;
struct kvm_pit_state;
struct kvm_sync_regs;
struct master_config;
struct mdu_version_s;
struct mtd_ecc_stats;
struct mtd_info_user;
struct mtd_oob_buf64;
struct mtd_write_req;
struct nd_opt_rd_hdr;
struct nda_cacheinfo;
struct nlm_shareargs;
struct nr_ctl_struct;
struct pppol2tp_addr;
struct pps_bind_args;
struct ps_prochandle;
struct rds_rdma_args;
struct remove_sample;
struct request_sense;
struct rpc_createerr;
struct rstat_timeval;
struct rta_cacheinfo;
struct rta_mfc_stats;
struct sadb_lifetime;
struct sadb_spirange;
struct sadb_x_policy;
struct scc_calibrate;
struct scc_hw_config;
struct sctp_getaddrs;
struct sctp_hmacalgo;
struct seq_event_rec;
struct serial_struct;
struct sioc_mif_req6;
struct snd_ctl_event;
struct snd_seq_event;
struct sock_diag_req;
struct sockaddr_ax25;
struct sockaddr_caif;
struct sockaddr_irda;
struct sockaddr_iucv;
struct sockaddr_rose;
struct sockaddr_tipc;
struct synth_control;
struct tc_cbq_lssopt;
struct tc_cbq_police;
struct tc_cbq_wrropt;
struct tc_cbq_xstats;
struct tc_choke_qopt;
struct tc_hfsc_stats;
struct tc_htb_xstats;
struct tc_netem_corr;
struct tc_netem_qopt;
struct tc_netem_rate;
struct tc_red_xstats;
struct tc_rsvp_pinfo;
struct tc_sfb_xstats;
struct tc_sfq_xstats;
struct tcpvegas_info;
struct td_thr_events;
struct tipc_name_seq;
struct tlv_list_desc;
struct tr_statistics;
struct ubi_mkvol_req;
struct ubi_rnvol_req;
struct ubi_rsvol_req;
struct unix_diag_msg;
struct unix_diag_req;
struct unix_diag_vfs;
struct usb_handshake;
struct uvc_menu_info;
struct v4l2_audioout;
struct v4l2_rds_data;
struct v4l2_standard;
struct v4l2_timecode;
struct vfio_irq_info;
struct video_command;
struct watchdog_info;
struct x25_causediag;
struct xcb_segment_t;
struct xcb_xkb_key_t;
struct xcb_xkb_row_t;
struct xfrm_selector;
struct xfrmu_spdinfo;
struct xt_audit_info;
struct xt_limit_priv;
struct xt_nflog_info;
struct xt_quota_info;
struct xt_quota_priv;
struct xt_realm_info;
struct xt_state_info;
struct xt_tee_tginfo;
struct ypbind_setdom;
struct ypdelete_args;
struct ypresp_master;
struct ypupdate_args;
struct zatm_pool_req;
struct COFF_filehdr;
struct RUNTIME_9060;
struct XDR__xdr_ops;
struct _FillPolyReq;
struct _LbxCopyArea;
struct _LbxFillPoly;
struct _LbxPolyText;
struct _LbxPutImage;
struct _MGSL_PARAMS;
struct _PutImageReq;
struct _ShapeNotify;
struct _ShapeOffset;
struct _ShmGetImage;
struct _ShmPutImage;
struct _XDGASetMode;
struct _XkbAnyEvent;
struct _XkbBehavior;
struct _XkbControls;
struct _XkbGeometry;
struct _XkbNamesRec;
struct _XkbProperty;
struct _XkbStateRec;
struct _XvMCQMatrix;
struct __fat_dirent;
struct __gconv_info;
struct __gconv_step;
struct _agp_segment;
struct _i2o_isa_bus;
struct _i2o_mca_bus;
struct _i2o_pci_bus;
struct _libc_fpxreg;
struct _libc_xmmreg;
struct _ns_flagdata;
struct _xButtonInfo;
struct _xDeviceInfo;
struct _xRRModeInfo;
struct _xkbAnyEvent;
struct _xkbGetNames;
struct _xkbGetState;
struct _xkbSetNames;
struct arc_hardware;
struct arpd_request;
struct arpt_getinfo;
struct arpt_replace;
struct audio_status;
struct audit_status;
struct authdes_cred;
struct authdes_verf;
struct avmb1_getdef;
struct avmb1_t4file;
struct baycom_ioctl;
struct bcm_msg_head;
struct blk_io_trace;
struct br_mdb_entry;
struct buffmem_desc;
struct ca_slot_info;
struct can_ctrlmode;
struct capi_profile;
struct capi_version;
struct cdrom_tochdr;
struct cgw_csum_xor;
struct changer_move;
struct console_font;
struct cramfs_inode;
struct cramfs_super;
struct cryptkeyarg2;
struct cuse_init_in;
struct cycx_fw_info;
struct dccp_hdr_ext;
struct dl_phdr_info;
struct dm_name_list;
struct drand48_data;
struct dtv_fe_stats;
struct dtv_property;
struct dvd_manufact;
struct dvd_physical;
struct dvd_send_key;
struct ebt_arp_info;
struct ebt_ip6_info;
struct ebt_log_info;
struct ebt_nat_info;
struct ebt_stp_info;
struct eg_ctrl_info;
struct elf_prpsinfo;
struct elf_prstatus;
struct ether_header;
union etheraddress;
struct ethtool_dump;
struct ethtool_regs;
struct ethtool_test;
struct fb_con2fbmap;
struct fc_bsg_reply;
struct fc_els_adisc;
struct fc_els_flogi;
struct fc_gspn_resp;
struct fc_ns_gid_ft;
struct fc_ns_gid_pn;
struct fc_ns_gid_pt;
struct fc_ns_pt_obj;
struct fc_ns_rff_id;
struct fc_ns_rft_id;
struct fib_rule_hdr;
struct format_descr;
struct fs_qfilestat;
struct fstrim_range;
struct fuse_bmap_in;
struct fuse_init_in;
struct fuse_kstatfs;
struct fuse_link_in;
struct fuse_open_in;
struct fuse_poll_in;
struct fuse_read_in;
struct getcpu_cache;
struct group_filter;
struct hdsp_version;
struct hdspm_config;
struct hdspm_status;
struct he_ioctl_reg;
struct hiddev_event;
struct hippi_fp_hdr;
struct hippi_le_hdr;
struct hsearch_data;
struct i2o_evt_info;
struct ib_uverbs_wc;
struct icmp6_filter;
struct icmp_ra_addr;
struct ieee_maxrate;
struct if_irda_line;
struct if_nameindex;
struct ifaddrlblmsg;
struct ifla_vf_vlan;
struct igmpv3_query;
struct in_ctrl_info;
struct ip6_opt_nsap;
struct ip6_tnl_parm;
struct ip6t_getinfo;
struct ip6t_hl_info;
struct ip6t_replace;
struct ip_timestamp;
struct ipmi_cmdspec;
struct ipt_ttl_info;
struct irda_ias_set;
struct key_netstarg;
struct key_netstres;
struct klm_lockargs;
struct klm_testargs;
struct klm_testrply;
struct kvm_mp_state;
struct kvm_msr_list;
struct kvm_reg_list;
struct kvm_s390_psw;
struct linux_dirent;
struct llc_snap_hdr;
struct minix2_inode;
struct mt_tape_info;
struct mtconfiginfo;
struct nand_oobfree;
struct nand_oobinfo;
struct nduseroptmsg;
union nf_inet_addr;
struct nf_nat_range;
struct nlm_cancargs;
struct nlm_lockargs;
struct nlm_shareres;
struct nlm_testargs;
struct nlm_testrply;
struct nubus_dirent;
struct ovs_dp_stats;
struct ovs_key_icmp;
struct ovs_key_ipv4;
struct ovs_key_ipv6;
struct pg_write_hdr;
struct phone_except;
struct re_registers;
struct rfkill_event;
struct rr_pco_match;
struct rtc_pll_info;
struct sadb_address;
struct scc_kiss_cmd;
struct sctp_authkey;
struct sctp_initmsg;
struct sctp_rtoinfo;
struct seccomp_data;
struct serial_rs485;
struct setup_header;
struct sioc_sg_req6;
struct sioc_vif_req;
struct slave_config;
struct snd_enc_flac;
struct snd_enc_real;
struct snd_interval;
struct snd_pcm_info;
struct snd_seq_addr;
struct snd_timer_id;
struct sockaddr_alg;
struct sockaddr_ash;
struct sockaddr_can;
struct sockaddr_in6;
struct sockaddr_ipx;
struct sockaddr_llc;
struct sockaddr_pkt;
struct sockaddr_x25;
struct spraytimeval;
struct tc_drr_stats;
struct tc_estimator;
struct tc_fifo_qopt;
struct tc_gred_qopt;
struct tc_gred_sopt;
struct tc_hfsc_qopt;
struct tc_pedit_key;
struct tc_pedit_sel;
struct tc_plug_qopt;
struct tc_prio_qopt;
struct tc_qfq_stats;
struct tcf_em_nbyte;
struct tcf_meta_hdr;
struct tcf_meta_val;
struct td_event_msg;
struct td_thrhandle;
struct usbdevfs_urb;
struct uvesafb_task;
struct v4l2_control;
struct v4l2_cropcap;
struct v4l2_enc_idx;
struct v4l2_fmtdesc;
struct vfio_irq_set;
struct vfs_cap_data;
struct vhost_memory;
struct video_status;
struct xcb_char2b_t;
struct xcb_format_t;
struct xcb_screen_t;
struct xfrm_sec_ctx;
struct xt_DSCP_info;
struct xt_dccp_info;
struct xt_dscp_info;
struct xt_multiport;
struct xt_osf_nlmsg;
struct xt_sctp_info;
struct xt_time_info;
struct ypresp_order;
union COFF_auxent;
struct COFF_lineno;
struct COFF_scnhdr;
struct COFF_syment;
struct Gpm_Connect;
struct _ExtentInfo;
struct _GetBugMode;
struct _LbxTagData;
struct _POINTBLOCK;
struct _SetBugMode;
struct _XFreeFuncs;
struct _XSyncValue;
struct _XagDestroy;
struct _XagGetAttr;
struct _XevieStart;
struct _XkbChanges;
struct _XkbKeyType;
struct _XkbOutline;
struct _XkbOverlay;
struct _XkbSection;
struct __dirstream;
struct __fdb_entry;
struct __port_info;
struct __res_state;
struct _agp_region;
struct _agp_unbind;
struct _xRectangle;
struct _ymmh_state;
struct agp_version;
struct arc_rfc1051;
struct arc_rfc1201;
struct argp_option;
struct arpt_mangle;
struct atm_cirange;
struct atm_trafprm;
struct atmarp_ctrl;
struct audio_mixer;
struct boot_params;
struct bpq_ethaddr;
struct br_port_msg;
struct canfd_frame;
struct cgroupstats;
struct compat_stat;
struct copr_buffer;
struct cramfs_info;
struct cryptkeyarg;
struct cryptkeyres;
struct dvd_disckey;
struct ebt_ip_info;
struct efs_sb_info;
struct elf_siginfo;
struct epoll_event;
struct ethtool_cmd;
struct ethtool_eee;
struct exit_status;
struct fb_bitfield;
struct fb_copyarea;
struct fb_fillrect;
struct fc_els_clid;
struct fc_els_clir;
struct fc_els_cssp;
struct fc_els_lesb;
struct fc_els_lirr;
struct fc_els_logo;
struct fc_els_prli;
struct fc_els_prlo;
struct fc_els_rlir;
struct fc_els_rnid;
struct fc_els_rscn;
struct fc_ns_rn_id;
struct fddi_header;
struct file_handle;
struct fuse_dirent;
struct fuse_lk_out;
struct gfs2_dinode;
struct gfs2_dirent;
struct gfs2_rindex;
struct hdspm_mixer;
struct i2o_evt_get;
struct i2o_sw_xfer;
struct ib_ucm_info;
struct ib_user_mad;
struct if_irda_qos;
struct if_irda_req;
struct ifla_vf_mac;
struct igmpv3_grec;
struct in6_pktinfo;
struct ip6_mtuinfo;
struct ip_msfilter;
struct ip_vs_flags;
struct ipt_getinfo;
struct ipt_replace;
struct kvm_irqchip;
struct kvm_one_reg;
struct kvm_segment;
struct kvm_x86_mce;
struct linkinfo_dn;
struct llc_pktinfo;
struct loop_info64;
struct mdu_param_s;
struct meye_params;
struct mgsl_icount;
struct minix_inode;
struct mmc_ioc_cmd;
struct mtd_oob_buf;
struct mtrr_gentry;
struct mtrr_sentry;
struct nbd_request;
struct nd_redirect;
struct new_utsname;
struct nf_dn_rtmsg;
struct nis_taglist;
struct nl_mmap_hdr;
struct nl_mmap_req;
struct nlm_testres;
struct ns_tsig_key;
struct nw_nfs_info;
struct old_utsname;
struct omapfb_caps;
struct opaque_auth;
struct ovs_key_arp;
struct ovs_key_tcp;
struct ovs_key_udp;
struct packet_mreq;
struct pg_read_hdr;
struct pool_levels;
struct pppcallinfo;
struct pps_kparams;
struct printf_info;
struct random_data;
struct rex_ttymode;
struct rex_ttysize;
struct rmtcallargs;
struct robust_list;
struct romfs_inode;
struct rpc_timeval;
struct rta_session;
struct rusers_utmp;
struct sched_param;
struct screen_info;
struct sctp_status;
struct sg_req_info;
struct sigaltstack;
struct sioc_sg_req;
struct sm_stat_res;
struct snd_ctl_tlv;
struct snd_enc_wma;
struct sock_filter;
struct sockaddr_at;
struct sockaddr_dn;
struct sockaddr_ec;
struct sockaddr_in;
struct sockaddr_ll;
struct sockaddr_nl;
struct sockaddr_pn;
struct sockaddr_un;
struct sonet_stats;
struct task_struct;
struct tc_cbq_fopt;
struct tc_htb_glob;
struct tc_ratespec;
struct tc_red_qopt;
struct tc_rsvp_gpi;
struct tc_sfb_qopt;
struct tc_sfq_qopt;
struct tc_sizespec;
struct tc_tbf_qopt;
struct tc_u32_mark;
struct tc_u32_pcnt;
struct tcf_em_text;
struct td_ta_stats;
struct td_thragent;
struct tinfo_fkeys;
struct tipc_portid;
struct tipc_subscr;
struct ubi_map_req;
struct user_msghdr;
struct utmpidlearr;
struct v4l2_buffer;
struct v4l2_format;
struct v4l2_output;
struct v4l2_window;
struct video_event;
struct vm86_struct;
struct vring_avail;
struct x25_address;
struct x25_subaddr;
struct xcb_depth_t;
struct xcb_point_t;
struct xcb_setup_t;
struct xdr_discrim;
struct xt_NFQ_info;
struct xt_bpf_info;
struct xt_counters;
struct xt_cpu_info;
struct xt_ecn_info;
struct xt_led_info;
struct xt_log_info;
struct xt_mac_info;
struct xt_osf_info;
struct xt_rateinfo;
struct xt_set_info;
struct xt_u32_test;
struct ypbind_resp;
struct ypmap_parms;
struct ypreq_nokey;
struct zatm_t_hist;
struct BOARD_CTRL;
struct COFF_reloc;
struct CUSTOM_REG;
struct _FontNames;
struct _IO_jump_t;
struct _IO_marker;
struct _LbxSwitch;
struct _ShapeMask;
struct _ShmAttach;
struct _ShmDetach;
struct _XLockPtrs;
struct _XagCreate;
struct _XevieSend;
union _XkbAction;
struct _XkbBounds;
union _XkbDoodad;
struct __mf_cache;
struct _agp_setup;
struct _xAxisInfo;
struct _xkbGetMap;
struct _xkbSetMap;
struct _xsave_hdr;
struct argp_child;
struct argp_state;
struct arpreq_old;
struct arpt_entry;
struct atalk_addr;
struct atmif_sioc;
struct atmlec_ioc;
struct atmlec_msg;
struct atmmpc_ioc;
struct atmsvc_msg;
struct atmtcp_hdr;
struct audit_rule;
struct bfs_dirent;
struct bp_address;
struct can_filter;
struct cback_data;
union cdrom_addr;
struct cdrom_msf0;
struct cdrom_read;
struct completion;
struct count_info;
struct crypt_data;
struct dmx_filter;
struct dtv_cmds_h;
struct dvb_net_if;
struct elf32_note;
struct elf32_phdr;
struct elf32_rela;
struct elf32_shdr;
struct elf64_note;
struct elf64_phdr;
struct elf64_rela;
struct elf64_shdr;
union epoll_data;
struct ether_addr;
struct exportnode;
struct f_owner_ex;
struct fc_els_csp;
struct fc_els_pnb;
struct fc_els_rec;
struct fc_els_rls;
struct fc_els_rpl;
struct fc_els_rps;
struct fc_els_rrq;
struct fc_els_rtv;
struct fc_els_scr;
struct fc_els_spp;
struct fc_els_srl;
struct fc_ns_rsnn;
struct fc_ns_rspn;
struct fuse_lk_in;
struct genlmsghdr;
struct getcredres;
struct gfs2_quota;
struct hdsp_mixer;
struct i2400m_pld;
struct i2o_evt_id;
struct ib_request;
struct ib_ucm_lap;
struct ib_ucm_mra;
struct ib_ucm_rep;
struct ib_ucm_req;
struct in_pktinfo;
struct ip6_rthdr0;
struct ip6t_entry;
struct ip6t_error;
struct ip_ct_sctp;
struct ipc64_perm;
struct itimerspec;
struct kbd_repeat;
struct kbdiacrsuc;
struct klm_holder;
struct kvm_cpuid2;
struct kvm_dtable;
struct log_result;
struct mei_client;
struct mixer_info;
struct msqid64_ds;
struct nd_opt_hdr;
struct nd_opt_mtu;
struct ndt_config;
struct netconfmsg;
struct nfs_string;
struct nfsctl_arg;
struct nis_object;
struct nis_result;
struct nis_server;
struct nl_pktinfo;
struct nlm_holder;
struct nlm_notify;
struct ns_request;
struct ntptimeval;
struct optdata_dn;
struct ovs_header;
struct ovs_key_nd;
struct patch_info;
struct pppoe_addr;
struct proc_event;
struct reply_body;
struct rex_result;
struct rmtcallres;
struct rr_pco_use;
struct rtc_wkalrm;
struct sadb_ident;
struct sadb_x_sa2;
struct sched_attr;
struct semid64_ds;
struct setup_data;
struct sg_scsi_id;
struct shaperconf;
struct shmid64_ds;
struct sigcontext;
struct sis_memreq;
struct sisfb_info;
struct sock_fprog;
struct spraycumul;
struct statsswtch;
struct synth_info;
struct sysex_info;
struct tc_cbq_ovl;
struct tc_htb_opt;
struct tc_skbedit;
struct tc_u32_key;
struct tc_u32_sel;
struct tcf_em_cmp;
struct tcp_md5sig;
struct td_thrinfo;
struct tipc_event;
struct tun_filter;
struct unimapdesc;
struct unimapinit;
struct v4l2_audio;
struct v4l2_event;
struct v4l2_fract;
struct v4l2_input;
struct v4l2_plane;
struct v4l2_tuner;
struct vring_desc;
struct vring_used;
struct vt_consize;
struct xcb_host_t;
struct xfrm_stats;
struct xt_osf_opt;
struct ypresp_all;
struct ypresp_val;
struct ypresp_xfr;
struct COFF_slib;
struct Gpm_Event;
struct INT_QUEUE;
struct _CharInfo;
struct _FontInfo;
struct _FontProp;
struct _LbxDelta;
struct _XDGASync;
struct _XDisplay;
struct _XExtData;
struct _XPrivate;
struct _XSQEvent;
struct _XagQuery;
struct _XevieEnd;
struct _XkbColor;
union _XkbEvent;
struct _XkbPoint;
struct _XkbShape;
struct _agp_bind;
struct _agp_info;
struct _xKeyInfo;
struct _xSegment;
struct _xkbEvent;
struct _xt_align;
struct af_alg_iv;
struct atm_iobuf;
struct bfs_inode;
struct call_body;
struct can_clock;
struct can_frame;
struct cdrom_blk;
struct cdrom_mcn;
struct cdrom_msf;
struct cp_result;
union des_block;
struct desparams;
struct dtv_stats;
struct dump_args;
struct dvd_layer;
struct e820entry;
struct edid_info;
struct efs_super;
struct elf32_hdr;
struct elf32_rel;
struct elf32_sym;
struct elf64_hdr;
struct elf64_rel;
struct elf64_sym;
struct entry_col;
struct entry_obj;
struct ether_arp;
struct exception;
struct fb_cursor;
struct fb_vblank;
struct fc_ba_acc;
struct fc_ba_rjt;
struct fc_ct_hdr;
struct fc_ns_fid;
struct fc_ns_fts;
struct fc_pf_rjt;
struct fd_result;
struct fieldnode;
struct fuse_attr;
struct gfs2_inum;
struct gfs2_leaf;
struct gfs2_rgrp;
struct gmonparam;
struct gpio_desc;
struct group_obj;
struct group_req;
struct groupnode;
struct hdspm_ltc;
struct hippi_hdr;
struct hpet_info;
struct icmp6_hdr;
struct idmap_msg;
struct if_dqinfo;
struct ifaddrmsg;
struct ifinfomsg;
struct in6_rtmsg;
struct inftl_bci;
struct inftl_oob;
union inftl_uci;
struct ip6_rthdr;
struct ip6t_frag;
struct ip6t_icmp;
struct ip6t_opts;
struct ip_addr_t;
struct ipmi_addr;
struct ipmi_recv;
struct ipt_entry;
struct ipv6_mreq;
struct itimerval;
struct k_message;
struct kbdiacruc;
struct kbkeycode;
struct kvm_cpuid;
struct kvm_irqfd;
struct kvm_sregs;
struct kvm_xsave;
struct list_head;
struct log_entry;
struct loop_info;
struct midi_info;
struct mountbody;
struct nbd_reply;
struct ndt_stats;
struct nftl_uci0;
struct nftl_uci1;
struct nftl_uci2;
struct nlm_share;
struct nubus_dir;
struct osd_cap_s;
struct osd_cmd_s;
struct osockaddr;
struct phonethdr;
struct phonetmsg;
struct ping_args;
struct ppp_stats;
struct pppoe_hdr;
struct pppoe_tag;
struct pps_fdata;
struct pps_kinfo;
struct pps_ktime;
struct pptp_addr;
struct prefixmsg;
struct qnx4_xblk;
struct rds_iovec;
struct rex_start;
struct rnd_state;
struct rr_result;
struct rtnexthop;
struct sadb_comb;
struct sadb_prop;
struct sadb_sens;
struct sbi_patch;
struct scc_modem;
struct sctp_prim;
struct sdla_conf;
struct semaphore;
struct sg_header;
struct sg_io_hdr;
struct sg_io_vec;
struct shminfo64;
struct sigaction;
struct sisfb_cmd;
struct snd_codec;
struct snd_xferi;
struct snd_xfern;
struct statstime;
struct statvfs64;
struct table_col;
struct table_obj;
struct taskstats;
struct tc_gact_p;
struct tc_mirred;
struct tc_police;
struct td_notify;
struct timestamp;
struct tipc_name;
struct user_desc;
struct v4l2_clip;
struct v4l2_crop;
struct v4l2_rect;
struct video_spu;
struct vm86_regs;
struct xcb_arc_t;
struct xcb_rgb_t;
struct xcb_str_t;
struct xfrm_algo;
struct xfrm_mark;
struct xt_osf_wc;
struct ypmaplist;
struct ypreq_key;
struct ypreq_xfr;
struct BUF_CTRL;
struct ZFW_CTRL;
struct _IO_FILE;
struct _XIMText;
struct _XRegion;
struct _XcmsCCC;
struct _XkbDesc;
struct _XkbMods;
struct __ns_msg;
struct _fpstate;
struct _i2o_hrt;
struct _i2o_lct;
struct _xkbBell;
struct addrinfo;
struct aliasent;
struct arpt_arp;
struct atm_bhli;
struct atm_blli;
union bpf_attr;
struct ca_descr;
struct cdrom_ti;
struct cld_name;
struct compstat;
struct copr_msg;
struct dccp_hdr;
struct dirent64;
struct dlm_lksb;
struct dm_ioctl;
struct dmx_caps;
struct dn_naddr;
struct edd_info;
struct efi_info;
struct endpoint;
struct fb_image;
struct fbcurpos;
struct fc_ns_ff;
struct fhstatus;
struct flat_hdr;
struct formnode;
struct gmon_hdr;
struct i2o_html;
struct ieee_ets;
struct ieee_pfc;
struct if_dqblk;
struct in6_addr;
struct io_event;
struct ip6_dest;
struct ip6_frag;
struct ip6t_ip6;
struct ip_mreqn;
struct ipc_perm;
struct ipmi_msg;
struct ipmi_req;
struct ipt_icmp;
struct ist_info;
struct kbdiacrs;
struct kbsentry;
struct klm_lock;
struct klm_stat;
struct knfsd_fh;
struct kvm_msrs;
struct kvm_regs;
struct kvm_xcrs;
struct link_map;
struct link_obj;
struct mallinfo;
struct msqid_ds;
struct nfgenmsg;
struct nftl_bci;
struct nftl_oob;
union nftl_uci;
struct nis_attr;
struct nlm_lock;
struct nlm_stat;
struct nlmsgerr;
struct nlmsghdr;
struct oar_mask;
struct otp_info;
struct phm_regs;
struct plipconf;
struct pmaplist;
struct ppp_idle;
struct protoent;
struct rlimit64;
struct rtc_time;
struct rtcanmsg;
struct rtgenmsg;
struct sadb_alg;
struct sadb_ext;
struct sadb_key;
struct sadb_msg;
struct scc_stat;
struct sdla_mem;
struct semid_ds;
struct sg_io_v4;
struct sg_iovec;
struct shm_info;
struct shmid_ds;
struct sigevent;
struct sigstack;
struct snd_mask;
struct sockaddr;
struct statfs64;
struct tc_stats;
struct tcp_info;
struct termtype;
struct timespec;
struct timezone;
struct tlv_desc;
struct tostruct;
struct ttychars;
struct typenode;
struct ucontext;
struct unixcred;
struct utmpidle;
struct v86_regs;
struct vt_event;
struct vt_sizes;
struct CH_CTRL;
struct FIRM_ID;
struct Gpm_Roi;
struct SVCXPRT;
struct _Client;
union _XEvent;
struct _XExten;
struct _XImage;
struct _XkbKey;
struct _XkbRow;
struct __ns_rr;
struct _fpxreg;
struct _ftsent;
struct _win_st;
struct _xEvent;
struct _xPoint;
struct _xmmreg;
struct _xstate;
struct acct_v3;
struct aiocb64;
struct aioinit;
struct arc_cap;
struct atm_qos;
struct atm_sap;
struct bcm_hcs;
struct bpq_req;
struct ca_caps;
struct cee_pfc;
struct cld_msg;
struct cmsghdr;
struct dcb_app;
struct dmx_stc;
struct dn_addr;
struct dvd_bca;
struct dynamic;
struct e820map;
struct ec_addr;
struct fb_cmap;
struct fch_hdr;
struct fd_args;
struct fddihdr;
struct flock64;
struct gfs2_sb;
struct hostent;
struct i2c_msg;
struct icmphdr;
struct ifaddrs;
struct igmphdr;
struct igmpmsg;
struct in_addr;
struct ip6_ext;
struct ip6_hbh;
struct ip6_hdr;
struct ip6_opt;
struct ip6t_ah;
struct ip6t_mh;
struct ip6t_rt;
struct ip_mreq;
struct ip_opts;
struct kbdiacr;
struct kbentry;
struct kvm_fpu;
struct kvm_msi;
struct kvm_run;
struct kvm_xcr;
struct lastlog;
struct ltchars;
struct mf6cctl;
struct mif6ctl;
struct mld_hdr;
struct mmsghdr;
struct mq_attr;
struct mrt6msg;
struct msginfo;
struct netinfo;
struct nf_acct;
struct nfs2_fh;
struct nfs3_fh;
struct nis_oid;
struct nis_tag;
struct nlm_res;
struct npioctl;
struct objdata;
struct obstack;
struct phm_reg;
struct pppstat;
struct pt_regs;
struct r_debug;
struct res_sym;
struct rpc_err;
struct rpc_msg;
struct rtentry;
struct ru_utmp;
struct sadb_sa;
struct seminfo;
struct servent;
struct shminfo;
struct sm_name;
struct sm_stat;
struct statvfs;
struct svc_req;
struct sysinfo;
struct tagITEM;
struct tagMENU;
struct tc_csum;
struct tc_gact;
struct termios;
struct tftphdr;
struct timeval;
struct trh_hdr;
struct trn_hdr;
struct unipair;
struct utimbuf;
struct utmparr;
struct utsname;
struct vt_mode;
struct vt_stat;
struct winsize;
struct xfrm_id;
struct CLIENT;
struct _ENTRY;
struct _fpreg;
struct ar_hdr;
struct archdr;
struct arphdr;
struct arpreq;
struct buf_nr;
struct ca_msg;
struct ca_pid;
struct cee_pg;
struct cn_msg;
struct dcbmsg;
struct dirent;
struct dqinfo;
struct ethhdr;
struct fiemap;
struct hdr_ni;
struct hdr_ui;
struct if_set;
struct ifaddr;
struct ifconf;
struct ipt_ah;
struct ipt_ip;
struct linger;
struct mfcctl;
struct mntent;
struct mon_id;
struct msgbuf;
struct msghdr;
struct ndtmsg;
struct netent;
struct netobj;
struct nfattr;
struct nlattr;
struct option;
struct passwd;
struct pollfd;
struct ptsreq;
struct rawarc;
struct rlimit;
struct rpcent;
struct rtattr;
struct rusage;
struct screen;
struct sembuf;
struct sgttyb;
union sigval;
struct sigvec;
struct stat64;
struct statfs;
struct status;
struct tc_cnt;
struct tc_nat;
struct tcamsg;
struct tchars;
struct tcphdr;
struct termio;
struct ttyent;
struct tun_pi;
struct udphdr;
struct vbe_ib;
struct vifctl;
struct vjstat;
struct vtimes;
struct xt_esp;
struct xt_tcp;
struct xt_u32;
struct xt_udp;
struct _Font;
struct _xArc;
struct _xReq;
struct aiocb;
struct alias;
struct atreq;
struct cb_id;
struct dqblk;
struct entry;
struct fcllc;
struct flock;
struct fstab;
struct gaicb;
struct group;
struct iattr;
struct ifmap;
struct ifreq;
struct inode;
struct iovec;
struct iphdr;
struct lconv;
struct mtget;
struct mtpos;
struct my_id;
struct ndmsg;
struct nlist;
struct panel;
struct qelem;
struct rtmsg;
struct stats;
struct tcf_t;
struct tcmsg;
struct timeb;
struct timex;
struct tmask;
struct token;
struct trllc;
struct ucred;
struct ustat;
struct utmpx;
struct vring;
struct xauth;
struct AUTH;
struct _XGC;
struct __bb;
struct acct;
struct argp;
struct exec;
struct icmp;
struct igmp;
struct iocb;
struct ldat;
struct mtop;
struct pmap;
struct prof;
struct sgrp;
struct spwd;
struct stat;
struct term;
struct user;
struct utmp;
union wait;
struct Elf;
struct FTW;
struct XDR;
struct edd;
struct mce;
struct mon;
struct rip;
struct tms;
struct tsp;
struct ip;
struct tm;

union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___05719DDC85B8D2B16E2A67EB61F3015B {__int64 value[64];__int64 *value_ptr;};
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___56EF40E009C635B406D22EE789E37734 {unsigned int item[128];unsigned int *item_ptr;};
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___8AF31E8B5E1384F211913090B725D1EF {unsigned __int8 data[512];unsigned __int8 *data_ptr;};
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___C37227497D6F74F01EA58293C74B5A27 {__int64 value[128];__int64 *value_ptr;};
struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___417F44919A114DFD176AABDB9ECD58A2 {__int64 min;__int64 max;__int64 step;};
struct COFF_auxent______B43E3C95070E5A6C461F1A8FACE73978___DD24CBB9BDA2635ADD0C8F5B2B6C0707 {char x_lnno[2];char x_size[2];};
struct COFF_auxent______BC4ABED5B595E3E8C165C6A75882B0B0___5B40661CB552EBE7B7ADF18FDA423A8F {char x_lnnoptr[4];char x_endndx[4];};
struct COFF_auxent______BC4ABED5B595E3E8C165C6A75882B0B0___AE9B05ABEC1048BE339BB828F6FDD6C6 {char x_dimen[4][2];};
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___A2C680A566487F30C6207078F99D1152 {char service[16];};
struct COFF_auxent___A007460A5209B8A49642556855958EDD___269C1D88824C4EBB14FAA70E77D8D034 {char x_zeroes[4];char x_offset[4];};
struct COFF_syment___012205A2FD59DD97F518116F0BCD0B1F___83545BEAD29F54571CFA44BED0AC2C0D {char e_zeroes[4];char e_offset[4];};
struct atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4___9610A77582F2A392DD1CBF879E698EA0 {unsigned __int8 mac_addr[6];unsigned __int8 atm_addr[20];unsigned int flag;unsigned int targetless_le_arp;unsigned int no_source_le_narp;};
union __attribute__((packed)) tftphdr______9DF8B9116CFCAEDEA835550C8A86965C___45C12AF7FE255FC44175B22DB1DFFF77 {unsigned __int16 tu_block;__int16 tu_code;};
struct atm_blli___0572EE5627218739C843F51EF75EFA8A___BA7E10FCB28575EA7EE39DE7BC7A718D {unsigned __int8 mode;unsigned __int8 window;};
struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___0F6B4EFD9333C782E1CC1D8BF79C584F {unsigned __int8 term_type;unsigned __int8 fw_mpx_cap;unsigned __int8 bw_mpx_cap;};
struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___90930356AF01700B0B1F8C799478F0DA {unsigned __int8 mode;unsigned __int8 def_size;unsigned __int8 window;};
struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___B6C23F42B327BC00499A13D234739E58 {unsigned __int8 ipi;unsigned __int8 snap[5];};
struct rpc_err___055F5448726BC1208A44545720AB7286___B2A2E5E144C6CE84264379628A685064 {__int64 s1;__int64 s2;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___394784BEE55B7018BCA7354475FB2ABC {void *si_addr;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___4B29161E04CAD4BCDD788B201A5E8E5E {void *_call_addr;int _syscall;unsigned int _arch;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___A0026EAD564A6656D0C8BDAAC752A4B0 {__int64 si_band;int si_fd;};
struct _095E04B97CE84C59083222C7D172F70D___CDF557A927ED2BFF93B09908D4EFCA76 {int x;int y;};
struct _1C4035FDEAFFF0FCE26E66A96F6BBEB4___20EFCB5FAA72B851457C6BAA266EC02E {int __lock;unsigned int __futex;unsigned __int64 __total_seq;unsigned __int64 __wakeup_seq;unsigned __int64 __woken_seq;void *__mutex;unsigned int __nwaiters;unsigned int __broadcast_seq;};
union _5077D3CC3DD590AF02C9E55403D17F9F___7DEDE306671FD382A7675926A9A7F037 {char b[20];__int16 s[10];__int64 l[5];};
struct _AEC512E533A23DF0E4E7770B7D3B7341___D894E3326F078364D3B6CBCD0A540AF0 {int __lock;unsigned int __nr_readers;unsigned int __readers_wakeup;unsigned int __writer_wakeup;unsigned int __nr_readers_queued;unsigned int __nr_writers_queued;int __writer;int __shared;unsigned __int64 __pad1;unsigned __int64 __pad2;unsigned int __flags;};
union _E9F5FE92D7DB981290475B0A784F5155___BADCA52C29225A708D9C0115E5B974AC {unsigned int __wch;char __wchb[4];};
struct _RequestBlock_struct___ACD4FD9060306C0152C059073058268C {unsigned __int8 Type : 3;unsigned __int8 Attribute : 3;unsigned __int8 Direction : 2;};
struct ieee854_long_double___301A90221CF54AA61D03B5601C453EBC {unsigned __int32 mantissa1 : 32;unsigned __int32 mantissa0 : 30;unsigned __int32 quiet_nan : 1;unsigned __int32 one : 1;unsigned __int32 exponent : 15;unsigned __int32 negative : 1;unsigned __int32 empty : 16;};
struct ieee854_long_double___FB8E818610133F718AF156918955DD46 {unsigned __int32 mantissa1 : 32;unsigned __int32 mantissa0 : 32;unsigned __int32 exponent : 15;unsigned __int32 negative : 1;unsigned __int32 empty : 16;};
struct _SCSI3Addr_struct___6965806F62356BC0A797529058F9C84D {unsigned __int8 Dev : 5;unsigned __int8 Bus : 3;unsigned __int8 Targ : 6;unsigned __int8 Mode : 2;};
union snd_ctl_elem_info___F0D55FA891E3966931869115E5BD8961 {unsigned __int16 d[4];unsigned __int16 *d_ptr;};
union xt_hashlimit_info___36FD1D4A07CE693D744388849A922979 {void *ptr;struct xt_hashlimit_info *master;};
struct xcb_xf86dri_query_direct_rendering_capable_cookie_t {unsigned int sequence;};
struct sockaddr_atmpvc___43BC5BD14FF5343B21515253C57232B1 {__int16 itf;__int16 vpi;int vci;};
enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type {V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF = 0x0,V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR = 0x1,};
union vlan_ioctl_args___94757F94B6A54079544B78B6544C33D2 {char device2[24];int VID;unsigned int skb_priority;unsigned int name_type;unsigned int bind_type;unsigned int flag;};
struct ieee754_double___D177F1DF27478B0248C6745F72EEAEB0 {unsigned __int32 mantissa1 : 32;unsigned __int32 mantissa0 : 20;unsigned __int32 exponent : 11;unsigned __int32 negative : 1;};
struct ieee754_double___DD584A325266113E3D0838C6650565BE {unsigned __int32 mantissa1 : 32;unsigned __int32 mantissa0 : 19;unsigned __int32 quiet_nan : 1;unsigned __int32 exponent : 11;unsigned __int32 negative : 1;};
struct xcb_input_get_device_dont_propagate_list_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_selection_create_context_cookie_t {unsigned int sequence;};
struct xcb_xkb_permament_radio_group_behavior_iterator_t {xcb_xkb_permament_radio_group_behavior_t *data;int rem;int index;};
struct ieee754_float___C1CC197CEBD9377945A71E8A21F83EB1 {unsigned __int32 mantissa : 22;unsigned __int32 quiet_nan : 1;unsigned __int32 exponent : 8;unsigned __int32 negative : 1;};
struct ieee754_float___CCFA8EFBEFBEB58ABED61A4627F05411 {unsigned __int32 mantissa : 23;unsigned __int32 exponent : 8;unsigned __int32 negative : 1;};
enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type {V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF = 0x0,V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR = 0x1,V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT = 0x2,V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE = 0x3,V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE = 0x4,};
struct xcb_input_get_selected_extension_events_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_property_create_context_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_screen_of_context_cookie_t {unsigned int sequence;};
struct xcb_randr_get_screen_resources_current_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_selection_data_context_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_image_resolution_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_set_image_resolution_cookie_t {unsigned int sequence;};
struct xcb_xkb_permament_overlay_1_behavior_iterator_t {xcb_xkb_permament_overlay_1_behavior_t *data;int rem;int index;};
struct xcb_xkb_permament_overlay_2_behavior_iterator_t {xcb_xkb_permament_overlay_2_behavior_t *data;int rem;int index;};
struct COFF_auxent___0711A204FF8D49621BD1F59D962A7168 {char x_tvfill[4];char x_tvlen[2];char x_tvran[2][2];};
struct COFF_auxent___DEE18EBA7EBA49272E803725DF2433AA {char x_scnlen[4];char x_nreloc[2];char x_nlinno[2];};
union COFF_lineno___EB2C3E8F56ACA6629C4DF3C25298B95B {char l_symndx[4];char l_paddr[4];};
union if_irda_req___4AF2B49FDDB54BAFABDFAE063E6E4A98 {char ifrn_name[16];};
struct xcb_input_get_device_modifier_mapping_cookie_t {unsigned int sequence;};
struct xcb_input_set_device_modifier_mapping_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_device_create_context_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_property_data_context_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_selection_use_context_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_window_create_context_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_page_dimensions_cookie_t {unsigned int sequence;};
enum v4l2_mpeg_video_h264_hierarchical_coding_type {V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B = 0x0,V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P = 0x1,};
struct xcb_glx_get_compressed_tex_image_arb_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_property_use_context_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_one_attributes_cookie_t {unsigned int sequence;};
struct xcb_xfixes_get_cursor_image_and_name_cookie_t {unsigned int sequence;};
enum v4l2_mpeg_cx2341x_video_temporal_filter_mode {V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = 0x0,V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO = 0x1,};
enum v4l2_mpeg_video_h264_sei_fp_arrangement_type {V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD = 0x0,V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN = 0x1,V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW = 0x2,V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE = 0x3,V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM = 0x4,V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL = 0x5,};
struct xcb_glx_get_color_table_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_color_table_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_convolution_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_convolution_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_input_device_resolution_state_iterator_t {xcb_input_device_resolution_state_t *data;int rem;int index;};
struct xcb_input_get_device_button_mapping_cookie_t {unsigned int sequence;};
struct xcb_input_set_device_button_mapping_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_document_data_cookie_t {unsigned int sequence;};
enum v4l2_mpeg_cx2341x_video_spatial_filter_mode {V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL = 0x0,V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO = 0x1,};
typedef xcb_glx_generic_error_t xcb_glx_unsupported_private_request_error_t;
struct xcb_input_device_abs_calib_state_iterator_t {xcb_input_device_abs_calib_state_t *data;int rem;int index;};
struct xcb_input_get_device_motion_events_cookie_t {unsigned int sequence;};
struct xcb_input_integer_feedback_state_iterator_t {xcb_input_integer_feedback_state_t *data;int rem;int index;};
struct xcb_render_query_pict_index_values_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_printer_list_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_get_client_driver_name_cookie_t {unsigned int sequence;};
union ifaddrs___5A9FB6B4293E0982D0D9C18B84AAF77B {struct sockaddr *ifu_broadaddr;struct sockaddr *ifu_dstaddr;};
union obstack___F91006FBD6EB572A801247A9C58C8B69 {__int64 tempint;void *tempptr;};
enum r_debug___AF097615159EB3CBDA82C5A5C14EBA11 {RT_CONSISTENT = 0x0,RT_ADD = 0x1,RT_DELETE = 0x2,};
enum v4l2_mpeg_cx2341x_video_median_filter_type {V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF = 0x0,V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR = 0x1,V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT = 0x2,V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = 0x3,V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG = 0x4,};
struct xcb_glx_get_histogram_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_histogram_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_level_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_level_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_vendor_private_with_reply_cookie_t {unsigned int sequence;};
struct xcb_input_device_abs_area_state_iterator_t {xcb_input_device_abs_area_state_t *data;int rem;int index;};
struct xcb_input_device_resolution_ctl_iterator_t {xcb_input_device_resolution_ctl_t *data;int rem;int index;};
struct xcb_input_string_feedback_state_iterator_t {xcb_input_string_feedback_state_t *data;int rem;int index;};
struct xcb_res_query_client_pixmap_bytes_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_selection_context_cookie_t {unsigned int sequence;};
struct xcb_xkb_permament_lock_behavior_iterator_t {xcb_xkb_permament_lock_behavior_t *data;int rem;int index;};
enum MACRO_XSecurityAllAuthorizationAttributes {XSecurityAllAuthorizationAttributes = 15,};
struct xcb_composite_get_overlay_window_cookie_t {unsigned int sequence;};
struct xcb_dri2_get_buffers_with_format_cookie_t {unsigned int sequence;};
struct xcb_input_change_keyboard_device_cookie_t {unsigned int sequence;};
struct xcb_input_device_abs_area_ctrl_iterator_t {xcb_input_device_abs_area_ctrl_t *data;int rem;int index;};
struct xcb_input_device_abs_calib_ctl_iterator_t {xcb_input_device_abs_calib_ctl_t *data;int rem;int index;};
struct xcb_input_get_device_key_mapping_cookie_t {unsigned int sequence;};
struct xcb_input_integer_feedback_ctl_iterator_t {xcb_input_integer_feedback_ctl_t *data;int rem;int index;};
struct xcb_randr_list_output_properties_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_property_context_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_attributes_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_input_selected_cookie_t {unsigned int sequence;};
union ifreq___4AF2B49FDDB54BAFABDFAE063E6E4A98 {char ifrn_name[16];};
union nlist___34B1BE95F83DF5B7277E649894D7700C {char *n_name;struct nlist *n_next;__int64 n_strx;};
struct xcb_glx_get_drawable_attributes_cookie_t {unsigned int sequence;};
struct xcb_glx_get_query_objectuiv_arb_cookie_t {unsigned int sequence;};
struct xcb_glx_query_extensions_string_cookie_t {unsigned int sequence;};
struct xcb_input_bell_feedback_state_iterator_t {xcb_input_bell_feedback_state_t *data;int rem;int index;};
struct xcb_input_change_pointer_device_cookie_t {unsigned int sequence;};
struct xcb_input_device_enable_state_iterator_t {xcb_input_device_enable_state_t *data;int rem;int index;};
struct xcb_input_get_extension_version_cookie_t {unsigned int sequence;};
struct xcb_input_string_feedback_ctl_iterator_t {xcb_input_string_feedback_ctl_t *data;int rem;int index;};
struct xcb_randr_get_screen_size_range_cookie_t {unsigned int sequence;};
struct xcb_randr_query_output_property_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_query_screens_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_query_version_cookie_t {unsigned int sequence;};
enum MACRO_XFixesSetSelectionOwnerNotifyMask {XFixesSetSelectionOwnerNotifyMask = 1,XFixesSelectionWindowDestroyNotifyMask = 2,XFixesSelectionClientCloseNotifyMask = 4,};
enum MACRO_XSecurityAuthorizationRevokedMask {XSecurityAuthorizationRevokedMask = 1,};
enum MACRO_sz_xScreenSaverUnsetAttributesReq {sz_xScreenSaverUnsetAttributesReq = 8,};
union user___14E988142F1DB33DBF0B6F42088802D2 {struct user_regs_struct *u_ar0;unsigned __int64 __u_ar0_word;};
union user___1E59340A5D06056FAFB2C11BCCCBF73A {struct user_fpregs_struct *u_fpstate;unsigned __int64 __u_fpstate_word;};
struct wait___39CA23F4E14B66D514B108A5928EF219 {unsigned __int32 __w_stopval : 8;unsigned __int32 __w_stopsig : 8;unsigned __int32 : 16;};
struct wait___E9BF053A98CA6B253628237B5A23E48D {unsigned __int32 __w_termsig : 7;unsigned __int32 __w_coredump : 1;unsigned __int32 __w_retcode : 8;unsigned __int32 : 16;};
typedef struct _7CE69C85D0575A23F013545F3194CABE xCompositeCreateRegionFromBorderClipReq;
struct xcb_glx_get_convolution_filter_cookie_t {unsigned int sequence;};
struct xcb_glx_get_minmax_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_minmax_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_query_objectiv_arb_cookie_t {unsigned int sequence;};
typedef xcb_input_device_key_press_event_t xcb_input_device_button_release_event_t;
struct xcb_input_device_enable_ctrl_iterator_t {xcb_input_device_enable_ctrl_t *data;int rem;int index;};
struct xcb_input_get_feedback_control_cookie_t {unsigned int sequence;};
struct xcb_input_kbd_feedback_state_iterator_t {xcb_input_kbd_feedback_state_t *data;int rem;int index;};
struct xcb_input_led_feedback_state_iterator_t {xcb_input_led_feedback_state_t *data;int rem;int index;};
struct xcb_input_ptr_feedback_state_iterator_t {xcb_input_ptr_feedback_state_t *data;int rem;int index;};
struct xcb_input_set_device_valuators_cookie_t {unsigned int sequence;};
struct xcb_randr_get_screen_resources_cookie_t {unsigned int sequence;};
struct xcb_res_query_client_resources_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_client_context_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_device_context_cookie_t {unsigned int sequence;};
struct xcb_selinux_get_window_context_cookie_t {unsigned int sequence;};
struct xcb_xkb_radio_group_behavior_iterator_t {xcb_xkb_radio_group_behavior_t *data;int rem;int index;};
struct xcb_xvmc_list_subpicture_types_cookie_t {unsigned int sequence;};
enum MACRO_MultibufferUpdateActionUndefined {MultibufferUpdateActionUndefined = 0,MultibufferUpdateActionBackground = 1,MultibufferUpdateActionUntouched = 2,};
enum v4l2_mpeg_mfc51_video_force_frame_type {V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED = 0x0,V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME = 0x1,V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED = 0x2,};
struct xcb_glx_are_textures_resident_cookie_t {unsigned int sequence;};
struct xcb_input_bell_feedback_ctl_iterator_t {xcb_input_bell_feedback_ctl_t *data;int rem;int index;};
struct xcb_input_device_core_state_iterator_t {xcb_input_device_core_state_t *data;int rem;int index;};
typedef xcb_input_device_key_press_event_t xcb_input_device_motion_notify_event_t;
struct xcb_input_device_time_coord_iterator_t {xcb_input_device_time_coord_t *data;int rem;int index;};
struct xcb_randr_get_crtc_gamma_size_cookie_t {unsigned int sequence;};
struct xcb_randr_get_output_property_cookie_t {unsigned int sequence;};
struct xcb_render_query_pict_formats_cookie_t {unsigned int sequence;};
struct xcb_screensaver_query_version_cookie_t {unsigned int sequence;};
struct xcb_sync_list_system_counters_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_context_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_get_drawable_info_cookie_t {unsigned int sequence;};
struct xcb_xinerama_get_screen_count_cookie_t {unsigned int sequence;};
struct xcb_xv_query_image_attributes_cookie_t {unsigned int sequence;};
enum MACRO_XIMStringConversionSubstitution {XIMStringConversionSubstitution = 0x1,XIMStringConversionRetrieval = 0x2,};
enum MACRO_XkbAllExtensionDeviceEventsMask {XkbAllExtensionDeviceEventsMask = 0x801F,};
enum MACRO_sz_xScreenSaverSetAttributesReq {sz_xScreenSaverSetAttributesReq = 28,};
enum v4l2_mpeg_mfc51_video_frame_skip_mode {V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED = 0x0,V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = 0x1,V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = 0x2,};
enum v4l2_mpeg_video_h264_loop_filter_mode {V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED = 0x0,V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED = 0x1,V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = 0x2,};
struct xcb_glx_get_separable_filter_cookie_t {unsigned int sequence;};
struct xcb_glx_make_context_current_cookie_t {unsigned int sequence;};
typedef xcb_input_device_key_press_event_t xcb_input_device_button_press_event_t;
struct xcb_input_device_core_ctrl_iterator_t {xcb_input_device_core_ctrl_t *data;int rem;int index;};
struct xcb_input_get_device_control_cookie_t {unsigned int sequence;};
struct xcb_input_input_class_info_iterator_t {xcb_input_input_class_info_t *data;int rem;int index;};
struct xcb_input_kbd_feedback_ctl_iterator_t {xcb_input_kbd_feedback_ctl_t *data;int rem;int index;};
struct xcb_input_led_feedback_ctl_iterator_t {xcb_input_led_feedback_ctl_t *data;int rem;int index;};
struct xcb_input_list_input_devices_cookie_t {unsigned int sequence;};
struct xcb_input_ptr_feedback_ctl_iterator_t {xcb_input_ptr_feedback_ctl_t *data;int rem;int index;};
struct xcb_input_query_device_state_cookie_t {unsigned int sequence;};
struct xcb_list_installed_colormaps_cookie_t {unsigned int sequence;};
struct xcb_randr_get_crtc_transform_cookie_t {unsigned int sequence;};
struct xcb_randr_get_output_primary_cookie_t {unsigned int sequence;};
struct xcb_xinerama_get_screen_size_cookie_t {unsigned int sequence;};
struct xcb_xkb_overlay_1_behavior_iterator_t {xcb_xkb_overlay_1_behavior_t *data;int rem;int index;};
struct xcb_xkb_overlay_2_behavior_iterator_t {xcb_xkb_overlay_2_behavior_t *data;int rem;int index;};
struct xcb_xkb_sa_device_valuator_iterator_t {xcb_xkb_sa_device_valuator_t *data;int rem;int index;};
struct xcb_xkb_sa_lock_device_btn_iterator_t {xcb_xkb_sa_lock_device_btn_t *data;int rem;int index;};
struct xcb_xv_query_port_attributes_cookie_t {unsigned int sequence;};
enum MACRO_XF86MiscModInDevClientNotLocal {XF86MiscModInDevClientNotLocal = 6,};
enum MACRO_sz_xScreenSaverQueryVersionReq {sz_xScreenSaverQueryVersionReq = 8,sz_xScreenSaverQueryVersionReply = 32,};
enum MACRO_sz_xXF86BigfontQueryVersionReq {sz_xXF86BigfontQueryVersionReq = 4,sz_xXF86BigfontQueryVersionReply = 32,};
enum MACRO_sz_xXF86VidModeQueryVersionReq {sz_xXF86VidModeQueryVersionReq = 4,sz_xXF86VidModeQueryVersionReply = 32,sz_xXF86VidModeGetModeLineReq = 8,sz_xXF86VidModeGetAllModeLinesReq = 8,sz_xXF86VidModeGetMonitorReq = 8,sz_xXF86VidModeGetViewPortReq = 8,sz_xXF86VidModeGetDotClocksReq = 8,sz_xXF86VidModeGetPermissionsReq = 8,sz_xXF86VidModeGetModeLineReply = 52,sz_xXF86OldVidModeGetModeLineReply = 36,sz_xXF86VidModeGetAllModeLinesReply = 32,sz_xXF86VidModeAddModeLineReq = 92,sz_xXF86OldVidModeAddModeLineReq = 60,sz_xXF86VidModeModModeLineReq = 48,sz_xXF86OldVidModeModModeLineReq = 32,sz_xXF86VidModeDeleteModeLineReq = 52,sz_xXF86VidModeValidateModeLineReq = 52,sz_xXF86VidModeSwitchToModeReq = 52,sz_xXF86OldVidModeDeleteModeLineReq = 36,sz_xXF86OldVidModeValidateModeLineReq = 36,sz_xXF86OldVidModeSwitchToModeReq = 36,sz_xXF86VidModeSwitchModeReq = 8,sz_xXF86VidModeLockModeSwitchReq = 8,sz_xXF86VidModeValidateModeLineReply = 32,sz_xXF86VidModeGetMonitorReply = 32,sz_xXF86VidModeGetViewPortReply = 32,sz_xXF86VidModeSetViewPortReq = 16,sz_xXF86VidModeGetDotClocksReply = 32,sz_xXF86VidModeSetClientVersionReq = 8,sz_xXF86VidModeGetGammaReq = 32,sz_xXF86VidModeGetGammaReply = 32,sz_xXF86VidModeSetGammaReq = 32,sz_xXF86VidModeSetGammaRampReq = 8,sz_xXF86VidModeGetGammaRampReq = 8,sz_xXF86VidModeGetGammaRampReply = 32,sz_xXF86VidModeGetGammaRampSizeReq = 8,sz_xXF86VidModeGetGammaRampSizeReply = 32,sz_xXF86VidModeGetPermissionsReply = 32,};
typedef struct _322E4D740D2A723112F8227414848916 xXcupGetReservedColormapEntriesReply;
struct xcb_composite_query_version_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_current_drawable_error_t;
struct xcb_glx_get_polygon_stipple_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_query_server_string_cookie_t {unsigned int sequence;};
typedef xcb_input_device_key_press_event_t xcb_input_device_key_release_event_t;
struct xcb_randr_output_property_iterator_t {xcb_randr_output_property_t *data;int rem;int index;};
struct xcb_randr_set_screen_config_cookie_t {unsigned int sequence;};
struct xcb_selinux_list_properties_cookie_t {unsigned int sequence;};
struct xcb_selinux_list_selections_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_auth_connection_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_create_drawable_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_drm_clip_rect_iterator_t {xcb_xf86dri_drm_clip_rect_t *data;int rem;int index;};
struct xcb_xf86dri_get_device_info_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_open_connection_cookie_t {unsigned int sequence;};
struct xcb_xfixes_get_cursor_image_cookie_t {unsigned int sequence;};
struct xcb_xkb_counted_string_16_iterator_t {xcb_xkb_counted_string_16_t *data;int rem;int index;};
struct xcb_xkb_get_indicator_state_cookie_t {unsigned int sequence;};
struct xcb_xkb_get_named_indicator_cookie_t {unsigned int sequence;};
struct xcb_xkb_sa_action_message_iterator_t {xcb_xkb_sa_action_message_t *data;int rem;int index;};
struct xcb_xkb_set_debugging_flags_cookie_t {unsigned int sequence;};
struct xcb_xvmc_list_surface_types_cookie_t {unsigned int sequence;};
enum MACRO_MultibufferUpdateActionCopied {MultibufferUpdateActionCopied = 3,};
enum MACRO_MultibufferUpdateHintFrequent {MultibufferUpdateHintFrequent = 0,MultibufferUpdateHintIntermittent = 1,MultibufferUpdateHintStatic = 2,};
enum MACRO_XFixesSetSelectionOwnerNotify {XFixesSetSelectionOwnerNotify = 0,XFixesSelectionWindowDestroyNotify = 1,XFixesSelectionClientCloseNotify = 2,};
enum MACRO_XSecurityAuthorizationRevoked {XSecurityAuthorizationRevoked = 0,XSecurityAuthorizationNameLen = 19,};
enum MACRO_sz_xScreenSaverSelectInputReq {sz_xScreenSaverSelectInputReq = 12,};
typedef struct _XIMPreeditStateNotifyCallbackStruct XIMPreeditStateNotifyCallbackStruct;
enum v4l2_mpeg_video_h264_fmo_change_dir {V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT = 0x0,V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT = 0x1,};
typedef struct _2A5F331BE8D13DBE7F0EFE2DE0745FC4 xSecurityGenerateAuthorizationReply;
struct xcb_glx_get_visual_configs_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_glx_bad_profile_arb_error_t;
struct xcb_input_feedback_state_iterator_t {xcb_input_feedback_state_t *data;int rem;int index;};
struct xcb_input_get_device_focus_cookie_t {unsigned int sequence;};
struct xcb_input_valuator_state_iterator_t {xcb_input_valuator_state_t *data;int rem;int index;};
struct xcb_render_animcursorelt_iterator_t {xcb_render_animcursorelt_t *data;int rem;int index;};
struct xcb_screensaver_query_info_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_create_context_cookie_t {unsigned int sequence;};
struct xcb_xfixes_get_cursor_name_cookie_t {unsigned int sequence;};
struct xcb_xinerama_query_screens_cookie_t {unsigned int sequence;};
struct xcb_xinerama_query_version_cookie_t {unsigned int sequence;};
struct xcb_xinerama_screen_info_iterator_t {xcb_xinerama_screen_info_t *data;int rem;int index;};
struct xcb_xkb_counted_string_8_iterator_t {xcb_xkb_counted_string_8_t *data;int rem;int index;};
struct xcb_xkb_default_behavior_iterator_t {xcb_xkb_default_behavior_t *data;int rem;int index;};
struct xcb_xkb_indicator_doodad_iterator_t {xcb_xkb_indicator_doodad_t *data;int rem;int index;};
struct xcb_xkb_kt_set_map_entry_iterator_t {xcb_xkb_kt_set_map_entry_t *data;int rem;int index;};
struct xcb_xkb_sa_lock_controls_iterator_t {xcb_xkb_sa_lock_controls_t *data;int rem;int index;};
struct xcb_xkb_sa_switch_screen_iterator_t {xcb_xkb_sa_switch_screen_t *data;int rem;int index;};
struct xcb_xv_image_format_info_iterator_t {xcb_xv_image_format_info_t *data;int rem;int index;};
struct xcb_xvmc_create_subpicture_cookie_t {unsigned int sequence;};
enum MACRO_X_ScreenSaverUnsetAttributes {X_ScreenSaverUnsetAttributes = 4,};
enum MACRO_sz_xCompositeQueryVersionReq {sz_xCompositeQueryVersionReq = 12,sz_xCompositeQueryVersionReply = 32,sz_xCompositeRedirectWindowReq = 12,sz_xCompositeRedirectSubwindowsReq = 12,sz_xCompositeUnredirectWindowReq = 12,sz_xCompositeUnredirectSubwindowsReq = 12,sz_xCompositeCreateRegionFromBorderClipReq = 12,sz_xCompositeNameWindowPixmapReq = 12,};
enum MACRO_sz_xPanoramiXQueryVersionReq {sz_xPanoramiXQueryVersionReq = 8,sz_xPanoramiXQueryVersionReply = 32,sz_xPanoramiXGetStateReq = 8,sz_panoramiXGetStateReply = 32,sz_xPanoramiXGetScreenCountReq = 8,sz_panoramiXGetScreenCountReply = 32,sz_xPanoramiXGetScreenSizeReq = 12,sz_panoramiXGetScreenSizeReply = 32,sz_xXineramaIsActiveReq = 4,sz_XineramaIsActiveReply = 32,sz_xXineramaQueryScreensReq = 4,sz_XineramaQueryScreensReply = 32,sz_XineramaScreenInfo = 8,};
typedef struct _7374270A99571F2A61066392503F95BA xRenderSetPictureClipRectanglesReq;
typedef struct _xSecurityAuthorizationRevokedEvent xSecurityAuthorizationRevokedEvent;
typedef struct _XF86OldVidModeValidateModeLine xXF86OldVidModeValidateModeLineReq;
typedef struct _XcupGetReservedColormapEntries xXcupGetReservedColormapEntriesReq;
struct xcb_client_message_data_iterator_t {xcb_client_message_data_t *data;int rem;int index;};
struct xcb_get_window_attributes_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_current_window_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_render_request_error_t;
struct xcb_input_set_device_mode_cookie_t {unsigned int sequence;};
struct xcb_input_valuator_info_iterator_t {xcb_input_valuator_info_t *data;int rem;int index;};
struct xcb_randr_get_output_info_cookie_t {unsigned int sequence;};
struct xcb_randr_get_screen_info_cookie_t {unsigned int sequence;};
struct xcb_randr_output_change_iterator_t {xcb_randr_output_change_t *data;int rem;int index;};
struct xcb_randr_refresh_rates_iterator_t {xcb_randr_refresh_rates_t *data;int rem;int index;};
struct xcb_randr_set_crtc_config_cookie_t {unsigned int sequence;};
struct xcb_record_enable_context_cookie_t {unsigned int sequence;};
struct xcb_render_directformat_iterator_t {xcb_render_directformat_t *data;int rem;int index;};
struct xcb_render_pictforminfo_iterator_t {xcb_render_pictforminfo_t *data;int rem;int index;};
struct xcb_selinux_query_version_cookie_t {unsigned int sequence;};
struct xcb_translate_coordinates_cookie_t {unsigned int sequence;};
struct xcb_xc_misc_get_xid_range_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_query_version_cookie_t {unsigned int sequence;};
struct xcb_xkb_common_behavior_iterator_t {xcb_xkb_common_behavior_t *data;int rem;int index;};
struct xcb_xkb_device_led_info_iterator_t {xcb_xkb_device_led_info_t *data;int rem;int index;};
struct xcb_xkb_get_indicator_map_cookie_t {unsigned int sequence;};
struct xcb_xkb_sa_lock_ptr_btn_iterator_t {xcb_xkb_sa_lock_ptr_btn_t *data;int rem;int index;};
struct xcb_xkb_sa_redirect_key_iterator_t {xcb_xkb_sa_redirect_key_t *data;int rem;int index;};
struct xcb_xkb_sa_set_controls_iterator_t {xcb_xkb_sa_set_controls_t *data;int rem;int index;};
struct xcb_xkb_sa_set_ptr_dflt_iterator_t {xcb_xkb_sa_set_ptr_dflt_t *data;int rem;int index;};
struct xcb_xv_get_port_attribute_cookie_t {unsigned int sequence;};
struct xcb_xv_list_image_formats_cookie_t {unsigned int sequence;};
enum _003F63A829E52477BDB4080710A1139D {preorder = 0x0,postorder = 0x1,endorder = 0x2,leaf = 0x3,};
enum _0068E7133311A6A96A4EB9696065EC0B {ICMP_MIB_NUM = 0x0,ICMP_MIB_INMSGS = 0x1,ICMP_MIB_INERRORS = 0x2,ICMP_MIB_INDESTUNREACHS = 0x3,ICMP_MIB_INTIMEEXCDS = 0x4,ICMP_MIB_INPARMPROBS = 0x5,ICMP_MIB_INSRCQUENCHS = 0x6,ICMP_MIB_INREDIRECTS = 0x7,ICMP_MIB_INECHOS = 0x8,ICMP_MIB_INECHOREPS = 0x9,ICMP_MIB_INTIMESTAMPS = 0xA,ICMP_MIB_INTIMESTAMPREPS = 0xB,ICMP_MIB_INADDRMASKS = 0xC,ICMP_MIB_INADDRMASKREPS = 0xD,ICMP_MIB_OUTMSGS = 0xE,ICMP_MIB_OUTERRORS = 0xF,ICMP_MIB_OUTDESTUNREACHS = 0x10,ICMP_MIB_OUTTIMEEXCDS = 0x11,ICMP_MIB_OUTPARMPROBS = 0x12,ICMP_MIB_OUTSRCQUENCHS = 0x13,ICMP_MIB_OUTREDIRECTS = 0x14,ICMP_MIB_OUTECHOS = 0x15,ICMP_MIB_OUTECHOREPS = 0x16,ICMP_MIB_OUTTIMESTAMPS = 0x17,ICMP_MIB_OUTTIMESTAMPREPS = 0x18,ICMP_MIB_OUTADDRMASKS = 0x19,ICMP_MIB_OUTADDRMASKREPS = 0x1A,ICMP_MIB_CSUMERRORS = 0x1B,__ICMP_MIB_MAX = 0x1C,};
struct _00C45C682C101D7F0C6E69C609547065 {unsigned __int8 _[8];};
enum _010CF0517214757090FBF3F04E0B02D9 {TCA_DRR_UNSPEC = 0x0,TCA_DRR_QUANTUM = 0x1,__TCA_DRR_MAX = 0x2,};
enum _0112955827FC2F1F3D73B2DA97E42271 {XSyncPositiveTransition = 0x0,XSyncNegativeTransition = 0x1,XSyncPositiveComparison = 0x2,XSyncNegativeComparison = 0x3,};
enum _018E9FE7519BCFF29BB9A1C135EDF766 {AFORK = 0x1,ASU = 0x2,ACORE = 0x8,AXSIG = 0x10,};
enum _0192C5B81666662316678FF66957FA43 {XT_ADDRTYPE_UNSPEC = 0x1,XT_ADDRTYPE_UNICAST = 0x2,XT_ADDRTYPE_LOCAL = 0x4,XT_ADDRTYPE_BROADCAST = 0x8,XT_ADDRTYPE_ANYCAST = 0x10,XT_ADDRTYPE_MULTICAST = 0x20,XT_ADDRTYPE_BLACKHOLE = 0x40,XT_ADDRTYPE_UNREACHABLE = 0x80,XT_ADDRTYPE_PROHIBIT = 0x100,XT_ADDRTYPE_THROW = 0x200,XT_ADDRTYPE_NAT = 0x400,XT_ADDRTYPE_XRESOLVE = 0x800,};
struct _0274777D2FCFAE6C6A54957AD1D04326 {unsigned int eax;__attribute__((packed)) unsigned int ebx;__attribute__((packed)) unsigned int ecx;__attribute__((packed)) unsigned int edx;__attribute__((packed)) unsigned int esi;__attribute__((packed)) unsigned int edi;};
enum _02A365252B64D961A2FD63CDBE345E8F {NET_IPV4_CONF_FORWARDING = 0x1,NET_IPV4_CONF_MC_FORWARDING = 0x2,NET_IPV4_CONF_PROXY_ARP = 0x3,NET_IPV4_CONF_ACCEPT_REDIRECTS = 0x4,NET_IPV4_CONF_SECURE_REDIRECTS = 0x5,NET_IPV4_CONF_SEND_REDIRECTS = 0x6,NET_IPV4_CONF_SHARED_MEDIA = 0x7,NET_IPV4_CONF_RP_FILTER = 0x8,NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE = 0x9,NET_IPV4_CONF_BOOTP_RELAY = 0xA,NET_IPV4_CONF_LOG_MARTIANS = 0xB,NET_IPV4_CONF_TAG = 0xC,NET_IPV4_CONF_ARPFILTER = 0xD,NET_IPV4_CONF_MEDIUM_ID = 0xE,NET_IPV4_CONF_NOXFRM = 0xF,NET_IPV4_CONF_NOPOLICY = 0x10,NET_IPV4_CONF_FORCE_IGMP_VERSION = 0x11,NET_IPV4_CONF_ARP_ANNOUNCE = 0x12,NET_IPV4_CONF_ARP_IGNORE = 0x13,NET_IPV4_CONF_PROMOTE_SECONDARIES = 0x14,NET_IPV4_CONF_ARP_ACCEPT = 0x15,NET_IPV4_CONF_ARP_NOTIFY = 0x16,};
enum _02A7A69B2A203E77361A4E66CBE20295 {SCTP_AUTH_HMAC_ID_SHA1 = 0x1,SCTP_AUTH_HMAC_ID_SHA256 = 0x3,};
struct _02D3975949B56402107C534E336AFF12 {const char *dli_fname;void *dli_fbase;const char *dli_sname;void *dli_saddr;};
enum _035F2AEEED5F91404663CE6C9C0803B7 {XT_HASHLIMIT_HASH_DIP = 0x1,XT_HASHLIMIT_HASH_DPT = 0x2,XT_HASHLIMIT_HASH_SIP = 0x4,XT_HASHLIMIT_HASH_SPT = 0x8,XT_HASHLIMIT_INVERT = 0x10,XT_HASHLIMIT_BYTES = 0x20,};
struct _038B891F4881F16F541AE58F6D49FAEC {void *data;int rem;int index;};
enum _038CC4C7C84F4F08B3B749DDF010BA25 {Linear8Bit = 0x0,TwoD8Bit = 0x1,Linear16Bit = 0x2,TwoD16Bit = 0x3,};
enum _0397B78B9B64B69C8BAF442FBBE2AEE1 {DM_VERSION_CMD = 0x0,DM_REMOVE_ALL_CMD = 0x1,DM_LIST_DEVICES_CMD = 0x2,DM_DEV_CREATE_CMD = 0x3,DM_DEV_REMOVE_CMD = 0x4,DM_DEV_RENAME_CMD = 0x5,DM_DEV_SUSPEND_CMD = 0x6,DM_DEV_STATUS_CMD = 0x7,DM_DEV_WAIT_CMD = 0x8,DM_TABLE_LOAD_CMD = 0x9,DM_TABLE_CLEAR_CMD = 0xA,DM_TABLE_DEPS_CMD = 0xB,DM_TABLE_STATUS_CMD = 0xC,DM_LIST_VERSIONS_CMD = 0xD,DM_TARGET_MSG_CMD = 0xE,DM_DEV_SET_GEOMETRY_CMD = 0xF,};
enum _0511A977F6584EDF9D5FBCC137690992 {TX_SETUP = 0x1,TX_DELETE = 0x2,TX_READ = 0x3,TX_SEND = 0x4,RX_SETUP = 0x5,RX_DELETE = 0x6,RX_READ = 0x7,TX_STATUS = 0x8,TX_EXPIRED = 0x9,RX_STATUS = 0xA,RX_TIMEOUT = 0xB,RX_CHANGED = 0xC,};
enum _054B7E3E699D10CFBCA94A42F1BDDA0A {SNDRV_CHMAP_UNKNOWN = 0x0,SNDRV_CHMAP_NA = 0x1,SNDRV_CHMAP_MONO = 0x2,SNDRV_CHMAP_FL = 0x3,SNDRV_CHMAP_FR = 0x4,SNDRV_CHMAP_RL = 0x5,SNDRV_CHMAP_RR = 0x6,SNDRV_CHMAP_FC = 0x7,SNDRV_CHMAP_LFE = 0x8,SNDRV_CHMAP_SL = 0x9,SNDRV_CHMAP_SR = 0xA,SNDRV_CHMAP_RC = 0xB,SNDRV_CHMAP_FLC = 0xC,SNDRV_CHMAP_FRC = 0xD,SNDRV_CHMAP_RLC = 0xE,SNDRV_CHMAP_RRC = 0xF,SNDRV_CHMAP_FLW = 0x10,SNDRV_CHMAP_FRW = 0x11,SNDRV_CHMAP_FLH = 0x12,SNDRV_CHMAP_FCH = 0x13,SNDRV_CHMAP_FRH = 0x14,SNDRV_CHMAP_TC = 0x15,SNDRV_CHMAP_TFL = 0x16,SNDRV_CHMAP_TFR = 0x17,SNDRV_CHMAP_TFC = 0x18,SNDRV_CHMAP_TRL = 0x19,SNDRV_CHMAP_TRR = 0x1A,SNDRV_CHMAP_TRC = 0x1B,SNDRV_CHMAP_TFLC = 0x1C,SNDRV_CHMAP_TFRC = 0x1D,SNDRV_CHMAP_TSL = 0x1E,SNDRV_CHMAP_TSR = 0x1F,SNDRV_CHMAP_LLFE = 0x20,SNDRV_CHMAP_RLFE = 0x21,SNDRV_CHMAP_BC = 0x22,SNDRV_CHMAP_BLC = 0x23,SNDRV_CHMAP_BRC = 0x24,SNDRV_CHMAP_LAST = 0x24,};
enum _05A50ECB05B65953CE4DB9E3BEF9FCBB {NET_LLC2_TIMEOUT = 0x1,};
enum _05E3195081394CB44D0F2D41FD41A42E {ILL_ILLOPC = 0x1,ILL_ILLOPN = 0x2,ILL_ILLADR = 0x3,ILL_ILLTRP = 0x4,ILL_PRVOPC = 0x5,ILL_PRVREG = 0x6,ILL_COPROC = 0x7,ILL_BADSTK = 0x8,};
enum _064E8F442D1FD0E5FF974B8401E48244 {IFLA_VLAN_UNSPEC = 0x0,IFLA_VLAN_ID = 0x1,IFLA_VLAN_FLAGS = 0x2,IFLA_VLAN_EGRESS_QOS = 0x3,IFLA_VLAN_INGRESS_QOS = 0x4,IFLA_VLAN_PROTOCOL = 0x5,__IFLA_VLAN_MAX = 0x6,};
enum _066B89C76150CC5D93903885E5D77774 {TCF_LAYER_LINK = 0x0,TCF_LAYER_NETWORK = 0x1,TCF_LAYER_TRANSPORT = 0x2,__TCF_LAYER_MAX = 0x3,};
enum _067D41603F0E13470D63AB0A966E657E {XT_TIME_LOCAL_TZ = 0x1,XT_TIME_CONTIGUOUS = 0x2,XT_TIME_ALL_MONTHDAYS = 0xFFFFFFFE,XT_TIME_ALL_WEEKDAYS = 0xFE,XT_TIME_MIN_DAYTIME = 0x0,XT_TIME_MAX_DAYTIME = 0x1517F,};
struct _06CAB5296C39900A9CE51DBF4F560AD6 {int val[2];};
enum _06E374FD3B985DAD1FA0535BAB46A166 {IPSET_COUNTER_NONE = 0x0,IPSET_COUNTER_EQ = 0x1,IPSET_COUNTER_NE = 0x2,IPSET_COUNTER_LT = 0x3,IPSET_COUNTER_GT = 0x4,};
enum _07195C8C6CC0924B17D1782057919AC0 {MDBA_MDB_UNSPEC = 0x0,MDBA_MDB_ENTRY = 0x1,__MDBA_MDB_MAX = 0x2,};
enum _073C7CB8213CC0548D03937A510F6B8F {CONNSECMARK_SAVE = 0x1,CONNSECMARK_RESTORE = 0x2,};
enum _0820D168B3B596C7A12A3578F6930236 {NET_IPX_PPROP_BROADCASTING = 0x1,NET_IPX_FORWARDING = 0x2,};
enum _08676B761D46AC0E8736B97FA3DBC486 {PTHREAD_RWLOCK_PREFER_READER_NP = 0x0,PTHREAD_RWLOCK_PREFER_WRITER_NP = 0x1,PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 0x2,PTHREAD_RWLOCK_DEFAULT_NP = 0x0,};
enum _08EBBBEE0290DB92B78419976688149A {VIDEO_PAN_SCAN = 0x0,VIDEO_LETTER_BOX = 0x1,VIDEO_CENTER_CUT_OUT = 0x2,};
enum _09C3FFA026BC908AACE27D0C95B171E0 {DEV_PARPORT_SPINTIME = 0x1,DEV_PARPORT_BASE_ADDR = 0x2,DEV_PARPORT_IRQ = 0x3,DEV_PARPORT_DMA = 0x4,DEV_PARPORT_MODES = 0x5,DEV_PARPORT_DEVICES = 0x6,DEV_PARPORT_AUTOPROBE = 0x10,};
enum _0B5D3E957672FAB7AF607968B416CE5C {VIDEO_SYSTEM_PAL = 0x0,VIDEO_SYSTEM_NTSC = 0x1,VIDEO_SYSTEM_PALN = 0x2,VIDEO_SYSTEM_PALNc = 0x3,VIDEO_SYSTEM_PALM = 0x4,VIDEO_SYSTEM_NTSC60 = 0x5,VIDEO_SYSTEM_PAL60 = 0x6,VIDEO_SYSTEM_PALM60 = 0x7,};
enum _0BFBDCD80621C1072FBAAFCCBEC0893D {NDUSEROPT_UNSPEC = 0x0,NDUSEROPT_SRCADDR = 0x1,__NDUSEROPT_MAX = 0x2,};
enum _0C18824A0145C18BE69184C08A91AA64 {TCF_META_TYPE_VAR = 0x0,TCF_META_TYPE_INT = 0x1,__TCF_META_TYPE_MAX = 0x2,};
struct _0C41D669CC7829CF12B135747142967F {const char *str;unsigned __int16 length;};
union _0C72A33DA16A3FF6F4A3A372A725953A {char __size[32];__int64 __align;};
enum _0D28A6D9277963163067C053D6D791C2 {PTHREAD_CANCEL_DEFERRED = 0x0,PTHREAD_CANCEL_ASYNCHRONOUS = 0x1,};
enum _0DDACC7DC443E071E9807358C2A97208 {AIO_CANCELED = 0x0,AIO_NOTCANCELED = 0x1,AIO_ALLDONE = 0x2,};
enum _0DE7FE70863292FD2ADF16E4274B7148 {SNDRV_PCM_MMAP_OFFSET_DATA = 0x0,SNDRV_PCM_MMAP_OFFSET_STATUS = 0x80000000,SNDRV_PCM_MMAP_OFFSET_CONTROL = 0x81000000,};
enum _0E04C741D18E96D2838E86389F08AC1B {IPVS_DAEMON_ATTR_UNSPEC = 0x0,IPVS_DAEMON_ATTR_STATE = 0x1,IPVS_DAEMON_ATTR_MCAST_IFN = 0x2,IPVS_DAEMON_ATTR_SYNC_ID = 0x3,__IPVS_DAEMON_ATTR_MAX = 0x4,};
enum _0EB787AF809256D3196903C0524521CB {AUDIO_STEREO = 0x0,AUDIO_MONO_LEFT = 0x1,AUDIO_MONO_RIGHT = 0x2,AUDIO_MONO = 0x3,AUDIO_STEREO_SWAPPED = 0x4,};
enum _0F865413313D1760B76DFFEB629EEC2B {NDTPA_UNSPEC = 0x0,NDTPA_IFINDEX = 0x1,NDTPA_REFCNT = 0x2,NDTPA_REACHABLE_TIME = 0x3,NDTPA_BASE_REACHABLE_TIME = 0x4,NDTPA_RETRANS_TIME = 0x5,NDTPA_GC_STALETIME = 0x6,NDTPA_DELAY_PROBE_TIME = 0x7,NDTPA_QUEUE_LEN = 0x8,NDTPA_APP_PROBES = 0x9,NDTPA_UCAST_PROBES = 0xA,NDTPA_MCAST_PROBES = 0xB,NDTPA_ANYCAST_DELAY = 0xC,NDTPA_PROXY_DELAY = 0xD,NDTPA_PROXY_QLEN = 0xE,NDTPA_LOCKTIME = 0xF,NDTPA_QUEUE_LENBYTES = 0x10,__NDTPA_MAX = 0x11,};
enum _0FA339A064E61FF434A56DA3EE04706A {TCP_ESTABLISHED = 0x1,TCP_SYN_SENT = 0x2,TCP_SYN_RECV = 0x3,TCP_FIN_WAIT1 = 0x4,TCP_FIN_WAIT2 = 0x5,TCP_TIME_WAIT = 0x6,TCP_CLOSE = 0x7,TCP_CLOSE_WAIT = 0x8,TCP_LAST_ACK = 0x9,TCP_LISTEN = 0xA,TCP_CLOSING = 0xB,};
enum _110E6486D021603F6017C69BC1BE0C2A {TCA_ROUTE4_UNSPEC = 0x0,TCA_ROUTE4_CLASSID = 0x1,TCA_ROUTE4_TO = 0x2,TCA_ROUTE4_FROM = 0x3,TCA_ROUTE4_IIF = 0x4,TCA_ROUTE4_POLICE = 0x5,TCA_ROUTE4_ACT = 0x6,__TCA_ROUTE4_MAX = 0x7,};
enum _11645F8363677AEE51E6B157F6AD27E8 {IPOIB_MODE_DATAGRAM = 0x0,IPOIB_MODE_CONNECTED = 0x1,};
enum _11FBD184975FE0D255859931E1E2B0D1 {NET_X25_RESTART_REQUEST_TIMEOUT = 0x1,NET_X25_CALL_REQUEST_TIMEOUT = 0x2,NET_X25_RESET_REQUEST_TIMEOUT = 0x3,NET_X25_CLEAR_REQUEST_TIMEOUT = 0x4,NET_X25_ACK_HOLD_BACK_TIMEOUT = 0x5,NET_X25_FORWARD = 0x6,};
enum _1245A1FB5F4A3D60B68851188167E7C1 {XSyncAbsolute = 0x0,XSyncRelative = 0x1,};
enum _12C056692BBC86ABDB283BA6A4CBFC86 {RTLD_DL_SYMENT = 0x1,RTLD_DL_LINKMAP = 0x2,};
enum _12C4D68CC848B89005BDCA740AC4ADB4 {NDA_UNSPEC = 0x0,NDA_DST = 0x1,NDA_LLADDR = 0x2,NDA_CACHEINFO = 0x3,NDA_PROBES = 0x4,NDA_VLAN = 0x5,NDA_PORT = 0x6,NDA_VNI = 0x7,NDA_IFINDEX = 0x8,__NDA_MAX = 0x9,};
enum _12CCA6F0A764F3BC8A073754545FBB2E {HW_BREAKPOINT_EMPTY = 0x0,HW_BREAKPOINT_R = 0x1,HW_BREAKPOINT_W = 0x2,HW_BREAKPOINT_RW = 0x3,HW_BREAKPOINT_X = 0x4,HW_BREAKPOINT_INVALID = 0x7,};
struct _13C78DD7EDF1CF1C4AE9B0D54E891AA2 {__int16 x;__int16 y;};
enum _147BDAC6BE7AC81F9057BD3B87693D62 {UNIX_DIAG_NAME = 0x0,UNIX_DIAG_VFS = 0x1,UNIX_DIAG_PEER = 0x2,UNIX_DIAG_ICONS = 0x3,UNIX_DIAG_RQLEN = 0x4,UNIX_DIAG_MEMINFO = 0x5,UNIX_DIAG_SHUTDOWN = 0x6,__UNIX_DIAG_MAX = 0x7,};
enum _1576E25E78A8311D63B2E3AD1E13F906 {SOF_TIMESTAMPING_TX_HARDWARE = 0x1,SOF_TIMESTAMPING_TX_SOFTWARE = 0x2,SOF_TIMESTAMPING_RX_HARDWARE = 0x4,SOF_TIMESTAMPING_RX_SOFTWARE = 0x8,SOF_TIMESTAMPING_SOFTWARE = 0x10,SOF_TIMESTAMPING_SYS_HARDWARE = 0x20,SOF_TIMESTAMPING_RAW_HARDWARE = 0x40,SOF_TIMESTAMPING_MASK = 0x7F,};
enum _158FCC65D326B7CE8E3F9D27D28BFDA8 {XFRM_SHARE_ANY = 0x0,XFRM_SHARE_SESSION = 0x1,XFRM_SHARE_USER = 0x2,XFRM_SHARE_UNIQUE = 0x3,};
enum _15F040D403CFA9D595F2BA659ED8102B {CGROUPSTATS_CMD_UNSPEC = 0x3,CGROUPSTATS_CMD_GET = 0x4,CGROUPSTATS_CMD_NEW = 0x5,__CGROUPSTATS_CMD_MAX = 0x6,};
enum _15FDE7FADCD6D00243FEC5669981BF2A {TASKSTATS_TYPE_UNSPEC = 0x0,TASKSTATS_TYPE_PID = 0x1,TASKSTATS_TYPE_TGID = 0x2,TASKSTATS_TYPE_STATS = 0x3,TASKSTATS_TYPE_AGGR_PID = 0x4,TASKSTATS_TYPE_AGGR_TGID = 0x5,TASKSTATS_TYPE_NULL = 0x6,__TASKSTATS_TYPE_MAX = 0x7,};
enum _161FF3EA3C9734DBE927C9F20E155079 {VFIO_PCI_INTX_IRQ_INDEX = 0x0,VFIO_PCI_MSI_IRQ_INDEX = 0x1,VFIO_PCI_MSIX_IRQ_INDEX = 0x2,VFIO_PCI_ERR_IRQ_INDEX = 0x3,VFIO_PCI_NUM_IRQS = 0x4,};
struct _1647B670B91D8E45F62891AE6C005714 {int surface_type_id;int chroma_format;unsigned __int16 max_width;unsigned __int16 max_height;unsigned __int16 subpicture_max_width;unsigned __int16 subpicture_max_height;int mc_type;int flags;};
enum _1657BDB7AEBF74BEF81733C32F5B4AD3 {TCA_HFSC_UNSPEC = 0x0,TCA_HFSC_RSC = 0x1,TCA_HFSC_FSC = 0x2,TCA_HFSC_USC = 0x3,__TCA_HFSC_MAX = 0x4,};
enum _16B0B93CB8DD7194C50FFF250111CAE4 {PTHREAD_CREATE_JOINABLE = 0x0,PTHREAD_CREATE_DETACHED = 0x1,};
enum _171A4D9633FE4083817C8EED5A4064D7 {TCA_GACT_UNSPEC = 0x0,TCA_GACT_TM = 0x1,TCA_GACT_PARMS = 0x2,TCA_GACT_PROB = 0x3,__TCA_GACT_MAX = 0x4,};
struct _17E8534BCB72EE42B6B6995F8B90F203 {unsigned __int64 __val[16];};
enum _187B40A7348A0C4F2594E271F22745FE {TCA_CSUM_UNSPEC = 0x0,TCA_CSUM_PARMS = 0x1,TCA_CSUM_TM = 0x2,__TCA_CSUM_MAX = 0x3,};
struct _19819260117A2122793EF6A7F838A8D8 {__int16 x;__int16 y;__int16 width;__int16 height;};
enum _19893F3E482B2349C43031164361A8A0 {TEAM_CMD_NOOP = 0x0,TEAM_CMD_OPTIONS_SET = 0x1,TEAM_CMD_OPTIONS_GET = 0x2,TEAM_CMD_PORT_LIST_GET = 0x3,__TEAM_CMD_MAX = 0x4,TEAM_CMD_MAX = 0x3,};
enum _19B59981C36F9FBC60C0DC03BCC6C5FF {TFD_TIMER_ABSTIME = 0x1,};
enum _1A11F16F739DFA706F6E7EA7E8E05D39 {WIMAX_GNL_RESET_IFIDX = 0x1,};
enum _1A75611FB0DD550A61622E85FA528050 {TCA_FQ_CODEL_XSTATS_QDISC = 0x0,TCA_FQ_CODEL_XSTATS_CLASS = 0x1,};
enum _1B8DA7DA6EAA9BC749DAB476080809CA {FB_BLANK_UNBLANK = 0x0,FB_BLANK_NORMAL = 0x1,FB_BLANK_VSYNC_SUSPEND = 0x2,FB_BLANK_HSYNC_SUSPEND = 0x3,FB_BLANK_POWERDOWN = 0x4,};
enum _1C844E79842E979BFFEFD24E9EF165EB {XT_STRING_FLAG_INVERT = 0x1,XT_STRING_FLAG_IGNORECASE = 0x2,};
enum _1C87357A8AB1185C424E1D897E8B30E8 {XT_CT_NOTRACK = 0x1,XT_CT_NOTRACK_ALIAS = 0x2,XT_CT_MASK = 0x3,};
enum _1D7EE9EB19957988E252704FDFF0CFD5 {XT_OWNER_UID = 0x1,XT_OWNER_GID = 0x2,XT_OWNER_SOCKET = 0x4,};
enum _1DAB2066660C93B51247B976141F21A3 {NET_DECNET_CONF_LOOPBACK = 0xFFFFFFFE,NET_DECNET_CONF_DDCMP = 0xFFFFFFFD,NET_DECNET_CONF_PPP = 0xFFFFFFFC,NET_DECNET_CONF_X25 = 0xFFFFFFFB,NET_DECNET_CONF_GRE = 0xFFFFFFFA,NET_DECNET_CONF_ETHER = 0xFFFFFFF9,};
enum _1DEA5F99BA550E134F90C8CF2EF07191 {MM_NOTOK = 0xFFFFFFFF,MM_OK = 0x0,MM_NOMSG = 0x1,MM_NOCON = 0x4,};
enum _1DF047069AF03344AD1E8E838FC376B2 {FS_NRINODE = 0x1,FS_STATINODE = 0x2,FS_MAXINODE = 0x3,FS_NRDQUOT = 0x4,FS_MAXDQUOT = 0x5,FS_NRFILE = 0x6,FS_MAXFILE = 0x7,FS_DENTRY = 0x8,FS_NRSUPER = 0x9,FS_MAXSUPER = 0xA,FS_OVERFLOWUID = 0xB,FS_OVERFLOWGID = 0xC,FS_LEASES = 0xD,FS_DIR_NOTIFY = 0xE,FS_LEASE_TIME = 0xF,FS_DQSTATS = 0x10,FS_XFS = 0x11,FS_AIO_NR = 0x12,FS_AIO_MAX_NR = 0x13,FS_INOTIFY = 0x14,FS_OCFS2 = 0x3DC,};
enum _1EF468414A5E42A89158CD4431479D07 {PA_INT = 0x0,PA_CHAR = 0x1,PA_WCHAR = 0x2,PA_STRING = 0x3,PA_WSTRING = 0x4,PA_POINTER = 0x5,PA_FLOAT = 0x6,PA_DOUBLE = 0x7,PA_LAST = 0x8,};
enum _1F94069AA9377B71B881847CE926861C {PPPOL2TP_SO_DEBUG = 0x1,PPPOL2TP_SO_RECVSEQ = 0x2,PPPOL2TP_SO_SENDSEQ = 0x3,PPPOL2TP_SO_LNSMODE = 0x4,PPPOL2TP_SO_REORDERTO = 0x5,};
struct _1FC9C4745BFE4A4C45A6D008A791D581 {unsigned __int32 id : 16;unsigned __int32 rd : 1;unsigned __int32 tc : 1;unsigned __int32 aa : 1;unsigned __int32 opcode : 4;unsigned __int32 qr : 1;unsigned __int32 rcode : 4;unsigned __int32 cd : 1;unsigned __int32 ad : 1;unsigned __int32 unused : 1;unsigned __int32 ra : 1;unsigned __int32 qdcount : 16;unsigned __int32 ancount : 16;unsigned __int32 nscount : 16;unsigned __int32 arcount : 16;};
enum _1FCBC46360922852B3B664D31963BE77 {IFLA_UNSPEC = 0x0,IFLA_ADDRESS = 0x1,IFLA_BROADCAST = 0x2,IFLA_IFNAME = 0x3,IFLA_MTU = 0x4,IFLA_LINK = 0x5,IFLA_QDISC = 0x6,IFLA_STATS = 0x7,IFLA_COST = 0x8,IFLA_PRIORITY = 0x9,IFLA_MASTER = 0xA,IFLA_WIRELESS = 0xB,IFLA_PROTINFO = 0xC,IFLA_TXQLEN = 0xD,IFLA_MAP = 0xE,IFLA_WEIGHT = 0xF,IFLA_OPERSTATE = 0x10,IFLA_LINKMODE = 0x11,IFLA_LINKINFO = 0x12,IFLA_NET_NS_PID = 0x13,IFLA_IFALIAS = 0x14,IFLA_NUM_VF = 0x15,IFLA_VFINFO_LIST = 0x16,IFLA_STATS64 = 0x17,IFLA_VF_PORTS = 0x18,IFLA_PORT_SELF = 0x19,IFLA_AF_SPEC = 0x1A,IFLA_GROUP = 0x1B,IFLA_NET_NS_FD = 0x1C,IFLA_EXT_MASK = 0x1D,IFLA_PROMISCUITY = 0x1E,IFLA_NUM_TX_QUEUES = 0x1F,IFLA_NUM_RX_QUEUES = 0x20,IFLA_CARRIER = 0x21,__IFLA_MAX = 0x22,};
enum _20C4177AB2A8087BAF86F07D7A094EE7 {XT_CONNMARK_SET = 0x0,XT_CONNMARK_SAVE = 0x1,XT_CONNMARK_RESTORE = 0x2,};
enum _21F5A3B15463AF72127F5499CB6EE2AC {XStringStyle = 0x0,XCompoundTextStyle = 0x1,XTextStyle = 0x2,XStdICCTextStyle = 0x3,XUTF8StringStyle = 0x4,};
enum _22DE22906013D90C711301E42AF69C9B {IFLA_BRIDGE_FLAGS = 0x0,IFLA_BRIDGE_MODE = 0x1,IFLA_BRIDGE_VLAN_INFO = 0x2,__IFLA_BRIDGE_MAX = 0x3,};
enum _234D109EC18BCED17CA0530AFA8F7C32 {I2400M_PL_ALIGN = 0x10,I2400M_PL_SIZE_MAX = 0x3EFF,I2400M_MAX_PLS_IN_MSG = 0x3C,I2400M_H2D_PREVIEW_BARKER = 0xCAFE900D,I2400M_COLD_RESET_BARKER = 0xC01DC01D,I2400M_WARM_RESET_BARKER = 0x50F750F7,I2400M_NBOOT_BARKER = 0xDEADBEEF,I2400M_SBOOT_BARKER = 0xFF1C1A1,I2400M_SBOOT_BARKER_6050 = 0x80000001,I2400M_ACK_BARKER = 0xFEEDBABE,I2400M_D2H_MSG_BARKER = 0xBEEFBABE,};
enum _23629B6518A96341E28EAD3ADC141DC6 {VIDEO_SOURCE_DEMUX = 0x0,VIDEO_SOURCE_MEMORY = 0x1,};
struct _23D39CEB96D177F7D0B7BFAD0D72AB23 {char *res_name;char *res_class;};
enum _23F7524FE4F03CDFCFD1232F4F927297 {TCP_MIB_NUM = 0x0,TCP_MIB_RTOALGORITHM = 0x1,TCP_MIB_RTOMIN = 0x2,TCP_MIB_RTOMAX = 0x3,TCP_MIB_MAXCONN = 0x4,TCP_MIB_ACTIVEOPENS = 0x5,TCP_MIB_PASSIVEOPENS = 0x6,TCP_MIB_ATTEMPTFAILS = 0x7,TCP_MIB_ESTABRESETS = 0x8,TCP_MIB_CURRESTAB = 0x9,TCP_MIB_INSEGS = 0xA,TCP_MIB_OUTSEGS = 0xB,TCP_MIB_RETRANSSEGS = 0xC,TCP_MIB_INERRS = 0xD,TCP_MIB_OUTRSTS = 0xE,TCP_MIB_CSUMERRORS = 0xF,__TCP_MIB_MAX = 0x10,};
enum _25162C014684FCACD87216D177348AC7 {IPVS_CMD_ATTR_UNSPEC = 0x0,IPVS_CMD_ATTR_SERVICE = 0x1,IPVS_CMD_ATTR_DEST = 0x2,IPVS_CMD_ATTR_DAEMON = 0x3,IPVS_CMD_ATTR_TIMEOUT_TCP = 0x4,IPVS_CMD_ATTR_TIMEOUT_TCP_FIN = 0x5,IPVS_CMD_ATTR_TIMEOUT_UDP = 0x6,__IPVS_CMD_ATTR_MAX = 0x7,};
enum _25942044E42384ABB7F0CC7F690A0C02 {WRDE_DOOFFS = 0x1,WRDE_APPEND = 0x2,WRDE_NOCMD = 0x4,WRDE_REUSE = 0x8,WRDE_SHOWERR = 0x10,WRDE_UNDEF = 0x20,__WRDE_FLAGS = 0x3F,};
struct _276527E852EBD04F842021527F4FA45F {int __allocated;int __used;struct __spawn_action *__actions;int __pad[16];};
enum _281072E49EAE8AB5625F274A9284616B {NET_AX25_IP_DEFAULT_MODE = 0x1,NET_AX25_DEFAULT_MODE = 0x2,NET_AX25_BACKOFF_TYPE = 0x3,NET_AX25_CONNECT_MODE = 0x4,NET_AX25_STANDARD_WINDOW = 0x5,NET_AX25_EXTENDED_WINDOW = 0x6,NET_AX25_T1_TIMEOUT = 0x7,NET_AX25_T2_TIMEOUT = 0x8,NET_AX25_T3_TIMEOUT = 0x9,NET_AX25_IDLE_TIMEOUT = 0xA,NET_AX25_N2 = 0xB,NET_AX25_PACLEN = 0xC,NET_AX25_PROTOCOL = 0xD,NET_AX25_DAMA_SLAVE_TIMEOUT = 0xE,};
enum _2821E9517F8C64C49B1CDFF94CA4D135 {_CS_PATH = 0x0,_CS_V6_WIDTH_RESTRICTED_ENVS = 0x1,_CS_GNU_LIBC_VERSION = 0x2,_CS_GNU_LIBPTHREAD_VERSION = 0x3,_CS_V5_WIDTH_RESTRICTED_ENVS = 0x4,_CS_V7_WIDTH_RESTRICTED_ENVS = 0x5,_CS_LFS_CFLAGS = 0x3E8,_CS_LFS_LDFLAGS = 0x3E9,_CS_LFS_LIBS = 0x3EA,_CS_LFS_LINTFLAGS = 0x3EB,_CS_LFS64_CFLAGS = 0x3EC,_CS_LFS64_LDFLAGS = 0x3ED,_CS_LFS64_LIBS = 0x3EE,_CS_LFS64_LINTFLAGS = 0x3EF,_CS_XBS5_ILP32_OFF32_CFLAGS = 0x44C,_CS_XBS5_ILP32_OFF32_LDFLAGS = 0x44D,_CS_XBS5_ILP32_OFF32_LIBS = 0x44E,_CS_XBS5_ILP32_OFF32_LINTFLAGS = 0x44F,_CS_XBS5_ILP32_OFFBIG_CFLAGS = 0x450,_CS_XBS5_ILP32_OFFBIG_LDFLAGS = 0x451,_CS_XBS5_ILP32_OFFBIG_LIBS = 0x452,_CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 0x453,_CS_XBS5_LP64_OFF64_CFLAGS = 0x454,_CS_XBS5_LP64_OFF64_LDFLAGS = 0x455,_CS_XBS5_LP64_OFF64_LIBS = 0x456,_CS_XBS5_LP64_OFF64_LINTFLAGS = 0x457,_CS_XBS5_LPBIG_OFFBIG_CFLAGS = 0x458,_CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 0x459,_CS_XBS5_LPBIG_OFFBIG_LIBS = 0x45A,_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 0x45B,_CS_POSIX_V6_ILP32_OFF32_CFLAGS = 0x45C,_CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 0x45D,_CS_POSIX_V6_ILP32_OFF32_LIBS = 0x45E,_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 0x45F,_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 0x460,_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 0x461,_CS_POSIX_V6_ILP32_OFFBIG_LIBS = 0x462,_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 0x463,_CS_POSIX_V6_LP64_OFF64_CFLAGS = 0x464,_CS_POSIX_V6_LP64_OFF64_LDFLAGS = 0x465,_CS_POSIX_V6_LP64_OFF64_LIBS = 0x466,_CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 0x467,_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 0x468,_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 0x469,_CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 0x46A,_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 0x46B,_CS_POSIX_V7_ILP32_OFF32_CFLAGS = 0x46C,_CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 0x46D,_CS_POSIX_V7_ILP32_OFF32_LIBS = 0x46E,_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 0x46F,_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 0x470,_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 0x471,_CS_POSIX_V7_ILP32_OFFBIG_LIBS = 0x472,_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 0x473,_CS_POSIX_V7_LP64_OFF64_CFLAGS = 0x474,_CS_POSIX_V7_LP64_OFF64_LDFLAGS = 0x475,_CS_POSIX_V7_LP64_OFF64_LIBS = 0x476,_CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 0x477,_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 0x478,_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 0x479,_CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 0x47A,_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 0x47B,_CS_V6_ENV = 0x47C,_CS_V7_ENV = 0x47D,};
enum _284ECFACA0BBF8B9DD163B585276B124 {L2TP_ATTR_STATS_NONE = 0x0,L2TP_ATTR_TX_PACKETS = 0x1,L2TP_ATTR_TX_BYTES = 0x2,L2TP_ATTR_TX_ERRORS = 0x3,L2TP_ATTR_RX_PACKETS = 0x4,L2TP_ATTR_RX_BYTES = 0x5,L2TP_ATTR_RX_SEQ_DISCARDS = 0x6,L2TP_ATTR_RX_OOS_PACKETS = 0x7,L2TP_ATTR_RX_ERRORS = 0x8,__L2TP_ATTR_STATS_MAX = 0x9,};
enum _28CA9876FFADE53F315F57AC53AC1E49 {NET_IPV4_ROUTE_FLUSH = 0x1,NET_IPV4_ROUTE_MIN_DELAY = 0x2,NET_IPV4_ROUTE_MAX_DELAY = 0x3,NET_IPV4_ROUTE_GC_THRESH = 0x4,NET_IPV4_ROUTE_MAX_SIZE = 0x5,NET_IPV4_ROUTE_GC_MIN_INTERVAL = 0x6,NET_IPV4_ROUTE_GC_TIMEOUT = 0x7,NET_IPV4_ROUTE_GC_INTERVAL = 0x8,NET_IPV4_ROUTE_REDIRECT_LOAD = 0x9,NET_IPV4_ROUTE_REDIRECT_NUMBER = 0xA,NET_IPV4_ROUTE_REDIRECT_SILENCE = 0xB,NET_IPV4_ROUTE_ERROR_COST = 0xC,NET_IPV4_ROUTE_ERROR_BURST = 0xD,NET_IPV4_ROUTE_GC_ELASTICITY = 0xE,NET_IPV4_ROUTE_MTU_EXPIRES = 0xF,NET_IPV4_ROUTE_MIN_PMTU = 0x10,NET_IPV4_ROUTE_MIN_ADVMSS = 0x11,NET_IPV4_ROUTE_SECRET_INTERVAL = 0x12,NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS = 0x13,};
enum _290EE5640DDAE6DA4BDDEB7B0A656D51 {INET_DIAG_NONE = 0x0,INET_DIAG_MEMINFO = 0x1,INET_DIAG_INFO = 0x2,INET_DIAG_VEGASINFO = 0x3,INET_DIAG_CONG = 0x4,INET_DIAG_TOS = 0x5,INET_DIAG_TCLASS = 0x6,INET_DIAG_SKMEMINFO = 0x7,INET_DIAG_SHUTDOWN = 0x8,};
enum _292475A2E0A8DABD769C5D6A9D9CC8D5 {NET_IPV6_ROUTE_FLUSH = 0x1,NET_IPV6_ROUTE_GC_THRESH = 0x2,NET_IPV6_ROUTE_MAX_SIZE = 0x3,NET_IPV6_ROUTE_GC_MIN_INTERVAL = 0x4,NET_IPV6_ROUTE_GC_TIMEOUT = 0x5,NET_IPV6_ROUTE_GC_INTERVAL = 0x6,NET_IPV6_ROUTE_GC_ELASTICITY = 0x7,NET_IPV6_ROUTE_MTU_EXPIRES = 0x8,NET_IPV6_ROUTE_MIN_ADVMSS = 0x9,NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS = 0xA,};
enum _2ADC401C2E21ED1A63A0FE0B868E544D {XOMOrientation_LTR_TTB = 0x0,XOMOrientation_RTL_TTB = 0x1,XOMOrientation_TTB_LTR = 0x2,XOMOrientation_TTB_RTL = 0x3,XOMOrientation_Context = 0x4,};
struct _2AE07F4A994C5FC6C65BC46898F1D740 {int present;__int16 major_version;__int16 minor_version;};
struct _2AF778DA43FB8122C2FB509EA1A1C573 {int num;char *name;float verticalRefresh;int flags;int imageWidth;int imageHeight;int pixmapWidth;int pixmapHeight;int bytesPerScanline;int byteOrder;int depth;int bitsPerPixel;unsigned __int64 redMask;unsigned __int64 greenMask;unsigned __int64 blueMask;__int16 visualClass;int viewportWidth;int viewportHeight;int xViewportStep;int yViewportStep;int maxViewportX;int maxViewportY;int viewportFlags;int reserved1;int reserved2;};
enum _2BE422EB4B7233E8C58D6E03ADE8CB89 {_IEEE_ = 0xFFFFFFFF,_SVID_ = 0x0,_XOPEN_ = 0x1,_POSIX_ = 0x2,_ISOC_ = 0x3,};
struct _2C76E819DF093E6F4CE4D5F76713877F {unsigned int filter;char enable;unsigned int coeff[19];};
enum _2CDE13EB2D3F73B362BA9D22AD679D02 {IFLA_PORT_UNSPEC = 0x0,IFLA_PORT_VF = 0x1,IFLA_PORT_PROFILE = 0x2,IFLA_PORT_VSI_TYPE = 0x3,IFLA_PORT_INSTANCE_UUID = 0x4,IFLA_PORT_HOST_UUID = 0x5,IFLA_PORT_REQUEST = 0x6,IFLA_PORT_RESPONSE = 0x7,__IFLA_PORT_MAX = 0x8,};
enum _2CE2EBA2C3EF5DF9889A5C116B3D4260 {MPOL_DEFAULT = 0x0,MPOL_PREFERRED = 0x1,MPOL_BIND = 0x2,MPOL_INTERLEAVE = 0x3,MPOL_LOCAL = 0x4,MPOL_MAX = 0x5,};
enum _2D7E3F9B7B7CBE9EA0BFB7DBBDFDCC33 {PPPOL2TP_MSG_DEBUG = 0x1,PPPOL2TP_MSG_CONTROL = 0x2,PPPOL2TP_MSG_SEQ = 0x4,PPPOL2TP_MSG_DATA = 0x8,};
enum _2D9AFB5301F88CF2B834A26D4E6AE961 {DMX_IN_FRONTEND = 0x0,DMX_IN_DVR = 0x1,};
enum _2D9ECEA6C47E3C7C9ECCF7148E10CC7F {DEV_PARPORT_DEVICES_ACTIVE = 0xFFFFFFFD,};
struct _2E56E956F88F593FE24676E86AAE3518 {unsigned __int16 count_values;char **supported_values;};
enum _2E755D67EE6C702F48633EB251DEB1D2 {TCF_META_ID_VALUE = 0x0,TCF_META_ID_RANDOM = 0x1,TCF_META_ID_LOADAVG_0 = 0x2,TCF_META_ID_LOADAVG_1 = 0x3,TCF_META_ID_LOADAVG_2 = 0x4,TCF_META_ID_DEV = 0x5,TCF_META_ID_PRIORITY = 0x6,TCF_META_ID_PROTOCOL = 0x7,TCF_META_ID_PKTTYPE = 0x8,TCF_META_ID_PKTLEN = 0x9,TCF_META_ID_DATALEN = 0xA,TCF_META_ID_MACLEN = 0xB,TCF_META_ID_NFMARK = 0xC,TCF_META_ID_TCINDEX = 0xD,TCF_META_ID_RTCLASSID = 0xE,TCF_META_ID_RTIIF = 0xF,TCF_META_ID_SK_FAMILY = 0x10,TCF_META_ID_SK_STATE = 0x11,TCF_META_ID_SK_REUSE = 0x12,TCF_META_ID_SK_BOUND_IF = 0x13,TCF_META_ID_SK_REFCNT = 0x14,TCF_META_ID_SK_SHUTDOWN = 0x15,TCF_META_ID_SK_PROTO = 0x16,TCF_META_ID_SK_TYPE = 0x17,TCF_META_ID_SK_RCVBUF = 0x18,TCF_META_ID_SK_RMEM_ALLOC = 0x19,TCF_META_ID_SK_WMEM_ALLOC = 0x1A,TCF_META_ID_SK_OMEM_ALLOC = 0x1B,TCF_META_ID_SK_WMEM_QUEUED = 0x1C,TCF_META_ID_SK_RCV_QLEN = 0x1D,TCF_META_ID_SK_SND_QLEN = 0x1E,TCF_META_ID_SK_ERR_QLEN = 0x1F,TCF_META_ID_SK_FORWARD_ALLOCS = 0x20,TCF_META_ID_SK_SNDBUF = 0x21,TCF_META_ID_SK_ALLOCS = 0x22,__TCF_META_ID_SK_ROUTE_CAPS = 0x23,TCF_META_ID_SK_HASH = 0x24,TCF_META_ID_SK_LINGERTIME = 0x25,TCF_META_ID_SK_ACK_BACKLOG = 0x26,TCF_META_ID_SK_MAX_ACK_BACKLOG = 0x27,TCF_META_ID_SK_PRIO = 0x28,TCF_META_ID_SK_RCVLOWAT = 0x29,TCF_META_ID_SK_RCVTIMEO = 0x2A,TCF_META_ID_SK_SNDTIMEO = 0x2B,TCF_META_ID_SK_SENDMSG_OFF = 0x2C,TCF_META_ID_SK_WRITE_PENDING = 0x2D,TCF_META_ID_VLAN_TAG = 0x2E,TCF_META_ID_RXHASH = 0x2F,__TCF_META_ID_MAX = 0x30,};
enum _2EA190A087F83F88A23D8B31FFFB0F26 {ABDAY_1 = 0x20000,ABDAY_2 = 0x20001,ABDAY_3 = 0x20002,ABDAY_4 = 0x20003,ABDAY_5 = 0x20004,ABDAY_6 = 0x20005,ABDAY_7 = 0x20006,DAY_1 = 0x20007,DAY_2 = 0x20008,DAY_3 = 0x20009,DAY_4 = 0x2000A,DAY_5 = 0x2000B,DAY_6 = 0x2000C,DAY_7 = 0x2000D,ABMON_1 = 0x2000E,ABMON_2 = 0x2000F,ABMON_3 = 0x20010,ABMON_4 = 0x20011,ABMON_5 = 0x20012,ABMON_6 = 0x20013,ABMON_7 = 0x20014,ABMON_8 = 0x20015,ABMON_9 = 0x20016,ABMON_10 = 0x20017,ABMON_11 = 0x20018,ABMON_12 = 0x20019,MON_1 = 0x2001A,MON_2 = 0x2001B,MON_3 = 0x2001C,MON_4 = 0x2001D,MON_5 = 0x2001E,MON_6 = 0x2001F,MON_7 = 0x20020,MON_8 = 0x20021,MON_9 = 0x20022,MON_10 = 0x20023,MON_11 = 0x20024,MON_12 = 0x20025,AM_STR = 0x20026,PM_STR = 0x20027,D_T_FMT = 0x20028,D_FMT = 0x20029,T_FMT = 0x2002A,T_FMT_AMPM = 0x2002B,ERA = 0x2002C,__ERA_YEAR = 0x2002D,ERA_D_FMT = 0x2002E,ALT_DIGITS = 0x2002F,ERA_D_T_FMT = 0x20030,ERA_T_FMT = 0x20031,_NL_TIME_ERA_NUM_ENTRIES = 0x20032,_NL_TIME_ERA_ENTRIES = 0x20033,_NL_WABDAY_1 = 0x20034,_NL_WABDAY_2 = 0x20035,_NL_WABDAY_3 = 0x20036,_NL_WABDAY_4 = 0x20037,_NL_WABDAY_5 = 0x20038,_NL_WABDAY_6 = 0x20039,_NL_WABDAY_7 = 0x2003A,_NL_WDAY_1 = 0x2003B,_NL_WDAY_2 = 0x2003C,_NL_WDAY_3 = 0x2003D,_NL_WDAY_4 = 0x2003E,_NL_WDAY_5 = 0x2003F,_NL_WDAY_6 = 0x20040,_NL_WDAY_7 = 0x20041,_NL_WABMON_1 = 0x20042,_NL_WABMON_2 = 0x20043,_NL_WABMON_3 = 0x20044,_NL_WABMON_4 = 0x20045,_NL_WABMON_5 = 0x20046,_NL_WABMON_6 = 0x20047,_NL_WABMON_7 = 0x20048,_NL_WABMON_8 = 0x20049,_NL_WABMON_9 = 0x2004A,_NL_WABMON_10 = 0x2004B,_NL_WABMON_11 = 0x2004C,_NL_WABMON_12 = 0x2004D,_NL_WMON_1 = 0x2004E,_NL_WMON_2 = 0x2004F,_NL_WMON_3 = 0x20050,_NL_WMON_4 = 0x20051,_NL_WMON_5 = 0x20052,_NL_WMON_6 = 0x20053,_NL_WMON_7 = 0x20054,_NL_WMON_8 = 0x20055,_NL_WMON_9 = 0x20056,_NL_WMON_10 = 0x20057,_NL_WMON_11 = 0x20058,_NL_WMON_12 = 0x20059,_NL_WAM_STR = 0x2005A,_NL_WPM_STR = 0x2005B,_NL_WD_T_FMT = 0x2005C,_NL_WD_FMT = 0x2005D,_NL_WT_FMT = 0x2005E,_NL_WT_FMT_AMPM = 0x2005F,_NL_WERA_YEAR = 0x20060,_NL_WERA_D_FMT = 0x20061,_NL_WALT_DIGITS = 0x20062,_NL_WERA_D_T_FMT = 0x20063,_NL_WERA_T_FMT = 0x20064,_NL_TIME_WEEK_NDAYS = 0x20065,_NL_TIME_WEEK_1STDAY = 0x20066,_NL_TIME_WEEK_1STWEEK = 0x20067,_NL_TIME_FIRST_WEEKDAY = 0x20068,_NL_TIME_FIRST_WORKDAY = 0x20069,_NL_TIME_CAL_DIRECTION = 0x2006A,_NL_TIME_TIMEZONE = 0x2006B,_DATE_FMT = 0x2006C,_NL_W_DATE_FMT = 0x2006D,_NL_TIME_CODESET = 0x2006E,_NL_NUM_LC_TIME = 0x2006F,_NL_COLLATE_NRULES = 0x30000,_NL_COLLATE_RULESETS = 0x30001,_NL_COLLATE_TABLEMB = 0x30002,_NL_COLLATE_WEIGHTMB = 0x30003,_NL_COLLATE_EXTRAMB = 0x30004,_NL_COLLATE_INDIRECTMB = 0x30005,_NL_COLLATE_GAP1 = 0x30006,_NL_COLLATE_GAP2 = 0x30007,_NL_COLLATE_GAP3 = 0x30008,_NL_COLLATE_TABLEWC = 0x30009,_NL_COLLATE_WEIGHTWC = 0x3000A,_NL_COLLATE_EXTRAWC = 0x3000B,_NL_COLLATE_INDIRECTWC = 0x3000C,_NL_COLLATE_SYMB_HASH_SIZEMB = 0x3000D,_NL_COLLATE_SYMB_TABLEMB = 0x3000E,_NL_COLLATE_SYMB_EXTRAMB = 0x3000F,_NL_COLLATE_COLLSEQMB = 0x30010,_NL_COLLATE_COLLSEQWC = 0x30011,_NL_COLLATE_CODESET = 0x30012,_NL_NUM_LC_COLLATE = 0x30013,_NL_CTYPE_CLASS = 0x0,_NL_CTYPE_TOUPPER = 0x1,_NL_CTYPE_GAP1 = 0x2,_NL_CTYPE_TOLOWER = 0x3,_NL_CTYPE_GAP2 = 0x4,_NL_CTYPE_CLASS32 = 0x5,_NL_CTYPE_GAP3 = 0x6,_NL_CTYPE_GAP4 = 0x7,_NL_CTYPE_GAP5 = 0x8,_NL_CTYPE_GAP6 = 0x9,_NL_CTYPE_CLASS_NAMES = 0xA,_NL_CTYPE_MAP_NAMES = 0xB,_NL_CTYPE_WIDTH = 0xC,_NL_CTYPE_MB_CUR_MAX = 0xD,_NL_CTYPE_CODESET_NAME = 0xE,CODESET = 0xE,_NL_CTYPE_TOUPPER32 = 0xF,_NL_CTYPE_TOLOWER32 = 0x10,_NL_CTYPE_CLASS_OFFSET = 0x11,_NL_CTYPE_MAP_OFFSET = 0x12,_NL_CTYPE_INDIGITS_MB_LEN = 0x13,_NL_CTYPE_INDIGITS0_MB = 0x14,_NL_CTYPE_INDIGITS1_MB = 0x15,_NL_CTYPE_INDIGITS2_MB = 0x16,_NL_CTYPE_INDIGITS3_MB = 0x17,_NL_CTYPE_INDIGITS4_MB = 0x18,_NL_CTYPE_INDIGITS5_MB = 0x19,_NL_CTYPE_INDIGITS6_MB = 0x1A,_NL_CTYPE_INDIGITS7_MB = 0x1B,_NL_CTYPE_INDIGITS8_MB = 0x1C,_NL_CTYPE_INDIGITS9_MB = 0x1D,_NL_CTYPE_INDIGITS_WC_LEN = 0x1E,_NL_CTYPE_INDIGITS0_WC = 0x1F,_NL_CTYPE_INDIGITS1_WC = 0x20,_NL_CTYPE_INDIGITS2_WC = 0x21,_NL_CTYPE_INDIGITS3_WC = 0x22,_NL_CTYPE_INDIGITS4_WC = 0x23,_NL_CTYPE_INDIGITS5_WC = 0x24,_NL_CTYPE_INDIGITS6_WC = 0x25,_NL_CTYPE_INDIGITS7_WC = 0x26,_NL_CTYPE_INDIGITS8_WC = 0x27,_NL_CTYPE_INDIGITS9_WC = 0x28,_NL_CTYPE_OUTDIGIT0_MB = 0x29,_NL_CTYPE_OUTDIGIT1_MB = 0x2A,_NL_CTYPE_OUTDIGIT2_MB = 0x2B,_NL_CTYPE_OUTDIGIT3_MB = 0x2C,_NL_CTYPE_OUTDIGIT4_MB = 0x2D,_NL_CTYPE_OUTDIGIT5_MB = 0x2E,_NL_CTYPE_OUTDIGIT6_MB = 0x2F,_NL_CTYPE_OUTDIGIT7_MB = 0x30,_NL_CTYPE_OUTDIGIT8_MB = 0x31,_NL_CTYPE_OUTDIGIT9_MB = 0x32,_NL_CTYPE_OUTDIGIT0_WC = 0x33,_NL_CTYPE_OUTDIGIT1_WC = 0x34,_NL_CTYPE_OUTDIGIT2_WC = 0x35,_NL_CTYPE_OUTDIGIT3_WC = 0x36,_NL_CTYPE_OUTDIGIT4_WC = 0x37,_NL_CTYPE_OUTDIGIT5_WC = 0x38,_NL_CTYPE_OUTDIGIT6_WC = 0x39,_NL_CTYPE_OUTDIGIT7_WC = 0x3A,_NL_CTYPE_OUTDIGIT8_WC = 0x3B,_NL_CTYPE_OUTDIGIT9_WC = 0x3C,_NL_CTYPE_TRANSLIT_TAB_SIZE = 0x3D,_NL_CTYPE_TRANSLIT_FROM_IDX = 0x3E,_NL_CTYPE_TRANSLIT_FROM_TBL = 0x3F,_NL_CTYPE_TRANSLIT_TO_IDX = 0x40,_NL_CTYPE_TRANSLIT_TO_TBL = 0x41,_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN = 0x42,_NL_CTYPE_TRANSLIT_DEFAULT_MISSING = 0x43,_NL_CTYPE_TRANSLIT_IGNORE_LEN = 0x44,_NL_CTYPE_TRANSLIT_IGNORE = 0x45,_NL_CTYPE_MAP_TO_NONASCII = 0x46,_NL_CTYPE_NONASCII_CASE = 0x47,_NL_CTYPE_EXTRA_MAP_1 = 0x48,_NL_CTYPE_EXTRA_MAP_2 = 0x49,_NL_CTYPE_EXTRA_MAP_3 = 0x4A,_NL_CTYPE_EXTRA_MAP_4 = 0x4B,_NL_CTYPE_EXTRA_MAP_5 = 0x4C,_NL_CTYPE_EXTRA_MAP_6 = 0x4D,_NL_CTYPE_EXTRA_MAP_7 = 0x4E,_NL_CTYPE_EXTRA_MAP_8 = 0x4F,_NL_CTYPE_EXTRA_MAP_9 = 0x50,_NL_CTYPE_EXTRA_MAP_10 = 0x51,_NL_CTYPE_EXTRA_MAP_11 = 0x52,_NL_CTYPE_EXTRA_MAP_12 = 0x53,_NL_CTYPE_EXTRA_MAP_13 = 0x54,_NL_CTYPE_EXTRA_MAP_14 = 0x55,_NL_NUM_LC_CTYPE = 0x56,__INT_CURR_SYMBOL = 0x40000,__CURRENCY_SYMBOL = 0x40001,__MON_DECIMAL_POINT = 0x40002,__MON_THOUSANDS_SEP = 0x40003,__MON_GROUPING = 0x40004,__POSITIVE_SIGN = 0x40005,__NEGATIVE_SIGN = 0x40006,__INT_FRAC_DIGITS = 0x40007,__FRAC_DIGITS = 0x40008,__P_CS_PRECEDES = 0x40009,__P_SEP_BY_SPACE = 0x4000A,__N_CS_PRECEDES = 0x4000B,__N_SEP_BY_SPACE = 0x4000C,__P_SIGN_POSN = 0x4000D,__N_SIGN_POSN = 0x4000E,_NL_MONETARY_CRNCYSTR = 0x4000F,__INT_P_CS_PRECEDES = 0x40010,__INT_P_SEP_BY_SPACE = 0x40011,__INT_N_CS_PRECEDES = 0x40012,__INT_N_SEP_BY_SPACE = 0x40013,__INT_P_SIGN_POSN = 0x40014,__INT_N_SIGN_POSN = 0x40015,_NL_MONETARY_DUO_INT_CURR_SYMBOL = 0x40016,_NL_MONETARY_DUO_CURRENCY_SYMBOL = 0x40017,_NL_MONETARY_DUO_INT_FRAC_DIGITS = 0x40018,_NL_MONETARY_DUO_FRAC_DIGITS = 0x40019,_NL_MONETARY_DUO_P_CS_PRECEDES = 0x4001A,_NL_MONETARY_DUO_P_SEP_BY_SPACE = 0x4001B,_NL_MONETARY_DUO_N_CS_PRECEDES = 0x4001C,_NL_MONETARY_DUO_N_SEP_BY_SPACE = 0x4001D,_NL_MONETARY_DUO_INT_P_CS_PRECEDES = 0x4001E,_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE = 0x4001F,_NL_MONETARY_DUO_INT_N_CS_PRECEDES = 0x40020,_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE = 0x40021,_NL_MONETARY_DUO_P_SIGN_POSN = 0x40022,_NL_MONETARY_DUO_N_SIGN_POSN = 0x40023,_NL_MONETARY_DUO_INT_P_SIGN_POSN = 0x40024,_NL_MONETARY_DUO_INT_N_SIGN_POSN = 0x40025,_NL_MONETARY_UNO_VALID_FROM = 0x40026,_NL_MONETARY_UNO_VALID_TO = 0x40027,_NL_MONETARY_DUO_VALID_FROM = 0x40028,_NL_MONETARY_DUO_VALID_TO = 0x40029,_NL_MONETARY_CONVERSION_RATE = 0x4002A,_NL_MONETARY_DECIMAL_POINT_WC = 0x4002B,_NL_MONETARY_THOUSANDS_SEP_WC = 0x4002C,_NL_MONETARY_CODESET = 0x4002D,_NL_NUM_LC_MONETARY = 0x4002E,__DECIMAL_POINT = 0x10000,RADIXCHAR = 0x10000,__THOUSANDS_SEP = 0x10001,THOUSEP = 0x10001,__GROUPING = 0x10002,_NL_NUMERIC_DECIMAL_POINT_WC = 0x10003,_NL_NUMERIC_THOUSANDS_SEP_WC = 0x10004,_NL_NUMERIC_CODESET = 0x10005,_NL_NUM_LC_NUMERIC = 0x10006,__YESEXPR = 0x50000,__NOEXPR = 0x50001,__YESSTR = 0x50002,__NOSTR = 0x50003,_NL_MESSAGES_CODESET = 0x50004,_NL_NUM_LC_MESSAGES = 0x50005,_NL_PAPER_HEIGHT = 0x70000,_NL_PAPER_WIDTH = 0x70001,_NL_PAPER_CODESET = 0x70002,_NL_NUM_LC_PAPER = 0x70003,_NL_NAME_NAME_FMT = 0x80000,_NL_NAME_NAME_GEN = 0x80001,_NL_NAME_NAME_MR = 0x80002,_NL_NAME_NAME_MRS = 0x80003,_NL_NAME_NAME_MISS = 0x80004,_NL_NAME_NAME_MS = 0x80005,_NL_NAME_CODESET = 0x80006,_NL_NUM_LC_NAME = 0x80007,_NL_ADDRESS_POSTAL_FMT = 0x90000,_NL_ADDRESS_COUNTRY_NAME = 0x90001,_NL_ADDRESS_COUNTRY_POST = 0x90002,_NL_ADDRESS_COUNTRY_AB2 = 0x90003,_NL_ADDRESS_COUNTRY_AB3 = 0x90004,_NL_ADDRESS_COUNTRY_CAR = 0x90005,_NL_ADDRESS_COUNTRY_NUM = 0x90006,_NL_ADDRESS_COUNTRY_ISBN = 0x90007,_NL_ADDRESS_LANG_NAME = 0x90008,_NL_ADDRESS_LANG_AB = 0x90009,_NL_ADDRESS_LANG_TERM = 0x9000A,_NL_ADDRESS_LANG_LIB = 0x9000B,_NL_ADDRESS_CODESET = 0x9000C,_NL_NUM_LC_ADDRESS = 0x9000D,_NL_TELEPHONE_TEL_INT_FMT = 0xA0000,_NL_TELEPHONE_TEL_DOM_FMT = 0xA0001,_NL_TELEPHONE_INT_SELECT = 0xA0002,_NL_TELEPHONE_INT_PREFIX = 0xA0003,_NL_TELEPHONE_CODESET = 0xA0004,_NL_NUM_LC_TELEPHONE = 0xA0005,_NL_MEASUREMENT_MEASUREMENT = 0xB0000,_NL_MEASUREMENT_CODESET = 0xB0001,_NL_NUM_LC_MEASUREMENT = 0xB0002,_NL_IDENTIFICATION_TITLE = 0xC0000,_NL_IDENTIFICATION_SOURCE = 0xC0001,_NL_IDENTIFICATION_ADDRESS = 0xC0002,_NL_IDENTIFICATION_CONTACT = 0xC0003,_NL_IDENTIFICATION_EMAIL = 0xC0004,_NL_IDENTIFICATION_TEL = 0xC0005,_NL_IDENTIFICATION_FAX = 0xC0006,_NL_IDENTIFICATION_LANGUAGE = 0xC0007,_NL_IDENTIFICATION_TERRITORY = 0xC0008,_NL_IDENTIFICATION_AUDIENCE = 0xC0009,_NL_IDENTIFICATION_APPLICATION = 0xC000A,_NL_IDENTIFICATION_ABBREVIATION = 0xC000B,_NL_IDENTIFICATION_REVISION = 0xC000C,_NL_IDENTIFICATION_DATE = 0xC000D,_NL_IDENTIFICATION_CATEGORY = 0xC000E,_NL_IDENTIFICATION_CODESET = 0xC000F,_NL_NUM_LC_IDENTIFICATION = 0xC0010,_NL_NUM = 0xC0011,};
struct _2EA2B750C06C2344CAE427A9270EC33C {char ax25_call[7];};
enum _2EE835F9C2C82440EE6BCA05ADBD4F5A {TCA_PEDIT_UNSPEC = 0x0,TCA_PEDIT_TM = 0x1,TCA_PEDIT_PARMS = 0x2,__TCA_PEDIT_MAX = 0x3,};
enum _305CDDDAEEC493A28738F4775132886D {XFRM_POLICY_IN = 0x0,XFRM_POLICY_OUT = 0x1,XFRM_POLICY_FWD = 0x2,XFRM_POLICY_MASK = 0x3,XFRM_POLICY_MAX = 0x3,};
enum _30F5EF8C77ABFCDD790FF9EBF9305B9A {TCA_TCINDEX_UNSPEC = 0x0,TCA_TCINDEX_HASH = 0x1,TCA_TCINDEX_MASK = 0x2,TCA_TCINDEX_SHIFT = 0x3,TCA_TCINDEX_FALL_THROUGH = 0x4,TCA_TCINDEX_CLASSID = 0x5,TCA_TCINDEX_POLICE = 0x6,TCA_TCINDEX_ACT = 0x7,__TCA_TCINDEX_MAX = 0x8,};
enum _3167F93E33C5EBD9DFF0553630CBED55 {NET_SCTP_RTO_INITIAL = 0x1,NET_SCTP_RTO_MIN = 0x2,NET_SCTP_RTO_MAX = 0x3,NET_SCTP_RTO_ALPHA = 0x4,NET_SCTP_RTO_BETA = 0x5,NET_SCTP_VALID_COOKIE_LIFE = 0x6,NET_SCTP_ASSOCIATION_MAX_RETRANS = 0x7,NET_SCTP_PATH_MAX_RETRANS = 0x8,NET_SCTP_MAX_INIT_RETRANSMITS = 0x9,NET_SCTP_HB_INTERVAL = 0xA,NET_SCTP_PRESERVE_ENABLE = 0xB,NET_SCTP_MAX_BURST = 0xC,NET_SCTP_ADDIP_ENABLE = 0xD,NET_SCTP_PRSCTP_ENABLE = 0xE,NET_SCTP_SNDBUF_POLICY = 0xF,NET_SCTP_SACK_TIMEOUT = 0x10,NET_SCTP_RCVBUF_POLICY = 0x11,};
struct _33436B6E470EAB040EE5564712CFCD29 {int index;int tone_on_time;int tone_off_time;int freq0;int gain0;int freq1;int gain1;};
struct _335EDB02744B103283B800FF919FC940 {__int16 x1;__int16 y1;__int16 x2;__int16 y2;};
enum _3384108E2BE2F8425FA58009419B3AEA {XT_ADDRTYPE_INVERT_SOURCE = 0x1,XT_ADDRTYPE_INVERT_DEST = 0x2,XT_ADDRTYPE_LIMIT_IFACE_IN = 0x4,XT_ADDRTYPE_LIMIT_IFACE_OUT = 0x8,};
struct _338A332AC07B59A36792FEE160C5A511 {int typelength;int valuelength;char *type;char *value;};
enum _34F88896D34DF08B0014D0487AAD5030 {XATTR_CREATE = 0x1,XATTR_REPLACE = 0x2,};
enum _351BFC9CE70FBBF085FC1E8A5BC3C0BF {WIMAX_GNL_MSG_IFIDX = 0x1,WIMAX_GNL_MSG_PIPE_NAME = 0x2,WIMAX_GNL_MSG_DATA = 0x3,};
enum _35C2BB5B8715FE861B71A8FC00E0183B {TCF_EM_PROG_TC = 0x0,};
enum _3623400454167506CFF0A6AAE1296B80 {CTL_RPCDEBUG = 0x1,CTL_NFSDEBUG = 0x2,CTL_NFSDDEBUG = 0x3,CTL_NLMDEBUG = 0x4,CTL_SLOTTABLE_UDP = 0x5,CTL_SLOTTABLE_TCP = 0x6,CTL_MIN_RESVPORT = 0x7,CTL_MAX_RESVPORT = 0x8,};
enum _36516121C31FF63F914ECB5F81C2F898 {SCTP_AUTH_NEWKEY = 0x0,};
enum _36CF386C547A8352C77C0009585A778A {RTLD_DI_LMID = 0x1,RTLD_DI_LINKMAP = 0x2,RTLD_DI_CONFIGADDR = 0x3,RTLD_DI_SERINFO = 0x4,RTLD_DI_SERINFOSIZE = 0x5,RTLD_DI_ORIGIN = 0x6,RTLD_DI_PROFILENAME = 0x7,RTLD_DI_PROFILEOUT = 0x8,RTLD_DI_TLS_MODID = 0x9,RTLD_DI_TLS_DATA = 0xA,RTLD_DI_MAX = 0xA,};
enum _36FD067A6ED7F43CD04FE379564F43C3 {IB_USER_VERBS_CMD_GET_CONTEXT = 0x0,IB_USER_VERBS_CMD_QUERY_DEVICE = 0x1,IB_USER_VERBS_CMD_QUERY_PORT = 0x2,IB_USER_VERBS_CMD_ALLOC_PD = 0x3,IB_USER_VERBS_CMD_DEALLOC_PD = 0x4,IB_USER_VERBS_CMD_CREATE_AH = 0x5,IB_USER_VERBS_CMD_MODIFY_AH = 0x6,IB_USER_VERBS_CMD_QUERY_AH = 0x7,IB_USER_VERBS_CMD_DESTROY_AH = 0x8,IB_USER_VERBS_CMD_REG_MR = 0x9,IB_USER_VERBS_CMD_REG_SMR = 0xA,IB_USER_VERBS_CMD_REREG_MR = 0xB,IB_USER_VERBS_CMD_QUERY_MR = 0xC,IB_USER_VERBS_CMD_DEREG_MR = 0xD,IB_USER_VERBS_CMD_ALLOC_MW = 0xE,IB_USER_VERBS_CMD_BIND_MW = 0xF,IB_USER_VERBS_CMD_DEALLOC_MW = 0x10,IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL = 0x11,IB_USER_VERBS_CMD_CREATE_CQ = 0x12,IB_USER_VERBS_CMD_RESIZE_CQ = 0x13,IB_USER_VERBS_CMD_DESTROY_CQ = 0x14,IB_USER_VERBS_CMD_POLL_CQ = 0x15,IB_USER_VERBS_CMD_PEEK_CQ = 0x16,IB_USER_VERBS_CMD_REQ_NOTIFY_CQ = 0x17,IB_USER_VERBS_CMD_CREATE_QP = 0x18,IB_USER_VERBS_CMD_QUERY_QP = 0x19,IB_USER_VERBS_CMD_MODIFY_QP = 0x1A,IB_USER_VERBS_CMD_DESTROY_QP = 0x1B,IB_USER_VERBS_CMD_POST_SEND = 0x1C,IB_USER_VERBS_CMD_POST_RECV = 0x1D,IB_USER_VERBS_CMD_ATTACH_MCAST = 0x1E,IB_USER_VERBS_CMD_DETACH_MCAST = 0x1F,IB_USER_VERBS_CMD_CREATE_SRQ = 0x20,IB_USER_VERBS_CMD_MODIFY_SRQ = 0x21,IB_USER_VERBS_CMD_QUERY_SRQ = 0x22,IB_USER_VERBS_CMD_DESTROY_SRQ = 0x23,IB_USER_VERBS_CMD_POST_SRQ_RECV = 0x24,IB_USER_VERBS_CMD_OPEN_XRCD = 0x25,IB_USER_VERBS_CMD_CLOSE_XRCD = 0x26,IB_USER_VERBS_CMD_CREATE_XSRQ = 0x27,IB_USER_VERBS_CMD_OPEN_QP = 0x28,};
enum _37DCB93EF8D95414A7671406898CD704 {NET_NF_CONNTRACK_MAX = 0x1,NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT = 0x2,NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV = 0x3,NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED = 0x4,NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT = 0x5,NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT = 0x6,NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK = 0x7,NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT = 0x8,NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE = 0x9,NET_NF_CONNTRACK_UDP_TIMEOUT = 0xA,NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM = 0xB,NET_NF_CONNTRACK_ICMP_TIMEOUT = 0xC,NET_NF_CONNTRACK_GENERIC_TIMEOUT = 0xD,NET_NF_CONNTRACK_BUCKETS = 0xE,NET_NF_CONNTRACK_LOG_INVALID = 0xF,NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS = 0x10,NET_NF_CONNTRACK_TCP_LOOSE = 0x11,NET_NF_CONNTRACK_TCP_BE_LIBERAL = 0x12,NET_NF_CONNTRACK_TCP_MAX_RETRANS = 0x13,NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED = 0x14,NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT = 0x15,NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED = 0x16,NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED = 0x17,NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT = 0x18,NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD = 0x19,NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT = 0x1A,NET_NF_CONNTRACK_COUNT = 0x1B,NET_NF_CONNTRACK_ICMPV6_TIMEOUT = 0x1C,NET_NF_CONNTRACK_FRAG6_TIMEOUT = 0x1D,NET_NF_CONNTRACK_FRAG6_LOW_THRESH = 0x1E,NET_NF_CONNTRACK_FRAG6_HIGH_THRESH = 0x1F,NET_NF_CONNTRACK_CHECKSUM = 0x20,};
enum _387260238D821795496CF8EA8057DA7E {LIO_READ = 0x0,LIO_WRITE = 0x1,LIO_NOP = 0x2,};
enum _38ABBF04E8C64EAD46767C993E61F2A9 {NET_NETROM_DEFAULT_PATH_QUALITY = 0x1,NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER = 0x2,NET_NETROM_NETWORK_TTL_INITIALISER = 0x3,NET_NETROM_TRANSPORT_TIMEOUT = 0x4,NET_NETROM_TRANSPORT_MAXIMUM_TRIES = 0x5,NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY = 0x6,NET_NETROM_TRANSPORT_BUSY_DELAY = 0x7,NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE = 0x8,NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT = 0x9,NET_NETROM_ROUTING_CONTROL = 0xA,NET_NETROM_LINK_FAILS_COUNT = 0xB,NET_NETROM_RESET = 0xC,};
enum _3934C4D772B3B73AE8EF2DB05F0193D8 {TEAM_ATTR_PORT_UNSPEC = 0x0,TEAM_ATTR_PORT_IFINDEX = 0x1,TEAM_ATTR_PORT_CHANGED = 0x2,TEAM_ATTR_PORT_LINKUP = 0x3,TEAM_ATTR_PORT_SPEED = 0x4,TEAM_ATTR_PORT_DUPLEX = 0x5,TEAM_ATTR_PORT_REMOVED = 0x6,__TEAM_ATTR_PORT_MAX = 0x7,TEAM_ATTR_PORT_MAX = 0x6,};
enum _3962645893864ECB7E687B35573D0DB9 {TCA_ID_UNSPEC = 0x0,TCA_ID_POLICE = 0x1,__TCA_ID_MAX = 0xFF,};
enum _3A98BCCE472307FD669B2C51AD6F59A5 {CGW_CRC8PRF_UNSPEC = 0x0,CGW_CRC8PRF_1U8 = 0x1,CGW_CRC8PRF_16U8 = 0x2,CGW_CRC8PRF_SFFID_XOR = 0x3,__CGW_CRC8PRF_MAX = 0x4,};
struct _3ACF1F82BEC6DEE83FE33E625399BBD7 {__int16 x;__int16 y;unsigned __int16 width;unsigned __int16 height;__int16 angle1;__int16 angle2;};
enum _3B7761C45D18070F3186E4DCA313CCB2 {BRIDGE_MODE_UNSPEC = 0x0,BRIDGE_MODE_HAIRPIN = 0x1,};
enum _3C337C70E0B127F66DEE8FC07E8C6106 {f300_640 = 0x4,f300_500 = 0x5,f1100 = 0x6,f350 = 0x7,f400 = 0x8,f480 = 0x9,f440 = 0xA,f620 = 0xB,f20_50 = 0xC,f133_200 = 0xD,f300 = 0xE,f300_420 = 0xF,f330 = 0x10,f300_425 = 0x11,f330_440 = 0x12,f340 = 0x13,f350_400 = 0x14,f350_440 = 0x15,f350_450 = 0x16,f360 = 0x17,f380_420 = 0x18,f392 = 0x19,f400_425 = 0x1A,f400_440 = 0x1B,f400_450 = 0x1C,f420 = 0x1D,f425 = 0x1E,f425_450 = 0x1F,f425_475 = 0x20,f435 = 0x21,f440_450 = 0x22,f440_480 = 0x23,f445 = 0x24,f450 = 0x25,f452 = 0x26,f475 = 0x27,f480_620 = 0x28,f494 = 0x29,f500 = 0x2A,f520 = 0x2B,f523 = 0x2C,f525 = 0x2D,f540_660 = 0x2E,f587 = 0x2F,f590 = 0x30,f600 = 0x31,f660 = 0x32,f700 = 0x33,f740 = 0x34,f750 = 0x35,f750_1450 = 0x36,f770 = 0x37,f800 = 0x38,f816 = 0x39,f850 = 0x3A,f857_1645 = 0x3B,f900 = 0x3C,f900_1300 = 0x3D,f935_1215 = 0x3E,f941_1477 = 0x3F,f942 = 0x40,f950 = 0x41,f950_1400 = 0x42,f975 = 0x43,f1000 = 0x44,f1020 = 0x45,f1050 = 0x46,f1100_1750 = 0x47,f1140 = 0x48,f1200 = 0x49,f1209 = 0x4A,f1330 = 0x4B,f1336 = 0x4C,lf1366 = 0x4D,f1380 = 0x4E,f1400 = 0x4F,f1477 = 0x50,f1600 = 0x51,f1633_1638 = 0x52,f1800 = 0x53,f1860 = 0x54,};
enum _3EACBFB1F6A69D9CA6E99CE3BA7C8589 {res_goahead = 0x0,res_nextns = 0x1,res_modified = 0x2,res_done = 0x3,res_error = 0x4,};
enum _3EAF1E9ABB5D5748C84980BBB012D8F8 {XT_AUDIT_TYPE_ACCEPT = 0x0,XT_AUDIT_TYPE_DROP = 0x1,XT_AUDIT_TYPE_REJECT = 0x2,__XT_AUDIT_TYPE_MAX = 0x3,};
enum _3FD2ABB4F8F116DC637215F4EF514DA7 {TCA_BASIC_UNSPEC = 0x0,TCA_BASIC_CLASSID = 0x1,TCA_BASIC_EMATCHES = 0x2,TCA_BASIC_ACT = 0x3,TCA_BASIC_POLICE = 0x4,__TCA_BASIC_MAX = 0x5,};
enum _405C8636DEE5D8D2C9F0466394C3E3EA {XrmoptionNoArg = 0x0,XrmoptionIsArg = 0x1,XrmoptionStickyArg = 0x2,XrmoptionSepArg = 0x3,XrmoptionResArg = 0x4,XrmoptionSkipArg = 0x5,XrmoptionSkipLine = 0x6,XrmoptionSkipNArgs = 0x7,};
enum _40FF39B6B81708B79E70F17E4B33909F {CAN_RAW_FILTER = 0x1,CAN_RAW_ERR_FILTER = 0x2,CAN_RAW_LOOPBACK = 0x3,CAN_RAW_RECV_OWN_MSGS = 0x4,CAN_RAW_FD_FRAMES = 0x5,};
enum _43CF806E68D40D7F564351BCA246359A {SCTP_PARTIAL_DELIVERY_ABORTED = 0x0,};
enum _43E6A2D28608ACF8AF97B34CE421F72B {CTRL_ATTR_OP_UNSPEC = 0x0,CTRL_ATTR_OP_ID = 0x1,CTRL_ATTR_OP_FLAGS = 0x2,__CTRL_ATTR_OP_MAX = 0x3,};
enum _440C7AAA067605C9B889C15D3B45F8D0 {RDMA_NL_RDMA_CM_ID_STATS = 0x0,RDMA_NL_RDMA_CM_NUM_OPS = 0x1,};
enum _4495C0A634E380314992BEF5C5E51096 {__GCONV_OK = 0x0,__GCONV_NOCONV = 0x1,__GCONV_NODB = 0x2,__GCONV_NOMEM = 0x3,__GCONV_EMPTY_INPUT = 0x4,__GCONV_FULL_OUTPUT = 0x5,__GCONV_ILLEGAL_INPUT = 0x6,__GCONV_INCOMPLETE_INPUT = 0x7,__GCONV_ILLEGAL_DESCRIPTOR = 0x8,__GCONV_INTERNAL_ERROR = 0x9,};
enum _44B46E597998AE412FE6C3AD18848DD7 {VIDEO_FORMAT_4_3 = 0x0,VIDEO_FORMAT_16_9 = 0x1,VIDEO_FORMAT_221_1 = 0x2,};
enum _44BFF7169EC50384293DECAAB185FCCA {PTHREAD_MUTEX_TIMED_NP = 0x0,PTHREAD_MUTEX_RECURSIVE_NP = 0x1,PTHREAD_MUTEX_ERRORCHECK_NP = 0x2,PTHREAD_MUTEX_ADAPTIVE_NP = 0x3,PTHREAD_MUTEX_NORMAL = 0x0,PTHREAD_MUTEX_RECURSIVE = 0x1,PTHREAD_MUTEX_ERRORCHECK = 0x2,PTHREAD_MUTEX_DEFAULT = 0x0,PTHREAD_MUTEX_FAST_NP = 0x0,};
struct _44E50AEC2878F8A6376C06FA64195504 {__int16 x1;__int16 x2;__int16 y1;__int16 y2;};
enum _44FA7A5863E63754DBE4E0D4D1F00E4A {LINUX_MIB_XFRMNUM = 0x0,LINUX_MIB_XFRMINERROR = 0x1,LINUX_MIB_XFRMINBUFFERERROR = 0x2,LINUX_MIB_XFRMINHDRERROR = 0x3,LINUX_MIB_XFRMINNOSTATES = 0x4,LINUX_MIB_XFRMINSTATEPROTOERROR = 0x5,LINUX_MIB_XFRMINSTATEMODEERROR = 0x6,LINUX_MIB_XFRMINSTATESEQERROR = 0x7,LINUX_MIB_XFRMINSTATEEXPIRED = 0x8,LINUX_MIB_XFRMINSTATEMISMATCH = 0x9,LINUX_MIB_XFRMINSTATEINVALID = 0xA,LINUX_MIB_XFRMINTMPLMISMATCH = 0xB,LINUX_MIB_XFRMINNOPOLS = 0xC,LINUX_MIB_XFRMINPOLBLOCK = 0xD,LINUX_MIB_XFRMINPOLERROR = 0xE,LINUX_MIB_XFRMOUTERROR = 0xF,LINUX_MIB_XFRMOUTBUNDLEGENERROR = 0x10,LINUX_MIB_XFRMOUTBUNDLECHECKERROR = 0x11,LINUX_MIB_XFRMOUTNOSTATES = 0x12,LINUX_MIB_XFRMOUTSTATEPROTOERROR = 0x13,LINUX_MIB_XFRMOUTSTATEMODEERROR = 0x14,LINUX_MIB_XFRMOUTSTATESEQERROR = 0x15,LINUX_MIB_XFRMOUTSTATEEXPIRED = 0x16,LINUX_MIB_XFRMOUTPOLBLOCK = 0x17,LINUX_MIB_XFRMOUTPOLDEAD = 0x18,LINUX_MIB_XFRMOUTPOLERROR = 0x19,LINUX_MIB_XFRMFWDHDRERROR = 0x1A,LINUX_MIB_XFRMOUTSTATEINVALID = 0x1B,LINUX_MIB_XFRMACQUIREERROR = 0x1C,__LINUX_MIB_XFRMMAX = 0x1D,};
struct _450D4081AC7D58DC5B6C23FB01500D9F {char enable;char en_filter;unsigned int filter;unsigned int on1;unsigned int off1;unsigned int on2;unsigned int off2;unsigned int on3;unsigned int off3;};
enum _45D16FDC6AD6DCC3A64485997E70F213 {IPVS_DEST_ATTR_UNSPEC = 0x0,IPVS_DEST_ATTR_ADDR = 0x1,IPVS_DEST_ATTR_PORT = 0x2,IPVS_DEST_ATTR_FWD_METHOD = 0x3,IPVS_DEST_ATTR_WEIGHT = 0x4,IPVS_DEST_ATTR_U_THRESH = 0x5,IPVS_DEST_ATTR_L_THRESH = 0x6,IPVS_DEST_ATTR_ACTIVE_CONNS = 0x7,IPVS_DEST_ATTR_INACT_CONNS = 0x8,IPVS_DEST_ATTR_PERSIST_CONNS = 0x9,IPVS_DEST_ATTR_STATS = 0xA,__IPVS_DEST_ATTR_MAX = 0xB,};
enum _4642883F1D6E2FAB34995A0D51EC8797 {NETLINK_DIAG_MEMINFO = 0x0,NETLINK_DIAG_GROUPS = 0x1,NETLINK_DIAG_RX_RING = 0x2,NETLINK_DIAG_TX_RING = 0x3,__NETLINK_DIAG_MAX = 0x4,};
enum _465F1AE0E50A616C291DB194DC15F9F4 {IP6T_HL_EQ = 0x0,IP6T_HL_NE = 0x1,IP6T_HL_LT = 0x2,IP6T_HL_GT = 0x3,};
enum _475D1C857CA63124E480C577997D9964 {VIDEO_STOPPED = 0x0,VIDEO_PLAYING = 0x1,VIDEO_FREEZED = 0x2,};
struct _477257A9E00A927C5CA4C8DCAD23E65C {int type;int rate;int delay;int servnumlock;};
enum _47C98166D03373FBD2608241663E72B0 {TCA_NAT_UNSPEC = 0x0,TCA_NAT_PARMS = 0x1,TCA_NAT_TM = 0x2,__TCA_NAT_MAX = 0x3,};
enum _4873ED9D71E14D937DD4FDACF169E857 {C1 = 0x7D50,CS1 = 0x7CFA,D1 = 0x7C9F,DS1 = 0x7C32,E1 = 0x7BBF,F1 = 0x7B37,FS1 = 0x7AA8,G1 = 0x79FA,GS1 = 0x7941,A1 = 0x786D,AS1 = 0x7784,B1 = 0x7685,C2 = 0x7559,CS2 = 0x7411,D2 = 0x72A1,DS2 = 0x7106,E2 = 0x6F3B,F2 = 0x6D3D,FS2 = 0x6B09,G2 = 0x688B,GS2 = 0x65BF,A2 = 0x629F,AS2 = 0x5F35,};
enum _48C55AA5FF30DD635DDA31DC22790530 {LO_FLAGS_READ_ONLY = 0x1,LO_FLAGS_AUTOCLEAR = 0x4,LO_FLAGS_PARTSCAN = 0x8,};
enum _490F2577DEC59E12110338186C9DA426 {TCA_POLICE_UNSPEC = 0x0,TCA_POLICE_TBF = 0x1,TCA_POLICE_RATE = 0x2,TCA_POLICE_PEAKRATE = 0x3,TCA_POLICE_AVRATE = 0x4,TCA_POLICE_RESULT = 0x5,__TCA_POLICE_MAX = 0x6,};
enum _4A9FE37287845B08F0DBECB9B67C13F7 {IPSEC_DIR_ANY = 0x0,IPSEC_DIR_INBOUND = 0x1,IPSEC_DIR_OUTBOUND = 0x2,IPSEC_DIR_FWD = 0x3,IPSEC_DIR_MAX = 0x4,IPSEC_DIR_INVALID = 0x5,};
enum _4B3F5E11175BA8F946E6C5BC2A19C53F {ST_RDONLY = 0x1,ST_NOSUID = 0x2,ST_NODEV = 0x4,ST_NOEXEC = 0x8,ST_SYNCHRONOUS = 0x10,ST_MANDLOCK = 0x40,ST_WRITE = 0x80,ST_APPEND = 0x100,ST_IMMUTABLE = 0x200,ST_NOATIME = 0x400,ST_NODIRATIME = 0x800,ST_RELATIME = 0x1000,};
enum _4BAC799F52E32CD0F3E53C897EB09913 {DEV_PARPORT_DEVICE_TIMESLICE = 0x1,};
enum _4C3933534A29814DB9668DBF80EDBA09 {VFIO_PCI_BAR0_REGION_INDEX = 0x0,VFIO_PCI_BAR1_REGION_INDEX = 0x1,VFIO_PCI_BAR2_REGION_INDEX = 0x2,VFIO_PCI_BAR3_REGION_INDEX = 0x3,VFIO_PCI_BAR4_REGION_INDEX = 0x4,VFIO_PCI_BAR5_REGION_INDEX = 0x5,VFIO_PCI_ROM_REGION_INDEX = 0x6,VFIO_PCI_CONFIG_REGION_INDEX = 0x7,VFIO_PCI_VGA_REGION_INDEX = 0x8,VFIO_PCI_NUM_REGIONS = 0x9,};
enum _4C6A24A133130666C8717AA73A59D820 {NETLINK_UNCONNECTED = 0x0,NETLINK_CONNECTED = 0x1,};
enum _4CCF5BD0F314D9FB3C73290162533A92 {SS_ONSTACK = 0x1,SS_DISABLE = 0x2,};
struct _4D0B2EE74E9FAFCBF56BDC59F25A7FDB {unsigned int dlci;};
enum _4D73861F54930DCDD617F1E9EEA149B7 {TCA_SFB_UNSPEC = 0x0,TCA_SFB_PARMS = 0x1,__TCA_SFB_MAX = 0x2,};
enum _4DDA3DBF10B182AF3E85C052E6F45E2A {__ISwupper = 0x0,__ISwlower = 0x1,__ISwalpha = 0x2,__ISwdigit = 0x3,__ISwxdigit = 0x4,__ISwspace = 0x5,__ISwprint = 0x6,__ISwgraph = 0x7,__ISwblank = 0x8,__ISwcntrl = 0x9,__ISwpunct = 0xA,__ISwalnum = 0xB,_ISwupper = 0x1000000,_ISwlower = 0x2000000,_ISwalpha = 0x4000000,_ISwdigit = 0x8000000,_ISwxdigit = 0x10000000,_ISwspace = 0x20000000,_ISwprint = 0x40000000,_ISwgraph = 0x80000000,_ISwblank = 0x10000,_ISwcntrl = 0x20000,_ISwpunct = 0x40000,_ISwalnum = 0x80000,};
enum _4E4E980FD246AADC71627F2C28BE739B {REG_R8 = 0x0,REG_R9 = 0x1,REG_R10 = 0x2,REG_R11 = 0x3,REG_R12 = 0x4,REG_R13 = 0x5,REG_R14 = 0x6,REG_R15 = 0x7,REG_RDI = 0x8,REG_RSI = 0x9,REG_RBP = 0xA,REG_RBX = 0xB,REG_RDX = 0xC,REG_RAX = 0xD,REG_RCX = 0xE,REG_RSP = 0xF,REG_RIP = 0x10,REG_EFL = 0x11,REG_CSGSFS = 0x12,REG_ERR = 0x13,REG_TRAPNO = 0x14,REG_OLDMASK = 0x15,REG_CR2 = 0x16,};
enum _4E8858D30CCE92E14DA3F4BDDBD8423C {DEV_CDROM = 0x1,DEV_HWMON = 0x2,DEV_PARPORT = 0x3,DEV_RAID = 0x4,DEV_MAC_HID = 0x5,DEV_SCSI = 0x6,DEV_IPMI = 0x7,};
enum _4E8A6E2B6F1A3352FBE218C916A6864D {l_set_mac_addr = 0x0,l_del_mac_addr = 0x1,l_svc_setup = 0x2,l_addr_delete = 0x3,l_topology_change = 0x4,l_flush_complete = 0x5,l_arp_update = 0x6,l_narp_req = 0x7,l_config = 0x8,l_flush_tran_id = 0x9,l_set_lecid = 0xA,l_arp_xmt = 0xB,l_rdesc_arp_xmt = 0xC,l_associate_req = 0xD,l_should_bridge = 0xE,};
enum _4F09477E69E5747CBE9CCC3B872EB561 {IOCB_CMD_PREAD = 0x0,IOCB_CMD_PWRITE = 0x1,IOCB_CMD_FSYNC = 0x2,IOCB_CMD_FDSYNC = 0x3,IOCB_CMD_NOOP = 0x6,IOCB_CMD_PREADV = 0x7,IOCB_CMD_PWRITEV = 0x8,};
enum _4F2534ECD011C8155D7AFF8CBF6630B3 {AUDIO_STOPPED = 0x0,AUDIO_PLAYING = 0x1,AUDIO_PAUSED = 0x2,};
enum _4F31F57490F4B90598360B7E10A40781 {TCA_FLOW_UNSPEC = 0x0,TCA_FLOW_KEYS = 0x1,TCA_FLOW_MODE = 0x2,TCA_FLOW_BASECLASS = 0x3,TCA_FLOW_RSHIFT = 0x4,TCA_FLOW_ADDEND = 0x5,TCA_FLOW_MASK = 0x6,TCA_FLOW_XOR = 0x7,TCA_FLOW_DIVISOR = 0x8,TCA_FLOW_ACT = 0x9,TCA_FLOW_POLICE = 0xA,TCA_FLOW_EMATCHES = 0xB,TCA_FLOW_PERTURB = 0xC,__TCA_FLOW_MAX = 0xD,};
struct _4FFA9527088137D66D8D180D61C68358 {int family;int length;char *address;};
enum _5042F00F13CED39D3E2F42A27CB80DFC {XT_CONNTRACK_STATE = 0x1,XT_CONNTRACK_PROTO = 0x2,XT_CONNTRACK_ORIGSRC = 0x4,XT_CONNTRACK_ORIGDST = 0x8,XT_CONNTRACK_REPLSRC = 0x10,XT_CONNTRACK_REPLDST = 0x20,XT_CONNTRACK_STATUS = 0x40,XT_CONNTRACK_EXPIRES = 0x80,XT_CONNTRACK_ORIGSRC_PORT = 0x100,XT_CONNTRACK_ORIGDST_PORT = 0x200,XT_CONNTRACK_REPLSRC_PORT = 0x400,XT_CONNTRACK_REPLDST_PORT = 0x800,XT_CONNTRACK_DIRECTION = 0x1000,XT_CONNTRACK_STATE_ALIAS = 0x2000,};
enum _5118779FB5DF516E87CB38793D41B31F {TCA_EMATCH_TREE_UNSPEC = 0x0,TCA_EMATCH_TREE_HDR = 0x1,TCA_EMATCH_TREE_LIST = 0x2,__TCA_EMATCH_TREE_MAX = 0x3,};
enum _51BDFC43F8CE98845B5B58BAECF68DA1 {PTHREAD_PROCESS_PRIVATE = 0x0,PTHREAD_PROCESS_SHARED = 0x1,};
enum _51E8A4A16C2908E01BF65D8FA748FB6D {KERN_OSTYPE = 0x1,KERN_OSRELEASE = 0x2,KERN_OSREV = 0x3,KERN_VERSION = 0x4,KERN_SECUREMASK = 0x5,KERN_PROF = 0x6,KERN_NODENAME = 0x7,KERN_DOMAINNAME = 0x8,KERN_PANIC = 0xF,KERN_REALROOTDEV = 0x10,KERN_SPARC_REBOOT = 0x15,KERN_CTLALTDEL = 0x16,KERN_PRINTK = 0x17,KERN_NAMETRANS = 0x18,KERN_PPC_HTABRECLAIM = 0x19,KERN_PPC_ZEROPAGED = 0x1A,KERN_PPC_POWERSAVE_NAP = 0x1B,KERN_MODPROBE = 0x1C,KERN_SG_BIG_BUFF = 0x1D,KERN_ACCT = 0x1E,KERN_PPC_L2CR = 0x1F,KERN_RTSIGNR = 0x20,KERN_RTSIGMAX = 0x21,KERN_SHMMAX = 0x22,KERN_MSGMAX = 0x23,KERN_MSGMNB = 0x24,KERN_MSGPOOL = 0x25,KERN_SYSRQ = 0x26,KERN_MAX_THREADS = 0x27,KERN_RANDOM = 0x28,KERN_SHMALL = 0x29,KERN_MSGMNI = 0x2A,KERN_SEM = 0x2B,KERN_SPARC_STOP_A = 0x2C,KERN_SHMMNI = 0x2D,KERN_OVERFLOWUID = 0x2E,KERN_OVERFLOWGID = 0x2F,KERN_SHMPATH = 0x30,KERN_HOTPLUG = 0x31,KERN_IEEE_EMULATION_WARNINGS = 0x32,KERN_S390_USER_DEBUG_LOGGING = 0x33,KERN_CORE_USES_PID = 0x34,KERN_TAINTED = 0x35,KERN_CADPID = 0x36,KERN_PIDMAX = 0x37,KERN_CORE_PATTERN = 0x38,KERN_PANIC_ON_OOPS = 0x39,KERN_HPPA_PWRSW = 0x3A,KERN_HPPA_UNALIGNED = 0x3B,KERN_PRINTK_RATELIMIT = 0x3C,KERN_PRINTK_RATELIMIT_BURST = 0x3D,KERN_PTY = 0x3E,KERN_NGROUPS_MAX = 0x3F,KERN_SPARC_SCONS_PWROFF = 0x40,KERN_HZ_TIMER = 0x41,KERN_UNKNOWN_NMI_PANIC = 0x42,KERN_BOOTLOADER_TYPE = 0x43,KERN_RANDOMIZE = 0x44,KERN_SETUID_DUMPABLE = 0x45,KERN_SPIN_RETRY = 0x46,KERN_ACPI_VIDEO_FLAGS = 0x47,KERN_IA64_UNALIGNED = 0x48,KERN_COMPAT_LOG = 0x49,KERN_MAX_LOCK_DEPTH = 0x4A,KERN_NMI_WATCHDOG = 0x4B,KERN_PANIC_ON_NMI = 0x4C,};
enum _52A9ADD41B0B3DF46362E49EB2E6EEC4 {ICMP6_MIB_NUM = 0x0,ICMP6_MIB_INMSGS = 0x1,ICMP6_MIB_INERRORS = 0x2,ICMP6_MIB_OUTMSGS = 0x3,ICMP6_MIB_OUTERRORS = 0x4,ICMP6_MIB_CSUMERRORS = 0x5,__ICMP6_MIB_MAX = 0x6,};
enum _5323C2CCD519EBF5CF3B84CC21FA09C2 {SNDRV_PCM_CLASS_GENERIC = 0x0,SNDRV_PCM_CLASS_MULTI = 0x1,SNDRV_PCM_CLASS_MODEM = 0x2,SNDRV_PCM_CLASS_DIGITIZER = 0x3,SNDRV_PCM_CLASS_LAST = 0x3,};
enum _5344979E21004655D81A3188D6BF6FCF {IPSET_ERR_BITMAP_RANGE = 0x1100,IPSET_ERR_BITMAP_RANGE_SIZE = 0x1101,};
struct _53996C97E395EF20FC508697C3EEF92C {__int16 lbearing;__int16 rbearing;__int16 width;__int16 ascent;__int16 descent;unsigned __int16 attributes;};
enum _53B658C25F6D5A59133F1EFDA7991A85 {RTN_UNSPEC = 0x0,RTN_UNICAST = 0x1,RTN_LOCAL = 0x2,RTN_BROADCAST = 0x3,RTN_ANYCAST = 0x4,RTN_MULTICAST = 0x5,RTN_BLACKHOLE = 0x6,RTN_UNREACHABLE = 0x7,RTN_PROHIBIT = 0x8,RTN_THROW = 0x9,RTN_NAT = 0xA,RTN_XRESOLVE = 0xB,__RTN_MAX = 0xC,};
enum _580F00A205F52C35466E7D4C228DD20D {SNDRV_TIMER_CLASS_NONE = 0xFFFFFFFF,SNDRV_TIMER_CLASS_SLAVE = 0x0,SNDRV_TIMER_CLASS_GLOBAL = 0x1,SNDRV_TIMER_CLASS_CARD = 0x2,SNDRV_TIMER_CLASS_PCM = 0x3,SNDRV_TIMER_CLASS_LAST = 0x3,};
enum _5818BF25D0D0F4E71831E82F182095BA {XFRM_POLICY_TYPE_MAIN = 0x0,XFRM_POLICY_TYPE_SUB = 0x1,XFRM_POLICY_TYPE_MAX = 0x2,XFRM_POLICY_TYPE_ANY = 0xFF,};
enum _594AD49C4B882827F99E2CBAE7DD905F {IFLA_VLAN_QOS_UNSPEC = 0x0,IFLA_VLAN_QOS_MAPPING = 0x1,__IFLA_VLAN_QOS_MAX = 0x2,};
enum _59F2B68F255BDBD96D38E62E08B230CE {DCCPO_PADDING = 0x0,DCCPO_MANDATORY = 0x1,DCCPO_MIN_RESERVED = 0x3,DCCPO_MAX_RESERVED = 0x1F,DCCPO_CHANGE_L = 0x20,DCCPO_CONFIRM_L = 0x21,DCCPO_CHANGE_R = 0x22,DCCPO_CONFIRM_R = 0x23,DCCPO_NDP_COUNT = 0x25,DCCPO_ACK_VECTOR_0 = 0x26,DCCPO_ACK_VECTOR_1 = 0x27,DCCPO_TIMESTAMP = 0x29,DCCPO_TIMESTAMP_ECHO = 0x2A,DCCPO_ELAPSED_TIME = 0x2B,DCCPO_MAX = 0x2D,DCCPO_MIN_RX_CCID_SPECIFIC = 0x80,DCCPO_MAX_RX_CCID_SPECIFIC = 0xBF,DCCPO_MIN_TX_CCID_SPECIFIC = 0xC0,DCCPO_MAX_TX_CCID_SPECIFIC = 0xFF,};
enum _5A024065603B52F79011217893D48477 {DMX_SOURCE_FRONT0 = 0x0,DMX_SOURCE_FRONT1 = 0x1,DMX_SOURCE_FRONT2 = 0x2,DMX_SOURCE_FRONT3 = 0x3,DMX_SOURCE_DVR0 = 0x10,DMX_SOURCE_DVR1 = 0x11,DMX_SOURCE_DVR2 = 0x12,DMX_SOURCE_DVR3 = 0x13,};
enum _5A0D34CF8B2C4ADAC358A58CA181ACC9 {NET_UNIX_DESTROY_DELAY = 0x1,NET_UNIX_DELETE_DELAY = 0x2,NET_UNIX_MAX_DGRAM_QLEN = 0x3,};
enum _5A59040AF89DFE914D292934EBD3DDFE {PLOG_ERR = 0x1,PLOG_WARN = 0x2,PLOG_NOTE = 0x4,PLOG_DEBUG = 0x8,PLOG_ERRNO = 0x100,PLOG_NOMUTE = 0x200,};
enum _5A773820A0D67B4336D2749C8D45D255 {XrmBindTightly = 0x0,XrmBindLoosely = 0x1,};
enum _5AAE6193B26C85D63483E7D84A2738E8 {IPVS_INFO_ATTR_UNSPEC = 0x0,IPVS_INFO_ATTR_VERSION = 0x1,IPVS_INFO_ATTR_CONN_TAB_SIZE = 0x2,__IPVS_INFO_ATTR_MAX = 0x3,};
enum _5B9AA13A32EABFD11651F8FFEC9136E0 {_SC_ARG_MAX = 0x0,_SC_CHILD_MAX = 0x1,_SC_CLK_TCK = 0x2,_SC_NGROUPS_MAX = 0x3,_SC_OPEN_MAX = 0x4,_SC_STREAM_MAX = 0x5,_SC_TZNAME_MAX = 0x6,_SC_JOB_CONTROL = 0x7,_SC_SAVED_IDS = 0x8,_SC_REALTIME_SIGNALS = 0x9,_SC_PRIORITY_SCHEDULING = 0xA,_SC_TIMERS = 0xB,_SC_ASYNCHRONOUS_IO = 0xC,_SC_PRIORITIZED_IO = 0xD,_SC_SYNCHRONIZED_IO = 0xE,_SC_FSYNC = 0xF,_SC_MAPPED_FILES = 0x10,_SC_MEMLOCK = 0x11,_SC_MEMLOCK_RANGE = 0x12,_SC_MEMORY_PROTECTION = 0x13,_SC_MESSAGE_PASSING = 0x14,_SC_SEMAPHORES = 0x15,_SC_SHARED_MEMORY_OBJECTS = 0x16,_SC_AIO_LISTIO_MAX = 0x17,_SC_AIO_MAX = 0x18,_SC_AIO_PRIO_DELTA_MAX = 0x19,_SC_DELAYTIMER_MAX = 0x1A,_SC_MQ_OPEN_MAX = 0x1B,_SC_MQ_PRIO_MAX = 0x1C,_SC_VERSION = 0x1D,_SC_PAGESIZE = 0x1E,_SC_RTSIG_MAX = 0x1F,_SC_SEM_NSEMS_MAX = 0x20,_SC_SEM_VALUE_MAX = 0x21,_SC_SIGQUEUE_MAX = 0x22,_SC_TIMER_MAX = 0x23,_SC_BC_BASE_MAX = 0x24,_SC_BC_DIM_MAX = 0x25,_SC_BC_SCALE_MAX = 0x26,_SC_BC_STRING_MAX = 0x27,_SC_COLL_WEIGHTS_MAX = 0x28,_SC_EQUIV_CLASS_MAX = 0x29,_SC_EXPR_NEST_MAX = 0x2A,_SC_LINE_MAX = 0x2B,_SC_RE_DUP_MAX = 0x2C,_SC_CHARCLASS_NAME_MAX = 0x2D,_SC_2_VERSION = 0x2E,_SC_2_C_BIND = 0x2F,_SC_2_C_DEV = 0x30,_SC_2_FORT_DEV = 0x31,_SC_2_FORT_RUN = 0x32,_SC_2_SW_DEV = 0x33,_SC_2_LOCALEDEF = 0x34,_SC_PII = 0x35,_SC_PII_XTI = 0x36,_SC_PII_SOCKET = 0x37,_SC_PII_INTERNET = 0x38,_SC_PII_OSI = 0x39,_SC_POLL = 0x3A,_SC_SELECT = 0x3B,_SC_UIO_MAXIOV = 0x3C,_SC_IOV_MAX = 0x3C,_SC_PII_INTERNET_STREAM = 0x3D,_SC_PII_INTERNET_DGRAM = 0x3E,_SC_PII_OSI_COTS = 0x3F,_SC_PII_OSI_CLTS = 0x40,_SC_PII_OSI_M = 0x41,_SC_T_IOV_MAX = 0x42,_SC_THREADS = 0x43,_SC_THREAD_SAFE_FUNCTIONS = 0x44,_SC_GETGR_R_SIZE_MAX = 0x45,_SC_GETPW_R_SIZE_MAX = 0x46,_SC_LOGIN_NAME_MAX = 0x47,_SC_TTY_NAME_MAX = 0x48,_SC_THREAD_DESTRUCTOR_ITERATIONS = 0x49,_SC_THREAD_KEYS_MAX = 0x4A,_SC_THREAD_STACK_MIN = 0x4B,_SC_THREAD_THREADS_MAX = 0x4C,_SC_THREAD_ATTR_STACKADDR = 0x4D,_SC_THREAD_ATTR_STACKSIZE = 0x4E,_SC_THREAD_PRIORITY_SCHEDULING = 0x4F,_SC_THREAD_PRIO_INHERIT = 0x50,_SC_THREAD_PRIO_PROTECT = 0x51,_SC_THREAD_PROCESS_SHARED = 0x52,_SC_NPROCESSORS_CONF = 0x53,_SC_NPROCESSORS_ONLN = 0x54,_SC_PHYS_PAGES = 0x55,_SC_AVPHYS_PAGES = 0x56,_SC_ATEXIT_MAX = 0x57,_SC_PASS_MAX = 0x58,_SC_XOPEN_VERSION = 0x59,_SC_XOPEN_XCU_VERSION = 0x5A,_SC_XOPEN_UNIX = 0x5B,_SC_XOPEN_CRYPT = 0x5C,_SC_XOPEN_ENH_I18N = 0x5D,_SC_XOPEN_SHM = 0x5E,_SC_2_CHAR_TERM = 0x5F,_SC_2_C_VERSION = 0x60,_SC_2_UPE = 0x61,_SC_XOPEN_XPG2 = 0x62,_SC_XOPEN_XPG3 = 0x63,_SC_XOPEN_XPG4 = 0x64,_SC_CHAR_BIT = 0x65,_SC_CHAR_MAX = 0x66,_SC_CHAR_MIN = 0x67,_SC_INT_MAX = 0x68,_SC_INT_MIN = 0x69,_SC_LONG_BIT = 0x6A,_SC_WORD_BIT = 0x6B,_SC_MB_LEN_MAX = 0x6C,_SC_NZERO = 0x6D,_SC_SSIZE_MAX = 0x6E,_SC_SCHAR_MAX = 0x6F,_SC_SCHAR_MIN = 0x70,_SC_SHRT_MAX = 0x71,_SC_SHRT_MIN = 0x72,_SC_UCHAR_MAX = 0x73,_SC_UINT_MAX = 0x74,_SC_ULONG_MAX = 0x75,_SC_USHRT_MAX = 0x76,_SC_NL_ARGMAX = 0x77,_SC_NL_LANGMAX = 0x78,_SC_NL_MSGMAX = 0x79,_SC_NL_NMAX = 0x7A,_SC_NL_SETMAX = 0x7B,_SC_NL_TEXTMAX = 0x7C,_SC_XBS5_ILP32_OFF32 = 0x7D,_SC_XBS5_ILP32_OFFBIG = 0x7E,_SC_XBS5_LP64_OFF64 = 0x7F,_SC_XBS5_LPBIG_OFFBIG = 0x80,_SC_XOPEN_LEGACY = 0x81,_SC_XOPEN_REALTIME = 0x82,_SC_XOPEN_REALTIME_THREADS = 0x83,_SC_ADVISORY_INFO = 0x84,_SC_BARRIERS = 0x85,_SC_BASE = 0x86,_SC_C_LANG_SUPPORT = 0x87,_SC_C_LANG_SUPPORT_R = 0x88,_SC_CLOCK_SELECTION = 0x89,_SC_CPUTIME = 0x8A,_SC_THREAD_CPUTIME = 0x8B,_SC_DEVICE_IO = 0x8C,_SC_DEVICE_SPECIFIC = 0x8D,_SC_DEVICE_SPECIFIC_R = 0x8E,_SC_FD_MGMT = 0x8F,_SC_FIFO = 0x90,_SC_PIPE = 0x91,_SC_FILE_ATTRIBUTES = 0x92,_SC_FILE_LOCKING = 0x93,_SC_FILE_SYSTEM = 0x94,_SC_MONOTONIC_CLOCK = 0x95,_SC_MULTI_PROCESS = 0x96,_SC_SINGLE_PROCESS = 0x97,_SC_NETWORKING = 0x98,_SC_READER_WRITER_LOCKS = 0x99,_SC_SPIN_LOCKS = 0x9A,_SC_REGEXP = 0x9B,_SC_REGEX_VERSION = 0x9C,_SC_SHELL = 0x9D,_SC_SIGNALS = 0x9E,_SC_SPAWN = 0x9F,_SC_SPORADIC_SERVER = 0xA0,_SC_THREAD_SPORADIC_SERVER = 0xA1,_SC_SYSTEM_DATABASE = 0xA2,_SC_SYSTEM_DATABASE_R = 0xA3,_SC_TIMEOUTS = 0xA4,_SC_TYPED_MEMORY_OBJECTS = 0xA5,_SC_USER_GROUPS = 0xA6,_SC_USER_GROUPS_R = 0xA7,_SC_2_PBS = 0xA8,_SC_2_PBS_ACCOUNTING = 0xA9,_SC_2_PBS_LOCATE = 0xAA,_SC_2_PBS_MESSAGE = 0xAB,_SC_2_PBS_TRACK = 0xAC,_SC_SYMLOOP_MAX = 0xAD,_SC_STREAMS = 0xAE,_SC_2_PBS_CHECKPOINT = 0xAF,_SC_V6_ILP32_OFF32 = 0xB0,_SC_V6_ILP32_OFFBIG = 0xB1,_SC_V6_LP64_OFF64 = 0xB2,_SC_V6_LPBIG_OFFBIG = 0xB3,_SC_HOST_NAME_MAX = 0xB4,_SC_TRACE = 0xB5,_SC_TRACE_EVENT_FILTER = 0xB6,_SC_TRACE_INHERIT = 0xB7,_SC_TRACE_LOG = 0xB8,_SC_LEVEL1_ICACHE_SIZE = 0xB9,_SC_LEVEL1_ICACHE_ASSOC = 0xBA,_SC_LEVEL1_ICACHE_LINESIZE = 0xBB,_SC_LEVEL1_DCACHE_SIZE = 0xBC,_SC_LEVEL1_DCACHE_ASSOC = 0xBD,_SC_LEVEL1_DCACHE_LINESIZE = 0xBE,_SC_LEVEL2_CACHE_SIZE = 0xBF,_SC_LEVEL2_CACHE_ASSOC = 0xC0,_SC_LEVEL2_CACHE_LINESIZE = 0xC1,_SC_LEVEL3_CACHE_SIZE = 0xC2,_SC_LEVEL3_CACHE_ASSOC = 0xC3,_SC_LEVEL3_CACHE_LINESIZE = 0xC4,_SC_LEVEL4_CACHE_SIZE = 0xC5,_SC_LEVEL4_CACHE_ASSOC = 0xC6,_SC_LEVEL4_CACHE_LINESIZE = 0xC7,_SC_IPV6 = 0xEB,_SC_RAW_SOCKETS = 0xEC,_SC_V7_ILP32_OFF32 = 0xED,_SC_V7_ILP32_OFFBIG = 0xEE,_SC_V7_LP64_OFF64 = 0xEF,_SC_V7_LPBIG_OFFBIG = 0xF0,_SC_SS_REPL_MAX = 0xF1,_SC_TRACE_EVENT_NAME_MAX = 0xF2,_SC_TRACE_NAME_MAX = 0xF3,_SC_TRACE_SYS_MAX = 0xF4,_SC_TRACE_USER_EVENT_MAX = 0xF5,_SC_XOPEN_STREAMS = 0xF6,_SC_THREAD_ROBUST_PRIO_INHERIT = 0xF7,_SC_THREAD_ROBUST_PRIO_PROTECT = 0xF8,};
enum _5CA2511B2D6A3DBDA13F6907AFC16020 {SNDRV_COMPRESS_ENCODER_PADDING = 0x1,SNDRV_COMPRESS_ENCODER_DELAY = 0x2,};
enum _5CD196A4F9857EF5EF087D14F2DFD318 {TCA_CGROUP_UNSPEC = 0x0,TCA_CGROUP_ACT = 0x1,TCA_CGROUP_POLICE = 0x2,TCA_CGROUP_EMATCHES = 0x3,__TCA_CGROUP_MAX = 0x4,};
enum _5D366E046BCBBC2F6D47B23259598CFE {IPSTATS_MIB_NUM = 0x0,IPSTATS_MIB_INPKTS = 0x1,IPSTATS_MIB_INOCTETS = 0x2,IPSTATS_MIB_INDELIVERS = 0x3,IPSTATS_MIB_OUTFORWDATAGRAMS = 0x4,IPSTATS_MIB_OUTPKTS = 0x5,IPSTATS_MIB_OUTOCTETS = 0x6,IPSTATS_MIB_INHDRERRORS = 0x7,IPSTATS_MIB_INTOOBIGERRORS = 0x8,IPSTATS_MIB_INNOROUTES = 0x9,IPSTATS_MIB_INADDRERRORS = 0xA,IPSTATS_MIB_INUNKNOWNPROTOS = 0xB,IPSTATS_MIB_INTRUNCATEDPKTS = 0xC,IPSTATS_MIB_INDISCARDS = 0xD,IPSTATS_MIB_OUTDISCARDS = 0xE,IPSTATS_MIB_OUTNOROUTES = 0xF,IPSTATS_MIB_REASMTIMEOUT = 0x10,IPSTATS_MIB_REASMREQDS = 0x11,IPSTATS_MIB_REASMOKS = 0x12,IPSTATS_MIB_REASMFAILS = 0x13,IPSTATS_MIB_FRAGOKS = 0x14,IPSTATS_MIB_FRAGFAILS = 0x15,IPSTATS_MIB_FRAGCREATES = 0x16,IPSTATS_MIB_INMCASTPKTS = 0x17,IPSTATS_MIB_OUTMCASTPKTS = 0x18,IPSTATS_MIB_INBCASTPKTS = 0x19,IPSTATS_MIB_OUTBCASTPKTS = 0x1A,IPSTATS_MIB_INMCASTOCTETS = 0x1B,IPSTATS_MIB_OUTMCASTOCTETS = 0x1C,IPSTATS_MIB_INBCASTOCTETS = 0x1D,IPSTATS_MIB_OUTBCASTOCTETS = 0x1E,IPSTATS_MIB_CSUMERRORS = 0x1F,__IPSTATS_MIB_MAX = 0x20,};
enum _5D78D59BF234E92DB3B27D71CA52B746 {DLM_CMD_UNSPEC = 0x0,DLM_CMD_HELLO = 0x1,DLM_CMD_TIMEOUT = 0x2,__DLM_CMD_MAX = 0x3,};
enum _5DC38A7C59C0EB4905B0CA747B22AD1B {IPPORT_ECHO = 0x7,IPPORT_DISCARD = 0x9,IPPORT_SYSTAT = 0xB,IPPORT_DAYTIME = 0xD,IPPORT_NETSTAT = 0xF,IPPORT_FTP = 0x15,IPPORT_TELNET = 0x17,IPPORT_SMTP = 0x19,IPPORT_TIMESERVER = 0x25,IPPORT_NAMESERVER = 0x2A,IPPORT_WHOIS = 0x2B,IPPORT_MTP = 0x39,IPPORT_TFTP = 0x45,IPPORT_RJE = 0x4D,IPPORT_FINGER = 0x4F,IPPORT_TTYLINK = 0x57,IPPORT_SUPDUP = 0x5F,IPPORT_EXECSERVER = 0x200,IPPORT_LOGINSERVER = 0x201,IPPORT_CMDSERVER = 0x202,IPPORT_EFSSERVER = 0x208,IPPORT_BIFFUDP = 0x200,IPPORT_WHOSERVER = 0x201,IPPORT_ROUTESERVER = 0x208,IPPORT_RESERVED = 0x400,IPPORT_USERRESERVED = 0x1388,};
enum _5E39050E33ED31726BC937556AF5832E {pots = 0x0,pstn = 0x1,handset = 0x2,speaker = 0x3,};
enum _5E65BB40F6ADE64B38A28A13261FB94F {DEV_PARPORT_DEFAULT = 0xFFFFFFFD,};
enum _5E73109BBAA167E4C78A8EE8CF9AEA71 {NET_IPV4_NF_CONNTRACK_MAX = 0x1,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT = 0x2,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV = 0x3,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED = 0x4,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT = 0x5,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT = 0x6,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK = 0x7,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT = 0x8,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE = 0x9,NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT = 0xA,NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM = 0xB,NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT = 0xC,NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT = 0xD,NET_IPV4_NF_CONNTRACK_BUCKETS = 0xE,NET_IPV4_NF_CONNTRACK_LOG_INVALID = 0xF,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS = 0x10,NET_IPV4_NF_CONNTRACK_TCP_LOOSE = 0x11,NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL = 0x12,NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS = 0x13,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED = 0x14,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT = 0x15,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED = 0x16,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED = 0x17,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT = 0x18,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD = 0x19,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT = 0x1A,NET_IPV4_NF_CONNTRACK_COUNT = 0x1B,NET_IPV4_NF_CONNTRACK_CHECKSUM = 0x1C,};
enum _5F4FB24EA05607B9B86235A0724442A1 {IPSEC_POLICY_DISCARD = 0x0,IPSEC_POLICY_NONE = 0x1,IPSEC_POLICY_IPSEC = 0x2,IPSEC_POLICY_ENTRUST = 0x3,IPSEC_POLICY_BYPASS = 0x4,};
enum _5FC9E1BD2DB524A9CD9D5B83927C8CAE {FD_NEED_TWADDLE_BIT = 0x0,FD_VERIFY_BIT = 0x1,FD_DISK_NEWCHANGE_BIT = 0x2,FD_UNUSED_BIT = 0x3,FD_DISK_CHANGED_BIT = 0x4,FD_DISK_WRITABLE_BIT = 0x5,};
enum _5FCFC9B82C4ACD98A29891A49C87C3CA {DEV_SCSI_LOGGING_LEVEL = 0x1,};
enum _6088828A55167270CF3BAB1337A37B1B {IFLA_MACVLAN_UNSPEC = 0x0,IFLA_MACVLAN_MODE = 0x1,IFLA_MACVLAN_FLAGS = 0x2,__IFLA_MACVLAN_MAX = 0x3,};
enum _60B1F87CD077024D74F8128C54DBB332 {IPT_TTL_EQ = 0x0,IPT_TTL_NE = 0x1,IPT_TTL_LT = 0x2,IPT_TTL_GT = 0x3,};
enum _614050F2696AA3EF75B13C77CB113684 {XFRM_MSG_BASE = 0x10,XFRM_MSG_NEWSA = 0x10,XFRM_MSG_DELSA = 0x11,XFRM_MSG_GETSA = 0x12,XFRM_MSG_NEWPOLICY = 0x13,XFRM_MSG_DELPOLICY = 0x14,XFRM_MSG_GETPOLICY = 0x15,XFRM_MSG_ALLOCSPI = 0x16,XFRM_MSG_ACQUIRE = 0x17,XFRM_MSG_EXPIRE = 0x18,XFRM_MSG_UPDPOLICY = 0x19,XFRM_MSG_UPDSA = 0x1A,XFRM_MSG_POLEXPIRE = 0x1B,XFRM_MSG_FLUSHSA = 0x1C,XFRM_MSG_FLUSHPOLICY = 0x1D,XFRM_MSG_NEWAE = 0x1E,XFRM_MSG_GETAE = 0x1F,XFRM_MSG_REPORT = 0x20,XFRM_MSG_MIGRATE = 0x21,XFRM_MSG_NEWSADINFO = 0x22,XFRM_MSG_GETSADINFO = 0x23,XFRM_MSG_NEWSPDINFO = 0x24,XFRM_MSG_GETSPDINFO = 0x25,XFRM_MSG_MAPPING = 0x26,__XFRM_MSG_MAX = 0x27,};
enum _61AA1337C8DCBEC620C53877265755EA {IFAL_ADDRESS = 0x1,IFAL_LABEL = 0x2,__IFAL_MAX = 0x3,};
enum _61C186B0F230D7DE33934A317D0473ED {XT_RECENT_CHECK = 0x1,XT_RECENT_SET = 0x2,XT_RECENT_UPDATE = 0x4,XT_RECENT_REMOVE = 0x8,XT_RECENT_TTL = 0x10,XT_RECENT_REAP = 0x20,XT_RECENT_SOURCE = 0x0,XT_RECENT_DEST = 0x1,XT_RECENT_NAME_LEN = 0xC8,};
enum _61CC1AFED2417E1FB7E49EF92B73675F {FTW_PHYS = 0x1,FTW_MOUNT = 0x2,FTW_CHDIR = 0x4,FTW_DEPTH = 0x8,FTW_ACTIONRETVAL = 0x10,};
enum _61D86FFDCFD070D221D571662E4F7C49 {TEAM_ATTR_OPTION_UNSPEC = 0x0,TEAM_ATTR_OPTION_NAME = 0x1,TEAM_ATTR_OPTION_CHANGED = 0x2,TEAM_ATTR_OPTION_TYPE = 0x3,TEAM_ATTR_OPTION_DATA = 0x4,TEAM_ATTR_OPTION_REMOVED = 0x5,TEAM_ATTR_OPTION_PORT_IFINDEX = 0x6,TEAM_ATTR_OPTION_ARRAY_INDEX = 0x7,__TEAM_ATTR_OPTION_MAX = 0x8,TEAM_ATTR_OPTION_MAX = 0x7,};
enum _6243F0303D5F75458C300FD8D676F4E6 {CGW_TYPE_UNSPEC = 0x0,CGW_TYPE_CAN_CAN = 0x1,__CGW_TYPE_MAX = 0x2,};
enum _624D32860F6218FD2BBE91CBF0AD8DA4 {FUNCTIONFS_DESCRIPTORS_MAGIC = 0x1,FUNCTIONFS_STRINGS_MAGIC = 0x2,};
enum _62C687A892892F764D1BE63138289AD9 {MDBA_ROUTER_UNSPEC = 0x0,MDBA_ROUTER_PORT = 0x1,__MDBA_ROUTER_MAX = 0x2,};
struct _648B167E5FE8430EFE8E72D1CD79C82D {__int16 pmin;__int16 pmax;__int16 smin;__int16 smax;};
enum _64DDA17683C749D552C2C10CD278D2DC {SFD_CLOEXEC = 0x80000,SFD_NONBLOCK = 0x800,};
enum _65C130285B6739E8201240D6ADED820E {DCCPC_CCID2 = 0x2,DCCPC_CCID3 = 0x3,};
enum _65CF98EECFB69F691B0631C04FBFD9D4 {TD_ALL_EVENTS = 0x0,TD_EVENT_NONE = 0x0,TD_READY = 0x1,TD_SLEEP = 0x2,TD_SWITCHTO = 0x3,TD_SWITCHFROM = 0x4,TD_LOCK_TRY = 0x5,TD_CATCHSIG = 0x6,TD_IDLE = 0x7,TD_CREATE = 0x8,TD_DEATH = 0x9,TD_PREEMPT = 0xA,TD_PRI_INHERIT = 0xB,TD_REAP = 0xC,TD_CONCURRENCY = 0xD,TD_TIMEOUT = 0xE,TD_MIN_EVENT_NUM = 0x1,TD_MAX_EVENT_NUM = 0xE,TD_EVENTS_ENABLE = 0x1F,};
enum _66133CEEF79D88ECBF6F858C9F9FCED8 {CTRL_CMD_UNSPEC = 0x0,CTRL_CMD_NEWFAMILY = 0x1,CTRL_CMD_DELFAMILY = 0x2,CTRL_CMD_GETFAMILY = 0x3,CTRL_CMD_NEWOPS = 0x4,CTRL_CMD_DELOPS = 0x5,CTRL_CMD_GETOPS = 0x6,CTRL_CMD_NEWMCAST_GRP = 0x7,CTRL_CMD_DELMCAST_GRP = 0x8,CTRL_CMD_GETMCAST_GRP = 0x9,__CTRL_CMD_MAX = 0xA,};
enum _663422C0DB0E896B583B433C91E546EA {NET_BRIDGE_NF_CALL_ARPTABLES = 0x1,NET_BRIDGE_NF_CALL_IPTABLES = 0x2,NET_BRIDGE_NF_CALL_IP6TABLES = 0x3,NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 0x4,NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 0x5,};
enum _66CABB2AE966439BE70E2298DDF3DAFD {SNDRV_TIMER_EVENT_RESOLUTION = 0x0,SNDRV_TIMER_EVENT_TICK = 0x1,SNDRV_TIMER_EVENT_START = 0x2,SNDRV_TIMER_EVENT_STOP = 0x3,SNDRV_TIMER_EVENT_CONTINUE = 0x4,SNDRV_TIMER_EVENT_PAUSE = 0x5,SNDRV_TIMER_EVENT_EARLY = 0x6,SNDRV_TIMER_EVENT_SUSPEND = 0x7,SNDRV_TIMER_EVENT_RESUME = 0x8,SNDRV_TIMER_EVENT_MSTART = 0xC,SNDRV_TIMER_EVENT_MSTOP = 0xD,SNDRV_TIMER_EVENT_MCONTINUE = 0xE,SNDRV_TIMER_EVENT_MPAUSE = 0xF,SNDRV_TIMER_EVENT_MSUSPEND = 0x11,SNDRV_TIMER_EVENT_MRESUME = 0x12,};
enum _673534010955E48566F9B27E65308EE2 {TRAP_BRKPT = 0x1,TRAP_TRACE = 0x2,};
enum _6742E2A95D3D8376F37A20D1699FDFCE {NBD_CMD_READ = 0x0,NBD_CMD_WRITE = 0x1,NBD_CMD_DISC = 0x2,NBD_CMD_FLUSH = 0x3,NBD_CMD_TRIM = 0x4,};
enum _67811162150C50B9AAF276DF150C0D15 {IRDAPROTO_UNITDATA = 0x0,IRDAPROTO_ULTRA = 0x1,IRDAPROTO_MAX = 0x2,};
struct _691123D744001B8BE68B84780CEE447C {unsigned __int8 byte1;unsigned __int8 byte2;};
enum _698350086E4DB55A9D7408BF73329F12 {TCA_UNSPEC = 0x0,TCA_KIND = 0x1,TCA_OPTIONS = 0x2,TCA_STATS = 0x3,TCA_XSTATS = 0x4,TCA_RATE = 0x5,TCA_FCNT = 0x6,TCA_STATS2 = 0x7,TCA_STAB = 0x8,__TCA_MAX = 0x9,};
enum _699D2B6448FB7BE3D7A3A7D1978CAEFE {UL_GETFSIZE = 0x1,UL_SETFSIZE = 0x2,__UL_GETMAXBRK = 0x3,__UL_GETOPENMAX = 0x4,};
struct _6A1E68C5A198D57F5F76A65BA6AE762A {unsigned __int64 pixel;unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;char flags;char pad;};
struct _6B1106A64659663BF4BA9950E3F10E4F {int charset_count;char **charset_list;};
enum _6BB4FACEE4E215453CC13C262783CDD4 {Audit_equal = 0x0,Audit_not_equal = 0x1,Audit_bitmask = 0x2,Audit_bittest = 0x3,Audit_lt = 0x4,Audit_gt = 0x5,Audit_le = 0x6,Audit_ge = 0x7,Audit_bad = 0x8,};
enum _6BE3B5AAB700BFBA3A432F0BBF114207 {FP_NAN = 0x0,FP_INFINITE = 0x1,FP_ZERO = 0x2,FP_SUBNORMAL = 0x3,FP_NORMAL = 0x4,};
enum _6DE0D61D61F97D6E17ED7D70441829F1 {NET_TR_RIF_TIMEOUT = 0x1,};
enum _6E31A4A92285265DE68BE596565990CD {FLOW_MODE_MAP = 0x0,FLOW_MODE_HASH = 0x1,};
struct _6EF26E53794972BE8CF37E7A46EF3D5C {int key_click_percent;int bell_percent;unsigned int bell_pitch;unsigned int bell_duration;unsigned __int64 led_mask;int global_auto_repeat;char auto_repeats[32];};
enum _6EFA51B9C49C9D49A3F12AB1D51444D0 {TCA_ATM_UNSPEC = 0x0,TCA_ATM_FD = 0x1,TCA_ATM_PTR = 0x2,TCA_ATM_HDR = 0x3,TCA_ATM_EXCESS = 0x4,TCA_ATM_ADDR = 0x5,TCA_ATM_STATE = 0x6,__TCA_ATM_MAX = 0x7,};
struct _6F2DCBF5C42D0C323967E7E74FBCE3A0 {char *dls_name;unsigned int dls_flags;};
enum _6F3CED93B4BE9C50BB41E3033A4B830D {kvm_ioeventfd_flag_nr_datamatch = 0x0,kvm_ioeventfd_flag_nr_pio = 0x1,kvm_ioeventfd_flag_nr_deassign = 0x2,kvm_ioeventfd_flag_nr_virtio_ccw_notify = 0x3,kvm_ioeventfd_flag_nr_max = 0x4,};
enum _6F5F24A1DCBC19A7180DEBCD8F085644 {IPVS_SVC_ATTR_UNSPEC = 0x0,IPVS_SVC_ATTR_AF = 0x1,IPVS_SVC_ATTR_PROTOCOL = 0x2,IPVS_SVC_ATTR_ADDR = 0x3,IPVS_SVC_ATTR_PORT = 0x4,IPVS_SVC_ATTR_FWMARK = 0x5,IPVS_SVC_ATTR_SCHED_NAME = 0x6,IPVS_SVC_ATTR_FLAGS = 0x7,IPVS_SVC_ATTR_TIMEOUT = 0x8,IPVS_SVC_ATTR_NETMASK = 0x9,IPVS_SVC_ATTR_STATS = 0xA,IPVS_SVC_ATTR_PE_NAME = 0xB,__IPVS_SVC_ATTR_MAX = 0xC,};
enum _6F917803B5EDAFFE6558D2A0AFE2718B {POLL_IN = 0x1,POLL_OUT = 0x2,POLL_MSG = 0x3,POLL_ERR = 0x4,POLL_PRI = 0x5,POLL_HUP = 0x6,};
enum _71B13CE70739FD517E3E251777789B61 {AUDIO_SOURCE_DEMUX = 0x0,AUDIO_SOURCE_MEMORY = 0x1,};
enum _71BB7F13C6B4FB222BA3B123C91C294C {TCA_SKBEDIT_UNSPEC = 0x0,TCA_SKBEDIT_TM = 0x1,TCA_SKBEDIT_PARMS = 0x2,TCA_SKBEDIT_PRIORITY = 0x3,TCA_SKBEDIT_QUEUE_MAPPING = 0x4,TCA_SKBEDIT_MARK = 0x5,__TCA_SKBEDIT_MAX = 0x6,};
enum _71F82CE7E1C6DAFDDDE5DC19E1EF3D6B {IFLA_INET6_UNSPEC = 0x0,IFLA_INET6_FLAGS = 0x1,IFLA_INET6_CONF = 0x2,IFLA_INET6_STATS = 0x3,IFLA_INET6_MCAST = 0x4,IFLA_INET6_CACHEINFO = 0x5,IFLA_INET6_ICMP6STATS = 0x6,IFLA_INET6_TOKEN = 0x7,__IFLA_INET6_MAX = 0x8,};
enum _725A2A4D7FFB0E5E03896294E294905E {CTL_KERN = 0x1,CTL_VM = 0x2,CTL_NET = 0x3,CTL_PROC = 0x4,CTL_FS = 0x5,CTL_DEBUG = 0x6,CTL_DEV = 0x7,CTL_BUS = 0x8,CTL_ABI = 0x9,CTL_CPU = 0xA,CTL_ARLAN = 0xFE,CTL_S390DBF = 0x162D,CTL_SUNRPC = 0x1C51,CTL_PM = 0x26AB,CTL_FRV = 0x26AA,};
enum _72B551E940A86C568035BFB29737DF70 {PARPORT_CLASS_LEGACY = 0x0,PARPORT_CLASS_PRINTER = 0x1,PARPORT_CLASS_MODEM = 0x2,PARPORT_CLASS_NET = 0x3,PARPORT_CLASS_HDC = 0x4,PARPORT_CLASS_PCMCIA = 0x5,PARPORT_CLASS_MEDIA = 0x6,PARPORT_CLASS_FDC = 0x7,PARPORT_CLASS_PORTS = 0x8,PARPORT_CLASS_SCANNER = 0x9,PARPORT_CLASS_DIGCAM = 0xA,PARPORT_CLASS_OTHER = 0xB,PARPORT_CLASS_UNSPEC = 0xC,PARPORT_CLASS_SCSIADAPTER = 0xD,};
enum _72C05F3463D40D19E095EE1629877640 {TCA_ACT_UNSPEC = 0x0,TCA_ACT_KIND = 0x1,TCA_ACT_OPTIONS = 0x2,TCA_ACT_INDEX = 0x3,TCA_ACT_STATS = 0x4,__TCA_ACT_MAX = 0x5,};
enum _730196AC61DA5EA630CA6661CED053E5 {PROF_USHORT = 0x0,PROF_UINT = 0x1,PROF_FAST = 0x2,};
enum _730D229031040DFC4AD08BF6392E9798 {IN_CLOEXEC = 0x80000,IN_NONBLOCK = 0x800,};
enum _73CB47A38CF7A86CA552D039487A2931 {TEAM_ATTR_ITEM_OPTION_UNSPEC = 0x0,TEAM_ATTR_ITEM_OPTION = 0x1,__TEAM_ATTR_ITEM_OPTION_MAX = 0x2,TEAM_ATTR_ITEM_OPTION_MAX = 0x1,};
enum _73EB36611F503765768C57121BDE83EA {LA_FLG_BINDTO = 0x1,LA_FLG_BINDFROM = 0x2,};
struct _73FDACF34BD773846371F264A3DF2411 {unsigned int dlci;char master[16];};
enum _74D675C0ABD1FF4E6D04BB3BA12C93C5 {TCA_CBQ_UNSPEC = 0x0,TCA_CBQ_LSSOPT = 0x1,TCA_CBQ_WRROPT = 0x2,TCA_CBQ_FOPT = 0x3,TCA_CBQ_OVL_STRATEGY = 0x4,TCA_CBQ_RATE = 0x5,TCA_CBQ_RTAB = 0x6,TCA_CBQ_POLICE = 0x7,__TCA_CBQ_MAX = 0x8,};
enum _7624DF4E3BBAA1FA30FAD8A0F732C660 {IFLA_VF_PORT_UNSPEC = 0x0,IFLA_VF_PORT = 0x1,__IFLA_VF_PORT_MAX = 0x2,};
enum _76FD0D58C40C5AD7987EBFAE6D98DE3C {WIMAX_GNL_STGET_IFIDX = 0x1,};
enum _77A6E3E048A33540C7B9922BB9E80C14 {TCA_GRED_UNSPEC = 0x0,TCA_GRED_PARMS = 0x1,TCA_GRED_STAB = 0x2,TCA_GRED_DPS = 0x3,TCA_GRED_MAX_P = 0x4,__TCA_GRED_MAX = 0x5,};
enum _77AA6B3C94CF91510975FAEAA78CF27F {NET_ROSE_RESTART_REQUEST_TIMEOUT = 0x1,NET_ROSE_CALL_REQUEST_TIMEOUT = 0x2,NET_ROSE_RESET_REQUEST_TIMEOUT = 0x3,NET_ROSE_CLEAR_REQUEST_TIMEOUT = 0x4,NET_ROSE_ACK_HOLD_BACK_TIMEOUT = 0x5,NET_ROSE_ROUTING_CONTROL = 0x6,NET_ROSE_LINK_FAIL_TIMEOUT = 0x7,NET_ROSE_MAX_VCS = 0x8,NET_ROSE_WINDOW_SIZE = 0x9,NET_ROSE_NO_ACTIVITY_TIMEOUT = 0xA,};
enum _77DF46C9425AF9D71E9D4833358F4738 {DW_OBJECT_MSB = 0x0,DW_OBJECT_LSB = 0x1,};
enum _7823B4B8FD591F2AC5518522D337C9B6 {PACKET_DIAG_INFO = 0x0,PACKET_DIAG_MCLIST = 0x1,PACKET_DIAG_RX_RING = 0x2,PACKET_DIAG_TX_RING = 0x3,PACKET_DIAG_FANOUT = 0x4,PACKET_DIAG_UID = 0x5,PACKET_DIAG_MEMINFO = 0x6,PACKET_DIAG_FILTER = 0x7,__PACKET_DIAG_MAX = 0x8,};
enum _7844D3AA2081323302D6831DE44DC168 {DLM_PLOCK_OP_LOCK = 0x1,DLM_PLOCK_OP_UNLOCK = 0x2,DLM_PLOCK_OP_GET = 0x3,};
union _78749F0999040F0464754753F1A300EC {char __size[8];__int64 __align;};
enum _78AB2E3EF86977834775ADA3E6383E9B {SCM_RIGHTS = 0x1,SCM_CREDENTIALS = 0x2,};
enum _7940925F5FE0AF7910DE614C69ED852F {UNAME26 = 0x20000,FDPIC_FUNCPTRS = 0x80000,};
enum _796E714162EA244F8A7A280FA7165EC6 {RTM_BASE = 0x10,RTM_NEWLINK = 0x10,RTM_DELLINK = 0x11,RTM_GETLINK = 0x12,RTM_SETLINK = 0x13,RTM_NEWADDR = 0x14,RTM_DELADDR = 0x15,RTM_GETADDR = 0x16,RTM_NEWROUTE = 0x18,RTM_DELROUTE = 0x19,RTM_GETROUTE = 0x1A,RTM_NEWNEIGH = 0x1C,RTM_DELNEIGH = 0x1D,RTM_GETNEIGH = 0x1E,RTM_NEWRULE = 0x20,RTM_DELRULE = 0x21,RTM_GETRULE = 0x22,RTM_NEWQDISC = 0x24,RTM_DELQDISC = 0x25,RTM_GETQDISC = 0x26,RTM_NEWTCLASS = 0x28,RTM_DELTCLASS = 0x29,RTM_GETTCLASS = 0x2A,RTM_NEWTFILTER = 0x2C,RTM_DELTFILTER = 0x2D,RTM_GETTFILTER = 0x2E,RTM_NEWACTION = 0x30,RTM_DELACTION = 0x31,RTM_GETACTION = 0x32,RTM_NEWPREFIX = 0x34,RTM_GETMULTICAST = 0x3A,RTM_GETANYCAST = 0x3E,RTM_NEWNEIGHTBL = 0x40,RTM_GETNEIGHTBL = 0x42,RTM_SETNEIGHTBL = 0x43,RTM_NEWNDUSEROPT = 0x44,RTM_NEWADDRLABEL = 0x48,RTM_DELADDRLABEL = 0x49,RTM_GETADDRLABEL = 0x4A,RTM_GETDCB = 0x4E,RTM_SETDCB = 0x4F,RTM_NEWNETCONF = 0x50,RTM_GETNETCONF = 0x52,RTM_NEWMDB = 0x54,RTM_DELMDB = 0x55,RTM_GETMDB = 0x56,__RTM_MAX = 0x57,};
enum _79AAA6F479928E98C58CFFDA058C6A95 {MTD_OPS_PLACE_OOB = 0x0,MTD_OPS_AUTO_OOB = 0x1,MTD_OPS_RAW = 0x2,};
enum _7AB5A752696E25D059A83A920E9EDD46 {DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES = 0x1,DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES = 0x2,DEV_MAC_HID_MOUSE_BUTTON_EMULATION = 0x3,DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE = 0x4,DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE = 0x5,DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES = 0x6,};
enum _7ABD65A78F7D2F9673D05828F7FBDF1E {MNT_FORCE = 0x1,MNT_DETACH = 0x2,MNT_EXPIRE = 0x4,UMOUNT_NOFOLLOW = 0x8,};
enum _7B3B1C939C6ABC3F06B5D653202CBA72 {IPSET_ATTR_IP = 0x1,IPSET_ATTR_IP_FROM = 0x1,IPSET_ATTR_IP_TO = 0x2,IPSET_ATTR_CIDR = 0x3,IPSET_ATTR_PORT = 0x4,IPSET_ATTR_PORT_FROM = 0x4,IPSET_ATTR_PORT_TO = 0x5,IPSET_ATTR_TIMEOUT = 0x6,IPSET_ATTR_PROTO = 0x7,IPSET_ATTR_CADT_FLAGS = 0x8,IPSET_ATTR_CADT_LINENO = 0x9,IPSET_ATTR_CADT_MAX = 0x10,IPSET_ATTR_GC = 0x11,IPSET_ATTR_HASHSIZE = 0x12,IPSET_ATTR_MAXELEM = 0x13,IPSET_ATTR_NETMASK = 0x14,IPSET_ATTR_PROBES = 0x15,IPSET_ATTR_RESIZE = 0x16,IPSET_ATTR_SIZE = 0x17,IPSET_ATTR_ELEMENTS = 0x18,IPSET_ATTR_REFERENCES = 0x19,IPSET_ATTR_MEMSIZE = 0x1A,__IPSET_ATTR_CREATE_MAX = 0x1B,};
enum _7B4937F8288E0A2632DB0D8517829904 {NET_LLC_STATION_ACK_TIMEOUT = 0x1,};
enum _7B57B1F9E663B4653FAF07327D18ADAC {WIMAX_GNL_OP_MSG_FROM_USER = 0x0,WIMAX_GNL_OP_MSG_TO_USER = 0x1,WIMAX_GNL_OP_RFKILL = 0x2,WIMAX_GNL_OP_RESET = 0x3,WIMAX_GNL_RE_STATE_CHANGE = 0x4,WIMAX_GNL_OP_STATE_GET = 0x5,};
enum _7C50F3C3894F077543696800C1FAB2F8 {TCA_STATS_UNSPEC = 0x0,TCA_STATS_BASIC = 0x1,TCA_STATS_RATE_EST = 0x2,TCA_STATS_QUEUE = 0x3,TCA_STATS_APP = 0x4,TCA_STATS_RATE_EST64 = 0x5,__TCA_STATS_MAX = 0x6,};
enum _7C6A1E1ACDF4A97E77CE90783425BCA4 {CLD_EXITED = 0x1,CLD_KILLED = 0x2,CLD_DUMPED = 0x3,CLD_TRAPPED = 0x4,CLD_STOPPED = 0x5,CLD_CONTINUED = 0x6,};
enum _7C9FF39C24F25E164BD18AB0103F82B1 {TCA_FQ_CODEL_UNSPEC = 0x0,TCA_FQ_CODEL_TARGET = 0x1,TCA_FQ_CODEL_LIMIT = 0x2,TCA_FQ_CODEL_INTERVAL = 0x3,TCA_FQ_CODEL_ECN = 0x4,TCA_FQ_CODEL_FLOWS = 0x5,TCA_FQ_CODEL_QUANTUM = 0x6,__TCA_FQ_CODEL_MAX = 0x7,};
enum _7D22ABE4F416585741F30E44F0EDEE15 {CTRL_ATTR_UNSPEC = 0x0,CTRL_ATTR_FAMILY_ID = 0x1,CTRL_ATTR_FAMILY_NAME = 0x2,CTRL_ATTR_VERSION = 0x3,CTRL_ATTR_HDRSIZE = 0x4,CTRL_ATTR_MAXATTR = 0x5,CTRL_ATTR_OPS = 0x6,CTRL_ATTR_MCAST_GROUPS = 0x7,__CTRL_ATTR_MAX = 0x8,};
enum _7D248C2BA9E6180037EC53DE187BB962 {TCA_CSUM_UPDATE_FLAG_IPV4HDR = 0x1,TCA_CSUM_UPDATE_FLAG_ICMP = 0x2,TCA_CSUM_UPDATE_FLAG_IGMP = 0x4,TCA_CSUM_UPDATE_FLAG_TCP = 0x8,TCA_CSUM_UPDATE_FLAG_UDP = 0x10,TCA_CSUM_UPDATE_FLAG_UDPLITE = 0x20,};
enum _7D8899B18D60224BD7DC00379072D77E {CTL_BUS_ISA = 0x1,};
enum _7E01CE14C81EB344BA89ACF35D154CDC {PORT_VDP_RESPONSE_SUCCESS = 0x0,PORT_VDP_RESPONSE_INVALID_FORMAT = 0x1,PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES = 0x2,PORT_VDP_RESPONSE_UNUSED_VTID = 0x3,PORT_VDP_RESPONSE_VTID_VIOLATION = 0x4,PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION = 0x5,PORT_VDP_RESPONSE_OUT_OF_SYNC = 0x6,PORT_PROFILE_RESPONSE_SUCCESS = 0x100,PORT_PROFILE_RESPONSE_INPROGRESS = 0x101,PORT_PROFILE_RESPONSE_INVALID = 0x102,PORT_PROFILE_RESPONSE_BADSTATE = 0x103,PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES = 0x104,PORT_PROFILE_RESPONSE_ERROR = 0x105,};
enum _7E263BECC7A40AA9D137F4487FC127DB {CGROUPSTATS_TYPE_UNSPEC = 0x0,CGROUPSTATS_TYPE_CGROUP_STATS = 0x1,__CGROUPSTATS_TYPE_MAX = 0x2,};
enum _7E6CC9AB302A52DC230FBF2181C351A3 {NET_LLC2 = 0x1,NET_LLC_STATION = 0x2,};
enum _7E9EEB213B44E49672890343BD3F9ECB {IB_USER_CM_CMD_CREATE_ID = 0x0,IB_USER_CM_CMD_DESTROY_ID = 0x1,IB_USER_CM_CMD_ATTR_ID = 0x2,IB_USER_CM_CMD_LISTEN = 0x3,IB_USER_CM_CMD_NOTIFY = 0x4,IB_USER_CM_CMD_SEND_REQ = 0x5,IB_USER_CM_CMD_SEND_REP = 0x6,IB_USER_CM_CMD_SEND_RTU = 0x7,IB_USER_CM_CMD_SEND_DREQ = 0x8,IB_USER_CM_CMD_SEND_DREP = 0x9,IB_USER_CM_CMD_SEND_REJ = 0xA,IB_USER_CM_CMD_SEND_MRA = 0xB,IB_USER_CM_CMD_SEND_LAP = 0xC,IB_USER_CM_CMD_SEND_APR = 0xD,IB_USER_CM_CMD_SEND_SIDR_REQ = 0xE,IB_USER_CM_CMD_SEND_SIDR_REP = 0xF,IB_USER_CM_CMD_EVENT = 0x10,IB_USER_CM_CMD_INIT_QP_ATTR = 0x11,};
enum _7EB812C4A6A498AEA47162F8A59A1FEB {IFLA_BRPORT_UNSPEC = 0x0,IFLA_BRPORT_STATE = 0x1,IFLA_BRPORT_PRIORITY = 0x2,IFLA_BRPORT_COST = 0x3,IFLA_BRPORT_MODE = 0x4,IFLA_BRPORT_GUARD = 0x5,IFLA_BRPORT_PROTECT = 0x6,IFLA_BRPORT_FAST_LEAVE = 0x7,IFLA_BRPORT_LEARNING = 0x8,IFLA_BRPORT_UNICAST_FLOOD = 0x9,__IFLA_BRPORT_MAX = 0xA,};
enum _7FA4F136339AFDE75A144CDF3201B9FD {L2TP_ATTR_NONE = 0x0,L2TP_ATTR_PW_TYPE = 0x1,L2TP_ATTR_ENCAP_TYPE = 0x2,L2TP_ATTR_OFFSET = 0x3,L2TP_ATTR_DATA_SEQ = 0x4,L2TP_ATTR_L2SPEC_TYPE = 0x5,L2TP_ATTR_L2SPEC_LEN = 0x6,L2TP_ATTR_PROTO_VERSION = 0x7,L2TP_ATTR_IFNAME = 0x8,L2TP_ATTR_CONN_ID = 0x9,L2TP_ATTR_PEER_CONN_ID = 0xA,L2TP_ATTR_SESSION_ID = 0xB,L2TP_ATTR_PEER_SESSION_ID = 0xC,L2TP_ATTR_UDP_CSUM = 0xD,L2TP_ATTR_VLAN_ID = 0xE,L2TP_ATTR_COOKIE = 0xF,L2TP_ATTR_PEER_COOKIE = 0x10,L2TP_ATTR_DEBUG = 0x11,L2TP_ATTR_RECV_SEQ = 0x12,L2TP_ATTR_SEND_SEQ = 0x13,L2TP_ATTR_LNS_MODE = 0x14,L2TP_ATTR_USING_IPSEC = 0x15,L2TP_ATTR_RECV_TIMEOUT = 0x16,L2TP_ATTR_FD = 0x17,L2TP_ATTR_IP_SADDR = 0x18,L2TP_ATTR_IP_DADDR = 0x19,L2TP_ATTR_UDP_SPORT = 0x1A,L2TP_ATTR_UDP_DPORT = 0x1B,L2TP_ATTR_MTU = 0x1C,L2TP_ATTR_MRU = 0x1D,L2TP_ATTR_STATS = 0x1E,L2TP_ATTR_IP6_SADDR = 0x1F,L2TP_ATTR_IP6_DADDR = 0x20,__L2TP_ATTR_MAX = 0x21,};
enum _7FDF36A8BD98BAF3CDE12BEB3C657AA7 {LA_SER_ORIG = 0x1,LA_SER_LIBPATH = 0x2,LA_SER_RUNPATH = 0x4,LA_SER_CONFIG = 0x8,LA_SER_DEFAULT = 0x40,LA_SER_SECURE = 0x80,};
enum _802A3D442E6C80C636AECC662DA40A51 {PMU_UNKNOWN = 0x0,PMU_OHARE_BASED = 0x1,PMU_HEATHROW_BASED = 0x2,PMU_PADDINGTON_BASED = 0x3,PMU_KEYLARGO_BASED = 0x4,PMU_68K_V1 = 0x5,PMU_68K_V2 = 0x6,};
enum _806899048DC823723887265795521570 {NET_IRDA_DISCOVERY = 0x1,NET_IRDA_DEVNAME = 0x2,NET_IRDA_DEBUG = 0x3,NET_IRDA_FAST_POLL = 0x4,NET_IRDA_DISCOVERY_SLOTS = 0x5,NET_IRDA_DISCOVERY_TIMEOUT = 0x6,NET_IRDA_SLOT_TIMEOUT = 0x7,NET_IRDA_MAX_BAUD_RATE = 0x8,NET_IRDA_MIN_TX_TURN_TIME = 0x9,NET_IRDA_MAX_TX_DATA_SIZE = 0xA,NET_IRDA_MAX_TX_WINDOW = 0xB,NET_IRDA_MAX_NOREPLY_TIME = 0xC,NET_IRDA_WARN_NOREPLY_TIME = 0xD,NET_IRDA_LAP_KEEPALIVE_TIME = 0xE,};
enum _807353C2561437682B85CDC20D8F25D2 {RANDOM_POOLSIZE = 0x1,RANDOM_ENTROPY_COUNT = 0x2,RANDOM_READ_THRESH = 0x3,RANDOM_WRITE_THRESH = 0x4,RANDOM_BOOT_ID = 0x5,RANDOM_UUID = 0x6,};
enum _8080A3E62EFC198559DDBFF335DAD0DF {FTW_F = 0x0,FTW_D = 0x1,FTW_DNR = 0x2,FTW_NS = 0x3,FTW_SL = 0x4,FTW_DP = 0x5,FTW_SLN = 0x6,};
enum _80863383835932AA27788F4BC43FF174 {NET_IPV4_FORWARD = 0x8,NET_IPV4_DYNADDR = 0x9,NET_IPV4_CONF = 0x10,NET_IPV4_NEIGH = 0x11,NET_IPV4_ROUTE = 0x12,NET_IPV4_FIB_HASH = 0x13,NET_IPV4_NETFILTER = 0x14,NET_IPV4_TCP_TIMESTAMPS = 0x21,NET_IPV4_TCP_WINDOW_SCALING = 0x22,NET_IPV4_TCP_SACK = 0x23,NET_IPV4_TCP_RETRANS_COLLAPSE = 0x24,NET_IPV4_DEFAULT_TTL = 0x25,NET_IPV4_AUTOCONFIG = 0x26,NET_IPV4_NO_PMTU_DISC = 0x27,NET_IPV4_TCP_SYN_RETRIES = 0x28,NET_IPV4_IPFRAG_HIGH_THRESH = 0x29,NET_IPV4_IPFRAG_LOW_THRESH = 0x2A,NET_IPV4_IPFRAG_TIME = 0x2B,NET_IPV4_TCP_MAX_KA_PROBES = 0x2C,NET_IPV4_TCP_KEEPALIVE_TIME = 0x2D,NET_IPV4_TCP_KEEPALIVE_PROBES = 0x2E,NET_IPV4_TCP_RETRIES1 = 0x2F,NET_IPV4_TCP_RETRIES2 = 0x30,NET_IPV4_TCP_FIN_TIMEOUT = 0x31,NET_IPV4_IP_MASQ_DEBUG = 0x32,NET_TCP_SYNCOOKIES = 0x33,NET_TCP_STDURG = 0x34,NET_TCP_RFC1337 = 0x35,NET_TCP_SYN_TAILDROP = 0x36,NET_TCP_MAX_SYN_BACKLOG = 0x37,NET_IPV4_LOCAL_PORT_RANGE = 0x38,NET_IPV4_ICMP_ECHO_IGNORE_ALL = 0x39,NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS = 0x3A,NET_IPV4_ICMP_SOURCEQUENCH_RATE = 0x3B,NET_IPV4_ICMP_DESTUNREACH_RATE = 0x3C,NET_IPV4_ICMP_TIMEEXCEED_RATE = 0x3D,NET_IPV4_ICMP_PARAMPROB_RATE = 0x3E,NET_IPV4_ICMP_ECHOREPLY_RATE = 0x3F,NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES = 0x40,NET_IPV4_IGMP_MAX_MEMBERSHIPS = 0x41,NET_TCP_TW_RECYCLE = 0x42,NET_IPV4_ALWAYS_DEFRAG = 0x43,NET_IPV4_TCP_KEEPALIVE_INTVL = 0x44,NET_IPV4_INET_PEER_THRESHOLD = 0x45,NET_IPV4_INET_PEER_MINTTL = 0x46,NET_IPV4_INET_PEER_MAXTTL = 0x47,NET_IPV4_INET_PEER_GC_MINTIME = 0x48,NET_IPV4_INET_PEER_GC_MAXTIME = 0x49,NET_TCP_ORPHAN_RETRIES = 0x4A,NET_TCP_ABORT_ON_OVERFLOW = 0x4B,NET_TCP_SYNACK_RETRIES = 0x4C,NET_TCP_MAX_ORPHANS = 0x4D,NET_TCP_MAX_TW_BUCKETS = 0x4E,NET_TCP_FACK = 0x4F,NET_TCP_REORDERING = 0x50,NET_TCP_ECN = 0x51,NET_TCP_DSACK = 0x52,NET_TCP_MEM = 0x53,NET_TCP_WMEM = 0x54,NET_TCP_RMEM = 0x55,NET_TCP_APP_WIN = 0x56,NET_TCP_ADV_WIN_SCALE = 0x57,NET_IPV4_NONLOCAL_BIND = 0x58,NET_IPV4_ICMP_RATELIMIT = 0x59,NET_IPV4_ICMP_RATEMASK = 0x5A,NET_TCP_TW_REUSE = 0x5B,NET_TCP_FRTO = 0x5C,NET_TCP_LOW_LATENCY = 0x5D,NET_IPV4_IPFRAG_SECRET_INTERVAL = 0x5E,NET_IPV4_IGMP_MAX_MSF = 0x60,NET_TCP_NO_METRICS_SAVE = 0x61,NET_TCP_DEFAULT_WIN_SCALE = 0x69,NET_TCP_MODERATE_RCVBUF = 0x6A,NET_TCP_TSO_WIN_DIVISOR = 0x6B,NET_TCP_BIC_BETA = 0x6C,NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR = 0x6D,NET_TCP_CONG_CONTROL = 0x6E,NET_TCP_ABC = 0x6F,NET_IPV4_IPFRAG_MAX_DIST = 0x70,NET_TCP_MTU_PROBING = 0x71,NET_TCP_BASE_MSS = 0x72,NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS = 0x73,NET_TCP_DMA_COPYBREAK = 0x74,NET_TCP_SLOW_START_AFTER_IDLE = 0x75,NET_CIPSOV4_CACHE_ENABLE = 0x76,NET_CIPSOV4_CACHE_BUCKET_SIZE = 0x77,NET_CIPSOV4_RBM_OPTFMT = 0x78,NET_CIPSOV4_RBM_STRICTVALID = 0x79,NET_TCP_AVAIL_CONG_CONTROL = 0x7A,NET_TCP_ALLOWED_CONG_CONTROL = 0x7B,NET_TCP_MAX_SSTHRESH = 0x7C,NET_TCP_FRTO_RESPONSE = 0x7D,};
enum _80C7D57E2FC874DBEC1878CAA599CEAE {NDTA_UNSPEC = 0x0,NDTA_NAME = 0x1,NDTA_THRESH1 = 0x2,NDTA_THRESH2 = 0x3,NDTA_THRESH3 = 0x4,NDTA_CONFIG = 0x5,NDTA_PARMS = 0x6,NDTA_STATS = 0x7,NDTA_GC_INTERVAL = 0x8,__NDTA_MAX = 0x9,};
enum _80DE4FDC346427191D61CEE4C4FB39C6 {TCP_METRICS_ATTR_UNSPEC = 0x0,TCP_METRICS_ATTR_ADDR_IPV4 = 0x1,TCP_METRICS_ATTR_ADDR_IPV6 = 0x2,TCP_METRICS_ATTR_AGE = 0x3,TCP_METRICS_ATTR_TW_TSVAL = 0x4,TCP_METRICS_ATTR_TW_TS_STAMP = 0x5,TCP_METRICS_ATTR_VALS = 0x6,TCP_METRICS_ATTR_FOPEN_MSS = 0x7,TCP_METRICS_ATTR_FOPEN_SYN_DROPS = 0x8,TCP_METRICS_ATTR_FOPEN_SYN_DROP_TS = 0x9,TCP_METRICS_ATTR_FOPEN_COOKIE = 0xA,__TCP_METRICS_ATTR_MAX = 0xB,};
enum _8121F3393B56EF45A4608DC145F43305 {DEV_CDROM_INFO = 0x1,DEV_CDROM_AUTOCLOSE = 0x2,DEV_CDROM_AUTOEJECT = 0x3,DEV_CDROM_DEBUG = 0x4,DEV_CDROM_LOCK = 0x5,DEV_CDROM_CHECK_MEDIA = 0x6,};
enum _823E553A144CDDD133CDECD3AD2FB83D {LA_ACT_CONSISTENT = 0x0,LA_ACT_ADD = 0x1,LA_ACT_DELETE = 0x2,};
enum _830CFE13F870B9281FC8505551EB61DA {MS_RDONLY = 0x1,MS_NOSUID = 0x2,MS_NODEV = 0x4,MS_NOEXEC = 0x8,MS_SYNCHRONOUS = 0x10,MS_REMOUNT = 0x20,MS_MANDLOCK = 0x40,MS_DIRSYNC = 0x80,MS_NOATIME = 0x400,MS_NODIRATIME = 0x800,MS_BIND = 0x1000,MS_MOVE = 0x2000,MS_REC = 0x4000,MS_SILENT = 0x8000,MS_POSIXACL = 0x10000,MS_UNBINDABLE = 0x20000,MS_PRIVATE = 0x40000,MS_SLAVE = 0x80000,MS_SHARED = 0x100000,MS_RELATIME = 0x200000,MS_KERNMOUNT = 0x400000,MS_I_VERSION = 0x800000,MS_STRICTATIME = 0x1000000,MS_ACTIVE = 0x40000000,MS_NOUSER = 0x80000000,};
enum _8333E614450FC8A6F0181766898175B1 {TCA_TBF_UNSPEC = 0x0,TCA_TBF_PARMS = 0x1,TCA_TBF_RTAB = 0x2,TCA_TBF_PTAB = 0x3,__TCA_TBF_MAX = 0x4,};
enum _8342ACF1596C20AFB098E0618220285F {DMX_OUT_DECODER = 0x0,DMX_OUT_TAP = 0x1,DMX_OUT_TS_TAP = 0x2,DMX_OUT_TSDEMUX_TAP = 0x3,};
enum _8369B63849D2D169846E3C4BD2DD9746 {IFLA_VXLAN_UNSPEC = 0x0,IFLA_VXLAN_ID = 0x1,IFLA_VXLAN_GROUP = 0x2,IFLA_VXLAN_LINK = 0x3,IFLA_VXLAN_LOCAL = 0x4,IFLA_VXLAN_TTL = 0x5,IFLA_VXLAN_TOS = 0x6,IFLA_VXLAN_LEARNING = 0x7,IFLA_VXLAN_AGEING = 0x8,IFLA_VXLAN_LIMIT = 0x9,IFLA_VXLAN_PORT_RANGE = 0xA,IFLA_VXLAN_PROXY = 0xB,IFLA_VXLAN_RSC = 0xC,IFLA_VXLAN_L2MISS = 0xD,IFLA_VXLAN_L3MISS = 0xE,IFLA_VXLAN_PORT = 0xF,__IFLA_VXLAN_MAX = 0x10,};
enum _84297C091C38F94F597DAF817054F17D {DLM_TYPE_UNSPEC = 0x0,DLM_TYPE_LOCK = 0x1,__DLM_TYPE_MAX = 0x2,};
enum _86DEB66C19F24B8F0BC3CEFDC19B8707 {VM_UNUSED1 = 0x1,VM_UNUSED2 = 0x2,VM_UNUSED3 = 0x3,VM_UNUSED4 = 0x4,VM_OVERCOMMIT_MEMORY = 0x5,VM_UNUSED5 = 0x6,VM_UNUSED7 = 0x7,VM_UNUSED8 = 0x8,VM_UNUSED9 = 0x9,VM_PAGE_CLUSTER = 0xA,VM_DIRTY_BACKGROUND = 0xB,VM_DIRTY_RATIO = 0xC,VM_DIRTY_WB_CS = 0xD,VM_DIRTY_EXPIRE_CS = 0xE,VM_NR_PDFLUSH_THREADS = 0xF,VM_OVERCOMMIT_RATIO = 0x10,VM_PAGEBUF = 0x11,VM_HUGETLB_PAGES = 0x12,VM_SWAPPINESS = 0x13,VM_LOWMEM_RESERVE_RATIO = 0x14,VM_MIN_FREE_KBYTES = 0x15,VM_MAX_MAP_COUNT = 0x16,VM_LAPTOP_MODE = 0x17,VM_BLOCK_DUMP = 0x18,VM_HUGETLB_GROUP = 0x19,VM_VFS_CACHE_PRESSURE = 0x1A,VM_LEGACY_VA_LAYOUT = 0x1B,VM_SWAP_TOKEN_TIMEOUT = 0x1C,VM_DROP_PAGECACHE = 0x1D,VM_PERCPU_PAGELIST_FRACTION = 0x1E,VM_ZONE_RECLAIM_MODE = 0x1F,VM_MIN_UNMAPPED = 0x20,VM_PANIC_ON_OOM = 0x21,VM_VDSO_ENABLED = 0x22,VM_MIN_SLAB = 0x23,};
enum _875DC6519C1A1D10FD23227495805A2A {PER_LINUX = 0x0,PER_LINUX_32BIT = 0x800000,PER_SVR4 = 0x4100001,PER_SVR3 = 0x5000002,PER_SCOSVR3 = 0x7000003,PER_OSR5 = 0x6000003,PER_WYSEV386 = 0x5000004,PER_ISCR4 = 0x4000005,PER_BSD = 0x6,PER_SUNOS = 0x4000006,PER_XENIX = 0x5000007,PER_LINUX32 = 0x8,PER_LINUX32_3GB = 0x8000008,PER_IRIX32 = 0x4000009,PER_IRIXN32 = 0x400000A,PER_IRIX64 = 0x400000B,PER_RISCOS = 0xC,PER_SOLARIS = 0x400000D,PER_UW7 = 0x410000E,PER_OSF4 = 0xF,PER_HPUX = 0x10,PER_MASK = 0xFF,};
struct _880211171E610BEC08A41169F91F4D60 {unsigned __int8 cmd;char nr_args;char nr_returns;unsigned __int8 data[30];};
enum _8823E4385667F399442D029ECC89BADC {MM_HARD = 0x1,MM_SOFT = 0x2,MM_FIRM = 0x4,MM_APPL = 0x8,MM_UTIL = 0x10,MM_OPSYS = 0x20,MM_RECOVER = 0x40,MM_NRECOV = 0x80,MM_PRINT = 0x100,MM_CONSOLE = 0x200,};
enum _88FDD631057F225C90D91D653BA8EE00 {TCA_NETEM_UNSPEC = 0x0,TCA_NETEM_CORR = 0x1,TCA_NETEM_DELAY_DIST = 0x2,TCA_NETEM_REORDER = 0x3,TCA_NETEM_CORRUPT = 0x4,TCA_NETEM_LOSS = 0x5,TCA_NETEM_RATE = 0x6,TCA_NETEM_ECN = 0x7,__TCA_NETEM_MAX = 0x8,};
enum _891529C55A3D7F6C466AE0BA608A35EA {P_ALL = 0x0,P_PID = 0x1,P_PGID = 0x2,};
enum _8949FC64C3FB060F387E777DE2068256 {PREFIX_UNSPEC = 0x0,PREFIX_ADDRESS = 0x1,PREFIX_CACHEINFO = 0x2,__PREFIX_MAX = 0x3,};
enum _89FB60EA18EC68E58342D0F505790FD5 {TD_THR_ANY_TYPE = 0x0,TD_THR_USER = 0x1,TD_THR_SYSTEM = 0x2,};
enum _8A6AACAD760539D4E3E555AEA80DCE78 {RDMA_NL_RDMA_CM = 0x1,};
enum _8AFD18FC922FC6744399BFD3C11E79EB {QIF_BLIMITS_B = 0x0,QIF_SPACE_B = 0x1,QIF_ILIMITS_B = 0x2,QIF_INODES_B = 0x3,QIF_BTIME_B = 0x4,QIF_ITIME_B = 0x5,};
enum _8B1B54073D2CD2A498EB774DE252EA69 {RTAX_UNSPEC = 0x0,RTAX_LOCK = 0x1,RTAX_MTU = 0x2,RTAX_WINDOW = 0x3,RTAX_RTT = 0x4,RTAX_RTTVAR = 0x5,RTAX_SSTHRESH = 0x6,RTAX_CWND = 0x7,RTAX_ADVMSS = 0x8,RTAX_REORDERING = 0x9,RTAX_HOPLIMIT = 0xA,RTAX_INITCWND = 0xB,RTAX_FEATURES = 0xC,RTAX_RTO_MIN = 0xD,RTAX_INITRWND = 0xE,RTAX_QUICKACK = 0xF,__RTAX_MAX = 0x10,};
enum _8B8F331936A9C3786664C6159BA2308F {REG_ENOSYS = 0xFFFFFFFF,REG_NOERROR = 0x0,REG_NOMATCH = 0x1,REG_BADPAT = 0x2,REG_ECOLLATE = 0x3,REG_ECTYPE = 0x4,REG_EESCAPE = 0x5,REG_ESUBREG = 0x6,REG_EBRACK = 0x7,REG_EPAREN = 0x8,REG_EBRACE = 0x9,REG_BADBR = 0xA,REG_ERANGE = 0xB,REG_ESPACE = 0xC,REG_BADRPT = 0xD,REG_EEND = 0xE,REG_ESIZE = 0xF,REG_ERPAREN = 0x10,};
enum _8B9F5C98200A9797B04E3604F16BEDF6 {vendor = 0x0,device = 0x1,port = 0x2,codec = 0x3,dsp = 0x4,};
enum _8DB803BC5513738C8EA3309052018F73 {NET_DECNET_NODE_TYPE = 0x1,NET_DECNET_NODE_ADDRESS = 0x2,NET_DECNET_NODE_NAME = 0x3,NET_DECNET_DEFAULT_DEVICE = 0x4,NET_DECNET_TIME_WAIT = 0x5,NET_DECNET_DN_COUNT = 0x6,NET_DECNET_DI_COUNT = 0x7,NET_DECNET_DR_COUNT = 0x8,NET_DECNET_DST_GC_INTERVAL = 0x9,NET_DECNET_CONF = 0xA,NET_DECNET_NO_FC_MAX_CWND = 0xB,NET_DECNET_MEM = 0xC,NET_DECNET_RMEM = 0xD,NET_DECNET_WMEM = 0xE,NET_DECNET_DEBUG_LEVEL = 0xFF,};
enum _8DD5D767F670E8258E61E02344E157E6 {NET_NEIGH_MCAST_SOLICIT = 0x1,NET_NEIGH_UCAST_SOLICIT = 0x2,NET_NEIGH_APP_SOLICIT = 0x3,NET_NEIGH_RETRANS_TIME = 0x4,NET_NEIGH_REACHABLE_TIME = 0x5,NET_NEIGH_DELAY_PROBE_TIME = 0x6,NET_NEIGH_GC_STALE_TIME = 0x7,NET_NEIGH_UNRES_QLEN = 0x8,NET_NEIGH_PROXY_QLEN = 0x9,NET_NEIGH_ANYCAST_DELAY = 0xA,NET_NEIGH_PROXY_DELAY = 0xB,NET_NEIGH_LOCKTIME = 0xC,NET_NEIGH_GC_INTERVAL = 0xD,NET_NEIGH_GC_THRESH1 = 0xE,NET_NEIGH_GC_THRESH2 = 0xF,NET_NEIGH_GC_THRESH3 = 0x10,NET_NEIGH_RETRANS_TIME_MS = 0x11,NET_NEIGH_REACHABLE_TIME_MS = 0x12,};
enum _8E161423434F8AC50E1B64633E1606E9 {PLAY_ONCE = 0x0,REPEAT_LAST_ELEMENT = 0x1,REPEAT_ALL = 0x2,};
enum _8E8655C6393C642B720C9ABE3131B179 {IPSET_ERR_HASH_FULL = 0x1100,IPSET_ERR_HASH_ELEM = 0x1101,IPSET_ERR_INVALID_PROTO = 0x1102,IPSET_ERR_MISSING_PROTO = 0x1103,IPSET_ERR_HASH_RANGE_UNSUPPORTED = 0x1104,IPSET_ERR_HASH_RANGE = 0x1105,};
enum _8EC66680EECBA70CAB8C79AB9DDF086D {IFLA_VF_INFO_UNSPEC = 0x0,IFLA_VF_INFO = 0x1,__IFLA_VF_INFO_MAX = 0x2,};
enum _8FC4076AEC894016ABA04323416517B2 {TASKSTATS_CMD_ATTR_UNSPEC = 0x0,TASKSTATS_CMD_ATTR_PID = 0x1,TASKSTATS_CMD_ATTR_TGID = 0x2,TASKSTATS_CMD_ATTR_REGISTER_CPUMASK = 0x3,TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK = 0x4,__TASKSTATS_CMD_ATTR_MAX = 0x5,};
enum _901F708DBF4DA94DDD2887E82F0A57D7 {SNDRV_RAWMIDI_STREAM_OUTPUT = 0x0,SNDRV_RAWMIDI_STREAM_INPUT = 0x1,SNDRV_RAWMIDI_STREAM_LAST = 0x1,};
enum _9051D8B3F8B003A45CF2C181583131A8 {SEGV_MAPERR = 0x1,SEGV_ACCERR = 0x2,};
enum _921B804C5CB7E03958A5E43A5656BF3D {DEV_IPMI_POWEROFF_POWERCYCLE = 0x1,};
enum _92D653D0A86EC15D14567E75C6917E11 {FLOW_KEY_SRC = 0x0,FLOW_KEY_DST = 0x1,FLOW_KEY_PROTO = 0x2,FLOW_KEY_PROTO_SRC = 0x3,FLOW_KEY_PROTO_DST = 0x4,FLOW_KEY_IIF = 0x5,FLOW_KEY_PRIORITY = 0x6,FLOW_KEY_MARK = 0x7,FLOW_KEY_NFCT = 0x8,FLOW_KEY_NFCT_SRC = 0x9,FLOW_KEY_NFCT_DST = 0xA,FLOW_KEY_NFCT_PROTO_SRC = 0xB,FLOW_KEY_NFCT_PROTO_DST = 0xC,FLOW_KEY_RTCLASSID = 0xD,FLOW_KEY_SKUID = 0xE,FLOW_KEY_SKGID = 0xF,FLOW_KEY_VLAN_TAG = 0x10,FLOW_KEY_RXHASH = 0x11,__FLOW_KEY_MAX = 0x12,};
enum _94296112375BC73CC9F9E22731646721 {NET_CORE = 0x1,NET_ETHER = 0x2,NET_802 = 0x3,NET_UNIX = 0x4,NET_IPV4 = 0x5,NET_IPX = 0x6,NET_ATALK = 0x7,NET_NETROM = 0x8,NET_AX25 = 0x9,NET_BRIDGE = 0xA,NET_ROSE = 0xB,NET_IPV6 = 0xC,NET_X25 = 0xD,NET_TR = 0xE,NET_DECNET = 0xF,NET_ECONET = 0x10,NET_SCTP = 0x11,NET_LLC = 0x12,NET_NETFILTER = 0x13,NET_DCCP = 0x14,NET_IRDA = 0x19C,};
enum _94F6FE507B276BD91AE118B5475E480D {EFD_SEMAPHORE = 0x1,EFD_CLOEXEC = 0x80000,EFD_NONBLOCK = 0x800,};
struct _96852D299A3BC18B35313C48EFA48634 {unsigned int clock_rate;unsigned int clock_type;unsigned __int16 loopback;unsigned int slot_map;};
enum _96E1CC93C2F1CFF48C6FE97FA848F82E {BUS_ADRALN = 0x1,BUS_ADRERR = 0x2,BUS_OBJERR = 0x3,};
struct _9722585E737591D9DBBFC1CA80083F53 {int __val[2];};
enum _976B6DCC8898CDC49E540428DF0A503A {TCA_QFQ_UNSPEC = 0x0,TCA_QFQ_WEIGHT = 0x1,TCA_QFQ_LMAX = 0x2,__TCA_QFQ_MAX = 0x3,};
struct _979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
enum _984C7F3AA62BD6C40D9C1F9A6C529348 {TFD_CLOEXEC = 0x80000,TFD_NONBLOCK = 0x800,};
enum _98D97DBC17BA1BD3C1A644EF27E14AF1 {IFA_UNSPEC = 0x0,IFA_ADDRESS = 0x1,IFA_LOCAL = 0x2,IFA_LABEL = 0x3,IFA_BROADCAST = 0x4,IFA_ANYCAST = 0x5,IFA_CACHEINFO = 0x6,IFA_MULTICAST = 0x7,__IFA_MAX = 0x8,};
enum _993C942BC2424E51BD43B9D3E4340723 {TCA_FW_UNSPEC = 0x0,TCA_FW_CLASSID = 0x1,TCA_FW_POLICE = 0x2,TCA_FW_INDEV = 0x3,TCA_FW_ACT = 0x4,TCA_FW_MASK = 0x5,__TCA_FW_MAX = 0x6,};
enum _99E321331BBA12F31CC667562A97BBAB {TEAM_ATTR_UNSPEC = 0x0,TEAM_ATTR_TEAM_IFINDEX = 0x1,TEAM_ATTR_LIST_OPTION = 0x2,TEAM_ATTR_LIST_PORT = 0x3,__TEAM_ATTR_MAX = 0x4,TEAM_ATTR_MAX = 0x3,};
enum _99F06BB7B32F81279C6D55AC0ACD1245 {PMU_PWR_GET_POWERUP_EVENTS = 0x0,PMU_PWR_SET_POWERUP_EVENTS = 0x1,PMU_PWR_CLR_POWERUP_EVENTS = 0x2,PMU_PWR_GET_WAKEUP_EVENTS = 0x3,PMU_PWR_SET_WAKEUP_EVENTS = 0x4,PMU_PWR_CLR_WAKEUP_EVENTS = 0x5,};
enum _9A29FE85170733A7F200BB4E8F1B3BAF {WIMAX_GNL_RFKILL_IFIDX = 0x1,WIMAX_GNL_RFKILL_STATE = 0x2,};
enum _9A3D0B76E55563B57E766F061CFD3C15 {IPSET_ATTR_ETHER = 0x11,IPSET_ATTR_NAME = 0x12,IPSET_ATTR_NAMEREF = 0x13,IPSET_ATTR_IP2 = 0x14,IPSET_ATTR_CIDR2 = 0x15,IPSET_ATTR_IP2_TO = 0x16,IPSET_ATTR_IFACE = 0x17,IPSET_ATTR_BYTES = 0x18,IPSET_ATTR_PACKETS = 0x19,__IPSET_ATTR_ADT_MAX = 0x1A,};
enum _9B1B5FA3ECD448D3BB493C5C9A3FF55C {XT_IPVS_IPVS_PROPERTY = 0x1,XT_IPVS_PROTO = 0x2,XT_IPVS_VADDR = 0x4,XT_IPVS_VPORT = 0x8,XT_IPVS_DIR = 0x10,XT_IPVS_METHOD = 0x20,XT_IPVS_VPORTCTL = 0x40,XT_IPVS_MASK = 0x7F,XT_IPVS_ONCE_MASK = 0x7E,};
enum _9BED1BF0E8DDE9F15382721D74A055CE {MDBA_SET_ENTRY_UNSPEC = 0x0,MDBA_SET_ENTRY = 0x1,__MDBA_SET_ENTRY_MAX = 0x2,};
enum _9C31C63761D5D352F3EF8F6380D9A3A0 {NET_IPV6_CONF = 0x10,NET_IPV6_NEIGH = 0x11,NET_IPV6_ROUTE = 0x12,NET_IPV6_ICMP = 0x13,NET_IPV6_BINDV6ONLY = 0x14,NET_IPV6_IP6FRAG_HIGH_THRESH = 0x15,NET_IPV6_IP6FRAG_LOW_THRESH = 0x16,NET_IPV6_IP6FRAG_TIME = 0x17,NET_IPV6_IP6FRAG_SECRET_INTERVAL = 0x18,NET_IPV6_MLD_MAX_MSF = 0x19,};
enum _9CD73F9531C3235FCD002958ECF24B00 {MM_NOSEV = 0x0,MM_HALT = 0x1,MM_ERROR = 0x2,MM_WARNING = 0x3,MM_INFO = 0x4,};
struct _9FABDCAC63F9A2F0CDDE223D7391684B {char drvid[25];unsigned __int64 arg;};
enum _9FB7395153D05863D626573C97F792FB {TCA_EM_META_UNSPEC = 0x0,TCA_EM_META_HDR = 0x1,TCA_EM_META_LVALUE = 0x2,TCA_EM_META_RVALUE = 0x3,__TCA_EM_META_MAX = 0x4,};
enum _9FDB1DC3087894FFD516359229D0924F {EPOLL_CLOEXEC = 0x80000,EPOLL_NONBLOCK = 0x800,};
struct _A06AF73261543B69A785AD9B5C737D11 {int depth;int bits_per_pixel;int scanline_pad;};
enum _A0B53EA136FA2314F5898FE8DE6720E0 {IPSET_ATTR_IPADDR_IPV4 = 0x1,IPSET_ATTR_IPADDR_IPV6 = 0x2,__IPSET_ATTR_IPADDR_MAX = 0x3,};
enum _A10218CEF194EB6FBBE9E21A87C5D178 {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_MASTER = 0x400,IFF_SLAVE = 0x800,IFF_MULTICAST = 0x1000,IFF_PORTSEL = 0x2000,IFF_AUTOMEDIA = 0x4000,IFF_DYNAMIC = 0x8000,};
enum _A1B71DF242923800E8A326FDE4C5C9AC {TCA_U32_UNSPEC = 0x0,TCA_U32_CLASSID = 0x1,TCA_U32_HASH = 0x2,TCA_U32_LINK = 0x3,TCA_U32_DIVISOR = 0x4,TCA_U32_SEL = 0x5,TCA_U32_POLICE = 0x6,TCA_U32_ACT = 0x7,TCA_U32_INDEV = 0x8,TCA_U32_PCNT = 0x9,TCA_U32_MARK = 0xA,__TCA_U32_MAX = 0xB,};
enum _A1F4E146E4A9C538E4C431DD11458BA5 {TCP_METRICS_CMD_UNSPEC = 0x0,TCP_METRICS_CMD_GET = 0x1,TCP_METRICS_CMD_DEL = 0x2,__TCP_METRICS_CMD_MAX = 0x3,};
enum _A23EC6D250B2699FCF191160AD836A4E {CGROUPSTATS_CMD_ATTR_UNSPEC = 0x0,CGROUPSTATS_CMD_ATTR_FD = 0x1,__CGROUPSTATS_CMD_ATTR_MAX = 0x2,};
enum _A25907A73346B94A130ED14D25974A7A {X86_SUBARCH_PC = 0x0,X86_SUBARCH_LGUEST = 0x1,X86_SUBARCH_XEN = 0x2,X86_SUBARCH_MRST = 0x3,X86_SUBARCH_CE4100 = 0x4,X86_NR_SUBARCHS = 0x5,};
struct _A2DE5C624CAE7E415130221DEBE38D94 {char *device;int type;int baudrate;int samplerate;int resolution;int buttons;int emulate3buttons;int emulate3timeout;int chordmiddle;int flags;};
enum _A2F04AFED0D759E95510362442EAC31A {NET_IPV6_ICMP_RATELIMIT = 0x1,};
struct _A386896A7A6A8667CB6DAB8066B01EA8 {int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;};
enum _A3B50DA1FF8C79D9A91BF9F22852427A {NET_DM_CMD_UNSPEC = 0x0,NET_DM_CMD_ALERT = 0x1,NET_DM_CMD_CONFIG = 0x2,NET_DM_CMD_START = 0x3,NET_DM_CMD_STOP = 0x4,_NET_DM_CMD_MAX = 0x5,};
enum _A3E06CC4106525D3D49E75B7D75666C4 {FR_ACT_UNSPEC = 0x0,FR_ACT_TO_TBL = 0x1,FR_ACT_GOTO = 0x2,FR_ACT_NOP = 0x3,FR_ACT_RES3 = 0x4,FR_ACT_RES4 = 0x5,FR_ACT_BLACKHOLE = 0x6,FR_ACT_UNREACHABLE = 0x7,FR_ACT_PROHIBIT = 0x8,__FR_ACT_MAX = 0x9,};
union _A43692C56D550C478BB98A946A0505D5 {union wait *__uptr;int *__iptr;};
enum _A4FC3F986F398A5CBEAD24293CBFE469 {_PC_LINK_MAX = 0x0,_PC_MAX_CANON = 0x1,_PC_MAX_INPUT = 0x2,_PC_NAME_MAX = 0x3,_PC_PATH_MAX = 0x4,_PC_PIPE_BUF = 0x5,_PC_CHOWN_RESTRICTED = 0x6,_PC_NO_TRUNC = 0x7,_PC_VDISABLE = 0x8,_PC_SYNC_IO = 0x9,_PC_ASYNC_IO = 0xA,_PC_PRIO_IO = 0xB,_PC_SOCK_MAXBUF = 0xC,_PC_FILESIZEBITS = 0xD,_PC_REC_INCR_XFER_SIZE = 0xE,_PC_REC_MAX_XFER_SIZE = 0xF,_PC_REC_MIN_XFER_SIZE = 0x10,_PC_REC_XFER_ALIGN = 0x11,_PC_ALLOC_SIZE_MIN = 0x12,_PC_SYMLINK_MAX = 0x13,_PC_2_SYMLINKS = 0x14,};
enum _A562F6860B9C5935BD4BC45E5BD43625 {L2TP_CMD_NOOP = 0x0,L2TP_CMD_TUNNEL_CREATE = 0x1,L2TP_CMD_TUNNEL_DELETE = 0x2,L2TP_CMD_TUNNEL_MODIFY = 0x3,L2TP_CMD_TUNNEL_GET = 0x4,L2TP_CMD_SESSION_CREATE = 0x5,L2TP_CMD_SESSION_DELETE = 0x6,L2TP_CMD_SESSION_MODIFY = 0x7,L2TP_CMD_SESSION_GET = 0x8,__L2TP_CMD_MAX = 0x9,};
enum _A5D6A176C88BDB0415769B708E43E19A {IFLA_INFO_UNSPEC = 0x0,IFLA_INFO_KIND = 0x1,IFLA_INFO_DATA = 0x2,IFLA_INFO_XSTATS = 0x3,__IFLA_INFO_MAX = 0x4,};
enum _A5FAD939A03E96600D8AE64767EB1997 {IPVS_STATS_ATTR_UNSPEC = 0x0,IPVS_STATS_ATTR_CONNS = 0x1,IPVS_STATS_ATTR_INPKTS = 0x2,IPVS_STATS_ATTR_OUTPKTS = 0x3,IPVS_STATS_ATTR_INBYTES = 0x4,IPVS_STATS_ATTR_OUTBYTES = 0x5,IPVS_STATS_ATTR_CPS = 0x6,IPVS_STATS_ATTR_INPPS = 0x7,IPVS_STATS_ATTR_OUTPPS = 0x8,IPVS_STATS_ATTR_INBPS = 0x9,IPVS_STATS_ATTR_OUTBPS = 0xA,__IPVS_STATS_ATTR_MAX = 0xB,};
enum _A642A59252A36F73517E5022518F6AC5 {FTW_CONTINUE = 0x0,FTW_STOP = 0x1,FTW_SKIP_SUBTREE = 0x2,FTW_SKIP_SIBLINGS = 0x3,};
enum _A64A6485A3EA322157715C598EBB29F4 {IRDA_TEKRAM_DONGLE = 0x0,IRDA_ESI_DONGLE = 0x1,IRDA_ACTISYS_DONGLE = 0x2,IRDA_ACTISYS_PLUS_DONGLE = 0x3,IRDA_GIRBIL_DONGLE = 0x4,IRDA_LITELINK_DONGLE = 0x5,IRDA_AIRPORT_DONGLE = 0x6,IRDA_OLD_BELKIN_DONGLE = 0x7,IRDA_EP7211_IR = 0x8,IRDA_MCP2120_DONGLE = 0x9,IRDA_ACT200L_DONGLE = 0xA,IRDA_MA600_DONGLE = 0xB,IRDA_TOIM3232_DONGLE = 0xC,IRDA_EP7211_DONGLE = 0xD,};
struct _A66CD72C4F75B61BA7A5B80768A132ED {unsigned __int64 fds_bits[16];};
enum _A69FDE9613DB21310D435352D93857EC {R3964_MSG_ACK = 0x1,R3964_MSG_DATA = 0x2,};
enum _A71519F364E389B034114E76A71C5D3B {I2400M_L3L4_VERSION = 0x100,};
enum _A98D0825AA235C940E5A466593BCCCF2 {GMON_TAG_TIME_HIST = 0x0,GMON_TAG_CG_ARC = 0x1,GMON_TAG_BB_COUNT = 0x2,};
enum _AACB4B8D2848ABF8BE57D283633E2D57 {SNDRV_PCM_STREAM_PLAYBACK = 0x0,SNDRV_PCM_STREAM_CAPTURE = 0x1,SNDRV_PCM_STREAM_LAST = 0x1,};
enum _ABB8C31B92B6C4B8DC4BEE3F40D939D6 {G723_63 = 0x1,G723_53 = 0x2,TS85 = 0x3,TS48 = 0x4,TS41 = 0x5,G728 = 0x6,G729 = 0x7,ULAW = 0x8,ALAW = 0x9,LINEAR16 = 0xA,LINEAR8 = 0xB,WSS = 0xC,G729B = 0xD,};
struct _AC1F0727205AA235F31FA7E4FBAB6931 {__int64 quot;__int64 rem;};
enum _AC818D2726C4489E171752BFF84D79DA {FE_TONEAREST = 0x0,FE_DOWNWARD = 0x400,FE_UPWARD = 0x800,FE_TOWARDZERO = 0xC00,};
enum _ACCF59615FB8FFFA0827C0FE4A51E3E4 {VETH_INFO_UNSPEC = 0x0,VETH_INFO_PEER = 0x1,__VETH_INFO_MAX = 0x2,};
enum _ACFC05DFBD69156C0388855EBEA4D33B {NET_DECNET_CONF_DEV_PRIORITY = 0x1,NET_DECNET_CONF_DEV_T1 = 0x2,NET_DECNET_CONF_DEV_T2 = 0x3,NET_DECNET_CONF_DEV_T3 = 0x4,NET_DECNET_CONF_DEV_FORWARDING = 0x5,NET_DECNET_CONF_DEV_BLKSIZE = 0x6,NET_DECNET_CONF_DEV_STATE = 0x7,};
enum _AD4F992E838345CC9905E7548A38BFD0 {NET_IPV6_FORWARDING = 0x1,NET_IPV6_HOP_LIMIT = 0x2,NET_IPV6_MTU = 0x3,NET_IPV6_ACCEPT_RA = 0x4,NET_IPV6_ACCEPT_REDIRECTS = 0x5,NET_IPV6_AUTOCONF = 0x6,NET_IPV6_DAD_TRANSMITS = 0x7,NET_IPV6_RTR_SOLICITS = 0x8,NET_IPV6_RTR_SOLICIT_INTERVAL = 0x9,NET_IPV6_RTR_SOLICIT_DELAY = 0xA,NET_IPV6_USE_TEMPADDR = 0xB,NET_IPV6_TEMP_VALID_LFT = 0xC,NET_IPV6_TEMP_PREFERED_LFT = 0xD,NET_IPV6_REGEN_MAX_RETRY = 0xE,NET_IPV6_MAX_DESYNC_FACTOR = 0xF,NET_IPV6_MAX_ADDRESSES = 0x10,NET_IPV6_FORCE_MLD_VERSION = 0x11,NET_IPV6_ACCEPT_RA_DEFRTR = 0x12,NET_IPV6_ACCEPT_RA_PINFO = 0x13,NET_IPV6_ACCEPT_RA_RTR_PREF = 0x14,NET_IPV6_RTR_PROBE_INTERVAL = 0x15,NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN = 0x16,NET_IPV6_PROXY_NDP = 0x17,NET_IPV6_ACCEPT_SOURCE_ROUTE = 0x19,__NET_IPV6_MAX = 0x1A,};
enum _AE3329FEB427F74B2DA967177CE854FD {NET_ATALK_AARP_EXPIRY_TIME = 0x1,NET_ATALK_AARP_TICK_TIME = 0x2,NET_ATALK_AARP_RETRANSMIT_LIMIT = 0x3,NET_ATALK_AARP_RESOLVE_TIME = 0x4,};
struct _AE7090D44B263C525193247B1C3DC203 {unsigned __int16 x;unsigned __int16 y;unsigned __int8 macroblock_type;unsigned __int8 motion_type;unsigned __int8 motion_vertical_field_select;unsigned __int8 dct_type;__int16 PMV[2][2][2];unsigned int index;unsigned __int16 coded_block_pattern;unsigned __int16 pad0;};
enum _AF9A4313FB942A07C88012A00BCA2D3B {gfs2fl_Jdata = 0x0,gfs2fl_ExHash = 0x1,gfs2fl_Unused = 0x2,gfs2fl_EaIndirect = 0x3,gfs2fl_Directio = 0x4,gfs2fl_Immutable = 0x5,gfs2fl_AppendOnly = 0x6,gfs2fl_NoAtime = 0x7,gfs2fl_Sync = 0x8,gfs2fl_System = 0x9,gfs2fl_TopLevel = 0xA,gfs2fl_TruncInProg = 0x1D,gfs2fl_InheritDirectio = 0x1E,gfs2fl_InheritJdata = 0x1F,};
enum _B017515FC8405800518D7337EC8ACF8A {FS_DQ_LOOKUPS = 0x1,FS_DQ_DROPS = 0x2,FS_DQ_READS = 0x3,FS_DQ_WRITES = 0x4,FS_DQ_CACHE_HITS = 0x5,FS_DQ_ALLOCATED = 0x6,FS_DQ_FREE = 0x7,FS_DQ_SYNCS = 0x8,FS_DQ_WARNINGS = 0x9,};
enum _B03891BA792557638A656BAA1C3188A9 {TCA_CHOKE_UNSPEC = 0x0,TCA_CHOKE_PARMS = 0x1,TCA_CHOKE_STAB = 0x2,TCA_CHOKE_MAX_P = 0x3,__TCA_CHOKE_MAX = 0x4,};
enum _B05ED08B86141D4EC1A5E433884B3190 {TCA_IPT_UNSPEC = 0x0,TCA_IPT_TABLE = 0x1,TCA_IPT_HOOK = 0x2,TCA_IPT_INDEX = 0x3,TCA_IPT_CNT = 0x4,TCA_IPT_TM = 0x5,TCA_IPT_TARG = 0x6,__TCA_IPT_MAX = 0x7,};
enum _B0FCE3C9E818F6E963F183943BA5FBD8 {TASKSTATS_CMD_UNSPEC = 0x0,TASKSTATS_CMD_GET = 0x1,TASKSTATS_CMD_NEW = 0x2,__TASKSTATS_CMD_MAX = 0x3,};
enum _B1BBC3EB11550C1AA81C57463DE5079D {NET_DCCP_DEFAULT = 0x1,};
enum _B2BBF3571C1E1541B15C221F934CC997 {LA_SYMB_NOPLTENTER = 0x1,LA_SYMB_NOPLTEXIT = 0x2,LA_SYMB_STRUCTCALL = 0x4,LA_SYMB_DLSYM = 0x8,LA_SYMB_ALTVALUE = 0x10,};
enum _B34E6FF94D606ADE7B24EB7AB8A02C61 {SHUT_RD = 0x0,SHUT_WR = 0x1,SHUT_RDWR = 0x2,};
enum _B539734676A04848B68060D6D483E0A0 {XIMTextType = 0x0,XIMBitmapType = 0x1,};
enum _B5613E3514EA74F9B10023C709C77AE2 {NETEM_LOSS_UNSPEC = 0x0,NETEM_LOSS_GI = 0x1,NETEM_LOSS_GE = 0x2,__NETEM_LOSS_MAX = 0x3,};
enum _B5E392595ACA5EC5C2646E1FB218C0AB {TCA_DSMARK_UNSPEC = 0x0,TCA_DSMARK_INDICES = 0x1,TCA_DSMARK_DEFAULT_INDEX = 0x2,TCA_DSMARK_SET_TC_INDEX = 0x3,TCA_DSMARK_MASK = 0x4,TCA_DSMARK_VALUE = 0x5,__TCA_DSMARK_MAX = 0x6,};
enum _B64C39E2ADABB22C50C1D912F1D253CC {XIMIsInvisible = 0x0,XIMIsPrimary = 0x1,XIMIsSecondary = 0x2,};
enum _B66645BB19D3E41D07C841CC99076606 {TD_OK = 0x0,TD_ERR = 0x1,TD_NOTHR = 0x2,TD_NOSV = 0x3,TD_NOLWP = 0x4,TD_BADPH = 0x5,TD_BADTH = 0x6,TD_BADSH = 0x7,TD_BADTA = 0x8,TD_BADKEY = 0x9,TD_NOMSG = 0xA,TD_NOFPREGS = 0xB,TD_NOLIBTHREAD = 0xC,TD_NOEVENT = 0xD,TD_NOCAPAB = 0xE,TD_DBERR = 0xF,TD_NOAPLIC = 0x10,TD_NOTSD = 0x11,TD_MALLOC = 0x12,TD_PARTIALREG = 0x13,TD_NOXREGS = 0x14,TD_TLSDEFER = 0x15,TD_NOTALLOC = 0x15,TD_VERSION = 0x16,TD_NOTLS = 0x17,};
enum _B724688FA18548EA82B995171E9BBE12 {i2400m_rf_operation_on = 0x1,i2400m_rf_operation_off = 0x2,};
enum _B849EA88E61F473EBA90122653E8FFC3 {IPSEC_MODE_ANY = 0x0,IPSEC_MODE_TRANSPORT = 0x1,IPSEC_MODE_TUNNEL = 0x2,IPSEC_MODE_BEET = 0x3,};
enum _B875DA338CB6310787C47C1867E2BCC0 {IPVS_CMD_UNSPEC = 0x0,IPVS_CMD_NEW_SERVICE = 0x1,IPVS_CMD_SET_SERVICE = 0x2,IPVS_CMD_DEL_SERVICE = 0x3,IPVS_CMD_GET_SERVICE = 0x4,IPVS_CMD_NEW_DEST = 0x5,IPVS_CMD_SET_DEST = 0x6,IPVS_CMD_DEL_DEST = 0x7,IPVS_CMD_GET_DEST = 0x8,IPVS_CMD_NEW_DAEMON = 0x9,IPVS_CMD_DEL_DAEMON = 0xA,IPVS_CMD_GET_DAEMON = 0xB,IPVS_CMD_SET_CONFIG = 0xC,IPVS_CMD_GET_CONFIG = 0xD,IPVS_CMD_SET_INFO = 0xE,IPVS_CMD_GET_INFO = 0xF,IPVS_CMD_ZERO = 0x10,IPVS_CMD_FLUSH = 0x11,__IPVS_CMD_MAX = 0x12,};
struct _B91A488201B9E841F1A5B4B4EA09BBDD {unsigned __int16 __control_word;unsigned __int16 __unused1;unsigned __int16 __status_word;unsigned __int16 __unused2;unsigned __int16 __tags;unsigned __int16 __unused3;unsigned int __eip;unsigned __int16 __cs_selector;unsigned __int32 __opcode : 11;unsigned __int32 __unused4 : 5;unsigned int __data_offset;unsigned __int16 __data_selector;unsigned __int16 __unused5;unsigned int __mxcsr;};
enum _B91A6D3B48293B5FD537AF087E5BD0FB {SNDRV_PCM_SUBCLASS_GENERIC_MIX = 0x0,SNDRV_PCM_SUBCLASS_MULTI_MIX = 0x1,SNDRV_PCM_SUBCLASS_LAST = 0x1,};
enum _BA07CC5815FD533836B5582E1566CFF5 {XT_CONNLIMIT_INVERT = 0x1,XT_CONNLIMIT_DADDR = 0x2,};
enum _BA1C7C8D6FCC3C3E5F6D0357817B31AD {CGW_UNSPEC = 0x0,CGW_MOD_AND = 0x1,CGW_MOD_OR = 0x2,CGW_MOD_XOR = 0x3,CGW_MOD_SET = 0x4,CGW_CS_XOR = 0x5,CGW_CS_CRC8 = 0x6,CGW_HANDLED = 0x7,CGW_DROPPED = 0x8,CGW_SRC_IF = 0x9,CGW_DST_IF = 0xA,CGW_FILTER = 0xB,CGW_DELETED = 0xC,__CGW_MAX = 0xD,};
struct _BAC7E67B0C2C05C40DFF67087D59816E {unsigned int t391;unsigned int t392;unsigned int n391;unsigned int n392;unsigned int n393;unsigned __int16 lmi;unsigned __int16 dce;};
enum _BBCD55CB06BE93D4DC1E8C9A4BE4D3BE {RDMA_NL_RDMA_CM_ATTR_SRC_ADDR = 0x1,RDMA_NL_RDMA_CM_ATTR_DST_ADDR = 0x2,RDMA_NL_RDMA_CM_NUM_ATTR = 0x3,};
enum _BBCF01F0BCCD874B9CD4A6F63D6696FB {Blktrace_setup = 0x1,Blktrace_running = 0x2,Blktrace_stopped = 0x3,};
enum _BCD871E10C1AC17DFE5066607E1459D3 {TCA_STAB_UNSPEC = 0x0,TCA_STAB_BASE = 0x1,TCA_STAB_DATA = 0x2,__TCA_STAB_MAX = 0x3,};
enum _BCDA133813398945F6840621756ADB21 {NET_PROTO_CONF_ALL = 0xFFFFFFFE,NET_PROTO_CONF_DEFAULT = 0xFFFFFFFD,};
enum _BD6C3459142FA19B2B7C8026A5895E5C {MDBA_MDB_ENTRY_UNSPEC = 0x0,MDBA_MDB_ENTRY_INFO = 0x1,__MDBA_MDB_ENTRY_MAX = 0x2,};
struct _BDD68B3DF04F37D9F686ADD9C1D78922 {char signature[8];};
enum _BDF88968CAE1EA74E42809B9AE857E7C {_URC_NO_REASON = 0x0,_URC_FOREIGN_EXCEPTION_CAUGHT = 0x1,_URC_FATAL_PHASE2_ERROR = 0x2,_URC_FATAL_PHASE1_ERROR = 0x3,_URC_NORMAL_STOP = 0x4,_URC_END_OF_STACK = 0x5,_URC_HANDLER_FOUND = 0x6,_URC_INSTALL_CONTEXT = 0x7,_URC_CONTINUE_UNWIND = 0x8,};
struct _BEA3E970906BDE5578391186783FC521 {int extension;int major_opcode;int first_event;int first_error;};
struct _BFB970BD49ED9B406D7CBF54A76D57DD {int key_click_percent;int bell_percent;int bell_pitch;int bell_duration;int led;int led_mode;int key;int auto_repeat_mode;};
enum _BFC3F34F6952027A5BE2BDFB69B3FD82 {ABI_DEFHANDLER_COFF = 0x1,ABI_DEFHANDLER_ELF = 0x2,ABI_DEFHANDLER_LCALL7 = 0x3,ABI_DEFHANDLER_LIBCSO = 0x4,ABI_TRACE = 0x5,ABI_FAKE_UTSNAME = 0x6,};
enum _C1D9CD0201072EF0A327D5B565D74E2E {SELNL_MSG_SETENFORCE = 0x10,SELNL_MSG_POLICYLOAD = 0x11,SELNL_MSG_MAX = 0x12,};
enum _C24571D27ADEE20044434E1DF48F13D7 {PTHREAD_INHERIT_SCHED = 0x0,PTHREAD_EXPLICIT_SCHED = 0x1,};
enum _C25EDA2AFA4331EE1194B950D24C90A5 {XSyncAlarmActive = 0x0,XSyncAlarmInactive = 0x1,XSyncAlarmDestroyed = 0x2,};
enum _C29993E52B071AAF02A41CBC238203F8 {FRA_UNSPEC = 0x0,FRA_DST = 0x1,FRA_SRC = 0x2,FRA_IIFNAME = 0x3,FRA_GOTO = 0x4,FRA_UNUSED2 = 0x5,FRA_PRIORITY = 0x6,FRA_UNUSED3 = 0x7,FRA_UNUSED4 = 0x8,FRA_UNUSED5 = 0x9,FRA_FWMARK = 0xA,FRA_FLOW = 0xB,FRA_UNUSED6 = 0xC,FRA_UNUSED7 = 0xD,FRA_UNUSED8 = 0xE,FRA_TABLE = 0xF,FRA_FWMASK = 0x10,FRA_OIFNAME = 0x11,__FRA_MAX = 0x12,};
enum _C2C31FC2EBF2471D31154D28CBCD9C75 {WIMAX_GNL_VERSION = 0x1,WIMAX_GNL_ATTR_INVALID = 0x0,WIMAX_GNL_ATTR_MAX = 0xA,};
enum _C3001E1705AD8E66057254A1A7FED027 {IFLA_VF_UNSPEC = 0x0,IFLA_VF_MAC = 0x1,IFLA_VF_VLAN = 0x2,IFLA_VF_TX_RATE = 0x3,IFLA_VF_SPOOFCHK = 0x4,IFLA_VF_LINK_STATE = 0x5,__IFLA_VF_MAX = 0x6,};
enum _C31ADEAC2A4332A5EDBEC52594EF970B {MDBA_UNSPEC = 0x0,MDBA_MDB = 0x1,MDBA_ROUTER = 0x2,__MDBA_MAX = 0x3,};
enum _C41CDAA8564673A221AD080C882502C2 {NET_LLC2_ACK_TIMEOUT = 0x1,NET_LLC2_P_TIMEOUT = 0x2,NET_LLC2_REJ_TIMEOUT = 0x3,NET_LLC2_BUSY_TIMEOUT = 0x4,};
enum _C4D2990799738055A4FAFA16DB7CE68F {DT_UNKNOWN = 0x0,DT_FIFO = 0x1,DT_CHR = 0x2,DT_DIR = 0x4,DT_BLK = 0x6,DT_REG = 0x8,DT_LNK = 0xA,DT_SOCK = 0xC,DT_WHT = 0xE,};
enum _C68DBFABEFD6F7DD662F0678857B890B {DEV_PARPORT_DEFAULT_TIMESLICE = 0x1,DEV_PARPORT_DEFAULT_SPINTIME = 0x2,};
enum _C99168C36638ECF8390027354CCA725D {IB_PATH_GMP = 0x1,IB_PATH_PRIMARY = 0x2,IB_PATH_ALTERNATE = 0x4,IB_PATH_OUTBOUND = 0x8,IB_PATH_INBOUND = 0x10,IB_PATH_INBOUND_REVERSE = 0x20,IB_PATH_BIDIRECTIONAL = 0x28,};
struct _CA1CD5B08005403884A7641019451813 {__int16 x;__int16 y;unsigned __int16 width;unsigned __int16 height;};
enum _CB26C9EBA0C3FAD22369F75FD30C5586 {LINUX_MIB_NUM = 0x0,LINUX_MIB_SYNCOOKIESSENT = 0x1,LINUX_MIB_SYNCOOKIESRECV = 0x2,LINUX_MIB_SYNCOOKIESFAILED = 0x3,LINUX_MIB_EMBRYONICRSTS = 0x4,LINUX_MIB_PRUNECALLED = 0x5,LINUX_MIB_RCVPRUNED = 0x6,LINUX_MIB_OFOPRUNED = 0x7,LINUX_MIB_OUTOFWINDOWICMPS = 0x8,LINUX_MIB_LOCKDROPPEDICMPS = 0x9,LINUX_MIB_ARPFILTER = 0xA,LINUX_MIB_TIMEWAITED = 0xB,LINUX_MIB_TIMEWAITRECYCLED = 0xC,LINUX_MIB_TIMEWAITKILLED = 0xD,LINUX_MIB_PAWSPASSIVEREJECTED = 0xE,LINUX_MIB_PAWSACTIVEREJECTED = 0xF,LINUX_MIB_PAWSESTABREJECTED = 0x10,LINUX_MIB_DELAYEDACKS = 0x11,LINUX_MIB_DELAYEDACKLOCKED = 0x12,LINUX_MIB_DELAYEDACKLOST = 0x13,LINUX_MIB_LISTENOVERFLOWS = 0x14,LINUX_MIB_LISTENDROPS = 0x15,LINUX_MIB_TCPPREQUEUED = 0x16,LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG = 0x17,LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE = 0x18,LINUX_MIB_TCPPREQUEUEDROPPED = 0x19,LINUX_MIB_TCPHPHITS = 0x1A,LINUX_MIB_TCPHPHITSTOUSER = 0x1B,LINUX_MIB_TCPPUREACKS = 0x1C,LINUX_MIB_TCPHPACKS = 0x1D,LINUX_MIB_TCPRENORECOVERY = 0x1E,LINUX_MIB_TCPSACKRECOVERY = 0x1F,LINUX_MIB_TCPSACKRENEGING = 0x20,LINUX_MIB_TCPFACKREORDER = 0x21,LINUX_MIB_TCPSACKREORDER = 0x22,LINUX_MIB_TCPRENOREORDER = 0x23,LINUX_MIB_TCPTSREORDER = 0x24,LINUX_MIB_TCPFULLUNDO = 0x25,LINUX_MIB_TCPPARTIALUNDO = 0x26,LINUX_MIB_TCPDSACKUNDO = 0x27,LINUX_MIB_TCPLOSSUNDO = 0x28,LINUX_MIB_TCPLOSTRETRANSMIT = 0x29,LINUX_MIB_TCPRENOFAILURES = 0x2A,LINUX_MIB_TCPSACKFAILURES = 0x2B,LINUX_MIB_TCPLOSSFAILURES = 0x2C,LINUX_MIB_TCPFASTRETRANS = 0x2D,LINUX_MIB_TCPFORWARDRETRANS = 0x2E,LINUX_MIB_TCPSLOWSTARTRETRANS = 0x2F,LINUX_MIB_TCPTIMEOUTS = 0x30,LINUX_MIB_TCPLOSSPROBES = 0x31,LINUX_MIB_TCPLOSSPROBERECOVERY = 0x32,LINUX_MIB_TCPRENORECOVERYFAIL = 0x33,LINUX_MIB_TCPSACKRECOVERYFAIL = 0x34,LINUX_MIB_TCPSCHEDULERFAILED = 0x35,LINUX_MIB_TCPRCVCOLLAPSED = 0x36,LINUX_MIB_TCPDSACKOLDSENT = 0x37,LINUX_MIB_TCPDSACKOFOSENT = 0x38,LINUX_MIB_TCPDSACKRECV = 0x39,LINUX_MIB_TCPDSACKOFORECV = 0x3A,LINUX_MIB_TCPABORTONDATA = 0x3B,LINUX_MIB_TCPABORTONCLOSE = 0x3C,LINUX_MIB_TCPABORTONMEMORY = 0x3D,LINUX_MIB_TCPABORTONTIMEOUT = 0x3E,LINUX_MIB_TCPABORTONLINGER = 0x3F,LINUX_MIB_TCPABORTFAILED = 0x40,LINUX_MIB_TCPMEMORYPRESSURES = 0x41,LINUX_MIB_TCPSACKDISCARD = 0x42,LINUX_MIB_TCPDSACKIGNOREDOLD = 0x43,LINUX_MIB_TCPDSACKIGNOREDNOUNDO = 0x44,LINUX_MIB_TCPSPURIOUSRTOS = 0x45,LINUX_MIB_TCPMD5NOTFOUND = 0x46,LINUX_MIB_TCPMD5UNEXPECTED = 0x47,LINUX_MIB_SACKSHIFTED = 0x48,LINUX_MIB_SACKMERGED = 0x49,LINUX_MIB_SACKSHIFTFALLBACK = 0x4A,LINUX_MIB_TCPBACKLOGDROP = 0x4B,LINUX_MIB_TCPMINTTLDROP = 0x4C,LINUX_MIB_TCPDEFERACCEPTDROP = 0x4D,LINUX_MIB_IPRPFILTER = 0x4E,LINUX_MIB_TCPTIMEWAITOVERFLOW = 0x4F,LINUX_MIB_TCPREQQFULLDOCOOKIES = 0x50,LINUX_MIB_TCPREQQFULLDROP = 0x51,LINUX_MIB_TCPRETRANSFAIL = 0x52,LINUX_MIB_TCPRCVCOALESCE = 0x53,LINUX_MIB_TCPOFOQUEUE = 0x54,LINUX_MIB_TCPOFODROP = 0x55,LINUX_MIB_TCPOFOMERGE = 0x56,LINUX_MIB_TCPCHALLENGEACK = 0x57,LINUX_MIB_TCPSYNCHALLENGE = 0x58,LINUX_MIB_TCPFASTOPENACTIVE = 0x59,LINUX_MIB_TCPFASTOPENPASSIVE = 0x5A,LINUX_MIB_TCPFASTOPENPASSIVEFAIL = 0x5B,LINUX_MIB_TCPFASTOPENLISTENOVERFLOW = 0x5C,LINUX_MIB_TCPFASTOPENCOOKIEREQD = 0x5D,LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES = 0x5E,LINUX_MIB_BUSYPOLLRXPACKETS = 0x5F,__LINUX_MIB_MAX = 0x60,};
enum _CB58813E4F27A4752B41EAE90B7E709A {IFLA_CAN_UNSPEC = 0x0,IFLA_CAN_BITTIMING = 0x1,IFLA_CAN_BITTIMING_CONST = 0x2,IFLA_CAN_CLOCK = 0x3,IFLA_CAN_STATE = 0x4,IFLA_CAN_CTRLMODE = 0x5,IFLA_CAN_RESTART_MS = 0x6,IFLA_CAN_RESTART = 0x7,IFLA_CAN_BERR_COUNTER = 0x8,__IFLA_CAN_MAX = 0x9,};
enum _CCC31958CF2403C4DC26E468BC116719 {SI_ASYNCNL = 0xFFFFFFC4,SI_TKILL = 0xFFFFFFFA,SI_SIGIO = 0xFFFFFFFB,SI_ASYNCIO = 0xFFFFFFFC,SI_MESGQ = 0xFFFFFFFD,SI_TIMER = 0xFFFFFFFE,SI_QUEUE = 0xFFFFFFFF,SI_USER = 0x0,SI_KERNEL = 0x80,};
enum _CE321111CC921A96DD1723956ADEFB24 {SNDRV_TIMER_SCLASS_NONE = 0x0,SNDRV_TIMER_SCLASS_APPLICATION = 0x1,SNDRV_TIMER_SCLASS_SEQUENCER = 0x2,SNDRV_TIMER_SCLASS_OSS_SEQUENCER = 0x3,SNDRV_TIMER_SCLASS_LAST = 0x3,};
enum _CE9BE469589B640347A24F990FE3FE3F {IPSEC_LEVEL_DEFAULT = 0x0,IPSEC_LEVEL_USE = 0x1,IPSEC_LEVEL_REQUIRE = 0x2,IPSEC_LEVEL_UNIQUE = 0x3,};
enum _CF08557F06B5A10A95294072015EB5DD {NET_CORE_WMEM_MAX = 0x1,NET_CORE_RMEM_MAX = 0x2,NET_CORE_WMEM_DEFAULT = 0x3,NET_CORE_RMEM_DEFAULT = 0x4,NET_CORE_MAX_BACKLOG = 0x6,NET_CORE_FASTROUTE = 0x7,NET_CORE_MSG_COST = 0x8,NET_CORE_MSG_BURST = 0x9,NET_CORE_OPTMEM_MAX = 0xA,NET_CORE_HOT_LIST_LENGTH = 0xB,NET_CORE_DIVERT_VERSION = 0xC,NET_CORE_NO_CONG_THRESH = 0xD,NET_CORE_NO_CONG = 0xE,NET_CORE_LO_CONG = 0xF,NET_CORE_MOD_CONG = 0x10,NET_CORE_DEV_WEIGHT = 0x11,NET_CORE_SOMAXCONN = 0x12,NET_CORE_BUDGET = 0x13,NET_CORE_AEVENT_ETIME = 0x14,NET_CORE_AEVENT_RSEQTH = 0x15,NET_CORE_WARNINGS = 0x16,};
enum _CFC900B65574791DAE17F20D058144EA {DNRNG_NLGRP_NONE = 0x0,DNRNG_NLGRP_L1 = 0x1,DNRNG_NLGRP_L2 = 0x2,__DNRNG_NLGRP_MAX = 0x3,};
enum _CFDA3CC52F0D4A83481BDDD19D316FDE {FE_INVALID = 0x1,__FE_DENORM = 0x2,FE_DIVBYZERO = 0x4,FE_OVERFLOW = 0x8,FE_UNDERFLOW = 0x10,FE_INEXACT = 0x20,};
enum _D0804338FED1974BA189E0DED05FD517 {PTHREAD_PRIO_NONE = 0x0,PTHREAD_PRIO_INHERIT = 0x1,PTHREAD_PRIO_PROTECT = 0x2,};
enum _D1455ABD0B0F311CD1CE7030704F1427 {TCA_RSVP_UNSPEC = 0x0,TCA_RSVP_CLASSID = 0x1,TCA_RSVP_DST = 0x2,TCA_RSVP_SRC = 0x3,TCA_RSVP_PINFO = 0x4,TCA_RSVP_POLICE = 0x5,TCA_RSVP_ACT = 0x6,__TCA_RSVP_MAX = 0x7,};
struct _D1AF0406CAF4CC1ABBF1AF1A913684DE {unsigned int event;int signal;};
union _D1D0F511BF997F52624AFB2B0CE27B40 {char __size[4];int __align;};
enum _D2BDB46445F3771502B0B42E6F03B070 {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_TRYHARD = 0x4,MSG_CTRUNC = 0x8,MSG_PROXY = 0x10,MSG_TRUNC = 0x20,MSG_DONTWAIT = 0x40,MSG_EOR = 0x80,MSG_WAITALL = 0x100,MSG_FIN = 0x200,MSG_SYN = 0x400,MSG_CONFIRM = 0x800,MSG_RST = 0x1000,MSG_ERRQUEUE = 0x2000,MSG_NOSIGNAL = 0x4000,MSG_MORE = 0x8000,MSG_WAITFORONE = 0x10000,MSG_CMSG_CLOEXEC = 0x40000000,};
enum _D2FB5047E5425E3091444B50F9DAFCC2 {TCA_MIRRED_UNSPEC = 0x0,TCA_MIRRED_TM = 0x1,TCA_MIRRED_PARMS = 0x2,__TCA_MIRRED_MAX = 0x3,};
enum _D4A6DCCC5976F72513B0EE45E85F7E39 {PMU_PWR_WAKEUP_KEY = 0x1,PMU_PWR_WAKEUP_AC_INSERT = 0x2,PMU_PWR_WAKEUP_AC_CHANGE = 0x4,PMU_PWR_WAKEUP_LID_OPEN = 0x8,PMU_PWR_WAKEUP_RING = 0x10,};
enum _D4AB9A46DE65367CC0FF11AD6E77796A {TD_THR_ANY_STATE = 0x0,TD_THR_UNKNOWN = 0x1,TD_THR_STOPPED = 0x2,TD_THR_RUN = 0x3,TD_THR_ACTIVE = 0x4,TD_THR_ZOMBIE = 0x5,TD_THR_SLEEP = 0x6,TD_THR_STOPPED_ASLEEP = 0x7,};
enum _D690D5C64A428DDCADD2EDBBEBC4BFE4 {DEV_RAID_SPEED_LIMIT_MIN = 0x1,DEV_RAID_SPEED_LIMIT_MAX = 0x2,};
enum _D7248A85108E458E9F5CE0B1DD7D2FB7 {IPSET_ERR_NAME = 0x1100,IPSET_ERR_LOOP = 0x1101,IPSET_ERR_BEFORE = 0x1102,IPSET_ERR_NAMEREF = 0x1103,IPSET_ERR_LIST_FULL = 0x1104,IPSET_ERR_REF_EXIST = 0x1105,};
enum _D732401C6D30AA6262F0EF2B71E48EB5 {QUOTA_NL_C_UNSPEC = 0x0,QUOTA_NL_C_WARNING = 0x1,__QUOTA_NL_C_MAX = 0x2,};
enum _D7728242D076E7A94F87598000F93FAC {XT_SOCKET_TRANSPARENT = 0x1,XT_SOCKET_NOWILDCARD = 0x2,};
enum _D77A5FC142C3ADA44E70B97FBC032B9A {QUOTA_NL_A_UNSPEC = 0x0,QUOTA_NL_A_QTYPE = 0x1,QUOTA_NL_A_EXCESS_ID = 0x2,QUOTA_NL_A_WARNING = 0x3,QUOTA_NL_A_DEV_MAJOR = 0x4,QUOTA_NL_A_DEV_MINOR = 0x5,QUOTA_NL_A_CAUSED_ID = 0x6,__QUOTA_NL_A_MAX = 0x7,};
enum _D8B455B75A20282311BF0513B681E6F8 {IPPROTO_IP = 0x0,IPPROTO_HOPOPTS = 0x0,IPPROTO_ICMP = 0x1,IPPROTO_IGMP = 0x2,IPPROTO_IPIP = 0x4,IPPROTO_TCP = 0x6,IPPROTO_EGP = 0x8,IPPROTO_PUP = 0xC,IPPROTO_UDP = 0x11,IPPROTO_IDP = 0x16,IPPROTO_TP = 0x1D,IPPROTO_DCCP = 0x21,IPPROTO_IPV6 = 0x29,IPPROTO_ROUTING = 0x2B,IPPROTO_FRAGMENT = 0x2C,IPPROTO_RSVP = 0x2E,IPPROTO_GRE = 0x2F,IPPROTO_ESP = 0x32,IPPROTO_AH = 0x33,IPPROTO_ICMPV6 = 0x3A,IPPROTO_NONE = 0x3B,IPPROTO_DSTOPTS = 0x3C,IPPROTO_MTP = 0x5C,IPPROTO_ENCAP = 0x62,IPPROTO_PIM = 0x67,IPPROTO_COMP = 0x6C,IPPROTO_SCTP = 0x84,IPPROTO_UDPLITE = 0x88,IPPROTO_RAW = 0xFF,IPPROTO_MAX = 0x100,};
enum _D8BB8E3B1434C15E3693FA8391ED5F93 {TCA_CODEL_UNSPEC = 0x0,TCA_CODEL_TARGET = 0x1,TCA_CODEL_LIMIT = 0x2,TCA_CODEL_INTERVAL = 0x3,TCA_CODEL_ECN = 0x4,__TCA_CODEL_MAX = 0x5,};
enum _D8E1096089DBEC5F01F1A23D68496D67 {TCA_HTB_UNSPEC = 0x0,TCA_HTB_PARMS = 0x1,TCA_HTB_INIT = 0x2,TCA_HTB_CTAB = 0x3,TCA_HTB_RTAB = 0x4,TCA_HTB_DIRECT_QLEN = 0x5,__TCA_HTB_MAX = 0x6,};
enum _D8F03A40183C1F0DFE13800B3B9FB0ED {FSETLOCKING_QUERY = 0x0,FSETLOCKING_INTERNAL = 0x1,FSETLOCKING_BYCALLER = 0x2,};
enum _D98E9C4F171AD07BD8FFA8B1CE60B668 {SNDRV_PCM_TSTAMP_NONE = 0x0,SNDRV_PCM_TSTAMP_ENABLE = 0x1,SNDRV_PCM_TSTAMP_LAST = 0x1,};
enum _D9A3985E0ECC71A69952024AB896FAFE {IPSET_ATTR_UNSPEC = 0x0,IPSET_ATTR_PROTOCOL = 0x1,IPSET_ATTR_SETNAME = 0x2,IPSET_ATTR_TYPENAME = 0x3,IPSET_ATTR_SETNAME2 = 0x3,IPSET_ATTR_REVISION = 0x4,IPSET_ATTR_FAMILY = 0x5,IPSET_ATTR_FLAGS = 0x6,IPSET_ATTR_DATA = 0x7,IPSET_ATTR_ADT = 0x8,IPSET_ATTR_LINENO = 0x9,IPSET_ATTR_PROTOCOL_MIN = 0xA,IPSET_ATTR_REVISION_MIN = 0xA,__IPSET_ATTR_CMD_MAX = 0xB,};
enum _DB4B60BC3E5D47BB5823C48350265A79 {XIMForwardChar = 0x0,XIMBackwardChar = 0x1,XIMForwardWord = 0x2,XIMBackwardWord = 0x3,XIMCaretUp = 0x4,XIMCaretDown = 0x5,XIMNextLine = 0x6,XIMPreviousLine = 0x7,XIMLineStart = 0x8,XIMLineEnd = 0x9,XIMAbsolutePosition = 0xA,XIMDontChange = 0xB,};
enum _DB66EBE3DBA32C9B743763060F01F063 {TCA_RED_UNSPEC = 0x0,TCA_RED_PARMS = 0x1,TCA_RED_STAB = 0x2,TCA_RED_MAX_P = 0x3,__TCA_RED_MAX = 0x4,};
enum _DBF60D5FB5714F72F7E879ABF8093E1F {SIG_DTMF_READY = 0x0,SIG_HOOKSTATE = 0x1,SIG_FLASH = 0x2,SIG_PSTN_RING = 0x3,SIG_CALLER_ID = 0x4,SIG_PSTN_WINK = 0x5,SIG_F0 = 0x6,SIG_F1 = 0x7,SIG_F2 = 0x8,SIG_F3 = 0x9,SIG_FC0 = 0xA,SIG_FC1 = 0xB,SIG_FC2 = 0xC,SIG_FC3 = 0xD,SIG_READ_READY = 0x21,SIG_WRITE_READY = 0x22,};
enum _DC2797625D574A9AF0B4A811E544652D {PTHREAD_CANCEL_ENABLE = 0x0,PTHREAD_CANCEL_DISABLE = 0x1,};
struct _DE2D2D600621BF6A9A3C6AB05D887D2A {unsigned int interval;unsigned int timeout;};
enum _DE2F3708A9D2ACCB2A4C045AB2A05614 {NETCONFA_UNSPEC = 0x0,NETCONFA_IFINDEX = 0x1,NETCONFA_FORWARDING = 0x2,NETCONFA_RP_FILTER = 0x3,NETCONFA_MC_FORWARDING = 0x4,__NETCONFA_MAX = 0x5,};
enum _DFBEBEF6330B3D4D90FE9E826EBDD138 {IFLA_INET_UNSPEC = 0x0,IFLA_INET_CONF = 0x1,__IFLA_INET_MAX = 0x2,};
enum _E027FAAD9E62D0114E3908730A75FC8D {FPE_INTDIV = 0x1,FPE_INTOVF = 0x2,FPE_FLTDIV = 0x3,FPE_FLTOVF = 0x4,FPE_FLTUND = 0x5,FPE_FLTRES = 0x6,FPE_FLTINV = 0x7,FPE_FLTSUB = 0x8,};
enum _E0BCD9FA8FAD627D1AF071660FC89943 {INOTIFY_MAX_USER_INSTANCES = 0x1,INOTIFY_MAX_USER_WATCHES = 0x2,INOTIFY_MAX_QUEUED_EVENTS = 0x3,};
enum _E12B6EC3796E924F65D7BDA27D4A9CE5 {PTHREAD_SCOPE_SYSTEM = 0x0,PTHREAD_SCOPE_PROCESS = 0x1,};
enum _E1B461D6ADC649FA7943809455C6C6EE {NOTIFY_BPT = 0x0,NOTIFY_AUTOBPT = 0x1,NOTIFY_SYSCALL = 0x2,};
enum _E2F8A2D7FB915A5C07D5EB1DB2E0FE35 {TEAM_ATTR_ITEM_PORT_UNSPEC = 0x0,TEAM_ATTR_ITEM_PORT = 0x1,__TEAM_ATTR_ITEM_PORT_MAX = 0x2,TEAM_ATTR_ITEM_PORT_MAX = 0x1,};
struct _E2FA2D6AC7903AC733F449DE69784828 {int tone_index;int freq0;int gain0;int freq1;int gain1;};
enum _E36C8D2C56B42191E3816E8650763980 {LIO_WAIT = 0x0,LIO_NOWAIT = 0x1,};
enum _E385CDEA8CFF6E4370ACEA6C55A0E665 {PTY_MAX = 0x1,PTY_NR = 0x2,};
enum _E3C54E6AF1A52B61F4AD7296226550D5 {HW_BREAKPOINT_LEN_1 = 0x1,HW_BREAKPOINT_LEN_2 = 0x2,HW_BREAKPOINT_LEN_4 = 0x4,HW_BREAKPOINT_LEN_8 = 0x8,};
enum _E5C5D397C30A2E6A94A96873FC160F2C {SK_MEMINFO_RMEM_ALLOC = 0x0,SK_MEMINFO_RCVBUF = 0x1,SK_MEMINFO_WMEM_ALLOC = 0x2,SK_MEMINFO_SNDBUF = 0x3,SK_MEMINFO_FWD_ALLOC = 0x4,SK_MEMINFO_WMEM_QUEUED = 0x5,SK_MEMINFO_OPTMEM = 0x6,SK_MEMINFO_BACKLOG = 0x7,SK_MEMINFO_VARS = 0x8,};
enum _E6800ACA1FDD022FD3A7B70BC1DB399E {CTRL_ATTR_MCAST_GRP_UNSPEC = 0x0,CTRL_ATTR_MCAST_GRP_NAME = 0x1,CTRL_ATTR_MCAST_GRP_ID = 0x2,__CTRL_ATTR_MCAST_GRP_MAX = 0x3,};
struct _E688C0674EF62F7B7CE00CF8BBC4E652 {char *configfile;char *modulepath;char *logfile;};
enum _E91D4340CA5A26DC1925BF6EE35D79DA {IPRANGE_SRC = 0x1,IPRANGE_DST = 0x2,IPRANGE_SRC_INV = 0x10,IPRANGE_DST_INV = 0x20,};
enum _E94F030E7C9B240D1B33F491D78F7782 {IFLA_VF_LINK_STATE_AUTO = 0x0,IFLA_VF_LINK_STATE_ENABLE = 0x1,IFLA_VF_LINK_STATE_DISABLE = 0x2,__IFLA_VF_LINK_STATE_MAX = 0x3,};
enum _E9FA0B78E49A4531C5AFBC82D9F4BBAB {UDP_MIB_NUM = 0x0,UDP_MIB_INDATAGRAMS = 0x1,UDP_MIB_NOPORTS = 0x2,UDP_MIB_INERRORS = 0x3,UDP_MIB_OUTDATAGRAMS = 0x4,UDP_MIB_RCVBUFERRORS = 0x5,UDP_MIB_SNDBUFERRORS = 0x6,UDP_MIB_CSUMERRORS = 0x7,__UDP_MIB_MAX = 0x8,};
struct _EAD4BA1AA5D214B5D4E5F46AB8426598 {unsigned int sequence;};
enum _EAF9BAD2D042D4FADA73E228E4674AE3 {PER_LINUX_FDPIC = 0x80000,};
enum _EB25B1A24B27BDB2B4A3D288EAD0C3E5 {UBI_VOL_PROP_DIRECT_WRITE = 0x1,};
enum _EBAB663850F5FC0FD60D9237EF3E5FCE {hz20 = 0x7FFA,hz50 = 0x7FE5,hz133 = 0x7F4C,hz200 = 0x7E6B,hz261 = 0x7D50,hz277 = 0x7CFA,hz293 = 0x7C9F,hz300 = 0x7C75,hz311 = 0x7C32,hz329 = 0x7BBF,hz330 = 0x7BB8,hz340 = 0x7B75,hz349 = 0x7B37,hz350 = 0x7B30,hz360 = 0x7AE9,hz369 = 0x7AA8,hz380 = 0x7A56,hz392 = 0x79FA,hz400 = 0x79BB,hz415 = 0x7941,hz420 = 0x7918,hz425 = 0x78EE,hz435 = 0x7899,hz440 = 0x786D,hz445 = 0x7842,hz450 = 0x7815,hz452 = 0x7803,hz466 = 0x7784,hz475 = 0x7731,hz480 = 0x7701,hz493 = 0x7685,hz494 = 0x767B,hz500 = 0x7640,hz520 = 0x7578,hz523 = 0x7559,hz525 = 0x7544,hz540 = 0x74A7,hz554 = 0x7411,hz587 = 0x72A1,hz590 = 0x727F,hz600 = 0x720B,hz620 = 0x711E,hz622 = 0x7106,hz659 = 0x6F3B,hz660 = 0x6F2E,hz698 = 0x6D3D,hz700 = 0x6D22,hz739 = 0x6B09,hz740 = 0x6AFA,hz750 = 0x6A6C,hz770 = 0x694B,hz783 = 0x688B,hz800 = 0x678D,hz816 = 0x6698,hz830 = 0x65BF,hz850 = 0x6484,hz857 = 0x6414,hz880 = 0x629F,hz900 = 0x6154,hz932 = 0x5F35,hz935 = 0x5F01,hz941 = 0x5E9A,hz942 = 0x5E88,hz950 = 0x5DFD,hz975 = 0x5C44,hz1000 = 0x5A81,hz1020 = 0x5912,hz1050 = 0x56E2,hz1100 = 0x5320,hz1140 = 0x5007,hz1200 = 0x4B3B,hz1209 = 0x4A80,hz1215 = 0x4A02,hz1250 = 0x471C,hz1300 = 0x42E0,hz1330 = 0x4049,hz1336 = 0x3FC4,hz1366 = 0x3D22,hz1380 = 0x3BE4,hz1400 = 0x3A1B,hz1450 = 0x3596,hz1477 = 0x331C,hz1500 = 0x30FB,hz1600 = 0x278D,hz1633 = 0x2462,hz1638 = 0x23E7,hz1645 = 0x233A,hz1750 = 0x18F8,hz1800 = 0x1405,hz1860 = 0xE0B,hz2100 = 0xF5F6,hz2130 = 0xF2F5,hz2450 = 0xD3B3,hz2750 = 0xB8E4,};
struct _EBE355A101A506B8BB9BC1A4B6A6F5B0 {unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;};
enum _EC1AAF714C56A9A29BA75DB238CC671A {DLM_STATUS_WAITING = 0x1,DLM_STATUS_GRANTED = 0x2,DLM_STATUS_CONVERT = 0x3,};
enum _ECCAB4FEBED1930609036431D323CCE9 {SNDRV_HWDEP_IFACE_OPL2 = 0x0,SNDRV_HWDEP_IFACE_OPL3 = 0x1,SNDRV_HWDEP_IFACE_OPL4 = 0x2,SNDRV_HWDEP_IFACE_SB16CSP = 0x3,SNDRV_HWDEP_IFACE_EMU10K1 = 0x4,SNDRV_HWDEP_IFACE_YSS225 = 0x5,SNDRV_HWDEP_IFACE_ICS2115 = 0x6,SNDRV_HWDEP_IFACE_SSCAPE = 0x7,SNDRV_HWDEP_IFACE_VX = 0x8,SNDRV_HWDEP_IFACE_MIXART = 0x9,SNDRV_HWDEP_IFACE_USX2Y = 0xA,SNDRV_HWDEP_IFACE_EMUX_WAVETABLE = 0xB,SNDRV_HWDEP_IFACE_BLUETOOTH = 0xC,SNDRV_HWDEP_IFACE_USX2Y_PCM = 0xD,SNDRV_HWDEP_IFACE_PCXHR = 0xE,SNDRV_HWDEP_IFACE_SB_RC = 0xF,SNDRV_HWDEP_IFACE_HDA = 0x10,SNDRV_HWDEP_IFACE_USB_STREAM = 0x11,SNDRV_HWDEP_IFACE_LAST = 0x11,};
enum _ED19FEC31B217CF7F4BA80D46275ACC8 {NFPROTO_UNSPEC = 0x0,NFPROTO_IPV4 = 0x2,NFPROTO_ARP = 0x3,NFPROTO_BRIDGE = 0x7,NFPROTO_IPV6 = 0xA,NFPROTO_DECNET = 0xC,NFPROTO_NUMPROTO = 0xD,};
struct _EDB85F966E4A638CA0FF7E75C4B94ACF {char rose_addr[5];};
enum _EDBA1914F16BC538415B0E0A3A3FD3BB {FIND = 0x0,ENTER = 0x1,};
enum _EDBC1E32A31FCE51F31949A41DDF3D2A {SNDRV_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0x0,SNDRV_PCM_TSTAMP_TYPE_MONOTONIC = 0x1,SNDRV_PCM_TSTAMP_TYPE_LAST = 0x1,};
struct _EEC12600E3B3BC42C851475B8200B3A2 {unsigned int clock_rate;unsigned int clock_type;unsigned __int16 loopback;};
enum _EF22D28921FAD40188151B015D14493D {PORT_REQUEST_PREASSOCIATE = 0x0,PORT_REQUEST_PREASSOCIATE_RR = 0x1,PORT_REQUEST_ASSOCIATE = 0x2,PORT_REQUEST_DISASSOCIATE = 0x3,};
enum _EF3C2DA102DF653E134B1099F42937AE {UBI_DYNAMIC_VOLUME = 0x3,UBI_STATIC_VOLUME = 0x4,};
enum _EFFCCC499374A8D345BFA60CF9EEB362 {IPT_ECN_IP_MASK = 0xFFFFFF03,IPT_ECN_OP_MATCH_IP = 0x1,IPT_ECN_OP_MATCH_ECE = 0x10,IPT_ECN_OP_MATCH_CWR = 0x20,IPT_ECN_OP_MATCH_MASK = 0xCE,};
enum _F17F52953F7A1D1E518E4DC07A9BE027 {TCF_EM_OPND_EQ = 0x0,TCF_EM_OPND_GT = 0x1,TCF_EM_OPND_LT = 0x2,};
enum _F19F9B134F208A3967B2D7983280CA18 {_ISupper = 0x100,_ISlower = 0x200,_ISalpha = 0x400,_ISdigit = 0x800,_ISxdigit = 0x1000,_ISspace = 0x2000,_ISprint = 0x4000,_ISgraph = 0x8000,_ISblank = 0x1,_IScntrl = 0x2,_ISpunct = 0x4,_ISalnum = 0x8,};
enum _F1F08A28B7CE4D8B86945E590C2AE6B2 {OSD_BITMAP1 = 0x0,OSD_BITMAP2 = 0x1,OSD_BITMAP4 = 0x2,OSD_BITMAP8 = 0x3,OSD_BITMAP1HR = 0x4,OSD_BITMAP2HR = 0x5,OSD_BITMAP4HR = 0x6,OSD_BITMAP8HR = 0x7,OSD_YCRCB422 = 0x8,OSD_YCRCB444 = 0x9,OSD_YCRCB444HR = 0xA,OSD_VIDEOTSIZE = 0xB,OSD_VIDEOHSIZE = 0xC,OSD_VIDEOQSIZE = 0xD,OSD_VIDEODSIZE = 0xE,OSD_VIDEOTHSIZE = 0xF,OSD_VIDEOTQSIZE = 0x10,OSD_VIDEOTDSIZE = 0x11,OSD_VIDEONSIZE = 0x12,OSD_CURSOR = 0x13,};
enum _F1F648DD099C1B085CB728875CF977ED {ADDR_NO_RANDOMIZE = 0x40000,MMAP_PAGE_ZERO = 0x100000,ADDR_COMPAT_LAYOUT = 0x200000,READ_IMPLIES_EXEC = 0x400000,ADDR_LIMIT_32BIT = 0x800000,SHORT_INODE = 0x1000000,WHOLE_SECONDS = 0x2000000,STICKY_TIMEOUTS = 0x4000000,ADDR_LIMIT_3GB = 0x8000000,};
struct _F1F9335C32D188513BC2595A34A539C6 {unsigned __int16 encoding;unsigned __int16 parity;};
enum _F235F1A899F5B555A6982738244969CC {IFLA_IPOIB_UNSPEC = 0x0,IFLA_IPOIB_PKEY = 0x1,IFLA_IPOIB_MODE = 0x2,IFLA_IPOIB_UMCAST = 0x3,__IFLA_IPOIB_MAX = 0x4,};
enum _F3257ACAE298DAFCF223E05D782F0187 {__GCONV_IS_LAST = 0x1,__GCONV_IGNORE_ERRORS = 0x2,__GCONV_SWAP = 0x4,};
enum _F3466220812A2E418E930C294A45C6EA {OSD_Close = 0x1,OSD_Open = 0x2,OSD_Show = 0x3,OSD_Hide = 0x4,OSD_Clear = 0x5,OSD_Fill = 0x6,OSD_SetColor = 0x7,OSD_SetPalette = 0x8,OSD_SetTrans = 0x9,OSD_SetPixel = 0xA,OSD_GetPixel = 0xB,OSD_SetRow = 0xC,OSD_SetBlock = 0xD,OSD_FillRow = 0xE,OSD_FillBlock = 0xF,OSD_Line = 0x10,OSD_Query = 0x11,OSD_Test = 0x12,OSD_Text = 0x13,OSD_SetWindow = 0x14,OSD_MoveWindow = 0x15,OSD_OpenRaw = 0x16,};
enum _F36832D1A8492353777D3B766025617E {SS_FREE = 0x0,SS_UNCONNECTED = 0x1,SS_CONNECTING = 0x2,SS_CONNECTED = 0x3,SS_DISCONNECTING = 0x4,};
enum _F4E12790167DD1E29DB590CCE9C4A208 {INET_DIAG_REQ_NONE = 0x0,INET_DIAG_REQ_BYTECODE = 0x1,};
enum _F635B0FB7108EDE3FD64CBF6B360116E {WRDE_NOSYS = 0xFFFFFFFF,WRDE_NOSPACE = 0x1,WRDE_BADCHAR = 0x2,WRDE_BADVAL = 0x3,WRDE_CMDSUB = 0x4,WRDE_SYNTAX = 0x5,};
enum _F9B5BAA45AB0F213B246FE8253AEE32F {WIMAX_GNL_STCH_IFIDX = 0x1,WIMAX_GNL_STCH_STATE_OLD = 0x2,WIMAX_GNL_STCH_STATE_NEW = 0x3,};
enum _FCD655E0C39E155367D8B8505F7FCFE1 {BUS_ISA_MEM_BASE = 0x1,BUS_ISA_PORT_BASE = 0x2,BUS_ISA_PORT_SHIFT = 0x3,};
enum _FCDACB232C33C8C505189913D48887B6 {PTHREAD_MUTEX_STALLED = 0x0,PTHREAD_MUTEX_STALLED_NP = 0x0,PTHREAD_MUTEX_ROBUST = 0x1,PTHREAD_MUTEX_ROBUST_NP = 0x1,};
enum _FD566CDFC1038D8175380BFF86567487 {INET_DIAG_BC_NOP = 0x0,INET_DIAG_BC_JMP = 0x1,INET_DIAG_BC_S_GE = 0x2,INET_DIAG_BC_S_LE = 0x3,INET_DIAG_BC_D_GE = 0x4,INET_DIAG_BC_D_LE = 0x5,INET_DIAG_BC_AUTO = 0x6,INET_DIAG_BC_S_COND = 0x7,INET_DIAG_BC_D_COND = 0x8,};
enum _FE790CD3BD14997723CBFB5A61519AED {SIGEV_SIGNAL = 0x0,SIGEV_NONE = 0x1,SIGEV_THREAD = 0x2,SIGEV_THREAD_ID = 0x4,};
enum _FF2E9BF893E1089F1956BD5B3675C70B {TCF_EM_ALIGN_U8 = 0x1,TCF_EM_ALIGN_U16 = 0x2,TCF_EM_ALIGN_U32 = 0x4,};
enum MACRO_MultibufferWindowUpdateHint {MultibufferWindowUpdateHint = 1,};
enum MACRO_XIMStringConversionLeftEdge {XIMStringConversionLeftEdge = 0x1,XIMStringConversionRightEdge = 0x2,XIMStringConversionTopEdge = 0x4,XIMStringConversionBottomEdge = 0x8,XIMStringConversionConcealed = 0x10,XIMStringConversionWrapped = 0x20,};
enum MACRO_XkbAllNewKeyboardEventsMask {XkbAllNewKeyboardEventsMask = 0x7,};
enum MACRO_sz_xScreenSaverQueryInfoReq {sz_xScreenSaverQueryInfoReq = 8,sz_xScreenSaverQueryInfoReply = 32,};
enum MACRO_sz_xSecurityQueryVersionReq {sz_xSecurityQueryVersionReq = 8,sz_xSecurityQueryVersionReply = 32,sz_xSecurityGenerateAuthorizationReq = 12,sz_xSecurityGenerateAuthorizationReply = 32,sz_xSecurityRevokeAuthorizationReq = 8,sz_xSecurityAuthorizationRevokedEvent = 32,};
enum MACRO_sz_xXF86BigfontQueryFontReq {sz_xXF86BigfontQueryFontReq = 12,sz_xXF86BigfontQueryFontReply = 72,};
enum MACRO_sz_xXF86MiscQueryVersionReq {sz_xXF86MiscQueryVersionReq = 4,sz_xXF86MiscQueryVersionReply = 32,sz_xXF86MiscGetMouseSettingsReq = 4,sz_xXF86MiscGetMouseSettingsReply = 44,sz_xXF86MiscGetKbdSettingsReq = 4,sz_xXF86MiscGetKbdSettingsReply = 32,sz_xXF86MiscSetMouseSettingsReq = 36,sz_xXF86MiscSetKbdSettingsReq = 20,sz_xXF86MiscSetGrabKeysStateReq = 8,sz_xXF86MiscSetGrabKeysStateReply = 32,sz_xXF86MiscSetClientVersionReq = 8,sz_xXF86MiscGetFilePathsReq = 4,sz_xXF86MiscGetFilePathsReply = 32,sz_xXF86MiscPassMessageReq = 12,sz_xXF86MiscPassMessageReply = 32,};
typedef struct _XIMStringConversionCallbackStruct XIMStringConversionCallbackStruct;
enum v4l2_mpeg_video_h264_entropy_mode {V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC = 0x0,V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC = 0x1,};
enum v4l2_mpeg_video_h264_fmo_map_type {V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES = 0x0,V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES = 0x1,V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER = 0x2,V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT = 0x3,V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN = 0x4,V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN = 0x5,V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT = 0x6,};
typedef struct _7B1AACD52ED53B3363F77B2C48FE4393 xChangeDeviceDontPropagateListReq;
typedef struct _28432349E9E6DB3D22D342B43F161279 xCompositeReleaseOverlayWindowReq;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeUnredirectSubwindowsReq;
typedef struct _F2ECD6480817AB9433FAAAFCD2A3757B xSecurityGenerateAuthorizationReq;
typedef struct _5017C5E321C1F8BFCB8C657324B6EA8C xXF86VidModeGetGammaRampSizeReply;
typedef struct _9763FFEA107F886AC733AD6B5D71CF1E xXF86VidModeValidateModeLineReply;
typedef struct _C0A0DF669A9A28D262D6289CF39399F2 xXFixesCreateRegionFromPictureReq;
typedef struct _8ED815E5FBCF56EC30B814FDB5559582 xXFixesGetCursorImageAndNameReply;
struct xcb_damage_query_version_cookie_t {unsigned int sequence;};
struct xcb_dri2_attach_format_iterator_t {xcb_dri2_attach_format_t *data;int rem;int index;};
struct xcb_get_keyboard_control_cookie_t {unsigned int sequence;};
struct xcb_get_keyboard_mapping_cookie_t {unsigned int sequence;};
struct xcb_get_modifier_mapping_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_context_state_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_large_request_error_t;
struct xcb_glx_get_pixel_mapuiv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_pixel_mapusv_cookie_t {unsigned int sequence;};
struct xcb_input_button_state_iterator_t {xcb_input_button_state_t *data;int rem;int index;};
struct xcb_input_device_state_iterator_t {xcb_input_device_state_t *data;int rem;int index;};
struct xcb_input_feedback_ctl_iterator_t {xcb_input_feedback_ctl_t *data;int rem;int index;};
struct xcb_list_fonts_with_info_cookie_t {unsigned int sequence;};
struct xcb_randr_get_crtc_gamma_cookie_t {unsigned int sequence;};
struct xcb_record_client_info_iterator_t {xcb_record_client_info_t *data;int rem;int index;};
struct xcb_record_query_version_cookie_t {unsigned int sequence;};
struct xcb_render_query_filters_cookie_t {unsigned int sequence;};
struct xcb_render_query_version_cookie_t {unsigned int sequence;};
struct xcb_set_modifier_mapping_cookie_t {unsigned int sequence;};
struct xcb_setup_authenticate_iterator_t {xcb_setup_authenticate_t *data;int rem;int index;};
struct xcb_shape_get_rectangles_cookie_t {unsigned int sequence;};
struct xcb_shape_input_selected_cookie_t {unsigned int sequence;};
struct xcb_sync_systemcounter_iterator_t {xcb_sync_systemcounter_t *data;int rem;int index;};
struct xcb_sync_waitcondition_iterator_t {xcb_sync_waitcondition_t *data;int rem;int index;};
struct xcb_xc_misc_get_xid_list_cookie_t {unsigned int sequence;};
struct xcb_xfixes_query_version_cookie_t {unsigned int sequence;};
enum xcb_xfixes_selection_event_mask_t {XCB_XFIXES_SELECTION_EVENT_MASK_SET_SELECTION_OWNER = 0x1,XCB_XFIXES_SELECTION_EVENT_MASK_SELECTION_WINDOW_DESTROY = 0x2,XCB_XFIXES_SELECTION_EVENT_MASK_SELECTION_CLIENT_CLOSE = 0x4,};
struct xcb_xkb_per_client_flags_cookie_t {unsigned int sequence;};
struct xcb_xkb_sa_latch_group_iterator_t {xcb_xkb_sa_latch_group_t *data;int rem;int index;};
enum xcb_xv_image_format_info_format_t {XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PACKED = 0x0,XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PLANAR = 0x1,};
enum MACRO_BitmapFormatScanlineUnit64 {BitmapFormatScanlineUnit64 = 12288,};
enum MACRO_CompositeRedirectAutomatic {CompositeRedirectAutomatic = 0,CompositeRedirectManual = 1,};
enum MACRO_MultibufferBufferEventMask {MultibufferBufferEventMask = 1,};
enum MACRO_XDamageReportRawRectangles {XDamageReportRawRectangles = 0,XDamageReportDeltaRectangles = 1,XDamageReportBoundingBox = 2,};
enum MACRO_X_ScreenSaverSetAttributes {X_ScreenSaverSetAttributes = 3,};
enum MACRO_sz_xXF86DGAQueryVersionReq {sz_xXF86DGAQueryVersionReq = 4,sz_xXF86DGAQueryVersionReply = 32,sz_xXF86DGAGetVideoLLReq = 8,sz_xXF86DGAInstallColormapReq = 12,sz_xXF86DGAGetVideoLLReply = 32,sz_xXF86DGADirectVideoReq = 8,sz_xXF86DGAGetViewPortSizeReq = 8,sz_xXF86DGAGetViewPortSizeReply = 32,sz_xXF86DGASetViewPortReq = 16,sz_xXF86DGAGetVidPageReq = 8,sz_xXF86DGAGetVidPageReply = 32,sz_xXF86DGASetVidPageReq = 8,sz_xXF86DGAQueryDirectVideoReq = 8,sz_xXF86DGAQueryDirectVideoReply = 32,sz_xXF86DGAViewPortChangedReq = 8,sz_xXF86DGAViewPortChangedReply = 32,};
typedef struct autofs_v5_packet autofs_packet_missing_indirect_t;
enum v4l2_auto_n_preset_white_balance {V4L2_WHITE_BALANCE_MANUAL = 0x0,V4L2_WHITE_BALANCE_AUTO = 0x1,V4L2_WHITE_BALANCE_INCANDESCENT = 0x2,V4L2_WHITE_BALANCE_FLUORESCENT = 0x3,V4L2_WHITE_BALANCE_FLUORESCENT_H = 0x4,V4L2_WHITE_BALANCE_HORIZON = 0x5,V4L2_WHITE_BALANCE_DAYLIGHT = 0x6,V4L2_WHITE_BALANCE_FLASH = 0x7,V4L2_WHITE_BALANCE_CLOUDY = 0x8,V4L2_WHITE_BALANCE_SHADE = 0x9,};
enum v4l2_mpeg_video_h264_vui_sar_idc {V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED = 0x0,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1 = 0x1,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11 = 0x2,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11 = 0x3,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11 = 0x4,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33 = 0x5,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11 = 0x6,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11 = 0x7,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11 = 0x8,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33 = 0x9,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11 = 0xA,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11 = 0xB,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33 = 0xC,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99 = 0xD,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3 = 0xE,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2 = 0xF,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1 = 0x10,V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED = 0x11,};
enum v4l2_mpeg_video_multi_slice_mode {V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE = 0x0,V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB = 0x1,V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES = 0x2,};
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXChangeDesktopAttributesReply;
typedef struct _0CBB5A6AED43B7843759DE8BFE16890A xDMXChangeScreensAttributesReply;
typedef struct _B8E9EA4A4551E0BACF327E18B2707DE7 xDbeGetBackBufferAttributesReply;
typedef struct _988632284A71C49D1170FC4598DEA165 xGetDeviceDontPropagateListReply;
typedef struct _90B3239242A1E7B072ABC9D9983310BF xGetSelectedExtensionEventsReply;
typedef struct _7E3EB1143DB1648EACC9B112CB231A1D xRenderQueryPictIndexValuesReply;
typedef struct _XF86OldVidModeValidateModeLine xXF86OldVidModeDeleteModeLineReq;
typedef struct _CBEB826488D526BABFC41413DDE1C327 xXF86VidModeGetAllModeLinesReply;
typedef struct _1C8B88A4B2A3D81E79624372BB131558 xXFixesCreateRegionFromBitmapReq;
typedef struct _E6E23F4F2E9628A3BBE27C1C5CFEEEE2 xXFixesCreateRegionFromWindowReq;
typedef struct _BD6B6A249F1B6C2CBC1F20B0596A95AC xXResQueryClientPixmapBytesReply;
struct xcb_big_requests_enable_cookie_t {unsigned int sequence;};
struct xcb_get_pointer_control_cookie_t {unsigned int sequence;};
struct xcb_get_pointer_mapping_cookie_t {unsigned int sequence;};
struct xcb_get_selection_owner_cookie_t {unsigned int sequence;};
struct xcb_glx_gen_queries_arb_cookie_t {unsigned int sequence;};
struct xcb_glx_get_color_table_cookie_t {unsigned int sequence;};
struct xcb_glx_get_pixel_mapfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_queryiv_arb_cookie_t {unsigned int sequence;};
struct xcb_input_button_info_iterator_t {xcb_input_button_info_t *data;int rem;int index;};
struct xcb_input_device_info_iterator_t {xcb_input_device_info_t *data;int rem;int index;};
struct xcb_input_input_state_iterator_t {xcb_input_input_state_t *data;int rem;int index;};
struct xcb_randr_crtc_change_iterator_t {xcb_randr_crtc_change_t *data;int rem;int index;};
struct xcb_randr_get_crtc_info_cookie_t {unsigned int sequence;};
struct xcb_randr_notify_data_iterator_t {xcb_randr_notify_data_t *data;int rem;int index;};
struct xcb_randr_query_version_cookie_t {unsigned int sequence;};
struct xcb_randr_screen_size_iterator_t {xcb_randr_screen_size_t *data;int rem;int index;};
struct xcb_render_indexvalue_iterator_t {xcb_render_indexvalue_t *data;int rem;int index;};
struct xcb_render_pictscreen_iterator_t {xcb_render_pictscreen_t *data;int rem;int index;};
struct xcb_render_pictvisual_iterator_t {xcb_render_pictvisual_t *data;int rem;int index;};
struct xcb_selinux_list_item_iterator_t {xcb_selinux_list_item_t *data;int rem;int index;};
struct xcb_set_pointer_mapping_cookie_t {unsigned int sequence;};
struct xcb_shape_query_extents_cookie_t {unsigned int sequence;};
struct xcb_shape_query_version_cookie_t {unsigned int sequence;};
struct xcb_test_compare_cursor_cookie_t {unsigned int sequence;};
struct xcb_xc_misc_get_version_cookie_t {unsigned int sequence;};
struct xcb_xevie_query_version_cookie_t {unsigned int sequence;};
struct xcb_xfixes_fetch_region_cookie_t {unsigned int sequence;};
struct xcb_xkb_common_doodad_iterator_t {xcb_xkb_common_doodad_t *data;int rem;int index;};
struct xcb_xkb_get_device_info_cookie_t {unsigned int sequence;};
struct xcb_xkb_get_kbd_by_name_cookie_t {unsigned int sequence;};
struct xcb_xkb_indicator_map_iterator_t {xcb_xkb_indicator_map_t *data;int rem;int index;};
struct xcb_xkb_key_v_mod_map_iterator_t {xcb_xkb_key_v_mod_map_t *data;int rem;int index;};
struct xcb_xkb_list_components_cookie_t {unsigned int sequence;};
struct xcb_xkb_lock_behavior_iterator_t {xcb_xkb_lock_behavior_t *data;int rem;int index;};
struct xcb_xkb_sa_device_btn_iterator_t {xcb_xkb_sa_device_btn_t *data;int rem;int index;};
struct xcb_xkb_sa_latch_mods_iterator_t {xcb_xkb_sa_latch_mods_t *data;int rem;int index;};
struct xcb_xkb_sa_lock_group_iterator_t {xcb_xkb_sa_lock_group_t *data;int rem;int index;};
struct xcb_xv_attribute_info_iterator_t {xcb_xv_attribute_info_t *data;int rem;int index;};
struct xcb_xvmc_create_context_cookie_t {unsigned int sequence;};
struct xcb_xvmc_create_surface_cookie_t {unsigned int sequence;};
struct xcb_xvmc_surface_info_iterator_t {xcb_xvmc_surface_info_t *data;int rem;int index;};
enum MACRO_BitmapFormatByteOrderMask {BitmapFormatByteOrderMask = 1,BitmapFormatBitOrderMask = 2,BitmapFormatImageRectMask = 12,BitmapFormatScanlinePadMask = 768,BitmapFormatScanlineUnitMask = 12288,};
enum MACRO_BitmapFormatScanlinePad64 {BitmapFormatScanlinePad64 = 768,};
enum MACRO_BitmapFormatScanlineUnit8 {BitmapFormatScanlineUnit8 = 0,BitmapFormatScanlineUnit16 = 4096,BitmapFormatScanlineUnit32 = 8192,};
enum MACRO_CatalogueChangeNotifyMask {CatalogueChangeNotifyMask = 1,FontChangeNotifyMask = 2,};
enum MACRO_LEGACYGETDEVICEPARAMETERS {LEGACYGETDEVICEPARAMETERS = 0x8,};
enum MACRO_PictOpConjointAtopReverse {PictOpConjointAtopReverse = 0x2A,};
enum MACRO_PictOpConjointOverReverse {PictOpConjointOverReverse = 0x24,};
enum MACRO_PictOpDisjointAtopReverse {PictOpDisjointAtopReverse = 0x1A,};
enum MACRO_PictOpDisjointOverReverse {PictOpDisjointOverReverse = 0x14,};
enum MACRO_XF86DGADirectNotActivated {XF86DGADirectNotActivated = 3,XF86DGAOperationNotSupported = 4,};
enum MACRO_XF86VidModeClientNotLocal {XF86VidModeClientNotLocal = 5,};
enum MACRO_XF86VidModeModeUnsuitable {XF86VidModeModeUnsuitable = 3,XF86VidModeExtensionDisabled = 4,};
enum MACRO_XFixesDisplayCursorNotify {XFixesDisplayCursorNotify = 0,XFixesDisplayCursorNotifyMask = 1,XFixesNumberEvents = 2,};
enum MACRO_XIMStringConversionBuffer {XIMStringConversionBuffer = 0x1,XIMStringConversionLine = 0x2,};
enum MACRO_XSecurityBadAuthorization {XSecurityBadAuthorization = 0,XSecurityBadAuthorizationProtocol = 1,};
enum MACRO_X_ScreenSaverQueryVersion {X_ScreenSaverQueryVersion = 0,};
enum MACRO_X_XF86BigfontQueryVersion {X_XF86BigfontQueryVersion = 0,X_XF86BigfontQueryFont = 1,};
enum MACRO_X_XF86VidModeQueryVersion {X_XF86VidModeQueryVersion = 0,X_XF86VidModeGetModeLine = 1,X_XF86VidModeModModeLine = 2,X_XF86VidModeSwitchMode = 3,X_XF86VidModeGetMonitor = 4,X_XF86VidModeLockModeSwitch = 5,X_XF86VidModeGetAllModeLines = 6,X_XF86VidModeAddModeLine = 7,X_XF86VidModeDeleteModeLine = 8,X_XF86VidModeValidateModeLine = 9,X_XF86VidModeSwitchToMode = 10,X_XF86VidModeGetViewPort = 11,X_XF86VidModeSetViewPort = 12,X_XF86VidModeGetDotClocks = 13,X_XF86VidModeSetClientVersion = 14,X_XF86VidModeSetGamma = 15,X_XF86VidModeGetGamma = 16,X_XF86VidModeGetGammaRamp = 17,X_XF86VidModeSetGammaRamp = 18,X_XF86VidModeGetGammaRampSize = 19,X_XF86VidModeGetPermissions = 20,};
enum MACRO_XkbAllStateComponentsMask {XkbAllStateComponentsMask = 0x3FFF,};
enum MACRO__LINUX_CAPABILITY_VERSION {_LINUX_CAPABILITY_VERSION = 429392688,_LINUX_CAPABILITY_U32S = 1,};
enum MACRO_sz_xDamageQueryVersionReq {sz_xDamageQueryVersionReq = 12,sz_xDamageQueryVersionReply = 32,sz_xDamageCreateReq = 16,sz_xDamageDestroyReq = 8,sz_xDamageSubtractReq = 16,sz_xDamageAddReq = 12,};
enum MACRO_sz_xScreenSaverSuspendReq {sz_xScreenSaverSuspendReq = 8,sz_xScreenSaverNotifyEvent = 32,};
enum MACRO_sz_xXFixesQueryVersionReq {sz_xXFixesQueryVersionReq = 12,sz_xXFixesQueryVersionReply = 32,sz_xXFixesChangeSaveSetReq = 12,sz_xXFixesSelectSelectionInputReq = 16,sz_xXFixesSelectCursorInputReq = 12,sz_xXFixesGetCursorImageReq = 4,sz_xXFixesGetCursorImageReply = 32,sz_xXFixesCreateRegionReq = 8,sz_xXFixesCreateRegionFromBitmapReq = 12,sz_xXFixesCreateRegionFromWindowReq = 16,sz_xXFixesCreateRegionFromGCReq = 12,sz_xXFixesCreateRegionFromPictureReq = 12,sz_xXFixesDestroyRegionReq = 8,sz_xXFixesSetRegionReq = 8,sz_xXFixesCopyRegionReq = 12,sz_xXFixesCombineRegionReq = 16,sz_xXFixesUnionRegionReq = 16,sz_xXFixesIntersectRegionReq = 16,sz_xXFixesSubtractRegionReq = 16,sz_xXFixesInvertRegionReq = 20,sz_xXFixesTranslateRegionReq = 12,sz_xXFixesRegionExtentsReq = 12,sz_xXFixesFetchRegionReq = 8,sz_xXFixesFetchRegionReply = 32,sz_xXFixesSetGCClipRegionReq = 16,sz_xXFixesSetWindowShapeRegionReq = 20,sz_xXFixesSetPictureClipRegionReq = 16,sz_xXFixesSetCursorNameReq = 12,sz_xXFixesGetCursorNameReq = 8,sz_xXFixesGetCursorNameReply = 32,sz_xXFixesGetCursorImageAndNameReq = 4,sz_xXFixesGetCursorImageAndNameReply = 32,sz_xXFixesChangeCursorReq = 12,sz_xXFixesChangeCursorByNameReq = 12,sz_xXFixesExpandRegionReq = 20,sz_xXFixesCreatePointerBarrierReq = 28,sz_xXFixesDestroyPointerBarrierReq = 8,};
typedef struct autofs_v5_packet autofs_packet_expire_indirect_t;
struct openvpn_plugin_args_func_return {struct openvpn_plugin_string_list **return_list;};
typedef struct _E2CAB82FD115FB5CD111E5D354459422 xCompositeGetOverlayWindowReply;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeRedirectSubwindowsReq;
typedef struct _E1188CFE1A0E0A12BD195964AFA7C49B xDbeDeallocateBackBufferNameReq;
typedef struct _728753621D8EDC45EC3551358A89F0F0 xRRConfigureProviderPropertyReq;
typedef struct _B466B6127C4D0EA4542034CCB3136555 xRenderCreateConicalGradientReq;
typedef struct _0D158C80ECE88D73A8DF0C6BE4079214 xSecurityRevokeAuthorizationReq;
typedef struct _04E4DAE4A3CDECE9860BD3B57B108BDE xXF86OldVidModeGetModeLineReply;
typedef struct _XF86VidModeGetGammaRampSize xXF86VidModeGetGammaRampSizeReq;
typedef struct _C636080007C4706D90F0D4DC955336B1 xXF86VidModeGetPermissionsReply;
typedef struct _XF86VidModeSetClientVersion xXF86VidModeSetClientVersionReq;
typedef struct _XF86VidModeValidateModeLine xXF86VidModeValidateModeLineReq;
typedef struct _36BEE3A57B9FB4D58D0EF1CD5EE3E1F6 xXFixesDestroyPointerBarrierReq;
typedef struct _3DD3CD96FAD56E1211E0F63114C705EF xXFixesGetCursorImageAndNameReq;
struct xcb_alloc_color_planes_cookie_t {unsigned int sequence;};
struct xcb_dri2_dri2_buffer_iterator_t {xcb_dri2_dri2_buffer_t *data;int rem;int index;};
struct xcb_dri2_query_version_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_context_tag_error_t;
struct xcb_glx_get_clip_plane_cookie_t {unsigned int sequence;};
struct xcb_glx_get_fb_configs_cookie_t {unsigned int sequence;};
struct xcb_glx_get_materialfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_materialiv_cookie_t {unsigned int sequence;};
struct xcb_input_device_ctl_iterator_t {xcb_input_device_ctl_t *data;int rem;int index;};
struct xcb_input_input_info_iterator_t {xcb_input_input_info_t *data;int rem;int index;};
typedef xcb_input_device_key_press_event_t xcb_input_proximity_out_event_t;
struct xcb_query_text_extents_cookie_t {unsigned int sequence;};
struct xcb_record_ext_range_iterator_t {xcb_record_ext_range_t *data;int rem;int index;};
struct xcb_record_get_context_cookie_t {unsigned int sequence;};
struct xcb_render_glyphinfo_iterator_t {xcb_render_glyphinfo_t *data;int rem;int index;};
struct xcb_render_pictdepth_iterator_t {xcb_render_pictdepth_t *data;int rem;int index;};
struct xcb_render_transform_iterator_t {xcb_render_transform_t *data;int rem;int index;};
struct xcb_render_trapezoid_iterator_t {xcb_render_trapezoid_t *data;int rem;int index;};
struct xcb_sync_query_counter_cookie_t {unsigned int sequence;};
struct xcb_xevie_select_input_cookie_t {unsigned int sequence;};
enum xcb_xfixes_cursor_notify_mask_t {XCB_XFIXES_CURSOR_NOTIFY_MASK_DISPLAY_CURSOR = 0x1,};
struct xcb_xinerama_get_state_cookie_t {unsigned int sequence;};
struct xcb_xinerama_is_active_cookie_t {unsigned int sequence;};
struct xcb_xkb_get_compat_map_cookie_t {unsigned int sequence;};
struct xcb_xkb_kt_map_entry_iterator_t {xcb_xkb_kt_map_entry_t *data;int rem;int index;};
enum xcb_xkb_sa_iso_lock_no_affect_t {XCB_XKB_SA_ISO_LOCK_NO_AFFECT_CTRLS = 0x8,XCB_XKB_SA_ISO_LOCK_NO_AFFECT_PTR = 0x10,XCB_XKB_SA_ISO_LOCK_NO_AFFECT_GROUP = 0x20,XCB_XKB_SA_ISO_LOCK_NO_AFFECT_MODS = 0x40,};
struct xcb_xkb_sa_lock_mods_iterator_t {xcb_xkb_sa_lock_mods_t *data;int rem;int index;};
struct xcb_xkb_sa_no_action_iterator_t {xcb_xkb_sa_no_action_t *data;int rem;int index;};
struct xcb_xkb_sa_set_group_iterator_t {xcb_xkb_sa_set_group_t *data;int rem;int index;};
struct xcb_xkb_sa_terminate_iterator_t {xcb_xkb_sa_terminate_t *data;int rem;int index;};
struct xcb_xkb_set_behavior_iterator_t {xcb_xkb_set_behavior_t *data;int rem;int index;};
struct xcb_xkb_set_explicit_iterator_t {xcb_xkb_set_explicit_t *data;int rem;int index;};
struct xcb_xkb_set_key_type_iterator_t {xcb_xkb_set_key_type_t *data;int rem;int index;};
struct xcb_xkb_shape_doodad_iterator_t {xcb_xkb_shape_doodad_t *data;int rem;int index;};
struct xcb_xv_encoding_info_iterator_t {xcb_xv_encoding_info_t *data;int rem;int index;};
enum xcb_xv_image_format_info_type_t {XCB_XV_IMAGE_FORMAT_INFO_TYPE_RGB = 0x0,XCB_XV_IMAGE_FORMAT_INFO_TYPE_YUV = 0x1,};
struct xcb_xv_query_best_size_cookie_t {unsigned int sequence;};
struct xcb_xv_query_encodings_cookie_t {unsigned int sequence;};
struct xcb_xv_query_extension_cookie_t {unsigned int sequence;};
struct xcb_xvmc_query_version_cookie_t {unsigned int sequence;};
enum MACRO_BitmapFormatByteOrderLSB {BitmapFormatByteOrderLSB = 0,BitmapFormatByteOrderMSB = 1,};
enum MACRO_BitmapFormatImageRectMin {BitmapFormatImageRectMin = 0,BitmapFormatImageRectMaxWidth = 4,BitmapFormatImageRectMax = 8,};
enum MACRO_BitmapFormatScanlinePad8 {BitmapFormatScanlinePad8 = 0,BitmapFormatScanlinePad16 = 256,BitmapFormatScanlinePad32 = 512,};
enum MACRO_LeftToRightDrawDirection {LeftToRightDrawDirection = 0,RightToLeftDrawDirection = 1,};
enum MACRO_MultibufferClobberNotify {MultibufferClobberNotify = 0,MultibufferUpdateNotify = 1,MultibufferNumberEvents = 2,};
enum MACRO_PictOpConjointOutReverse {PictOpConjointOutReverse = 0x28,};
enum MACRO_PictOpDisjointOutReverse {PictOpDisjointOutReverse = 0x18,};
enum MACRO_RRScreenChangeNotifyMask {RRScreenChangeNotifyMask = 1,RRCrtcChangeNotifyMask = 2,RROutputChangeNotifyMask = 4,RROutputPropertyNotifyMask = 8,RRProviderChangeNotifyMask = 16,RRProviderPropertyNotifyMask = 32,RRResourceChangeNotifyMask = 64,};
enum MACRO_ReleaseByFreeingColormap {ReleaseByFreeingColormap = 1,};
enum MACRO_XF86MiscBadMouseProtocol {XF86MiscBadMouseProtocol = 0,XF86MiscBadMouseBaudRate = 1,XF86MiscBadMouseFlags = 2,};
enum MACRO_XF86MiscModInDevDisabled {XF86MiscModInDevDisabled = 5,};
enum MACRO_XIBarrierPointerReleased {XIBarrierPointerReleased = 1,XIBarrierDeviceIsGrabbed = 2,};
enum MACRO_X_ScreenSaverSelectInput {X_ScreenSaverSelectInput = 2,};
enum MACRO_XkbAllActionMessagesMask {XkbAllActionMessagesMask = 1,};
enum MACRO_XkbExtensionDeviceNotify {XkbExtensionDeviceNotify = 11,};
enum MACRO_XkbNewKeyboardNotifyMask {XkbNewKeyboardNotifyMask = 1,XkbMapNotifyMask = 2,XkbStateNotifyMask = 4,XkbControlsNotifyMask = 8,XkbIndicatorStateNotifyMask = 16,XkbIndicatorMapNotifyMask = 32,XkbNamesNotifyMask = 64,XkbCompatMapNotifyMask = 128,XkbBellNotifyMask = 256,XkbActionMessageMask = 512,XkbAccessXNotifyMask = 1024,XkbExtensionDeviceNotifyMask = 2048,};
enum MACRO_XlibSpecificationRelease {XlibSpecificationRelease = 6,};
enum MACRO__devicePointerMotionHint {_devicePointerMotionHint = 0,_deviceButton1Motion = 1,_deviceButton2Motion = 2,};
enum MACRO_sz_xShapeQueryVersionReq {sz_xShapeQueryVersionReq = 4,sz_xShapeQueryVersionReply = 32,sz_xShapeRectanglesReq = 16,sz_xShapeMaskReq = 20,sz_xShapeCombineReq = 20,sz_xShapeOffsetReq = 16,sz_xShapeQueryExtentsReq = 8,sz_xShapeQueryExtentsReply = 32,sz_xShapeSelectInputReq = 12,sz_xShapeNotifyEvent = 32,sz_xShapeInputSelectedReq = 8,sz_xShapeInputSelectedReply = 32,sz_xShapeGetRectanglesReq = 12,sz_xShapeGetRectanglesReply = 32,};
enum MACRO_sz_xXevieQueryVersionReq {sz_xXevieQueryVersionReq = 8,sz_xXevieQueryVersionReply = 32,sz_xXevieStartReq = 8,sz_xXevieStartReply = 32,sz_xXevieEndReq = 8,sz_xXevieEndReply = 32,sz_xXevieSendReq = 104,sz_xXevieSendReply = 32,sz_xXevieSelectInputReq = 8,sz_xXevieSelectInputReply = 32,};
enum MACRO_sz_xvmcQueryVersionReply {sz_xvmcQueryVersionReply = 32,sz_xvmcListSurfaceTypesReply = 32,sz_xvmcCreateContextReply = 32,sz_xvmcCreateSurfaceReply = 32,sz_xvmcCreateSubpictureReply = 32,sz_xvmcListSubpictureTypesReply = 32,sz_xvmcGetDRInfoReply = 32,sz_xvRational = 8,sz_xvAdaptorInfo = 12,sz_xvEncodingInfo = 20,sz_xvFormat = 8,sz_xvAttributeInfo = 16,sz_xvImageFormatInfo = 128,};
struct __libc_lock_recursive_opaque__;
typedef struct autofs_v5_packet autofs_packet_missing_direct_t;
struct ioctl_evtchn_bind_unbound_port {unsigned int remote_domain;};
enum v4l2_iso_sensitivity_auto_type {V4L2_ISO_SENSITIVITY_MANUAL = 0x0,V4L2_ISO_SENSITIVITY_AUTO = 0x1,};
enum v4l2_mpeg_audio_mode_extension {V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 = 0x0,V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 = 0x1,V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = 0x2,V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = 0x3,};
typedef struct _B3BD77590CC72559D1303DD07BD38410 xDMXChangeDesktopAttributesReq;
typedef struct _A42D6322032E0C7A7A9C932B10DA502C xDMXChangeScreensAttributesReq;
typedef struct _E1188CFE1A0E0A12BD195964AFA7C49B xDbeGetBackBufferAttributesReq;
typedef struct _625B72EC204AD184FA367A67F4C8645C xGetDeviceDontPropagateListReq;
typedef struct _D0A230E2822E6F114388A4393E99A918 xGetDeviceModifierMappingReply;
typedef struct _625B72EC204AD184FA367A67F4C8645C xGetSelectedExtensionEventsReq;
typedef struct _2427DE1D26AE87CC436F1C07EF51166C xMbufGetMBufferAttributesReply;
typedef struct _0FED49E1AEFB77840C2E86EAD6756677 xRRListProviderPropertiesReply;
typedef struct _D0DECA1AE238766CAB6224F38ED2C117 xRRProviderPropertyNotifyEvent;
typedef struct _A1AC26B3F52FABB6E699F530F015B0DD xRenderCreateLinearGradientReq;
typedef struct _4F622AD2F1F50F32A9A86AA5D4320B7D xRenderCreateRadialGradientReq;
typedef struct _7E7BC6786790AB56FAE456C8962F7E9D xRenderQueryPictIndexValuesReq;
typedef struct _ScreenSaverUnsetAttributes xScreenSaverUnsetAttributesReq;
typedef struct _5F1426FF167D9E06CE7F137AEA610D0C xSetDeviceModifierMappingReply;
typedef struct _82CA72D52CE6587547984538D976BD84 xXF86MiscGetMouseSettingsReply;
typedef struct _9763FFEA107F886AC733AD6B5D71CF1E xXF86MiscSetGrabKeysStateReply;
typedef struct _XF86OldVidModeValidateModeLine xXF86OldVidModeSwitchToModeReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetAllModeLinesReq;
typedef struct _8E399329B49199432AAC98786CEB8DFC xXFixesCreatePointerBarrierReq;
typedef struct _0CCE02F838D9CC63825202C012B6DAD4 xXFixesSelectSelectionInputReq;
typedef struct _5CD4A96D42C01A4BC625F6F1B381D291 xXFixesSetPictureClipRegionReq;
typedef struct _E520267D12BF4FCD5BA9F753AB237D0B xXFixesSetWindowShapeRegionReq;
typedef struct _XResQueryClientPixmapBytes xXResQueryClientPixmapBytesReq;
typedef struct _D1CC089C043B8A5C6F39977960C72D3D xXResQueryClientResourcesReply;
struct xcb_alloc_color_cells_cookie_t {unsigned int sequence;};
struct xcb_alloc_named_color_cookie_t {unsigned int sequence;};
struct xcb_dpms_get_timeouts_cookie_t {unsigned int sequence;};
struct xcb_dri2_authenticate_cookie_t {unsigned int sequence;};
struct xcb_dri2_swap_buffers_cookie_t {unsigned int sequence;};
struct xcb_get_motion_events_cookie_t {unsigned int sequence;};
struct xcb_glx_get_histogram_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_envfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_enviv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_gendv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_genfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_geniv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_image_cookie_t {unsigned int sequence;};
struct xcb_glx_query_context_cookie_t {unsigned int sequence;};
struct xcb_glx_query_version_cookie_t {unsigned int sequence;};
struct xcb_input_axis_info_iterator_t {xcb_input_axis_info_t *data;int rem;int index;};
struct xcb_input_grab_device_cookie_t {unsigned int sequence;};
struct xcb_input_key_state_iterator_t {xcb_input_key_state_t *data;int rem;int index;};
struct xcb_input_open_device_cookie_t {unsigned int sequence;};
typedef xcb_input_device_key_press_event_t xcb_input_proximity_in_event_t;
struct xcb_randr_create_mode_cookie_t {unsigned int sequence;};
struct xcb_randr_get_panning_cookie_t {unsigned int sequence;};
struct xcb_randr_mode_info_iterator_t {xcb_randr_mode_info_t *data;int rem;int index;};
struct xcb_randr_set_panning_cookie_t {unsigned int sequence;};
struct xcb_record_range_16_iterator_t {xcb_record_range_16_t *data;int rem;int index;};
struct xcb_render_pointfix_iterator_t {xcb_render_pointfix_t *data;int rem;int index;};
struct xcb_render_triangle_iterator_t {xcb_render_triangle_t *data;int rem;int index;};
struct xcb_res_query_clients_cookie_t {unsigned int sequence;};
struct xcb_res_query_version_cookie_t {unsigned int sequence;};
struct xcb_shm_query_version_cookie_t {unsigned int sequence;};
struct xcb_sync_get_priority_cookie_t {unsigned int sequence;};
struct xcb_x_print_printer_iterator_t {xcb_x_print_printer_t *data;int rem;int index;};
struct xcb_xkb_key_mod_map_iterator_t {xcb_xkb_key_mod_map_t *data;int rem;int index;};
struct xcb_xkb_key_sym_map_iterator_t {xcb_xkb_key_sym_map_t *data;int rem;int index;};
struct xcb_xkb_logo_doodad_iterator_t {xcb_xkb_logo_doodad_t *data;int rem;int index;};
struct xcb_xkb_overlay_key_iterator_t {xcb_xkb_overlay_key_t *data;int rem;int index;};
struct xcb_xkb_overlay_row_iterator_t {xcb_xkb_overlay_row_t *data;int rem;int index;};
struct xcb_xkb_sa_iso_lock_iterator_t {xcb_xkb_sa_iso_lock_t *data;int rem;int index;};
struct xcb_xkb_sa_move_ptr_iterator_t {xcb_xkb_sa_move_ptr_t *data;int rem;int index;};
struct xcb_xkb_sa_set_mods_iterator_t {xcb_xkb_sa_set_mods_t *data;int rem;int index;};
enum xcb_xkb_sa_set_ptr_dflt_flag_t {XCB_XKB_SA_SET_PTR_DFLT_FLAG_DFLT_BTN_ABSOLUTE = 0x2,XCB_XKB_SA_SET_PTR_DFLT_FLAG_AFFECT_DFLT_BUTTON = 0x1,};
struct xcb_xkb_text_doodad_iterator_t {xcb_xkb_text_doodad_t *data;int rem;int index;};
struct xcb_xkb_use_extension_cookie_t {unsigned int sequence;};
struct xcb_xv_adaptor_info_iterator_t {xcb_xv_adaptor_info_t *data;int rem;int index;};
struct xcb_xv_query_adaptors_cookie_t {unsigned int sequence;};
enum MACRO_BitmapFormatBitOrderLSB {BitmapFormatBitOrderLSB = 0,BitmapFormatBitOrderMSB = 2,};
enum MACRO_CompositeNumberRequests {CompositeNumberRequests = 9,};
enum MACRO_DRI2BufferFakeFrontLeft {DRI2BufferFakeFrontLeft = 7,DRI2BufferFakeFrontRight = 8,};
enum MACRO_DRI2_BufferSwapComplete {DRI2_BufferSwapComplete = 0,DRI2_InvalidateBuffers = 1,};
enum MACRO_FamilyServerInterpreted {FamilyServerInterpreted = 5,};
enum MACRO_MiscExtGrabStateSuccess {MiscExtGrabStateSuccess = 0,MiscExtGrabStateLocked = 1,MiscExtGrabStateAlready = 2,};
enum MACRO_PictOpConjointInReverse {PictOpConjointInReverse = 0x26,};
enum MACRO_PictOpDisjointInReverse {PictOpDisjointInReverse = 0x16,};
enum MACRO_ScreenSaverMajorVersion {ScreenSaverMajorVersion = 1,};
enum MACRO_ScreenSaverMinorVersion {ScreenSaverMinorVersion = 1,};
enum MACRO_XF86BigfontNumberErrors {XF86BigfontNumberErrors = 0,};
enum MACRO_XF86BigfontNumberEvents {XF86BigfontNumberEvents = 0,};
enum MACRO_XF86VidModeNumberErrors {XF86VidModeNumberErrors = 7,};
enum MACRO_XF86VidModeNumberEvents {XF86VidModeNumberEvents = 0,};
enum MACRO_XIMStringConversionWord {XIMStringConversionWord = 0x3,XIMStringConversionChar = 0x4,};
enum MACRO_XIScrollFlagNoEmulation {XIScrollFlagNoEmulation = 1,XIScrollFlagPreferred = 2,XIKeyRepeat = 65536,};
enum MACRO_X_CompositeQueryVersion {X_CompositeQueryVersion = 0,X_CompositeRedirectWindow = 1,X_CompositeRedirectSubwindows = 2,X_CompositeUnredirectWindow = 3,X_CompositeUnredirectSubwindows = 4,X_CompositeCreateRegionFromBorderClip = 5,X_CompositeNameWindowPixmap = 6,X_CompositeGetOverlayWindow = 7,X_CompositeReleaseOverlayWindow = 8,};
enum MACRO_X_GEGetExtensionVersion {X_GEGetExtensionVersion = 1,};
enum MACRO_X_PanoramiXQueryVersion {X_PanoramiXQueryVersion = 0,X_PanoramiXGetState = 1,X_PanoramiXGetScreenCount = 2,X_PanoramiXGetScreenSize = 3,X_XineramaIsActive = 4,X_XineramaQueryScreens = 5,};
enum MACRO_XkbAllAccessXEventsMask {XkbAllAccessXEventsMask = 0x7F,};
enum MACRO_XkbAllControlEventsMask {XkbAllControlEventsMask = -134209537,};
enum MACRO_XkbAllMapComponentsMask {XkbAllMapComponentsMask = 255,};
enum MACRO_XkbExplicitKeyType1Mask {XkbExplicitKeyType1Mask = 1,XkbExplicitKeyType2Mask = 2,XkbExplicitKeyType3Mask = 4,XkbExplicitKeyType4Mask = 8,XkbExplicitInterpretMask = 16,XkbExplicitAutoRepeatMask = 32,XkbExplicitBehaviorMask = 64,XkbExplicitVModMapMask = 128,};
enum MACRO_XkbLC_ForceLatin1Lookup {XkbLC_ForceLatin1Lookup = 1,XkbLC_ConsumeLookupMods = 2,XkbLC_AlwaysConsumeShiftAndLock = 4,XkbLC_IgnoreNewKeyboards = 8,XkbLC_ControlFallback = 16,XkbLC_ConsumeKeysOnComposeFail = 536870912,XkbLC_ComposeLED = 1073741824,XkbLC_BeepOnComposeFail = 2147483648,XkbLC_AllComposeControls = -1073741824,XkbLC_AllControls = -1073741793,};
enum MACRO_sz_xDRI2QueryVersionReq {sz_xDRI2QueryVersionReq = 12,sz_xDRI2QueryVersionReply = 32,sz_xDRI2ConnectReq = 12,sz_xDRI2ConnectReply = 32,sz_xDRI2AuthenticateReq = 12,sz_xDRI2AuthenticateReply = 32,sz_xDRI2CreateDrawableReq = 8,sz_xDRI2DestroyDrawableReq = 8,sz_xDRI2GetBuffersReq = 12,sz_xDRI2GetBuffersReply = 32,sz_xDRI2CopyRegionReq = 20,sz_xDRI2CopyRegionReply = 32,sz_xDRI2SwapBuffersReq = 32,sz_xDRI2SwapBuffersReply = 32,sz_xDRI2GetMSCReq = 8,sz_xDRI2WaitMSCReq = 32,sz_xDRI2WaitSBCReq = 16,sz_xDRI2MSCReply = 32,sz_xDRI2SwapIntervalReq = 12,sz_xDRI2BufferSwapComplete = 32,sz_xDRI2BufferSwapComplete2 = 32,sz_xDRI2InvalidateBuffers = 32,sz_xDRI2GetParamReq = 12,sz_xDRI2GetParamReply = 32,};
enum MACRO_sz_xXCMiscGetVersionReq {sz_xXCMiscGetVersionReq = 8,sz_xXCMiscGetVersionReply = 32,sz_xXCMiscGetXIDRangeReq = 4,sz_xXCMiscGetXIDRangeReply = 32,sz_xXCMiscGetXIDListReq = 8,sz_xXCMiscGetXIDListReply = 32,};
enum MACRO_sz_xXDGAQueryVersionReq {sz_xXDGAQueryVersionReq = 4,sz_xXDGAQueryVersionReply = 32,sz_xXDGAQueryModesReq = 8,sz_xXDGAQueryModesReply = 32,sz_xXDGASetModeReq = 16,sz_xXDGASetModeReply = 32,sz_xXDGAModeInfo = 72,sz_xXDGAOpenFramebufferReq = 8,sz_xXDGAOpenFramebufferReply = 32,sz_xXDGACloseFramebufferReq = 8,sz_xXDGASetViewportReq = 16,sz_xXDGAInstallColormapReq = 12,sz_xXDGASelectInputReq = 12,sz_xXDGAFillRectangleReq = 20,sz_xXDGACopyAreaReq = 20,sz_xXDGACopyTransparentAreaReq = 24,sz_xXDGAGetViewportStatusReq = 8,sz_xXDGAGetViewportStatusReply = 32,sz_xXDGASyncReq = 8,sz_xXDGASyncReply = 32,sz_xXDGASetClientVersionReq = 8,sz_xXDGAChangePixmapModeReq = 16,sz_xXDGAChangePixmapModeReply = 32,sz_xXDGACreateColormapReq = 20,};
enum MACRO_sz_xXcupQueryVersionReq {sz_xXcupQueryVersionReq = 8,sz_xXcupQueryVersionReply = 32,sz_xXcupGetReservedColormapEntriesReq = 8,sz_xXcupGetReservedColormapEntriesReply = 32,sz_xXcupStoreColorsReq = 8,sz_xXcupStoreColorsReply = 32,};
typedef struct _XIMPreeditCaretCallbackStruct XIMPreeditCaretCallbackStruct;
typedef struct _XkbExtensionDeviceNotify XkbExtensionDeviceNotifyEvent;
typedef struct autofs_v5_packet autofs_packet_expire_direct_t;
struct cpufreq_available_frequencies {unsigned __int64 frequency;struct cpufreq_available_frequencies *next;struct cpufreq_available_frequencies *first;};
enum dccp_packet_dequeueing_policy {DCCPQ_POLICY_SIMPLE = 0x0,DCCPQ_POLICY_PRIO = 0x1,DCCPQ_POLICY_MAX = 0x2,};
enum ethtool_sfeatures_retval_bits {ETHTOOL_F_UNSUPPORTED__BIT = 0x0,ETHTOOL_F_WISH__BIT = 0x1,ETHTOOL_F_COMPAT__BIT = 0x2,};
struct ioctl_evtchn_bind_interdomain {unsigned int remote_domain;unsigned int remote_port;};
enum v4l2_mpeg_audio_sampling_freq {V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 = 0x0,V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 = 0x1,V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 = 0x2,};
enum v4l2_mpeg_video_mpeg4_profile {V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE = 0x0,V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE = 0x1,V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE = 0x2,V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE = 0x3,V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY = 0x4,};
typedef struct _28432349E9E6DB3D22D342B43F161279 xCompositeGetOverlayWindowReq;
typedef struct _E6CAD5F58B0D02B91FD47A036636D1EC xCompositeNameWindowPixmapReq;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeUnredirectWindowReq;
typedef struct _5F6963A5B3CCD1D3B53748FF8C021BB0 xDMXGetDesktopAttributesReply;
typedef struct _19D622DBC46A6E651ECC62511BF64658 xDbeAllocateBackBufferNameReq;
typedef struct _C889EC8CC43E7C0CC7EDA4C569652F40 xMbufGetBufferAttributesReply;
typedef struct _C201FB0F2222C07B40D490F1CBB06D58 xPanoramiXGetScreenCountReply;
typedef struct _769EDCF54321544EF8E3F46B10230032 xRRConfigureOutputPropertyReq;
typedef struct _73354D6822628524A3CBE7BEEEBEA7FE xRRQueryProviderPropertyReply;
typedef struct _357A9604AFCE0041C6457BE84E687FE7 xRRSetProviderOutputSourceReq;
typedef struct _92C41753C7AFA0CB8157A9B4DAA6D4C8 xRenderSetPictureTransformReq;
typedef struct _0E536A4A735E73BADC27E9D377D18348 xScreenSaverQueryVersionReply;
typedef struct _A4A7C3BD565590D1E17F737ABF60719A xXF86BigfontQueryVersionReply;
typedef struct _F1CA5290AFDA1F8F382C2CF8549939AD xXF86DGAQueryDirectVideoReply;
typedef struct _XF86OldVidModeAddModeLine xXF86OldVidModeAddModeLineReq;
typedef struct _XF86OldVidModeModModeLine xXF86OldVidModeModModeLineReq;
typedef struct _XF86VidModeValidateModeLine xXF86VidModeDeleteModeLineReq;
typedef struct _65CC1628E84FE837888FBDC426B5411E xXF86VidModeGetDotClocksReply;
typedef struct _5017C5E321C1F8BFCB8C657324B6EA8C xXF86VidModeGetGammaRampReply;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetPermissionsReq;
typedef struct _XF86VidModeLockModeSwitch xXF86VidModeLockModeSwitchReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86VidModeQueryVersionReply;
typedef xcb_circulate_notify_event_t xcb_circulate_request_event_t;
struct xcb_dpms_get_version_cookie_t {unsigned int sequence;};
struct xcb_dri2_copy_region_cookie_t {unsigned int sequence;};
struct xcb_dri2_get_buffers_cookie_t {unsigned int sequence;};
struct xcb_get_screen_saver_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_fb_config_error_t;
struct xcb_glx_gen_textures_cookie_t {unsigned int sequence;};
struct xcb_glx_get_booleanv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_integerv_cookie_t {unsigned int sequence;};
struct xcb_glx_is_query_arb_cookie_t {unsigned int sequence;};
struct xcb_glx_make_current_cookie_t {unsigned int sequence;};
enum xcb_input_device_input_mode_t {XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_THIS_DEVICE = 0x0,XCB_INPUT_DEVICE_INPUT_MODE_SYNC_THIS_DEVICE = 0x1,XCB_INPUT_DEVICE_INPUT_MODE_REPLAY_THIS_DEVICE = 0x2,XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_OTHER_DEVICES = 0x3,XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_ALL = 0x4,XCB_INPUT_DEVICE_INPUT_MODE_SYNC_ALL = 0x5,};
struct xcb_input_key_info_iterator_t {xcb_input_key_info_t *data;int rem;int index;};
struct xcb_record_range_8_iterator_t {xcb_record_range_8_t *data;int rem;int index;};
struct xcb_render_linefix_iterator_t {xcb_render_linefix_t *data;int rem;int index;};
struct xcb_render_spanfix_iterator_t {xcb_render_spanfix_t *data;int rem;int index;};
struct xcb_sync_query_alarm_cookie_t {unsigned int sequence;};
struct xcb_sync_query_fence_cookie_t {unsigned int sequence;};
struct xcb_test_get_version_cookie_t {unsigned int sequence;};
enum xcb_xfixes_save_set_mapping_t {XCB_XFIXES_SAVE_SET_MAPPING_MAP = 0x0,XCB_XFIXES_SAVE_SET_MAPPING_UNMAP = 0x1,};
enum xcb_xkb_action_message_flag_t {XCB_XKB_ACTION_MESSAGE_FLAG_ON_PRESS = 0x1,XCB_XKB_ACTION_MESSAGE_FLAG_ON_RELEASE = 0x2,XCB_XKB_ACTION_MESSAGE_FLAG_GEN_KEY_EVENT = 0x4,};
struct xcb_xkb_get_controls_cookie_t {unsigned int sequence;};
struct xcb_xkb_get_geometry_cookie_t {unsigned int sequence;};
struct xcb_xkb_sa_ptr_btn_iterator_t {xcb_xkb_sa_ptr_btn_t *data;int rem;int index;};
enum MACRO_CHECKEXTENSIONSPRESENT {CHECKEXTENSIONSPRESENT = 0x41,};
enum MACRO_DRI2BufferDepthStencil {DRI2BufferDepthStencil = 9,};
enum MACRO_HOST_MEMBERSHIP_REPORT {IGMPV2_HOST_MEMBERSHIP_REPORT = 0x16,IGMPV3_HOST_MEMBERSHIP_REPORT = 0x22,};
enum MACRO_MSR_IA32_PACKAGE_THERM {MSR_IA32_PACKAGE_THERM_INTERRUPT = 0x1B2,};
enum MACRO_MultibufferUnclobbered {MultibufferUnclobbered = 0,MultibufferPartiallyClobbered = 1,MultibufferFullyClobbered = 2,MultibufferClobberNotifyMask = 33554432,MultibufferUpdateNotifyMask = 67108864,};
enum MACRO_NeedFunctionPrototypes {NeedFunctionPrototypes = 1,};
enum MACRO_RevertToFollowKeyboard {RevertToFollowKeyboard = 3,};
enum MACRO_SIOCBONDSLAVEINFOQUERY {SIOCBONDSLAVEINFOQUERY = 0x8993,};
enum MACRO_XSecurityAllEventMasks {XSecurityAllEventMasks = 1,};
enum MACRO_XSecurityClientTrusted {XSecurityClientTrusted = 0,XSecurityClientUntrusted = 1,};
enum MACRO_X_MbufGetBufferVersion {X_MbufGetBufferVersion = 0,X_MbufCreateImageBuffers = 1,X_MbufDestroyImageBuffers = 2,X_MbufDisplayImageBuffers = 3,X_MbufSetMBufferAttributes = 4,X_MbufGetMBufferAttributes = 5,X_MbufSetBufferAttributes = 6,X_MbufGetBufferAttributes = 7,X_MbufGetBufferInfo = 8,X_MbufCreateStereoWindow = 9,X_MbufClearImageBufferArea = 10,};
enum MACRO_X_ScreenSaverQueryInfo {X_ScreenSaverQueryInfo = 1,};
enum MACRO_X_SecurityQueryVersion {X_SecurityQueryVersion = 0,X_SecurityGenerateAuthorization = 1,X_SecurityRevokeAuthorization = 2,};
enum MACRO_X_XF86MiscQueryVersion {X_XF86MiscQueryVersion = 0,X_XF86MiscGetMouseSettings = 3,X_XF86MiscGetKbdSettings = 4,X_XF86MiscSetMouseSettings = 5,X_XF86MiscSetKbdSettings = 6,X_XF86MiscSetGrabKeysState = 7,X_XF86MiscSetClientVersion = 8,X_XF86MiscGetFilePaths = 9,X_XF86MiscPassMessage = 10,};
enum MACRO_XkbActionMessageLength {XkbActionMessageLength = 6,};
enum MACRO_XkbAllBooleanCtrlsMask {XkbAllBooleanCtrlsMask = 0x1FFF,};
enum MACRO_sz_xDMXQueryVersionReq {sz_xDMXQueryVersionReq = 4,sz_xDMXQueryVersionReply = 32,sz_xDMXSyncReq = 4,sz_xDMXSyncReply = 32,sz_xDMXForceWindowCreationReq = 8,sz_xDMXForceWindowCreationReply = 32,sz_xDMXGetScreenCountReq = 4,sz_xDMXGetScreenCountReply = 32,sz_xDMXGetScreenAttributesReq = 8,sz_xDMXGetScreenAttributesReply = 36,sz_xDMXChangeScreensAttributesReq = 12,sz_xDMXChangeScreensAttributesReply = 32,sz_xDMXAddScreenReq = 16,sz_xDMXAddScreenReply = 32,sz_xDMXRemoveScreenReq = 8,sz_xDMXRemoveScreenReply = 32,sz_xDMXGetWindowAttributesReq = 8,sz_xDMXGetWindowAttributesReply = 32,sz_xDMXGetDesktopAttributesReq = 4,sz_xDMXGetDesktopAttributesReply = 32,sz_xDMXChangeDesktopAttributesReq = 8,sz_xDMXChangeDesktopAttributesReply = 32,sz_xDMXGetInputCountReq = 4,sz_xDMXGetInputCountReply = 32,sz_xDMXGetInputAttributesReq = 8,sz_xDMXGetInputAttributesReply = 32,sz_xDMXAddInputReq = 12,sz_xDMXAddInputReply = 32,sz_xDMXRemoveInputReq = 8,sz_xDMXRemoveInputReply = 32,};
enum MACRO_sz_xLbxQueryVersionReq {sz_xLbxQueryVersionReq = 4,sz_xLbxQueryVersionReply = 32,sz_xLbxStartProxyReq = 4,sz_xLbxStopProxyReq = 4,sz_xLbxSwitchReq = 8,sz_xLbxNewClientReq = 8,sz_xLbxCloseClientReq = 8,sz_xLbxModifySequenceReq = 8,sz_xLbxAllowMotionReq = 8,sz_xLbxGrabCmapReq = 8,};
enum MACRO_sz_xShmQueryVersionReq {sz_xShmQueryVersionReq = 4,sz_xShmQueryVersionReply = 32,sz_xShmAttachReq = 16,sz_xShmDetachReq = 8,sz_xShmPutImageReq = 40,sz_xShmGetImageReq = 32,sz_xShmGetImageReply = 32,sz_xShmCreatePixmapReq = 28,sz_xShmCompletionEvent = 32,};
enum MACRO_sz_xXTestGetVersionReq {sz_xXTestGetVersionReq = 8,sz_xXTestGetVersionReply = 32,sz_xXTestCompareCursorReq = 12,sz_xXTestCompareCursorReply = 32,sz_xXTestFakeInputReq = 36,sz_xXTestGrabControlReq = 8,};
enum MACRO_sz_xXagQueryVersionReq {sz_xXagQueryVersionReq = 8,sz_xXagQueryVersionReply = 32,};
enum MACRO_sz_xvQueryExtensionReq {sz_xvQueryExtensionReq = 4,sz_xvQueryAdaptorsReq = 8,sz_xvQueryEncodingsReq = 8,sz_xvPutVideoReq = 32,sz_xvPutStillReq = 32,sz_xvGetVideoReq = 32,sz_xvGetStillReq = 32,sz_xvGrabPortReq = 12,sz_xvUngrabPortReq = 12,sz_xvSelectVideoNotifyReq = 12,sz_xvSelectPortNotifyReq = 12,sz_xvStopVideoReq = 12,sz_xvSetPortAttributeReq = 16,sz_xvGetPortAttributeReq = 12,sz_xvQueryBestSizeReq = 20,sz_xvQueryPortAttributesReq = 8,sz_xvPutImageReq = 40,sz_xvShmPutImageReq = 52,sz_xvListImageFormatsReq = 8,sz_xvQueryImageAttributesReq = 16,sz_xvQueryExtensionReply = 32,sz_xvQueryAdaptorsReply = 32,sz_xvQueryEncodingsReply = 32,sz_xvGrabPortReply = 32,sz_xvGetPortAttributeReply = 32,sz_xvQueryBestSizeReply = 32,sz_xvQueryPortAttributesReply = 32,sz_xvListImageFormatsReply = 32,sz_xvQueryImageAttributesReply = 32,};
typedef struct _XIMPreeditDrawCallbackStruct XIMPreeditDrawCallbackStruct;
typedef unsigned __int16 XIMStringConversionOperation;
typedef struct _E97BFE069D0E69649C7DF89B8901896C fsCatalogueChangeNotifyEvent;
struct ipmi_channel_lun_address_set {unsigned __int16 channel;unsigned __int8 value;};
struct iso_supplementary_descriptor {char type[1];char id[5];char version[1];char flags[1];char system_id[32];char volume_id[32];char unused2[8];char volume_space_size[8];char escape[32];char volume_set_size[4];char volume_sequence_number[4];char logical_block_size[4];char path_table_size[8];char type_l_path_table[4];char opt_type_l_path_table[4];char type_m_path_table[4];char opt_type_m_path_table[4];char root_directory_record[34];char volume_set_id[128];char publisher_id[128];char preparer_id[128];char application_id[128];char copyright_file_id[37];char abstract_file_id[37];char bibliographic_file_id[37];char creation_date[17];char modification_date[17];char expiration_date[17];char effective_date[17];char file_structure_version[1];char unused4[1];char application_data[512];char unused5[653];};
enum v4l2_jpeg_chroma_subsampling {V4L2_JPEG_CHROMA_SUBSAMPLING_444 = 0x0,V4L2_JPEG_CHROMA_SUBSAMPLING_422 = 0x1,V4L2_JPEG_CHROMA_SUBSAMPLING_420 = 0x2,V4L2_JPEG_CHROMA_SUBSAMPLING_411 = 0x3,V4L2_JPEG_CHROMA_SUBSAMPLING_410 = 0x4,V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY = 0x5,};
enum v4l2_mpeg_audio_dec_playback {V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO = 0x0,V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO = 0x1,V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT = 0x2,V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT = 0x3,V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO = 0x4,V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO = 0x5,};
enum v4l2_mpeg_video_bitrate_mode {V4L2_MPEG_VIDEO_BITRATE_MODE_VBR = 0x0,V4L2_MPEG_VIDEO_BITRATE_MODE_CBR = 0x1,};
enum v4l2_mpeg_video_h264_profile {V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE = 0x0,V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE = 0x1,V4L2_MPEG_VIDEO_H264_PROFILE_MAIN = 0x2,V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED = 0x3,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH = 0x4,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10 = 0x5,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422 = 0x6,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE = 0x7,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA = 0x8,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA = 0x9,V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA = 0xA,V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA = 0xB,V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE = 0xC,V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH = 0xD,V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA = 0xE,V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH = 0xF,V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH = 0x10,};
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXForceWindowCreationReply;
typedef struct _6B8E614C81B948CB69ED41556D403C37 xDMXGetScreenAttributesReply;
typedef struct _D9975735FE375B63E13B12CE4075213A xDMXGetWindowAttributesReply;
typedef struct _EE866C64B9E084E52F8894370051FA3D xGetDeviceButtonMappingReply;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetDeviceModifierMappingReq;
typedef struct _56876A3CF1ED32735E0999A0D66A4738 xListInstalledColormapsReply;
typedef struct _11DD07E0BD355014207FDEFC87674481 xMbufClearImageBufferAreaReq;
typedef struct _E253BFAEF58A5A0733BD8E7952BEDE5F xMbufCreateImageBuffersReply;
typedef struct _3C663E68C00512772EEEF9594AC2C00F xMbufGetMBufferAttributesReq;
typedef struct _93B69AC16094E7C5789E83029DFD84BC xMbufSetMBufferAttributesReq;
typedef struct _1E42E411FAE309B90570872BD6DA89F0 xPanoramiXGetScreenSizeReply;
typedef struct _783627FE6E647043A8324E9AB2705236 xRRChangeProviderPropertyReq;
typedef struct _3D73D80F45981F599F79B091582EFD16 xRRDeleteProviderPropertyReq;
typedef struct _0FED49E1AEFB77840C2E86EAD6756677 xRRListOutputPropertiesReply;
typedef struct _DF1F6B2A10DE489D1BD3908B3045E5A6 xRRListProviderPropertiesReq;
typedef struct _BF1396F4A988D0ACD0874F9F43763CE5 xRROutputPropertyNotifyEvent;
typedef struct _B39E143921B528937FA4C70092531C43 xRRProviderChangeNotifyEvent;
typedef struct _021E9AD0CA1321D22959C0410667B3A9 xRRResourceChangeNotifyEvent;
typedef struct _CF03470A90651644D6E7B9A83DE18936 xRRSetProviderOffloadSinkReq;
typedef struct _095E6FF95FC66C44DDF436071BD80AA6 xRenderQueryPictFormatsReply;
typedef struct _ScreenSaverSetAttributes xScreenSaverSetAttributesReq;
typedef struct _748E6396DB81A71CC67026C5868B0A61 xSetDeviceButtonMappingReply;
typedef struct _BB279EA07E8836E412716D1B8B41E21D xSetDeviceModifierMappingReq;
typedef struct _EF8F73C6C596F3380A5120BEC2D3F264 xSyncListSystemCountersReply;
typedef struct _5E5FECD46FC629FFA3831CFFFA8A0613 xXF86DGAGetViewPortSizeReply;
typedef struct _B4B234DF51BFD6860BC6DFAD9B63C9C2 xXF86DGAViewPortChangedReply;
typedef struct _FF16F36C84D77908C186E6C9218E9417 xXF86MiscGetKbdSettingsReply;
typedef struct _XF86MiscGetMouseSettings xXF86MiscGetMouseSettingsReq;
typedef struct _XF86MiscSetClientVersion xXF86MiscSetClientVersionReq;
typedef struct _XF86MiscSetGrabKeysState xXF86MiscSetGrabKeysStateReq;
typedef struct _XF86MiscSetMouseSettings xXF86MiscSetMouseSettingsReq;
typedef struct _0BFF5F3619172B7B9D3CD50426ED3418 xXF86VidModeGetModeLineReply;
typedef struct _1D1C51FD6E0EDC1C8CC0D22E01FA7C4E xXF86VidModeGetViewPortReply;
typedef struct _E38AF46511CCA77388BA66BB0D6EA6C9 xXFixesChangeCursorByNameReq;
typedef struct _B2D730F73A56FF96C6A7A740CAA96BFE xXFixesCreateRegionFromGCReq;
typedef struct _D3FB05D1960191678CEDB7021036F6D1 xXIBarrierReleasePointerInfo;
typedef struct _XResQueryClientResources xXResQueryClientResourcesReq;
typedef struct _E9ECFF0EA05AD5C4AE006A43157FC997 xXResQueryResourceBytesReply;
struct xcb_get_input_focus_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_drawable_error_t;
struct xcb_glx_get_doublev_cookie_t {unsigned int sequence;};
struct xcb_glx_get_lightfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_lightiv_cookie_t {unsigned int sequence;};
struct xcb_glx_read_pixels_cookie_t {unsigned int sequence;};
struct xcb_glx_render_mode_cookie_t {unsigned int sequence;};
struct xcb_list_extensions_cookie_t {unsigned int sequence;};
struct xcb_list_properties_cookie_t {unsigned int sequence;};
struct xcb_query_best_size_cookie_t {unsigned int sequence;};
struct xcb_query_extension_cookie_t {unsigned int sequence;};
struct xcb_setup_request_iterator_t {xcb_setup_request_t *data;int rem;int index;};
struct xcb_sync_initialize_cookie_t {unsigned int sequence;};
enum xcb_xfixes_save_set_target_t {XCB_XFIXES_SAVE_SET_TARGET_NEAREST = 0x0,XCB_XFIXES_SAVE_SET_TARGET_ROOT = 0x1,};
enum xcb_xfixes_selection_event_t {XCB_XFIXES_SELECTION_EVENT_SET_SELECTION_OWNER = 0x0,XCB_XFIXES_SELECTION_EVENT_SELECTION_WINDOW_DESTROY = 0x1,XCB_XFIXES_SELECTION_EVENT_SELECTION_CLIENT_CLOSE = 0x2,};
struct xcb_xkb_ax_option_iterator_t {xcb_xkb_ax_option_t *data;int rem;int index;};
struct xcb_xkb_key_alias_iterator_t {xcb_xkb_key_alias_t *data;int rem;int index;};
enum xcb_xkb_switch_screen_flag_t {XCB_XKB_SWITCH_SCREEN_FLAG_APPLICATION = 0x1,XCB_XKB_SWITCH_SCREEN_FLAG_ABSOLUTE = 0x4,};
enum xcb_xv_video_notify_reason_t {XCB_XV_VIDEO_NOTIFY_REASON_STARTED = 0x0,XCB_XV_VIDEO_NOTIFY_REASON_STOPPED = 0x1,XCB_XV_VIDEO_NOTIFY_REASON_BUSY = 0x2,XCB_XV_VIDEO_NOTIFY_REASON_PREEMPTED = 0x3,XCB_XV_VIDEO_NOTIFY_REASON_HARD_ERROR = 0x4,};
typedef struct _FE74AE40C36D9F9A6F621CCCBCB7D423 xvmcListSubpictureTypesReply;
enum MACRO_CompositeNumberEvents {CompositeNumberEvents = 0,};
enum MACRO_ConfigureRequestEvent {lbxsz_ConfigureRequestEvent = 28,lbxupsz_ConfigureRequestEvent = 28,};
enum MACRO_DESTRUCTOR_ITERATIONS {_POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4,PTHREAD_DESTRUCTOR_ITERATIONS = 4,};
enum MACRO_DisableScreenInterval {DisableScreenInterval = 0,};
enum MACRO_FontInfoAllCharsExist {FontInfoAllCharsExist = 1,FontInfoInkInside = 2,FontInfoHorizontalOverlap = 4,};
enum MACRO_LbxInvalidateTagEvent {LbxInvalidateTagEvent = 3,LbxSendTagDataEvent = 4,};
enum MACRO_NeedVarargsPrototypes {NeedVarargsPrototypes = 1,};
enum MACRO_PictOpConjointMaximum {PictOpConjointMaximum = 0x2B,};
enum MACRO_PictOpDisjointMaximum {PictOpDisjointMaximum = 0x1B,PictOpConjointMinimum = 0x20,};
enum MACRO_SIOCX25CALLACCPTAPPRV {SIOCX25CALLACCPTAPPRV = 35304,};
enum MACRO_SIOCX25GDTEFACILITIES {SIOCX25GDTEFACILITIES = 35306,};
enum MACRO_SIOCX25SDTEFACILITIES {SIOCX25SDTEFACILITIES = 35307,};
enum MACRO_ScreenSaverNotifyMask {ScreenSaverNotifyMask = 0x1,ScreenSaverCycleMask = 0x2,};
enum MACRO_SelectionRequestEvent {lbxsz_SelectionRequestEvent = 28,lbxupsz_SelectionRequestEvent = 28,};
enum MACRO_XDamageNumberRequests {XDamageNumberRequests = 5,};
enum MACRO_XDamageReportNonEmpty {XDamageReportNonEmpty = 3,};
enum MACRO_XF86DGAClientNotLocal {XF86DGAClientNotLocal = 0,XF86DGANoDirectVideoMode = 1,XF86DGAScreenNotActive = 2,};
enum MACRO_XF86MiscBadMouseCombo {XF86MiscBadMouseCombo = 3,XF86MiscBadKbdType = 4,};
enum MACRO_XF86VidModeZoomLocked {XF86VidModeZoomLocked = 6,};
enum MACRO_XFixesSelectionNotify {XFixesSelectionNotify = 0,};
enum MACRO_XINotifyPassiveUngrab {XINotifyPassiveUngrab = 5,};
enum MACRO_XRecordCurrentClients {XRecordCurrentClients = 1,XRecordFutureClients = 2,};
enum MACRO_XSecurityNumberEvents {XSecurityNumberEvents = 1,XSecurityNumberErrors = 2,};
enum MACRO_X_GetExtensionVersion {X_GetExtensionVersion = 1,X_ListInputDevices = 2,X_OpenDevice = 3,X_CloseDevice = 4,X_SetDeviceMode = 5,X_SelectExtensionEvent = 6,X_GetSelectedExtensionEvents = 7,X_ChangeDeviceDontPropagateList = 8,X_GetDeviceDontPropagateList = 9,X_GetDeviceMotionEvents = 10,X_ChangeKeyboardDevice = 11,X_ChangePointerDevice = 12,X_GrabDevice = 13,X_UngrabDevice = 14,X_GrabDeviceKey = 15,X_UngrabDeviceKey = 16,X_GrabDeviceButton = 17,X_UngrabDeviceButton = 18,X_AllowDeviceEvents = 19,X_GetDeviceFocus = 20,X_SetDeviceFocus = 21,X_GetFeedbackControl = 22,X_ChangeFeedbackControl = 23,X_GetDeviceKeyMapping = 24,X_ChangeDeviceKeyMapping = 25,X_GetDeviceModifierMapping = 26,X_SetDeviceModifierMapping = 27,X_GetDeviceButtonMapping = 28,X_SetDeviceButtonMapping = 29,X_QueryDeviceState = 30,X_SendExtensionEvent = 31,X_DeviceBell = 32,X_SetDeviceValuators = 33,X_GetDeviceControl = 34,X_ChangeDeviceControl = 35,X_ListDeviceProperties = 36,X_ChangeDeviceProperty = 37,X_DeleteDeviceProperty = 38,X_GetDeviceProperty = 39,};
enum MACRO_X_XF86DGAQueryVersion {X_XF86DGAQueryVersion = 0,X_XF86DGAGetVideoLL = 1,X_XF86DGADirectVideo = 2,X_XF86DGAGetViewPortSize = 3,X_XF86DGASetViewPort = 4,X_XF86DGAGetVidPage = 5,X_XF86DGASetVidPage = 6,X_XF86DGAInstallColormap = 7,X_XF86DGAQueryDirectVideo = 8,X_XF86DGAViewPortChanged = 9,};
enum MACRO_XkbAccessXOptionsMask {XkbAccessXOptionsMask = 264,};
enum MACRO_XkbAllRadioGroupsMask {XkbAllRadioGroupsMask = 0xFFFFFFFF,};
enum MACRO_XkbAllVirtualModsMask {XkbAllVirtualModsMask = 0xFFFF,};
enum MACRO_XkbComponentNamesMask {XkbComponentNamesMask = 0x3F,};
enum MACRO_XkbGeomMaxLabelColors {XkbGeomMaxLabelColors = 3,};
enum MACRO_XkbGeomPropertiesMask {XkbGeomPropertiesMask = 1,XkbGeomColorsMask = 2,XkbGeomShapesMask = 4,XkbGeomSectionsMask = 8,XkbGeomDoodadsMask = 16,XkbGeomKeyAliasesMask = 32,};
enum MACRO_XkbIndicatorMapNotify {XkbIndicatorMapNotify = 5,};
enum MACRO_XkbPerKeyBitArraySize {XkbPerKeyBitArraySize = 32,};
enum MACRO_sz_xDPMSGetVersionReq {sz_xDPMSGetVersionReq = 8,sz_xDPMSGetVersionReply = 32,sz_xDPMSCapableReq = 4,sz_xDPMSCapableReply = 32,sz_xDPMSGetTimeoutsReq = 4,sz_xDPMSGetTimeoutsReply = 32,sz_xDPMSSetTimeoutsReq = 12,sz_xDPMSEnableReq = 4,sz_xDPMSDisableReq = 4,sz_xDPMSForceLevelReq = 8,sz_xDPMSInfoReq = 4,sz_xDPMSInfoReply = 32,};
enum MACRO_sz_xGEQueryVersionReq {sz_xGEQueryVersionReq = 8,sz_xGEQueryVersionReply = 32,};
enum MACRO_sz_xLbxQueryFontReply {sz_xLbxQueryFontReply = 32,sz_xLbxChangePropertyReq = 24,sz_xLbxChangePropertyReply = 32,sz_xLbxGetPropertyReq = 28,sz_xLbxGetPropertyReply = 32,sz_xLbxTagDataReq = 12,sz_xLbxInvalidateTagReq = 8,sz_xLbxPutImageReq = 7,sz_xLbxGetImageReq = 24,sz_xLbxGetImageReply = 32,};
enum MACRO_sz_xSyncInitializeReq {sz_xSyncInitializeReq = 8,sz_xSyncInitializeReply = 32,sz_xSyncListSystemCountersReq = 4,sz_xSyncListSystemCountersReply = 32,sz_xSyncSystemCounter = 14,sz_xSyncCreateCounterReq = 16,sz_xSyncChangeCounterReq = 16,sz_xSyncSetCounterReq = 16,sz_xSyncDestroyCounterReq = 8,sz_xSyncQueryCounterReq = 8,sz_xSyncQueryCounterReply = 32,sz_xSyncAwaitReq = 4,sz_xSyncWaitCondition = 28,sz_xSyncCreateAlarmReq = 12,sz_xSyncDestroyAlarmReq = 8,sz_xSyncQueryAlarmReq = 8,sz_xSyncQueryAlarmReply = 40,sz_xSyncChangeAlarmReq = 12,sz_xSyncSetPriorityReq = 12,sz_xSyncGetPriorityReq = 8,sz_xSyncGetPriorityReply = 32,sz_xSyncCreateFenceReq = 16,sz_xSyncTriggerFenceReq = 8,sz_xSyncResetFenceReq = 8,sz_xSyncDestroyFenceReq = 8,sz_xSyncQueryFenceReq = 8,sz_xSyncAwaitFenceReq = 4,sz_xSyncQueryFenceReply = 32,};
enum MACRO_sz_xXIQueryVersionReq {sz_xXIQueryVersionReq = 8,sz_xXIQueryVersionReply = 32,sz_xXIQueryDeviceReq = 8,sz_xXIQueryDeviceReply = 32,sz_xXISelectEventsReq = 12,sz_xXIGetSelectedEventsReq = 8,sz_xXIGetSelectedEventsReply = 32,sz_xXIQueryPointerReq = 12,sz_xXIQueryPointerReply = 56,sz_xXIWarpPointerReq = 36,sz_xXIChangeCursorReq = 16,sz_xXIChangeHierarchyReq = 8,sz_xXISetClientPointerReq = 12,sz_xXIGetClientPointerReq = 8,sz_xXIGetClientPointerReply = 32,sz_xXISetFocusReq = 16,sz_xXIGetFocusReq = 8,sz_xXIGetFocusReply = 32,sz_xXIGrabDeviceReq = 24,sz_xXIGrabDeviceReply = 32,sz_xXIUngrabDeviceReq = 12,sz_xXIAllowEventsReq = 12,sz_xXI2_2AllowEventsReq = 20,sz_xXIPassiveGrabDeviceReq = 32,sz_xXIPassiveGrabDeviceReply = 32,sz_xXIPassiveUngrabDeviceReq = 20,sz_xXIListPropertiesReq = 8,sz_xXIListPropertiesReply = 32,sz_xXIChangePropertyReq = 20,sz_xXIDeletePropertyReq = 12,sz_xXIGetPropertyReq = 24,sz_xXIGetPropertyReply = 32,sz_xXIBarrierReleasePointerReq = 8,sz_xGetExtensionVersionReq = 8,sz_xGetExtensionVersionReply = 32,sz_xListInputDevicesReq = 4,sz_xListInputDevicesReply = 32,sz_xOpenDeviceReq = 8,sz_xOpenDeviceReply = 32,sz_xCloseDeviceReq = 8,sz_xSetDeviceModeReq = 8,sz_xSetDeviceModeReply = 32,sz_xSelectExtensionEventReq = 12,sz_xGetSelectedExtensionEventsReq = 8,sz_xGetSelectedExtensionEventsReply = 32,sz_xChangeDeviceDontPropagateListReq = 12,sz_xGetDeviceDontPropagateListReq = 8,sz_xGetDeviceDontPropagateListReply = 32,sz_xGetDeviceMotionEventsReq = 16,sz_xGetDeviceMotionEventsReply = 32,sz_xChangeKeyboardDeviceReq = 8,sz_xChangeKeyboardDeviceReply = 32,sz_xChangePointerDeviceReq = 8,sz_xChangePointerDeviceReply = 32,sz_xGrabDeviceReq = 20,sz_xGrabDeviceReply = 32,sz_xUngrabDeviceReq = 12,sz_xGrabDeviceKeyReq = 20,sz_xGrabDeviceKeyReply = 32,sz_xUngrabDeviceKeyReq = 16,sz_xGrabDeviceButtonReq = 20,sz_xGrabDeviceButtonReply = 32,sz_xUngrabDeviceButtonReq = 16,sz_xAllowDeviceEventsReq = 12,sz_xGetDeviceFocusReq = 8,sz_xGetDeviceFocusReply = 32,sz_xSetDeviceFocusReq = 16,sz_xGetFeedbackControlReq = 8,sz_xGetFeedbackControlReply = 32,sz_xChangeFeedbackControlReq = 12,sz_xGetDeviceKeyMappingReq = 8,sz_xGetDeviceKeyMappingReply = 32,sz_xChangeDeviceKeyMappingReq = 8,sz_xGetDeviceModifierMappingReq = 8,sz_xSetDeviceModifierMappingReq = 8,sz_xSetDeviceModifierMappingReply = 32,sz_xGetDeviceButtonMappingReq = 8,sz_xGetDeviceButtonMappingReply = 32,sz_xSetDeviceButtonMappingReq = 8,sz_xSetDeviceButtonMappingReply = 32,sz_xQueryDeviceStateReq = 8,sz_xQueryDeviceStateReply = 32,sz_xSendExtensionEventReq = 16,sz_xDeviceBellReq = 8,sz_xSetDeviceValuatorsReq = 8,sz_xSetDeviceValuatorsReply = 32,sz_xGetDeviceControlReq = 8,sz_xGetDeviceControlReply = 32,sz_xChangeDeviceControlReq = 8,sz_xChangeDeviceControlReply = 32,sz_xListDevicePropertiesReq = 8,sz_xListDevicePropertiesReply = 32,sz_xChangeDevicePropertyReq = 20,sz_xDeleteDevicePropertyReq = 12,sz_xGetDevicePropertyReq = 24,sz_xGetDevicePropertyReply = 32,};
enum MACRO_sz_xkbUseExtensionReq {sz_xkbUseExtensionReq = 8,sz_xkbUseExtensionReply = 32,sz_xkbSelectEventsReq = 16,sz_xkbBellReq = 28,sz_xkbGetStateReq = 8,sz_xkbGetStateReply = 32,sz_xkbLatchLockStateReq = 16,sz_xkbGetControlsReq = 8,sz_xkbGetControlsReply = 92,sz_xkbSetControlsReq = 100,sz_xkbKTMapEntryWireDesc = 8,sz_xkbKTSetMapEntryWireDesc = 4,sz_xkbModsWireDesc = 4,sz_xkbKeyTypeWireDesc = 8,sz_xkbSymMapWireDesc = 8,sz_xkbVModMapWireDesc = 4,sz_xkbBehaviorWireDesc = 4,sz_xkbActionWireDesc = 8,sz_xkbGetMapReq = 28,sz_xkbGetMapReply = 40,};
typedef struct _XIMStatusDrawCallbackStruct XIMStatusDrawCallbackStruct;
typedef unsigned __int64 XIMStringConversionFeedback;
typedef unsigned __int16 XIMStringConversionPosition;
struct cpufreq_available_governors {char *governor;struct cpufreq_available_governors *next;struct cpufreq_available_governors *first;};
struct openvpn_plugin_args_open_in {const int type_mask;const char **const argv;const char **const envp;struct openvpn_plugin_callbacks *callbacks;};
enum v4l2_mpeg_audio_ac3_bitrate {V4L2_MPEG_AUDIO_AC3_BITRATE_32K = 0x0,V4L2_MPEG_AUDIO_AC3_BITRATE_40K = 0x1,V4L2_MPEG_AUDIO_AC3_BITRATE_48K = 0x2,V4L2_MPEG_AUDIO_AC3_BITRATE_56K = 0x3,V4L2_MPEG_AUDIO_AC3_BITRATE_64K = 0x4,V4L2_MPEG_AUDIO_AC3_BITRATE_80K = 0x5,V4L2_MPEG_AUDIO_AC3_BITRATE_96K = 0x6,V4L2_MPEG_AUDIO_AC3_BITRATE_112K = 0x7,V4L2_MPEG_AUDIO_AC3_BITRATE_128K = 0x8,V4L2_MPEG_AUDIO_AC3_BITRATE_160K = 0x9,V4L2_MPEG_AUDIO_AC3_BITRATE_192K = 0xA,V4L2_MPEG_AUDIO_AC3_BITRATE_224K = 0xB,V4L2_MPEG_AUDIO_AC3_BITRATE_256K = 0xC,V4L2_MPEG_AUDIO_AC3_BITRATE_320K = 0xD,V4L2_MPEG_AUDIO_AC3_BITRATE_384K = 0xE,V4L2_MPEG_AUDIO_AC3_BITRATE_448K = 0xF,V4L2_MPEG_AUDIO_AC3_BITRATE_512K = 0x10,V4L2_MPEG_AUDIO_AC3_BITRATE_576K = 0x11,V4L2_MPEG_AUDIO_AC3_BITRATE_640K = 0x12,};
enum v4l2_mpeg_video_header_mode {V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE = 0x0,V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME = 0x1,};
enum v4l2_mpeg_video_mpeg4_level {V4L2_MPEG_VIDEO_MPEG4_LEVEL_0 = 0x0,V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B = 0x1,V4L2_MPEG_VIDEO_MPEG4_LEVEL_1 = 0x2,V4L2_MPEG_VIDEO_MPEG4_LEVEL_2 = 0x3,V4L2_MPEG_VIDEO_MPEG4_LEVEL_3 = 0x4,V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B = 0x5,V4L2_MPEG_VIDEO_MPEG4_LEVEL_4 = 0x6,V4L2_MPEG_VIDEO_MPEG4_LEVEL_5 = 0x7,};
typedef struct _C1A851173DD816DDF7F0E0D062CEFEE2 xChangeActivePointerGrabReq;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xCompositeQueryVersionReply;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeRedirectWindowReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXGetDesktopAttributesReq;
typedef struct _7AC6EBFF84C7D5C6D4B5835EAB8E1003 xDMXGetInputAttributesReply;
typedef struct _38AB55CADF3218184FF2A828A7079C62 xGetDeviceMotionEventsReply;
typedef struct _9ED58EEAFF80161A60B7DFF5CDA307D2 xLbxGetKeyboardMappingReply;
typedef struct _3D278926CADFDD0A67AC279ACD531B59 xLbxGetModifierMappingReply;
typedef struct _3C663E68C00512772EEEF9594AC2C00F xMbufDestroyImageBuffersReq;
typedef struct _C552EBCACAEF1EC592A2129D44400B77 xMbufDisplayImageBuffersReq;
typedef struct _2E772061F36030946C15A90398CEA89B xMbufGetBufferAttributesReq;
typedef struct _730B0A961A25B34AF2CAA3D5B8639BBB xMbufSetBufferAttributesReq;
typedef struct _PanoramiXGetScreenCount xPanoramiXGetScreenCountReq;
typedef struct _7C0193CACD5E2992F63533D0F1598B1A xPanoramiXQueryVersionReply;
typedef struct _D70593ABB97D9ADE4A069324C98D63AE xRRGetProviderPropertyReply;
typedef struct _73354D6822628524A3CBE7BEEEBEA7FE xRRQueryOutputPropertyReply;
typedef struct _3D73D80F45981F599F79B091582EFD16 xRRQueryProviderPropertyReq;
typedef struct _E997A7E9262D40FC83356A066D96F704 xRecordUnregisterClientsReq;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphs16Req;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphs32Req;
typedef struct _E52A8F32C8A3F3878A2B0A4A62B69464 xRenderReferenceGlyphSetReq;
typedef struct _ScreenSaverQueryVersion xScreenSaverQueryVersionReq;
typedef struct _XDGACopyTransparentArea xXDGACopyTransparentAreaReq;
typedef struct _9763FFEA107F886AC733AD6B5D71CF1E xXDGAGetViewportStatusReply;
typedef struct _XF86BigfontQueryVersion xXF86BigfontQueryVersionReq;
typedef struct _XF86DGAQueryDirectVideo xXF86DGAQueryDirectVideoReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetDotClocksReq;
typedef struct _XF86VidModeGetGammaRamp xXF86VidModeGetGammaRampReq;
typedef struct _6B88FAC29A9971BB7647F24C04F63FBE xXF86VidModeGetMonitorReply;
typedef struct _XF86VidModeQueryVersion xXF86VidModeQueryVersionReq;
typedef struct _XF86VidModeSetGammaRamp xXF86VidModeSetGammaRampReq;
typedef struct _XF86VidModeValidateModeLine xXF86VidModeSwitchToModeReq;
typedef struct _1F0742A31307BC27E4EE3AB33F15E494 xXFixesSelectCursorInputReq;
typedef struct _9081086C0126123317B5AEBA108CF51B xXFixesSelectionNotifyEvent;
typedef struct _E088F45CD187D3D735EE0ADD637BCD24 xXIBarrierReleasePointerReq;
struct xcb_dri2_get_param_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_context_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_pbuffer_error_t;
struct xcb_glx_get_floatv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_minmax_cookie_t {unsigned int sequence;};
struct xcb_glx_get_string_cookie_t {unsigned int sequence;};
struct xcb_glx_is_texture_cookie_t {unsigned int sequence;};
typedef xcb_input_focus_in_event_t xcb_input_focus_out_event_t;
struct xcb_record_range_iterator_t {xcb_record_range_t *data;int rem;int index;};
struct xcb_render_color_iterator_t {xcb_render_color_t *data;int rem;int index;};
struct xcb_setup_failed_iterator_t {xcb_setup_failed_t *data;int rem;int index;};
struct xcb_sync_trigger_iterator_t {xcb_sync_trigger_t *data;int rem;int index;};
struct xcb_xkb_behavior_iterator_t {xcb_xkb_behavior_t *data;int rem;int index;};
enum xcb_xkb_bell_class_result_t {XCB_XKB_BELL_CLASS_RESULT_KBD_FEEDBACK_CLASS = 0x0,XCB_XKB_BELL_CLASS_RESULT_BELL_FEEDBACK_CLASS = 0x5,};
struct xcb_xkb_key_name_iterator_t {xcb_xkb_key_name_t *data;int rem;int index;};
struct xcb_xkb_key_type_iterator_t {xcb_xkb_key_type_t *data;int rem;int index;};
enum xcb_xkb_lock_device_flags_t {XCB_XKB_LOCK_DEVICE_FLAGS_NO_LOCK = 0x1,XCB_XKB_LOCK_DEVICE_FLAGS_NO_UNLOCK = 0x2,};
struct xcb_xkb_property_iterator_t {xcb_xkb_property_t *data;int rem;int index;};
typedef struct _7BC974A8E90EFB1AB4A63682D9BB99C5 xvQueryImageAttributesReply;
typedef struct Dwarf_Obj_Access_Interface_s Dwarf_Obj_Access_Interface;
enum MACRO_BitmapFormatMaskByte {BitmapFormatMaskByte = 1,BitmapFormatMaskBit = 2,BitmapFormatMaskImageRectangle = 4,BitmapFormatMaskScanLinePad = 8,BitmapFormatMaskScanLineUnit = 16,};
enum MACRO_ConfigureNotifyEvent {lbxsz_ConfigureNotifyEvent = 28,lbxupsz_ConfigureNotifyEvent = 27,};
enum MACRO_DMXScreenWindowWidth {DMXScreenWindowWidth = 1,DMXScreenWindowHeight = 2,DMXScreenWindowXoffset = 4,DMXScreenWindowYoffset = 8,DMXRootWindowWidth = 16,DMXRootWindowHeight = 32,DMXRootWindowXoffset = 64,DMXRootWindowYoffset = 128,DMXRootWindowXorigin = 256,DMXRootWindowYorigin = 512,};
enum MACRO_DeviceControlChanged {DeviceControlChanged = 5,};
enum MACRO_IXJCTL_PSTN_LINETEST {IXJCTL_PSTN_LINETEST = 0x71D3,IXJCTL_DRYBUFFER_CLEAR = 0x71E7,};
enum MACRO_IntegerFeedbackClass {IntegerFeedbackClass = 3,LedFeedbackClass = 4,};
enum MACRO_IsXExtensionKeyboard {IsXExtensionKeyboard = 3,IsXExtensionPointer = 4,};
enum MACRO_LbxImageCompressNone {LbxImageCompressNone = 0,};
enum MACRO_LbxMasterClientIndex {LbxMasterClientIndex = 0,};
enum MACRO_MultibufferBadBuffer {MultibufferBadBuffer = 0,MultibufferNumberErrors = 1,};
enum MACRO_NeedNestedPrototypes {NeedNestedPrototypes = 1,};
enum MACRO_RRScreenChangeNotify {RRScreenChangeNotify = 0,RRNotify = 1,};
enum MACRO_RecordMaxCoreRequest {RecordMaxCoreRequest = 127,};
enum MACRO_RecordMaxDeviceEvent {RecordMaxDeviceEvent = 6,};
enum MACRO_RecordMinDeviceEvent {RecordMinDeviceEvent = 2,};
enum MACRO_RenderNumberRequests {RenderNumberRequests = 37,};
enum MACRO_SIOCBONDCHANGEACTIVE {SIOCBONDCHANGEACTIVE = 0x8995,};
enum MACRO_SIOCX25GCALLUSERDATA {SIOCX25GCALLUSERDATA = 35300,};
enum MACRO_SIOCX25SCALLUSERDATA {SIOCX25SCALLUSERDATA = 35301,};
enum MACRO_SIOCX25SENDCALLACCPT {SIOCX25SENDCALLACCPT = 35305,};
enum MACRO_SNDCTL_DSP_SETSYNCRO {SNDCTL_DSP_SETSYNCRO = 20501,SNDCTL_DSP_SETDUPLEX = 20502,};
enum MACRO_SelectionNotifyEvent {lbxsz_SelectionNotifyEvent = 24,lbxupsz_SelectionNotifyEvent = 24,};
enum MACRO_VisibilityUnobscured {VisibilityUnobscured = 0,VisibilityPartiallyObscured = 1,VisibilityFullyObscured = 2,};
enum MACRO_WindowRegionBounding {WindowRegionBounding = 0,WindowRegionClip = 1,};
enum MACRO_XDGAConcurrentAccess {XDGAConcurrentAccess = 0x1,XDGASolidFillRect = 0x2,XDGABlitRect = 0x4,XDGABlitTransRect = 0x8,XDGAPixmap = 0x10,XDGAInterlaced = 0x10000,XDGADoublescan = 0x20000,};
enum MACRO_XF86DGADirectPresent {XF86DGADirectPresent = 0x1,XF86DGADirectGraphics = 0x2,XF86DGADirectMouse = 0x4,XF86DGADirectKeyb = 0x8,XF86DGAHasColormap = 0x100,XF86DGADirectColormap = 0x200,};
enum MACRO_XF86MiscNumberEvents {XF86MiscNumberEvents = 0,};
enum MACRO_XFixesNumberRequests {XFixesNumberRequests = 33,};
enum MACRO_XINotifyWhileGrabbed {XINotifyWhileGrabbed = 3,XINotifyPassiveGrab = 4,};
enum MACRO_XIScrollTypeVertical {XIScrollTypeVertical = 1,XIScrollTypeHorizontal = 2,};
enum MACRO_X_DamageQueryVersion {X_DamageQueryVersion = 0,X_DamageCreate = 1,X_DamageDestroy = 2,X_DamageSubtract = 3,X_DamageAdd = 4,};
enum MACRO_X_RecordQueryVersion {X_RecordQueryVersion = 0,X_RecordCreateContext = 1,X_RecordRegisterClients = 2,X_RecordUnregisterClients = 3,X_RecordGetContext = 4,X_RecordEnableContext = 5,X_RecordDisableContext = 6,X_RecordFreeContext = 7,};
enum MACRO_X_RenderQueryVersion {X_RenderQueryVersion = 0,X_RenderQueryPictFormats = 1,X_RenderQueryPictIndexValues = 2,X_RenderQueryDithers = 3,X_RenderCreatePicture = 4,X_RenderChangePicture = 5,X_RenderSetPictureClipRectangles = 6,X_RenderFreePicture = 7,X_RenderComposite = 8,X_RenderScale = 9,X_RenderTrapezoids = 10,X_RenderTriangles = 11,X_RenderTriStrip = 12,X_RenderTriFan = 13,X_RenderColorTrapezoids = 14,X_RenderColorTriangles = 15,X_RenderCreateGlyphSet = 17,X_RenderReferenceGlyphSet = 18,X_RenderFreeGlyphSet = 19,X_RenderAddGlyphs = 20,X_RenderAddGlyphsFromPicture = 21,X_RenderFreeGlyphs = 22,X_RenderCompositeGlyphs8 = 23,X_RenderCompositeGlyphs16 = 24,X_RenderCompositeGlyphs32 = 25,X_RenderFillRectangles = 26,X_RenderCreateCursor = 27,X_RenderSetPictureTransform = 28,X_RenderQueryFilters = 29,X_RenderSetPictureFilter = 30,X_RenderCreateAnimCursor = 31,X_RenderAddTraps = 32,X_RenderCreateSolidFill = 33,X_RenderCreateLinearGradient = 34,X_RenderCreateRadialGradient = 35,X_RenderCreateConicalGradient = 36,};
enum MACRO_X_ScreenSaverSuspend {X_ScreenSaverSuspend = 5,};
enum MACRO_X_XFixesQueryVersion {X_XFixesQueryVersion = 0,X_XFixesChangeSaveSet = 1,X_XFixesSelectSelectionInput = 2,X_XFixesSelectCursorInput = 3,X_XFixesGetCursorImage = 4,X_XFixesCreateRegion = 5,X_XFixesCreateRegionFromBitmap = 6,X_XFixesCreateRegionFromWindow = 7,X_XFixesCreateRegionFromGC = 8,X_XFixesCreateRegionFromPicture = 9,X_XFixesDestroyRegion = 10,X_XFixesSetRegion = 11,X_XFixesCopyRegion = 12,X_XFixesUnionRegion = 13,X_XFixesIntersectRegion = 14,X_XFixesSubtractRegion = 15,X_XFixesInvertRegion = 16,X_XFixesTranslateRegion = 17,X_XFixesRegionExtents = 18,X_XFixesFetchRegion = 19,X_XFixesSetGCClipRegion = 20,X_XFixesSetWindowShapeRegion = 21,X_XFixesSetPictureClipRegion = 22,X_XFixesSetCursorName = 23,X_XFixesGetCursorName = 24,X_XFixesGetCursorImageAndName = 25,X_XFixesChangeCursor = 26,X_XFixesChangeCursorByName = 27,X_XFixesExpandRegion = 28,X_XFixesHideCursor = 29,X_XFixesShowCursor = 30,X_XFixesCreatePointerBarrier = 31,X_XFixesDestroyPointerBarrier = 32,};
enum MACRO_XkbAllBellEventsMask {XkbAllBellEventsMask = 1,};
enum MACRO_XkbAllClientInfoMask {XkbAllClientInfoMask = 7,XkbAllServerInfoMask = 248,};
enum MACRO_XkbAllComponentsMask {XkbAllComponentsMask = 0x7F,};
enum MACRO_XkbAllIndicatorsMask {XkbAllIndicatorsMask = 0xFFFFFFFF,};
enum MACRO_XkbAnyActionDataSize {XkbAnyActionDataSize = 7,};
enum MACRO_XkbModifierStateMask {XkbModifierStateMask = 1,XkbModifierBaseMask = 2,XkbModifierLatchMask = 4,XkbModifierLockMask = 8,XkbGroupStateMask = 16,XkbGroupBaseMask = 32,XkbGroupLatchMask = 64,XkbGroupLockMask = 128,XkbCompatStateMask = 256,XkbGrabModsMask = 512,XkbCompatGrabModsMask = 1024,XkbLookupModsMask = 2048,XkbCompatLookupModsMask = 4096,XkbPointerButtonMask = 8192,};
enum MACRO_XkbNewKeyboardNotify {XkbNewKeyboardNotify = 0,XkbMapNotify = 1,XkbStateNotify = 2,};
enum MACRO_XkbSetMapResizeTypes {XkbSetMapResizeTypes = 1,XkbSetMapRecomputeActions = 2,};
enum MACRO__deviceButton3Motion {_deviceButton3Motion = 3,_deviceButton4Motion = 4,};
enum MACRO__deviceButton5Motion {_deviceButton5Motion = 5,};
enum MACRO_sz_pmGetProxyAddrMsg {sz_pmGetProxyAddrMsg = 8,sz_pmGetProxyAddrReplyMsg = 8,sz_pmStartProxyMsg = 8,};
enum MACRO_sz_xLbxGrabCmapReply {sz_xLbxGrabCmapReply = 32,sz_xLbxGrabCmapReplyHdr = 8,sz_xLbxReleaseCmapReq = 8,sz_xLbxAllocColorReq = 20,sz_xLbxIncrementPixelReq = 12,sz_xLbxDeltaReq = 6,sz_xLbxGetModifierMappingReq = 4,sz_xLbxGetModifierMappingReply = 32,sz_xLbxGetKeyboardMappingReq = 8,sz_xLbxGetKeyboardMappingReply = 32,sz_xLbxQueryFontReq = 8,sz_xLbxInternAtomsReq = 6,sz_xLbxInternAtomsReply = 32,sz_xLbxInternAtomsReplyHdr = 8,sz_xLbxGetWinAttrAndGeomReq = 8,sz_xLbxGetWinAttrAndGeomReply = 60,sz_xLbxSyncReq = 4,sz_xLbxSyncReply = 32,};
enum MACRO_sz_xMITSetBugModeReq {sz_xMITSetBugModeReq = 8,sz_xMITGetBugModeReq = 4,sz_xMITGetBugModeReply = 32,};
enum MACRO_sz_xTestFakeInputReq {sz_xTestFakeInputReq = 72,sz_xTestGetInputReq = 8,sz_xTestStopInputReq = 4,sz_xTestResetReq = 4,sz_xTestQueryInputSizeReq = 4,};
enum MACRO_sz_xXResClientIdSpec {sz_xXResClientIdSpec = 8,sz_xResClientIdValue = 12,sz_xXResQueryClientIdsReq = 8,sz_xXResQueryClientIdsReply = 32,sz_xXResResourceIdSpec = 8,sz_xXResQueryResourceBytesReq = 12,sz_xXResResourceSizeSpec = 20,sz_xXResResourceSizeValue = 24,sz_xXResQueryResourceBytesReply = 32,};
enum ip_conntrack_expect_events {IPEXP_NEW = 0x0,IPEXP_DESTROY = 0x1,};
struct ipmi_system_interface_addr {int addr_type;__int16 channel;unsigned __int8 lun;};
struct openvpn_plugin_string_list {struct openvpn_plugin_string_list *next;char *name;char *value;};
typedef struct _276527E852EBD04F842021527F4FA45F posix_spawn_file_actions_t;
enum v4l2_mpeg_audio_l1_bitrate {V4L2_MPEG_AUDIO_L1_BITRATE_32K = 0x0,V4L2_MPEG_AUDIO_L1_BITRATE_64K = 0x1,V4L2_MPEG_AUDIO_L1_BITRATE_96K = 0x2,V4L2_MPEG_AUDIO_L1_BITRATE_128K = 0x3,V4L2_MPEG_AUDIO_L1_BITRATE_160K = 0x4,V4L2_MPEG_AUDIO_L1_BITRATE_192K = 0x5,V4L2_MPEG_AUDIO_L1_BITRATE_224K = 0x6,V4L2_MPEG_AUDIO_L1_BITRATE_256K = 0x7,V4L2_MPEG_AUDIO_L1_BITRATE_288K = 0x8,V4L2_MPEG_AUDIO_L1_BITRATE_320K = 0x9,V4L2_MPEG_AUDIO_L1_BITRATE_352K = 0xA,V4L2_MPEG_AUDIO_L1_BITRATE_384K = 0xB,V4L2_MPEG_AUDIO_L1_BITRATE_416K = 0xC,V4L2_MPEG_AUDIO_L1_BITRATE_448K = 0xD,};
enum v4l2_mpeg_audio_l2_bitrate {V4L2_MPEG_AUDIO_L2_BITRATE_32K = 0x0,V4L2_MPEG_AUDIO_L2_BITRATE_48K = 0x1,V4L2_MPEG_AUDIO_L2_BITRATE_56K = 0x2,V4L2_MPEG_AUDIO_L2_BITRATE_64K = 0x3,V4L2_MPEG_AUDIO_L2_BITRATE_80K = 0x4,V4L2_MPEG_AUDIO_L2_BITRATE_96K = 0x5,V4L2_MPEG_AUDIO_L2_BITRATE_112K = 0x6,V4L2_MPEG_AUDIO_L2_BITRATE_128K = 0x7,V4L2_MPEG_AUDIO_L2_BITRATE_160K = 0x8,V4L2_MPEG_AUDIO_L2_BITRATE_192K = 0x9,V4L2_MPEG_AUDIO_L2_BITRATE_224K = 0xA,V4L2_MPEG_AUDIO_L2_BITRATE_256K = 0xB,V4L2_MPEG_AUDIO_L2_BITRATE_320K = 0xC,V4L2_MPEG_AUDIO_L2_BITRATE_384K = 0xD,};
enum v4l2_mpeg_audio_l3_bitrate {V4L2_MPEG_AUDIO_L3_BITRATE_32K = 0x0,V4L2_MPEG_AUDIO_L3_BITRATE_40K = 0x1,V4L2_MPEG_AUDIO_L3_BITRATE_48K = 0x2,V4L2_MPEG_AUDIO_L3_BITRATE_56K = 0x3,V4L2_MPEG_AUDIO_L3_BITRATE_64K = 0x4,V4L2_MPEG_AUDIO_L3_BITRATE_80K = 0x5,V4L2_MPEG_AUDIO_L3_BITRATE_96K = 0x6,V4L2_MPEG_AUDIO_L3_BITRATE_112K = 0x7,V4L2_MPEG_AUDIO_L3_BITRATE_128K = 0x8,V4L2_MPEG_AUDIO_L3_BITRATE_160K = 0x9,V4L2_MPEG_AUDIO_L3_BITRATE_192K = 0xA,V4L2_MPEG_AUDIO_L3_BITRATE_224K = 0xB,V4L2_MPEG_AUDIO_L3_BITRATE_256K = 0xC,V4L2_MPEG_AUDIO_L3_BITRATE_320K = 0xD,};
enum v4l2_mpeg_video_h264_level {V4L2_MPEG_VIDEO_H264_LEVEL_1_0 = 0x0,V4L2_MPEG_VIDEO_H264_LEVEL_1B = 0x1,V4L2_MPEG_VIDEO_H264_LEVEL_1_1 = 0x2,V4L2_MPEG_VIDEO_H264_LEVEL_1_2 = 0x3,V4L2_MPEG_VIDEO_H264_LEVEL_1_3 = 0x4,V4L2_MPEG_VIDEO_H264_LEVEL_2_0 = 0x5,V4L2_MPEG_VIDEO_H264_LEVEL_2_1 = 0x6,V4L2_MPEG_VIDEO_H264_LEVEL_2_2 = 0x7,V4L2_MPEG_VIDEO_H264_LEVEL_3_0 = 0x8,V4L2_MPEG_VIDEO_H264_LEVEL_3_1 = 0x9,V4L2_MPEG_VIDEO_H264_LEVEL_3_2 = 0xA,V4L2_MPEG_VIDEO_H264_LEVEL_4_0 = 0xB,V4L2_MPEG_VIDEO_H264_LEVEL_4_1 = 0xC,V4L2_MPEG_VIDEO_H264_LEVEL_4_2 = 0xD,V4L2_MPEG_VIDEO_H264_LEVEL_5_0 = 0xE,V4L2_MPEG_VIDEO_H264_LEVEL_5_1 = 0xF,};
typedef struct _28183F13DB7442E77993ED2BEDDC9E43 xChangeDeviceKeyMappingReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xChangeKeyboardDeviceReply;
typedef struct _FCC23D59EDC7C9AEBCA8416FDF631F7E xChangeWindowAttributesReq;
typedef struct _091D8C0512871595A9DC831969F12B34 xDMXForceWindowCreationReq;
typedef struct _BDA8B21BBF344B8E23C198E46F24428F xDMXGetScreenAttributesReq;
typedef struct _091D8C0512871595A9DC831969F12B34 xDMXGetWindowAttributesReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetDeviceButtonMappingReq;
typedef struct _8C2FD448F8CF6A602A866F997822A598 xLbxGetWinAttrAndGeomReply;
typedef struct _09D1663D7DAEECED4A739563D5B83B0D xListDevicePropertiesReply;
typedef struct _560A03400C719BC685F99AA3989F50DD xMbufCreateImageBuffersReq;
typedef struct _1BDC7C7F49C92F644328BBE26F29D5DE xMbufCreateStereoWindowReq;
typedef struct _BD71CB07C4DDF44AC99036AEC3635494 xMbufGetBufferVersionReply;
typedef struct _PanoramiXGetScreenSize xPanoramiXGetScreenSizeReq;
typedef struct _8D1982C4FDB5289A11AD10918D95A5A0 xRRChangeOutputPropertyReq;
typedef struct _8CF3D5156D7798F5A42A7DF6A044CF98 xRRDeleteOutputPropertyReq;
typedef struct _6B48FEBDDFB0C4A6A52F69D91E3552AD xRRGetScreenResourcesReply;
typedef struct _297345D7B065E1B097A8423BD8077946 xRRGetScreenSizeRangeReply;
typedef struct _4F75C09F59EAA25C6312C1809A75A428 xRRListOutputPropertiesReq;
typedef struct _FDE03FEB32A19C100EEAC3636148FF44 xRROutputChangeNotifyEvent;
typedef struct _176B59BEDA9B70C3FEBB155A23358FC4 xRRScreenChangeNotifyEvent;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphs8Req;
typedef struct _BAE4AA77CC43BF06F4D3ADF31CFD29F5 xRenderCreateAnimCursorReq;
typedef struct _523CE37B1F7AC95341854764E619AB82 xRenderQueryPictFormatsReq;
typedef struct _BA7B5543ABAE7B9E6314E3F267492402 xRenderSetPictureFilterReq;
typedef struct _A8C15E0CCC4F1BB7303BFAC73A97A837 xScreenSaverQueryInfoReply;
typedef struct _ScreenSaverSelectInput xScreenSaverSelectInputReq;
typedef struct _B16FC8566897364FB8F68A61B8D500EB xSecurityQueryVersionReply;
typedef struct _C785CF6C4EEFEB89ECBC9FAC0351909D xSetDeviceButtonMappingReq;
typedef struct _xSyncListSystemCounters xSyncListSystemCountersReq;
typedef struct _975F191B774855E1091B820C10595CF2 xXDGAChangePixmapModeReply;
typedef struct _3982B52BB2F6F242AE0CDAAD29A77640 xXF86BigfontQueryFontReply;
typedef struct _XF86DGAGetViewPortSize xXF86DGAGetViewPortSizeReq;
typedef struct _XF86DGAInstallColormap xXF86DGAInstallColormapReq;
typedef struct _XF86DGAViewPortChanged xXF86DGAViewPortChangedReq;
typedef struct _5C8033F90A64FC4676BFB935617D1B44 xXF86MiscGetFilePathsReply;
typedef struct _XF86MiscGetKbdSettings xXF86MiscGetKbdSettingsReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86MiscQueryVersionReply;
typedef struct _XF86MiscSetKbdSettings xXF86MiscSetKbdSettingsReq;
typedef struct _XF86VidModeAddModeLine xXF86VidModeAddModeLineReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetModeLineReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetViewPortReq;
typedef struct _XF86VidModeModModeLine xXF86VidModeModModeLineReq;
typedef struct _XF86VidModeSetViewPort xXF86VidModeSetViewPortReq;
typedef struct _3DA4CDB67EF3124D6BB6A4128B3FCD7C xXFixesGetCursorImageReply;
typedef struct _XResQueryResourceBytes xXResQueryResourceBytesReq;
typedef struct _64A10EE371E893EA59638110B65879C5 xXineramaQueryScreensReply;
typedef xcb_button_press_event_t xcb_button_release_event_t;
struct xcb_dri2_wait_msc_cookie_t {unsigned int sequence;};
struct xcb_dri2_wait_sbc_cookie_t {unsigned int sequence;};
struct xcb_get_atom_name_cookie_t {unsigned int sequence;};
struct xcb_get_font_path_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_pixmap_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_window_error_t;
struct xcb_glx_gen_lists_cookie_t {unsigned int sequence;};
struct xcb_glx_get_error_cookie_t {unsigned int sequence;};
struct xcb_glx_get_mapdv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_mapfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_mapiv_cookie_t {unsigned int sequence;};
struct xcb_glx_is_direct_cookie_t {unsigned int sequence;};
struct xcb_grab_keyboard_cookie_t {unsigned int sequence;};
typedef xcb_request_error_t xcb_implementation_error_t;
enum xcb_input_feedback_class_t {XCB_INPUT_FEEDBACK_CLASS_KEYBOARD = 0x0,XCB_INPUT_FEEDBACK_CLASS_POINTER = 0x1,XCB_INPUT_FEEDBACK_CLASS_STRING = 0x2,XCB_INPUT_FEEDBACK_CLASS_INTEGER = 0x3,XCB_INPUT_FEEDBACK_CLASS_LED = 0x4,XCB_INPUT_FEEDBACK_CLASS_BELL = 0x5,};
enum xcb_input_propagate_mode_t {XCB_INPUT_PROPAGATE_MODE_ADD_TO_LIST = 0x0,XCB_INPUT_PROPAGATE_MODE_DELETE_FROM_LIST = 0x1,};
struct xcb_query_pointer_cookie_t {unsigned int sequence;};
struct xcb_render_trap_iterator_t {xcb_render_trap_t *data;int rem;int index;};
struct xcb_shm_get_image_cookie_t {unsigned int sequence;};
struct xcb_xevie_event_iterator_t {xcb_xevie_event_t *data;int rem;int index;};
enum xcb_xfixes_cursor_notify_t {XCB_XFIXES_CURSOR_NOTIFY_DISPLAY_CURSOR = 0x0,};
enum xcb_xfixes_save_set_mode_t {XCB_XFIXES_SAVE_SET_MODE_INSERT = 0x0,XCB_XFIXES_SAVE_SET_MODE_DELETE = 0x1,};
struct xcb_xkb_get_names_cookie_t {unsigned int sequence;};
struct xcb_xkb_get_state_cookie_t {unsigned int sequence;};
enum xcb_xkb_led_class_result_t {XCB_XKB_LED_CLASS_RESULT_KBD_FEEDBACK_CLASS = 0x0,XCB_XKB_LED_CLASS_RESULT_LED_FEEDBACK_CLASS = 0x4,};
struct xcb_xkb_listing_iterator_t {xcb_xkb_listing_t *data;int rem;int index;};
struct xcb_xkb_mod_def_iterator_t {xcb_xkb_mod_def_t *data;int rem;int index;};
struct xcb_xkb_outline_iterator_t {xcb_xkb_outline_t *data;int rem;int index;};
struct xcb_xkb_overlay_iterator_t {xcb_xkb_overlay_t *data;int rem;int index;};
enum xcb_xkb_sa_iso_lock_flag_t {XCB_XKB_SA_ISO_LOCK_FLAG_NO_LOCK = 0x1,XCB_XKB_SA_ISO_LOCK_FLAG_NO_UNLOCK = 0x2,XCB_XKB_SA_ISO_LOCK_FLAG_USE_MOD_MAP_MODS = 0x4,XCB_XKB_SA_ISO_LOCK_FLAG_GROUP_ABSOLUTE = 0x4,XCB_XKB_SA_ISO_LOCK_FLAG_ISO_DFLT_IS_GROUP = 0x8,};
enum xcb_xkb_sa_move_ptr_flag_t {XCB_XKB_SA_MOVE_PTR_FLAG_NO_ACCELERATION = 0x1,XCB_XKB_SA_MOVE_PTR_FLAG_MOVE_ABSOLUTE_X = 0x2,XCB_XKB_SA_MOVE_PTR_FLAG_MOVE_ABSOLUTE_Y = 0x4,};
struct xcb_xkb_section_iterator_t {xcb_xkb_section_t *data;int rem;int index;};
enum xcb_xkb_sym_interp_match_t {XCB_XKB_SYM_INTERP_MATCH_LEVEL_ONE_ONLY = 0x80,XCB_XKB_SYM_INTERP_MATCH_OP_MASK = 0x7F,};
struct xcb_xv_rational_iterator_t {xcb_xv_rational_t *data;int rem;int index;};
typedef struct _xkbIndicatorDoodadWireDesc xkbIndicatorDoodadWireDesc;
enum xt_osf_window_size_options {OSF_WSS_PLAIN = 0x0,OSF_WSS_MSS = 0x1,OSF_WSS_MTU = 0x2,OSF_WSS_MODULO = 0x3,OSF_WSS_MAX = 0x4,};
typedef struct _79F2479F433F63099A0390C39EAA789F xvQueryPortAttributesReply;
typedef struct _7E8BAC4262F9B7E47F22B721CB72642D xvmcListSubpictureTypesReq;
enum MACRO_ColormapUninstalled {ColormapUninstalled = 0,ColormapInstalled = 1,};
enum MACRO_DRI2BufferBackRight {DRI2BufferBackRight = 3,DRI2BufferDepth = 4,};
enum MACRO_DRI2BufferFrontLeft {DRI2BufferFrontLeft = 0,DRI2BufferBackLeft = 1,DRI2BufferFrontRight = 2,};
enum MACRO_DRI2DriverPrimeMask {DRI2DriverPrimeMask = 7,DRI2DriverPrimeShift = 16,};
enum MACRO_FSBadImplementation {FSBadImplementation = 11,};
enum MACRO_FamilyKrb5Principal {FamilyKrb5Principal = 253,};
enum MACRO_GETDEVICEPARAMETERS {GETDEVICEPARAMETERS = 0x48,};
enum MACRO_LbxMotionDeltaEvent {LbxMotionDeltaEvent = 7,LbxReleaseCmapEvent = 8,};
enum MACRO_MITMiscNumberErrors {MITMiscNumberErrors = 0,};
enum MACRO_MITMiscNumberEvents {MITMiscNumberEvents = 0,};
enum MACRO_MultibufferModeMono {MultibufferModeMono = 0,MultibufferModeStereo = 1,};
enum MACRO_MultibufferSideMono {MultibufferSideMono = 0,MultibufferSideLeft = 1,MultibufferSideRight = 2,};
enum MACRO_PictOpConjointClear {PictOpConjointClear = 0x20,};
enum MACRO_PictOpDisjointClear {PictOpDisjointClear = 0x10,};
enum MACRO_PictOpHSLLuminosity {PictOpHSLLuminosity = 0x3E,};
enum MACRO_PictOpHSLSaturation {PictOpHSLSaturation = 0x3C,};
enum MACRO_RecordMaxExtRequest {RecordMaxExtRequest = 255,};
enum MACRO_RecordMinExtRequest {RecordMinExtRequest = 128,};
enum MACRO_SIOCX25SCUDMATCHLEN {SIOCX25SCUDMATCHLEN = 35303,};
enum MACRO_SNDCTL_DSP_NONBLOCK {SNDCTL_DSP_NONBLOCK = 20494,};
enum MACRO_ScreenSaverDisabled {ScreenSaverDisabled = 3,};
enum MACRO_SelectionClearEvent {lbxsz_SelectionClearEvent = 16,lbxupsz_SelectionClearEvent = 16,};
enum MACRO_SubPixelVerticalRGB {SubPixelVerticalRGB = 3,SubPixelVerticalBGR = 4,};
enum MACRO_XBigReqNumberErrors {XBigReqNumberErrors = 0,};
enum MACRO_XBigReqNumberEvents {XBigReqNumberEvents = 0,};
enum MACRO_XDGAPixmapModeLarge {XDGAPixmapModeLarge = 0,XDGAPixmapModeSmall = 1,};
enum MACRO_XF86DGANumberErrors {XF86DGANumberErrors = 5,};
enum MACRO_XF86DGANumberEvents {XF86DGANumberEvents = 7,};
enum MACRO_XF86VidModeBadClock {XF86VidModeBadClock = 0,XF86VidModeBadHTimings = 1,XF86VidModeBadVTimings = 2,};
enum MACRO_XIAsyncPairedDevice {XIAsyncPairedDevice = 3,XIAsyncPair = 4,};
enum MACRO_XINotifyPointerRoot {XINotifyPointerRoot = 6,};
enum MACRO_XLocaleNotSupported {XLocaleNotSupported = -2,};
enum MACRO_X_ShapeQueryVersion {X_ShapeQueryVersion = 0,X_ShapeRectangles = 1,X_ShapeMask = 2,X_ShapeCombine = 3,X_ShapeOffset = 4,X_ShapeQueryExtents = 5,X_ShapeSelectInput = 6,X_ShapeInputSelected = 7,X_ShapeGetRectangles = 8,};
enum MACRO_X_XResClientXIDMask {X_XResClientXIDMask = 0x1,X_XResLocalClientPIDMask = 0x2,};
enum MACRO_X_XevieQueryVersion {X_XevieQueryVersion = 0,X_XevieStart = 1,X_XevieEnd = 2,X_XevieSend = 3,X_XevieSelectInput = 4,};
enum MACRO_XagNdefaultColormap {XagNdefaultColormap = 3,XagNblackPixel = 4,};
enum MACRO_XagSingleScreenMask {XagSingleScreenMask = 1,XagDefaultRootMask = 2,XagRootVisualMask = 4,XagDefaultColormapMask = 8,XagBlackPixelMask = 16,XagWhitePixelMask = 32,XagAppGroupLeaderMask = 64,};
enum MACRO_XkbAllRequiredTypes {XkbAllRequiredTypes = 0xF,};
enum MACRO_XkbKeycodesNameMask {XkbKeycodesNameMask = 1,XkbGeometryNameMask = 2,XkbSymbolsNameMask = 4,XkbPhysSymbolsNameMask = 8,XkbTypesNameMask = 16,XkbCompatNameMask = 32,XkbKeyTypeNamesMask = 64,XkbKTLevelNamesMask = 128,XkbIndicatorNamesMask = 256,XkbKeyNamesMask = 512,XkbKeyAliasesMask = 1024,XkbVirtualModNamesMask = 2048,XkbGroupNamesMask = 4096,XkbRGNamesMask = 8192,};
enum MACRO_XkbLastRequiredType {XkbLastRequiredType = 3,XkbNumRequiredTypes = 4,};
enum MACRO__LINUX_NETFILTER_XT {_LINUX_NETFILTER_XT_RECENT_H = 1,};
enum MACRO__deviceButtonMotion {_deviceButtonMotion = 6,};
enum MACRO_sz_xBigReqEnableReq {sz_xBigReqEnableReq = 4,sz_xBigReqEnableReply = 32,};
enum MACRO_sz_xLbxPolyPointReq {sz_xLbxPolyPointReq = 6,sz_xLbxPolyLineReq = 6,sz_xLbxPolySegmentReq = 6,sz_xLbxPolyRectangleReq = 6,sz_xLbxPolyArcReq = 6,sz_xLbxPolyFillRectangleReq = 6,sz_xLbxPolyFillArc = 6,sz_xLbxFillPolyReq = 7,sz_xLbxCopyAreaReq = 6,sz_xLbxCopyPlaneReq = 10,sz_xLbxPolyTextReq = 5,sz_xLbxPolyText8Req = 5,sz_xLbxPolyText16Req = 5,sz_xLbxImageTextReq = 6,sz_xLbxImageText8Req = 6,sz_xLbxImageText16Req = 6,sz_xLbxDiffItem = 2,sz_xLbxStartReply = 32,sz_xLbxStartReplyHdr = 8,sz_xLbxQueryExtensionReq = 8,sz_xLbxQueryExtensionReply = 32,sz_BeginLargeRequestReq = 8,sz_LargeRequestDataReq = 4,sz_EndLargeRequestReq = 4,sz_xLbxSwitchEvent = 8,sz_xLbxCloseEvent = 32,sz_xLbxInvalidateTagEvent = 32,sz_xLbxSendTagDataEvent = 32,sz_xLbxListenToOneEvent = 32,sz_xLbxReleaseCmapEvent = 32,sz_xLbxFreeCellsEvent = 32,};
typedef struct _338A332AC07B59A36792FEE160C5A511 XServerInterpretedAddress;
typedef struct _XkbNewKeyboardNotify XkbNewKeyboardNotifyEvent;
typedef struct _CF9B220DED91D4DB6D14DD6E06C7164B _IO_cookie_io_functions_t;
typedef int (*__gconv_trans_context_fct)(void *, const unsigned __int8 *, const unsigned __int8 *, unsigned __int8 *, unsigned __int8 *);
typedef struct _3D6C9E6FC2A1930EF06F70ECE24ED2E6 fsListFontsWithXInfoReply;
struct hdlcdrv_old_channel_state {int ptt;int dcd;int ptt_keyed;};
enum hdspm_madi_channel_format {hdspm_format_ch_64 = 0x0,hdspm_format_ch_56 = 0x1,};
enum usb_functionfs_event_type {FUNCTIONFS_BIND = 0x0,FUNCTIONFS_UNBIND = 0x1,FUNCTIONFS_ENABLE = 0x2,FUNCTIONFS_DISABLE = 0x3,FUNCTIONFS_SETUP = 0x4,FUNCTIONFS_SUSPEND = 0x5,FUNCTIONFS_RESUME = 0x6,};
struct usbdevfs_disconnect_claim {unsigned int interface;unsigned int flags;char driver[256];};
struct usbdevfs_disconnectsignal {unsigned int signr;void *context;};
enum v4l2_power_line_frequency {V4L2_CID_POWER_LINE_FREQUENCY_DISABLED = 0x0,V4L2_CID_POWER_LINE_FREQUENCY_50HZ = 0x1,V4L2_CID_POWER_LINE_FREQUENCY_60HZ = 0x2,V4L2_CID_POWER_LINE_FREQUENCY_AUTO = 0x3,};
enum v4l2_subdev_format_whence {V4L2_SUBDEV_FORMAT_TRY = 0x0,V4L2_SUBDEV_FORMAT_ACTIVE = 0x1,};
typedef struct _A2FB221EC01549407EDCF016C4C0632F xChangeDeviceControlReply;
typedef struct _78B46019F679C5E70AAD7C2ED28277AC xChangeFeedbackControlReq;
typedef struct _925C5E9ADF13AF08F8E4BE2898EADC8C xChangeKeyboardControlReq;
typedef struct _F80E3F154E69694439090B67229FB6AA xChangeKeyboardMappingReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xChangePointerDeviceReply;
typedef struct _E1B611A0324DBC10371E6C5C458A41ED xCompositeQueryVersionReq;
typedef struct _72F0243C2EB87E20847F7DC0E66AC2E3 xDMXGetInputAttributesReq;
typedef struct _88CB499CEF7C95AB64991FDC4A8C267A xGetDeviceKeyMappingReply;
typedef struct _FD8FCB430836D04139012301F63EB9C6 xGetDeviceMotionEventsReq;
typedef struct _CFD68B7ADBC82BE7EABF4FDEA780590F xGetExtensionVersionReply;
typedef struct _D0A88ECD5B9151D3C71E69B7AE3ECA15 xGetWindowAttributesReply;
typedef struct _LbxGetKeyboardMapping xLbxGetKeyboardMappingReq;
typedef struct _LbxGetModifierMapping xLbxGetModifierMappingReq;
typedef struct _PanoramiXQueryVersion xPanoramiXQueryVersionReq;
typedef struct _D70593ABB97D9ADE4A069324C98D63AE xRRGetOutputPropertyReply;
typedef struct _2736801EDAA297EDD6CADD7FD51E7640 xRRGetProviderPropertyReq;
typedef struct _8CF3D5156D7798F5A42A7DF6A044CF98 xRRQueryOutputPropertyReq;
typedef struct _2D59FDEE4261500A2FE9AC0FF5270F5C xRecordEnableContextReply;
typedef struct _791AF81D366397FAE28AFC7E5E3FF4B5 xRecordRegisterClientsReq;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphsReq;
typedef struct _68EFEC536F03412D58850C40CDE6BAE5 xRenderCreateSolidFillReq;
typedef struct _XDGAGetViewportStatus xXDGAGetViewportStatusReq;
typedef struct _8DDBCDCB4EEBED7E3946A9A0AA381214 xXDGAOpenFramebufferReply;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86DGAQueryVersionReply;
typedef struct _F41DB5A7C32B97CBCEE09CBFE1E8FA57 xXF86MiscPassMessageReply;
typedef struct _AEEA76D8CE49243D0419CEF55BCA8374 xXF86VidModeGetGammaReply;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetMonitorReq;
typedef struct _XF86VidModeSwitchMode xXF86VidModeSwitchModeReq;
typedef struct _AF27679C824E3E5901AA7DC2B9114169 xXFixesGetCursorNameReply;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesIntersectRegionReq;
typedef struct _B2F7B8A6150007A0765871980FCF4D2A xXFixesSetGCClipRegionReq;
typedef struct _4DBA840A262C58E6AC422C7E2FFFF3EA xXFixesTranslateRegionReq;
typedef struct _C95899C55C523B7B6DD91187BD37B39A xXIAnyHierarchyChangeInfo;
typedef struct _FCB7777383764032C418362DA6B02328 xXIGetSelectedEventsReply;
typedef struct _5AAA2BA072F64AA18930C6E033859039 xXIPassiveGrabDeviceReply;
typedef struct _4A016A5603D15160CDD9BBBD4586D83A xXIPassiveUngrabDeviceReq;
enum xcb_damage_report_level_t {XCB_DAMAGE_REPORT_LEVEL_RAW_RECTANGLES = 0x0,XCB_DAMAGE_REPORT_LEVEL_DELTA_RECTANGLES = 0x1,XCB_DAMAGE_REPORT_LEVEL_BOUNDING_BOX = 0x2,XCB_DAMAGE_REPORT_LEVEL_NON_EMPTY = 0x3,};
struct xcb_dpms_capable_cookie_t {unsigned int sequence;};
struct xcb_dri2_connect_cookie_t {unsigned int sequence;};
struct xcb_dri2_get_msc_cookie_t {unsigned int sequence;};
struct xcb_get_geometry_cookie_t {unsigned int sequence;};
struct xcb_get_property_cookie_t {unsigned int sequence;};
struct xcb_grab_pointer_cookie_t {unsigned int sequence;};
enum xcb_input_valuator_mode_t {XCB_INPUT_VALUATOR_MODE_RELATIVE = 0x0,XCB_INPUT_VALUATOR_MODE_ABSOLUTE = 0x1,};
struct xcb_lookup_color_cookie_t {unsigned int sequence;};
struct xcb_query_colors_cookie_t {unsigned int sequence;};
struct xcb_query_keymap_cookie_t {unsigned int sequence;};
enum xcb_render_picture_enum_t {XCB_RENDER_PICTURE_NONE = 0x0,};
struct xcb_res_client_iterator_t {xcb_res_client_t *data;int rem;int index;};
struct xcb_sync_int64_iterator_t {xcb_sync_int64_t *data;int rem;int index;};
struct xcb_visualtype_iterator_t {xcb_visualtype_t *data;int rem;int index;};
struct xcb_xkb_action_iterator_t {xcb_xkb_action_t *data;int rem;int index;};
enum xcb_xkb_bool_ctrls_high_t {XCB_XKB_BOOL_CTRLS_HIGH_ACCESS_X_FEEDBACK = 0x1,XCB_XKB_BOOL_CTRLS_HIGH_AUDIBLE_BELL = 0x2,XCB_XKB_BOOL_CTRLS_HIGH_OVERLAY_1 = 0x4,XCB_XKB_BOOL_CTRLS_HIGH_OVERLAY_2 = 0x8,XCB_XKB_BOOL_CTRLS_HIGH_IGNORE_GROUP_LOCK = 0x10,};
struct xcb_xkb_doodad_iterator_t {xcb_xkb_doodad_t *data;int rem;int index;};
enum xcb_xkb_im_groups_which_t {XCB_XKB_IM_GROUPS_WHICH_USE_COMPAT = 0x10,XCB_XKB_IM_GROUPS_WHICH_USE_EFFECTIVE = 0x8,XCB_XKB_IM_GROUPS_WHICH_USE_LOCKED = 0x4,XCB_XKB_IM_GROUPS_WHICH_USE_LATCHED = 0x2,XCB_XKB_IM_GROUPS_WHICH_USE_BASE = 0x1,};
enum xcb_xkb_per_client_flag_t {XCB_XKB_PER_CLIENT_FLAG_DETECTABLE_AUTO_REPEAT = 0x1,XCB_XKB_PER_CLIENT_FLAG_GRABS_USE_XKB_STATE = 0x2,XCB_XKB_PER_CLIENT_FLAG_AUTO_RESET_CONTROLS = 0x4,XCB_XKB_PER_CLIENT_FLAG_LOOKUP_STATE_WHEN_GRABBED = 0x8,XCB_XKB_PER_CLIENT_FLAG_SEND_EVENT_USES_XKB_STATE = 0x10,};
struct xcb_xv_grab_port_cookie_t {unsigned int sequence;};
enum xcb_xv_grab_port_status_t {XCB_XV_GRAB_PORT_STATUS_SUCCESS = 0x0,XCB_XV_GRAB_PORT_STATUS_BAD_EXTENSION = 0x1,XCB_XV_GRAB_PORT_STATUS_ALREADY_GRABBED = 0x2,XCB_XV_GRAB_PORT_STATUS_INVALID_TIME = 0x3,XCB_XV_GRAB_PORT_STATUS_BAD_REPLY = 0x4,XCB_XV_GRAB_PORT_STATUS_BAD_ALLOC = 0x5,};
typedef struct _xkbGetIndicatorStateReply xkbGetIndicatorStateReply;
typedef struct _xkbGetNamedIndicatorReply xkbGetNamedIndicatorReply;
typedef struct _xkbSetDebuggingFlagsReply xkbSetDebuggingFlagsReply;
typedef struct _408ECFFBDBCCAB2F4BE7BF225F1A7284 xvQueryImageAttributesReq;
typedef struct _5C360CD6F7BDFED17568144DDDEE5A5E xvmcCreateSubpictureReply;
typedef struct _DB14CFE2E08779D243D914BBAB2B5230 xvmcListSurfaceTypesReply;
typedef struct _BIG_IOCTL_Command_struct BIG_IOCTL_Command_struct;
typedef struct Dwarf_Obj_Access_Methods_s Dwarf_Obj_Access_Methods;
typedef struct Dwarf_Obj_Access_Section_s Dwarf_Obj_Access_Section;
enum MACRO_ADVERTISE_1000FULL {ADVERTISE_1000FULL = 0x200,ADVERTISE_1000HALF = 0x100,};
enum MACRO_COMMAND_TERMINATED {COMMAND_TERMINATED = 0x11,};
enum MACRO_ClientMessageEvent {lbxsz_ClientMessageEvent = 32,lbxupsz_ClientMessageEvent = 32,};
enum MACRO_DRI2NumberRequests {DRI2NumberRequests = 14,};
enum MACRO_DestroyNotifyEvent {lbxsz_DestroyNotifyEvent = 12,lbxupsz_DestroyNotifyEvent = 12,};
enum MACRO_DisableScreenSaver {DisableScreenSaver = 0,};
enum MACRO_DontAllowExposures {DontAllowExposures = 0,AllowExposures = 1,DefaultExposures = 2,};
enum MACRO_DontPreferBlanking {DontPreferBlanking = 0,PreferBlanking = 1,DefaultBlanking = 2,};
enum MACRO_FSBadAccessContext {FSBadAccessContext = 5,};
enum MACRO_FillOpaqueStippled {FillOpaqueStippled = 3,};
enum MACRO_LastExtensionError {LastExtensionError = 255,};
enum MACRO_LbxTagTypeConnInfo {LbxTagTypeConnInfo = 5,};
enum MACRO_LbxTagTypeProperty {LbxTagTypeProperty = 3,LbxTagTypeFont = 4,};
enum MACRO_MappingNotifyEvent {lbxsz_MappingNotifyEvent = 8,lbxupsz_MappingNotifyEvent = 7,};
enum MACRO_NeedWidePrototypes {NeedWidePrototypes = 0,};
enum MACRO_NotifyWhileGrabbed {NotifyWhileGrabbed = 3,};
enum MACRO_PHONE_CAPABILITIES {PHONE_CAPABILITIES = 0x7180,PHONE_RING = 0x7183,PHONE_HOOKSTATE = 0x7184,};
enum MACRO_PictOpBlendMaximum {PictOpBlendMaximum = 0x3E,};
enum MACRO_PictOpBlendMinimum {PictOpBlendMinimum = 0x30,};
enum MACRO_PictOpConjointAtop {PictOpConjointAtop = 0x29,};
enum MACRO_PictOpConjointOver {PictOpConjointOver = 0x23,};
enum MACRO_PictOpDisjointAtop {PictOpDisjointAtop = 0x19,};
enum MACRO_PictOpDisjointOver {PictOpDisjointOver = 0x13,};
enum MACRO_RRSetConfigSuccess {RRSetConfigSuccess = 0,RRSetConfigInvalidConfigTime = 1,RRSetConfigInvalidTime = 2,};
enum MACRO_RenderNumberErrors {RenderNumberErrors = 5,};
enum MACRO_ResizeRequestEvent {lbxsz_ResizeRequestEvent = 12,lbxupsz_ResizeRequestEvent = 12,};
enum MACRO_SIOCSIFHWBROADCAST {SIOCSIFHWBROADCAST = 0x8937,};
enum MACRO_SIOCX25GFACILITIES {SIOCX25GFACILITIES = 35298,};
enum MACRO_SIOCX25SFACILITIES {SIOCX25SFACILITIES = 35299,};
enum MACRO_ScreenSaverBlanked {ScreenSaverBlanked = 0,ScreenSaverInternal = 1,ScreenSaverExternal = 2,};
enum MACRO_XCMiscMinorVersion {XCMiscMinorVersion = 1,};
enum MACRO_XCMiscNumberErrors {XCMiscNumberErrors = 0,XCMiscMajorVersion = 1,};
enum MACRO_XCMiscNumberEvents {XCMiscNumberEvents = 0,};
enum MACRO_XConverterNotFound {XConverterNotFound = -3,};
enum MACRO_XFixesCursorNotify {XFixesCursorNotify = 1,};
enum MACRO_XINotifyDetailNone {XINotifyDetailNone = 7,};
enum MACRO_XSyncCounterNotify {XSyncCounterNotify = 0,XSyncAlarmNotify = 1,XSyncAlarmNotifyMask = 2,};
enum MACRO_X_DRI2QueryVersion {X_DRI2QueryVersion = 0,X_DRI2Connect = 1,X_DRI2Authenticate = 2,X_DRI2CreateDrawable = 3,X_DRI2DestroyDrawable = 4,X_DRI2GetBuffers = 5,X_DRI2CopyRegion = 6,X_DRI2GetBuffersWithFormat = 7,X_DRI2SwapBuffers = 8,X_DRI2GetMSC = 9,X_DRI2WaitMSC = 10,X_DRI2WaitSBC = 11,X_DRI2SwapInterval = 12,X_DRI2GetParam = 13,};
enum MACRO_X_XCMiscGetVersion {X_XCMiscGetVersion = 0,X_XCMiscGetXIDRange = 1,X_XCMiscGetXIDList = 2,};
enum MACRO_X_XDGAQueryVersion {X_XDGAQueryVersion = 0,X_XDGAQueryModes = 12,X_XDGASetMode = 13,X_XDGASetViewport = 14,X_XDGAInstallColormap = 15,X_XDGASelectInput = 16,X_XDGAFillRectangle = 17,X_XDGACopyArea = 18,X_XDGACopyTransparentArea = 19,X_XDGAGetViewportStatus = 20,X_XDGASync = 21,X_XDGAOpenFramebuffer = 22,X_XDGACloseFramebuffer = 23,X_XDGASetClientVersion = 24,X_XDGAChangePixmapMode = 25,X_XDGACreateColormap = 26,};
enum MACRO_X_XResQueryVersion {X_XResQueryVersion = 0,X_XResQueryClients = 1,X_XResQueryClientResources = 2,X_XResQueryClientPixmapBytes = 3,X_XResQueryClientIds = 4,X_XResQueryResourceBytes = 5,};
enum MACRO_X_XcupQueryVersion {X_XcupQueryVersion = 0,X_XcupGetReservedColormapEntries = 1,X_XcupStoreColors = 2,};
enum MACRO_XagNappGroupLeader {XagNappGroupLeader = 6,};
enum MACRO_XagWindowTypeWin16 {XagWindowTypeWin16 = 3,};
enum MACRO_XkbAllControlsMask {XkbAllControlsMask = 0xF8001FFF,};
enum MACRO_XkbAllExplicitMask {XkbAllExplicitMask = 0xFF,};
enum MACRO_XkbCompatMapNotify {XkbCompatMapNotify = 7,XkbBellNotify = 8,};
enum MACRO_XkbGeomMaxPriority {XkbGeomMaxPriority = 255,};
enum MACRO_XkbMaxLegalKeyCode {XkbMaxLegalKeyCode = 255,};
enum MACRO_XkbMinLegalKeyCode {XkbMinLegalKeyCode = 8,};
enum MACRO_XlibDisplayIOError {XlibDisplayIOError = 1,XlibDisplayClosing = 2,XlibDisplayNoXkb = 4,XlibDisplayPrivSync = 8,XlibDisplayProcConni = 16,XlibDisplayReadEvents = 32,};
enum MACRO_sz_xMbufBufferInfo {sz_xMbufBufferInfo = 8,sz_xMbufGetBufferVersionReq = 4,sz_xMbufGetBufferVersionReply = 32,sz_xMbufCreateImageBuffersReq = 12,sz_xMbufCreateImageBuffersReply = 32,sz_xMbufDestroyImageBuffersReq = 8,sz_xMbufDisplayImageBuffersReq = 8,sz_xMbufSetMBufferAttributesReq = 12,sz_xMbufGetMBufferAttributesReq = 8,sz_xMbufGetMBufferAttributesReply = 32,sz_xMbufSetBufferAttributesReq = 12,sz_xMbufGetBufferAttributesReq = 8,sz_xMbufGetBufferAttributesReply = 32,sz_xMbufGetBufferInfoReq = 8,sz_xMbufGetBufferInfoReply = 32,sz_xMbufCreateStereoWindowReq = 44,sz_xMbufClearImageBufferAreaReq = 20,};
struct _XkbDeviceValuatorAction {unsigned __int8 type;unsigned __int8 device;unsigned __int8 v1_what;unsigned __int8 v1_ndx;unsigned __int8 v1_value;unsigned __int8 v2_what;unsigned __int8 v2_ndx;unsigned __int8 v2_value;};
enum atscmh_rs_frame_ensemble {ATSCMH_RSFRAME_ENS_PRI = 0x0,ATSCMH_RSFRAME_ENS_SEC = 0x1,};
struct ib_uverbs_modify_qp_resp {};
struct ipx_interface_definition {unsigned __int64 ipx_network;unsigned __int8 ipx_device[16];unsigned __int8 ipx_dlink_type;unsigned __int8 ipx_special;unsigned __int8 ipx_node[6];};
typedef struct hdspm_channelfader snd_hdspm_channelfader_t;
struct usbdevfs_iso_packet_desc {unsigned int length;unsigned int actual_length;unsigned int status;};
enum v4l2_flash_strobe_source {V4L2_FLASH_STROBE_SOURCE_SOFTWARE = 0x0,V4L2_FLASH_STROBE_SOURCE_EXTERNAL = 0x1,};
enum v4l2_mpeg_audio_emphasis {V4L2_MPEG_AUDIO_EMPHASIS_NONE = 0x0,V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS = 0x1,V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 = 0x2,};
enum v4l2_mpeg_audio_encoding {V4L2_MPEG_AUDIO_ENCODING_LAYER_1 = 0x0,V4L2_MPEG_AUDIO_ENCODING_LAYER_2 = 0x1,V4L2_MPEG_AUDIO_ENCODING_LAYER_3 = 0x2,V4L2_MPEG_AUDIO_ENCODING_AAC = 0x3,V4L2_MPEG_AUDIO_ENCODING_AC3 = 0x4,};
enum v4l2_mpeg_stream_vbi_fmt {V4L2_MPEG_STREAM_VBI_FMT_NONE = 0x0,V4L2_MPEG_STREAM_VBI_FMT_IVTV = 0x1,};
enum v4l2_mpeg_video_encoding {V4L2_MPEG_VIDEO_ENCODING_MPEG_1 = 0x0,V4L2_MPEG_VIDEO_ENCODING_MPEG_2 = 0x1,V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC = 0x2,};
typedef struct _940A6A704B5145F6559156337DBE573E xChangeDevicePropertyReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xChangeKeyboardDeviceReq;
typedef struct _C19E6F380814408DFD31968534DDA3C5 xChangePointerControlReq;
typedef struct _6459665531F174B64FEE3BC376E34521 xDRI2BufferSwapComplete2;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xDamageQueryVersionReply;
typedef struct _82ABCF53CC2EA0D7663831DD8801F474 xDeleteDevicePropertyReq;
typedef struct _092DD72AC6B9BBA1C79AF097B6F8E844 xGetFeedbackControlReply;
typedef struct _A35F2E1A5E531ECFC152E2BA15F78A6A xGetKeyboardControlReply;
typedef struct _E5FEC4B44082A4B8B21FC86BB58EB49C xGetKeyboardMappingReply;
typedef struct _0702AFAE85E523028461380896C86760 xGetModifierMappingReply;
typedef struct _LbxBeginLargeRequest xLbxBeginLargeRequestReq;
typedef struct _LbxGetWinAttrAndGeom xLbxGetWinAttrAndGeomReq;
typedef struct _FFD94501D319906E4D5D8BC1834D8469 xListDevicePropertiesReq;
typedef struct _DD90A90D33B6DCFC05E4E875B7D49A5E xMbufGetBufferVersionReq;
typedef struct _AB98B12C01F884E8BC2DC3D07B35D622 xRR1_0SetScreenConfigReq;
typedef struct _0DACB856E79E56F4174777CC52DD3C58 xRRCrtcChangeNotifyEvent;
typedef struct _53D806E392066563D2EB8AD5676DF4C5 xRRGetCrtcGammaSizeReply;
typedef struct _E67E3CE40ADACFAFDB3FFE1938BD0D7E xRRGetCrtcTransformReply;
typedef struct _4098D4947D8DDC1E7B8C97E1A94B6364 xRRGetOutputPrimaryReply;
typedef struct _0A710E56E462CA6F472C6BEF95652ED5 xRRGetScreenResourcesReq;
typedef struct _0A710E56E462CA6F472C6BEF95652ED5 xRRGetScreenSizeRangeReq;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordDisableContextReq;
typedef struct _B16FC8566897364FB8F68A61B8D500EB xRecordQueryVersionReply;
typedef struct _B700DEC12E3C3D556A5FC194447E1A6E xRenderCreateGlyphSetReq;
typedef struct _7A75335468D0F989B2CF91A04174818E xRenderFillRectanglesReq;
typedef struct _9B9FAE43572AF8916E11706D7ECE195D xRenderQueryFiltersReply;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xRenderQueryVersionReply;
typedef struct _ScreenSaverQueryInfo xScreenSaverQueryInfoReq;
typedef struct _A4DBC252F7392490EC4C7D58273D4CD1 xSecurityQueryVersionReq;
typedef struct _8BD856D0EABB45DC0AE6203B505E4C05 xSelectExtensionEventReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xSetDeviceValuatorsReply;
typedef struct _3FC3C3386C6C3548296DFC9EB081B6FE xShapeGetRectanglesReply;
typedef struct _B030971557B6948BCB07CDE1436E426E xShapeInputSelectedReply;
typedef struct _8AC915922B7872008F9FA0F659707AB7 xTestQueryInputSizeReply;
typedef struct _8D276D88AE7A52B5A0CD113CDF9731AA xXDGAChangePixmapModeReq;
typedef struct _XDGACloseFramebuffer xXDGACloseFramebufferReq;
typedef struct _XDGASetClientVersion xXDGASetClientVersionReq;
typedef struct _XF86BigfontQueryFont xXF86BigfontQueryFontReq;
typedef struct _XF86MiscGetFilePaths xXF86MiscGetFilePathsReq;
typedef struct _XF86MiscQueryVersion xXF86MiscQueryVersionReq;
typedef struct _2E67F07AE07052B8E2E5530980B63AB8 xXFixesCursorNotifyEvent;
typedef struct _3DD3CD96FAD56E1211E0F63114C705EF xXFixesGetCursorImageReq;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xXFixesQueryVersionReply;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesSubtractRegionReq;
typedef struct _16B1457F639623288195B3438C14DD7C xXIGetClientPointerReply;
typedef struct _C178C08748CCB321711F58A9FBA92C23 xXResQueryClientIdsReply;
typedef struct _E98D3537A10D6D7A36EB2CF02D2A733B xXTestCompareCursorReply;
typedef struct _4496CBA88907C11C6361D9179E75F570 xXineramaQueryScreensReq;
struct xcb_alloc_color_cookie_t {unsigned int sequence;};
struct xcb_coloritem_iterator_t {xcb_coloritem_t *data;int rem;int index;};
enum xcb_composite_redirect_t {XCB_COMPOSITE_REDIRECT_AUTOMATIC = 0x0,XCB_COMPOSITE_REDIRECT_MANUAL = 0x1,};
struct xcb_glx_is_list_cookie_t {unsigned int sequence;};
struct xcb_intern_atom_cookie_t {unsigned int sequence;};
typedef xcb_enter_notify_event_t xcb_leave_notify_event_t;
struct xcb_rectangle_iterator_t {xcb_rectangle_t *data;int rem;int index;};
enum xcb_send_request_flags_t {XCB_REQUEST_CHECKED = 0x1,XCB_REQUEST_RAW = 0x2,XCB_REQUEST_DISCARD_REPLY = 0x4,};
struct xcb_timecoord_iterator_t {xcb_timecoord_t *data;int rem;int index;};
struct xcb_xevie_start_cookie_t {unsigned int sequence;};
enum xcb_xfixes_region_enum_t {XCB_XFIXES_REGION_NONE = 0x0,};
enum xcb_xkb_bool_ctrls_low_t {XCB_XKB_BOOL_CTRLS_LOW_REPEAT_KEYS = 0x1,XCB_XKB_BOOL_CTRLS_LOW_SLOW_KEYS = 0x2,XCB_XKB_BOOL_CTRLS_LOW_BOUNCE_KEYS = 0x4,XCB_XKB_BOOL_CTRLS_LOW_STICKY_KEYS = 0x8,XCB_XKB_BOOL_CTRLS_LOW_MOUSE_KEYS = 0x10,XCB_XKB_BOOL_CTRLS_LOW_MOUSE_KEYS_ACCEL = 0x20,XCB_XKB_BOOL_CTRLS_LOW_ACCESS_X_KEYS = 0x40,XCB_XKB_BOOL_CTRLS_LOW_ACCESS_X_TIMEOUT = 0x80,};
struct xcb_xkb_get_map_cookie_t {unsigned int sequence;};
struct xcb_xkb_shape_iterator_t {xcb_xkb_shape_t *data;int rem;int index;};
struct xcb_xv_format_iterator_t {xcb_xv_format_t *data;int rem;int index;};
typedef struct _xkbExtensionDeviceNotify xkbExtensionDeviceNotify;
typedef struct _xkbKTSetMapEntryWireDesc xkbKTSetMapEntryWireDesc;
typedef struct _9A02475B75BDC9A6C1FC81F46F9E4217 xvQueryPortAttributesReq;
typedef struct _D91C2DCC69F66A043F2E243F7B809339 xvmcDestroySubpictureReq;
enum Dwarf_Ranges_Entry_Type {DW_RANGES_ENTRY = 0x0,DW_RANGES_ADDRESS_SELECTION = 0x1,DW_RANGES_END = 0x2,};
enum MACRO_AsyncOtherDevices {AsyncOtherDevices = 3,AsyncAll = 4,};
enum MACRO_AutoRepeatModeOff {AutoRepeatModeOff = 0,AutoRepeatModeOn = 1,AutoRepeatModeDefault = 2,};
enum MACRO_BadImplementation {BadImplementation = 17,FirstExtensionError = 128,};
enum MACRO_BellFeedbackClass {BellFeedbackClass = 5,};
enum MACRO_CAPI_MANUFACTURER {CAPI_MANUFACTURER_LEN = 64,CAPI_SERIAL_LEN = 8,};
enum MACRO_CCISS_REVALIDVOLS {CCISS_REVALIDVOLS = 16906,CCISS_DEREGDISK = 16908,CCISS_REGNEWD = 16910,CCISS_RESCANDISK = 16912,};
enum MACRO_CDROMMULTISESSION {CDROMMULTISESSION = 0x5310,};
enum MACRO_CDROMREADTOCENTRY {CDROMREADTOCENTRY = 0x5306,};
enum MACRO_CILEN_PREDICTOR_2 {CILEN_PREDICTOR_2 = 2,};
enum MACRO_CreateNotifyEvent {lbxsz_CreateNotifyEvent = 24,lbxupsz_CreateNotifyEvent = 23,};
enum MACRO_DRI2BufferStencil {DRI2BufferStencil = 5,};
enum MACRO_DvKeyClickPercent {DvKeyClickPercent = 1,DvPercent = 2,DvPitch = 4,DvDuration = 8,DvLed = 16,DvLedMode = 32,DvKey = 64,DvAutoRepeatMode = 128,};
enum MACRO_HIDIOCAPPLICATION {HIDIOCAPPLICATION = 0x4802,};
enum MACRO_ISDN_NET_DIALMODE {ISDN_NET_DIALMODE_MASK = 0xC0,ISDN_NET_DM_OFF = 0x0,ISDN_NET_DM_MANUAL = 0x40,ISDN_NET_DM_AUTO = 0x80,ISDN_PTYPE_UNKNOWN = 0x0,ISDN_PTYPE_1TR6 = 0x1,ISDN_PTYPE_EURO = 0x2,ISDN_PTYPE_LEASED = 0x3,ISDN_PTYPE_NI1 = 0x4,ISDN_PTYPE_MAX = 0x7,ISDN_PROTO_L2_X75I = 0x0,ISDN_PROTO_L2_X75UI = 0x1,ISDN_PROTO_L2_X75BUI = 0x2,ISDN_PROTO_L2_HDLC = 0x3,ISDN_PROTO_L2_TRANS = 0x4,ISDN_PROTO_L2_X25DTE = 0x5,ISDN_PROTO_L2_X25DCE = 0x6,ISDN_PROTO_L2_V11096 = 0x7,ISDN_PROTO_L2_V11019 = 0x8,ISDN_PROTO_L2_V11038 = 0x9,ISDN_PROTO_L2_MODEM = 0xA,ISDN_PROTO_L2_FAX = 0xB,ISDN_PROTO_L2_HDLC_56K = 0xC,ISDN_PROTO_L2_MAX = 0xF,ISDN_PROTO_L3_TRANS = 0x0,ISDN_PROTO_L3_TRANSDSP = 0x1,ISDN_PROTO_L3_FCLASS2 = 0x2,ISDN_PROTO_L3_FCLASS1 = 0x3,ISDN_PROTO_L3_MAX = 0x7,};
enum MACRO_KBKeyClickPercent {KBKeyClickPercent = 1,KBBellPercent = 2,KBBellPitch = 4,KBBellDuration = 8,KBLed = 16,KBLedMode = 32,KBKey = 64,KBAutoRepeatMode = 128,};
enum MACRO_LPA_1000LOCALRXOK {LPA_1000LOCALRXOK = 0x2000,LPA_1000REMRXOK = 0x1000,LPA_1000FULL = 0x800,LPA_1000HALF = 0x400,};
enum MACRO_LbxFreeCellsEvent {LbxFreeCellsEvent = 9,};
enum MACRO_MAP_UNINITIALIZED {MAP_UNINITIALIZED = 0x0,};
enum MACRO_MATSUSHITA_CDROM2 {MATSUSHITA_CDROM2_MAJOR = 26,QIC117_TAPE_MAJOR = 27,MATSUSHITA_CDROM3_MAJOR = 27,MATSUSHITA_CDROM4_MAJOR = 28,};
enum MACRO_MSR_IA32_APICBASE {MSR_IA32_APICBASE = 0x1B,MSR_IA32_APICBASE_BSP = 0x100,MSR_IA32_APICBASE_ENABLE = 0x800,MSR_IA32_APICBASE_BASE = 0xFFFFF000,MSR_IA32_TSCDEADLINE = 0x6E0,MSR_IA32_UCODE_WRITE = 0x79,MSR_IA32_UCODE_REV = 0x8B,MSR_IA32_PERF_STATUS = 0x198,MSR_IA32_PERF_CTL = 0x199,MSR_AMD_PSTATE_DEF_BASE = 0xFFFFFFFFC0010064,MSR_AMD_PERF_STATUS = 0xFFFFFFFFC0010063,MSR_AMD_PERF_CTL = 0xFFFFFFFFC0010062,MSR_IA32_MPERF = 0xE7,MSR_IA32_APERF = 0xE8,MSR_IA32_THERM_CONTROL = 0x19A,MSR_IA32_THERM_INTERRUPT = 0x19B,};
enum MACRO_NotifyPointerRoot {NotifyPointerRoot = 6,};
enum MACRO_PictOpAtopReverse {PictOpAtopReverse = 10,};
enum MACRO_PictOpConjointDst {PictOpConjointDst = 0x22,};
enum MACRO_PictOpConjointOut {PictOpConjointOut = 0x27,};
enum MACRO_PictOpConjointSrc {PictOpConjointSrc = 0x21,};
enum MACRO_PictOpConjointXor {PictOpConjointXor = 0x2B,};
enum MACRO_PictOpDisjointDst {PictOpDisjointDst = 0x12,};
enum MACRO_PictOpDisjointOut {PictOpDisjointOut = 0x17,};
enum MACRO_PictOpDisjointSrc {PictOpDisjointSrc = 0x11,};
enum MACRO_PictOpDisjointXor {PictOpDisjointXor = 0x1B,};
enum MACRO_RRSetConfigFailed {RRSetConfigFailed = 3,};
enum MACRO_SIOCBONDINFOQUERY {SIOCBONDINFOQUERY = 0x8994,};
enum MACRO_SIOCBONDSETHWADDR {SIOCBONDSETHWADDR = 0x8992,};
enum MACRO_SIOCPNADDRESOURCE {SIOCPNADDRESOURCE = 35310,};
enum MACRO_SIOCPNDELRESOURCE {SIOCPNDELRESOURCE = 35311,};
enum MACRO_SIOCRSGFACILITIES {SIOCRSGFACILITIES = 35302,};
enum MACRO_SIOCX25GCAUSEDIAG {SIOCX25GCAUSEDIAG = 35302,};
enum MACRO_SIOCX25SCAUSEDIAG {SIOCX25SCAUSEDIAG = 35308,};
enum MACRO_ScreenSaverNotify {ScreenSaverNotify = 0,ScreenSaverNumberEvents = 1,};
enum MACRO_TCPOLEN_TIMESTAMP {TCPOLEN_TIMESTAMP = 10,TCPOLEN_TSTAMP_APPA = 12,};
enum MACRO_XDGAFlipImmediate {XDGAFlipImmediate = 0x1,XDGAFlipRetrace = 0x2,};
enum MACRO_XF86Bigfont_FLAGS {XF86Bigfont_FLAGS_Shm = 1,};
enum MACRO_XIAnyPropertyType {XIAnyPropertyType = 0,};
enum MACRO_XIGrabNotViewable {XIGrabNotViewable = 3,XIGrabFrozen = 4,};
enum MACRO_XIGrabtypeFocusIn {XIGrabtypeFocusIn = 3,XIGrabtypeTouchBegin = 4,XIAnyModifier = 2147483648,};
enum MACRO_XIMPreeditUnKnown {XIMPreeditUnKnown = 0,XIMPreeditEnable = 1,XIMPreeditDisable = 2,};
enum MACRO_XINotifyNonlinear {XINotifyNonlinear = 3,XINotifyNonlinearVirtual = 4,};
enum MACRO_XIPointerEmulated {XIPointerEmulated = 65536,};
enum MACRO_XIPropModeReplace {XIPropModeReplace = 0,XIPropModePrepend = 1,XIPropModeAppend = 2,};
enum MACRO_XIPropertyDeleted {XIPropertyDeleted = 0,XIPropertyCreated = 1,XIPropertyModified = 2,};
enum MACRO_XITouchPendingEnd {XITouchPendingEnd = 65536,XITouchEmulatingPointer = 131072,};
enum MACRO_XI_DeviceValuator {XI_DeviceValuator = 0,XI_DeviceKeyPress = 1,XI_DeviceKeyRelease = 2,XI_DeviceButtonPress = 3,XI_DeviceButtonRelease = 4,XI_DeviceMotionNotify = 5,XI_DeviceFocusIn = 6,XI_DeviceFocusOut = 7,XI_ProximityIn = 8,XI_ProximityOut = 9,XI_DeviceStateNotify = 10,XI_DeviceMappingNotify = 11,XI_ChangeDeviceNotify = 12,XI_DeviceKeystateNotify = 13,XI_DeviceButtonstateNotify = 14,XI_DevicePresenceNotify = 15,XI_DevicePropertyNotify = 16,};
enum MACRO_XRecordAllClients {XRecordAllClients = 3,};
enum MACRO_XRecordBadContext {XRecordBadContext = 0,RecordNumErrors = 1,};
enum MACRO_XRecordClientDied {XRecordClientDied = 3,XRecordStartOfData = 4,};
enum MACRO_XRecordFromServer {XRecordFromServer = 0,XRecordFromClient = 1,XRecordClientStarted = 2,};
enum MACRO_XSyncNumberErrors {XSyncNumberErrors = 3,};
enum MACRO_XSyncNumberEvents {XSyncNumberEvents = 2,};
enum MACRO_XTestMinorVersion {XTestMinorVersion = 2,};
enum MACRO_XTestNumberErrors {XTestNumberErrors = 0,XTestCurrentCursor = 1,XTestMajorVersion = 2,};
enum MACRO_XTestNumberEvents {XTestNumberEvents = 0,};
enum MACRO_X_DMXQueryVersion {X_DMXQueryVersion = 0,X_DMXGetScreenCount = 1,X_DMXGetScreenInformationDEPRECATED = 2,X_DMXGetWindowAttributes = 3,X_DMXGetInputCount = 4,X_DMXGetInputAttributes = 5,X_DMXForceWindowCreationDEPRECATED = 6,X_DMXReconfigureScreenDEPRECATED = 7,X_DMXSync = 8,X_DMXForceWindowCreation = 9,X_DMXGetScreenAttributes = 10,X_DMXChangeScreensAttributes = 11,X_DMXAddScreen = 12,X_DMXRemoveScreen = 13,X_DMXGetDesktopAttributes = 14,X_DMXChangeDesktopAttributes = 15,X_DMXAddInput = 16,X_DMXRemoveInput = 17,};
enum MACRO_X_EVIQueryVersion {X_EVIQueryVersion = 0,X_EVIGetVisualInfo = 1,};
enum MACRO_X_LbxQueryVersion {X_LbxQueryVersion = 0,X_LbxStartProxy = 1,X_LbxStopProxy = 2,X_LbxSwitch = 3,X_LbxNewClient = 4,X_LbxCloseClient = 5,X_LbxModifySequence = 6,X_LbxAllowMotion = 7,X_LbxIncrementPixel = 8,X_LbxDelta = 9,X_LbxGetModifierMapping = 10,X_LbxInvalidateTag = 12,X_LbxPolyPoint = 13,X_LbxPolyLine = 14,X_LbxPolySegment = 15,X_LbxPolyRectangle = 16,X_LbxPolyArc = 17,X_LbxFillPoly = 18,X_LbxPolyFillRectangle = 19,X_LbxPolyFillArc = 20,X_LbxGetKeyboardMapping = 21,X_LbxQueryFont = 22,X_LbxChangeProperty = 23,X_LbxGetProperty = 24,X_LbxTagData = 25,X_LbxCopyArea = 26,X_LbxCopyPlane = 27,X_LbxPolyText8 = 28,X_LbxPolyText16 = 29,X_LbxImageText8 = 30,X_LbxImageText16 = 31,X_LbxQueryExtension = 32,X_LbxPutImage = 33,X_LbxGetImage = 34,X_LbxBeginLargeRequest = 35,X_LbxLargeRequestData = 36,X_LbxEndLargeRequest = 37,X_LbxInternAtoms = 38,X_LbxGetWinAttrAndGeom = 39,X_LbxGrabCmap = 40,X_LbxReleaseCmap = 41,X_LbxAllocColor = 42,X_LbxSync = 43,};
enum MACRO_X_ShmQueryVersion {X_ShmQueryVersion = 0,X_ShmAttach = 1,X_ShmDetach = 2,X_ShmPutImage = 3,X_ShmGetImage = 4,X_ShmCreatePixmap = 5,};
enum MACRO_X_XTestGetVersion {X_XTestGetVersion = 0,X_XTestCompareCursor = 1,X_XTestFakeInput = 2,X_XTestGrabControl = 3,};
enum MACRO_X_XagQueryVersion {X_XagQueryVersion = 0,X_XagCreate = 1,X_XagDestroy = 2,X_XagGetAttr = 3,X_XagQuery = 4,X_XagCreateAssoc = 5,X_XagDestroyAssoc = 6,};
enum MACRO_XevieNumberErrors {XevieNumberErrors = 0,};
enum MACRO_XkbControlsNotify {XkbControlsNotify = 3,XkbIndicatorStateNotify = 4,};
enum MACRO_XkbMaxRadioGroups {XkbMaxRadioGroups = 32,};
enum MACRO_XkbNoModifierMask {XkbNoModifierMask = 0,XkbAllModifiersMask = 255,};
enum MACRO_XkbRepeatKeysMask {XkbRepeatKeysMask = 1,XkbSlowKeysMask = 2,XkbBounceKeysMask = 4,XkbStickyKeysMask = 8,XkbMouseKeysMask = 16,XkbMouseKeysAccelMask = 32,XkbAccessXKeysMask = 64,XkbAccessXTimeoutMask = 128,XkbAccessXFeedbackMask = 256,XkbAudibleBellMask = 512,XkbOverlay1Mask = 1024,XkbOverlay2Mask = 2048,XkbIgnoreGroupLockMask = 4096,XkbGroupsWrapMask = 134217728,XkbInternalModsMask = 268435456,XkbIgnoreLockModsMask = 536870912,XkbPerKeyRepeatMask = 1073741824,XkbControlsEnabledMask = 2147483648,};
enum MACRO_XkbSetMapAllFlags {XkbSetMapAllFlags = 0x3,};
enum MACRO__LINUX_CAPABILITY {_LINUX_CAPABILITY_VERSION_1 = 0x19980330,_LINUX_CAPABILITY_U32S_1 = 0x1,_LINUX_CAPABILITY_VERSION_2 = 0x20071026,_LINUX_CAPABILITY_U32S_2 = 0x2,_LINUX_CAPABILITY_VERSION_3 = 0x20080522,_LINUX_CAPABILITY_U32S_3 = 0x2,};
enum MACRO___USE_XOPEN2K8XSI {__USE_XOPEN2K8XSI = 1,__USE_XOPEN2KXSI = 1,__USE_ISOC95 = 1,__USE_ISOC99 = 1,__USE_LARGEFILE = 1,__USE_LARGEFILE64 = 1,__USE_MISC = 1,__USE_BSD = 1,__USE_SVID = 1,__USE_ATFILE = 1,__USE_GNU = 1,__USE_FORTIFY_LEVEL = 0,};
enum MACRO___WORDSIZE_TIME64 {__WORDSIZE_TIME64_COMPAT32 = 1,};
enum MACRO__deviceButtonGrab {_deviceButtonGrab = 7,_deviceOwnerGrabButton = 8,};
enum MACRO__noExtensionEvent {_noExtensionEvent = 9,};
enum MACRO_sz_fsBitmapFormat {sz_fsBitmapFormat = 4,};
typedef struct _XIMStringConversionText XIMStringConversionText;
typedef unsigned __int16 XIMStringConversionType;
typedef struct _XkbCompatMapNotify XkbCompatMapNotifyEvent;
typedef struct _XkbDeviceValuatorAction XkbDeviceValuatorAction;
typedef struct _XkbIndicatorNotify XkbIndicatorNotifyEvent;
typedef unsigned int _Unwind_Exception_Class;
typedef struct __libc_lock_recursive_opaque__ __libc_lock_recursive_t;
struct __pthread_cleanup_frame {void (*__cancel_routine)(void *);void *__cancel_arg;int __do_it;int __cancel_type;};
struct __pthread_internal_list {struct __pthread_internal_list *__prev;struct __pthread_internal_list *__next;};
struct _pthread_cleanup_buffer {void (*__routine)(void *);void *__arg;int __canceltype;struct _pthread_cleanup_buffer *__prev;};
enum dcb_general_attr_values {DCB_ATTR_VALUE_UNDEFINED = 0xFF,};
typedef struct _FF9246841A32B78E17B3644398C154C0 deviceButtonStateNotify;
enum hdspm_madi_frame_format {hdspm_frame_48 = 0x0,hdspm_frame_96 = 0x1,};
enum i2400m_rf_switch_status {I2400M_RF_SWITCH_ON = 0x1,I2400M_RF_SWITCH_OFF = 0x2,};
typedef void *openvpn_plugin_handle_t;
struct serial_multiport_struct {int irq;int port1;unsigned __int8 mask1;unsigned __int8 match1;int port2;unsigned __int8 mask2;unsigned __int8 match2;int port3;unsigned __int8 mask3;unsigned __int8 match3;int port4;unsigned __int8 mask4;unsigned __int8 match4;int port_monitor;int reserved[32];};
struct soundfont_voice_rec_hdr {unsigned __int8 bank;unsigned __int8 instr;char nvoices;char write_mode;};
enum usb_gadgetfs_event_type {GADGETFS_NOP = 0x0,GADGETFS_CONNECT = 0x1,GADGETFS_DISCONNECT = 0x2,GADGETFS_SETUP = 0x3,GADGETFS_SUSPEND = 0x4,};
enum v4l2_exposure_auto_type {V4L2_EXPOSURE_AUTO = 0x0,V4L2_EXPOSURE_MANUAL = 0x1,V4L2_EXPOSURE_SHUTTER_PRIORITY = 0x2,V4L2_EXPOSURE_APERTURE_PRIORITY = 0x3,};
typedef struct _BCDE0020825236A8F8A72B60AFA7374C xChangeDeviceControlReq;
typedef struct _AD58CDA99C93F34C31A743157D5C3E5C xChangePointerDeviceReq;
typedef struct _DC32A0924BDC2649CEA8C5E8AC72EF13 xCopyColormapAndFreeReq;
typedef struct _D9975735FE375B63E13B12CE4075213A xDMXGetScreenCountReply;
typedef struct _3088BFAEEF676422C10800B8EA2DDE0D xDRI2BufferSwapComplete;
typedef struct _95AD98905D37F3C4828B107878AF9BCB xDRI2DestroyDrawableReq;
typedef struct _6C8DA88AE0F795AA91A7651F5464995D xGetDeviceKeyMappingReq;
typedef struct _E0C447414AA97F974326ACA5E0A3E4C8 xGetDevicePropertyReply;
typedef struct _EF15DCB28339270802C69A46485DD45C xGetExtensionVersionReq;
typedef struct _019CECDD6753AAB6598130682127E88A xGetPointerControlReply;
typedef struct _F38DCD124B444AE28722F96474B80F5D xGetPointerMappingReply;
typedef struct _286A111ACEDB435E271A47289B65D34E xGetSelectionOwnerReply;
typedef struct _E63B05C5B736EEB1B492508D1A96BE3C xLbxChangePropertyReply;
typedef struct _LbxLargeRequestData xLbxLargeRequestDataReq;
typedef struct _LbxQueryExtensionReply xLbxQueryExtensionReply;
typedef struct _92276D725373BB3B16F8CB5C6778E662 xListFontsWithInfoReply;
typedef struct _62E4225A05F3FA192F1EADC1962F3FA7 xMbufClobberNotifyEvent;
typedef struct _BB307DE81D005F0ABA15BB97E20A0808 xMbufGetBufferInfoReply;
typedef struct _D467916C3587874006E0A38FD04B2C07 xPanoramiXGetStateReply;
typedef struct _47789CAF959FABE2F5D937697F56BE05 xRRGetOutputPropertyReq;
typedef struct _E55E0FA3BC2293A808012744A07CC3F2 xRRGetProviderInfoReply;
typedef struct _3DAB27C0C642F6AD6A1592659EA9CCF3 xRRSetScreenConfigReply;
typedef struct _791AF81D366397FAE28AFC7E5E3FF4B5 xRecordCreateContextReq;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordEnableContextReq;
typedef struct _24F12A37FE1D1AEA7948B3C7A0452456 xRenderChangePictureReq;
typedef struct _B1BFEFE2106F3BB5718738D899DB0721 xRenderCreatePictureReq;
typedef struct _ScreenSaverNotify xScreenSaverNotifyEvent;
typedef struct _AAD518AFB58856180F72F894AD441DEE xShapeQueryExtentsReply;
typedef struct _7D044E98E295B1AE6D053F4E096E3E34 xShapeQueryVersionReply;
typedef struct _xSyncCounterNotifyEvent xSyncCounterNotifyEvent;
typedef struct _B3154DDC89CC03C065CC7D94E90D12B0 xXCMiscGetXIDRangeReply;
typedef struct _XDGAInstallColormap xXDGAInstallColormapReq;
typedef struct _XDGAOpenFramebuffer xXDGAOpenFramebufferReq;
typedef struct _6B16D0CDF8A6D24951AF7FC52FCEB99B xXF86DGAGetVidPageReply;
typedef struct _A365B987896F695263E94A4D93A744FD xXF86DGAGetVideoLLReply;
typedef struct _XF86DGAQueryVersion xXF86DGAQueryVersionReq;
typedef struct _XF86MiscPassMessage xXF86MiscPassMessageReq;
typedef struct _2FC2A6BC4D5C4BA98ABB1F848EBDDDCB xXF86OldVidModeModeInfo;
typedef struct _XF86VidModeGetGamma xXF86VidModeGetGammaReq;
typedef struct _XF86VidModeSetGamma xXF86VidModeSetGammaReq;
typedef struct _019B8CCB864AFF4771EC3D9E3020C8B5 xXFixesChangeSaveSetReq;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesCombineRegionReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesDestroyRegionReq;
typedef struct _DA4CA76774A2C175F5D0B77BF61D79A2 xXFixesFetchRegionReply;
typedef struct _0490893E281F28CD04BB03B56188F30F xXFixesGetCursorNameReq;
typedef struct _5EC50BA61A7AE0BB02D4340472A7D806 xXFixesRegionExtentsReq;
typedef struct _D414AB5C490C563DD84DD380518CE003 xXFixesSetCursorNameReq;
typedef struct _4FE6F5ECACFA93E764B6E0B251EFE623 xXIGetSelectedEventsReq;
typedef struct _C98069716B69DDD3E3DFFC1FB582A369 xXIPassiveGrabDeviceReq;
typedef struct _EFD6C7D4777DD13E0B1CDD145692A98C xXevieQueryVersionReply;
struct xcb_charinfo_iterator_t {xcb_charinfo_t *data;int rem;int index;};
struct xcb_fontprop_iterator_t {xcb_fontprop_t *data;int rem;int index;};
enum xcb_get_property_type_t {XCB_GET_PROPERTY_TYPE_ANY = 0x0,};
struct xcb_glx_finish_cookie_t {unsigned int sequence;};
enum xcb_input_input_class_t {XCB_INPUT_INPUT_CLASS_KEY = 0x0,XCB_INPUT_INPUT_CLASS_BUTTON = 0x1,XCB_INPUT_INPUT_CLASS_VALUATOR = 0x2,XCB_INPUT_INPUT_CLASS_FEEDBACK = 0x3,XCB_INPUT_INPUT_CLASS_PROXIMITY = 0x4,XCB_INPUT_INPUT_CLASS_FOCUS = 0x5,XCB_INPUT_INPUT_CLASS_OTHER = 0x6,};
typedef xcb_key_press_event_t xcb_key_release_event_t;
struct xcb_list_fonts_cookie_t {unsigned int sequence;};
struct xcb_list_hosts_cookie_t {unsigned int sequence;};
struct xcb_query_font_cookie_t {unsigned int sequence;};
struct xcb_query_tree_cookie_t {unsigned int sequence;};
enum xcb_randr_notify_mask_t {XCB_RANDR_NOTIFY_MASK_SCREEN_CHANGE = 0x1,XCB_RANDR_NOTIFY_MASK_CRTC_CHANGE = 0x2,XCB_RANDR_NOTIFY_MASK_OUTPUT_CHANGE = 0x4,XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY = 0x8,};
struct xcb_res_type_iterator_t {xcb_res_type_t *data;int rem;int index;};
enum xcb_screensaver_event_t {XCB_SCREENSAVER_EVENT_NOTIFY_MASK = 0x1,XCB_SCREENSAVER_EVENT_CYCLE_MASK = 0x2,};
enum xcb_screensaver_state_t {XCB_SCREENSAVER_STATE_OFF = 0x0,XCB_SCREENSAVER_STATE_ON = 0x1,XCB_SCREENSAVER_STATE_CYCLE = 0x2,XCB_SCREENSAVER_STATE_DISABLED = 0x3,};
typedef xcb_value_error_t xcb_shm_bad_seg_error_t;
struct xcb_xevie_send_cookie_t {unsigned int sequence;};
enum xcb_xkb_behavior_type_t {XCB_XKB_BEHAVIOR_TYPE_DEFAULT = 0x0,XCB_XKB_BEHAVIOR_TYPE_LOCK = 0x1,XCB_XKB_BEHAVIOR_TYPE_RADIO_GROUP = 0x2,XCB_XKB_BEHAVIOR_TYPE_OVERLAY_1 = 0x3,XCB_XKB_BEHAVIOR_TYPE_OVERLAY_2 = 0x4,XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_LOCK = 0x81,XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_RADIO_GROUP = 0x82,XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_OVERLAY_1 = 0x83,XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_OVERLAY_2 = 0x84,};
enum xcb_xkb_im_mods_which_t {XCB_XKB_IM_MODS_WHICH_USE_COMPAT = 0x10,XCB_XKB_IM_MODS_WHICH_USE_EFFECTIVE = 0x8,XCB_XKB_IM_MODS_WHICH_USE_LOCKED = 0x4,XCB_XKB_IM_MODS_WHICH_USE_LATCHED = 0x2,XCB_XKB_IM_MODS_WHICH_USE_BASE = 0x1,};
enum xcb_xkb_set_map_flags_t {XCB_XKB_SET_MAP_FLAGS_RESIZE_TYPES = 0x1,XCB_XKB_SET_MAP_FLAGS_RECOMPUTE_ACTIONS = 0x2,};
enum xcb_xkb_set_of_groups_t {XCB_XKB_SET_OF_GROUPS_ANY = 0x80,};
enum xcb_xkb_sym_interpret_t {XCB_XKB_SYM_INTERPRET_NONE_OF = 0x0,XCB_XKB_SYM_INTERPRET_ANY_OF_OR_NONE = 0x1,XCB_XKB_SYM_INTERPRET_ANY_OF = 0x2,XCB_XKB_SYM_INTERPRET_ALL_OF = 0x3,XCB_XKB_SYM_INTERPRET_EXACTLY = 0x4,};
enum xcb_xv_attribute_flag_t {XCB_XV_ATTRIBUTE_FLAG_GETTABLE = 0x1,XCB_XV_ATTRIBUTE_FLAG_SETTABLE = 0x2,};
struct xcb_xv_image_iterator_t {xcb_xv_image_t *data;int rem;int index;};
enum xcb_xv_scanline_order_t {XCB_XV_SCANLINE_ORDER_TOP_TO_BOTTOM = 0x0,XCB_XV_SCANLINE_ORDER_BOTTOM_TO_TOP = 0x1,};
typedef struct _xkbGetIndicatorMapReply xkbGetIndicatorMapReply;
typedef struct _xkbGetIndicatorState xkbGetIndicatorStateReq;
typedef struct _xkbGetNamedIndicator xkbGetNamedIndicatorReq;
typedef struct _xkbIndicatorMapWireDesc xkbIndicatorMapWireDesc;
typedef struct _xkbSetDebuggingFlags xkbSetDebuggingFlagsReq;
typedef struct _xkbSetNamedIndicator xkbSetNamedIndicatorReq;
typedef struct _xkbSymInterpretWireDesc xkbSymInterpretWireDesc;
typedef struct _0C5B3DDBD9AAB3637C3C3A1D41E42158 xvGetPortAttributeReply;
typedef struct _403017519C186A112CAA8988372FD914 xvListImageFormatsReply;
typedef struct _942EBE9ABD97793534DEB0950390C4AB xvmcCreateSubpictureReq;
typedef struct _B0A4657A0F832627789EEFA30E2C3FE8 xvmcListSurfaceTypesReq;
enum MACRO_BLKDISCARDZEROES {BLKDISCARDZEROES = 0x127C,};
enum MACRO_BLKTRACETEARDOWN {BLKTRACETEARDOWN = 0x1276,};
enum MACRO_BarrierPositiveX {BarrierPositiveX = 1,BarrierPositiveY = 2,BarrierNegativeX = 4,BarrierNegativeY = 8,};
enum MACRO_CDROMAUDIOBUFSIZ {CDROMAUDIOBUFSIZ = 0x5382,};
enum MACRO_CDROMGETSPINDOWN {CDROMGETSPINDOWN = 0x531D,};
enum MACRO_CDROMSETSPINDOWN {CDROMSETSPINDOWN = 0x531E,};
enum MACRO_COMMAND_COMPLETE {COMMAND_COMPLETE = 0x0,};
enum MACRO_CirculateRequest {CirculateRequest = 27,};
enum MACRO_ConfigureRequest {ConfigureRequest = 23,};
enum MACRO_DPMSMajorVersion {DPMSMajorVersion = 1,};
enum MACRO_DPMSMinorVersion {DPMSMinorVersion = 1,};
enum MACRO_DPMSNumberErrors {DPMSNumberErrors = 0,};
enum MACRO_DPMSNumberEvents {DPMSNumberEvents = 0,};
enum MACRO_DRI2NumberErrors {DRI2NumberErrors = 0,DRI2NumberEvents = 2,};
enum MACRO_DamageNotifyMore {DamageNotifyMore = 0x80,};
enum MACRO_ETHTOOL_RXNTUPLE {ETHTOOL_RXNTUPLE_ACTION_DROP = -1,ETHTOOL_RXNTUPLE_ACTION_CLEAR = -2,ETHTOOL_FLASH_MAX_FILENAME = 128,};
enum MACRO_EXTENDED_MESSAGE {EXTENDED_MESSAGE = 0x1,EXTENDED_MODIFY_DATA_POINTER = 0x0,EXTENDED_SDTR = 0x1,EXTENDED_EXTENDED_IDENTIFY = 0x2,EXTENDED_WDTR = 0x3,};
enum MACRO_FBIOGET_DISPINFO {FBIOGET_DISPINFO = 0x4618,};
enum MACRO_GENumberRequests {GENumberRequests = 1,};
enum MACRO_HIDIOCINITREPORT {HIDIOCINITREPORT = 0x4805,};
enum MACRO_KbdFeedbackClass {KbdFeedbackClass = 0,PtrFeedbackClass = 1,StringFeedbackClass = 2,};
enum MACRO_LOCALDOMAINPARTS {LOCALDOMAINPARTS = 2,};
enum MACRO_LbxTagTypeModmap {LbxTagTypeModmap = 1,LbxTagTypeKeymap = 2,};
enum MACRO_MAX_MODFUNCTIONS {MAX_MODFUNCTIONS = 12,};
enum MACRO_MSR_IA32_PACKAGE {MSR_IA32_PACKAGE_THERM_STATUS = 0x1B1,};
enum MACRO_NorthEastGravity {NorthEastGravity = 3,WestGravity = 4,};
enum MACRO_NotifyDetailNone {NotifyDetailNone = 7,};
enum MACRO_PictOpColorDodge {PictOpColorDodge = 0x35,};
enum MACRO_PictOpConjointIn {PictOpConjointIn = 0x25,};
enum MACRO_PictOpDifference {PictOpDifference = 0x39,};
enum MACRO_PictOpDisjointIn {PictOpDisjointIn = 0x15,};
enum MACRO_PropertyNewValue {PropertyNewValue = 0,PropertyDelete = 1,};
enum MACRO_RRNumberRequests {RRNumberRequests = 42,};
enum MACRO_RR_HSyncPositive {RR_HSyncPositive = 0x1,RR_HSyncNegative = 0x2,RR_VSyncPositive = 0x4,RR_VSyncNegative = 0x8,RR_Interlace = 0x10,RR_DoubleScan = 0x20,RR_CSync = 0x40,RR_CSyncPositive = 0x80,RR_CSyncNegative = 0x100,RR_HSkewPresent = 0x200,RR_BCast = 0x400,RR_PixelMultiplex = 0x800,RR_DoubleClock = 0x1000,RR_ClockDivideBy2 = 0x2000,RR_Connected = 0x0,RR_Disconnected = 0x1,RR_UnknownConnection = 0x2,};
enum MACRO_SCM_TIMESTAMPING {SCM_TIMESTAMPING = 37,};
enum MACRO_SIOCATALKDIFADDR {SIOCATALKDIFADDR = 35296,};
enum MACRO_SIOCAX25GETPARMS {SIOCAX25GETPARMS = 35301,};
enum MACRO_SIOCAX25SETPARMS {SIOCAX25SETPARMS = 35302,};
enum MACRO_SIOCGBPQETHPARAM {SIOCGBPQETHPARAM = 0x5000,};
enum MACRO_SIOCGCMFREQUENCY {SIOCGCMFREQUENCY = 35314,};
enum MACRO_SIOCPNENABLEPIPE {SIOCPNENABLEPIPE = 35309,};
enum MACRO_SIOCPROTOPRIVATE {SIOCPROTOPRIVATE = 0x89E0,};
enum MACRO_SIOCSBPQETHPARAM {SIOCSBPQETHPARAM = 0x5001,};
enum MACRO_SIOCSCMFREQUENCY {SIOCSCMFREQUENCY = 35315,};
enum MACRO_SIOCX25GSUBSCRIP {SIOCX25GSUBSCRIP = 35296,};
enum MACRO_SIOCX25SSUBSCRIP {SIOCX25SSUBSCRIP = 35297,};
enum MACRO_STL_CALLOUTMAJOR {STL_CALLOUTMAJOR = 25,};
enum MACRO_ScreenSaverReset {ScreenSaverReset = 0,ScreenSaverActive = 1,};
enum MACRO_SelectionRequest {SelectionRequest = 30,};
enum MACRO_SouthEastGravity {SouthEastGravity = 9,};
enum MACRO_SouthWestGravity {SouthWestGravity = 7,SouthGravity = 8,};
enum MACRO_UnmapNotifyEvent {lbxsz_UnmapNotifyEvent = 16,lbxupsz_UnmapNotifyEvent = 13,};
enum MACRO_VisibilityNotify {VisibilityNotify = 15,CreateNotify = 16,};
enum MACRO_XF86MiscNoModule {XF86MiscNoModule = 7,XF86MiscNumberErrors = 8,};
enum MACRO_XIAttachToMaster {XIAttachToMaster = 1,XIFloating = 2,};
enum MACRO_XIGrabtypeButton {XIGrabtypeButton = 0,XIGrabtypeKeycode = 1,XIGrabtypeEnter = 2,};
enum MACRO_XIMHotKeyStateON {XIMHotKeyStateON = 0x1,XIMHotKeyStateOFF = 0x2,};
enum MACRO_XINotifyAncestor {XINotifyAncestor = 0,XINotifyVirtual = 1,XINotifyInferior = 2,};
enum MACRO_XI_DeviceChanged {XI_DeviceChanged = 1,XI_KeyPress = 2,XI_KeyRelease = 3,XI_ButtonPress = 4,XI_ButtonRelease = 5,XI_Motion = 6,XI_Enter = 7,XI_Leave = 8,XI_FocusIn = 9,XI_FocusOut = 10,XI_HierarchyChanged = 11,XI_PropertyEvent = 12,XI_RawKeyPress = 13,XI_RawKeyRelease = 14,XI_RawButtonPress = 15,XI_RawButtonRelease = 16,XI_RawMotion = 17,XI_TouchBegin = 18,XI_TouchUpdate = 19,XI_TouchEnd = 20,XI_TouchOwnership = 21,XI_RawTouchBegin = 22,XI_RawTouchUpdate = 23,XI_RawTouchEnd = 24,XI_BarrierHit = 25,XI_BarrierLeave = 26,XI_LASTEVENT = 26,XI_DeviceChangedMask = 2,XI_KeyPressMask = 4,XI_KeyReleaseMask = 8,XI_ButtonPressMask = 16,XI_ButtonReleaseMask = 32,XI_MotionMask = 64,XI_EnterMask = 128,XI_LeaveMask = 256,XI_FocusInMask = 512,XI_FocusOutMask = 1024,XI_HierarchyChangedMask = 2048,XI_PropertyEventMask = 4096,XI_RawKeyPressMask = 8192,XI_RawKeyReleaseMask = 16384,XI_RawButtonPressMask = 32768,XI_RawButtonReleaseMask = 65536,XI_RawMotionMask = 131072,XI_TouchBeginMask = 262144,XI_TouchEndMask = 1048576,XI_TouchUpdateMask = 524288,XI_RawTouchBeginMask = 4194304,XI_RawTouchEndMask = 16777216,XI_RawTouchUpdateMask = 8388608,XI_BarrierHitMask = 33554432,XI_BarrierLeaveMask = 67108864,};
enum MACRO_XRecordEndOfData {XRecordEndOfData = 5,};
enum MACRO_XSecurityTimeout {XSecurityTimeout = 1,XSecurityTrustLevel = 2,XSecurityGroup = 4,XSecurityEventMask = 8,};
enum MACRO_X_DPMSGetVersion {X_DPMSGetVersion = 0,X_DPMSCapable = 1,X_DPMSGetTimeouts = 2,X_DPMSSetTimeouts = 3,X_DPMSEnable = 4,X_DPMSDisable = 5,X_DPMSForceLevel = 6,X_DPMSInfo = 7,};
enum MACRO_X_GEQueryVersion {X_GEQueryVersion = 0,};
enum MACRO_X_RRGetProviders {X_RRGetProviders = 32,X_RRGetProviderInfo = 33,X_RRSetProviderOffloadSink = 34,X_RRSetProviderOutputSource = 35,X_RRListProviderProperties = 36,X_RRQueryProviderProperty = 37,X_RRConfigureProviderProperty = 38,X_RRChangeProviderProperty = 39,X_RRDeleteProviderProperty = 40,X_RRGetProviderProperty = 41,};
enum MACRO_X_RRQueryVersion {X_RRQueryVersion = 0,X_RROldGetScreenInfo = 1,X_RR1_0SetScreenConfig = 2,X_RRSetScreenConfig = 2,X_RROldScreenChangeSelectInput = 3,X_RRSelectInput = 4,X_RRGetScreenInfo = 5,X_RRGetScreenSizeRange = 6,X_RRSetScreenSize = 7,X_RRGetScreenResources = 8,X_RRGetOutputInfo = 9,X_RRListOutputProperties = 10,X_RRQueryOutputProperty = 11,X_RRConfigureOutputProperty = 12,X_RRChangeOutputProperty = 13,X_RRDeleteOutputProperty = 14,X_RRGetOutputProperty = 15,X_RRCreateMode = 16,X_RRDestroyMode = 17,X_RRAddOutputMode = 18,X_RRDeleteOutputMode = 19,X_RRGetCrtcInfo = 20,X_RRSetCrtcConfig = 21,X_RRGetCrtcGammaSize = 22,X_RRGetCrtcGamma = 23,X_RRSetCrtcGamma = 24,X_RRGetScreenResourcesCurrent = 25,X_RRSetCrtcTransform = 26,X_RRGetCrtcTransform = 27,X_RRGetPanning = 28,X_RRSetPanning = 29,X_RRSetOutputPrimary = 30,X_RRGetOutputPrimary = 31,};
enum MACRO_X_SyncInitialize {X_SyncInitialize = 0,X_SyncListSystemCounters = 1,X_SyncCreateCounter = 2,X_SyncSetCounter = 3,X_SyncChangeCounter = 4,X_SyncQueryCounter = 5,X_SyncDestroyCounter = 6,X_SyncAwait = 7,X_SyncCreateAlarm = 8,X_SyncChangeAlarm = 9,X_SyncQueryAlarm = 10,X_SyncDestroyAlarm = 11,X_SyncSetPriority = 12,X_SyncGetPriority = 13,X_SyncCreateFence = 14,X_SyncTriggerFence = 15,X_SyncResetFence = 16,X_SyncDestroyFence = 17,X_SyncQueryFence = 18,X_SyncAwaitFence = 19,};
enum MACRO_X_XIQueryPointer {X_XIQueryPointer = 40,X_XIWarpPointer = 41,X_XIChangeCursor = 42,X_XIChangeHierarchy = 43,X_XISetClientPointer = 44,X_XIGetClientPointer = 45,X_XISelectEvents = 46,X_XIQueryVersion = 47,X_XIQueryDevice = 48,X_XISetFocus = 49,X_XIGetFocus = 50,X_XIGrabDevice = 51,X_XIUngrabDevice = 52,X_XIAllowEvents = 53,X_XIPassiveGrabDevice = 54,X_XIPassiveUngrabDevice = 55,X_XIListProperties = 56,X_XIChangeProperty = 57,X_XIDeleteProperty = 58,X_XIGetProperty = 59,X_XIGetSelectedEvents = 60,X_XIBarrierReleasePointer = 61,};
enum MACRO_X_kbUseExtension {X_kbUseExtension = 0,X_kbSelectEvents = 1,X_kbBell = 3,X_kbGetState = 4,X_kbLatchLockState = 5,X_kbGetControls = 6,X_kbSetControls = 7,X_kbGetMap = 8,X_kbSetMap = 9,X_kbGetCompatMap = 10,X_kbSetCompatMap = 11,X_kbGetIndicatorState = 12,X_kbGetIndicatorMap = 13,X_kbSetIndicatorMap = 14,X_kbGetNamedIndicator = 15,X_kbSetNamedIndicator = 16,X_kbGetNames = 17,X_kbSetNames = 18,X_kbGetGeometry = 19,X_kbSetGeometry = 20,X_kbPerClientFlags = 21,X_kbListComponents = 22,X_kbGetKbdByName = 23,X_kbGetDeviceInfo = 24,X_kbSetDeviceInfo = 25,X_kbSetDebuggingFlags = 101,};
enum MACRO_XagNsingleScreen {XagNsingleScreen = 7,};
enum MACRO_XagWindowTypeX11 {XagWindowTypeX11 = 0,XagWindowTypeMacintosh = 1,XagWindowTypeWin32 = 2,};
enum MACRO_XcupNumberErrors {XcupNumberErrors = 0,};
enum MACRO_XkbAccessXNotify {XkbAccessXNotify = 10,};
enum MACRO_XkbActionMessage {XkbActionMessage = 9,};
enum MACRO_XkbAllCompatMask {XkbAllCompatMask = 0x3,};
enum MACRO_XkbAllEventsMask {XkbAllEventsMask = 0xFFF,};
enum MACRO_XkbAllGroupsMask {XkbAllGroupsMask = 0xF,};
enum MACRO_XkbClientMapMask {XkbClientMapMask = 1,XkbServerMapMask = 2,XkbCompatMapMask = 4,XkbIndicatorMapMask = 8,XkbNamesMask = 16,XkbGeometryMask = 32,XkbControlsMask = 64,};
enum MACRO_XkbKeyNameLength {XkbKeyNameLength = 4,XkbMaxRedirectCount = 8,};
enum MACRO_XkbMaxShiftLevel {XkbMaxShiftLevel = 63,};
enum MACRO_XkbMaxSymsPerKey {XkbMaxSymsPerKey = 252,};
enum MACRO_XkbOneLevelIndex {XkbOneLevelIndex = 0,XkbTwoLevelIndex = 1,XkbAlphabeticIndex = 2,};
enum MACRO_XkbSymInterpMask {XkbSymInterpMask = 1,XkbGroupCompatMask = 2,};
enum MACRO_XkbUnknownDoodad {XkbUnknownDoodad = 0,XkbOutlineDoodad = 1,XkbSolidDoodad = 2,};
enum MACRO_XkbWrapIntoRange {XkbWrapIntoRange = 0x0,XkbClampIntoRange = 0x40,XkbRedirectIntoRange = 0x80,};
enum MACRO_XlibDisplayReply {XlibDisplayReply = 32,XlibDisplayWriting = 64,XlibDisplayDfltRMDB = 128,};
enum MACRO_XrmEnumAllLevels {XrmEnumAllLevels = 0,XrmEnumOneLevel = 1,};
enum MACRO__BITS_SIGCONTEXT {_BITS_SIGCONTEXT_H = 1,};
enum MACRO__LINUX_NETFILTER {_LINUX_NETFILTER_XT_IPRANGE_H = 1,};
enum MACRO__PROTOCOLS_TALKD {_PROTOCOLS_TALKD_H = 1,};
enum MACRO__PROTOCOLS_TIMED {_PROTOCOLS_TIMED_H = 1,};
enum MACRO_sz_xDirectFormat {sz_xDirectFormat = 16,sz_xPictFormInfo = 28,sz_xPictVisual = 8,sz_xPictDepth = 8,sz_xPictScreen = 8,sz_xIndexValue = 12,sz_xRenderColor = 8,sz_xPointFixed = 8,sz_xLineFixed = 16,sz_xTriangle = 24,sz_xTrapezoid = 40,sz_xGlyphInfo = 12,sz_xGlyphElt = 8,sz_xSpanFix = 12,sz_xTrap = 24,sz_xRenderQueryVersionReq = 12,sz_xRenderQueryVersionReply = 32,sz_xRenderQueryPictFormatsReq = 4,sz_xRenderQueryPictFormatsReply = 32,sz_xRenderQueryPictIndexValuesReq = 8,sz_xRenderQueryPictIndexValuesReply = 32,sz_xRenderCreatePictureReq = 20,sz_xRenderChangePictureReq = 12,sz_xRenderSetPictureClipRectanglesReq = 12,sz_xRenderFreePictureReq = 8,sz_xRenderCompositeReq = 36,sz_xRenderScaleReq = 32,sz_xRenderTrapezoidsReq = 24,sz_xRenderTrianglesReq = 24,sz_xRenderTriStripReq = 24,sz_xRenderTriFanReq = 24,sz_xRenderCreateGlyphSetReq = 12,sz_xRenderReferenceGlyphSetReq = 24,sz_xRenderFreeGlyphSetReq = 8,sz_xRenderAddGlyphsReq = 12,sz_xRenderFreeGlyphsReq = 8,sz_xRenderCompositeGlyphs8Req = 28,sz_xRenderCompositeGlyphs16Req = 28,sz_xRenderCompositeGlyphs32Req = 28,sz_xRenderFillRectanglesReq = 20,sz_xRenderCreateCursorReq = 16,sz_xRenderTransform = 36,sz_xRenderSetPictureTransformReq = 44,sz_xRenderQueryFiltersReq = 8,sz_xRenderQueryFiltersReply = 32,sz_xRenderSetPictureFilterReq = 12,sz_xAnimCursorElt = 8,sz_xRenderCreateAnimCursorReq = 8,sz_xRenderAddTrapsReq = 12,sz_xRenderCreateSolidFillReq = 16,sz_xRenderCreateLinearGradientReq = 28,sz_xRenderCreateRadialGradientReq = 36,sz_xRenderCreateConicalGradientReq = 24,sz_xScreenSizes = 8,sz_xRRQueryVersionReq = 12,sz_xRRQueryVersionReply = 32,sz_xRRGetScreenInfoReq = 8,sz_xRRGetScreenInfoReply = 32,sz_xRR1_0SetScreenConfigReq = 20,sz_xRRSetScreenConfigReq = 24,sz_xRRSetScreenConfigReply = 32,sz_xRRSelectInputReq = 12,sz_xRRModeInfo = 32,sz_xRRGetScreenSizeRangeReq = 8,sz_xRRGetScreenSizeRangeReply = 32,sz_xRRSetScreenSizeReq = 20,sz_xRRGetScreenResourcesReq = 8,sz_xRRGetScreenResourcesReply = 32,sz_xRRGetOutputInfoReq = 12,sz_xRRGetOutputInfoReply = 36,sz_xRRListOutputPropertiesReq = 8,sz_xRRListOutputPropertiesReply = 32,sz_xRRQueryOutputPropertyReq = 12,sz_xRRQueryOutputPropertyReply = 32,sz_xRRConfigureOutputPropertyReq = 16,sz_xRRChangeOutputPropertyReq = 24,sz_xRRDeleteOutputPropertyReq = 12,sz_xRRGetOutputPropertyReq = 28,sz_xRRGetOutputPropertyReply = 32,sz_xRRCreateModeReq = 40,sz_xRRCreateModeReply = 32,sz_xRRDestroyModeReq = 8,sz_xRRAddOutputModeReq = 12,sz_xRRDeleteOutputModeReq = 12,sz_xRRGetCrtcInfoReq = 12,sz_xRRGetCrtcInfoReply = 32,sz_xRRSetCrtcConfigReq = 28,sz_xRRSetCrtcConfigReply = 32,sz_xRRGetCrtcGammaSizeReq = 8,sz_xRRGetCrtcGammaSizeReply = 32,sz_xRRGetCrtcGammaReq = 8,sz_xRRGetCrtcGammaReply = 32,sz_xRRSetCrtcGammaReq = 12,sz_xRRGetScreenResourcesCurrentReq = 8,sz_xRRGetScreenResourcesCurrentReply = 32,sz_xRRSetCrtcTransformReq = 48,sz_xRRGetCrtcTransformReq = 8,sz_xRRGetCrtcTransformReply = 96,sz_xRRSetOutputPrimaryReq = 12,sz_xRRGetOutputPrimaryReq = 8,sz_xRRGetOutputPrimaryReply = 32,sz_xRRGetProvidersReq = 8,sz_xRRGetProvidersReply = 32,sz_xRRGetProviderInfoReq = 12,sz_xRRGetProviderInfoReply = 32,sz_xRRSetProviderOutputSourceReq = 16,sz_xRRSetProviderOffloadSinkReq = 16,sz_xRRListProviderPropertiesReq = 8,sz_xRRListProviderPropertiesReply = 32,sz_xRRQueryProviderPropertyReq = 12,sz_xRRQueryProviderPropertyReply = 32,sz_xRRConfigureProviderPropertyReq = 16,sz_xRRChangeProviderPropertyReq = 24,sz_xRRDeleteProviderPropertyReq = 12,sz_xRRGetProviderPropertyReq = 28,sz_xRRGetProviderPropertyReply = 32,sz_xRRScreenChangeNotifyEvent = 32,sz_xRRCrtcChangeNotifyEvent = 32,sz_xRROutputChangeNotifyEvent = 32,sz_xRROutputPropertyNotifyEvent = 32,sz_xRRProviderChangeNotifyEvent = 32,sz_xRRProviderPropertyNotifyEvent = 32,sz_xRRResourceChangeNotifyEvent = 32,sz_xRRGetPanningReq = 8,sz_xRRGetPanningReply = 36,sz_xRRSetPanningReq = 36,sz_xRRSetPanningReply = 32,};
enum MACRO_sz_xXagCreateReq {sz_xXagCreateReq = 12,sz_xXagDestroyReq = 8,sz_xXagGetAttrReq = 8,sz_xXagGetAttrReply = 32,sz_xXagQueryReq = 8,sz_xXagQueryReply = 32,sz_xXagCreateAssocReq = 12,sz_xXagDestroyAssocReq = 8,};
typedef struct _3B8E4E23B9740784A6100A2DE9D445C8 XCirculateRequestEvent;
typedef struct _801F83CB04C22E52C720D7D622E0E540 XConfigureRequestEvent;
typedef struct _548F59098DBA4939E643BBEF2AD26EEA XSelectionRequestEvent;
typedef struct _XkbControlsNotify XkbControlsNotifyEvent;
typedef struct _XkbDeviceLedChanges *XkbDeviceLedChangesPtr;
typedef struct _XkbDeviceLedChanges XkbDeviceLedChangesRec;
typedef struct _XkbIndicatorChanges *XkbIndicatorChangesPtr;
typedef struct _XkbIndicatorChanges XkbIndicatorChangesRec;
struct _XkbSwitchScreenAction {unsigned __int8 type;unsigned __int8 flags;char screenXXX;};
typedef int (*__gconv_trans_init_fct)(void **, const char *);
struct __libc_rwlock_opaque__;
typedef struct _6105F69743B5F4DC3D2725A2474E8E7A __pthread_unwind_buf_t;
enum atscmh_sccc_block_mode {ATSCMH_SCCC_BLK_SEP = 0x0,ATSCMH_SCCC_BLK_COMB = 0x1,ATSCMH_SCCC_BLK_RES = 0x2,};
struct changer_element_status {int ces_type;unsigned __int8 *ces_data;};
enum ctattr_timeout_generic {CTA_TIMEOUT_GENERIC_UNSPEC = 0x0,CTA_TIMEOUT_GENERIC_TIMEOUT = 0x1,__CTA_TIMEOUT_GENERIC_MAX = 0x2,};
enum ctattr_timeout_udplite {CTA_TIMEOUT_UDPLITE_UNSPEC = 0x0,CTA_TIMEOUT_UDPLITE_UNREPLIED = 0x1,CTA_TIMEOUT_UDPLITE_REPLIED = 0x2,__CTA_TIMEOUT_UDPLITE_MAX = 0x3,};
enum ctnl_timeout_msg_types {IPCTNL_MSG_TIMEOUT_NEW = 0x0,IPCTNL_MSG_TIMEOUT_GET = 0x1,IPCTNL_MSG_TIMEOUT_DELETE = 0x2,IPCTNL_MSG_TIMEOUT_MAX = 0x3,};
typedef struct _A4EF4A77E40471EF410BD1BFBD9E090A deviceKeyButtonPointer;
enum fc_els_rps_resp_status {FC_ELS_RPS_PTP = 0x20,FC_ELS_RPS_LOOP = 0x10,FC_ELS_RPS_FAB = 0x8,FC_ELS_RPS_NO_SIG = 0x4,FC_ELS_RPS_NO_SYNC = 0x2,FC_ELS_RPS_RESET = 0x1,};
struct hdlcdrv_channel_params {int tx_delay;int tx_tail;int slottime;int ppersist;int fulldup;};
enum hdspm_ltc_input_format {ntsc = 0x0,pal = 0x1,no_video = 0x2,};
struct ioctl_evtchn_bind_virq {unsigned int virq;};
struct iso_primary_descriptor {char type[1];char id[5];char version[1];char unused1[1];char system_id[32];char volume_id[32];char unused2[8];char volume_space_size[8];char unused3[32];char volume_set_size[4];char volume_sequence_number[4];char logical_block_size[4];char path_table_size[8];char type_l_path_table[4];char opt_type_l_path_table[4];char type_m_path_table[4];char opt_type_m_path_table[4];char root_directory_record[34];char volume_set_id[128];char publisher_id[128];char preparer_id[128];char application_id[128];char copyright_file_id[37];char abstract_file_id[37];char bibliographic_file_id[37];char creation_date[17];char modification_date[17];char expiration_date[17];char effective_date[17];char file_structure_version[1];char unused4[1];char application_data[512];char unused5[653];};
enum nf_ip6_hook_priorities {NF_IP6_PRI_FIRST = 0x80000000,NF_IP6_PRI_CONNTRACK_DEFRAG = 0xFFFFFE70,NF_IP6_PRI_RAW = 0xFFFFFED4,NF_IP6_PRI_SELINUX_FIRST = 0xFFFFFF1F,NF_IP6_PRI_CONNTRACK = 0xFFFFFF38,NF_IP6_PRI_MANGLE = 0xFFFFFF6A,NF_IP6_PRI_NAT_DST = 0xFFFFFF9C,NF_IP6_PRI_FILTER = 0x0,NF_IP6_PRI_SECURITY = 0x32,NF_IP6_PRI_NAT_SRC = 0x64,NF_IP6_PRI_SELINUX_LAST = 0xE1,NF_IP6_PRI_CONNTRACK_HELPER = 0x12C,NF_IP6_PRI_LAST = 0x7FFFFFFF,};
enum nfulnl_msg_config_cmds {NFULNL_CFG_CMD_NONE = 0x0,NFULNL_CFG_CMD_BIND = 0x1,NFULNL_CFG_CMD_UNBIND = 0x2,NFULNL_CFG_CMD_PF_BIND = 0x3,NFULNL_CFG_CMD_PF_UNBIND = 0x4,};
enum omap3isp_h3a_af_fvmode {OMAP3ISP_AF_MODE_SUMMED = 0x0,OMAP3ISP_AF_MODE_PEAK = 0x1,};
enum omap3isp_h3a_af_rgbpos {OMAP3ISP_AF_GR_GB_BAYER = 0x0,OMAP3ISP_AF_RG_GB_BAYER = 0x1,OMAP3ISP_AF_GR_BG_BAYER = 0x2,OMAP3ISP_AF_RG_BG_BAYER = 0x3,OMAP3ISP_AF_GG_RB_CUSTOM = 0x4,OMAP3ISP_AF_RB_GG_CUSTOM = 0x5,};
typedef struct _BC21E3DCA2DEF6CD8EB07ED07E074597 pmGetProxyAddrReplyMsg;
typedef void printf_va_arg_function(void *mem, va_list *ap);
struct serial_icounter_struct {int cts;int dsr;int rng;int dcd;int rx;int tx;int frame;int overrun;int parity;int brk;int buf_overrun;int reserved[9];};
enum v4l2_exposure_metering {V4L2_EXPOSURE_METERING_AVERAGE = 0x0,V4L2_EXPOSURE_METERING_CENTER_WEIGHTED = 0x1,V4L2_EXPOSURE_METERING_SPOT = 0x2,V4L2_EXPOSURE_METERING_MATRIX = 0x3,};
enum v4l2_mpeg_video_aspect {V4L2_MPEG_VIDEO_ASPECT_1x1 = 0x0,V4L2_MPEG_VIDEO_ASPECT_4x3 = 0x1,V4L2_MPEG_VIDEO_ASPECT_16x9 = 0x2,V4L2_MPEG_VIDEO_ASPECT_221x100 = 0x3,};
typedef struct _44DBA8761062EA5D0E0445C058A5F0FB xAllocColorPlanesReply;
typedef struct _5F0218706A29D3B501048FD21A470406 xDMXGetInputCountReply;
typedef struct _E011BF1EAEBA58EFCBDC3D43230C2DBF xDRI2AuthenticateReply;
typedef struct _95AD98905D37F3C4828B107878AF9BCB xDRI2CreateDrawableReq;
typedef struct _4F69801DA156947B017328D4DF73EF11 xDRI2InvalidateBuffers;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xDRI2QueryVersionReply;
typedef struct _B269B0A5851D241ECE7A73512E496A13 xDamageQueryVersionReq;
typedef struct _41C7698D6770F38A993CF1591C6D9C21 xDbeGetVisualInfoReply;
typedef struct _2C268D9809C6E9DE2B818A0BB7518C2E xDeviceResolutionState;
typedef struct _XEVIGetVisualInfoReply xEVIGetVisualInfoReply;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xGetDeviceControlReply;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetFeedbackControlReq;
typedef struct _9A79A86C67FC8B79D589DEFE9BCD3BC9 xGetKeyboardMappingReq;
typedef struct _LbxEndLargeRequest xLbxEndLargeRequestReq;
typedef struct _LbxInvalidateTagEvent xLbxInvalidateTagEvent;
typedef struct _38BC431CF83E096863532D796A6E7F77 xListInputDevicesReply;
typedef struct _32EEA813D9DAD40A14F6989D3C5227A8 xMbufUpdateNotifyEvent;
typedef struct _19958847318214F780EFE5EAB3B1A0C9 xQueryDeviceStateReply;
typedef struct _C30FF1240D2A8075F6967DECC9305E3F xQueryTextExtentsReply;
typedef struct _B818E9DF3118804B08A86ECE79240C1A xRRDeleteOutputModeReq;
typedef struct _6C1CA9801472DA3CC516BCC310DA8AB0 xRRGetCrtcGammaSizeReq;
typedef struct _6C1CA9801472DA3CC516BCC310DA8AB0 xRRGetCrtcTransformReq;
typedef struct _0A710E56E462CA6F472C6BEF95652ED5 xRRGetOutputPrimaryReq;
typedef struct _096B79C2878CB1494F01039365F649CF xRRSetCrtcTransformReq;
typedef struct _3DF25DAA63A6E3C01476C2ACB580EE52 xRRSetOutputPrimaryReq;
typedef struct _3208E1BA8126707DC1A488F29A0DED72 xRecordGetContextReply;
typedef struct _AAD257271AAA9A190B14D3482C45D035 xRecordQueryVersionReq;
typedef struct _3E53CB2ED1FED691C94CE793AD197BA2 xRenderCreateCursorReq;
typedef struct _2AC87F894EE3258143DDE890FCFACB0D xRenderFreeGlyphSetReq;
typedef struct _89C19CA17CD4EE2490EC1EBDB53AA079 xRenderQueryFiltersReq;
typedef struct _1ACEBBD1BA76D1519A3D809460AEA55C xRenderQueryVersionReq;
typedef struct _ScreenSaverSuspend xScreenSaverSuspendReq;
typedef struct _2A859DA02CD5E3593B5918B42FA7FFEB xSendExtensionEventReq;
typedef struct _29C593C589279C3E7D511580F3E78129 xSetDeviceValuatorsReq;
typedef struct _F1472F09D9F4F4B2B771740E265DAEF8 xSetModifierMappingReq;
typedef struct _ShapeGetRectangles xShapeGetRectanglesReq;
typedef struct _ShapeInputSelected xShapeInputSelectedReq;
typedef struct _xSyncDestroyCounterReq xSyncDestroyCounterReq;
typedef struct _B4654CD279B33E607B3273E64CC6A8CF xSyncQueryCounterReply;
typedef struct _5CD0DDA75FC8A64FD62E45433429A157 xTestQueryInputSizeReq;
typedef struct _AC93509FFB6B9C1B98C9154A5D973C79 xUngrabDeviceButtonReq;
typedef struct _DA732864DAD897F0B587BCCAD8E078EE xXCMiscGetVersionReply;
typedef struct _896D23E0DCE5181A858CD1FDEDFC63B0 xXCMiscGetXIDListReply;
typedef struct _XDGACreateColormap xXDGACreateColormapReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXDGAQueryVersionReply;
typedef struct _XF86DGADirectVideo xXF86DGADirectVideoReq;
typedef struct _XF86DGASetViewPort xXF86DGASetViewPortReq;
typedef struct _5EC50BA61A7AE0BB02D4340472A7D806 xXFixesChangeCursorReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesCreateRegionReq;
typedef struct _9E1D181561E0D2ACA87E09ABA7C14355 xXFixesExpandRegionReq;
typedef struct _0D1FFF2FD08E009A212466AD439E256D xXFixesInvertRegionReq;
typedef struct _5ED203E6BF1B06D8F06879722F6B66D4 xXFixesQueryVersionReq;
typedef struct _4FE6F5ECACFA93E764B6E0B251EFE623 xXIGetClientPointerReq;
typedef struct _D51E2BFC694F46296AEDCFF248667504 xXIListPropertiesReply;
typedef struct _AE0B01F07923BA2B607EE52A3BD72CF8 xXISetClientPointerReq;
typedef struct _129AE17A1813221886388BE0CE8ED06D xXITouchOwnershipEvent;
typedef struct _XResQueryClientIds xXResQueryClientIdsReq;
typedef struct _2E963936DF2C8EEC00CED466180278DB xXResQueryClientsReply;
typedef struct _70AE50C60636BA34AE17DCBE089831D2 xXResQueryVersionReply;
typedef struct _XResResourceSizeValue xXResResourceSizeValue;
typedef struct _B09B64BCB86C923CE64AD6544D183118 xXTestCompareCursorReq;
typedef struct _EFD6C7D4777DD13E0B1CDD145692A98C xXcupQueryVersionReply;
typedef struct _322E4D740D2A723112F8227414848916 xXevieSelectInputReply;
typedef struct _2DE9659B7EEC2253521CC6BF2372B999 xXineramaIsActiveReply;
enum xcb_auto_repeat_mode_t {XCB_AUTO_REPEAT_MODE_OFF = 0x0,XCB_AUTO_REPEAT_MODE_ON = 0x1,XCB_AUTO_REPEAT_MODE_DEFAULT = 0x2,};
struct xcb_dpms_info_cookie_t {unsigned int sequence;};
enum xcb_dri2_driver_type_t {XCB_DRI2_DRIVER_TYPE_DRI = 0x0,XCB_DRI2_DRIVER_TYPE_VDPAU = 0x1,};
typedef struct _038B891F4881F16F541AE58F6D49FAEC xcb_generic_iterator_t;
struct xcb_get_image_cookie_t {unsigned int sequence;};
enum xcb_input_device_use_t {XCB_INPUT_DEVICE_USE_IS_X_POINTER = 0x0,XCB_INPUT_DEVICE_USE_IS_X_KEYBOARD = 0x1,XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_DEVICE = 0x2,XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_KEYBOARD = 0x3,XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_POINTER = 0x4,};
typedef struct _3A28C96D52FB29F9635C6203D2891B70 xcb_protocol_request_t;
enum xcb_randr_connection_t {XCB_RANDR_CONNECTION_CONNECTED = 0x0,XCB_RANDR_CONNECTION_DISCONNECTED = 0x1,XCB_RANDR_CONNECTION_UNKNOWN = 0x2,};
enum xcb_randr_set_config_t {XCB_RANDR_SET_CONFIG_SUCCESS = 0x0,XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME = 0x1,XCB_RANDR_SET_CONFIG_INVALID_TIME = 0x2,XCB_RANDR_SET_CONFIG_FAILED = 0x3,};
enum xcb_render_pict_type_t {XCB_RENDER_PICT_TYPE_INDEXED = 0x0,XCB_RENDER_PICT_TYPE_DIRECT = 0x1,};
enum xcb_render_poly_edge_t {XCB_RENDER_POLY_EDGE_SHARP = 0x0,XCB_RENDER_POLY_EDGE_SMOOTH = 0x1,};
enum xcb_render_poly_mode_t {XCB_RENDER_POLY_MODE_PRECISE = 0x0,XCB_RENDER_POLY_MODE_IMPRECISE = 0x1,};
enum xcb_render_sub_pixel_t {XCB_RENDER_SUB_PIXEL_UNKNOWN = 0x0,XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB = 0x1,XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR = 0x2,XCB_RENDER_SUB_PIXEL_VERTICAL_RGB = 0x3,XCB_RENDER_SUB_PIXEL_VERTICAL_BGR = 0x4,XCB_RENDER_SUB_PIXEL_NONE = 0x5,};
enum xcb_screensaver_kind_t {XCB_SCREENSAVER_KIND_BLANKED = 0x0,XCB_SCREENSAVER_KIND_INTERNAL = 0x1,XCB_SCREENSAVER_KIND_EXTERNAL = 0x2,};
struct xcb_segment_iterator_t {xcb_segment_t *data;int rem;int index;};
struct xcb_xevie_end_cookie_t {unsigned int sequence;};
struct xcb_xkb_key_iterator_t {xcb_xkb_key_t *data;int rem;int index;};
struct xcb_xkb_row_iterator_t {xcb_xkb_row_t *data;int rem;int index;};
enum xcb_xkb_set_of_group_t {XCB_XKB_SET_OF_GROUP_GROUP_1 = 0x1,XCB_XKB_SET_OF_GROUP_GROUP_2 = 0x2,XCB_XKB_SET_OF_GROUP_GROUP_3 = 0x4,XCB_XKB_SET_OF_GROUP_GROUP_4 = 0x8,};
typedef struct _xkbListComponentsReply xkbListComponentsReply;
typedef struct _xkbPerClientFlagsReply xkbPerClientFlagsReply;
typedef struct _xkbShapeDoodadWireDesc xkbShapeDoodadWireDesc;
enum xt_connbytes_direction {XT_CONNBYTES_DIR_ORIGINAL = 0x0,XT_CONNBYTES_DIR_REPLY = 0x1,XT_CONNBYTES_DIR_BOTH = 0x2,};
enum xt_rateest_match_flags {XT_RATEEST_MATCH_INVERT = 0x1,XT_RATEEST_MATCH_ABS = 0x2,XT_RATEEST_MATCH_REL = 0x4,XT_RATEEST_MATCH_DELTA = 0x8,XT_RATEEST_MATCH_BPS = 0x10,XT_RATEEST_MATCH_PPS = 0x20,};
typedef struct _9C9793AFB485CBCDC1723AA9DA7467C7 xvSelectVideoNotifyReq;
typedef struct _01D78593398EF5D4C7B0D882F4AC2769 xvmcCreateContextReply;
typedef struct _04D0ADC31935FE4C3A858C08EAEE2E45 xvmcCreateSurfaceReply;
typedef struct _EBA61ABD6EAEDF513D00140FC4172EAC Dwarf_Cmdline_Options;
typedef struct Dwarf_Regtable_Entry3_s Dwarf_Regtable_Entry3;
typedef struct Dwarf_Relocation_Data_s *Dwarf_Relocation_Data;
enum MACRO_AnyPropertyType {AnyPropertyType = 0,};
enum MACRO_AsyncThisDevice {AsyncThisDevice = 0,SyncThisDevice = 1,ReplayThisDevice = 2,};
enum MACRO_CDROMPLAYTRKIND {CDROMPLAYTRKIND = 0x5304,};
enum MACRO_CDROMREADCOOKED {CDROMREADCOOKED = 0x5315,};
enum MACRO_CDROMREADTOCHDR {CDROMREADTOCHDR = 0x5305,};
enum MACRO_CILEN_PREDICTOR {CILEN_PREDICTOR_1 = 2,};
enum MACRO_CYGETDEFTIMEOUT {CYGETDEFTIMEOUT = 0x435908,};
enum MACRO_CYSETDEFTIMEOUT {CYSETDEFTIMEOUT = 0x435909,};
enum MACRO_CYZGETPOLLCYCLE {CYZGETPOLLCYCLE = 0x43590F,};
enum MACRO_CYZSETPOLLCYCLE {CYZSETPOLLCYCLE = 0x43590E,};
enum MACRO_CirculateNotify {CirculateNotify = 26,};
enum MACRO_ConfigureNotify {ConfigureNotify = 22,};
enum MACRO_CoordModeOrigin {CoordModeOrigin = 0,CoordModePrevious = 1,};
enum MACRO_DMXDesktopWidth {DMXDesktopWidth = 1,DMXDesktopHeight = 2,DMXDesktopShiftX = 4,DMXDesktopShiftY = 8,};
enum MACRO_DRI2BufferAccum {DRI2BufferAccum = 6,};
enum MACRO_DbeNumberEvents {DbeNumberEvents = 0,};
enum MACRO_ETHERTYPE_TRAIL {ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_EnterLeaveEvent {lbxsz_EnterLeaveEvent = 32,lbxupsz_EnterLeaveEvent = 32,};
enum MACRO_FamilyInternet6 {FamilyInternet6 = 6,};
enum MACRO_FamilyLocalHost {FamilyLocalHost = 252,};
enum MACRO_FilterAliasNone {FilterAliasNone = -1,};
enum MACRO_FontLeftToRight {FontLeftToRight = 0,FontRightToLeft = 1,};
enum MACRO_GLYPHPADOPTIONS {GLYPHPADOPTIONS = 4,};
enum MACRO_GrabNotViewable {GrabNotViewable = 3,GrabFrozen = 4,};
enum MACRO_INADDR_LOOPBACK {INADDR_LOOPBACK = 0x7F000001,INADDR_UNSPEC_GROUP = 0xE0000000,INADDR_ALLHOSTS_GROUP = 0xE0000001,INADDR_ALLRTRS_GROUP = 0xE0000002,INADDR_MAX_LOCAL_GROUP = 0xE00000FF,};
enum MACRO_K8_MTRRFIXRANGE {K8_MTRRFIXRANGE_DRAM_ENABLE = 0x40000,K8_MTRRFIXRANGE_DRAM_MODIFY = 0x80000,K8_MTRR_RDMEM_WRMEM_MASK = 0x18181818,};
enum MACRO_KEYCHECKSUMSIZE {KEYCHECKSUMSIZE = 16,};
enum MACRO_MIXER_PORT_POTS {MIXER_PORT_POTS_PLAY = 0xF00,};
enum MACRO_MapRequestEvent {lbxsz_MapRequestEvent = 12,lbxupsz_MapRequestEvent = 12,};
enum MACRO_MappingModifier {MappingModifier = 0,MappingKeyboard = 1,MappingPointer = 2,};
enum MACRO_NoSuchExtension {NoSuchExtension = 1,};
enum MACRO_NotifyNonlinear {NotifyNonlinear = 3,NotifyNonlinearVirtual = 4,};
enum MACRO_PictOpColorBurn {PictOpColorBurn = 0x36,};
enum MACRO_PictOpExclusion {PictOpExclusion = 0x3A,};
enum MACRO_PictOpHardLight {PictOpHardLight = 0x37,};
enum MACRO_PictOpInReverse {PictOpInReverse = 6,};
enum MACRO_PictOpSoftLight {PictOpSoftLight = 0x38,};
enum MACRO_PictTypeIndexed {PictTypeIndexed = 0,PictTypeDirect = 1,};
enum MACRO_PolyModePrecise {PolyModePrecise = 0,PolyModeImprecise = 1,};
enum MACRO_PropModeReplace {PropModeReplace = 0,PropModePrepend = 1,PropModeAppend = 2,};
enum MACRO_RPCSMALLMSGSIZE {RPCSMALLMSGSIZE = 400,};
enum MACRO_RRTransformUnit {RRTransformUnit = 1,RRTransformScaleUp = 2,RRTransformScaleDown = 4,RRTransformProjective = 8,};
enum MACRO_RSTATVERS_SWTCH {RSTATVERS_SWTCH = 2,RSTATVERS_ORIG = 1,};
enum MACRO_RecordNumEvents {RecordNumEvents = 0,XRecordFromServerTime = 1,XRecordFromClientTime = 2,XRecordFromClientSequence = 4,};
enum MACRO_SCM_TIMESTAMPNS {SCM_TIMESTAMPNS = 35,};
enum MACRO_SIOCAX25BPQADDR {SIOCAX25BPQADDR = 35300,};
enum MACRO_SIOCAX25GETINFO {SIOCAX25GETINFO = 35305,};
enum MACRO_SIOCBONDENSLAVE {SIOCBONDENSLAVE = 0x8990,};
enum MACRO_SIOCBONDRELEASE {SIOCBONDRELEASE = 0x8991,};
enum MACRO_SIOCGCMFIRMWARE {SIOCGCMFIRMWARE = 35313,};
enum MACRO_SIOCGKEEPPERIOD {SIOCGKEEPPERIOD = 35312,};
enum MACRO_SIOCPNGETOBJECT {SIOCPNGETOBJECT = 35296,};
enum MACRO_SIOCSBPQETHADDR {SIOCSBPQETHADDR = 35313,};
enum MACRO_SIOCSKEEPPERIOD {SIOCSKEEPPERIOD = 35313,};
enum MACRO_STATUS_BUSYMASK {STATUS_BUSYMASK = 0xF,STATUS_BUSY = 0x10,STATUS_DMA = 0x20,STATUS_DIR = 0x40,STATUS_READY = 0x80,};
enum MACRO_STL_SIOMEMMAJOR {STL_SIOMEMMAJOR = 28,};
enum MACRO_SelectionNotify {SelectionNotify = 31,ColormapNotify = 32,};
enum MACRO_ShapeNotifyMask {ShapeNotifyMask = 1,};
enum MACRO_SubPixelUnknown {SubPixelUnknown = 0,SubPixelHorizontalRGB = 1,SubPixelHorizontalBGR = 2,};
enum MACRO_TIOCSERGETMULTI {TIOCSERGETMULTI = 0x545A,};
enum MACRO_TIOCSERSETMULTI {TIOCSERSETMULTI = 0x545B,};
enum MACRO_VisibilityEvent {lbxsz_VisibilityEvent = 12,lbxupsz_VisibilityEvent = 9,};
enum MACRO_WRITE_FILEMARKS {WRITE_FILEMARKS = 0x10,};
enum MACRO_XBufferOverflow {XBufferOverflow = -1,};
enum MACRO_XCB_BIGREQUESTS {XCB_BIGREQUESTS_MAJOR_VERSION = 0,XCB_BIGREQUESTS_MINOR_VERSION = 0,XCB_BIG_REQUESTS_ENABLE = 0,XCB_RENDER_MAJOR_VERSION = 0,XCB_RENDER_MINOR_VERSION = 11,XCB_RENDER_PICT_FORMAT = 0,XCB_RENDER_PICTURE = 1,XCB_RENDER_PICT_OP = 2,XCB_RENDER_GLYPH_SET = 3,XCB_RENDER_GLYPH = 4,XCB_RENDER_QUERY_VERSION = 0,XCB_RENDER_QUERY_PICT_FORMATS = 1,XCB_RENDER_QUERY_PICT_INDEX_VALUES = 2,XCB_RENDER_CREATE_PICTURE = 4,XCB_RENDER_CHANGE_PICTURE = 5,XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES = 6,XCB_RENDER_FREE_PICTURE = 7,XCB_RENDER_COMPOSITE = 8,XCB_RENDER_TRAPEZOIDS = 10,XCB_RENDER_TRIANGLES = 11,XCB_RENDER_TRI_STRIP = 12,XCB_RENDER_TRI_FAN = 13,XCB_RENDER_CREATE_GLYPH_SET = 17,XCB_RENDER_REFERENCE_GLYPH_SET = 18,XCB_RENDER_FREE_GLYPH_SET = 19,XCB_RENDER_ADD_GLYPHS = 20,XCB_RENDER_FREE_GLYPHS = 22,XCB_RENDER_COMPOSITE_GLYPHS_8 = 23,XCB_RENDER_COMPOSITE_GLYPHS_16 = 24,XCB_RENDER_COMPOSITE_GLYPHS_32 = 25,XCB_RENDER_FILL_RECTANGLES = 26,XCB_RENDER_CREATE_CURSOR = 27,XCB_RENDER_SET_PICTURE_TRANSFORM = 28,XCB_RENDER_QUERY_FILTERS = 29,XCB_RENDER_SET_PICTURE_FILTER = 30,XCB_RENDER_CREATE_ANIM_CURSOR = 31,XCB_RENDER_ADD_TRAPS = 32,XCB_RENDER_CREATE_SOLID_FILL = 33,XCB_RENDER_CREATE_LINEAR_GRADIENT = 34,XCB_RENDER_CREATE_RADIAL_GRADIENT = 35,XCB_RENDER_CREATE_CONICAL_GRADIENT = 36,XCB_SHAPE_MAJOR_VERSION = 1,XCB_SHAPE_MINOR_VERSION = 1,XCB_SHAPE_NOTIFY = 0,XCB_SHAPE_QUERY_VERSION = 0,XCB_SHAPE_RECTANGLES = 1,XCB_SHAPE_MASK = 2,XCB_SHAPE_COMBINE = 3,XCB_SHAPE_OFFSET = 4,XCB_SHAPE_QUERY_EXTENTS = 5,XCB_SHAPE_SELECT_INPUT = 6,XCB_SHAPE_INPUT_SELECTED = 7,XCB_SHAPE_GET_RECTANGLES = 8,XCB_XFIXES_MAJOR_VERSION = 4,XCB_XFIXES_MINOR_VERSION = 0,XCB_XFIXES_QUERY_VERSION = 0,XCB_XFIXES_CHANGE_SAVE_SET = 1,XCB_XFIXES_SELECTION_NOTIFY = 0,XCB_XFIXES_SELECT_SELECTION_INPUT = 2,XCB_XFIXES_CURSOR_NOTIFY = 1,XCB_XFIXES_SELECT_CURSOR_INPUT = 3,XCB_XFIXES_GET_CURSOR_IMAGE = 4,XCB_XFIXES_BAD_REGION = 0,XCB_XFIXES_CREATE_REGION = 5,XCB_XFIXES_CREATE_REGION_FROM_BITMAP = 6,XCB_XFIXES_CREATE_REGION_FROM_WINDOW = 7,XCB_XFIXES_CREATE_REGION_FROM_GC = 8,XCB_XFIXES_CREATE_REGION_FROM_PICTURE = 9,XCB_XFIXES_DESTROY_REGION = 10,XCB_XFIXES_SET_REGION = 11,XCB_XFIXES_COPY_REGION = 12,XCB_XFIXES_UNION_REGION = 13,XCB_XFIXES_INTERSECT_REGION = 14,XCB_XFIXES_SUBTRACT_REGION = 15,XCB_XFIXES_INVERT_REGION = 16,XCB_XFIXES_TRANSLATE_REGION = 17,XCB_XFIXES_REGION_EXTENTS = 18,XCB_XFIXES_FETCH_REGION = 19,XCB_XFIXES_SET_GC_CLIP_REGION = 20,XCB_XFIXES_SET_WINDOW_SHAPE_REGION = 21,XCB_XFIXES_SET_PICTURE_CLIP_REGION = 22,XCB_XFIXES_SET_CURSOR_NAME = 23,XCB_XFIXES_GET_CURSOR_NAME = 24,XCB_XFIXES_GET_CURSOR_IMAGE_AND_NAME = 25,XCB_XFIXES_CHANGE_CURSOR = 26,XCB_XFIXES_CHANGE_CURSOR_BY_NAME = 27,XCB_XFIXES_EXPAND_REGION = 28,XCB_XFIXES_HIDE_CURSOR = 29,XCB_XFIXES_SHOW_CURSOR = 30,XCB_COMPOSITE_MAJOR_VERSION = 0,XCB_COMPOSITE_MINOR_VERSION = 3,XCB_COMPOSITE_QUERY_VERSION = 0,XCB_COMPOSITE_REDIRECT_WINDOW = 1,XCB_COMPOSITE_REDIRECT_SUBWINDOWS = 2,XCB_COMPOSITE_UNREDIRECT_WINDOW = 3,XCB_COMPOSITE_UNREDIRECT_SUBWINDOWS = 4,XCB_COMPOSITE_CREATE_REGION_FROM_BORDER_CLIP = 5,XCB_COMPOSITE_NAME_WINDOW_PIXMAP = 6,XCB_COMPOSITE_GET_OVERLAY_WINDOW = 7,XCB_COMPOSITE_RELEASE_OVERLAY_WINDOW = 8,XCB_DAMAGE_MAJOR_VERSION = 1,XCB_DAMAGE_MINOR_VERSION = 1,XCB_DAMAGE_BAD_DAMAGE = 0,XCB_DAMAGE_QUERY_VERSION = 0,XCB_DAMAGE_CREATE = 1,XCB_DAMAGE_DESTROY = 2,XCB_DAMAGE_SUBTRACT = 3,XCB_DAMAGE_ADD = 4,XCB_DAMAGE_NOTIFY = 0,XCB_DPMS_MAJOR_VERSION = 0,XCB_DPMS_MINOR_VERSION = 0,XCB_DPMS_GET_VERSION = 0,XCB_DPMS_CAPABLE = 1,XCB_DPMS_GET_TIMEOUTS = 2,XCB_DPMS_SET_TIMEOUTS = 3,XCB_DPMS_ENABLE = 4,XCB_DPMS_DISABLE = 5,XCB_DPMS_FORCE_LEVEL = 6,XCB_DPMS_INFO = 7,XCB_DRI2_MAJOR_VERSION = 1,XCB_DRI2_MINOR_VERSION = 4,XCB_DRI2_QUERY_VERSION = 0,XCB_DRI2_CONNECT = 1,XCB_DRI2_AUTHENTICATE = 2,XCB_DRI2_CREATE_DRAWABLE = 3,XCB_DRI2_DESTROY_DRAWABLE = 4,XCB_DRI2_GET_BUFFERS = 5,XCB_DRI2_COPY_REGION = 6,XCB_DRI2_GET_BUFFERS_WITH_FORMAT = 7,XCB_DRI2_SWAP_BUFFERS = 8,XCB_DRI2_GET_MSC = 9,XCB_DRI2_WAIT_MSC = 10,XCB_DRI2_WAIT_SBC = 11,XCB_DRI2_SWAP_INTERVAL = 12,XCB_DRI2_GET_PARAM = 13,XCB_DRI2_BUFFER_SWAP_COMPLETE = 0,XCB_DRI2_INVALIDATE_BUFFERS = 1,XCB_GLX_MAJOR_VERSION = 1,XCB_GLX_MINOR_VERSION = 3,XCB_GLX_GENERIC = -1,XCB_GLX_BAD_CONTEXT = 0,XCB_GLX_BAD_CONTEXT_STATE = 1,XCB_GLX_BAD_DRAWABLE = 2,XCB_GLX_BAD_PIXMAP = 3,XCB_GLX_BAD_CONTEXT_TAG = 4,XCB_GLX_BAD_CURRENT_WINDOW = 5,XCB_GLX_BAD_RENDER_REQUEST = 6,XCB_GLX_BAD_LARGE_REQUEST = 7,XCB_GLX_UNSUPPORTED_PRIVATE_REQUEST = 8,XCB_GLX_BAD_FB_CONFIG = 9,XCB_GLX_BAD_PBUFFER = 10,XCB_GLX_BAD_CURRENT_DRAWABLE = 11,XCB_GLX_BAD_WINDOW = 12,XCB_GLX_GLX_BAD_PROFILE_ARB = 13,XCB_GLX_PBUFFER_CLOBBER = 0,XCB_GLX_RENDER = 1,XCB_GLX_RENDER_LARGE = 2,XCB_GLX_CREATE_CONTEXT = 3,XCB_GLX_DESTROY_CONTEXT = 4,XCB_GLX_MAKE_CURRENT = 5,XCB_GLX_IS_DIRECT = 6,XCB_GLX_QUERY_VERSION = 7,XCB_GLX_WAIT_GL = 8,XCB_GLX_WAIT_X = 9,XCB_GLX_COPY_CONTEXT = 10,XCB_GLX_SWAP_BUFFERS = 11,XCB_GLX_USE_X_FONT = 12,XCB_GLX_CREATE_GLX_PIXMAP = 13,XCB_GLX_GET_VISUAL_CONFIGS = 14,XCB_GLX_DESTROY_GLX_PIXMAP = 15,XCB_GLX_VENDOR_PRIVATE = 16,XCB_GLX_VENDOR_PRIVATE_WITH_REPLY = 17,XCB_GLX_QUERY_EXTENSIONS_STRING = 18,XCB_GLX_QUERY_SERVER_STRING = 19,XCB_GLX_CLIENT_INFO = 20,XCB_GLX_GET_FB_CONFIGS = 21,XCB_GLX_CREATE_PIXMAP = 22,XCB_GLX_DESTROY_PIXMAP = 23,XCB_GLX_CREATE_NEW_CONTEXT = 24,XCB_GLX_QUERY_CONTEXT = 25,XCB_GLX_MAKE_CONTEXT_CURRENT = 26,XCB_GLX_CREATE_PBUFFER = 27,XCB_GLX_DESTROY_PBUFFER = 28,XCB_GLX_GET_DRAWABLE_ATTRIBUTES = 29,XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES = 30,XCB_GLX_CREATE_WINDOW = 31,XCB_GLX_DELETE_WINDOW = 32,XCB_GLX_SET_CLIENT_INFO_ARB = 33,XCB_GLX_CREATE_CONTEXT_ATTRIBS_ARB = 34,XCB_GLX_SET_CLIENT_INFO_2ARB = 35,XCB_GLX_NEW_LIST = 101,XCB_GLX_END_LIST = 102,XCB_GLX_DELETE_LISTS = 103,XCB_GLX_GEN_LISTS = 104,XCB_GLX_FEEDBACK_BUFFER = 105,XCB_GLX_SELECT_BUFFER = 106,XCB_GLX_RENDER_MODE = 107,XCB_GLX_FINISH = 108,XCB_GLX_PIXEL_STOREF = 109,XCB_GLX_PIXEL_STOREI = 110,XCB_GLX_READ_PIXELS = 111,XCB_GLX_GET_BOOLEANV = 112,XCB_GLX_GET_CLIP_PLANE = 113,XCB_GLX_GET_DOUBLEV = 114,XCB_GLX_GET_ERROR = 115,XCB_GLX_GET_FLOATV = 116,XCB_GLX_GET_INTEGERV = 117,XCB_GLX_GET_LIGHTFV = 118,XCB_GLX_GET_LIGHTIV = 119,XCB_GLX_GET_MAPDV = 120,XCB_GLX_GET_MAPFV = 121,XCB_GLX_GET_MAPIV = 122,XCB_GLX_GET_MATERIALFV = 123,XCB_GLX_GET_MATERIALIV = 124,XCB_GLX_GET_PIXEL_MAPFV = 125,XCB_GLX_GET_PIXEL_MAPUIV = 126,XCB_GLX_GET_PIXEL_MAPUSV = 127,XCB_GLX_GET_POLYGON_STIPPLE = 128,XCB_GLX_GET_STRING = 129,XCB_GLX_GET_TEX_ENVFV = 130,XCB_GLX_GET_TEX_ENVIV = 131,XCB_GLX_GET_TEX_GENDV = 132,XCB_GLX_GET_TEX_GENFV = 133,XCB_GLX_GET_TEX_GENIV = 134,XCB_GLX_GET_TEX_IMAGE = 135,XCB_GLX_GET_TEX_PARAMETERFV = 136,XCB_GLX_GET_TEX_PARAMETERIV = 137,XCB_GLX_GET_TEX_LEVEL_PARAMETERFV = 138,XCB_GLX_GET_TEX_LEVEL_PARAMETERIV = 139,XCB_GLX_IS_LIST = 141,XCB_GLX_FLUSH = 142,XCB_GLX_ARE_TEXTURES_RESIDENT = 143,XCB_GLX_DELETE_TEXTURES = 144,XCB_GLX_GEN_TEXTURES = 145,XCB_GLX_IS_TEXTURE = 146,XCB_GLX_GET_COLOR_TABLE = 147,XCB_GLX_GET_COLOR_TABLE_PARAMETERFV = 148,XCB_GLX_GET_COLOR_TABLE_PARAMETERIV = 149,XCB_GLX_GET_CONVOLUTION_FILTER = 150,XCB_GLX_GET_CONVOLUTION_PARAMETERFV = 151,XCB_GLX_GET_CONVOLUTION_PARAMETERIV = 152,XCB_GLX_GET_SEPARABLE_FILTER = 153,XCB_GLX_GET_HISTOGRAM = 154,XCB_GLX_GET_HISTOGRAM_PARAMETERFV = 155,XCB_GLX_GET_HISTOGRAM_PARAMETERIV = 156,XCB_GLX_GET_MINMAX = 157,XCB_GLX_GET_MINMAX_PARAMETERFV = 158,XCB_GLX_GET_MINMAX_PARAMETERIV = 159,XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB = 160,XCB_GLX_DELETE_QUERIES_ARB = 161,XCB_GLX_GEN_QUERIES_ARB = 162,XCB_GLX_IS_QUERY_ARB = 163,XCB_GLX_GET_QUERYIV_ARB = 164,XCB_GLX_GET_QUERY_OBJECTIV_ARB = 165,XCB_GLX_GET_QUERY_OBJECTUIV_ARB = 166,XCB_RANDR_MAJOR_VERSION = 1,XCB_RANDR_MINOR_VERSION = 3,XCB_RANDR_BAD_OUTPUT = 0,XCB_RANDR_BAD_CRTC = 1,XCB_RANDR_BAD_MODE = 2,XCB_RANDR_QUERY_VERSION = 0,XCB_RANDR_SET_SCREEN_CONFIG = 2,XCB_RANDR_SELECT_INPUT = 4,XCB_RANDR_GET_SCREEN_INFO = 5,XCB_RANDR_GET_SCREEN_SIZE_RANGE = 6,XCB_RANDR_SET_SCREEN_SIZE = 7,XCB_RANDR_GET_SCREEN_RESOURCES = 8,XCB_RANDR_GET_OUTPUT_INFO = 9,XCB_RANDR_LIST_OUTPUT_PROPERTIES = 10,XCB_RANDR_QUERY_OUTPUT_PROPERTY = 11,XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY = 12,XCB_RANDR_CHANGE_OUTPUT_PROPERTY = 13,XCB_RANDR_DELETE_OUTPUT_PROPERTY = 14,XCB_RANDR_GET_OUTPUT_PROPERTY = 15,XCB_RANDR_CREATE_MODE = 16,XCB_RANDR_DESTROY_MODE = 17,XCB_RANDR_ADD_OUTPUT_MODE = 18,XCB_RANDR_DELETE_OUTPUT_MODE = 19,XCB_RANDR_GET_CRTC_INFO = 20,XCB_RANDR_SET_CRTC_CONFIG = 21,XCB_RANDR_GET_CRTC_GAMMA_SIZE = 22,XCB_RANDR_GET_CRTC_GAMMA = 23,XCB_RANDR_SET_CRTC_GAMMA = 24,XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT = 25,XCB_RANDR_SET_CRTC_TRANSFORM = 26,XCB_RANDR_GET_CRTC_TRANSFORM = 27,XCB_RANDR_GET_PANNING = 28,XCB_RANDR_SET_PANNING = 29,XCB_RANDR_SET_OUTPUT_PRIMARY = 30,XCB_RANDR_GET_OUTPUT_PRIMARY = 31,XCB_RANDR_SCREEN_CHANGE_NOTIFY = 0,XCB_RANDR_NOTIFY = 1,XCB_RECORD_MAJOR_VERSION = 1,XCB_RECORD_MINOR_VERSION = 13,XCB_RECORD_BAD_CONTEXT = 0,XCB_RECORD_QUERY_VERSION = 0,XCB_RECORD_CREATE_CONTEXT = 1,XCB_RECORD_REGISTER_CLIENTS = 2,XCB_RECORD_UNREGISTER_CLIENTS = 3,XCB_RECORD_GET_CONTEXT = 4,XCB_RECORD_ENABLE_CONTEXT = 5,XCB_RECORD_DISABLE_CONTEXT = 6,XCB_RECORD_FREE_CONTEXT = 7,XCB_RES_MAJOR_VERSION = 1,XCB_RES_MINOR_VERSION = 0,XCB_RES_QUERY_VERSION = 0,XCB_RES_QUERY_CLIENTS = 1,XCB_RES_QUERY_CLIENT_RESOURCES = 2,XCB_RES_QUERY_CLIENT_PIXMAP_BYTES = 3,XCB_SCREENSAVER_MAJOR_VERSION = 1,XCB_SCREENSAVER_MINOR_VERSION = 1,XCB_SCREENSAVER_QUERY_VERSION = 0,XCB_SCREENSAVER_QUERY_INFO = 1,XCB_SCREENSAVER_SELECT_INPUT = 2,XCB_SCREENSAVER_SET_ATTRIBUTES = 3,XCB_SCREENSAVER_UNSET_ATTRIBUTES = 4,XCB_SCREENSAVER_SUSPEND = 5,XCB_SCREENSAVER_NOTIFY = 0,XCB_SHM_MAJOR_VERSION = 1,XCB_SHM_MINOR_VERSION = 1,XCB_SHM_COMPLETION = 0,XCB_SHM_BAD_SEG = 0,XCB_SHM_QUERY_VERSION = 0,XCB_SHM_ATTACH = 1,XCB_SHM_DETACH = 2,XCB_SHM_PUT_IMAGE = 3,XCB_SHM_GET_IMAGE = 4,XCB_SHM_CREATE_PIXMAP = 5,XCB_SYNC_MAJOR_VERSION = 3,XCB_SYNC_MINOR_VERSION = 1,XCB_SYNC_COUNTER = 0,XCB_SYNC_ALARM = 1,XCB_SYNC_INITIALIZE = 0,XCB_SYNC_LIST_SYSTEM_COUNTERS = 1,XCB_SYNC_CREATE_COUNTER = 2,XCB_SYNC_DESTROY_COUNTER = 6,XCB_SYNC_QUERY_COUNTER = 5,XCB_SYNC_AWAIT = 7,XCB_SYNC_CHANGE_COUNTER = 4,XCB_SYNC_SET_COUNTER = 3,XCB_SYNC_CREATE_ALARM = 8,XCB_SYNC_CHANGE_ALARM = 9,XCB_SYNC_DESTROY_ALARM = 11,XCB_SYNC_QUERY_ALARM = 10,XCB_SYNC_SET_PRIORITY = 12,XCB_SYNC_GET_PRIORITY = 13,XCB_SYNC_CREATE_FENCE = 14,XCB_SYNC_TRIGGER_FENCE = 15,XCB_SYNC_RESET_FENCE = 16,XCB_SYNC_DESTROY_FENCE = 17,XCB_SYNC_QUERY_FENCE = 18,XCB_SYNC_AWAIT_FENCE = 19,XCB_SYNC_COUNTER_NOTIFY = 0,XCB_SYNC_ALARM_NOTIFY = 1,XCB_XCMISC_MAJOR_VERSION = 1,XCB_XCMISC_MINOR_VERSION = 1,XCB_XC_MISC_GET_VERSION = 0,XCB_XC_MISC_GET_XID_RANGE = 1,XCB_XC_MISC_GET_XID_LIST = 2,XCB_XEVIE_MAJOR_VERSION = 1,XCB_XEVIE_MINOR_VERSION = 0,XCB_XEVIE_QUERY_VERSION = 0,XCB_XEVIE_START = 1,XCB_XEVIE_END = 2,XCB_XEVIE_SEND = 3,XCB_XEVIE_SELECT_INPUT = 4,XCB_XF86DRI_MAJOR_VERSION = 4,XCB_XF86DRI_MINOR_VERSION = 1,XCB_XF86DRI_QUERY_VERSION = 0,XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE = 1,XCB_XF86DRI_OPEN_CONNECTION = 2,XCB_XF86DRI_CLOSE_CONNECTION = 3,XCB_XF86DRI_GET_CLIENT_DRIVER_NAME = 4,XCB_XF86DRI_CREATE_CONTEXT = 5,XCB_XF86DRI_DESTROY_CONTEXT = 6,XCB_XF86DRI_CREATE_DRAWABLE = 7,XCB_XF86DRI_DESTROY_DRAWABLE = 8,XCB_XF86DRI_GET_DRAWABLE_INFO = 9,XCB_XF86DRI_GET_DEVICE_INFO = 10,XCB_XF86DRI_AUTH_CONNECTION = 11,XCB_XINERAMA_MAJOR_VERSION = 1,XCB_XINERAMA_MINOR_VERSION = 1,XCB_XINERAMA_QUERY_VERSION = 0,XCB_XINERAMA_GET_STATE = 1,XCB_XINERAMA_GET_SCREEN_COUNT = 2,XCB_XINERAMA_GET_SCREEN_SIZE = 3,XCB_XINERAMA_IS_ACTIVE = 4,XCB_XINERAMA_QUERY_SCREENS = 5,XCB_INPUT_MAJOR_VERSION = 1,XCB_INPUT_MINOR_VERSION = 4,XCB_INPUT_GET_EXTENSION_VERSION = 1,XCB_INPUT_LIST_INPUT_DEVICES = 2,XCB_INPUT_OPEN_DEVICE = 3,XCB_INPUT_CLOSE_DEVICE = 4,XCB_INPUT_SET_DEVICE_MODE = 5,XCB_INPUT_SELECT_EXTENSION_EVENT = 6,XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS = 7,XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST = 8,XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST = 9,XCB_INPUT_GET_DEVICE_MOTION_EVENTS = 10,XCB_INPUT_CHANGE_KEYBOARD_DEVICE = 11,XCB_INPUT_CHANGE_POINTER_DEVICE = 12,XCB_INPUT_GRAB_DEVICE = 13,XCB_INPUT_UNGRAB_DEVICE = 14,XCB_INPUT_GRAB_DEVICE_KEY = 15,XCB_INPUT_UNGRAB_DEVICE_KEY = 16,XCB_INPUT_GRAB_DEVICE_BUTTON = 17,XCB_INPUT_UNGRAB_DEVICE_BUTTON = 18,XCB_INPUT_ALLOW_DEVICE_EVENTS = 19,XCB_INPUT_GET_DEVICE_FOCUS = 20,XCB_INPUT_SET_DEVICE_FOCUS = 21,XCB_INPUT_GET_FEEDBACK_CONTROL = 22,XCB_INPUT_GET_DEVICE_KEY_MAPPING = 24,XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING = 25,XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING = 26,XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING = 27,XCB_INPUT_GET_DEVICE_BUTTON_MAPPING = 28,XCB_INPUT_SET_DEVICE_BUTTON_MAPPING = 29,XCB_INPUT_QUERY_DEVICE_STATE = 30,XCB_INPUT_SEND_EXTENSION_EVENT = 31,XCB_INPUT_DEVICE_BELL = 32,XCB_INPUT_SET_DEVICE_VALUATORS = 33,XCB_INPUT_GET_DEVICE_CONTROL = 34,XCB_INPUT_DEVICE_VALUATOR = 0,XCB_INPUT_DEVICE_KEY_PRESS = 1,XCB_INPUT_DEVICE_KEY_RELEASE = 2,XCB_INPUT_DEVICE_BUTTON_PRESS = 3,XCB_INPUT_DEVICE_BUTTON_RELEASE = 4,XCB_INPUT_DEVICE_MOTION_NOTIFY = 5,XCB_INPUT_PROXIMITY_IN = 8,XCB_INPUT_PROXIMITY_OUT = 9,XCB_INPUT_FOCUS_IN = 6,XCB_INPUT_FOCUS_OUT = 7,XCB_INPUT_DEVICE_STATE_NOTIFY = 10,XCB_INPUT_DEVICE_MAPPING_NOTIFY = 11,XCB_INPUT_CHANGE_DEVICE_NOTIFY = 12,XCB_INPUT_DEVICE_KEY_STATE_NOTIFY = 13,XCB_INPUT_DEVICE_BUTTON_STATE_NOTIFY = 14,XCB_INPUT_DEVICE_PRESENCE_NOTIFY = 15,XCB_INPUT_DEVICE = 0,XCB_INPUT_EVENT = 1,XCB_INPUT_MODE = 2,XCB_INPUT_DEVICE_BUSY = 3,XCB_INPUT_CLASS = 4,XCB_XKB_MAJOR_VERSION = 1,XCB_XKB_MINOR_VERSION = 0,XCB_XKB_KEYBOARD = 0,XCB_XKB_USE_EXTENSION = 0,XCB_XKB_SELECT_EVENTS = 1,XCB_XKB_BELL = 3,XCB_XKB_GET_STATE = 4,XCB_XKB_LATCH_LOCK_STATE = 5,XCB_XKB_GET_CONTROLS = 6,XCB_XKB_SET_CONTROLS = 7,XCB_XKB_GET_MAP = 8,XCB_XKB_SET_MAP = 9,XCB_XKB_GET_COMPAT_MAP = 10,XCB_XKB_SET_COMPAT_MAP = 11,XCB_XKB_GET_INDICATOR_STATE = 12,XCB_XKB_GET_INDICATOR_MAP = 13,XCB_XKB_SET_INDICATOR_MAP = 14,XCB_XKB_GET_NAMED_INDICATOR = 15,XCB_XKB_SET_NAMED_INDICATOR = 16,XCB_XKB_GET_NAMES = 17,XCB_XKB_SET_NAMES = 18,XCB_XKB_GET_GEOMETRY = 19,XCB_XKB_SET_GEOMETRY = 20,XCB_XKB_PER_CLIENT_FLAGS = 21,XCB_XKB_LIST_COMPONENTS = 22,XCB_XKB_GET_KBD_BY_NAME = 23,XCB_XKB_GET_DEVICE_INFO = 24,XCB_XKB_SET_DEVICE_INFO = 25,XCB_XKB_SET_DEBUGGING_FLAGS = 101,XCB_XKB_NEW_KEYBOARD_NOTIFY = 0,XCB_XKB_MAP_NOTIFY = 1,XCB_XKB_STATE_NOTIFY = 2,XCB_XKB_CONTROLS_NOTIFY = 3,XCB_XKB_INDICATOR_STATE_NOTIFY = 4,XCB_XKB_INDICATOR_MAP_NOTIFY = 5,XCB_XKB_NAMES_NOTIFY = 6,XCB_XKB_COMPAT_MAP_NOTIFY = 7,XCB_XKB_BELL_NOTIFY = 8,XCB_XKB_ACTION_MESSAGE = 9,XCB_XKB_ACCESS_X_NOTIFY = 10,XCB_XKB_EXTENSION_DEVICE_NOTIFY = 11,XCB_XPRINT_MAJOR_VERSION = 1,XCB_XPRINT_MINOR_VERSION = 0,XCB_X_PRINT_PRINT_QUERY_VERSION = 0,XCB_X_PRINT_PRINT_GET_PRINTER_LIST = 1,XCB_X_PRINT_PRINT_REHASH_PRINTER_LIST = 20,XCB_X_PRINT_CREATE_CONTEXT = 2,XCB_X_PRINT_PRINT_SET_CONTEXT = 3,XCB_X_PRINT_PRINT_GET_CONTEXT = 4,XCB_X_PRINT_PRINT_DESTROY_CONTEXT = 5,XCB_X_PRINT_PRINT_GET_SCREEN_OF_CONTEXT = 6,XCB_X_PRINT_PRINT_START_JOB = 7,XCB_X_PRINT_PRINT_END_JOB = 8,XCB_X_PRINT_PRINT_START_DOC = 9,XCB_X_PRINT_PRINT_END_DOC = 10,XCB_X_PRINT_PRINT_PUT_DOCUMENT_DATA = 11,XCB_X_PRINT_PRINT_GET_DOCUMENT_DATA = 12,XCB_X_PRINT_PRINT_START_PAGE = 13,XCB_X_PRINT_PRINT_END_PAGE = 14,XCB_X_PRINT_PRINT_SELECT_INPUT = 15,XCB_X_PRINT_PRINT_INPUT_SELECTED = 16,XCB_X_PRINT_PRINT_GET_ATTRIBUTES = 17,XCB_X_PRINT_PRINT_GET_ONE_ATTRIBUTES = 19,XCB_X_PRINT_PRINT_SET_ATTRIBUTES = 18,XCB_X_PRINT_PRINT_GET_PAGE_DIMENSIONS = 21,XCB_X_PRINT_PRINT_QUERY_SCREENS = 22,XCB_X_PRINT_PRINT_SET_IMAGE_RESOLUTION = 23,XCB_X_PRINT_PRINT_GET_IMAGE_RESOLUTION = 24,XCB_X_PRINT_NOTIFY = 0,XCB_X_PRINT_ATTRIBUT_NOTIFY = 1,XCB_X_PRINT_BAD_CONTEXT = 0,XCB_X_PRINT_BAD_SEQUENCE = 1,XCB_SELINUX_MAJOR_VERSION = 1,XCB_SELINUX_MINOR_VERSION = 0,XCB_SELINUX_QUERY_VERSION = 0,XCB_SELINUX_SET_DEVICE_CREATE_CONTEXT = 1,XCB_SELINUX_GET_DEVICE_CREATE_CONTEXT = 2,XCB_SELINUX_SET_DEVICE_CONTEXT = 3,XCB_SELINUX_GET_DEVICE_CONTEXT = 4,XCB_SELINUX_SET_WINDOW_CREATE_CONTEXT = 5,XCB_SELINUX_GET_WINDOW_CREATE_CONTEXT = 6,XCB_SELINUX_GET_WINDOW_CONTEXT = 7,XCB_SELINUX_SET_PROPERTY_CREATE_CONTEXT = 8,XCB_SELINUX_GET_PROPERTY_CREATE_CONTEXT = 9,XCB_SELINUX_SET_PROPERTY_USE_CONTEXT = 10,XCB_SELINUX_GET_PROPERTY_USE_CONTEXT = 11,XCB_SELINUX_GET_PROPERTY_CONTEXT = 12,XCB_SELINUX_GET_PROPERTY_DATA_CONTEXT = 13,XCB_SELINUX_LIST_PROPERTIES = 14,XCB_SELINUX_SET_SELECTION_CREATE_CONTEXT = 15,XCB_SELINUX_GET_SELECTION_CREATE_CONTEXT = 16,XCB_SELINUX_SET_SELECTION_USE_CONTEXT = 17,XCB_SELINUX_GET_SELECTION_USE_CONTEXT = 18,XCB_SELINUX_GET_SELECTION_CONTEXT = 19,XCB_SELINUX_GET_SELECTION_DATA_CONTEXT = 20,XCB_SELINUX_LIST_SELECTIONS = 21,XCB_SELINUX_GET_CLIENT_CONTEXT = 22,XCB_TEST_MAJOR_VERSION = 2,XCB_TEST_MINOR_VERSION = 1,XCB_TEST_GET_VERSION = 0,XCB_TEST_COMPARE_CURSOR = 1,XCB_TEST_FAKE_INPUT = 2,XCB_TEST_GRAB_CONTROL = 3,XCB_XV_MAJOR_VERSION = 2,XCB_XV_MINOR_VERSION = 2,XCB_XV_BAD_PORT = 0,XCB_XV_BAD_ENCODING = 1,XCB_XV_BAD_CONTROL = 2,XCB_XV_VIDEO_NOTIFY = 0,XCB_XV_PORT_NOTIFY = 1,XCB_XV_QUERY_EXTENSION = 0,XCB_XV_QUERY_ADAPTORS = 1,XCB_XV_QUERY_ENCODINGS = 2,XCB_XV_GRAB_PORT = 3,XCB_XV_UNGRAB_PORT = 4,XCB_XV_PUT_VIDEO = 5,XCB_XV_PUT_STILL = 6,XCB_XV_GET_VIDEO = 7,XCB_XV_GET_STILL = 8,XCB_XV_STOP_VIDEO = 9,XCB_XV_SELECT_VIDEO_NOTIFY = 10,XCB_XV_SELECT_PORT_NOTIFY = 11,XCB_XV_QUERY_BEST_SIZE = 12,XCB_XV_SET_PORT_ATTRIBUTE = 13,XCB_XV_GET_PORT_ATTRIBUTE = 14,XCB_XV_QUERY_PORT_ATTRIBUTES = 15,XCB_XV_LIST_IMAGE_FORMATS = 16,XCB_XV_QUERY_IMAGE_ATTRIBUTES = 17,XCB_XV_PUT_IMAGE = 18,XCB_XV_SHM_PUT_IMAGE = 19,XCB_XVMC_MAJOR_VERSION = 1,XCB_XVMC_MINOR_VERSION = 1,XCB_XVMC_QUERY_VERSION = 0,XCB_XVMC_LIST_SURFACE_TYPES = 1,XCB_XVMC_CREATE_CONTEXT = 2,XCB_XVMC_DESTROY_CONTEXT = 3,XCB_XVMC_CREATE_SURFACE = 4,XCB_XVMC_DESTROY_SURFACE = 5,XCB_XVMC_CREATE_SUBPICTURE = 6,XCB_XVMC_DESTROY_SUBPICTURE = 7,XCB_XVMC_LIST_SUBPICTURE_TYPES = 8,};
enum MACRO_XIFloatingSlave {XIFloatingSlave = 5,};
enum MACRO_XIMInitialState {XIMInitialState = 1,XIMPreserveState = 2,};
enum MACRO_XIMasterPointer {XIMasterPointer = 1,XIMasterKeyboard = 2,};
enum MACRO_XINoOwnerEvents {XINoOwnerEvents = 0,};
enum MACRO_XINotifyPointer {XINotifyPointer = 5,};
enum MACRO_XSyncBadCounter {XSyncBadCounter = 0,XSyncBadAlarm = 1,XSyncBadFence = 2,};
enum MACRO_XTestMAX_DEVICE {XTestMAX_DEVICE_ID = 0xF,};
enum MACRO_X_DbeGetVersion {X_DbeGetVersion = 0,X_DbeAllocateBackBufferName = 1,X_DbeDeallocateBackBufferName = 2,X_DbeSwapBuffers = 3,X_DbeBeginIdiom = 4,X_DbeEndIdiom = 5,X_DbeGetVisualInfo = 6,X_DbeGetBackBufferAttributes = 7,};
enum MACRO_X_MITSetBugMode {X_MITSetBugMode = 0,X_MITGetBugMode = 1,};
enum MACRO_X_TestFakeInput {X_TestFakeInput = 1,X_TestGetInput = 2,X_TestStopInput = 3,X_TestReset = 4,X_TestQueryInputSize = 5,};
enum MACRO_XagNdefaultRoot {XagNdefaultRoot = 1,XagNrootVisual = 2,};
enum MACRO_XcmsInitFailure {XcmsInitFailure = 0xFF,};
enum MACRO_XkbAllNamesMask {XkbAllNamesMask = 0x3FFF,};
enum MACRO_XkbAllXIClasses {XkbAllXIClasses = 0x500,};
enum MACRO_XkbGeomPtsPerMM {XkbGeomPtsPerMM = 10,XkbGeomMaxColors = 32,};
enum MACRO_XkbKeyTypesMask {XkbKeyTypesMask = 1,XkbKeySymsMask = 2,XkbModifierMapMask = 4,XkbExplicitComponentsMask = 8,XkbKeyActionsMask = 16,XkbKeyBehaviorsMask = 32,XkbVirtualModsMask = 64,XkbVirtualModMapMask = 128,};
enum MACRO_XkbMajorVersion {XkbMajorVersion = 1,};
enum MACRO_XkbMinorVersion {XkbMinorVersion = 0,XkbExplicitKeyTypesMask = 15,};
enum MACRO_XkbNoShiftLevel {XkbNoShiftLevel = 0xFF,};
enum MACRO_XkbNumKbdGroups {XkbNumKbdGroups = 4,};
enum MACRO_XkbNumModifiers {XkbNumModifiers = 8,XkbNumVirtualMods = 16,XkbNumIndicators = 32,};
enum MACRO_XkbOneLevelMask {XkbOneLevelMask = 1,XkbTwoLevelMask = 2,XkbAlphabeticMask = 4,XkbKeypadMask = 8,};
enum MACRO_XkbRGMaxMembers {XkbRGMaxMembers = 12,};
enum MACRO_XvAnyReasonMask {XvAnyReasonMask = 31,};
enum MACRO__BITS_SIGTHREAD {_BITS_SIGTHREAD_H = 1,};
enum MACRO__POSIX_SPORADIC {_POSIX_SPORADIC_SERVER = -1,_POSIX_THREAD_SPORADIC_SERVER = -1,_POSIX_TRACE = -1,_POSIX_TRACE_EVENT_FILTER = -1,_POSIX_TRACE_INHERIT = -1,_POSIX_TRACE_LOG = -1,_POSIX_TYPED_MEMORY_OBJECTS = -1,};
enum MACRO__XOPEN_REALTIME {_XOPEN_REALTIME = 1,_XOPEN_REALTIME_THREADS = 1,_XOPEN_SHM = 1,};
enum MACRO__XTESTEXT1CONST {_XTESTEXT1CONST_H = 1,};
enum MACRO__XTESTEXT1PROTO {_XTESTEXT1PROTO_H = 1,};
enum MACRO__devicePresence {_devicePresence = 0,};
enum MACRO_numInputClasses {numInputClasses = 7,};
enum MACRO_sz_XRecordRange {sz_XRecordRange = 32,sz_XRecordClientInfo = 12,sz_XRecordState = 16,sz_XRecordDatum = 32,};
enum MACRO_sz_fsPropOffset {sz_fsPropOffset = 20,sz_fsPropInfo = 8,sz_fsResolution = 6,sz_fsChar2b = 2,sz_fsChar2b_version1 = 2,sz_fsOffset32 = 8,sz_fsRange = 4,sz_fsXCharInfo = 12,sz_fsXFontInfoHeader = 40,sz_fsConnClientPrefix = 8,sz_fsConnSetup = 12,sz_fsConnSetupExtra = 8,sz_fsConnSetupAccept = 12,sz_fsReq = 4,sz_fsListExtensionsReq = 4,sz_fsResourceReq = 8,sz_fsNoopReq = 4,sz_fsListExtensionReq = 4,sz_fsQueryExtensionReq = 4,sz_fsListCataloguesReq = 12,sz_fsSetCataloguesReq = 4,sz_fsGetCataloguesReq = 4,sz_fsSetEventMaskReq = 8,sz_fsGetEventMaskReq = 4,sz_fsCreateACReq = 8,sz_fsFreeACReq = 8,sz_fsSetAuthorizationReq = 8,sz_fsSetResolutionReq = 4,sz_fsGetResolutionReq = 4,sz_fsListFontsReq = 12,sz_fsListFontsWithXInfoReq = 12,sz_fsOpenBitmapFontReq = 16,sz_fsQueryXInfoReq = 8,sz_fsQueryXExtents8Req = 12,sz_fsQueryXExtents16Req = 12,sz_fsQueryXBitmaps8Req = 16,sz_fsQueryXBitmaps16Req = 16,sz_fsCloseReq = 8,sz_fsReply = 8,sz_fsGenericReply = 8,sz_fsListExtensionsReply = 8,sz_fsQueryExtensionReply = 20,sz_fsListCataloguesReply = 16,sz_fsGetCataloguesReply = 8,sz_fsGetEventMaskReply = 12,sz_fsCreateACReply = 12,sz_fsGetResolutionReply = 8,sz_fsListFontsReply = 16,sz_fsListFontsWithXInfoReply = 52,sz_fsOpenBitmapFontReply = 16,sz_fsQueryXInfoReply = 48,sz_fsQueryXExtents8Reply = 12,sz_fsQueryXExtents16Reply = 12,sz_fsQueryXBitmaps8Reply = 20,sz_fsQueryXBitmaps16Reply = 20,sz_fsError = 16,sz_fsEvent = 12,sz_fsKeepAliveEvent = 12,};
enum MACRO_sz_xkbSetMapReq {sz_xkbSetMapReq = 36,sz_xkbSymInterpretWireDesc = 16,sz_xkbGetCompatMapReq = 12,sz_xkbGetCompatMapReply = 32,sz_xkbSetCompatMapReq = 16,sz_xkbGetIndicatorStateReq = 8,sz_xkbGetIndicatorStateReply = 32,sz_xkbGetIndicatorMapReq = 12,sz_xkbGetIndicatorMapReply = 32,sz_xkbIndicatorMapWireDesc = 12,sz_xkbSetIndicatorMapReq = 12,sz_xkbGetNamedIndicatorReq = 16,sz_xkbGetNamedIndicatorReply = 32,sz_xkbSetNamedIndicatorReq = 32,sz_xkbGetNamesReq = 12,sz_xkbGetNamesReply = 32,sz_xkbSetNamesReq = 28,sz_xkbPointWireDesc = 4,sz_xkbOutlineWireDesc = 4,sz_xkbShapeWireDesc = 8,sz_xkbSectionWireDesc = 20,sz_xkbRowWireDesc = 8,sz_xkbKeyWireDesc = 8,sz_xkbOverlayWireDesc = 8,sz_xkbOverlayRowWireDesc = 4,sz_xkbOverlayKeyWireDesc = 8,sz_xkbShapeDoodadWireDesc = 20,sz_xkbTextDoodadWireDesc = 20,sz_xkbIndicatorDoodadWireDesc = 20,sz_xkbLogoDoodadWireDesc = 20,sz_xkbAnyDoodadWireDesc = 20,sz_xkbDoodadWireDesc = 20,sz_xkbGetGeometryReq = 12,sz_xkbGetGeometryReply = 32,sz_xkbSetGeometryReq = 28,sz_xkbPerClientFlagsReq = 28,sz_xkbPerClientFlagsReply = 32,sz_xkbListComponentsReq = 8,sz_xkbListComponentsReply = 32,sz_xkbGetKbdByNameReq = 12,sz_xkbGetKbdByNameReply = 32,sz_xkbDeviceLedsWireDesc = 20,sz_xkbGetDeviceInfoReq = 16,sz_xkbGetDeviceInfoReply = 32,sz_xkbSetDeviceInfoReq = 12,sz_xkbSetDebuggingFlagsReq = 24,sz_xkbSetDebuggingFlagsReply = 32,sz_xkbAnyEvent = 32,sz_xkbNewKeyboardNotify = 32,sz_xkbMapNotify = 32,sz_xkbStateNotify = 32,sz_xkbControlsNotify = 32,sz_xkbIndicatorNotify = 32,sz_xkbNamesNotify = 32,sz_xkbCompatMapNotify = 32,sz_xkbBellNotify = 32,sz_xkbActionMessage = 32,sz_xkbAccessXNotify = 32,sz_xkbExtensionDeviceNotify = 32,sz_xkbEvent = 32,};
struct SjLj_Function_Context;
typedef struct _A2DE5C624CAE7E415130221DEBE38D94 XF86MiscMouseSettings;
typedef struct _XkbAccessXNotify XkbAccessXNotifyEvent;
typedef struct _XkbActionMessage XkbActionMessageEvent;
typedef struct _XkbControlsChanges *XkbControlsChangesPtr;
typedef struct _XkbControlsChanges XkbControlsChangesRec;
typedef struct _XkbIndicatorDoodad *XkbIndicatorDoodadPtr;
typedef struct _XkbIndicatorDoodad XkbIndicatorDoodadRec;
typedef struct _XkbSwitchScreenAction XkbSwitchScreenAction;
struct _XkbRedirectKeyAction {unsigned __int8 type;unsigned __int8 new_key;unsigned __int8 mods_mask;unsigned __int8 mods;unsigned __int8 vmods_mask0;unsigned __int8 vmods_mask1;unsigned __int8 vmods0;unsigned __int8 vmods1;};
struct __gconv_loaded_object;
typedef void (*__gconv_trans_end_fct)(void *);
typedef void (*__kernel_sighandler_t)(int);
enum __ns_update_operation {ns_uop_delete = 0x0,ns_uop_add = 0x1,ns_uop_max = 0x2,};
enum atscmh_sccc_code_mode {ATSCMH_SCCC_CODE_HLF = 0x0,ATSCMH_SCCC_CODE_QTR = 0x1,ATSCMH_SCCC_CODE_RES = 0x2,};
enum btrfs_dev_stat_values {BTRFS_DEV_STAT_WRITE_ERRS = 0x0,BTRFS_DEV_STAT_READ_ERRS = 0x1,BTRFS_DEV_STAT_FLUSH_ERRS = 0x2,BTRFS_DEV_STAT_CORRUPTION_ERRS = 0x3,BTRFS_DEV_STAT_GENERATION_ERRS = 0x4,BTRFS_DEV_STAT_VALUES_MAX = 0x5,};
enum caif_channel_priority {CAIF_PRIO_MIN = 0x1,CAIF_PRIO_LOW = 0x4,CAIF_PRIO_NORMAL = 0xF,CAIF_PRIO_HIGH = 0x14,CAIF_PRIO_MAX = 0x1F,};
struct capi_manufacturer_cmd {unsigned __int64 cmd;void *data;};
typedef struct _cciss_pci_info_struct cciss_pci_info_struct;
struct cdrom_generic_command {unsigned __int8 cmd[12];unsigned __int8 *buffer;unsigned int buflen;int stat;struct request_sense *sense;unsigned __int8 data_direction;int quiet;int timeout;void *reserved[1];};
struct changer_vendor_params {int cvp_n1;char cvp_label1[16];int cvp_n2;char cvp_label2[16];int cvp_n3;char cvp_label3[16];int cvp_n4;char cvp_label4[16];int reserved[8];};
struct cpufreq_affected_cpus {unsigned int cpu;struct cpufreq_affected_cpus *next;struct cpufreq_affected_cpus *first;};
enum ctattr_protoinfo_dccp {CTA_PROTOINFO_DCCP_UNSPEC = 0x0,CTA_PROTOINFO_DCCP_STATE = 0x1,CTA_PROTOINFO_DCCP_ROLE = 0x2,CTA_PROTOINFO_DCCP_HANDSHAKE_SEQ = 0x3,__CTA_PROTOINFO_DCCP_MAX = 0x4,};
enum ctattr_protoinfo_sctp {CTA_PROTOINFO_SCTP_UNSPEC = 0x0,CTA_PROTOINFO_SCTP_STATE = 0x1,CTA_PROTOINFO_SCTP_VTAG_ORIGINAL = 0x2,CTA_PROTOINFO_SCTP_VTAG_REPLY = 0x3,__CTA_PROTOINFO_SCTP_MAX = 0x4,};
enum ctattr_timeout_icmpv6 {CTA_TIMEOUT_ICMPV6_UNSPEC = 0x0,CTA_TIMEOUT_ICMPV6_TIMEOUT = 0x1,__CTA_TIMEOUT_ICMPV6_MAX = 0x2,};
enum ethtool_flash_op_type {ETHTOOL_FLASH_ALL_REGIONS = 0x0,};
enum fe_spectral_inversion {INVERSION_OFF = 0x0,INVERSION_ON = 0x1,INVERSION_AUTO = 0x2,};
typedef struct _FCE16AE268B388C13B857015D638E9ED fsImplementationError;
typedef struct _113ADE3249D8CE9145901B23810AE272 fsListCataloguesReply;
typedef struct _A400BCBF43F87F2088946A887ADD242F fsListExtensionsReply;
typedef struct _E979E361A2908732FE24CBF47752810D fsOpenBitmapFontReply;
typedef struct _2D6D05448839E8D39EF22D0A7A7B9E49 fsQueryExtensionReply;
typedef struct _5C7A236BA0562DB05D77CA85FA8CD202 fsQueryXBitmaps8Reply;
typedef struct _D293DB0BD17AE7654E9C3A224EBA1B54 fsQueryXExtents8Reply;
struct hdlcdrv_channel_state {int ptt;int dcd;int ptt_keyed;unsigned __int64 tx_packets;unsigned __int64 tx_errors;unsigned __int64 rx_packets;unsigned __int64 rx_errors;};
struct hs_primary_descriptor {char foo[8];char type[1];char id[5];char version[1];char unused1[1];char system_id[32];char volume_id[32];char unused2[8];char volume_space_size[8];char unused3[32];char volume_set_size[4];char volume_sequence_number[4];char logical_block_size[4];char path_table_size[8];char type_l_path_table[4];char unused4[28];char root_directory_record[34];};
enum i2400m_tlv_reset_type {I2400M_RESET_TYPE_COLD = 0x1,I2400M_RESET_TYPE_WARM = 0x2,};
struct iso_volume_descriptor {char type[1];char id[5];char version[1];char data[2041];};
enum nf_dn_hook_priorities {NF_DN_PRI_FIRST = 0x80000000,NF_DN_PRI_CONNTRACK = 0xFFFFFF38,NF_DN_PRI_MANGLE = 0xFFFFFF6A,NF_DN_PRI_NAT_DST = 0xFFFFFF9C,NF_DN_PRI_FILTER = 0x0,NF_DN_PRI_NAT_SRC = 0x64,NF_DN_PRI_DNRTMSG = 0xC8,NF_DN_PRI_LAST = 0x7FFFFFFF,};
enum nf_ip_hook_priorities {NF_IP_PRI_FIRST = 0x80000000,NF_IP_PRI_CONNTRACK_DEFRAG = 0xFFFFFE70,NF_IP_PRI_RAW = 0xFFFFFED4,NF_IP_PRI_SELINUX_FIRST = 0xFFFFFF1F,NF_IP_PRI_CONNTRACK = 0xFFFFFF38,NF_IP_PRI_MANGLE = 0xFFFFFF6A,NF_IP_PRI_NAT_DST = 0xFFFFFF9C,NF_IP_PRI_FILTER = 0x0,NF_IP_PRI_SECURITY = 0x32,NF_IP_PRI_NAT_SRC = 0x64,NF_IP_PRI_SELINUX_LAST = 0xE1,NF_IP_PRI_CONNTRACK_HELPER = 0x12C,NF_IP_PRI_CONNTRACK_CONFIRM = 0x7FFFFFFF,NF_IP_PRI_LAST = 0x7FFFFFFF,};
enum nfqnl_msg_config_cmds {NFQNL_CFG_CMD_NONE = 0x0,NFQNL_CFG_CMD_BIND = 0x1,NFQNL_CFG_CMD_UNBIND = 0x2,NFQNL_CFG_CMD_PF_BIND = 0x3,NFQNL_CFG_CMD_PF_UNBIND = 0x4,};
enum omap3isp_alaw_ipwidth {OMAP3ISP_ALAW_BIT12_3 = 0x3,OMAP3ISP_ALAW_BIT11_2 = 0x4,OMAP3ISP_ALAW_BIT10_1 = 0x5,OMAP3ISP_ALAW_BIT9_0 = 0x6,};
enum omapfb_color_key_type {OMAPFB_COLOR_KEY_DISABLED = 0x0,OMAPFB_COLOR_KEY_GFX_DST = 0x1,OMAPFB_COLOR_KEY_VID_SRC = 0x2,};
typedef union _D1D0F511BF997F52624AFB2B0CE27B40 pthread_barrierattr_t;
typedef int snd_seq_client_type_t;
struct soundfont_sample_info {unsigned __int16 sf_id;unsigned __int16 sample;int start;int end;int loopstart;int loopend;int size;__int16 dummy;unsigned __int16 mode_flags;unsigned int truesize;};
struct usbdevfs_bulktransfer {unsigned int ep;unsigned int len;unsigned int timeout;void *data;};
struct usbdevfs_hub_portinfo {char nports;char port[127];};
struct usbdevfs_setinterface {unsigned int interface;unsigned int altsetting;};
enum v4l2_auto_focus_range {V4L2_AUTO_FOCUS_RANGE_AUTO = 0x0,V4L2_AUTO_FOCUS_RANGE_NORMAL = 0x1,V4L2_AUTO_FOCUS_RANGE_MACRO = 0x2,V4L2_AUTO_FOCUS_RANGE_INFINITY = 0x3,};
enum v4l2_mpeg_stream_type {V4L2_MPEG_STREAM_TYPE_MPEG2_PS = 0x0,V4L2_MPEG_STREAM_TYPE_MPEG2_TS = 0x1,V4L2_MPEG_STREAM_TYPE_MPEG1_SS = 0x2,V4L2_MPEG_STREAM_TYPE_MPEG2_DVD = 0x3,V4L2_MPEG_STREAM_TYPE_MPEG1_VCD = 0x4,V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD = 0x5,};
typedef struct _2E22270806C47E05D9B4938893A6CA7A xAllocColorCellsReply;
typedef struct _73B4058B96DB787648F70BEB3765CE40 xAllocNamedColorReply;
typedef struct _A56827FA99728A529A1C213E34F0D83D xAllowDeviceEventsReq;
typedef struct _6C531080E0330861B126A2833D727845 xCreateGlyphCursorReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXGetScreenCountReq;
typedef struct _089D19AFE35A3BB9549C0E2B9D96DA0E xDMXQueryVersionReply;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXRemoveScreenReply;
typedef struct _7286F01C0F25CC9697D9D7CFCD5C4B3B xDPMSGetTimeoutsReply;
typedef struct _421551632E56BA5B9AAA3C53AC32257E xDRI2SwapBuffersReply;
typedef struct _7D044E98E295B1AE6D053F4E096E3E34 xEVIQueryVersionReply;
typedef struct _9C9B4F43840092878ABB719655C0F912 xGetDevicePropertyReq;
typedef struct _53A84E5818A8BF56A6CBC41177A9FFE2 xGetMotionEventsReply;
typedef struct _F2B759443FC190F802FE53FB7862F04C xIntegerFeedbackState;
typedef struct _LbxChangeProperty xLbxChangePropertyReq;
typedef struct _LbxIncrementPixel xLbxIncrementPixelReq;
typedef struct _LbxModifySequence xLbxModifySequenceReq;
typedef struct _LbxQueryExtension xLbxQueryExtensionReq;
typedef struct _7D044E98E295B1AE6D053F4E096E3E34 xLbxQueryVersionReply;
typedef struct _88C1685F053777CC7A3B1D0ED0ED52E3 xMbufGetBufferInfoReq;
typedef struct _PanoramiXGetState xPanoramiXGetStateReq;
typedef struct _0394AD1A4355901AA0166B57E4564BFE xRRGetOutputInfoReply;
typedef struct _AF323DE6ACA1BD5E0BC0872A156AE035 xRRGetProviderInfoReq;
typedef struct _425D596FFB295BDC9ECE8B5455A7138C xRRGetScreenInfoReply;
typedef struct _366B0E14DFFB947D75CD3E464CBAF37C xRRSetCrtcConfigReply;
typedef struct _49A9C69F1FAAE36175A766361397A248 xRRSetScreenConfigReq;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordFreeContextReq;
typedef struct _989300C65D48D4487CD63431A5B756B7 xRenderFreePictureReq;
typedef struct _5E29C5FF94304EAD83140C47151323A4 xSetClipRectanglesReq;
typedef struct _0C1A989C237847E9E0FEF5D20B714342 xSetPointerMappingReq;
typedef struct _3C68DE36615A2A96935F4E8A62136411 xSetSelectionOwnerReq;
typedef struct _ShapeQueryExtents xShapeQueryExtentsReq;
typedef struct _ShapeQueryVersion xShapeQueryVersionReq;
typedef struct _AE25578E94EB9DEB13D122608361EF67 xShmQueryVersionReply;
typedef struct _xSyncAlarmNotifyEvent xSyncAlarmNotifyEvent;
typedef struct _xSyncChangeCounterReq xSyncChangeCounterReq;
typedef struct _xSyncCreateCounterReq xSyncCreateCounterReq;
typedef struct _15146D0240F64972E1BB855D6E1C4620 xSyncGetPriorityReply;
typedef struct _9D6FB564ED57422FFB268B9144C446E8 xTestInputActionEvent;
typedef struct _0F4B06D36BC906735A699C1D59FCE038 xTranslateCoordsReply;
typedef struct _4B29FBEAFEB74D66435D912679576990 xXCMiscGetXIDRangeReq;
typedef struct _XDGAFillRectangle xXDGAFillRectangleReq;
typedef struct _XF86DGAGetVidPage xXF86DGAGetVidPageReq;
typedef struct _XF86DGAGetVideoLL xXF86DGAGetVideoLLReq;
typedef struct _XF86DGASetVidPage xXF86DGASetVidPageReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesFetchRegionReq;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesUnionRegionReq;
typedef struct _AC4DD9D92E70F28730FDAF46AFF0094D xXIChangeHierarchyReq;
typedef struct _9116D1D1673D46BDBD8F6CDE5760A584 xXIDeviceChangedEvent;
typedef struct _A81A12901E1DD22594C62DD882F5E1C7 xXIGenericDeviceEvent;
typedef struct _XResResourceSizeSpec xXResResourceSizeSpec;
typedef struct _5CFC2639D93A82964D22ABF82B05BF7F xXTestGetVersionReply;
typedef struct _EFD6C7D4777DD13E0B1CDD145692A98C xXagQueryVersionReply;
typedef struct _322E4D740D2A723112F8227414848916 xXcupStoreColorsReply;
typedef struct _XevieQueryVersion xXevieQueryVersionReq;
struct xcb_char2b_iterator_t {xcb_char2b_t *data;int rem;int index;};
enum xcb_dri2_attachment_t {XCB_DRI2_ATTACHMENT_BUFFER_FRONT_LEFT = 0x0,XCB_DRI2_ATTACHMENT_BUFFER_BACK_LEFT = 0x1,XCB_DRI2_ATTACHMENT_BUFFER_FRONT_RIGHT = 0x2,XCB_DRI2_ATTACHMENT_BUFFER_BACK_RIGHT = 0x3,XCB_DRI2_ATTACHMENT_BUFFER_DEPTH = 0x4,XCB_DRI2_ATTACHMENT_BUFFER_STENCIL = 0x5,XCB_DRI2_ATTACHMENT_BUFFER_ACCUM = 0x6,XCB_DRI2_ATTACHMENT_BUFFER_FAKE_FRONT_LEFT = 0x7,XCB_DRI2_ATTACHMENT_BUFFER_FAKE_FRONT_RIGHT = 0x8,XCB_DRI2_ATTACHMENT_BUFFER_DEPTH_STENCIL = 0x9,XCB_DRI2_ATTACHMENT_BUFFER_HIZ = 0xA,};
enum xcb_dri2_event_type_t {XCB_DRI2_EVENT_TYPE_EXCHANGE_COMPLETE = 0x1,XCB_DRI2_EVENT_TYPE_BLIT_COMPLETE = 0x2,XCB_DRI2_EVENT_TYPE_FLIP_COMPLETE = 0x3,};
typedef xcb_focus_in_event_t xcb_focus_out_event_t;
struct xcb_format_iterator_t {xcb_format_t *data;int rem;int index;};
typedef xcb_value_error_t xcb_g_context_error_t;
typedef xcb_value_error_t xcb_id_choice_error_t;
enum xcb_randr_mode_flag_t {XCB_RANDR_MODE_FLAG_HSYNC_POSITIVE = 0x1,XCB_RANDR_MODE_FLAG_HSYNC_NEGATIVE = 0x2,XCB_RANDR_MODE_FLAG_VSYNC_POSITIVE = 0x4,XCB_RANDR_MODE_FLAG_VSYNC_NEGATIVE = 0x8,XCB_RANDR_MODE_FLAG_INTERLACE = 0x10,XCB_RANDR_MODE_FLAG_DOUBLE_SCAN = 0x20,XCB_RANDR_MODE_FLAG_CSYNC = 0x40,XCB_RANDR_MODE_FLAG_CSYNC_POSITIVE = 0x80,XCB_RANDR_MODE_FLAG_CSYNC_NEGATIVE = 0x100,XCB_RANDR_MODE_FLAG_HSKEW_PRESENT = 0x200,XCB_RANDR_MODE_FLAG_BCAST = 0x400,XCB_RANDR_MODE_FLAG_PIXEL_MULTIPLEX = 0x800,XCB_RANDR_MODE_FLAG_DOUBLE_CLOCK = 0x1000,XCB_RANDR_MODE_FLAG_HALVE_CLOCK = 0x2000,};
struct xcb_screen_iterator_t {xcb_screen_t *data;int rem;int index;};
enum xcb_send_event_dest_t {XCB_SEND_EVENT_DEST_POINTER_WINDOW = 0x0,XCB_SEND_EVENT_DEST_ITEM_FOCUS = 0x1,};
enum xcb_sync_alarmstate_t {XCB_SYNC_ALARMSTATE_ACTIVE = 0x0,XCB_SYNC_ALARMSTATE_INACTIVE = 0x1,XCB_SYNC_ALARMSTATE_DESTROYED = 0x2,};
enum xcb_x_print_ev_mask_t {XCB_X_PRINT_EV_MASK_NO_EVENT_MASK = 0x0,XCB_X_PRINT_EV_MASK_PRINT_MASK = 0x1,XCB_X_PRINT_EV_MASK_ATTRIBUTE_MASK = 0x2,};
enum xcb_x_print_get_doc_t {XCB_X_PRINT_GET_DOC_FINISHED = 0x0,XCB_X_PRINT_GET_DOC_SECOND_CONSUMER = 0x1,};
typedef char xcb_x_print_string8_t;
enum xcb_xkb_doodad_type_t {XCB_XKB_DOODAD_TYPE_OUTLINE = 0x1,XCB_XKB_DOODAD_TYPE_SOLID = 0x2,XCB_XKB_DOODAD_TYPE_TEXT = 0x3,XCB_XKB_DOODAD_TYPE_INDICATOR = 0x4,XCB_XKB_DOODAD_TYPE_LOGO = 0x5,};
enum xcb_xkb_groups_wrap_t {XCB_XKB_GROUPS_WRAP_WRAP_INTO_RANGE = 0x0,XCB_XKB_GROUPS_WRAP_CLAMP_INTO_RANGE = 0x40,XCB_XKB_GROUPS_WRAP_REDIRECT_INTO_RANGE = 0x80,};
enum xcb_xkb_name_detail_t {XCB_XKB_NAME_DETAIL_KEYCODES = 0x1,XCB_XKB_NAME_DETAIL_GEOMETRY = 0x2,XCB_XKB_NAME_DETAIL_SYMBOLS = 0x4,XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS = 0x8,XCB_XKB_NAME_DETAIL_TYPES = 0x10,XCB_XKB_NAME_DETAIL_COMPAT = 0x20,XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES = 0x40,XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES = 0x80,XCB_XKB_NAME_DETAIL_INDICATOR_NAMES = 0x100,XCB_XKB_NAME_DETAIL_KEY_NAMES = 0x200,XCB_XKB_NAME_DETAIL_KEY_ALIASES = 0x400,XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES = 0x800,XCB_XKB_NAME_DETAIL_GROUP_NAMES = 0x1000,XCB_XKB_NAME_DETAIL_RG_NAMES = 0x2000,};
enum xcb_xkb_sa_val_what_t {XCB_XKB_SA_VAL_WHAT_IGNORE_VAL = 0x0,XCB_XKB_SA_VAL_WHAT_SET_VAL_MIN = 0x1,XCB_XKB_SA_VAL_WHAT_SET_VAL_CENTER = 0x2,XCB_XKB_SA_VAL_WHAT_SET_VAL_MAX = 0x3,XCB_XKB_SA_VAL_WHAT_SET_VAL_RELATIVE = 0x4,XCB_XKB_SA_VAL_WHAT_SET_VAL_ABSOLUTE = 0x5,};
enum xcb_xkb_v_mods_high_t {XCB_XKB_V_MODS_HIGH_15 = 0x80,XCB_XKB_V_MODS_HIGH_14 = 0x40,XCB_XKB_V_MODS_HIGH_13 = 0x20,XCB_XKB_V_MODS_HIGH_12 = 0x10,XCB_XKB_V_MODS_HIGH_11 = 0x8,XCB_XKB_V_MODS_HIGH_10 = 0x4,XCB_XKB_V_MODS_HIGH_9 = 0x2,XCB_XKB_V_MODS_HIGH_8 = 0x1,};
typedef struct _xkbDeviceLedsWireDesc xkbDeviceLedsWireDesc;
typedef struct _xkbGetDeviceInfoReply xkbGetDeviceInfoReply;
typedef struct _xkbGetIndicatorMap xkbGetIndicatorMapReq;
typedef struct _xkbKTMapEntryWireDesc xkbKTMapEntryWireDesc;
typedef struct _xkbLogoDoodadWireDesc xkbLogoDoodadWireDesc;
typedef struct _xkbOverlayKeyWireDesc xkbOverlayKeyWireDesc;
typedef struct _xkbOverlayRowWireDesc xkbOverlayRowWireDesc;
typedef struct _xkbSetIndicatorMap xkbSetIndicatorMapReq;
typedef struct _xkbTextDoodadWireDesc xkbTextDoodadWireDesc;
enum xt_rateest_match_mode {XT_RATEEST_MATCH_NONE = 0x0,XT_RATEEST_MATCH_EQ = 0x1,XT_RATEEST_MATCH_LT = 0x2,XT_RATEEST_MATCH_GT = 0x3,};
typedef struct _819D62649EAF67B78691543FCA1EE6A8 xvGetPortAttributeReq;
typedef struct _9A02475B75BDC9A6C1FC81F46F9E4217 xvListImageFormatsReq;
typedef struct _QueryEncodingsReply xvQueryEncodingsReply;
typedef struct _QueryExtensionReply xvQueryExtensionReply;
typedef struct _6E58DE7E5977316D543695706C282257 xvSelectPortNotifyReq;
typedef struct _B5E8E02F7A52D99CF4C865E96F59C543 xvSetPortAttributeReq;
typedef struct _55D1EED960AB10AAD38BEA1E9F59F1B6 xvmcDestroyContextReq;
typedef struct _C260757490C306CA273BB590CB913883 xvmcDestroySurfaceReq;
typedef struct _A1A32FB2C00492E90944DE52B5668962 xvmcQueryVersionReply;
typedef struct Dwarf_Regtable_Entry_s Dwarf_Regtable_Entry;
typedef struct _IOCTL_Command_struct IOCTL_Command_struct;
enum MACRO_BitmapNoMemory {BitmapNoMemory = 3,};
enum MACRO_CDROMCLOSETRAY {CDROMCLOSETRAY = 0x5319,};
enum MACRO_CDROMREADAUDIO {CDROMREADAUDIO = 0x530E,};
enum MACRO_CDROMREADMODE1 {CDROMREADMODE1 = 0x530D,};
enum MACRO_CDROMREADMODE2 {CDROMREADMODE2 = 0x530C,};
enum MACRO_CISS_PARSCSIU2 {CISS_PARSCSIU2 = 0x1,CISS_PARCSCIU3 = 0x2,CISS_FIBRE1G = 0x100,CISS_FIBRE2G = 0x200,};
enum MACRO_CI_PREDICTOR_2 {CI_PREDICTOR_2 = 2,};
enum MACRO_CYGETCD1400VER {CYGETCD1400VER = 0x435910,};
enum MACRO_CYGETDEFTHRESH {CYGETDEFTHRESH = 0x435904,};
enum MACRO_CYSETDEFTHRESH {CYSETDEFTHRESH = 0x435905,};
enum MACRO_CirculateEvent {lbxsz_CirculateEvent = 20,lbxupsz_CirculateEvent = 17,};
enum MACRO_ClipByChildren {ClipByChildren = 0,IncludeInferiors = 1,};
enum MACRO_CopyFromParent {CopyFromParent = 0,};
enum MACRO_DEFAULT_RIGHTS {DEFAULT_RIGHTS = 983297,};
enum MACRO_DeviceDisabled {DeviceDisabled = 3,DeviceUnrecoverable = 4,};
enum MACRO_DmxBadXinerama {DmxBadXinerama = 1001,};
enum MACRO_FDSETEMSGTRESH {FDSETEMSGTRESH = 586,};
enum MACRO_FD_RECALIBRATE {FD_RECALIBRATE = 0x7,FD_SEEK = 0xF,FD_READ = 0xE6,FD_WRITE = 0xC5,FD_SENSEI = 0x8,FD_SPECIFY = 0x3,FD_FORMAT = 0x4D,FD_VERSION = 0x10,FD_CONFIGURE = 0x13,FD_PERPENDICULAR = 0x12,FD_GETSTATUS = 0x4,FD_DUMPREGS = 0xE,FD_READID = 0xEA,FD_UNLOCK = 0x14,FD_LOCK = 0x94,FD_RSEEK_OUT = 0x8F,FD_RSEEK_IN = 0xCF,FD_PARTID = 0x18,FD_SAVE = 0x2E,FD_DRIVESPEC = 0x8E,FD_RESTORE = 0x4E,FD_POWERDOWN = 0x27,FD_FORMAT_N_WRITE = 0xEF,FD_OPTION = 0x33,};
enum MACRO_FPEResetFailed {FPEResetFailed = 89,};
enum MACRO_FamilyInternet {FamilyInternet = 0,FamilyDECnet = 1,FamilyChaos = 2,};
enum MACRO_FollowKeyboard {FollowKeyboard = 3,};
enum MACRO_GENumberErrors {GENumberErrors = 0,};
enum MACRO_GENumberEvents {GENumberEvents = 0,};
enum MACRO_GXcopyInverted {GXcopyInverted = 0xC,};
enum MACRO_GfxExposeEvent {lbxsz_GfxExposeEvent = 24,lbxupsz_GfxExposeEvent = 21,};
enum MACRO_GraphicsExpose {GraphicsExpose = 13,};
enum MACRO_IN_LOOPBACKNET {IN_LOOPBACKNET = 127,};
enum MACRO_InputClassBits {InputClassBits = 0x3F,};
enum MACRO_KeyButtonEvent {lbxsz_KeyButtonEvent = 32,lbxupsz_KeyButtonEvent = 31,};
enum MACRO_LbxListenToAll {LbxListenToAll = 6,};
enum MACRO_LbxListenToOne {LbxListenToOne = 5,};
enum MACRO_LbxSwitchEvent {LbxSwitchEvent = 0,LbxCloseEvent = 1,LbxDeltaEvent = 2,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 64,};
enum MACRO_MODE_SELECT_10 {MODE_SELECT_10 = 0x55,};
enum MACRO_MSR_IA32_POWER {MSR_IA32_POWER_CTL = 0x1FC,MSR_IA32_MC0_CTL = 0x400,MSR_IA32_MC0_STATUS = 0x401,MSR_IA32_MC0_ADDR = 0x402,MSR_IA32_MC0_MISC = 0x403,MSR_PKG_C3_RESIDENCY = 0x3F8,MSR_PKG_C6_RESIDENCY = 0x3F9,MSR_PKG_C7_RESIDENCY = 0x3FA,MSR_CORE_C3_RESIDENCY = 0x3FC,MSR_CORE_C6_RESIDENCY = 0x3FD,MSR_CORE_C7_RESIDENCY = 0x3FE,MSR_PKG_C2_RESIDENCY = 0x60D,MSR_PKG_C8_RESIDENCY = 0x630,MSR_PKG_C9_RESIDENCY = 0x631,MSR_PKG_C10_RESIDENCY = 0x632,MSR_RAPL_POWER_UNIT = 0x606,MSR_PKG_POWER_LIMIT = 0x610,MSR_PKG_ENERGY_STATUS = 0x611,MSR_PKG_PERF_STATUS = 0x613,MSR_PKG_POWER_INFO = 0x614,MSR_DRAM_POWER_LIMIT = 0x618,MSR_DRAM_ENERGY_STATUS = 0x619,MSR_DRAM_PERF_STATUS = 0x61B,MSR_DRAM_POWER_INFO = 0x61C,MSR_PP0_POWER_LIMIT = 0x638,MSR_PP0_ENERGY_STATUS = 0x639,MSR_PP0_POLICY = 0x63A,MSR_PP0_PERF_STATUS = 0x63B,MSR_PP1_POWER_LIMIT = 0x640,MSR_PP1_ENERGY_STATUS = 0x641,MSR_PP1_POLICY = 0x642,MSR_AMD64_MC0_MASK = 0xC0010044,MSR_IA32_MC0_CTL2 = 0x280,MSR_P6_PERFCTR0 = 0xC1,MSR_P6_PERFCTR1 = 0xC2,MSR_P6_EVNTSEL0 = 0x186,MSR_P6_EVNTSEL1 = 0x187,MSR_KNC_PERFCTR0 = 0x20,MSR_KNC_PERFCTR1 = 0x21,MSR_KNC_EVNTSEL0 = 0x28,MSR_KNC_EVNTSEL1 = 0x29,MSR_IA32_PMC0 = 0x4C1,MSR_AMD64_PATCH_LEVEL = 0x8B,MSR_AMD64_TSC_RATIO = 0xC0000104,MSR_AMD64_NB_CFG = 0xC001001F,MSR_AMD64_PATCH_LOADER = 0xC0010020,MSR_AMD64_OSVW_ID_LENGTH = 0xC0010140,MSR_AMD64_OSVW_STATUS = 0xC0010141,MSR_AMD64_DC_CFG = 0xC0011022,MSR_AMD64_BU_CFG2 = 0xC001102A,MSR_AMD64_IBSFETCHCTL = 0xC0011030,MSR_AMD64_IBSFETCHLINAD = 0xC0011031,MSR_AMD64_IBSFETCHPHYSAD = 0xC0011032,MSR_AMD64_IBSFETCH_REG_COUNT = 0x3,MSR_AMD64_IBSFETCH_REG_MASK = 0x7,MSR_AMD64_IBSOPCTL = 0xC0011033,MSR_AMD64_IBSOPRIP = 0xC0011034,MSR_AMD64_IBSOPDATA = 0xC0011035,MSR_AMD64_IBSOPDATA2 = 0xC0011036,MSR_AMD64_IBSOPDATA3 = 0xC0011037,MSR_AMD64_IBSDCLINAD = 0xC0011038,MSR_AMD64_IBSDCPHYSAD = 0xC0011039,MSR_AMD64_IBSOP_REG_COUNT = 0x7,MSR_AMD64_IBSOP_REG_MASK = 0x7F,MSR_AMD64_IBSCTL = 0xC001103A,MSR_AMD64_IBSBRTARGET = 0xC001103B,MSR_AMD64_IBS_REG_COUNT_MAX = 0x8,MSR_F16H_L2I_PERF_CTL = 0xC0010230,MSR_F16H_L2I_PERF_CTR = 0xC0010231,MSR_F15H_PERF_CTL = 0xC0010200,MSR_F15H_PERF_CTR = 0xC0010201,MSR_F15H_NB_PERF_CTL = 0xC0010240,MSR_F15H_NB_PERF_CTR = 0xC0010241,MSR_FAM10H_MMIO_CONF_BASE = 0xC0010058,};
enum MACRO_MSR_IA32_THERM {MSR_IA32_THERM_STATUS = 0x19C,};
enum MACRO_MTSETDRVBUFFER {MTSETDRVBUFFER = 24,};
enum MACRO_MapNotifyEvent {lbxsz_MapNotifyEvent = 16,lbxupsz_MapNotifyEvent = 13,};
enum MACRO_MappingSuccess {MappingSuccess = 0,MappingBusy = 1,MappingFailed = 2,};
enum MACRO_NCURSES_BUTTON {NCURSES_BUTTON_RELEASED = 0x1,NCURSES_BUTTON_PRESSED = 0x2,NCURSES_BUTTON_CLICKED = 0x4,NCURSES_DOUBLE_CLICKED = 0x8,NCURSES_TRIPLE_CLICKED = 0x10,NCURSES_RESERVED_EVENT = 0x20,};
enum MACRO_NCURSES_UNCTRL {NCURSES_UNCTRL_H_incl = 1,};
enum MACRO_NUMPTSTOBUFFER {NUMPTSTOBUFFER = 200,};
enum MACRO_NotifyAncestor {NotifyAncestor = 0,NotifyVirtual = 1,NotifyInferior = 2,};
enum MACRO_PMAPVERS_PROTO {PMAPVERS_PROTO = 2,PMAPVERS_ORIG = 1,};
enum MACRO_PPPIOCXFERUNIT {PPPIOCXFERUNIT = 29774,};
enum MACRO_PTHREAD_SYSTEM {PTHREAD_SYSTEM_SCHED_SUPPORTED = 1,};
enum MACRO_ParentRelative {ParentRelative = 1,};
enum MACRO_PictOpHSLColor {PictOpHSLColor = 0x3D,};
enum MACRO_PictOpMultiply {PictOpMultiply = 0x30,};
enum MACRO_PictOpSaturate {PictOpSaturate = 13,};
enum MACRO_PropTypeString {PropTypeString = 0,PropTypeUnsigned = 1,PropTypeSigned = 2,};
enum MACRO_PropertyNotify {PropertyNotify = 28,};
enum MACRO_RESERVED_EVENT {BUTTON1_RESERVED_EVENT = 32,BUTTON2_RESERVED_EVENT = 2048,BUTTON3_RESERVED_EVENT = 131072,BUTTON4_RESERVED_EVENT = 8388608,};
enum MACRO_RRNumberErrors {RRNumberErrors = 4,};
enum MACRO_RRNumberEvents {RRNumberEvents = 2,};
enum MACRO_RecordMaxError {RecordMaxError = 255,};
enum MACRO_RecordMaxEvent {RecordMaxEvent = 127,};
enum MACRO_ReparentNotify {ReparentNotify = 21,};
enum MACRO_ReplayKeyboard {ReplayKeyboard = 5,};
enum MACRO_SACK_PERMITTED {TCPOPT_SACK_PERMITTED = 4,TCPOLEN_SACK_PERMITTED = 2,};
enum MACRO_SENSEINFOBYTES {SENSEINFOBYTES = 32,};
enum MACRO_SET_MPC_PARAMS {SET_MPC_PARAMS = 110,};
enum MACRO_SIOCAIPXITFCRT {SIOCAIPXITFCRT = 35296,};
enum MACRO_SIOCAIPXPRISLT {SIOCAIPXPRISLT = 35297,};
enum MACRO_SIOCAX25ADDFWD {SIOCAX25ADDFWD = 35306,};
enum MACRO_SIOCAX25ADDUID {SIOCAX25ADDUID = 35297,};
enum MACRO_SIOCAX25CTLCON {SIOCAX25CTLCON = 35304,};
enum MACRO_SIOCAX25DELFWD {SIOCAX25DELFWD = 35307,};
enum MACRO_SIOCAX25DELUID {SIOCAX25DELUID = 35298,};
enum MACRO_SIOCAX25GETUID {SIOCAX25GETUID = 35296,};
enum MACRO_SIOCDEVPRIVATE {SIOCDEVPRIVATE = 0x89F0,};
enum MACRO_SIOCGDEBSERINT {SIOCGDEBSERINT = 35314,};
enum MACRO_SIOCGIFBRDADDR {SIOCGIFBRDADDR = 0x8919,};
enum MACRO_SIOCGIFDSTADDR {SIOCGIFDSTADDR = 0x8917,};
enum MACRO_SIOCGIFNETMASK {SIOCGIFNETMASK = 0x891B,};
enum MACRO_SIOCGKEEPALIVE {SIOCGKEEPALIVE = 35313,};
enum MACRO_SIOCGMEDIABUSY {SIOCGMEDIABUSY = 35316,};
enum MACRO_SIOCGPPPCSTATS {SIOCGPPPCSTATS = 35314,};
enum MACRO_SIOCGRECEIVING {SIOCGRECEIVING = 35317,};
enum MACRO_SIOCIPXCFGDATA {SIOCIPXCFGDATA = 35298,};
enum MACRO_SIOCIPXNCPCONN {SIOCIPXNCPCONN = 35299,};
enum MACRO_SIOCNRGETPARMS {SIOCNRGETPARMS = 35296,};
enum MACRO_SIOCNRSETPARMS {SIOCNRSETPARMS = 35297,};
enum MACRO_SIOCSBANDWIDTH {SIOCSBANDWIDTH = 35314,};
enum MACRO_SIOCSBPQETHOPT {SIOCSBPQETHOPT = 35312,};
enum MACRO_SIOCSDEBSERINT {SIOCSDEBSERINT = 35315,};
enum MACRO_SIOCSIFBRDADDR {SIOCSIFBRDADDR = 0x891A,};
enum MACRO_SIOCSIFDSTADDR {SIOCSIFDSTADDR = 0x8918,};
enum MACRO_SIOCSIFNETMASK {SIOCSIFNETMASK = 0x891C,};
enum MACRO_SIOCSKEEPALIVE {SIOCSKEEPALIVE = 35312,};
enum MACRO_SIOCSMEDIABUSY {SIOCSMEDIABUSY = 35315,};
enum MACRO_SNDRV_COMPRESS {SNDRV_COMPRESS_VERSION = 257,SNDRV_COMPRESS_PAUSE = 17200,SNDRV_COMPRESS_RESUME = 17201,SNDRV_COMPRESS_START = 17202,SNDRV_COMPRESS_STOP = 17203,SNDRV_COMPRESS_DRAIN = 17204,SNDRV_COMPRESS_NEXT_TRACK = 17205,SNDRV_COMPRESS_PARTIAL_DRAIN = 17206,};
enum MACRO_SaveSetNearest {SaveSetNearest = 0,SaveSetRoot = 1,};
enum MACRO_ScreenSaverOff {ScreenSaverOff = 0,ScreenSaverOn = 1,ScreenSaverCycle = 2,};
enum MACRO_SelectionClear {SelectionClear = 29,};
enum MACRO_TASKSTATS_GENL {TASKSTATS_GENL_VERSION = 0x1,};
enum MACRO_TIOCGLCKTRMIOS {TIOCGLCKTRMIOS = 0x5456,};
enum MACRO_TIOCSERGSTRUCT {TIOCSERGSTRUCT = 0x5458,};
enum MACRO_TIOCSLCKTRMIOS {TIOCSLCKTRMIOS = 0x5457,};
enum MACRO_WDIOF_OVERHEAT {WDIOF_OVERHEAT = 0x1,WDIOF_FANFAULT = 0x2,WDIOF_EXTERN1 = 0x4,WDIOF_EXTERN2 = 0x8,WDIOF_POWERUNDER = 0x10,WDIOF_CARDRESET = 0x20,WDIOF_POWEROVER = 0x40,WDIOF_SETTIMEOUT = 0x80,WDIOF_MAGICCLOSE = 0x100,WDIOF_PRETIMEOUT = 0x200,WDIOF_ALARMONLY = 0x400,WDIOF_KEEPALIVEPING = 0x8000,};
enum MACRO_WithdrawnState {WithdrawnState = 0,NormalState = 1,};
enum MACRO_XIGrabModeSync {XIGrabModeSync = 0,XIGrabModeAsync = 1,XIGrabModeTouch = 2,};
enum MACRO_XIMPreeditArea {XIMPreeditArea = 0x1,XIMPreeditCallbacks = 0x2,XIMPreeditPosition = 0x4,XIMPreeditNothing = 0x8,XIMPreeditNone = 0x10,XIMStatusArea = 0x100,XIMStatusCallbacks = 0x200,XIMStatusNothing = 0x400,XIMStatusNone = 0x800,};
enum MACRO_XIModeRelative {XIModeRelative = 0,XIModeAbsolute = 1,};
enum MACRO_XINotifyNormal {XINotifyNormal = 0,XINotifyGrab = 1,XINotifyUngrab = 2,};
enum MACRO_XISlavePointer {XISlavePointer = 3,XISlaveKeyboard = 4,};
enum MACRO_XInput_Initial {XInput_Initial_Release = 1,XInput_Add_XDeviceBell = 2,XInput_Add_XSetDeviceValuators = 3,XInput_Add_XChangeDeviceControl = 4,XInput_Add_DevicePresenceNotify = 5,XInput_Add_DeviceProperties = 6,};
enum MACRO_XSyncCACounter {XSyncCACounter = 1,XSyncCAValueType = 2,XSyncCAValue = 4,XSyncCATestType = 8,XSyncCADelta = 16,XSyncCAEvents = 32,};
enum MACRO_XTestEXCLUSIVE {XTestEXCLUSIVE = 1,};
enum MACRO_X_BigReqEnable {X_BigReqEnable = 0,};
enum MACRO_XagBadAppGroup {XagBadAppGroup = 0,XagNumberErrors = 1,};
enum MACRO_XagNwhitePixel {XagNwhitePixel = 5,};
enum MACRO_XkbDfltXIClass {XkbDfltXIClass = 0x300,XkbDfltXIId = 0x400,};
enum MACRO_XkbGeomAllMask {XkbGeomAllMask = 0x3F,};
enum MACRO_XkbGroup1Index {XkbGroup1Index = 0,XkbGroup2Index = 1,XkbGroup3Index = 2,};
enum MACRO_XkbGroup4Index {XkbGroup4Index = 3,};
enum MACRO_XkbKeypadIndex {XkbKeypadIndex = 3,};
enum MACRO_XkbMaxKbdGroup {XkbMaxKbdGroup = 3,XkbMaxMouseKeysBtn = 4,};
enum MACRO_XkbMaxKeyCount {XkbMaxKeyCount = 248,};
enum MACRO_XkbMaxKeyTypes {XkbMaxKeyTypes = 255,};
enum MACRO_XkbNamesNotify {XkbNamesNotify = 6,};
enum MACRO_XkbNoIndicator {XkbNoIndicator = 0xFF,};
enum MACRO_XvBadExtension {XvBadExtension = 1,XvAlreadyGrabbed = 2,};
enum MACRO_XvMCBadContext {XvMCBadContext = 0,XvMCBadSurface = 1,XvMCBadSubpicture = 2,};
enum MACRO_XvNoReasonMask {XvNoReasonMask = 0,};
enum MACRO__BITS_IPCTYPES {_BITS_IPCTYPES_H = 1,};
enum MACRO__BITS_SOCKADDR {_BITS_SOCKADDR_H = 1,};
enum MACRO__NET_IF_SHAPER {_NET_IF_SHAPER_H = 1,};
enum MACRO__POSIX_PTHREAD {_POSIX_PTHREAD_SEMANTICS = 1,};
enum MACRO__POSIX_THREADS {_POSIX_THREADS = 200809,_POSIX_REENTRANT_FUNCTIONS = 1,_POSIX_THREAD_SAFE_FUNCTIONS = 200809,_POSIX_THREAD_PRIORITY_SCHEDULING = 200809,_POSIX_THREAD_ATTR_STACKSIZE = 200809,_POSIX_THREAD_ATTR_STACKADDR = 200809,_POSIX_THREAD_PRIO_INHERIT = 200809,_POSIX_THREAD_PRIO_PROTECT = 200809,_POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809,_POSIX_THREAD_ROBUST_PRIO_PROTECT = -1,_POSIX_SEMAPHORES = 200809,_POSIX_REALTIME_SIGNALS = 200809,_POSIX_ASYNCHRONOUS_IO = 200809,_POSIX_ASYNC_IO = 1,};
enum MACRO__POSIX_V7_LP64 {_POSIX_V7_LP64_OFF64 = 1,_POSIX_V6_LP64_OFF64 = 1,};
enum MACRO__SYS_SYSMACROS {_SYS_SYSMACROS_H = 1,_BITS_PTHREADTYPES_H = 1,};
enum MACRO__XOPEN_STREAMS {_XOPEN_STREAMS = -1,};
enum MACRO__XOPEN_VERSION {_XOPEN_VERSION = 700,_XOPEN_XCU_VERSION = 4,_XOPEN_XPG2 = 1,_XOPEN_XPG3 = 1,_XOPEN_XPG4 = 1,_XOPEN_UNIX = 1,_XOPEN_CRYPT = 1,_XOPEN_ENH_I18N = 1,_XOPEN_LEGACY = 1,};
enum MACRO___FILE_defined {__FILE_defined = 1,____FILE_defined = 1,};
enum MACRO___USE_ISOC11_0 {__USE_ISOC11 = 1,};
enum MACRO___have_siginfo {__have_siginfo_t = 1,};
enum MACRO_sz_RECORDRANGE {sz_RECORDRANGE = 24,sz_xRecordRange = 24,sz_xRecordQueryVersionReq = 8,sz_xRecordQueryVersionReply = 32,sz_xRecordCreateContextReq = 20,sz_xRecordRegisterClientsReq = 20,sz_xRecordUnregisterClientsReq = 12,sz_xRecordGetContextReq = 8,sz_xRecordGetContextReply = 32,sz_xRecordEnableContextReq = 8,sz_xRecordEnableContextReply = 32,sz_xRecordDisableContextReq = 8,sz_xRecordFreeContextReq = 8,};
enum MACRO_sz_xDbeVisInfo {sz_xDbeVisInfo = 8,sz_xDbeGetVersionReq = 8,sz_xDbeGetVersionReply = 32,sz_xDbeAllocateBackBufferNameReq = 16,sz_xDbeDeallocateBackBufferNameReq = 8,sz_xDbeSwapBuffersReq = 8,sz_xDbeBeginIdiomReq = 4,sz_xDbeEndIdiomReq = 4,sz_xDbeGetVisualInfoReq = 8,sz_xDbeGetVisualInfoReply = 32,sz_xDbeGetBackBufferAttributesReq = 8,sz_xDbeGetBackBufferAttributesReply = 32,};
enum MACRO_sz_xXResClient {sz_xXResClient = 8,sz_xXResType = 8,sz_xXResQueryVersionReq = 8,sz_xXResQueryVersionReply = 32,sz_xXResQueryClientsReq = 4,sz_xXResQueryClientsReply = 32,sz_xXResQueryClientResourcesReq = 8,sz_xXResQueryClientResourcesReply = 32,sz_xXResQueryClientPixmapBytesReq = 8,sz_xXResQueryClientPixmapBytesReply = 32,};
enum MACRO_xvmcNumRequest {xvmcNumRequest = 10,};
typedef struct _586CBC0EC33709906F5B6EA510EDE79F XGraphicsExposeEvent;
typedef struct _FED59B4CD78CD28406B031702718F8F9 XSelectionClearEvent;
typedef struct _6DC10CFFA94DA978AABC1A085F692023 XSetWindowAttributes;
typedef struct _XkbComponentNames *XkbComponentNamesPtr;
typedef struct _XkbComponentNames XkbComponentNamesRec;
typedef struct _XkbRedirectKeyAction XkbRedirectKeyAction;
typedef unsigned int _Unwind_Internal_Ptr;
struct _XkbDeviceLedChanges {unsigned __int16 led_class;unsigned __int16 led_id;unsigned int defined;struct _XkbDeviceLedChanges *next;};
struct _XkbIndicatorChanges {unsigned int state_changes;unsigned int map_changes;};
typedef unsigned __int16 __kernel_sa_family_t;
struct __libc_lock_opaque__;
enum atscmh_rs_frame_mode {ATSCMH_RSFRAME_PRI_ONLY = 0x0,ATSCMH_RSFRAME_PRI_SEC = 0x1,ATSCMH_RSFRAME_RES = 0x2,};
typedef struct _cciss_coalint_struct cciss_coalint_struct;
enum ctattr_protoinfo_tcp {CTA_PROTOINFO_TCP_UNSPEC = 0x0,CTA_PROTOINFO_TCP_STATE = 0x1,CTA_PROTOINFO_TCP_WSCALE_ORIGINAL = 0x2,CTA_PROTOINFO_TCP_WSCALE_REPLY = 0x3,CTA_PROTOINFO_TCP_FLAGS_ORIGINAL = 0x4,CTA_PROTOINFO_TCP_FLAGS_REPLY = 0x5,__CTA_PROTOINFO_TCP_MAX = 0x6,};
enum dccp_feature_numbers {DCCPF_RESERVED = 0x0,DCCPF_CCID = 0x1,DCCPF_SHORT_SEQNOS = 0x2,DCCPF_SEQUENCE_WINDOW = 0x3,DCCPF_ECN_INCAPABLE = 0x4,DCCPF_ACK_RATIO = 0x5,DCCPF_SEND_ACK_VECTOR = 0x6,DCCPF_SEND_NDP_COUNT = 0x7,DCCPF_MIN_CSUM_COVER = 0x8,DCCPF_DATA_CHECKSUM = 0x9,DCCPF_MIN_CCID_SPECIFIC = 0x80,DCCPF_SEND_LEV_RATE = 0xC0,DCCPF_MAX_CCID_SPECIFIC = 0xFF,};
typedef struct _B2D1347A7314B3F7BD8A6C26E40DE0B3 deviceKeyStateNotify;
typedef struct _3D7F29ED0930CC4F7BF457E53790E4B5 devicePresenceNotify;
typedef struct _F1BE47758A5CB841C0CD1587E7EC02C0 devicePropertyNotify;
enum fc_els_rps_resp_flag {FC_ELS_RPS_LPEV = 0x1,};
enum fc_els_rscn_addr_fmt {ELS_ADDR_FMT_PORT = 0x0,ELS_ADDR_FMT_AREA = 0x1,ELS_ADDR_FMT_DOM = 0x2,ELS_ADDR_FMT_FAB = 0x3,};
typedef struct _9260E9DF4F900591ED372CA82BEE9A23 fsAccessContextError;
typedef struct _29DBA087DFE16744A29CB8F8CD68D43B fsCreateACExtraReply;
typedef struct _B8340C644CDB6E95F3781F01B22F6B41 fsGetCataloguesReply;
typedef struct _90E70BB8598364AAEAF6E156E433A864 fsGetResolutionReply;
struct hs_volume_descriptor {char foo[8];char type[1];char id[5];char version[1];char data[2033];};
struct ipx_route_definition {unsigned __int64 ipx_network;unsigned __int64 ipx_router_network;unsigned __int8 ipx_router_node[6];};
typedef struct _10D33281027157B4990D02C2868FA96A isdn_net_ioctl_phone;
enum nubus_display_res_id {NUBUS_RESID_GAMMADIR = 0x40,NUBUS_RESID_FIRSTMODE = 0x80,NUBUS_RESID_SECONDMODE = 0x81,NUBUS_RESID_THIRDMODE = 0x82,NUBUS_RESID_FOURTHMODE = 0x83,NUBUS_RESID_FIFTHMODE = 0x84,NUBUS_RESID_SIXTHMODE = 0x85,};
typedef union _78749F0999040F0464754753F1A300EC pthread_rwlockattr_t;
struct r3964_client_message {int msg_id;int arg;int error_code;};
typedef int snd_ctl_elem_iface_t;
struct snd_hwdep_dsp_status {unsigned int version;unsigned __int8 id[32];unsigned int num_dsps;unsigned int dsp_loaded;unsigned int chip_ready;unsigned __int8 reserved[16];};
struct snd_sb_csp_mc_header {char codec_name[16];unsigned __int16 func_req;};
typedef unsigned __int8 snd_seq_event_type_t;
struct snd_seq_queue_client {int queue;int client;int used;char reserved[64];};
struct snd_seq_running_info {unsigned __int8 client;unsigned __int8 big_endian;unsigned __int8 cpu_mode;unsigned __int8 pad;unsigned __int8 reserved[12];};
enum sndrv_ctl_event_type {SNDRV_CTL_EVENT_ELEM = 0x0,SNDRV_CTL_EVENT_LAST = 0x0,};
struct soundfont_patch_info {unsigned __int16 key;__int16 device_no;unsigned __int16 sf_id;__int16 optarg;int len;__int16 type;__int16 reserved;};
struct soundfont_voice_parm {unsigned __int16 moddelay;unsigned __int16 modatkhld;unsigned __int16 moddcysus;unsigned __int16 modrelease;__int16 modkeyhold;__int16 modkeydecay;unsigned __int16 voldelay;unsigned __int16 volatkhld;unsigned __int16 voldcysus;unsigned __int16 volrelease;__int16 volkeyhold;__int16 volkeydecay;unsigned __int16 lfo1delay;unsigned __int16 lfo2delay;unsigned __int16 pefe;unsigned __int16 fmmod;unsigned __int16 tremfrq;unsigned __int16 fm2frq2;unsigned __int8 cutoff;unsigned __int8 filterQ;unsigned __int8 chorus;unsigned __int8 reverb;unsigned __int16 reserved[4];};
typedef struct _EEC12600E3B3BC42C851475B8200B3A2 sync_serial_settings;
struct usbdevfs_connectinfo {unsigned int devnum;unsigned __int8 slow;};
enum v4l2_mpeg_audio_mode {V4L2_MPEG_AUDIO_MODE_STEREO = 0x0,V4L2_MPEG_AUDIO_MODE_JOINT_STEREO = 0x1,V4L2_MPEG_AUDIO_MODE_DUAL = 0x2,V4L2_MPEG_AUDIO_MODE_MONO = 0x3,};
struct vm86plus_info_struct {unsigned __int64 force_return_for_pic : 1;unsigned __int64 vm86dbg_active : 1;unsigned __int64 vm86dbg_TFpendig : 1;unsigned __int64 unused : 28;unsigned __int64 is_vm86pus : 1;unsigned __int8 vm86dbg_intxxtab[32];};
typedef struct _91B6CB490464A345E007449761AA48F2 xAllocColorPlanesReq;
typedef struct _F683121DA6B0B811B23B9D483FF7482A xConvertSelectionReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXGetInputCountReq;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXRemoveInputReply;
typedef struct _DA732864DAD897F0B587BCCAD8E078EE xDPMSGetVersionReply;
typedef struct _D570BD474412728E81DF3D371018F9FB xDRI2AuthenticateReq;
typedef struct _A18F96C8DBFB2F1615E2CE49B44750F7 xDRI2CopyRegionReply;
typedef struct _2E8E071D0F1855B453728BF138794906 xDRI2GetBuffersReply;
typedef struct _3F0A60266B45B227E929296904C751DD xDRI2QueryVersionReq;
typedef struct _3F85C0DE38758494B25116473C086153 xDRI2SwapIntervalReq;
typedef struct _0782F5328933DE790EA437AB6F909CFD xDbeBufferAttributes;
typedef struct _8FB70F9DF6D59D5E0632B90366E8D2D5 xDbeGetVisualInfoReq;
typedef struct _4C6B28AF05B44434FD231A2EDF3D1534 xDeviceAbsCalibState;
typedef struct _3B895FF4AB049C141C5F7C25E8036379 xDeviceResolutionCtl;
typedef struct _XEVIGetVisualInfoReq xEVIGetVisualInfoReq;
typedef struct _8608EF80BDF2C775EBE0E30BF11DBE52 xGEQueryVersionReply;
typedef struct _C16308A46254792F555119C61B977CA2 xGetDeviceControlReq;
typedef struct _76C432023C30A60D6F0CA03B71EF1A2A xGetDeviceFocusReply;
typedef struct _621D16500987A711CC39A0AD4484DBF8 xGetScreenSaverReply;
typedef struct _5763F2EC7349805D26B2ED34581CC2B6 xGrabDeviceButtonReq;
typedef struct _0E6A401F8BD845D438E717B135D77D29 xLbxGetPropertyReply;
typedef struct _CF062F67C3439FCE826EEADEB80EF798 xLbxInternAtomsReply;
typedef struct _LbxInvalidateTag xLbxInvalidateTagReq;
typedef struct _LbxListenToAllEvent xLbxListenToAllEvent;
typedef struct _LbxListenToOneEvent xLbxListenToOneEvent;
typedef struct _LbxReleaseCmapEvent xLbxReleaseCmapEvent;
typedef struct _LbxSendTagDataEvent xLbxSendTagDataEvent;
typedef struct _5E8F645B7662834A694E868B27EBBB24 xListExtensionsReply;
typedef struct _3BEEF239534EE9E2D4AD58999E56F197 xListInputDevicesReq;
typedef struct _C65DFB72B3FBEEE777E9E71274DF712D xListPropertiesReply;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xQueryDeviceStateReq;
typedef struct _C32D75228195D08F6D42072DC87ED14F xQueryExtensionReply;
typedef struct _F21D8018CF145B47A329D27C35E96B99 xQueryTextExtentsReq;
typedef struct _53D806E392066563D2EB8AD5676DF4C5 xRRGetCrtcGammaReply;
typedef struct _86FF50E5653523180B04F1ED7D105C35 xRRGetProvidersReply;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xRRQueryVersionReply;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordGetContextReq;
typedef struct _2AC87F894EE3258143DDE890FCFACB0D xRenderFreeGlyphsReq;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTrapezoidsReq;
typedef struct _F8536B884003ADBD90188302B8AD267C xRotatePropertiesReq;
typedef struct _ShapeSelectInput xShapeSelectInputReq;
typedef struct _70CE59A0CFDF5BD02F17410240B55142 xStringFeedbackState;
typedef struct _xSyncDestroyAlarmReq xSyncDestroyAlarmReq;
typedef struct _xSyncDestroyFenceReq xSyncDestroyFenceReq;
typedef struct _4CEF0DA0B6BB912CC29F60746948E744 xSyncInitializeReply;
typedef struct _281923904974B9915ABD548A82CFE427 xSyncQueryAlarmReply;
typedef struct _xSyncQueryCounterReq xSyncQueryCounterReq;
typedef struct _20B3D843FDD34C018CF0822ABEE24A07 xSyncQueryFenceReply;
typedef struct _xSyncTriggerFenceReq xSyncTriggerFenceReq;
typedef struct _C1A5A3DCCCA94F161802FCE22321BD34 xXCMiscGetVersionReq;
typedef struct _FFD82B8BDC4823D2EC5A0D9DC75F48E0 xXCMiscGetXIDListReq;
typedef struct _932C98117C7FBC3E6D86F96BD678D2D1 xXDGAQueryModesReply;
typedef struct _XDGAQueryVersion xXDGAQueryVersionReq;
typedef struct _7545E18792FF2C20F9BB4220259E75A2 xXF86VidModeModeInfo;
typedef struct _5EC50BA61A7AE0BB02D4340472A7D806 xXFixesCopyRegionReq;
typedef struct _D4E78A805D3B4AC5F724CECE1911262F xXFixesHideCursorReq;
typedef struct _D4E78A805D3B4AC5F724CECE1911262F xXFixesShowCursorReq;
typedef struct _17BA7F3533648026466E6A0BBE53DC05 xXI2_2AllowEventsReq;
typedef struct _7552ACBA9FE9B8170F87BF8276CCD8D3 xXIChangePropertyReq;
typedef struct _38D9E3C539C38752A8877DF0574E9A10 xXIDeletePropertyReq;
typedef struct _F761E35AAB0F963E8328223906FB41E6 xXIListPropertiesReq;
typedef struct _BB397765FF281DD1E4BC80FF297308E9 xXIQueryPointerReply;
typedef struct _2D75EBE1A6467BFFE36F9C7798C50507 xXIQueryVersionReply;
typedef struct _XResQueryClients xXResQueryClientsReq;
typedef struct _XResQueryVersion xXResQueryVersionReq;
typedef struct _F81C4DFCF4FD8DAD229D0D8C30F8406E xXTestGrabControlReq;
typedef struct _XcupQueryVersion xXcupQueryVersionReq;
typedef struct _XevieSelectInput xXevieSelectInputReq;
typedef struct _4496CBA88907C11C6361D9179E75F570 xXineramaIsActiveReq;
enum xcb_access_control_t {XCB_ACCESS_CONTROL_DISABLE = 0x0,XCB_ACCESS_CONTROL_ENABLE = 0x1,};
enum xcb_colormap_alloc_t {XCB_COLORMAP_ALLOC_NONE = 0x0,XCB_COLORMAP_ALLOC_ALL = 0x1,};
typedef xcb_value_error_t xcb_colormap_error_t;
enum xcb_colormap_state_t {XCB_COLORMAP_STATE_UNINSTALLED = 0x0,XCB_COLORMAP_STATE_INSTALLED = 0x1,};
struct xcb_depth_iterator_t {xcb_depth_t *data;int rem;int index;};
enum xcb_dpms_dpms_mode_t {XCB_DPMS_DPMS_MODE_ON = 0x0,XCB_DPMS_DPMS_MODE_STANDBY = 0x1,XCB_DPMS_DPMS_MODE_SUSPEND = 0x2,XCB_DPMS_DPMS_MODE_OFF = 0x3,};
typedef xcb_value_error_t xcb_drawable_error_t;
enum xcb_mapping_status_t {XCB_MAPPING_STATUS_SUCCESS = 0x0,XCB_MAPPING_STATUS_BUSY = 0x1,XCB_MAPPING_STATUS_FAILURE = 0x2,};
struct xcb_point_iterator_t {xcb_point_t *data;int rem;int index;};
enum xcb_query_shape_of_t {XCB_QUERY_SHAPE_OF_LARGEST_CURSOR = 0x0,XCB_QUERY_SHAPE_OF_FASTEST_TILE = 0x1,XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE = 0x2,};
enum xcb_randr_rotation_t {XCB_RANDR_ROTATION_ROTATE_0 = 0x1,XCB_RANDR_ROTATION_ROTATE_90 = 0x2,XCB_RANDR_ROTATION_ROTATE_180 = 0x4,XCB_RANDR_ROTATION_ROTATE_270 = 0x8,XCB_RANDR_ROTATION_REFLECT_X = 0x10,XCB_RANDR_ROTATION_REFLECT_Y = 0x20,};
enum xcb_render_pict_op_t {XCB_RENDER_PICT_OP_CLEAR = 0x0,XCB_RENDER_PICT_OP_SRC = 0x1,XCB_RENDER_PICT_OP_DST = 0x2,XCB_RENDER_PICT_OP_OVER = 0x3,XCB_RENDER_PICT_OP_OVER_REVERSE = 0x4,XCB_RENDER_PICT_OP_IN = 0x5,XCB_RENDER_PICT_OP_IN_REVERSE = 0x6,XCB_RENDER_PICT_OP_OUT = 0x7,XCB_RENDER_PICT_OP_OUT_REVERSE = 0x8,XCB_RENDER_PICT_OP_ATOP = 0x9,XCB_RENDER_PICT_OP_ATOP_REVERSE = 0xA,XCB_RENDER_PICT_OP_XOR = 0xB,XCB_RENDER_PICT_OP_ADD = 0xC,XCB_RENDER_PICT_OP_SATURATE = 0xD,XCB_RENDER_PICT_OP_DISJOINT_CLEAR = 0x10,XCB_RENDER_PICT_OP_DISJOINT_SRC = 0x11,XCB_RENDER_PICT_OP_DISJOINT_DST = 0x12,XCB_RENDER_PICT_OP_DISJOINT_OVER = 0x13,XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE = 0x14,XCB_RENDER_PICT_OP_DISJOINT_IN = 0x15,XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE = 0x16,XCB_RENDER_PICT_OP_DISJOINT_OUT = 0x17,XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE = 0x18,XCB_RENDER_PICT_OP_DISJOINT_ATOP = 0x19,XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE = 0x1A,XCB_RENDER_PICT_OP_DISJOINT_XOR = 0x1B,XCB_RENDER_PICT_OP_CONJOINT_CLEAR = 0x20,XCB_RENDER_PICT_OP_CONJOINT_SRC = 0x21,XCB_RENDER_PICT_OP_CONJOINT_DST = 0x22,XCB_RENDER_PICT_OP_CONJOINT_OVER = 0x23,XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE = 0x24,XCB_RENDER_PICT_OP_CONJOINT_IN = 0x25,XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE = 0x26,XCB_RENDER_PICT_OP_CONJOINT_OUT = 0x27,XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE = 0x28,XCB_RENDER_PICT_OP_CONJOINT_ATOP = 0x29,XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE = 0x2A,XCB_RENDER_PICT_OP_CONJOINT_XOR = 0x2B,XCB_RENDER_PICT_OP_MULTIPLY = 0x30,XCB_RENDER_PICT_OP_SCREEN = 0x31,XCB_RENDER_PICT_OP_OVERLAY = 0x32,XCB_RENDER_PICT_OP_DARKEN = 0x33,XCB_RENDER_PICT_OP_LIGHTEN = 0x34,XCB_RENDER_PICT_OP_COLOR_DODGE = 0x35,XCB_RENDER_PICT_OP_COLOR_BURN = 0x36,XCB_RENDER_PICT_OP_HARD_LIGHT = 0x37,XCB_RENDER_PICT_OP_SOFT_LIGHT = 0x38,XCB_RENDER_PICT_OP_DIFFERENCE = 0x39,XCB_RENDER_PICT_OP_EXCLUSION = 0x3A,XCB_RENDER_PICT_OP_HSL_HUE = 0x3B,XCB_RENDER_PICT_OP_HSL_SATURATION = 0x3C,XCB_RENDER_PICT_OP_HSL_COLOR = 0x3D,XCB_RENDER_PICT_OP_HSL_LUMINOSITY = 0x3E,};
struct xcb_setup_iterator_t {xcb_setup_t *data;int rem;int index;};
enum xcb_subwindow_mode_t {XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN = 0x0,XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS = 0x1,};
enum xcb_sync_valuetype_t {XCB_SYNC_VALUETYPE_ABSOLUTE = 0x0,XCB_SYNC_VALUETYPE_RELATIVE = 0x1,};
enum xcb_x_print_detail_t {XCB_X_PRINT_DETAIL_START_JOB_NOTIFY = 0x1,XCB_X_PRINT_DETAIL_END_JOB_NOTIFY = 0x2,XCB_X_PRINT_DETAIL_START_DOC_NOTIFY = 0x3,XCB_X_PRINT_DETAIL_END_DOC_NOTIFY = 0x4,XCB_X_PRINT_DETAIL_START_PAGE_NOTIFY = 0x5,XCB_X_PRINT_DETAIL_END_PAGE_NOTIFY = 0x6,};
enum xcb_xevie_datatype_t {XCB_XEVIE_DATATYPE_UNMODIFIED = 0x0,XCB_XEVIE_DATATYPE_MODIFIED = 0x1,};
enum xcb_xkb_axn_detail_t {XCB_XKB_AXN_DETAIL_SK_PRESS = 0x1,XCB_XKB_AXN_DETAIL_SK_ACCEPT = 0x2,XCB_XKB_AXN_DETAIL_SK_REJECT = 0x4,XCB_XKB_AXN_DETAIL_SK_RELEASE = 0x8,XCB_XKB_AXN_DETAIL_BK_ACCEPT = 0x10,XCB_XKB_AXN_DETAIL_BK_REJECT = 0x20,XCB_XKB_AXN_DETAIL_AXK_WARNING = 0x40,};
enum xcb_xkb_bell_class_t {XCB_XKB_BELL_CLASS_DFLT_XI_CLASS = 0x300,};
enum xcb_xkb_event_type_t {XCB_XKB_EVENT_TYPE_NEW_KEYBOARD_NOTIFY = 0x1,XCB_XKB_EVENT_TYPE_MAP_NOTIFY = 0x2,XCB_XKB_EVENT_TYPE_STATE_NOTIFY = 0x4,XCB_XKB_EVENT_TYPE_CONTROLS_NOTIFY = 0x8,XCB_XKB_EVENT_TYPE_INDICATOR_STATE_NOTIFY = 0x10,XCB_XKB_EVENT_TYPE_INDICATOR_MAP_NOTIFY = 0x20,XCB_XKB_EVENT_TYPE_NAMES_NOTIFY = 0x40,XCB_XKB_EVENT_TYPE_COMPAT_MAP_NOTIFY = 0x80,XCB_XKB_EVENT_TYPE_BELL_NOTIFY = 0x100,XCB_XKB_EVENT_TYPE_ACTION_MESSAGE = 0x200,XCB_XKB_EVENT_TYPE_ACCESS_X_NOTIFY = 0x400,XCB_XKB_EVENT_TYPE_EXTENSION_DEVICE_NOTIFY = 0x800,};
enum xcb_xkb_gbn_detail_t {XCB_XKB_GBN_DETAIL_TYPES = 0x1,XCB_XKB_GBN_DETAIL_COMPAT_MAP = 0x2,XCB_XKB_GBN_DETAIL_CLIENT_SYMBOLS = 0x4,XCB_XKB_GBN_DETAIL_SERVER_SYMBOLS = 0x8,XCB_XKB_GBN_DETAIL_INDICATOR_MAPS = 0x10,XCB_XKB_GBN_DETAIL_KEY_NAMES = 0x20,XCB_XKB_GBN_DETAIL_GEOMETRY = 0x40,XCB_XKB_GBN_DETAIL_OTHER_NAMES = 0x80,};
enum xcb_xkb_nkn_detail_t {XCB_XKB_NKN_DETAIL_KEYCODES = 0x1,XCB_XKB_NKN_DETAIL_GEOMETRY = 0x2,XCB_XKB_NKN_DETAIL_DEVICE_ID = 0x4,};
enum xcb_xkb_state_part_t {XCB_XKB_STATE_PART_MODIFIER_STATE = 0x1,XCB_XKB_STATE_PART_MODIFIER_BASE = 0x2,XCB_XKB_STATE_PART_MODIFIER_LATCH = 0x4,XCB_XKB_STATE_PART_MODIFIER_LOCK = 0x8,XCB_XKB_STATE_PART_GROUP_STATE = 0x10,XCB_XKB_STATE_PART_GROUP_BASE = 0x20,XCB_XKB_STATE_PART_GROUP_LATCH = 0x40,XCB_XKB_STATE_PART_GROUP_LOCK = 0x80,XCB_XKB_STATE_PART_COMPAT_STATE = 0x100,XCB_XKB_STATE_PART_GRAB_MODS = 0x200,XCB_XKB_STATE_PART_COMPAT_GRAB_MODS = 0x400,XCB_XKB_STATE_PART_LOOKUP_MODS = 0x800,XCB_XKB_STATE_PART_COMPAT_LOOKUP_MODS = 0x1000,XCB_XKB_STATE_PART_POINTER_BUTTONS = 0x2000,};
enum xcb_xkb_v_mods_low_t {XCB_XKB_V_MODS_LOW_7 = 0x80,XCB_XKB_V_MODS_LOW_6 = 0x40,XCB_XKB_V_MODS_LOW_5 = 0x20,XCB_XKB_V_MODS_LOW_4 = 0x10,XCB_XKB_V_MODS_LOW_3 = 0x8,XCB_XKB_V_MODS_LOW_2 = 0x4,XCB_XKB_V_MODS_LOW_1 = 0x2,XCB_XKB_V_MODS_LOW_0 = 0x1,};
enum xcb_xkb_xi_feature_t {XCB_XKB_XI_FEATURE_KEYBOARDS = 0x1,XCB_XKB_XI_FEATURE_BUTTON_ACTIONS = 0x2,XCB_XKB_XI_FEATURE_INDICATOR_NAMES = 0x4,XCB_XKB_XI_FEATURE_INDICATOR_MAPS = 0x8,XCB_XKB_XI_FEATURE_INDICATOR_STATE = 0x10,};
typedef struct _xkbAnyDoodadWireDesc xkbAnyDoodadWireDesc;
typedef struct _xkbGetCompatMapReply xkbGetCompatMapReply;
typedef struct _xkbGetKbdByNameReply xkbGetKbdByNameReply;
typedef struct _xkbLatchLockState xkbLatchLockStateReq;
typedef struct _xkbListComponents xkbListComponentsReq;
typedef struct _xkbNewKeyboardNotify xkbNewKeyboardNotify;
typedef struct _xkbPerClientFlags xkbPerClientFlagsReq;
typedef struct _xkbUseExtensionReply xkbUseExtensionReply;
typedef struct _QueryAdaptorsReply xvQueryAdaptorsReply;
typedef struct _431023746282E83C34446CE1DCC859AA xvQueryBestSizeReply;
typedef struct _740C46A196F463FF63DE6C8E1A8E1740 xvmcCreateContextReq;
typedef struct _14A823895445B846828F3D4F9D47C3C9 xvmcCreateSurfaceReq;
typedef struct Dwarf_Macro_Details_s Dwarf_Macro_Details;
typedef struct Dwarf_P_String_Attr_s *Dwarf_P_String_Attr;
typedef struct _FontPatternCache *FontPatternCachePtr;
typedef struct _33436B6E470EAB040EE5564712CFCD29 IXJ_CADENCE_ELEMENT;
enum MACRO_ATMTCP_CREATE {ATMTCP_CREATE = 24974,ATMTCP_REMOVE = 24975,};
enum MACRO_AsyncKeyboard {AsyncKeyboard = 3,SyncKeyboard = 4,};
enum MACRO_BLKROTATIONAL {BLKROTATIONAL = 0x127E,};
enum MACRO_BLKSECDISCARD {BLKSECDISCARD = 0x127D,};
enum MACRO_BLKTRACESTART {BLKTRACESTART = 0x1274,};
enum MACRO_BOOTPARAMPROC {BOOTPARAMPROC_WHOAMI = 1,BOOTPARAMPROC_GETFILE = 2,};
enum MACRO_BOOTPARAMPROG {BOOTPARAMPROG = 100026,};
enum MACRO_BOOTPARAMVERS {BOOTPARAMVERS = 1,};
enum MACRO_BadFontFormat {BadFontFormat = 88,};
enum MACRO_BadPictFormat {BadPictFormat = 0,BadPicture = 1,BadPictOp = 2,};
enum MACRO_BadRRProvider {BadRRProvider = 3,};
enum MACRO_BitmapSuccess {BitmapSuccess = 0,BitmapOpenFailed = 1,BitmapFileInvalid = 2,};
enum MACRO_ButtonRelease {ButtonRelease = 5,};
enum MACRO_CDROMEJECT_SW {CDROMEJECT_SW = 0x530F,};
enum MACRO_CLOCK_DEFAULT {CLOCK_DEFAULT = 0,CLOCK_EXT = 1,CLOCK_INT = 2,CLOCK_TXINT = 3,CLOCK_TXFROMRX = 4,};
enum MACRO_CapProjecting {CapProjecting = 3,};
enum MACRO_CenterGravity {CenterGravity = 5,};
enum MACRO_ClientMessage {ClientMessage = 33,};
enum MACRO_ColormapEvent {lbxsz_ColormapEvent = 16,lbxupsz_ColormapEvent = 14,};
enum MACRO_DEFAULT_GLYPH {DEFAULT_GLYPH_CACHING_MODE = 1,};
enum MACRO_DRI2BufferHiz {DRI2BufferHiz = 10,};
enum MACRO_DRI2DriverDRI {DRI2DriverDRI = 0,DRI2DriverVDPAU = 1,};
enum MACRO_DRI2_EXCHANGE {DRI2_EXCHANGE_COMPLETE = 0x1,DRI2_BLIT_COMPLETE = 0x2,DRI2_FLIP_COMPLETE = 0x3,};
enum MACRO_DestroyNotify {DestroyNotify = 17,};
enum MACRO_DisableAccess {DisableAccess = 0,};
enum MACRO_DontCareState {DontCareState = 0,ZoomState = 2,InactiveState = 4,};
enum MACRO_EI_ABIVERSION {EI_ABIVERSION = 8,EI_PAD = 8,};
enum MACRO_EPOF_INTERNAL {EPOF_INTERNAL = 1003,EPOF_BAD_IMG_SIZE = 1004,};
enum MACRO_FARCSPERBATCH {FARCSPERBATCH = 256,};
enum MACRO_FBIOGET_GLYPH {FBIOGET_GLYPH = 0x4615,FBIOGET_HWCINFO = 0x4616,};
enum MACRO_FRCTSPERBATCH {FRCTSPERBATCH = 256,};
enum MACRO_FSBadIDChoice {FSBadIDChoice = 6,};
enum MACRO_FamilyNetname {FamilyNetname = 254,};
enum MACRO_FeedbackClass {FeedbackClass = 3,ProximityClass = 4,};
enum MACRO_FontAliasType {FontAliasType = 0x1000,};
enum MACRO_FontNameAlias {FontNameAlias = 82,};
enum MACRO_ForgetGravity {ForgetGravity = 0,NorthWestGravity = 1,NorthGravity = 2,};
enum MACRO_GravityNotify {GravityNotify = 24,};
enum MACRO_IIOCNETDWRSET {IIOCNETDWRSET = 18712,};
enum MACRO_LbxNumberReqs {LbxNumberReqs = 44,};
enum MACRO_MAXMAPNAMELEN {MAXMAPNAMELEN = 255,};
enum MACRO_MAXNETNAMELEN {MAXNETNAMELEN = 255,};
enum MACRO_MAXPACKETSIZE {MAXPACKETSIZE = 512,};
enum MACRO_MAXRESOLVSORT {MAXRESOLVSORT = 10,};
enum MACRO_MAX_IDLETIMER {MAX_IDLETIMER_LABEL_SIZE = 28,};
enum MACRO_MCAST_EXCLUDE {MCAST_EXCLUDE = 0,MCAST_INCLUDE = 1,};
enum MACRO_MODE_SENSE_10 {MODE_SENSE_10 = 0x5A,};
enum MACRO_MOD_EXCLUSIVE {MOD_EXCLUSIVE = 8192,};
enum MACRO_MSR_IA32_MISC {MSR_IA32_MISC_ENABLE_FAST_STRING = 1,MSR_IA32_MISC_ENABLE_TCC = 2,MSR_IA32_MISC_ENABLE_EMON = 128,MSR_IA32_MISC_ENABLE_BTS_UNAVAIL = 2048,MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL = 4096,MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP = 65536,MSR_IA32_MISC_ENABLE_MWAIT = 262144,MSR_IA32_MISC_ENABLE_LIMIT_CPUID = 4194304,MSR_IA32_MISC_ENABLE_XTPR_DISABLE = 8388608,MSR_IA32_MISC_ENABLE_XD_DISABLE = 17179869184,MSR_IA32_MISC_ENABLE_X87_COMPAT = 4,MSR_IA32_MISC_ENABLE_TM1 = 8,MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE = 16,MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE = 64,MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK = 256,MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE = 512,MSR_IA32_MISC_ENABLE_FERR = 1024,MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX = 1024,MSR_IA32_MISC_ENABLE_TM2 = 8192,MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE = 524288,MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK = 1048576,MSR_IA32_MISC_ENABLE_L1D_CONTEXT = 16777216,MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE = 137438953472,MSR_IA32_MISC_ENABLE_TURBO_DISABLE = 274877906944,MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE = 549755813888,MSR_IA32_TSC_DEADLINE = 1760,MSR_IA32_MCG_EAX = 384,MSR_IA32_MCG_EBX = 385,MSR_IA32_MCG_ECX = 386,MSR_IA32_MCG_EDX = 387,MSR_IA32_MCG_ESI = 388,MSR_IA32_MCG_EDI = 389,MSR_IA32_MCG_EBP = 390,MSR_IA32_MCG_ESP = 391,MSR_IA32_MCG_EFLAGS = 392,MSR_IA32_MCG_EIP = 393,MSR_IA32_MCG_RESERVED = 394,MSR_P4_BPU_PERFCTR0 = 768,MSR_P4_BPU_PERFCTR1 = 769,MSR_P4_BPU_PERFCTR2 = 770,MSR_P4_BPU_PERFCTR3 = 771,MSR_P4_MS_PERFCTR0 = 772,MSR_P4_MS_PERFCTR1 = 773,MSR_P4_MS_PERFCTR2 = 774,MSR_P4_MS_PERFCTR3 = 775,MSR_P4_FLAME_PERFCTR0 = 776,MSR_P4_FLAME_PERFCTR1 = 777,MSR_P4_FLAME_PERFCTR2 = 778,MSR_P4_FLAME_PERFCTR3 = 779,MSR_P4_IQ_PERFCTR0 = 780,MSR_P4_IQ_PERFCTR1 = 781,MSR_P4_IQ_PERFCTR2 = 782,MSR_P4_IQ_PERFCTR3 = 783,MSR_P4_IQ_PERFCTR4 = 784,MSR_P4_IQ_PERFCTR5 = 785,MSR_P4_BPU_CCCR0 = 864,MSR_P4_BPU_CCCR1 = 865,MSR_P4_BPU_CCCR2 = 866,MSR_P4_BPU_CCCR3 = 867,MSR_P4_MS_CCCR0 = 868,MSR_P4_MS_CCCR1 = 869,MSR_P4_MS_CCCR2 = 870,MSR_P4_MS_CCCR3 = 871,MSR_P4_FLAME_CCCR0 = 872,MSR_P4_FLAME_CCCR1 = 873,MSR_P4_FLAME_CCCR2 = 874,MSR_P4_FLAME_CCCR3 = 875,MSR_P4_IQ_CCCR0 = 876,MSR_P4_IQ_CCCR1 = 877,MSR_P4_IQ_CCCR2 = 878,MSR_P4_IQ_CCCR3 = 879,MSR_P4_IQ_CCCR4 = 880,MSR_P4_IQ_CCCR5 = 881,MSR_P4_ALF_ESCR0 = 970,MSR_P4_ALF_ESCR1 = 971,MSR_P4_BPU_ESCR0 = 946,MSR_P4_BPU_ESCR1 = 947,MSR_P4_BSU_ESCR0 = 928,MSR_P4_BSU_ESCR1 = 929,MSR_P4_CRU_ESCR0 = 952,MSR_P4_CRU_ESCR1 = 953,MSR_P4_CRU_ESCR2 = 972,MSR_P4_CRU_ESCR3 = 973,MSR_P4_CRU_ESCR4 = 992,MSR_P4_CRU_ESCR5 = 993,MSR_P4_DAC_ESCR0 = 936,MSR_P4_DAC_ESCR1 = 937,MSR_P4_FIRM_ESCR0 = 932,MSR_P4_FIRM_ESCR1 = 933,MSR_P4_FLAME_ESCR0 = 934,MSR_P4_FLAME_ESCR1 = 935,MSR_P4_FSB_ESCR0 = 930,MSR_P4_FSB_ESCR1 = 931,MSR_P4_IQ_ESCR0 = 954,MSR_P4_IQ_ESCR1 = 955,MSR_P4_IS_ESCR0 = 948,MSR_P4_IS_ESCR1 = 949,MSR_P4_ITLB_ESCR0 = 950,MSR_P4_ITLB_ESCR1 = 951,MSR_P4_IX_ESCR0 = 968,MSR_P4_IX_ESCR1 = 969,MSR_P4_MOB_ESCR0 = 938,MSR_P4_MOB_ESCR1 = 939,MSR_P4_MS_ESCR0 = 960,MSR_P4_MS_ESCR1 = 961,MSR_P4_PMH_ESCR0 = 940,MSR_P4_PMH_ESCR1 = 941,MSR_P4_RAT_ESCR0 = 956,MSR_P4_RAT_ESCR1 = 957,MSR_P4_SAAT_ESCR0 = 942,MSR_P4_SAAT_ESCR1 = 943,MSR_P4_SSU_ESCR0 = 958,MSR_P4_SSU_ESCR1 = 959,MSR_P4_TBPU_ESCR0 = 962,MSR_P4_TBPU_ESCR1 = 963,MSR_P4_TC_ESCR0 = 964,MSR_P4_TC_ESCR1 = 965,MSR_P4_U2L_ESCR0 = 944,MSR_P4_U2L_ESCR1 = 945,MSR_P4_PEBS_MATRIX_VERT = 1010,MSR_CORE_PERF_FIXED_CTR0 = 777,MSR_CORE_PERF_FIXED_CTR1 = 778,MSR_CORE_PERF_FIXED_CTR2 = 779,MSR_CORE_PERF_FIXED_CTR_CTRL = 909,MSR_CORE_PERF_GLOBAL_STATUS = 910,MSR_CORE_PERF_GLOBAL_CTRL = 911,MSR_CORE_PERF_GLOBAL_OVF_CTRL = 912,MSR_GEODE_BUSCONT_CONF0 = 6400,MSR_IA32_VMX_BASIC = 1152,MSR_IA32_VMX_PINBASED_CTLS = 1153,MSR_IA32_VMX_PROCBASED_CTLS = 1154,MSR_IA32_VMX_EXIT_CTLS = 1155,MSR_IA32_VMX_ENTRY_CTLS = 1156,MSR_IA32_VMX_MISC = 1157,MSR_IA32_VMX_CR0_FIXED0 = 1158,MSR_IA32_VMX_CR0_FIXED1 = 1159,MSR_IA32_VMX_CR4_FIXED0 = 1160,MSR_IA32_VMX_CR4_FIXED1 = 1161,MSR_IA32_VMX_VMCS_ENUM = 1162,MSR_IA32_VMX_PROCBASED_CTLS2 = 1163,MSR_IA32_VMX_EPT_VPID_CAP = 1164,MSR_IA32_VMX_TRUE_PINBASED_CTLS = 1165,MSR_IA32_VMX_TRUE_PROCBASED_CTLS = 1166,MSR_IA32_VMX_TRUE_EXIT_CTLS = 1167,MSR_IA32_VMX_TRUE_ENTRY_CTLS = 1168,};
enum MACRO_MappingNotify {MappingNotify = 34,};
enum MACRO_MdpMinorShift {MdpMinorShift = 6,};
enum MACRO_ModeBitsShift {ModeBitsShift = 6,};
enum MACRO_NCURSES_PANEL {NCURSES_PANEL_H_incl = 1,NCURSES_TERMCAP_H_incl = 1,};
enum MACRO_NO_SUCH_PARAM {NO_SUCH_PARAM = 65534,};
enum MACRO_NoExposeEvent {lbxsz_NoExposeEvent = 12,lbxupsz_NoExposeEvent = 11,};
enum MACRO_NotifyPointer {NotifyPointer = 5,};
enum MACRO_PACKAGE_THERM {PACKAGE_THERM_INT_HIGH_ENABLE = 1,PACKAGE_THERM_INT_LOW_ENABLE = 2,PACKAGE_THERM_INT_PLN_ENABLE = 16777216,};
enum MACRO_PHONET_NPROTO {PHONET_NPROTO = 3,};
enum MACRO_PIO_UNIMAPCLR {PIO_UNIMAPCLR = 0x4B68,};
enum MACRO_PORT_NS16550A {PORT_NS16550A = 14,PORT_XSCALE = 15,PORT_RM9000 = 16,PORT_OCTEON = 17,PORT_AR7 = 18,PORT_U6_16550A = 19,PORT_TEGRA = 20,PORT_XR17D15X = 21,PORT_LPC3220 = 22,PORT_8250_CIR = 23,PORT_XR17V35X = 24,PORT_BRCM_TRUMANAGE = 25,PORT_ALTR_16550_F32 = 26,PORT_ALTR_16550_F64 = 27,PORT_ALTR_16550_F128 = 28,PORT_MAX_8250 = 28,PORT_PXA = 31,PORT_AMBA = 32,PORT_CLPS711X = 33,PORT_SA1100 = 34,PORT_UART00 = 35,PORT_21285 = 37,PORT_SUNZILOG = 38,PORT_SUNSAB = 39,PORT_DZ = 46,PORT_ZS = 47,PORT_MUX = 48,PORT_ATMEL = 49,PORT_MAC_ZILOG = 50,PORT_PMAC_ZILOG = 51,PORT_SCI = 52,PORT_SCIF = 53,PORT_IRDA = 54,PORT_S3C2410 = 55,PORT_IP22ZILOG = 56,PORT_LH7A40X = 57,PORT_CPM = 58,PORT_MPC52xx = 59,PORT_ICOM = 60,PORT_S3C2440 = 61,PORT_IMX = 62,PORT_MPSC = 63,PORT_TXX9 = 64,PORT_VR41XX_SIU = 65,PORT_VR41XX_DSIU = 66,PORT_S3C2400 = 67,PORT_M32R_SIO = 68,PORT_JSM = 69,PORT_PNX8XXX = 70,PORT_NETX = 71,PORT_SUNHV = 72,PORT_S3C2412 = 73,PORT_UARTLITE = 74,PORT_BFIN = 75,PORT_KS8695 = 76,PORT_SB1250_DUART = 77,PORT_MCF = 78,PORT_BFIN_SPORT = 79,PORT_MN10300 = 80,PORT_MN10300_CTS = 81,PORT_SC26XX = 82,PORT_SCIFA = 83,PORT_S3C6400 = 84,PORT_NWPSERIAL = 85,PORT_MAX3100 = 86,PORT_TIMBUART = 87,PORT_MSM = 88,PORT_BCM63XX = 89,PORT_APBUART = 90,PORT_ALTERA_JTAGUART = 91,PORT_ALTERA_UART = 92,PORT_SCIFB = 93,PORT_MAX310X = 94,PORT_MFD = 95,PORT_OMAP = 96,PORT_VT8500 = 97,PORT_XUARTPS = 98,PORT_AR933X = 99,PORT_EFMUART = 100,PORT_ARC = 101,PORT_RP2 = 102,PORT_LPUART = 103,PORT_HSCIF = 104,};
enum MACRO_PTHREAD_STACK {PTHREAD_STACK_MIN = 16384,};
enum MACRO_PictOpLighten {PictOpLighten = 0x34,};
enum MACRO_PictOpMaximum {PictOpMaximum = 13,PictOpDisjointMinimum = 16,};
enum MACRO_PictOpMinimum {PictOpMinimum = 0,};
enum MACRO_PictOpOverlay {PictOpOverlay = 0x32,};
enum MACRO_PointerWindow {PointerWindow = 0,InputFocus = 1,};
enum MACRO_PolyEdgeSharp {PolyEdgeSharp = 0,PolyEdgeSmooth = 1,};
enum MACRO_PropertyEvent {lbxsz_PropertyEvent = 20,lbxupsz_PropertyEvent = 17,};
enum MACRO_QIF_DQBLKSIZE {QIF_DQBLKSIZE_BITS = 10,QIF_DQBLKSIZE = 1024,};
enum MACRO_QueuedAlready {QueuedAlready = 0,QueuedAfterReading = 1,QueuedAfterFlush = 2,};
enum MACRO_READ_CAPACITY {READ_CAPACITY = 0x25,READ_10 = 0x28,};
enum MACRO_READ_POSITION {READ_POSITION = 0x34,};
enum MACRO_RR_Capability {RR_Capability_None = 0,RR_Capability_SourceOutput = 1,RR_Capability_SinkOutput = 2,RR_Capability_SourceOffload = 4,RR_Capability_SinkOffload = 8,};
enum MACRO_ReparentEvent {lbxsz_ReparentEvent = 24,lbxupsz_ReparentEvent = 21,};
enum MACRO_RepeatReflect {RepeatReflect = 3,};
enum MACRO_ResizeRequest {ResizeRequest = 25,};
enum MACRO_SIOCAX25NOUID {SIOCAX25NOUID = 35299,};
enum MACRO_SIOCAX25OPTRT {SIOCAX25OPTRT = 35303,};
enum MACRO_SIOCGETVIFCNT {SIOCGETVIFCNT = 35296,};
enum MACRO_SIOCGIFHWADDR {SIOCGIFHWADDR = 0x8927,};
enum MACRO_SIOCGIFMETRIC {SIOCGIFMETRIC = 0x891D,};
enum MACRO_SIOCGIFPFLAGS {SIOCGIFPFLAGS = 0x8935,};
enum MACRO_SIOCGIFTXQLEN {SIOCGIFTXQLEN = 0x8942,};
enum MACRO_SIOCGPPPSTATS {SIOCGPPPSTATS = 35312,};
enum MACRO_SIOCRSGL2CALL {SIOCRSGL2CALL = 35301,};
enum MACRO_SIOCRSSL2CALL {SIOCRSSL2CALL = 35298,};
enum MACRO_SIOCSHWTSTAMP {SIOCSHWTSTAMP = 0x89B0,};
enum MACRO_SIOCSIFATMTCP {SIOCSIFATMTCP = 24960,};
enum MACRO_SIOCSIFHWADDR {SIOCSIFHWADDR = 0x8924,};
enum MACRO_SIOCSIFMETRIC {SIOCSIFMETRIC = 0x891E,};
enum MACRO_SIOCSIFPFLAGS {SIOCSIFPFLAGS = 0x8934,};
enum MACRO_SIOCSIFTXQLEN {SIOCSIFTXQLEN = 0x8943,};
enum MACRO_SLC_NOSUPPORT {SLC_NOSUPPORT = 0,SLC_CANTCHANGE = 1,SLC_VARIABLE = 2,SLC_DEFAULT = 3,SLC_LEVELBITS = 3,SLC_FUNC = 0,SLC_FLAGS = 1,SLC_VALUE = 2,SLC_ACK = 128,SLC_FLUSHIN = 64,SLC_FLUSHOUT = 32,};
enum MACRO_SO_ACCEPTCONN {SO_ACCEPTCONN = 30,SO_PEERSEC = 31,SO_PASSSEC = 34,SO_TIMESTAMPNS = 35,};
enum MACRO_SetModeInsert {SetModeInsert = 0,SetModeDelete = 1,};
enum MACRO_ShapeBounding {ShapeBounding = 0,ShapeClip = 1,ShapeInput = 2,};
enum MACRO_ShapeSubtract {ShapeSubtract = 3,ShapeInvert = 4,};
enum MACRO_ShiftMapIndex {ShiftMapIndex = 0,LockMapIndex = 1,ControlMapIndex = 2,};
enum MACRO_ShmCompletion {ShmCompletion = 0,ShmNumberEvents = 1,};
enum MACRO_StaticGravity {StaticGravity = 10,};
enum MACRO_TCPOPT_TSTAMP {TCPOPT_TSTAMP_HDR = 16844810,};
enum MACRO_TIOCSERCONFIG {TIOCSERCONFIG = 0x5453,};
enum MACRO_TIOCSERGETLSR {TIOCSERGETLSR = 0x5459,};
enum MACRO_TSPTYPENUMBER {TSPTYPENUMBER = 25,};
enum MACRO_VisualAllMask {VisualAllMask = 0x1FF,};
enum MACRO_WRCTSPERBATCH {WRCTSPERBATCH = 10,ZRCTSPERBATCH = 256,};
enum MACRO_XDamageNotify {XDamageNotify = 0,XDamageNumberEvents = 1,};
enum MACRO_XIAcceptTouch {XIAcceptTouch = 6,};
enum MACRO_XIAsyncDevice {XIAsyncDevice = 0,XISyncDevice = 1,XIReplayDevice = 2,};
enum MACRO_XIAttachSlave {XIAttachSlave = 3,XIDetachSlave = 4,};
enum MACRO_XIDirectTouch {XIDirectTouch = 1,XIDependentTouch = 2,};
enum MACRO_XIGrabSuccess {XIGrabSuccess = 0,XIAlreadyGrabbed = 1,XIGrabInvalidTime = 2,};
enum MACRO_XIMasterAdded {XIMasterAdded = 1,XIMasterRemoved = 2,XISlaveAdded = 4,XISlaveRemoved = 8,XISlaveAttached = 16,XISlaveDetached = 32,XIDeviceEnabled = 64,XIDeviceDisabled = 128,};
enum MACRO_XIOwnerEvents {XIOwnerEvents = 1,};
enum MACRO_XIRejectTouch {XIRejectTouch = 7,};
enum MACRO_XIScrollClass {XIScrollClass = 3,XITouchClass = 8,};
enum MACRO_XISlaveSwitch {XISlaveSwitch = 1,XIDeviceChange = 2,};
enum MACRO_XLookupKeySym {XLookupKeySym = 3,XLookupBoth = 4,};
enum MACRO_XdbeBadBuffer {XdbeBadBuffer = 0,};
enum MACRO_XdbeUndefined {XdbeUndefined = 0,XdbeBackground = 1,XdbeUntouched = 2,};
enum MACRO_XkbGroup1Mask {XkbGroup1Mask = 1,XkbGroup2Mask = 2,XkbGroup3Mask = 4,XkbGroup4Mask = 8,XkbAnyGroupMask = 128,};
enum MACRO_XkbLogoDoodad {XkbLogoDoodad = 5,};
enum MACRO_XkbNoModifier {XkbNoModifier = 0xFF,};
enum MACRO_XkbTextDoodad {XkbTextDoodad = 3,XkbIndicatorDoodad = 4,};
enum MACRO_XkbUseCoreKbd {XkbUseCoreKbd = 0x100,XkbUseCorePtr = 0x200,};
enum MACRO_XvInvalidTime {XvInvalidTime = 3,XvBadReply = 4,};
enum MACRO_XvMCNumEvents {XvMCNumEvents = 0,XvMCNumErrors = 3,};
enum MACRO_XvStartedMask {XvStartedMask = 1,XvStoppedMask = 2,XvBusyMask = 4,XvPreemptedMask = 8,XvHardErrorMask = 16,};
enum MACRO_XvTopToBottom {XvTopToBottom = 0,XvBottomToTop = 1,};
enum MACRO_XvVideoNotify {XvVideoNotify = 0,XvPortNotify = 1,XvNumEvents = 2,};
enum MACRO__NETINET_IGMP {_NETINET_IGMP_H = 1,};
enum MACRO__POSIX_SHARED {_POSIX_SHARED_MEMORY_OBJECTS = 200809,_POSIX_CPUTIME = 0,_POSIX_THREAD_CPUTIME = 0,_POSIX_REGEXP = 1,_POSIX_READER_WRITER_LOCKS = 200809,_POSIX_SHELL = 1,_POSIX_TIMEOUTS = 200809,_POSIX_SPIN_LOCKS = 200809,_POSIX_SPAWN = 200809,_POSIX_TIMERS = 200809,_POSIX_BARRIERS = 200809,_POSIX_MESSAGE_PASSING = 200809,_POSIX_THREAD_PROCESS_SHARED = 200809,_POSIX_MONOTONIC_CLOCK = 0,_POSIX_CLOCK_SELECTION = 200809,_POSIX_ADVISORY_INFO = 200809,_POSIX_IPV6 = 200809,_POSIX_RAW_SOCKETS = 200809,};
enum MACRO__POSIX_THREAD {_POSIX_THREAD_THREADS_MAX = 64,AIO_PRIO_DELTA_MAX = 20,};
enum MACRO__RPC_PMAP_RMT {_RPC_PMAP_RMT_H = 1,};
enum MACRO__RPC_SVC_AUTH {_RPC_SVC_AUTH_H = 1,};
enum MACRO__SYS_FANOTIFY {_SYS_FANOTIFY_H = 1,};
enum MACRO__SYS_RESOURCE {_SYS_RESOURCE_H = 1,};
enum MACRO__SYS_SENDFILE {_SYS_SENDFILE_H = 1,_SYS_SHM_H = 1,};
enum MACRO__SYS_SIGNALFD {_SYS_SIGNALFD_H = 1,};
enum MACRO__SYS_TTYCHARS {_SYS_TTYCHARS_H = 1,};
enum MACRO__SYS_UCONTEXT {_SYS_UCONTEXT_H = 1,};
enum MACRO__XOPEN_CURSES {_XOPEN_CURSES = 1,};
enum MACRO___NETINET_UDP {__NETINET_UDP_H = 1,};
enum MACRO___O_DIRECTORY {__O_DIRECTORY = 0x10000,__O_NOFOLLOW = 0x20000,__O_CLOEXEC = 0x80000,__O_DIRECT = 0x4000,__O_NOATIME = 0x40000,__O_PATH = 0x200000,__O_DSYNC = 0x1000,};
enum MACRO___have_sigval {__have_sigval_t = 1,__have_sigevent_t = 1,};
enum MACRO_sz_VisualID32 {sz_VisualID32 = 4,sz_xExtendedVisualInfo = 16,sz_xEVIQueryVersionReq = 4,sz_xEVIQueryVersionReply = 32,sz_xEVIGetVisualInfoReq = 8,sz_xEVIGetVisualInfoReply = 32,};
enum MACRO_xvNumRequests {xvNumRequests = 20,};
typedef struct _RequestBlock_struct RequestBlock_struct;
typedef struct _5077D3CC3DD590AF02C9E55403D17F9F XClientMessageEvent;
typedef struct _A0C7E3A5A810FD3BF4087852A9D616F8 XDestroyWindowEvent;
typedef struct _477257A9E00A927C5CA4C8DCAD23E65C XF86MiscKbdSettings;
typedef struct _50157A8979FD42735599E52566CAF2B0 XGenericEventCookie;
typedef struct _A06AF73261543B69A785AD9B5C737D11 XPixmapFormatValues;
typedef unsigned __int16 XRandrSubpixelOrder;
typedef struct _66669466698BDB410095AFB1AF18F4BC XResizeRequestEvent;
typedef struct _XkbCompatChanges *XkbCompatChangesPtr;
typedef struct _XkbCompatChanges XkbCompatChangesRec;
typedef struct _XkbComponentList *XkbComponentListPtr;
typedef struct _XkbComponentList XkbComponentListRec;
typedef struct _XkbComponentName *XkbComponentNamePtr;
typedef struct _XkbComponentName XkbComponentNameRec;
typedef struct _XkbDeviceChanges *XkbDeviceChangesPtr;
typedef struct _XkbDeviceChanges XkbDeviceChangesRec;
typedef struct _XkbDeviceLedInfo *XkbDeviceLedInfoPtr;
typedef struct _XkbDeviceLedInfo XkbDeviceLedInfoRec;
typedef struct _XkbGeometrySizes *XkbGeometrySizesPtr;
typedef struct _XkbGeometrySizes XkbGeometrySizesRec;
typedef struct _XkbNamesNotify XkbNamesNotifyEvent;
typedef struct _XkbStateNotifyEvent XkbStateNotifyEvent;
typedef struct _0822494CA8335A3B81E4FAC70FD7E6A7 XvMCMacroBlockArray;
struct _XkbControlsChanges {unsigned int changed_ctrls;unsigned int enabled_ctrls_changes;int num_groups_changed;};
struct _XkbDeviceBtnAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 count;unsigned __int8 button;unsigned __int8 device;};
enum __ptrace_eventcodes {PTRACE_EVENT_FORK = 0x1,PTRACE_EVENT_VFORK = 0x2,PTRACE_EVENT_CLONE = 0x3,PTRACE_EVENT_EXEC = 0x4,PTRACE_EVENT_VFORK_DONE = 0x5,PTRACE_EVENT_EXIT = 0x6,PTRAVE_EVENT_SECCOMP = 0x7,};
enum __ptrace_setoptions {PTRACE_O_TRACESYSGOOD = 0x1,PTRACE_O_TRACEFORK = 0x2,PTRACE_O_TRACEVFORK = 0x4,PTRACE_O_TRACECLONE = 0x8,PTRACE_O_TRACEEXEC = 0x10,PTRACE_O_TRACEVFORKDONE = 0x20,PTRACE_O_TRACEEXIT = 0x40,PTRACE_O_TRACESECCOMP = 0x80,PTRACE_O_MASK = 0xFF,};
enum atscmh_rs_code_mode {ATSCMH_RSCODE_211_187 = 0x0,ATSCMH_RSCODE_223_187 = 0x1,ATSCMH_RSCODE_235_187 = 0x2,ATSCMH_RSCODE_RES = 0x3,};
struct changer_get_element {int cge_type;int cge_unit;int cge_status;int cge_errno;int cge_srctype;int cge_srcunit;int cge_id;int cge_lun;char cge_pvoltag[36];char cge_avoltag[36];int cge_flags;};
enum ctattr_expect_stats {CTA_STATS_EXP_UNSPEC = 0x0,CTA_STATS_EXP_NEW = 0x1,CTA_STATS_EXP_CREATE = 0x2,CTA_STATS_EXP_DELETE = 0x3,__CTA_STATS_EXP_MAX = 0x4,};
enum ctattr_stats_global {CTA_STATS_GLOBAL_UNSPEC = 0x0,CTA_STATS_GLOBAL_ENTRIES = 0x1,__CTA_STATS_GLOBAL_MAX = 0x2,};
enum ctattr_timeout_dccp {CTA_TIMEOUT_DCCP_UNSPEC = 0x0,CTA_TIMEOUT_DCCP_REQUEST = 0x1,CTA_TIMEOUT_DCCP_RESPOND = 0x2,CTA_TIMEOUT_DCCP_PARTOPEN = 0x3,CTA_TIMEOUT_DCCP_OPEN = 0x4,CTA_TIMEOUT_DCCP_CLOSEREQ = 0x5,CTA_TIMEOUT_DCCP_CLOSING = 0x6,CTA_TIMEOUT_DCCP_TIMEWAIT = 0x7,__CTA_TIMEOUT_DCCP_MAX = 0x8,};
enum ctattr_timeout_icmp {CTA_TIMEOUT_ICMP_UNSPEC = 0x0,CTA_TIMEOUT_ICMP_TIMEOUT = 0x1,__CTA_TIMEOUT_ICMP_MAX = 0x2,};
enum ctattr_timeout_sctp {CTA_TIMEOUT_SCTP_UNSPEC = 0x0,CTA_TIMEOUT_SCTP_CLOSED = 0x1,CTA_TIMEOUT_SCTP_COOKIE_WAIT = 0x2,CTA_TIMEOUT_SCTP_COOKIE_ECHOED = 0x3,CTA_TIMEOUT_SCTP_ESTABLISHED = 0x4,CTA_TIMEOUT_SCTP_SHUTDOWN_SENT = 0x5,CTA_TIMEOUT_SCTP_SHUTDOWN_RECD = 0x6,CTA_TIMEOUT_SCTP_SHUTDOWN_ACK_SENT = 0x7,__CTA_TIMEOUT_SCTP_MAX = 0x8,};
enum dcbnl_featcfg_attrs {DCB_FEATCFG_ATTR_UNDEFINED = 0x0,DCB_FEATCFG_ATTR_ALL = 0x1,DCB_FEATCFG_ATTR_PG = 0x2,DCB_FEATCFG_ATTR_PFC = 0x3,DCB_FEATCFG_ATTR_APP = 0x4,__DCB_FEATCFG_ATTR_ENUM_MAX = 0x5,DCB_FEATCFG_ATTR_MAX = 0x4,};
typedef struct _749257863A78ACF83BA10F9F553F4560 deviceMappingNotify;
enum ethtool_reset_flags {ETH_RESET_MGMT = 0x1,ETH_RESET_IRQ = 0x2,ETH_RESET_DMA = 0x4,ETH_RESET_FILTER = 0x8,ETH_RESET_OFFLOAD = 0x10,ETH_RESET_MAC = 0x20,ETH_RESET_PHY = 0x40,ETH_RESET_RAM = 0x80,ETH_RESET_DEDICATED = 0xFFFF,ETH_RESET_ALL = 0xFFFFFFFF,};
enum fc_els_rscn_ev_qual {ELS_EV_QUAL_NONE = 0x0,ELS_EV_QUAL_NS_OBJ = 0x1,ELS_EV_QUAL_PORT_ATTR = 0x2,ELS_EV_QUAL_SERV_OBJ = 0x3,ELS_EV_QUAL_SW_CONFIG = 0x4,ELS_EV_QUAL_REM_OBJ = 0x5,};
struct floppy_drive_struct {unsigned __int64 flags;unsigned __int64 spinup_date;unsigned __int64 select_date;unsigned __int64 first_read_date;__int16 probed_format;__int16 track;__int16 maxblock;__int16 maxtrack;int generation;int keep_data;int fd_ref;int fd_device;unsigned __int64 last_checked;char *dmabuf;int bufblocks;};
struct floppy_write_errors {unsigned int write_errors;unsigned __int64 first_error_sector;int first_error_generation;unsigned __int64 last_error_sector;int last_error_generation;unsigned int badness;};
typedef struct _0733D28D39B544C0D1FF9AB5A89F168E fsGetEventMaskReply;
typedef struct _BD0CD7113069CF1296E061F976B1B743 fsListCataloguesReq;
typedef struct _54527827121C21F3031526454FE9C7A8 fsOpenBitmapFontReq;
typedef struct _58C3F68DE6E766EC315A68C29D87018F fsQueryExtensionReq;
typedef struct _1CFFE104D7DFB51E74C0A01BE327DA92 fsQueryXBitmaps8Req;
typedef struct _7223AFE63A8123EF6F49E197890FAA10 fsQueryXExtents8Req;
typedef struct hdspm_config_info hdspm_config_info_t;
enum hwtstamp_rx_filters {HWTSTAMP_FILTER_NONE = 0x0,HWTSTAMP_FILTER_ALL = 0x1,HWTSTAMP_FILTER_SOME = 0x2,HWTSTAMP_FILTER_PTP_V1_L4_EVENT = 0x3,HWTSTAMP_FILTER_PTP_V1_L4_SYNC = 0x4,HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ = 0x5,HWTSTAMP_FILTER_PTP_V2_L4_EVENT = 0x6,HWTSTAMP_FILTER_PTP_V2_L4_SYNC = 0x7,HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ = 0x8,HWTSTAMP_FILTER_PTP_V2_L2_EVENT = 0x9,HWTSTAMP_FILTER_PTP_V2_L2_SYNC = 0xA,HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ = 0xB,HWTSTAMP_FILTER_PTP_V2_EVENT = 0xC,HWTSTAMP_FILTER_PTP_V2_SYNC = 0xD,HWTSTAMP_FILTER_PTP_V2_DELAY_REQ = 0xE,};
enum i2400m_media_status {I2400M_MEDIA_STATUS_LINK_UP = 0x1,I2400M_MEDIA_STATUS_LINK_DOWN = 0x2,I2400M_MEDIA_STATUS_LINK_RENEW = 0x3,};
enum i2400m_system_state {I2400M_SS_UNINITIALIZED = 0x1,I2400M_SS_INIT = 0x2,I2400M_SS_READY = 0x3,I2400M_SS_SCAN = 0x4,I2400M_SS_STANDBY = 0x5,I2400M_SS_CONNECTING = 0x6,I2400M_SS_WIMAX_CONNECTED = 0x7,I2400M_SS_DATA_PATH_CONNECTED = 0x8,I2400M_SS_IDLE = 0x9,I2400M_SS_DISCONNECTING = 0xA,I2400M_SS_OUT_OF_ZONE = 0xB,I2400M_SS_SLEEPACTIVE = 0xC,I2400M_SS_PRODUCTION = 0xD,I2400M_SS_CONFIG = 0xE,I2400M_SS_RF_OFF = 0xF,I2400M_SS_RF_SHUTDOWN = 0x10,I2400M_SS_DEVICE_DISCONNECT = 0x11,I2400M_SS_MAX = 0x12,};
struct ioctl_evtchn_notify {unsigned int port;};
struct ioctl_evtchn_unbind {unsigned int port;};
enum ip_conntrack_events {IPCT_NEW = 0x0,IPCT_RELATED = 0x1,IPCT_DESTROY = 0x2,IPCT_REPLY = 0x3,IPCT_ASSURED = 0x4,IPCT_PROTOINFO = 0x5,IPCT_HELPER = 0x6,IPCT_MARK = 0x7,IPCT_NATSEQADJ = 0x8,IPCT_SECMARK = 0x9,IPCT_LABEL = 0xA,};
enum ip_conntrack_status {IPS_EXPECTED_BIT = 0x0,IPS_EXPECTED = 0x1,IPS_SEEN_REPLY_BIT = 0x1,IPS_SEEN_REPLY = 0x2,IPS_ASSURED_BIT = 0x2,IPS_ASSURED = 0x4,IPS_CONFIRMED_BIT = 0x3,IPS_CONFIRMED = 0x8,IPS_SRC_NAT_BIT = 0x4,IPS_SRC_NAT = 0x10,IPS_DST_NAT_BIT = 0x5,IPS_DST_NAT = 0x20,IPS_NAT_MASK = 0x30,IPS_SEQ_ADJUST_BIT = 0x6,IPS_SEQ_ADJUST = 0x40,IPS_SRC_NAT_DONE_BIT = 0x7,IPS_SRC_NAT_DONE = 0x80,IPS_DST_NAT_DONE_BIT = 0x8,IPS_DST_NAT_DONE = 0x100,IPS_NAT_DONE_MASK = 0x180,IPS_DYING_BIT = 0x9,IPS_DYING = 0x200,IPS_FIXED_TIMEOUT_BIT = 0xA,IPS_FIXED_TIMEOUT = 0x400,IPS_TEMPLATE_BIT = 0xB,IPS_TEMPLATE = 0x800,IPS_UNTRACKED_BIT = 0xC,IPS_UNTRACKED = 0x1000,IPS_HELPER_BIT = 0xD,IPS_HELPER = 0x2000,};
enum nfnl_acct_msg_types {NFNL_MSG_ACCT_NEW = 0x0,NFNL_MSG_ACCT_GET = 0x1,NFNL_MSG_ACCT_GET_CTRZERO = 0x2,NFNL_MSG_ACCT_DEL = 0x3,NFNL_MSG_ACCT_MAX = 0x4,};
enum nubus_vendor_res_id {NUBUS_RESID_VEND_ID = 0x1,NUBUS_RESID_VEND_SERIAL = 0x2,NUBUS_RESID_VEND_REV = 0x3,NUBUS_RESID_VEND_PART = 0x4,NUBUS_RESID_VEND_DATE = 0x5,};
enum omapfb_color_format {OMAPFB_COLOR_RGB565 = 0x0,OMAPFB_COLOR_YUV422 = 0x1,OMAPFB_COLOR_YUV420 = 0x2,OMAPFB_COLOR_CLUT_8BPP = 0x3,OMAPFB_COLOR_CLUT_4BPP = 0x4,OMAPFB_COLOR_CLUT_2BPP = 0x5,OMAPFB_COLOR_CLUT_1BPP = 0x6,OMAPFB_COLOR_RGB444 = 0x7,OMAPFB_COLOR_YUY422 = 0x8,OMAPFB_COLOR_ARGB16 = 0x9,OMAPFB_COLOR_RGB24U = 0xA,OMAPFB_COLOR_RGB24P = 0xB,OMAPFB_COLOR_ARGB32 = 0xC,OMAPFB_COLOR_RGBA32 = 0xD,OMAPFB_COLOR_RGBX32 = 0xE,};
enum ovs_tunnel_key_attr {OVS_TUNNEL_KEY_ATTR_ID = 0x0,OVS_TUNNEL_KEY_ATTR_IPV4_SRC = 0x1,OVS_TUNNEL_KEY_ATTR_IPV4_DST = 0x2,OVS_TUNNEL_KEY_ATTR_TOS = 0x3,OVS_TUNNEL_KEY_ATTR_TTL = 0x4,OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT = 0x5,OVS_TUNNEL_KEY_ATTR_CSUM = 0x6,__OVS_TUNNEL_KEY_ATTR_MAX = 0x7,};
enum perf_event_x86_regs {PERF_REG_X86_AX = 0x0,PERF_REG_X86_BX = 0x1,PERF_REG_X86_CX = 0x2,PERF_REG_X86_DX = 0x3,PERF_REG_X86_SI = 0x4,PERF_REG_X86_DI = 0x5,PERF_REG_X86_BP = 0x6,PERF_REG_X86_SP = 0x7,PERF_REG_X86_IP = 0x8,PERF_REG_X86_FLAGS = 0x9,PERF_REG_X86_CS = 0xA,PERF_REG_X86_SS = 0xB,PERF_REG_X86_DS = 0xC,PERF_REG_X86_ES = 0xD,PERF_REG_X86_FS = 0xE,PERF_REG_X86_GS = 0xF,PERF_REG_X86_R8 = 0x10,PERF_REG_X86_R9 = 0x11,PERF_REG_X86_R10 = 0x12,PERF_REG_X86_R11 = 0x13,PERF_REG_X86_R12 = 0x14,PERF_REG_X86_R13 = 0x15,PERF_REG_X86_R14 = 0x16,PERF_REG_X86_R15 = 0x17,PERF_REG_X86_32_MAX = 0x10,PERF_REG_X86_64_MAX = 0x18,};
typedef union _D1D0F511BF997F52624AFB2B0CE27B40 pthread_mutexattr_t;
struct seg7_conversion_map {unsigned __int8 table[128];};
enum snd_compr_direction {SND_COMPRESS_PLAYBACK = 0x0,SND_COMPRESS_CAPTURE = 0x1,};
typedef int snd_ctl_elem_type_t;
typedef int snd_pcm_subformat_t;
struct snd_seq_client_pool {int client;int output_pool;int input_pool;int output_room;int output_free;int input_free;char reserved[64];};
struct snd_seq_queue_tempo {int queue;unsigned int tempo;int ppq;unsigned int skew_value;unsigned int skew_base;char reserved[24];};
struct snd_seq_system_info {int queues;int clients;int ports;int channels;int cur_clients;int cur_queues;char reserved[24];};
typedef unsigned int snd_seq_tick_time_t;
struct soundfont_voice_map {int map_bank;int map_instr;int map_key;int src_bank;int src_instr;int src_key;};
enum v4l2_flash_led_mode {V4L2_FLASH_LED_MODE_NONE = 0x0,V4L2_FLASH_LED_MODE_FLASH = 0x1,V4L2_FLASH_LED_MODE_TORCH = 0x2,};
enum v4l2_mbus_pixelcode {V4L2_MBUS_FMT_FIXED = 0x1,V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE = 0x1001,V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE = 0x1002,V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE = 0x1003,V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE = 0x1004,V4L2_MBUS_FMT_BGR565_2X8_BE = 0x1005,V4L2_MBUS_FMT_BGR565_2X8_LE = 0x1006,V4L2_MBUS_FMT_RGB565_2X8_BE = 0x1007,V4L2_MBUS_FMT_RGB565_2X8_LE = 0x1008,V4L2_MBUS_FMT_RGB666_1X18 = 0x1009,V4L2_MBUS_FMT_RGB888_1X24 = 0x100A,V4L2_MBUS_FMT_RGB888_2X12_BE = 0x100B,V4L2_MBUS_FMT_RGB888_2X12_LE = 0x100C,V4L2_MBUS_FMT_Y8_1X8 = 0x2001,V4L2_MBUS_FMT_UV8_1X8 = 0x2015,V4L2_MBUS_FMT_UYVY8_1_5X8 = 0x2002,V4L2_MBUS_FMT_VYUY8_1_5X8 = 0x2003,V4L2_MBUS_FMT_YUYV8_1_5X8 = 0x2004,V4L2_MBUS_FMT_YVYU8_1_5X8 = 0x2005,V4L2_MBUS_FMT_UYVY8_2X8 = 0x2006,V4L2_MBUS_FMT_VYUY8_2X8 = 0x2007,V4L2_MBUS_FMT_YUYV8_2X8 = 0x2008,V4L2_MBUS_FMT_YVYU8_2X8 = 0x2009,V4L2_MBUS_FMT_Y10_1X10 = 0x200A,V4L2_MBUS_FMT_YUYV10_2X10 = 0x200B,V4L2_MBUS_FMT_YVYU10_2X10 = 0x200C,V4L2_MBUS_FMT_Y12_1X12 = 0x2013,V4L2_MBUS_FMT_UYVY8_1X16 = 0x200F,V4L2_MBUS_FMT_VYUY8_1X16 = 0x2010,V4L2_MBUS_FMT_YUYV8_1X16 = 0x2011,V4L2_MBUS_FMT_YVYU8_1X16 = 0x2012,V4L2_MBUS_FMT_YDYUYDYV8_1X16 = 0x2014,V4L2_MBUS_FMT_YUYV10_1X20 = 0x200D,V4L2_MBUS_FMT_YVYU10_1X20 = 0x200E,V4L2_MBUS_FMT_YUV10_1X30 = 0x2016,V4L2_MBUS_FMT_SBGGR8_1X8 = 0x3001,V4L2_MBUS_FMT_SGBRG8_1X8 = 0x3013,V4L2_MBUS_FMT_SGRBG8_1X8 = 0x3002,V4L2_MBUS_FMT_SRGGB8_1X8 = 0x3014,V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8 = 0x3015,V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8 = 0x3016,V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8 = 0x3017,V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8 = 0x3018,V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 = 0x300B,V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 = 0x300C,V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 = 0x3009,V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 = 0x300D,V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE = 0x3003,V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE = 0x3004,V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE = 0x3005,V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE = 0x3006,V4L2_MBUS_FMT_SBGGR10_1X10 = 0x3007,V4L2_MBUS_FMT_SGBRG10_1X10 = 0x300E,V4L2_MBUS_FMT_SGRBG10_1X10 = 0x300A,V4L2_MBUS_FMT_SRGGB10_1X10 = 0x300F,V4L2_MBUS_FMT_SBGGR12_1X12 = 0x3008,V4L2_MBUS_FMT_SGBRG12_1X12 = 0x3010,V4L2_MBUS_FMT_SGRBG12_1X12 = 0x3011,V4L2_MBUS_FMT_SRGGB12_1X12 = 0x3012,V4L2_MBUS_FMT_JPEG_1X8 = 0x4001,V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8 = 0x5001,};
enum v4l2_mpeg_audio_crc {V4L2_MPEG_AUDIO_CRC_NONE = 0x0,V4L2_MPEG_AUDIO_CRC_CRC16 = 0x1,};
typedef struct video_spu_palette video_spu_palette_t;
struct x25_subscrip_struct {char device[192];unsigned __int64 global_facil_mask;unsigned int extended;};
typedef struct _5C2B60FA26E73A1BF39A96E97412C65C xAllocColorCellsReq;
typedef struct _4E2DFB9F6290197309D31FB10928FA58 xAllocNamedColorReq;
typedef struct _56F965C4CB1B37CA1C9344E914749FD8 xCirculateWindowReq;
typedef struct _57E6A23A76D16D83EF023BCC9C7B7628 xConfigureWindowReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXQueryVersionReq;
typedef struct _BDA8B21BBF344B8E23C198E46F24428F xDMXRemoveScreenReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSGetTimeoutsReq;
typedef struct _F571D10236F18BD99A11DF3B50D0C123 xDPMSSetTimeoutsReq;
typedef struct _E9AF2F2A8EA064B789B183AF44D2C131 xDRI2SwapBuffersReq;
typedef struct _BD71CB07C4DDF44AC99036AEC3635494 xDbeGetVersionReply;
typedef struct _6ED97C3403DE0E72A6D3A9179DE884AD xDeviceAbsAreaState;
typedef struct _XEVIQueryVersion xEVIQueryVersionReq;
typedef struct _xExtendedVisualInfo xExtendedVisualInfo;
typedef struct _8E9D6FDA341A5CD3E2BA41AECEFC8DB5 xGetInputFocusReply;
typedef struct _DB0E3B2132CB3BCDB478CD47716D7AA6 xGetMotionEventsReq;
typedef struct _4E7073A36C65C782742204589C7C453B xIntegerFeedbackCtl;
typedef struct _0894F55B6F728822A381396F6EE8B24B xLbxConnSetupPrefix;
typedef struct _LbxQueryVersion xLbxQueryVersionReq;
typedef struct _91DA6C1759B9453440D37A912FAA4391 xMITGetBugModeReply;
typedef struct _9990F7522FA29648C94CCC0846165B95 xQueryBestSizeReply;
typedef struct _B818E9DF3118804B08A86ECE79240C1A xRRAddOutputModeReq;
typedef struct _914C84823AB334B2B6A44B1454234A7D xRRGetCrtcInfoReply;
typedef struct _418C74B7659B6963E50B421CB8AEDCF3 xRRGetOutputInfoReq;
typedef struct _0A710E56E462CA6F472C6BEF95652ED5 xRRGetScreenInfoReq;
typedef struct _B753CC28BE97AA51EF6C665DC0F564ED xRRSetCrtcConfigReq;
typedef struct _E3DAF80DA6E2FC3B2711E1BFC9612898 xRRSetScreenSizeReq;
typedef struct _80FA3E9E2CB8CB94E88F4B4B7A4726B2 xRenderAddGlyphsReq;
typedef struct _0DEEDF24E65D3751BB6E7763FD103A13 xRenderCompositeReq;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTrianglesReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xSetDeviceModeReply;
typedef struct _ShapeRectangles xShapeRectanglesReq;
typedef struct _ShmCompletion xShmCompletionEvent;
typedef struct _ShmCreatePixmap xShmCreatePixmapReq;
typedef struct _ShmQueryVersion xShmQueryVersionReq;
typedef struct _C7406CB336B739A87F2A2E6FB42BC742 xStoreNamedColorReq;
typedef struct _xSyncChangeAlarmReq xSyncChangeAlarmReq;
typedef struct _xSyncCreateAlarmReq xSyncCreateAlarmReq;
typedef struct _xSyncCreateFenceReq xSyncCreateFenceReq;
typedef struct _xSyncGetPriority xSyncGetPriorityReq;
typedef struct _xSyncSetPriority xSyncSetPriorityReq;
typedef struct _BC0C03DE100E0ADBA9BE7AF77D01715A xTranslateCoordsReq;
typedef struct _9C8855C5416F841FBC956426CB420C87 xUngrabDeviceKeyReq;
typedef struct _XDGASelectInput xXDGASelectInputReq;
typedef struct _XDGASetViewport xXDGASetViewportReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesSetRegionReq;
typedef struct _EFD218D8CB6E2125874F3715AA0C6AA7 xXIGetPropertyReply;
typedef struct _8101C547F89E636B6C8AA4FE510BA77D xXIGrabModifierInfo;
typedef struct _B3CBED78BE28E2F7F53FDE1AC472584A xXIQueryDeviceReply;
typedef struct _696BFCCA82AE9FEB0738E58DD35D6784 xXIRemoveMasterInfo;
typedef struct _XResResourceIdSpec xXResResourceIdSpec;
typedef struct _A1602EFEF26A0DD20EAD389B18F82E81 xXTestGetVersionReq;
typedef struct _XagDestroyAssoc xXagDestroyAssocReq;
typedef struct _XagQueryVersion xXagQueryVersionReq;
typedef struct _XcupStoreColors xXcupStoreColorsReq;
typedef struct _F2F9B6351970DCB60CFA1FAEAB4D2E42 xXineramaScreenInfo;
enum xcb_backing_store_t {XCB_BACKING_STORE_NOT_USEFUL = 0x0,XCB_BACKING_STORE_WHEN_MAPPED = 0x1,XCB_BACKING_STORE_ALWAYS = 0x2,};
enum xcb_clip_ordering_t {XCB_CLIP_ORDERING_UNSORTED = 0x0,XCB_CLIP_ORDERING_Y_SORTED = 0x1,XCB_CLIP_ORDERING_YX_SORTED = 0x2,XCB_CLIP_ORDERING_YX_BANDED = 0x3,};
enum xcb_colormap_enum_t {XCB_COLORMAP_NONE = 0x0,};
enum xcb_config_window_t {XCB_CONFIG_WINDOW_X = 0x1,XCB_CONFIG_WINDOW_Y = 0x2,XCB_CONFIG_WINDOW_WIDTH = 0x4,XCB_CONFIG_WINDOW_HEIGHT = 0x8,XCB_CONFIG_WINDOW_BORDER_WIDTH = 0x10,XCB_CONFIG_WINDOW_SIBLING = 0x20,XCB_CONFIG_WINDOW_STACK_MODE = 0x40,};
typedef struct _F1FCB6DD93472D8B068BCACD2B6CBA02 xcb_generic_error_t;
typedef struct _F14124C6CA524F54899508FD11C59AF5 xcb_generic_event_t;
typedef struct _7FFBF4E81BEBC201DEAF468EBD0F9AD5 xcb_generic_reply_t;
struct xcb_host_iterator_t {xcb_host_t *data;int rem;int index;};
enum xcb_notify_detail_t {XCB_NOTIFY_DETAIL_ANCESTOR = 0x0,XCB_NOTIFY_DETAIL_VIRTUAL = 0x1,XCB_NOTIFY_DETAIL_INFERIOR = 0x2,XCB_NOTIFY_DETAIL_NONLINEAR = 0x3,XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL = 0x4,XCB_NOTIFY_DETAIL_POINTER = 0x5,XCB_NOTIFY_DETAIL_POINTER_ROOT = 0x6,XCB_NOTIFY_DETAIL_NONE = 0x7,};
enum xcb_record_h_type_t {XCB_RECORD_H_TYPE_FROM_SERVER_TIME = 0x1,XCB_RECORD_H_TYPE_FROM_CLIENT_TIME = 0x2,XCB_RECORD_H_TYPE_FROM_CLIENT_SEQUENCE = 0x4,};
enum xcb_render_repeat_t {XCB_RENDER_REPEAT_NONE = 0x0,XCB_RENDER_REPEAT_NORMAL = 0x1,XCB_RENDER_REPEAT_PAD = 0x2,XCB_RENDER_REPEAT_REFLECT = 0x3,};
enum xcb_sync_testtype_t {XCB_SYNC_TESTTYPE_POSITIVE_TRANSITION = 0x0,XCB_SYNC_TESTTYPE_NEGATIVE_TRANSITION = 0x1,XCB_SYNC_TESTTYPE_POSITIVE_COMPARISON = 0x2,XCB_SYNC_TESTTYPE_NEGATIVE_COMPARISON = 0x3,};
enum xcb_xkb_bool_ctrl_t {XCB_XKB_BOOL_CTRL_REPEAT_KEYS = 0x1,XCB_XKB_BOOL_CTRL_SLOW_KEYS = 0x2,XCB_XKB_BOOL_CTRL_BOUNCE_KEYS = 0x4,XCB_XKB_BOOL_CTRL_STICKY_KEYS = 0x8,XCB_XKB_BOOL_CTRL_MOUSE_KEYS = 0x10,XCB_XKB_BOOL_CTRL_MOUSE_KEYS_ACCEL = 0x20,XCB_XKB_BOOL_CTRL_ACCESS_X_KEYS = 0x40,XCB_XKB_BOOL_CTRL_ACCESS_X_TIMEOUT_MASK = 0x80,XCB_XKB_BOOL_CTRL_ACCESS_X_FEEDBACK_MASK = 0x100,XCB_XKB_BOOL_CTRL_AUDIBLE_BELL_MASK = 0x200,XCB_XKB_BOOL_CTRL_OVERLAY_1_MASK = 0x400,XCB_XKB_BOOL_CTRL_OVERLAY_2_MASK = 0x800,XCB_XKB_BOOL_CTRL_IGNORE_GROUP_LOCK_MASK = 0x1000,};
enum xcb_xkb_cm_detail_t {XCB_XKB_CM_DETAIL_SYM_INTERP = 0x1,XCB_XKB_CM_DETAIL_GROUP_COMPAT = 0x2,};
enum xcb_xkb_led_class_t {XCB_XKB_LED_CLASS_DFLT_XI_CLASS = 0x300,XCB_XKB_LED_CLASS_ALL_XI_CLASSES = 0x500,};
enum xfrm_sadattr_type_t {XFRMA_SAD_UNSPEC = 0x0,XFRMA_SAD_CNT = 0x1,XFRMA_SAD_HINFO = 0x2,__XFRMA_SAD_MAX = 0x3,};
enum xfrm_spdattr_type_t {XFRMA_SPD_UNSPEC = 0x0,XFRMA_SPD_INFO = 0x1,XFRMA_SPD_HINFO = 0x2,__XFRMA_SPD_MAX = 0x3,};
typedef struct _xkbBehaviorWireDesc xkbBehaviorWireDesc;
typedef struct _xkbGetControlsReply xkbGetControlsReply;
typedef struct _xkbGetDeviceInfo xkbGetDeviceInfoReq;
typedef struct _xkbGetGeometryReply xkbGetGeometryReply;
typedef struct _xkbSetDeviceInfo xkbSetDeviceInfoReq;
enum xt_connlabel_mtopts {XT_CONNLABEL_OP_INVERT = 0x1,XT_CONNLABEL_OP_SET = 0x2,};
struct xt_hashlimit_htable;
typedef struct _9A02475B75BDC9A6C1FC81F46F9E4217 xvQueryEncodingsReq;
typedef struct _E7AFD6532C2786B1E1EBCA6ADECADE75 xvQueryExtensionReq;
typedef struct _488FF45B2B0EF525AA1AD13B1739492B xvmcQueryVersionReq;
struct Dwarf_Reg_value3_s;
typedef struct _FontPathElement *FontPathElementPtr;
typedef struct _FontPathElement FontPathElementRec;
typedef struct _450D4081AC7D58DC5B6C23FB01500D9F IXJ_FILTER_CADENCE;
enum MACRO_ASYNC_PARITY {ASYNC_PARITY_NONE = 0,ASYNC_PARITY_EVEN = 1,ASYNC_PARITY_ODD = 2,ASYNC_PARITY_SPACE = 3,};
enum MACRO_AllTemporary {AllTemporary = 0,};
enum MACRO_AsyncPointer {AsyncPointer = 0,SyncPointer = 1,ReplayPointer = 2,};
enum MACRO_BLKTRACESTOP {BLKTRACESTOP = 0x1275,};
enum MACRO_BSD_COMPRESS {CI_BSD_COMPRESS = 21,CILEN_BSD_COMPRESS = 3,};
enum MACRO_BadCharRange {BadCharRange = 87,};
enum MACRO_BadLbxClient {BadLbxClient = 0,LbxNumberErrors = 1,};
enum MACRO_CAN_CTRLMODE {CAN_CTRLMODE_LOOPBACK = 0x1,CAN_CTRLMODE_LISTENONLY = 0x2,CAN_CTRLMODE_3_SAMPLES = 0x4,CAN_CTRLMODE_ONE_SHOT = 0x8,CAN_CTRLMODE_BERR_REPORTING = 0x10,};
enum MACRO_CDROMPLAYBLK {CDROMPLAYBLK = 0x5317,};
enum MACRO_CDROMPLAYMSF {CDROMPLAYMSF = 0x5303,};
enum MACRO_CDROMREADALL {CDROMREADALL = 0x5318,};
enum MACRO_CDROMREADRAW {CDROMREADRAW = 0x5314,};
enum MACRO_CDROMSUBCHNL {CDROMSUBCHNL = 0x530B,};
enum MACRO_CDROMVOLCTRL {CDROMVOLCTRL = 0x530A,};
enum MACRO_CDROMVOLREAD {CDROMVOLREAD = 0x5313,};
enum MACRO_CHIOINITELEM {CHIOINITELEM = 25361,};
enum MACRO_CI_PREDICTOR {CI_PREDICTOR_1 = 1,};
enum MACRO_COMMAND_LINE {COMMAND_LINE_SIZE = 512,};
enum MACRO_COPY_ABORTED {COPY_ABORTED = 0xA,};
enum MACRO_CWBackPixmap {CWBackPixmap = 1,CWBackPixel = 2,CWBorderPixmap = 4,CWBorderPixel = 8,CWBitGravity = 16,CWWinGravity = 32,CWBackingStore = 64,CWBackingPlanes = 128,CWBackingPixel = 256,CWOverrideRedirect = 512,CWSaveUnder = 1024,CWEventMask = 2048,CWDontPropagate = 4096,CWColormap = 8192,CWCursor = 16384,};
enum MACRO_CYGETTIMEOUT {CYGETTIMEOUT = 0x435906,};
enum MACRO_CYSETTIMEOUT {CYSETTIMEOUT = 0x435907,};
enum MACRO_DATA_PROTECT {DATA_PROTECT = 0x7,};
enum MACRO_DMXInputType {DMXInputType = 1,DMXInputPhysicalScreen = 2,DMXInputSendsCore = 4,};
enum MACRO_DbeBadBuffer {DbeBadBuffer = 0,DbeNumberErrors = 1,};
enum MACRO_ELFCLASSNONE {ELFCLASSNONE = 0,ELFCLASS32 = 1,ELFCLASS64 = 2,};
enum MACRO_ETHTOOL_GSET {ETHTOOL_GSET = 0x1,ETHTOOL_SSET = 0x2,ETHTOOL_GDRVINFO = 0x3,ETHTOOL_GREGS = 0x4,ETHTOOL_GWOL = 0x5,ETHTOOL_SWOL = 0x6,ETHTOOL_GMSGLVL = 0x7,ETHTOOL_SMSGLVL = 0x8,ETHTOOL_NWAY_RST = 0x9,ETHTOOL_GLINK = 0xA,ETHTOOL_GEEPROM = 0xB,ETHTOOL_SEEPROM = 0xC,ETHTOOL_GCOALESCE = 0xE,ETHTOOL_SCOALESCE = 0xF,ETHTOOL_GRINGPARAM = 0x10,ETHTOOL_SRINGPARAM = 0x11,ETHTOOL_GPAUSEPARAM = 0x12,ETHTOOL_SPAUSEPARAM = 0x13,ETHTOOL_GRXCSUM = 0x14,ETHTOOL_SRXCSUM = 0x15,ETHTOOL_GTXCSUM = 0x16,ETHTOOL_STXCSUM = 0x17,ETHTOOL_GSG = 0x18,ETHTOOL_SSG = 0x19,ETHTOOL_TEST = 0x1A,ETHTOOL_GSTRINGS = 0x1B,ETHTOOL_PHYS_ID = 0x1C,ETHTOOL_GSTATS = 0x1D,ETHTOOL_GTSO = 0x1E,ETHTOOL_STSO = 0x1F,ETHTOOL_GPERMADDR = 0x20,ETHTOOL_GUFO = 0x21,ETHTOOL_SUFO = 0x22,ETHTOOL_GGSO = 0x23,ETHTOOL_SGSO = 0x24,ETHTOOL_GFLAGS = 0x25,ETHTOOL_SFLAGS = 0x26,ETHTOOL_GPFLAGS = 0x27,ETHTOOL_SPFLAGS = 0x28,ETHTOOL_GRXFH = 0x29,ETHTOOL_SRXFH = 0x2A,ETHTOOL_GGRO = 0x2B,ETHTOOL_SGRO = 0x2C,ETHTOOL_GRXRINGS = 0x2D,ETHTOOL_GRXCLSRLCNT = 0x2E,ETHTOOL_GRXCLSRULE = 0x2F,ETHTOOL_GRXCLSRLALL = 0x30,ETHTOOL_SRXCLSRLDEL = 0x31,ETHTOOL_SRXCLSRLINS = 0x32,ETHTOOL_FLASHDEV = 0x33,ETHTOOL_RESET = 0x34,ETHTOOL_SRXNTUPLE = 0x35,ETHTOOL_GRXNTUPLE = 0x36,ETHTOOL_GSSET_INFO = 0x37,ETHTOOL_GRXFHINDIR = 0x38,ETHTOOL_SRXFHINDIR = 0x39,ETHTOOL_GFEATURES = 0x3A,ETHTOOL_SFEATURES = 0x3B,ETHTOOL_GCHANNELS = 0x3C,ETHTOOL_SCHANNELS = 0x3D,ETHTOOL_SET_DUMP = 0x3E,ETHTOOL_GET_DUMP_FLAG = 0x3F,ETHTOOL_GET_DUMP_DATA = 0x40,ETHTOOL_GET_TS_INFO = 0x41,ETHTOOL_GMODULEINFO = 0x42,ETHTOOL_GMODULEEEPROM = 0x43,ETHTOOL_GEEE = 0x44,ETHTOOL_SEEE = 0x45,};
enum MACRO_EnableAccess {EnableAccess = 1,};
enum MACRO_FOPEN_DIRECT {FOPEN_DIRECT_IO = 1,FOPEN_KEEP_CACHE = 2,FOPEN_NONSEEKABLE = 4,};
enum MACRO_FSBadRequest {FSBadRequest = 0,FSBadFormat = 1,FSBadFont = 2,};
enum MACRO_FUSE_RELEASE {FUSE_RELEASE_FLUSH = 1,FUSE_RELEASE_FLOCK_UNLOCK = 2,FUSE_GETATTR_FH = 1,FUSE_LK_FLOCK = 1,FUSE_WRITE_CACHE = 1,FUSE_WRITE_LOCKOWNER = 2,FUSE_READ_LOCKOWNER = 2,FUSE_IOCTL_COMPAT = 1,FUSE_IOCTL_UNRESTRICTED = 2,FUSE_IOCTL_RETRY = 4,FUSE_IOCTL_32BIT = 8,FUSE_IOCTL_DIR = 16,FUSE_IOCTL_MAX_IOV = 256,FUSE_POLL_SCHEDULE_NOTIFY = 1,FUSE_MIN_READ_BUFFER = 8192,FUSE_COMPAT_ENTRY_OUT_SIZE = 120,FUSE_COMPAT_ATTR_OUT_SIZE = 96,FUSE_COMPAT_MKNOD_IN_SIZE = 8,FUSE_COMPAT_WRITE_IN_SIZE = 24,FUSE_COMPAT_STATFS_SIZE = 48,};
enum MACRO_FUTEX_BITSET {FUTEX_BITSET_MATCH_ANY = 0xFFFFFFFF,FUTEX_OP_SET = 0x0,FUTEX_OP_ADD = 0x1,FUTEX_OP_OR = 0x2,FUTEX_OP_ANDN = 0x3,FUTEX_OP_XOR = 0x4,FUTEX_OP_OPARG_SHIFT = 0x8,FUTEX_OP_CMP_EQ = 0x0,FUTEX_OP_CMP_NE = 0x1,FUTEX_OP_CMP_LT = 0x2,FUTEX_OP_CMP_LE = 0x3,FUTEX_OP_CMP_GT = 0x4,FUTEX_OP_CMP_GE = 0x5,};
enum MACRO_FontLoadInfo {FontLoadInfo = 0x1,FontLoadProps = 0x2,FontLoadMetrics = 0x4,FontLoadBitmaps = 0x8,};
enum MACRO_GFXCacheNone {GFXCacheNone = 0xF,};
enum MACRO_GLOB_NOSPACE {GLOB_NOSPACE = 1,GLOB_ABORTED = 2,GLOB_NOMATCH = 3,GLOB_NOSYS = 4,GLOB_ABEND = 2,};
enum MACRO_GMON_VERSION {GMON_VERSION = 1,GMON_SHOBJ_VERSION = 131071,};
enum MACRO_GXorInverted {GXorInverted = 0xD,};
enum MACRO_GenericEvent {GenericEvent = 35,};
enum MACRO_GrabModeSync {GrabModeSync = 0,GrabModeAsync = 1,};
enum MACRO_GravityEvent {lbxsz_GravityEvent = 16,lbxupsz_GravityEvent = 16,};
enum MACRO_HASHFRACTION {HASHFRACTION = 2,};
enum MACRO_HISTFRACTION {HISTFRACTION = 2,};
enum MACRO_HOT_GENERATE {HOT_GENERATE_ERROR = 0x92A,};
enum MACRO_I2O_SOFTWARE {I2O_SOFTWARE_MODULE_IRTOS = 0x11,I2O_SOFTWARE_MODULE_IOP_PRIVATE = 0x22,I2O_SOFTWARE_MODULE_IOP_CONFIG = 0x23,I2O_VENDOR_DPT = 0x1B,I2O_DPT_SG_FLAG_INTERPRET = 0x10000,I2O_DPT_SG_FLAG_PHYSICAL = 0x20000,I2O_DPT_FLASH_FRAG_SIZE = 0x10000,I2O_DPT_FLASH_READ = 0x101,I2O_DPT_FLASH_WRITE = 0x102,};
enum MACRO_ICMP6_ROUTER {ICMP6_ROUTER_RENUMBERING = 138,ICMP6_RR_FLAGS_TEST = 128,ICMP6_RR_FLAGS_REQRESULT = 64,ICMP6_RR_FLAGS_FORCEAPPLY = 32,ICMP6_RR_FLAGS_SPECSITE = 16,ICMP6_RR_FLAGS_PREVDONE = 8,};
enum MACRO_IEEE_8021QAZ {IEEE_8021QAZ_APP_SEL_ETHERTYPE = 1,IEEE_8021QAZ_APP_SEL_STREAM = 2,IEEE_8021QAZ_APP_SEL_DGRAM = 3,IEEE_8021QAZ_APP_SEL_ANY = 4,};
enum MACRO_INTERMEDIATE {INTERMEDIATE_GOOD = 0x8,INTERMEDIATE_C_GOOD = 0xA,};
enum MACRO_IP_MAXPACKET {IP_MAXPACKET = 65535,};
enum MACRO_IP_MULTICAST {IP_MULTICAST_ALL = 49,IP_UNICAST_IF = 50,};
enum MACRO_KDGETKEYCODE {KDGETKEYCODE = 0x4B4C,};
enum MACRO_KDGKBDIACRUC {KDGKBDIACRUC = 0x4BFA,};
enum MACRO_KDSETKEYCODE {KDSETKEYCODE = 0x4B4D,};
enum MACRO_KDSKBDIACRUC {KDSKBDIACRUC = 0x4BFB,};
enum MACRO_K_SCROLLLOCK {K_SCROLLLOCK = 0x1,K_NUMLOCK = 0x2,K_CAPSLOCK = 0x4,};
enum MACRO_KeymapNotify {KeymapNotify = 11,};
enum MACRO_LINUX_REBOOT {LINUX_REBOOT_MAGIC1 = 0xFEE1DEAD,LINUX_REBOOT_MAGIC2 = 0x28121969,LINUX_REBOOT_MAGIC2A = 0x5121996,LINUX_REBOOT_MAGIC2B = 0x16041998,LINUX_REBOOT_MAGIC2C = 0x20112000,LINUX_REBOOT_CMD_RESTART = 0x1234567,LINUX_REBOOT_CMD_HALT = 0xCDEF0123,LINUX_REBOOT_CMD_CAD_ON = 0x89ABCDEF,LINUX_REBOOT_CMD_CAD_OFF = 0x0,LINUX_REBOOT_CMD_POWER_OFF = 0x4321FEDC,LINUX_REBOOT_CMD_RESTART2 = 0xA1B2C3D4,LINUX_REBOOT_CMD_SW_SUSPEND = 0xD000FCE2,LINUX_REBOOT_CMD_KEXEC = 0x45584543,};
enum MACRO_LM_MAXSTRLEN {LM_MAXSTRLEN = 1024,};
enum MACRO_LOCK_SUCCESS {LOCK_SUCCESS = 0,LOCK_ERROR = 1,LOCK_TIMEOUT = 2,};
enum MACRO_LPSETTIMEOUT {LPSETTIMEOUT = 0x60F,};
enum MACRO_MAP_HUGE_2MB {MAP_HUGE_2MB = 1409286144,MAP_HUGE_1GB = 2013265920,};
enum MACRO_MASK_HOPOPTS {MASK_HOPOPTS = 128,MASK_DSTOPTS = 64,MASK_ROUTING = 32,MASK_FRAGMENT = 16,MASK_AH = 8,MASK_ESP = 4,MASK_NONE = 2,MASK_PROTO = 1,};
enum MACRO_MAXERRMSGLEN {MAXERRMSGLEN = 255,};
enum MACRO_MAXYPDATALEN {MAXYPDATALEN = 1023,};
enum MACRO_MAX_IPOPTLEN {MAX_IPOPTLEN = 40,};
enum MACRO_MEDIUM_ERROR {MEDIUM_ERROR = 0x3,HARDWARE_ERROR = 0x4,};
enum MACRO_MENU_COMMAND {MIN_MENU_COMMAND = 512,MAX_MENU_COMMAND = 528,};
enum MACRO_MIDI_NOTEOFF {MIDI_NOTEOFF = 0x80,MIDI_NOTEON = 0x90,MIDI_KEY_PRESSURE = 0xA0,MIDI_CTL_CHANGE = 0xB0,MIDI_PGM_CHANGE = 0xC0,MIDI_CHN_PRESSURE = 0xD0,MIDI_PITCH_BEND = 0xE0,MIDI_SYSTEM_PREFIX = 0xF0,};
enum MACRO_MSR_IA32_VMX {MSR_IA32_VMX_MISC_VMWRITE_SHADOW_RO_FIELDS = 536870912,MSR_VM_CR = -1073676012,MSR_VM_IGNNE = -1073676011,MSR_VM_HSAVE_PA = -1073676009,};
enum MACRO_MSR_PLATFORM {MSR_PLATFORM_INFO = 0xCE,MSR_MTRRcap = 0xFE,MSR_IA32_BBL_CR_CTL = 0x119,MSR_IA32_BBL_CR_CTL3 = 0x11E,MSR_IA32_SYSENTER_CS = 0x174,MSR_IA32_SYSENTER_ESP = 0x175,MSR_IA32_SYSENTER_EIP = 0x176,MSR_IA32_MCG_CAP = 0x179,MSR_IA32_MCG_STATUS = 0x17A,MSR_IA32_MCG_CTL = 0x17B,MSR_OFFCORE_RSP_0 = 0x1A6,MSR_OFFCORE_RSP_1 = 0x1A7,MSR_NHM_TURBO_RATIO_LIMIT = 0x1AD,MSR_IVT_TURBO_RATIO_LIMIT = 0x1AE,MSR_LBR_SELECT = 0x1C8,MSR_LBR_TOS = 0x1C9,MSR_LBR_NHM_FROM = 0x680,MSR_LBR_NHM_TO = 0x6C0,MSR_LBR_CORE_FROM = 0x40,MSR_LBR_CORE_TO = 0x60,MSR_IA32_PEBS_ENABLE = 0x3F1,MSR_IA32_DS_AREA = 0x600,MSR_IA32_PERF_CAPABILITIES = 0x345,MSR_PEBS_LD_LAT_THRESHOLD = 0x3F6,MSR_MTRRfix64K_00000 = 0x250,MSR_MTRRfix16K_80000 = 0x258,MSR_MTRRfix16K_A0000 = 0x259,MSR_MTRRfix4K_C0000 = 0x268,MSR_MTRRfix4K_C8000 = 0x269,MSR_MTRRfix4K_D0000 = 0x26A,MSR_MTRRfix4K_D8000 = 0x26B,MSR_MTRRfix4K_E0000 = 0x26C,MSR_MTRRfix4K_E8000 = 0x26D,MSR_MTRRfix4K_F0000 = 0x26E,MSR_MTRRfix4K_F8000 = 0x26F,MSR_MTRRdefType = 0x2FF,MSR_IA32_CR_PAT = 0x277,MSR_IA32_DEBUGCTLMSR = 0x1D9,MSR_IA32_LASTBRANCHFROMIP = 0x1DB,MSR_IA32_LASTBRANCHTOIP = 0x1DC,MSR_IA32_LASTINTFROMIP = 0x1DD,MSR_IA32_LASTINTTOIP = 0x1DE,};
enum MACRO_MTSETDENSITY {MTSETDENSITY = 21,};
enum MACRO_Mod1MapIndex {Mod1MapIndex = 3,Mod2MapIndex = 4,};
enum MACRO_Mod3MapIndex {Mod3MapIndex = 5,};
enum MACRO_Mod4MapIndex {Mod4MapIndex = 6,};
enum MACRO_Mod5MapIndex {Mod5MapIndex = 7,Button1Mask = 256,Button2Mask = 512,Button3Mask = 1024,Button4Mask = 2048,Button5Mask = 4096,AnyModifier = 32768,};
enum MACRO_MotionNotify {MotionNotify = 6,};
enum MACRO_NCURSES_TERM {NCURSES_TERM_H_incl = 1,NCURSES_XNAMES = 1,};
enum MACRO_NFS2_VERSION {NFS2_VERSION = 2,};
enum MACRO_NFS4_SECINFO {NFS4_SECINFO_STYLE4_CURRENT_FH = 0,NFS4_SECINFO_STYLE4_PARENT = 1,NFS4_MAX_OPS = 8,NFS4_MAX_BACK_CHANNEL_OPS = 2,NFS4_MOUNT_VERSION = 1,NFS4_MOUNT_SOFT = 1,NFS4_MOUNT_INTR = 2,NFS4_MOUNT_NOCTO = 16,NFS4_MOUNT_NOAC = 32,NFS4_MOUNT_STRICTLOCK = 4096,NFS4_MOUNT_UNSHARED = 32768,NFS4_MOUNT_FLAGMASK = 36915,};
enum MACRO_NS_ADJBUFLEV {NS_ADJBUFLEV = 24931,NS_BUFTYPE_SMALL = 1,NS_BUFTYPE_LARGE = 2,NS_BUFTYPE_HUGE = 3,NS_BUFTYPE_IOVEC = 4,};
enum MACRO_NT_GNU_HWCAP {NT_GNU_HWCAP = 2,NT_GNU_BUILD_ID = 3,NT_GNU_GOLD_VERSION = 4,};
enum MACRO_NULL_xdrproc {NULL_xdrproc_t = 0,};
enum MACRO_NotifyNormal {NotifyNormal = 0,NotifyGrab = 1,NotifyUngrab = 2,};
enum MACRO_NullCharInfo {NullCharInfo = 0,};
enum MACRO_NullFontInfo {NullFontInfo = 0,};
enum MACRO_PACKET_DEBUG {PACKET_DEBUG = 1,};
enum MACRO_PACKET_IOCTL {PACKET_IOCTL_MAGIC = 88,};
enum MACRO_PNPIPE_ENCAP {PNPIPE_ENCAP_NONE = 0,PNPIPE_ENCAP_IP = 1,};
enum MACRO_PORT_PROFILE {PORT_PROFILE_MAX = 40,PORT_UUID_MAX = 16,PORT_SELF_VF = -1,};
enum MACRO_PORT_UNKNOWN {PORT_UNKNOWN = 0,PORT_8250 = 1,PORT_16450 = 2,PORT_16550 = 3,PORT_16550A = 4,PORT_CIRRUS = 5,PORT_16650 = 6,PORT_16650V2 = 7,PORT_16750 = 8,PORT_STARTECH = 9,PORT_16C950 = 10,PORT_16654 = 11,PORT_16850 = 12,PORT_RSA = 13,PORT_MAX = 13,};
enum MACRO_PPPOEIOCDFWD {PPPOEIOCDFWD = 0xB101,};
enum MACRO_PP_FASTWRITE {PP_FASTWRITE = 4,PP_FASTREAD = 8,PP_W91284PIC = 16,PP_FLAGMASK = 28,};
enum MACRO_PictOpDarken {PictOpDarken = 0x33,};
enum MACRO_PictOpHSLHue {PictOpHSLHue = 0x3B,};
enum MACRO_PictOpScreen {PictOpScreen = 0x31,};
enum MACRO_READ_ELEMENT {READ_ELEMENT_STATUS = 0xB8,};
enum MACRO_READ_REVERSE {READ_REVERSE = 0xF,};
enum MACRO_READ_SECTORS {READ_SECTORS = 0x2,};
enum MACRO_RES_MAXNDOTS {RES_MAXNDOTS = 15,RES_MAXRETRANS = 30,RES_MAXRETRY = 5,RES_DFLRETRY = 2,RES_MAXTIME = 65535,};
enum MACRO_RLIM_NLIMITS {RLIM_NLIMITS = 16,};
enum MACRO_RNDCLEARPOOL {RNDCLEARPOOL = 0x5206,};
enum MACRO_RNDZAPENTCNT {RNDZAPENTCNT = 0x5204,};
enum MACRO_RUSERSVERS_0 {RUSERSVERS = 3,MAXUSERS = 100,};
enum MACRO_RUSERSVERS_3 {RUSERSVERS_3 = 3,};
enum MACRO_RectangleOut {RectangleOut = 0,RectangleIn = 1,RectanglePart = 2,};
enum MACRO_RevertToNone {RevertToNone = 0,RevertToPointerRoot = 1,RevertToParent = 2,};
enum MACRO_SCHED_NORMAL {SCHED_NORMAL = 0,};
enum MACRO_SCTP_RTOINFO {SCTP_RTOINFO = 0,SCTP_ASSOCINFO = 1,SCTP_INITMSG = 2,SCTP_NODELAY = 3,SCTP_AUTOCLOSE = 4,SCTP_SET_PEER_PRIMARY_ADDR = 5,SCTP_PRIMARY_ADDR = 6,SCTP_ADAPTATION_LAYER = 7,SCTP_DISABLE_FRAGMENTS = 8,SCTP_PEER_ADDR_PARAMS = 9,SCTP_DEFAULT_SEND_PARAM = 10,SCTP_EVENTS = 11,SCTP_I_WANT_MAPPED_V4_ADDR = 12,SCTP_MAXSEG = 13,SCTP_STATUS = 14,SCTP_GET_PEER_ADDR_INFO = 15,SCTP_DELAYED_ACK_TIME = 16,SCTP_DELAYED_ACK = 16,SCTP_DELAYED_SACK = 16,SCTP_CONTEXT = 17,SCTP_FRAGMENT_INTERLEAVE = 18,SCTP_PARTIAL_DELIVERY_POINT = 19,SCTP_MAX_BURST = 20,SCTP_AUTH_CHUNK = 21,SCTP_HMAC_IDENT = 22,SCTP_AUTH_KEY = 23,SCTP_AUTH_ACTIVE_KEY = 24,SCTP_AUTH_DELETE_KEY = 25,SCTP_PEER_AUTH_CHUNKS = 26,SCTP_LOCAL_AUTH_CHUNKS = 27,SCTP_GET_ASSOC_NUMBER = 28,SCTP_GET_ASSOC_ID_LIST = 29,SCTP_AUTO_ASCONF = 30,SCTP_PEER_ADDR_THLDS = 31,SCTP_SOCKOPT_BINDX_ADD = 100,SCTP_SOCKOPT_BINDX_REM = 101,SCTP_SOCKOPT_PEELOFF = 102,SCTP_SOCKOPT_CONNECTX_OLD = 107,SCTP_GET_PEER_ADDRS = 108,SCTP_GET_LOCAL_ADDRS = 109,SCTP_SOCKOPT_CONNECTX = 110,SCTP_SOCKOPT_CONNECTX3 = 111,SCTP_GET_ASSOC_STATS = 112,SCTP_BINDX_ADD_ADDR = 1,SCTP_BINDX_REM_ADDR = 2,};
enum MACRO_SEQ_FULLSIZE {SEQ_FULLSIZE = 0xFD,SEQ_PRIVATE = 0xFE,SEQ_EXTENDED = 0xFF,};
enum MACRO_SIOCADDMULTI {SIOCADDMULTI = 0x8931,};
enum MACRO_SIOCDELMULTI {SIOCDELMULTI = 0x8932,};
enum MACRO_SIOCGCMSTATS {SIOCGCMSTATS = 35312,};
enum MACRO_SIOCGETSGCNT {SIOCGETSGCNT = 35297,};
enum MACRO_SIOCGIFCOUNT {SIOCGIFCOUNT = 0x8938,};
enum MACRO_SIOCGIFENCAP {SIOCGIFENCAP = 0x8925,};
enum MACRO_SIOCGIFFLAGS {SIOCGIFFLAGS = 0x8913,};
enum MACRO_SIOCGIFINDEX {SIOCGIFINDEX = 0x8933,};
enum MACRO_SIOCGIFSLAVE {SIOCGIFSLAVE = 0x8929,};
enum MACRO_SIOCGOUTFILL {SIOCGOUTFILL = 35315,};
enum MACRO_SIOCGSTAMPNS {SIOCGSTAMPNS = 0x8907,};
enum MACRO_SIOCNRCTLCON {SIOCNRCTLCON = 35300,};
enum MACRO_SIOCNRDECOBS {SIOCNRDECOBS = 35298,};
enum MACRO_SIOCRSACCEPT {SIOCRSACCEPT = 35299,};
enum MACRO_SIOCRSGCAUSE {SIOCRSGCAUSE = 35296,};
enum MACRO_SIOCRSL2CALL {SIOCRSL2CALL = 35298,};
enum MACRO_SIOCRSSCAUSE {SIOCRSSCAUSE = 35297,};
enum MACRO_SIOCSIFENCAP {SIOCSIFENCAP = 0x8926,};
enum MACRO_SIOCSIFFLAGS {SIOCSIFFLAGS = 0x8914,};
enum MACRO_SIOCSIFSLAVE {SIOCSIFSLAVE = 0x8930,};
enum MACRO_SIOCSOUTFILL {SIOCSOUTFILL = 35314,};
enum MACRO_SND_MPOA_RES {SND_MPOA_RES_RTRY = 203,};
enum MACRO_SerialSignal {SerialSignal_DCD = 0x1,SerialSignal_TXD = 0x2,SerialSignal_RI = 0x4,SerialSignal_RXD = 0x8,SerialSignal_CTS = 0x10,SerialSignal_RTS = 0x20,SerialSignal_DSR = 0x40,SerialSignal_DTR = 0x80,};
enum MACRO_StillWorking {StillWorking = 81,};
enum MACRO_SubPixelNone {SubPixelNone = 5,};
enum MACRO_TCA_ACT_CSUM {TCA_ACT_CSUM = 16,TCA_ACT_GACT = 5,};
enum MACRO_THERM_STATUS {THERM_STATUS_PROCHOT = 1,THERM_STATUS_POWER_LIMIT = 1024,};
enum MACRO_TIOCGSOFTCAR {TIOCGSOFTCAR = 0x5419,};
enum MACRO_TIOCPKT_DATA {TIOCPKT_DATA = 0,TIOCPKT_FLUSHREAD = 1,TIOCPKT_FLUSHWRITE = 2,TIOCPKT_STOP = 4,TIOCPKT_START = 8,TIOCPKT_NOSTOP = 16,TIOCPKT_DOSTOP = 32,TIOCPKT_IOCTL = 64,};
enum MACRO_TIOCSERGWILD {TIOCSERGWILD = 0x5454,};
enum MACRO_TIOCSERSWILD {TIOCSERSWILD = 0x5455,};
enum MACRO_TIOCSSOFTCAR {TIOCSSOFTCAR = 0x541A,};
enum MACRO_USB_SUBCLASS {USB_SUBCLASS_AUDIOCONTROL = 0x1,USB_SUBCLASS_AUDIOSTREAMING = 0x2,USB_SUBCLASS_MIDISTREAMING = 0x3,};
enum MACRO_USE_WCACHING {USE_WCACHING = 0,};
enum MACRO_UnmapGravity {UnmapGravity = 0,};
enum MACRO_UseXKeyboard {UseXKeyboard = 0xFF,};
enum MACRO_VisualNoMask {VisualNoMask = 0x0,VisualIDMask = 0x1,VisualScreenMask = 0x2,VisualDepthMask = 0x4,VisualClassMask = 0x8,VisualRedMaskMask = 0x10,VisualGreenMaskMask = 0x20,VisualBlueMaskMask = 0x40,VisualColormapSizeMask = 0x80,VisualBitsPerRGBMask = 0x100,};
enum MACRO_WLNSPERBATCH {WLNSPERBATCH = 50,ZLNSPERBATCH = 1024,};
enum MACRO_WRITE_VERIFY {WRITE_VERIFY = 0x2E,};
enum MACRO_WriteMostly1 {WriteMostly1 = 1,};
enum MACRO_X25_QBITINCL {X25_QBITINCL = 1,X25_PS16 = 4,X25_PS32 = 5,X25_PS64 = 6,X25_PS128 = 7,X25_PS256 = 8,X25_PS512 = 9,X25_PS1024 = 10,X25_PS2048 = 11,X25_PS4096 = 12,X25_MASK_REVERSE = 1,X25_MASK_THROUGHPUT = 2,X25_MASK_PACKET_SIZE = 4,X25_MASK_WINDOW_SIZE = 8,X25_MASK_CALLING_AE = 16,X25_MASK_CALLED_AE = 32,};
enum MACRO_XDGANeedRoot {XDGANeedRoot = 0x1,};
enum MACRO_XIAllDevices {XIAllDevices = 0,XIAllMasterDevices = 1,};
enum MACRO_XIAnyKeycode {XIAnyKeycode = 0,};
enum MACRO_XI_BadDevice {XI_BadDevice = 0,XI_BadEvent = 1,XI_BadMode = 2,XI_DeviceBusy = 3,XI_BadClass = 4,};
enum MACRO_XcmsInitNone {XcmsInitNone = 0x0,XcmsInitSuccess = 0x1,};
enum MACRO_XkbAllGroups {XkbAllGroups = 255,};
enum MACRO_XkbEventCode {XkbEventCode = 0,XkbNumberEvents = 1,};
enum MACRO_XvLastReason {XvLastReason = 4,};
enum MACRO_XvMCRevision {XvMCRevision = 1,};
enum MACRO_XvNumReasons {XvNumReasons = 5,};
enum MACRO__ARPA_TELNET {_ARPA_TELNET_H = 1,};
enum MACRO__BITS_LOCALE {_BITS_LOCALE_H = 1,};
enum MACRO__BITS_POSIX1 {_BITS_POSIX1_LIM_H = 1,};
enum MACRO__BITS_POSIX2 {_BITS_POSIX2_LIM_H = 1,};
enum MACRO__BITS_SETJMP {_BITS_SETJMP_H = 1,};
enum MACRO__BITS_SYSLOG {_BITS_SYSLOG_PATH_H = 1,};
enum MACRO__GNU_OBSTACK {_GNU_OBSTACK_INTERFACE_VERSION = 1,_GNU_REGEX_INTERFACE_VERSION = 1,_GNU_GLOB_INTERFACE_VERSION = 1,_GNU_GETOPT_INTERFACE_VERSION = 2,};
enum MACRO__HAVE_STRUCT {_HAVE_STRUCT_TERMIOS_C_ISPEED = 1,_HAVE_STRUCT_TERMIOS_C_OSPEED = 1,};
enum MACRO__LARGEFILE64 {_LARGEFILE64_SOURCE = 1,_BSD_SOURCE = 1,_SVID_SOURCE = 1,};
enum MACRO__NETINET_TCP {_NETINET_TCP_H = 1,};
enum MACRO__NET_IF_SLIP {_NET_IF_SLIP_H = 1,};
enum MACRO__POSIX2_CHAR {_POSIX2_CHAR_TERM = 200809,};
enum MACRO__SYS_EVENTFD {_SYS_EVENTFD_H = 1,_SYSEXITS_H = 1,};
enum MACRO__SYS_INOTIFY {_SYS_INOTIFY_H = 1,};
enum MACRO__SYS_KDAEMON {_SYS_KDAEMON_H = 1,_SYS_KD_H = 1,};
enum MACRO__SYS_SYSINFO {_SYS_SYSINFO_H = 1,};
enum MACRO___EXTENSIONS {__EXTENSIONS__ = 1,};
enum MACRO___NETINET_IP {__NETINET_IP_ICMP_H = 1,};
enum MACRO___SIZEOF_SEM {__SIZEOF_SEM_T = 32,};
enum MACRO___USE_EXTERN {__USE_EXTERN_INLINES = 1,};
enum MACRO___USE_ISOC11 {__USE_POSIX = 1,__USE_POSIX2 = 1,__USE_POSIX199309 = 1,__USE_POSIX199506 = 1,__USE_XOPEN2K = 1,__USE_XOPEN2K8 = 1,};
enum MACRO__deviceEnter {_deviceEnter = 0,_deviceLeave = 1,};
enum MACRO_autofs_ptype {autofs_ptype_expire_multi = 2,autofs_ptype_missing_indirect = 3,autofs_ptype_expire_indirect = 4,autofs_ptype_missing_direct = 5,autofs_ptype_expire_direct = 6,};
typedef union _MoreErrInfo_struct MoreErrInfo_struct;
typedef struct _PhysDevAddr_struct PhysDevAddr_struct;
typedef struct _3D2747B906FBDDB46B196214774699C1 RECORD_CLIENT_INFO;
typedef struct _47DAAB86EBF09131080EDB83B3644219 XCreateWindowEvent;
typedef struct _XkbBellNotify XkbBellNotifyEvent;
typedef struct _XkbDeviceBtnAction XkbDeviceBtnAction;
typedef struct _XkbIndicatorMapRec *XkbIndicatorMapPtr;
typedef struct _XkbIndicatorMapRec XkbIndicatorMapRec;
typedef struct _XkbSymInterpretRec *XkbSymInterpretPtr;
typedef struct _XkbSymInterpretRec XkbSymInterpretRec;
struct _XkbComponentNames {char *keymap;char *keycodes;char *types;char *compat;char *symbols;char *geometry;};
typedef unsigned int __builtin_offsetof;
typedef int __kernel_clockid_t;
typedef int __kernel_ipc_pid_t;
typedef unsigned __int64 __kernel_old_dev_t;
typedef unsigned __int16 __kernel_old_gid_t;
typedef unsigned __int16 __kernel_old_uid_t;
enum caif_debug_service {CAIF_RADIO_DEBUG_SERVICE = 0x1,CAIF_APP_DEBUG_SERVICE = 0x2,};
enum caif_link_selector {CAIF_LINK_HIGH_BANDW = 0x0,CAIF_LINK_LOW_LATENCY = 0x1,};
enum caif_protocol_type {CAIFPROTO_AT = 0x0,CAIFPROTO_DATAGRAM = 0x1,CAIFPROTO_DATAGRAM_LOOP = 0x2,CAIFPROTO_UTIL = 0x3,CAIFPROTO_RFM = 0x4,CAIFPROTO_DEBUG = 0x5,_CAIFPROTO_MAX = 0x6,};
typedef struct _BDC2BC4E1FC4E3665C531F87A904F1CB changeDeviceNotify;
struct changer_set_voltag {int csv_type;int csv_unit;char csv_voltag[36];int csv_flags;};
enum clusterip_hashmode {CLUSTERIP_HASHMODE_SIP = 0x0,CLUSTERIP_HASHMODE_SIP_SPT = 0x1,CLUSTERIP_HASHMODE_SIP_SPT_DPT = 0x2,};
enum ctattr_timeout_gre {CTA_TIMEOUT_GRE_UNSPEC = 0x0,CTA_TIMEOUT_GRE_UNREPLIED = 0x1,CTA_TIMEOUT_GRE_REPLIED = 0x2,__CTA_TIMEOUT_GRE_MAX = 0x3,};
enum ctattr_timeout_tcp {CTA_TIMEOUT_TCP_UNSPEC = 0x0,CTA_TIMEOUT_TCP_SYN_SENT = 0x1,CTA_TIMEOUT_TCP_SYN_RECV = 0x2,CTA_TIMEOUT_TCP_ESTABLISHED = 0x3,CTA_TIMEOUT_TCP_FIN_WAIT = 0x4,CTA_TIMEOUT_TCP_CLOSE_WAIT = 0x5,CTA_TIMEOUT_TCP_LAST_ACK = 0x6,CTA_TIMEOUT_TCP_TIME_WAIT = 0x7,CTA_TIMEOUT_TCP_CLOSE = 0x8,CTA_TIMEOUT_TCP_SYN_SENT2 = 0x9,CTA_TIMEOUT_TCP_RETRANS = 0xA,CTA_TIMEOUT_TCP_UNACK = 0xB,__CTA_TIMEOUT_TCP_MAX = 0xC,};
enum ctattr_timeout_udp {CTA_TIMEOUT_UDP_UNSPEC = 0x0,CTA_TIMEOUT_UDP_UNREPLIED = 0x1,CTA_TIMEOUT_UDP_REPLIED = 0x2,__CTA_TIMEOUT_UDP_MAX = 0x3,};
enum ctnl_exp_msg_types {IPCTNL_MSG_EXP_NEW = 0x0,IPCTNL_MSG_EXP_GET = 0x1,IPCTNL_MSG_EXP_DELETE = 0x2,IPCTNL_MSG_EXP_GET_STATS_CPU = 0x3,IPCTNL_MSG_EXP_MAX = 0x4,};
enum dcbnl_numtcs_attrs {DCB_NUMTCS_ATTR_UNDEFINED = 0x0,DCB_NUMTCS_ATTR_ALL = 0x1,DCB_NUMTCS_ATTR_PG = 0x2,DCB_NUMTCS_ATTR_PFC = 0x3,__DCB_NUMTCS_ATTR_ENUM_MAX = 0x4,DCB_NUMTCS_ATTR_MAX = 0x3,};
enum dcbnl_pfc_up_attrs {DCB_PFC_UP_ATTR_UNDEFINED = 0x0,DCB_PFC_UP_ATTR_0 = 0x1,DCB_PFC_UP_ATTR_1 = 0x2,DCB_PFC_UP_ATTR_2 = 0x3,DCB_PFC_UP_ATTR_3 = 0x4,DCB_PFC_UP_ATTR_4 = 0x5,DCB_PFC_UP_ATTR_5 = 0x6,DCB_PFC_UP_ATTR_6 = 0x7,DCB_PFC_UP_ATTR_7 = 0x8,DCB_PFC_UP_ATTR_ALL = 0x9,__DCB_PFC_UP_ATTR_ENUM_MAX = 0xA,DCB_PFC_UP_ATTR_MAX = 0x9,};
enum ethtool_test_flags {ETH_TEST_FL_OFFLINE = 0x1,ETH_TEST_FL_FAILED = 0x2,ETH_TEST_FL_EXTERNAL_LB = 0x4,ETH_TEST_FL_EXTERNAL_LB_DONE = 0x8,};
enum fc_els_clir_ts_fmt {ELS_CLIR_TS_UNKNOWN = 0x0,ELS_CLIR_TS_SEC_FRAC = 0x1,ELS_CLIR_TS_CSU = 0x2,};
enum fe_delivery_system {SYS_UNDEFINED = 0x0,SYS_DVBC_ANNEX_A = 0x1,SYS_DVBC_ANNEX_B = 0x2,SYS_DVBT = 0x3,SYS_DSS = 0x4,SYS_DVBS = 0x5,SYS_DVBS2 = 0x6,SYS_DVBH = 0x7,SYS_ISDBT = 0x8,SYS_ISDBS = 0x9,SYS_ISDBC = 0xA,SYS_ATSC = 0xB,SYS_ATSCMH = 0xC,SYS_DTMB = 0xD,SYS_CMMB = 0xE,SYS_DAB = 0xF,SYS_DVBT2 = 0x10,SYS_TURBO = 0x11,SYS_DVBC_ANNEX_C = 0x12,};
enum fecap_scale_params {FE_SCALE_NOT_AVAILABLE = 0x0,FE_SCALE_DECIBEL = 0x1,FE_SCALE_RELATIVE = 0x2,FE_SCALE_COUNTER = 0x3,};
typedef struct _44989FB912D962B2DEA21D74F6F43DAE fsConnClientPrefix;
typedef struct _8215DDD75066012239D919FF6D1C96FC fsSetCataloguesReq;
typedef struct _A545D31055C82AF5215FB86F909CA367 fsSetResolutionReq;
struct gmon_cg_arc_record {char from_pc[8];char self_pc[8];char count[4];};
typedef struct hdsp_config_info hdsp_config_info_t;
struct hdspm_channelfader {unsigned int in[64];unsigned int pb[64];};
struct ip_set_req_version {unsigned int op;unsigned int version;};
struct ip_vs_timeout_user {int tcp_timeout;int tcp_fin_timeout;int udp_timeout;};
struct ipmi_cmdspec_chans {unsigned int netfn;unsigned int cmd;unsigned int chans;};
typedef struct _DBF1C752AC6FF12C0FE21B58BD0D2479 isdn_net_ioctl_cfg;
struct isdn_ppp_comp_data {int num;unsigned __int8 options[16];int optlen;int flags;};
enum nfulnl_attr_config {NFULA_CFG_UNSPEC = 0x0,NFULA_CFG_CMD = 0x1,NFULA_CFG_MODE = 0x2,NFULA_CFG_NLBUFSIZ = 0x3,NFULA_CFG_TIMEOUT = 0x4,NFULA_CFG_QTHRESH = 0x5,NFULA_CFG_FLAGS = 0x6,__NFULA_CFG_MAX = 0x7,};
enum nubus_board_res_id {NUBUS_RESID_BOARDID = 0x20,NUBUS_RESID_PRAMINITDATA = 0x21,NUBUS_RESID_PRIMARYINIT = 0x22,NUBUS_RESID_TIMEOUTCONST = 0x23,NUBUS_RESID_VENDORINFO = 0x24,NUBUS_RESID_BOARDFLAGS = 0x25,NUBUS_RESID_SECONDINIT = 0x26,NUBUS_RESID_VIDNAMES = 0x41,NUBUS_RESID_VIDMODES = 0x7E,};
enum nubus_type_display {NUBUS_TYPE_VIDEO = 0x1,};
enum nubus_type_network {NUBUS_TYPE_ETHERNET = 0x1,NUBUS_TYPE_RS232 = 0x2,};
enum omapfb_channel_out {OMAPFB_CHANNEL_OUT_LCD = 0x0,OMAPFB_CHANNEL_OUT_DIGIT = 0x1,};
enum omapfb_update_mode {OMAPFB_UPDATE_DISABLED = 0x0,OMAPFB_AUTO_UPDATE = 0x1,OMAPFB_MANUAL_UPDATE = 0x2,};
enum ovs_userspace_attr {OVS_USERSPACE_ATTR_UNSPEC = 0x0,OVS_USERSPACE_ATTR_PID = 0x1,OVS_USERSPACE_ATTR_USERDATA = 0x2,__OVS_USERSPACE_ATTR_MAX = 0x3,};
typedef union _D1D0F511BF997F52624AFB2B0CE27B40 pthread_condattr_t;
typedef int pthread_spinlock_t;
typedef struct _E4BD27FA28615E7C40C852B0946EB2BB sctp_peeloff_arg_t;
struct snd_cea_861_aud_if {unsigned __int8 db1_ct_cc;unsigned __int8 db2_sf_ss;unsigned __int8 db3;unsigned __int8 db4_ca;unsigned __int8 db5_dminh_lsv;};
struct snd_emux_misc_mode {int port;int mode;int value;int value2;};
typedef int snd_pcm_hw_param_t;
struct snd_seq_queue_skew {unsigned int value;unsigned int base;};
struct usbdevfs_getdriver {unsigned int interface;char driver[256];};
struct user_fpregs_struct {unsigned __int16 cwd;unsigned __int16 swd;unsigned __int16 ftw;unsigned __int16 fop;unsigned __int64 rip;unsigned __int64 rdp;unsigned int mxcsr;unsigned int mxcr_mask;unsigned int st_space[32];unsigned int xmm_space[64];unsigned int padding[24];};
typedef struct _D293AA008B167A5482334DF4B9C04D8D xBellFeedbackState;
typedef struct _A043DEDA58AACB0ED59B54E1362CDED0 xBigReqEnableReply;
typedef struct _56236F995320E9550D01648098F1E75E xChangePropertyReq;
typedef struct _7CA3BFA0E2ACF16B623A64955922766D xCreateColormapReq;
typedef struct _9B8DBD56B2ADF437D63C1746D87B8C1A xDMXAddScreenReply;
typedef struct _E286A6BB4A6F2654A491CFFF4E402FC9 xDMXRemoveInputReq;
typedef struct _ABE60368F0168DDE4E32B527D5287C6B xDPMSForceLevelReq;
typedef struct _02B7C110B96F422043FD747664A5A945 xDPMSGetVersionReq;
typedef struct _FF5F1AAD05AC8DB2C41E7ADC05E9F823 xDRI2CopyRegionReq;
typedef struct _992D1839AC8E639F23406CD0C00EF002 xDRI2GetBuffersReq;
typedef struct _69E09FDE2534802BF7D73EA82BFCF169 xDRI2GetParamReply;
typedef struct _06385DA08CE18FAF207AB6F3372C4AC2 xDamageNotifyEvent;
typedef struct _83DC73F186BDA0868BCE8C2AD62B1A32 xDamageSubtractReq;
typedef struct _8FB70F9DF6D59D5E0632B90366E8D2D5 xDbeSwapBuffersReq;
typedef struct _DF21E726BD65398407620C5BBBA9E08C xDeletePropertyReq;
typedef struct _4C6B28AF05B44434FD231A2EDF3D1534 xDeviceAbsCalibCtl;
typedef struct _A7F49BCAD2F54790AC5A5BD9DFF19382 xDeviceEnableState;
typedef struct _4550F01C1AE59E404A8C00C15C6A89B9 xGEQueryVersionReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetDeviceFocusReq;
typedef struct _LbxAllowMotion xLbxAllowMotionReq;
typedef struct _LbxCloseClient xLbxCloseClientReq;
typedef struct _LbxFreeCellsEvent xLbxFreeCellsEvent;
typedef struct _LbxGetProperty xLbxGetPropertyReq;
typedef struct _LbxInternAtoms xLbxInternAtomsReq;
typedef struct _5588D47BF677798F0DBD9E168C93317B xLbxQueryFontReply;
typedef struct _50E42323027751282F1104957020037E xLbxReleaseCmapReq;
typedef struct _32453B3EC12C1083BBBEA47A258ADABA xQueryExtensionReq;
typedef struct _616DFE8EE921B679729534094133FEFF xQueryPointerReply;
typedef struct _8F4F122E327FAA30019691AE8AD7A3FD xRRCreateModeReply;
typedef struct _6C1CA9801472DA3CC516BCC310DA8AB0 xRRGetCrtcGammaReq;
typedef struct _9F32140EDDFB9662C56CD8A9697883BB xRRGetPanningReply;
typedef struct _0A710E56E462CA6F472C6BEF95652ED5 xRRGetProvidersReq;
typedef struct _1B380CA5B169C2B25F5DE0AF08CB7E59 xRRQueryVersionReq;
typedef struct _232CF08580C586A710BC040E507CB83C xRRSetCrtcGammaReq;
typedef struct _366B0E14DFFB947D75CD3E464CBAF37C xRRSetPanningReply;
typedef struct _8ED1EDE36117F631290006C3E9446427 xRenderAddTrapsReq;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTriStripReq;
typedef struct _FF2B271BD07173775CE163A4BE842405 xReparentWindowReq;
typedef struct _F1FFDF0E76C6F940FFACBA8A13B33CEB xSetDeviceFocusReq;
typedef struct _A27B2EF13B029B6AC017266492BED372 xSetScreenSaverReq;
typedef struct _7D569909FEB0E294999F498DE699AF74 xStringFeedbackCtl;
typedef struct _xSyncAwaitFenceReq xSyncAwaitFenceReq;
typedef struct _xSyncInitialize xSyncInitializeReq;
typedef struct _xSyncQueryAlarmReq xSyncQueryAlarmReq;
typedef struct _xSyncQueryFenceReq xSyncQueryFenceReq;
typedef struct _xSyncResetFenceReq xSyncResetFenceReq;
typedef struct _xSyncSetCounterReq xSyncSetCounterReq;
typedef struct _F4F17E25C7BB477B61B5A580F872EC7D xSyncSystemCounter;
typedef struct _xSyncWaitCondition xSyncWaitCondition;
typedef struct _XDGAQueryModes xXDGAQueryModesReq;
typedef struct _A0997E1460B127CFD45B0CF477ECACD8 xXIAttachSlaveInfo;
typedef struct _61DCC48F09BF582DF809A259BD2C270C xXIChangeCursorReq;
typedef struct _95A1135F6D8D8F6471E320B5C82E7B21 xXIDetachSlaveInfo;
typedef struct _F0F833B8645551F58CD05873A995AFBD xXIGrabDeviceReply;
typedef struct _AE0B01F07923BA2B607EE52A3BD72CF8 xXIQueryPointerReq;
typedef struct _0461405B9932B2ED05AF0EE41FC655EB xXIQueryVersionReq;
typedef struct _BA51B89E4C593A6AA4F22AA051FCA364 xXISelectEventsReq;
typedef struct _0D45806D0AFB3D6C5E140525A7935E9C xXIUngrabDeviceReq;
typedef struct _XResClientIdValue xXResClientIdValue;
typedef struct _E77CCBE5D8B1F0833042AA57AE35DB28 xXTestFakeInputReq;
typedef struct _XagCreateAssoc xXagCreateAssocReq;
typedef xcb_request_error_t xcb_access_error_t;
struct xcb_arc_iterator_t {xcb_arc_t *data;int rem;int index;};
enum xcb_button_index_t {XCB_BUTTON_INDEX_ANY = 0x0,XCB_BUTTON_INDEX_1 = 0x1,XCB_BUTTON_INDEX_2 = 0x2,XCB_BUTTON_INDEX_3 = 0x3,XCB_BUTTON_INDEX_4 = 0x4,XCB_BUTTON_INDEX_5 = 0x5,};
typedef xcb_value_error_t xcb_cursor_error_t;
enum xcb_image_format_t {XCB_IMAGE_FORMAT_XY_BITMAP = 0x0,XCB_IMAGE_FORMAT_XY_PIXMAP = 0x1,XCB_IMAGE_FORMAT_Z_PIXMAP = 0x2,};
enum xcb_key_but_mask_t {XCB_KEY_BUT_MASK_SHIFT = 0x1,XCB_KEY_BUT_MASK_LOCK = 0x2,XCB_KEY_BUT_MASK_CONTROL = 0x4,XCB_KEY_BUT_MASK_MOD_1 = 0x8,XCB_KEY_BUT_MASK_MOD_2 = 0x10,XCB_KEY_BUT_MASK_MOD_3 = 0x20,XCB_KEY_BUT_MASK_MOD_4 = 0x40,XCB_KEY_BUT_MASK_MOD_5 = 0x80,XCB_KEY_BUT_MASK_BUTTON_1 = 0x100,XCB_KEY_BUT_MASK_BUTTON_2 = 0x200,XCB_KEY_BUT_MASK_BUTTON_3 = 0x400,XCB_KEY_BUT_MASK_BUTTON_4 = 0x800,XCB_KEY_BUT_MASK_BUTTON_5 = 0x1000,};
typedef xcb_request_error_t xcb_length_error_t;
typedef xcb_value_error_t xcb_pixmap_error_t;
enum xcb_randr_notify_t {XCB_RANDR_NOTIFY_CRTC_CHANGE = 0x0,XCB_RANDR_NOTIFY_OUTPUT_CHANGE = 0x1,XCB_RANDR_NOTIFY_OUTPUT_PROPERTY = 0x2,};
struct xcb_rgb_iterator_t {xcb_rgb_t *data;int rem;int index;};
enum xcb_screen_saver_t {XCB_SCREEN_SAVER_RESET = 0x0,XCB_SCREEN_SAVER_ACTIVE = 0x1,};
struct xcb_str_iterator_t {xcb_str_t *data;int rem;int index;};
enum xcb_visual_class_t {XCB_VISUAL_CLASS_STATIC_GRAY = 0x0,XCB_VISUAL_CLASS_GRAY_SCALE = 0x1,XCB_VISUAL_CLASS_STATIC_COLOR = 0x2,XCB_VISUAL_CLASS_PSEUDO_COLOR = 0x3,XCB_VISUAL_CLASS_TRUE_COLOR = 0x4,XCB_VISUAL_CLASS_DIRECT_COLOR = 0x5,};
enum xcb_window_class_t {XCB_WINDOW_CLASS_COPY_FROM_PARENT = 0x0,XCB_WINDOW_CLASS_INPUT_OUTPUT = 0x1,XCB_WINDOW_CLASS_INPUT_ONLY = 0x2,};
typedef xcb_value_error_t xcb_window_error_t;
enum xcb_x_print_attr_t {XCB_X_PRINT_ATTR_JOB_ATTR = 0x1,XCB_X_PRINT_ATTR_DOC_ATTR = 0x2,XCB_X_PRINT_ATTR_PAGE_ATTR = 0x3,XCB_X_PRINT_ATTR_PRINTER_ATTR = 0x4,XCB_X_PRINT_ATTR_SERVER_ATTR = 0x5,XCB_X_PRINT_ATTR_MEDIUM_ATTR = 0x6,XCB_X_PRINT_ATTR_SPOOLER_ATTR = 0x7,};
enum xcb_xkb_axfb_opt_t {XCB_XKB_AXFB_OPT_SK_PRESS_FB = 0x1,XCB_XKB_AXFB_OPT_SK_ACCEPT_FB = 0x2,XCB_XKB_AXFB_OPT_FEATURE_FB = 0x4,XCB_XKB_AXFB_OPT_SLOW_WARN_FB = 0x8,XCB_XKB_AXFB_OPT_INDICATOR_FB = 0x10,XCB_XKB_AXFB_OPT_STICKY_KEYS_FB = 0x20,XCB_XKB_AXFB_OPT_SK_RELEASE_FB = 0x40,XCB_XKB_AXFB_OPT_SK_REJECT_FB = 0x80,XCB_XKB_AXFB_OPT_BK_REJECT_FB = 0x100,XCB_XKB_AXFB_OPT_DUMB_BELL = 0x200,};
enum xcb_xkb_axsk_opt_t {XCB_XKB_AXSK_OPT_TWO_KEYS = 0x40,XCB_XKB_AXSK_OPT_LATCH_TO_LOCK = 0x80,};
enum xcb_xkb_explicit_t {XCB_XKB_EXPLICIT_V_MOD_MAP = 0x80,XCB_XKB_EXPLICIT_BEHAVIOR = 0x40,XCB_XKB_EXPLICIT_AUTO_REPEAT = 0x20,XCB_XKB_EXPLICIT_INTERPRET = 0x10,XCB_XKB_EXPLICIT_KEY_TYPE_4 = 0x8,XCB_XKB_EXPLICIT_KEY_TYPE_3 = 0x4,XCB_XKB_EXPLICIT_KEY_TYPE_2 = 0x2,XCB_XKB_EXPLICIT_KEY_TYPE_1 = 0x1,};
enum xcb_xkb_map_part_t {XCB_XKB_MAP_PART_KEY_TYPES = 0x1,XCB_XKB_MAP_PART_KEY_SYMS = 0x2,XCB_XKB_MAP_PART_MODIFIER_MAP = 0x4,XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS = 0x8,XCB_XKB_MAP_PART_KEY_ACTIONS = 0x10,XCB_XKB_MAP_PART_KEY_BEHAVIORS = 0x20,XCB_XKB_MAP_PART_VIRTUAL_MODS = 0x40,XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP = 0x80,};
typedef struct _xkbCompatMapNotify xkbCompatMapNotify;
typedef struct _xkbGetCompatMap xkbGetCompatMapReq;
typedef struct _xkbGetKbdByName xkbGetKbdByNameReq;
typedef struct _xkbIndicatorNotify xkbIndicatorNotify;
typedef struct _xkbKeyTypeWireDesc xkbKeyTypeWireDesc;
typedef struct _xkbOutlineWireDesc xkbOutlineWireDesc;
typedef struct _xkbOverlayWireDesc xkbOverlayWireDesc;
typedef struct _xkbSectionWireDesc xkbSectionWireDesc;
typedef struct _xkbSelectEvents xkbSelectEventsReq;
typedef struct _xkbSetCompatMap xkbSetCompatMapReq;
typedef struct _xkbUseExtension xkbUseExtensionReq;
typedef struct _xkbVModMapWireDesc xkbVModMapWireDesc;
enum xt_multiport_flags {XT_MULTIPORT_SOURCE = 0x0,XT_MULTIPORT_DESTINATION = 0x1,XT_MULTIPORT_EITHER = 0x2,};
enum xt_statistic_flags {XT_STATISTIC_INVERT = 0x1,};
typedef struct _DC1F4185A69167B259A83E436A7DD097 xvQueryAdaptorsReq;
typedef struct _2E55BACA418C7D9DC01173D7FC9AB491 xvQueryBestSizeReq;
typedef struct _44921DDD4632BD4A3848A6F76E5AB5A7 xvmcGetDRInfoReply;
typedef struct Dwarf_P_Attribute_s *Dwarf_P_Attribute;
typedef struct _FontResolution *FontResolutionPtr;
typedef struct _FontResolution FontResolutionRec;
typedef struct _LogDevAddr_struct LogDevAddr_struct;
typedef struct _LogvolInfo_struct LogvolInfo_struct;
enum MACRO_ACCESSPERMS {ACCESSPERMS = 511,};
enum MACRO_ALL_RESULTS {ALL_RESULTS = 8,};
enum MACRO_ATMARP_MKIP {ATMARP_MKIP = 25058,ATMARP_SETENTRY = 25059,ATMARP_ENCAP = 25061,};
enum MACRO_AttachClass {AttachClass = 7,};
enum MACRO_AuthSuccess {AuthSuccess = 0,AuthContinue = 1,AuthBusy = 2,};
enum MACRO_BASE_VIDIOC {BASE_VIDIOC_PRIVATE = 192,};
enum MACRO_BLKALIGNOFF {BLKALIGNOFF = 0x127A,};
enum MACRO_BadDrawable {BadDrawable = 9,};
enum MACRO_BadFontName {BadFontName = 83,};
enum MACRO_BadFontPath {BadFontPath = 86,};
enum MACRO_BadGlyphSet {BadGlyphSet = 3,BadGlyph = 4,};
enum MACRO_BadIDChoice {BadIDChoice = 14,};
enum MACRO_BadRROutput {BadRROutput = 0,BadRRCrtc = 1,BadRRMode = 2,};
enum MACRO_CACHE_IMPOS {CACHE_IMPOS_RCVD = 106,};
enum MACRO_CDROMRESUME {CDROMRESUME = 0x5302,};
enum MACRO_CLGET_RETRY {CLGET_RETRY_TIMEOUT = 5,};
enum MACRO_COMPAQ_CISS {COMPAQ_CISS_MAJOR1 = 105,COMPAQ_CISS_MAJOR2 = 106,COMPAQ_CISS_MAJOR3 = 107,COMPAQ_CISS_MAJOR4 = 108,COMPAQ_CISS_MAJOR5 = 109,COMPAQ_CISS_MAJOR6 = 110,COMPAQ_CISS_MAJOR7 = 111,};
enum MACRO_COPY_VERIFY {COPY_VERIFY = 0x3A,};
enum MACRO_CRAMFS_MODE {CRAMFS_MODE_WIDTH = 16,CRAMFS_UID_WIDTH = 16,CRAMFS_SIZE_WIDTH = 24,CRAMFS_GID_WIDTH = 8,CRAMFS_NAMELEN_WIDTH = 6,CRAMFS_OFFSET_WIDTH = 26,CRAMFS_MAXPATHLEN = 252,CRAMFS_FLAG_FSID_VERSION_2 = 1,CRAMFS_FLAG_SORTED_DIRS = 2,CRAMFS_FLAG_HOLES = 256,CRAMFS_FLAG_WRONG_SIGNATURE = 512,CRAMFS_FLAG_SHIFTED_ROOT_OFFSET = 1024,CRAMFS_SUPPORTED_FLAGS = 2047,};
enum MACRO_CRT2_ENABLE {CRT2_ENABLE = 14,};
enum MACRO_CTL_MAXNAME {CTL_MAXNAME = 10,};
enum MACRO_CYGETTHRESH {CYGETTHRESH = 0x435902,};
enum MACRO_CYSETTHRESH {CYSETTHRESH = 0x435903,};
enum MACRO_CurrentTime {CurrentTime = 0,};
enum MACRO_CursorShape {CursorShape = 0,TileShape = 1,StippleShape = 2,};
enum MACRO_DEBUGCTLMSR {DEBUGCTLMSR_LBR = 1,DEBUGCTLMSR_BTF = 2,DEBUGCTLMSR_TR = 64,DEBUGCTLMSR_BTS = 128,DEBUGCTLMSR_BTINT = 256,DEBUGCTLMSR_BTS_OFF_OS = 512,DEBUGCTLMSR_BTS_OFF_USR = 1024,DEBUGCTLMSR_FREEZE_LBRS_ON_PMI = 2048,};
enum MACRO_DEFFILEMODE {DEFFILEMODE = 438,};
enum MACRO_DEVICE_BITS {DEVICE_BITS = 0x7F,};
enum MACRO_DPMSModeOff {DPMSModeOff = 3,};
enum MACRO_DW_HARMLESS {DW_HARMLESS_ERROR_CIRCULAR_LIST_DEFAULT_SIZE = 4,DW_HARMLESS_ERROR_MSG_STRING_SIZE = 200,};
enum MACRO_DeviceAdded {DeviceAdded = 0,DeviceRemoved = 1,DeviceEnabled = 2,};
enum MACRO_DirectColor {DirectColor = 5,};
enum MACRO_DmxBadReply {DmxBadReply = 1003,};
enum MACRO_DmxBadValue {DmxBadValue = 1002,};
enum MACRO_EDDPARMSIZE {EDDPARMSIZE = 74,};
enum MACRO_ELFCLASSNUM {ELFCLASSNUM = 3,};
enum MACRO_ELFDATANONE {ELFDATANONE = 0,ELFDATA2LSB = 1,ELFDATA2MSB = 2,};
enum MACRO_ELF_PRARGSZ {ELF_PRARGSZ = 80,};
enum MACRO_ERR_BOOTIMG {ERR_BOOTIMG_FAIL = 1005,ERR_BOOTSEQ_FAIL = 1006,ERR_POF_TIMEOUT = 1007,ERR_NOT_BOOTED = 1008,ERR_CONF_LONG = 1009,ERR_INV_CHAN = 1010,ERR_ASYNC_TIME = 1011,};
enum MACRO_ETH_GSTRING {ETH_GSTRING_LEN = 32,ETH_RX_NFC_IP4 = 1,};
enum MACRO_EXIT_REASON {EXIT_REASON_EXCEPTION_NMI = 0,EXIT_REASON_EXTERNAL_INTERRUPT = 1,EXIT_REASON_TRIPLE_FAULT = 2,EXIT_REASON_PENDING_INTERRUPT = 7,EXIT_REASON_NMI_WINDOW = 8,EXIT_REASON_TASK_SWITCH = 9,EXIT_REASON_CPUID = 10,EXIT_REASON_HLT = 12,EXIT_REASON_INVD = 13,EXIT_REASON_INVLPG = 14,EXIT_REASON_RDPMC = 15,EXIT_REASON_RDTSC = 16,EXIT_REASON_VMCALL = 18,EXIT_REASON_VMCLEAR = 19,EXIT_REASON_VMLAUNCH = 20,EXIT_REASON_VMPTRLD = 21,EXIT_REASON_VMPTRST = 22,EXIT_REASON_VMREAD = 23,EXIT_REASON_VMRESUME = 24,EXIT_REASON_VMWRITE = 25,EXIT_REASON_VMOFF = 26,EXIT_REASON_VMON = 27,EXIT_REASON_CR_ACCESS = 28,EXIT_REASON_DR_ACCESS = 29,EXIT_REASON_IO_INSTRUCTION = 30,EXIT_REASON_MSR_READ = 31,EXIT_REASON_MSR_WRITE = 32,EXIT_REASON_INVALID_STATE = 33,EXIT_REASON_MWAIT_INSTRUCTION = 36,EXIT_REASON_MONITOR_INSTRUCTION = 39,EXIT_REASON_PAUSE_INSTRUCTION = 40,EXIT_REASON_MCE_DURING_VMENTRY = 41,EXIT_REASON_TPR_BELOW_THRESHOLD = 43,EXIT_REASON_APIC_ACCESS = 44,EXIT_REASON_EOI_INDUCED = 45,EXIT_REASON_EPT_VIOLATION = 48,EXIT_REASON_EPT_MISCONFIG = 49,EXIT_REASON_PREEMPTION_TIMER = 52,EXIT_REASON_WBINVD = 54,EXIT_REASON_XSETBV = 55,EXIT_REASON_APIC_WRITE = 56,EXIT_REASON_INVPCID = 58,};
enum MACRO_EastGravity {EastGravity = 6,};
enum MACRO_EnterNotify {EnterNotify = 7,LeaveNotify = 8,};
enum MACRO_EvenOddRule {EvenOddRule = 0,WindingRule = 1,};
enum MACRO_ExposeEvent {lbxsz_ExposeEvent = 20,lbxupsz_ExposeEvent = 18,};
enum MACRO_FBIOGETCMAP {FBIOGETCMAP = 0x4604,};
enum MACRO_FBIOPUTCMAP {FBIOPUTCMAP = 0x4605,};
enum MACRO_FDWERRORCLR {FDWERRORCLR = 598,};
enum MACRO_FSBadLength {FSBadLength = 10,};
enum MACRO_FSLASTEvent {FSLASTEvent = 3,};
enum MACRO_FS_PROTOCOL {FS_PROTOCOL = 2,FS_PROTOCOL_MINOR = 0,};
enum MACRO_FamilyLocal {FamilyLocal = 256,};
enum MACRO_FontLoadAll {FontLoadAll = 0xF,FontOpenSync = 0x10,FontReopen = 0x20,};
enum MACRO_GXorReverse {GXorReverse = 0xB,};
enum MACRO_GrabSuccess {GrabSuccess = 0,AlreadyGrabbed = 1,GrabInvalidTime = 2,};
enum MACRO_HDLC_TXIDLE {HDLC_TXIDLE_FLAGS = 0,HDLC_TXIDLE_ALT_ZEROS_ONES = 1,HDLC_TXIDLE_ZEROS = 2,HDLC_TXIDLE_ONES = 3,HDLC_TXIDLE_ALT_MARK_SPACE = 4,HDLC_TXIDLE_SPACE = 5,HDLC_TXIDLE_MARK = 6,HDLC_TXIDLE_CUSTOM_8 = 268435456,HDLC_TXIDLE_CUSTOM_16 = 536870912,HDLC_ENCODING_NRZ = 0,HDLC_ENCODING_NRZB = 1,HDLC_ENCODING_NRZI_MARK = 2,HDLC_ENCODING_NRZI_SPACE = 3,HDLC_ENCODING_NRZI = 3,HDLC_ENCODING_BIPHASE_MARK = 4,HDLC_ENCODING_BIPHASE_SPACE = 5,HDLC_ENCODING_BIPHASE_LEVEL = 6,HDLC_ENCODING_DIFF_BIPHASE_LEVEL = 7,HDLC_PREAMBLE_LENGTH_8BITS = 0,HDLC_PREAMBLE_LENGTH_16BITS = 1,HDLC_PREAMBLE_LENGTH_32BITS = 2,HDLC_PREAMBLE_LENGTH_64BITS = 3,HDLC_PREAMBLE_PATTERN_NONE = 0,HDLC_PREAMBLE_PATTERN_ZEROS = 1,HDLC_PREAMBLE_PATTERN_FLAGS = 2,HDLC_PREAMBLE_PATTERN_10 = 3,HDLC_PREAMBLE_PATTERN_01 = 4,HDLC_PREAMBLE_PATTERN_ONES = 5,};
enum MACRO_I2C_RETRIES {I2C_RETRIES = 0x701,I2C_TIMEOUT = 0x702,I2C_SLAVE = 0x703,I2C_SLAVE_FORCE = 0x706,I2C_TENBIT = 0x704,I2C_FUNCS = 0x705,I2C_RDWR = 0x707,I2C_PEC = 0x708,I2C_SMBUS = 0x720,I2C_RDRW_IOCTL_MAX_MSGS = 0x2A,};
enum MACRO_IFHWADDRLEN {IFHWADDRLEN = 6,IFNAMSIZ = 16,};
enum MACRO_IXJCTL_PSTN {IXJCTL_PSTN_GET_STATE = 29093,};
enum MACRO_IconicState {IconicState = 3,};
enum MACRO_InProximity {InProximity = 0,OutOfProximity = 2,};
enum MACRO_InputOutput {InputOutput = 1,InputOnly = 2,};
enum MACRO_JFFS2_EMPTY {JFFS2_EMPTY_BITMASK = 0xFFFF,JFFS2_DIRTY_BITMASK = 0x0,JFFS2_SUM_MAGIC = 0x2851885,JFFS2_MAX_NAME_LEN = 0xFE,JFFS2_MIN_DATA_LEN = 0x80,JFFS2_COMPR_NONE = 0x0,JFFS2_COMPR_ZERO = 0x1,JFFS2_COMPR_RTIME = 0x2,JFFS2_COMPR_RUBINMIPS = 0x3,JFFS2_COMPR_COPY = 0x4,JFFS2_COMPR_DYNRUBIN = 0x5,JFFS2_COMPR_ZLIB = 0x6,JFFS2_COMPR_LZO = 0x7,JFFS2_COMPAT_MASK = 0xC000,JFFS2_NODE_ACCURATE = 0x2000,JFFS2_FEATURE_INCOMPAT = 0xC000,JFFS2_FEATURE_ROCOMPAT = 0x8000,JFFS2_FEATURE_RWCOMPAT_COPY = 0x4000,JFFS2_FEATURE_RWCOMPAT_DELETE = 0x0,JFFS2_NODETYPE_DIRENT = 0xE001,JFFS2_NODETYPE_INODE = 0xE002,JFFS2_NODETYPE_CLEANMARKER = 0x2003,JFFS2_NODETYPE_PADDING = 0x2004,JFFS2_NODETYPE_SUMMARY = 0x2006,JFFS2_NODETYPE_XATTR = 0xE008,JFFS2_NODETYPE_XREF = 0xE009,JFFS2_XPREFIX_USER = 0x1,JFFS2_XPREFIX_SECURITY = 0x2,JFFS2_XPREFIX_ACL_ACCESS = 0x3,JFFS2_XPREFIX_ACL_DEFAULT = 0x4,JFFS2_XPREFIX_TRUSTED = 0x5,JFFS2_ACL_VERSION = 0x1,JFFS2_INO_FLAG_PREREAD = 0x1,JFFS2_INO_FLAG_USERCOMPR = 0x2,};
enum MACRO_KDSIGACCEPT {KDSIGACCEPT = 0x4B4E,};
enum MACRO_KDUNMAPDISP {KDUNMAPDISP = 0x4B3D,};
enum MACRO_K_SHIFTLOCK {K_SHIFTLOCK = 2560,K_CTRLLOCK = 2562,K_ALTLOCK = 2563,K_ALTGRLOCK = 2561,K_SHIFTLLOCK = 2564,K_SHIFTRLOCK = 2565,K_CTRLLLOCK = 2566,K_CTRLRLOCK = 2567,K_CAPSSHIFTLOCK = 2568,K_SHIFT_SLOCK = 3072,K_CTRL_SLOCK = 3074,K_ALT_SLOCK = 3075,K_ALTGR_SLOCK = 3073,K_SHIFTL_SLOCK = 3076,K_SHIFTR_SLOCK = 3077,K_CTRLL_SLOCK = 3078,K_CTRLR_SLOCK = 3079,K_CAPSSHIFT_SLOCK = 3080,};
enum MACRO_KeymapEvent {lbxsz_KeymapEvent = 32,lbxupsz_KeymapEvent = 32,};
enum MACRO_LL_INACTIVE {LL_INACTIVE = 0,LL_CONNECTING = 1,LL_RUNNING = 2,LL_DISCONNECTING = 3,};
enum MACRO_LPABORTOPEN {LPABORTOPEN = 0x60A,};
enum MACRO_LPGETSTATUS {LPGETSTATUS = 0x60B,};
enum MACRO_LeftToRight {LeftToRight = 0,RightToLeft = 1,BottomToTop = 2,};
enum MACRO_MASTER_MUTE {MASTER_MUTE = 0x80,};
enum MACRO_MAXGENRELEN {MAXGENRELEN = 32,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 20,NOFILE = 256,NCARGS = 131072,};
enum MACRO_MAX_KMALLOC {MAX_KMALLOC_SIZE = 128000,};
enum MACRO_MAX_MACHINE {MAX_MACHINE_NAME = 255,};
enum MACRO_MAX_TERMCAP {MAX_TERMCAP_LENGTH = 1023,MAX_TERMINFO_LENGTH = 4096,};
enum MACRO_MAX_WRITERS {MAX_WRITERS = 8,};
enum MACRO_MINIX2_LINK {MINIX2_LINK_MAX = 65530,};
enum MACRO_MINSIGSTKSZ {MINSIGSTKSZ = 2048,SIGSTKSZ = 8192,};
enum MACRO_MODE_SELECT {MODE_SELECT = 0x15,};
enum MACRO_MOD_SAMEOBJ {MOD_SAMEOBJ = 1024,};
enum MACRO_MOTION_MASK {XTestX_MOTION_MASK = 0xF,XTestY_MOTION_MASK = 0xF0,};
enum MACRO_MSG_NOERROR {MSG_NOERROR = 0x1000,MSG_EXCEPT = 0x2000,MSG_STAT = 0xB,MSG_INFO = 0xC,};
enum MACRO_MTDFILEMODE {MTDFILEMODE = 19731,};
enum MACRO_MULTIBUFFER {MULTIBUFFER_MAJOR_VERSION = 1,MULTIBUFFER_MINOR_VERSION = 1,};
enum MACRO_NCURSES_ETI {NCURSES_ETI_H_incl = 1,};
enum MACRO_NCURSES_EXT {NCURSES_EXT_FUNCS = 20130511,NCURSES_SP_FUNCS = 0,NCURSES_ATTR_SHIFT = 8,};
enum MACRO_NETLINK_ADD {NETLINK_ADD_MEMBERSHIP = 1,NETLINK_DROP_MEMBERSHIP = 2,NETLINK_PKTINFO = 3,NETLINK_BROADCAST_ERROR = 4,NETLINK_NO_ENOBUFS = 5,NETLINK_RX_RING = 6,NETLINK_TX_RING = 7,};
enum MACRO_NFNL_SUBSYS {NFNL_SUBSYS_NONE = 0,NFNL_SUBSYS_CTNETLINK = 1,NFNL_SUBSYS_CTNETLINK_EXP = 2,NFNL_SUBSYS_QUEUE = 3,NFNL_SUBSYS_ULOG = 4,NFNL_SUBSYS_OSF = 5,NFNL_SUBSYS_IPSET = 6,NFNL_SUBSYS_ACCT = 7,NFNL_SUBSYS_CTNETLINK_TIMEOUT = 8,NFNL_SUBSYS_CTHELPER = 9,NFNL_SUBSYS_COUNT = 10,};
enum MACRO_NFS3_ACCESS {NFS3_ACCESS_READ = 0x1,NFS3_ACCESS_LOOKUP = 0x2,NFS3_ACCESS_MODIFY = 0x4,NFS3_ACCESS_EXTEND = 0x8,NFS3_ACCESS_DELETE = 0x10,NFS3_ACCESS_EXECUTE = 0x20,NFS3_ACCESS_FULL = 0x3F,NFS3_FSF_LINK = 0x1,NFS3_FSF_SYMLINK = 0x2,NFS3_FSF_HOMOGENEOUS = 0x8,NFS3_FSF_CANSETTIME = 0x10,NFS3_FSF_DEFAULT = 0x1B,NFS3_FSF_BILLYBOY = 0x18,NFS3_FSF_READONLY = 0x8,NFS3_VERSION = 0x3,};
enum MACRO_NO_AUTHINFO {NO_AUTHINFO = 131072,};
enum MACRO_NO_PUSHBACK {NO_PUSHBACK = -1,};
enum MACRO_NO_RECOVERY {NO_RECOVERY = 3,NO_DATA = 4,};
enum MACRO_NoEventMask {NoEventMask = 0,KeyPressMask = 1,KeyReleaseMask = 2,ButtonPressMask = 4,ButtonReleaseMask = 8,EnterWindowMask = 16,LeaveWindowMask = 32,PointerMotionMask = 64,PointerMotionHintMask = 128,Button1MotionMask = 256,Button2MotionMask = 512,Button3MotionMask = 1024,Button4MotionMask = 2048,Button5MotionMask = 4096,ButtonMotionMask = 8192,KeymapStateMask = 16384,ExposureMask = 32768,VisibilityChangeMask = 65536,StructureNotifyMask = 131072,ResizeRedirectMask = 262144,SubstructureNotifyMask = 524288,SubstructureRedirectMask = 1048576,FocusChangeMask = 2097152,PropertyChangeMask = 4194304,ColormapChangeMask = 8388608,OwnerGrabButtonMask = 16777216,};
enum MACRO_O_LARGEFILE {O_LARGEFILE = 0,O_DIRECTORY = 65536,O_NOFOLLOW = 131072,O_CLOEXEC = 524288,O_DIRECT = 16384,O_NOATIME = 262144,O_PATH = 2097152,O_DSYNC = 4096,O_RSYNC = 1052672,};
enum MACRO_PACKET_SHOW {PACKET_SHOW_INFO = 0x1,PACKET_SHOW_MCLIST = 0x2,PACKET_SHOW_RING_CFG = 0x4,PACKET_SHOW_FANOUT = 0x8,PACKET_SHOW_MEMINFO = 0x10,PACKET_SHOW_FILTER = 0x20,};
enum MACRO_PACKET_WAIT {PACKET_WAIT_TIME = 0,};
enum MACRO_PARPORT_EPP {PARPORT_EPP_FAST = 1,PARPORT_W91284PIC = 2,};
enum MACRO_PERCENTUSED {PERCENTUSED = 98,SECTORSIZE = 512,};
enum MACRO_POSIX_SPAWN {POSIX_SPAWN_RESETIDS = 0x1,POSIX_SPAWN_SETPGROUP = 0x2,POSIX_SPAWN_SETSIGDEF = 0x4,POSIX_SPAWN_SETSIGMASK = 0x8,POSIX_SPAWN_SETSCHEDPARAM = 0x10,POSIX_SPAWN_SETSCHEDULER = 0x20,POSIX_SPAWN_USEVFORK = 0x40,};
enum MACRO_PTSPERBATCH {PTSPERBATCH = 1024,};
enum MACRO_PictOpClear {PictOpClear = 0,PictOpSrc = 1,PictOpDst = 2,};
enum MACRO_PointerRoot {PointerRoot = 1,};
enum MACRO_PseudoColor {PseudoColor = 3,TrueColor = 4,};
enum MACRO_READ_DEFECT {READ_DEFECT_DATA = 0x37,};
enum MACRO_RESERVATION {RESERVATION_CONFLICT = 0xC,};
enum MACRO_RPC_ANYSOCK {RPC_ANYSOCK = -1,};
enum MACRO_RaiseLowest {RaiseLowest = 0,LowerHighest = 1,};
enum MACRO_SEARCH_HIGH {SEARCH_HIGH_12 = 0xB0,SEARCH_EQUAL_12 = 0xB1,SEARCH_LOW_12 = 0xB2,};
enum MACRO_SECBIT_KEEP {SECBIT_KEEP_CAPS = 16,SECBIT_KEEP_CAPS_LOCKED = 32,};
enum MACRO_SECTOR_SIZE {SECTOR_SIZE = 512,SECTOR_BITS = 9,};
enum MACRO_SECURE_KEEP {SECURE_KEEP_CAPS = 4,SECURE_KEEP_CAPS_LOCKED = 5,};
enum MACRO_SEQ_BALANCE {SEQ_BALANCE = 11,SEQ_VOLMODE = 12,};
enum MACRO_SIOCADDDLCI {SIOCADDDLCI = 0x8980,};
enum MACRO_SIOCBRADDBR {SIOCBRADDBR = 0x89A0,};
enum MACRO_SIOCBRADDIF {SIOCBRADDIF = 0x89A2,};
enum MACRO_SIOCBRDELBR {SIOCBRDELBR = 0x89A1,};
enum MACRO_SIOCBRDELIF {SIOCBRDELIF = 0x89A3,};
enum MACRO_SIOCDELDLCI {SIOCDELDLCI = 0x8981,};
enum MACRO_SIOCDEVPLIP {SIOCDEVPLIP = 35312,};
enum MACRO_SIOCDIFADDR {SIOCDIFADDR = 0x8936,};
enum MACRO_SIOCGCMPIDS {SIOCGCMPIDS = 35316,};
enum MACRO_SIOCGDONGLE {SIOCGDONGLE = 35313,};
enum MACRO_SIOCGIFADDR {SIOCGIFADDR = 0x8915,};
enum MACRO_SIOCGIFCONF {SIOCGIFCONF = 0x8912,};
enum MACRO_SIOCGIFNAME {SIOCGIFNAME = 0x8910,};
enum MACRO_SIOCGIFVLAN {SIOCGIFVLAN = 0x8982,};
enum MACRO_SIOCGMIIPHY {SIOCGMIIPHY = 0x8947,};
enum MACRO_SIOCGMIIREG {SIOCGMIIREG = 0x8948,};
enum MACRO_SIOCGPPPVER {SIOCGPPPVER = 35313,};
enum MACRO_SIOCNRRTCTL {SIOCNRRTCTL = 35299,};
enum MACRO_SIOCOUTQNSD {SIOCOUTQNSD = 0x894B,};
enum MACRO_SIOCRSCLRRT {SIOCRSCLRRT = 35300,};
enum MACRO_SIOCSCMPIDS {SIOCSCMPIDS = 35317,};
enum MACRO_SIOCSDONGLE {SIOCSDONGLE = 35312,};
enum MACRO_SIOCSDTRRTS {SIOCSDTRRTS = 35320,};
enum MACRO_SIOCSIFADDR {SIOCSIFADDR = 0x8916,};
enum MACRO_SIOCSIFLINK {SIOCSIFLINK = 0x8911,};
enum MACRO_SIOCSIFNAME {SIOCSIFNAME = 0x8923,};
enum MACRO_SIOCSIFVLAN {SIOCSIFVLAN = 0x8983,};
enum MACRO_SIOCSMIIREG {SIOCSMIIREG = 0x8949,};
enum MACRO_SIOGIFINDEX {SIOGIFINDEX = 35123,};
enum MACRO_SNDCTL_COPR {SNDCTL_COPR_RESET = 17152,};
enum MACRO_SOL_CAN_RAW {SOL_CAN_RAW = 101,};
enum MACRO_SOUND_MIXER {SOUND_MIXER_NRDEVICES = 25,SOUND_MIXER_VOLUME = 0,SOUND_MIXER_BASS = 1,SOUND_MIXER_TREBLE = 2,SOUND_MIXER_SYNTH = 3,SOUND_MIXER_PCM = 4,SOUND_MIXER_SPEAKER = 5,SOUND_MIXER_LINE = 6,SOUND_MIXER_MIC = 7,SOUND_MIXER_CD = 8,SOUND_MIXER_IMIX = 9,SOUND_MIXER_ALTPCM = 10,SOUND_MIXER_RECLEV = 11,SOUND_MIXER_IGAIN = 12,SOUND_MIXER_OGAIN = 13,SOUND_MIXER_LINE1 = 14,SOUND_MIXER_LINE2 = 15,SOUND_MIXER_LINE3 = 16,SOUND_MIXER_DIGITAL1 = 17,SOUND_MIXER_DIGITAL2 = 18,SOUND_MIXER_DIGITAL3 = 19,SOUND_MIXER_PHONEIN = 20,SOUND_MIXER_PHONEOUT = 21,SOUND_MIXER_VIDEO = 22,SOUND_MIXER_RADIO = 23,SOUND_MIXER_MONITOR = 24,SOUND_ONOFF_MIN = 28,SOUND_ONOFF_MAX = 30,SOUND_MIXER_NONE = 31,SOUND_MIXER_ENHANCE = 31,SOUND_MIXER_MUTE = 31,SOUND_MIXER_LOUD = 31,SOUND_MIXER_RECSRC = 255,SOUND_MIXER_DEVMASK = 254,SOUND_MIXER_RECMASK = 253,SOUND_MIXER_CAPS = 252,SOUND_CAP_EXCL_INPUT = 1,SOUND_MIXER_STEREODEVS = 251,SOUND_MIXER_OUTSRC = 250,SOUND_MIXER_OUTMASK = 249,SOUND_MASK_VOLUME = 1,SOUND_MASK_BASS = 2,SOUND_MASK_TREBLE = 4,SOUND_MASK_SYNTH = 8,SOUND_MASK_PCM = 16,SOUND_MASK_SPEAKER = 32,SOUND_MASK_LINE = 64,SOUND_MASK_MIC = 128,SOUND_MASK_CD = 256,SOUND_MASK_IMIX = 512,SOUND_MASK_ALTPCM = 1024,SOUND_MASK_RECLEV = 2048,SOUND_MASK_IGAIN = 4096,SOUND_MASK_OGAIN = 8192,SOUND_MASK_LINE1 = 16384,SOUND_MASK_LINE2 = 32768,SOUND_MASK_LINE3 = 65536,SOUND_MASK_DIGITAL1 = 131072,SOUND_MASK_DIGITAL2 = 262144,SOUND_MASK_DIGITAL3 = 524288,SOUND_MASK_PHONEIN = 1048576,SOUND_MASK_PHONEOUT = 2097152,SOUND_MASK_RADIO = 8388608,SOUND_MASK_VIDEO = 4194304,SOUND_MASK_MONITOR = 16777216,SOUND_MASK_MUTE = 2147483648,SOUND_MASK_ENHANCE = 2147483648,SOUND_MASK_LOUD = 2147483648,};
enum MACRO_SO_ORIGINAL {SO_ORIGINAL_DST = 80,};
enum MACRO_SO_PROTOCOL {SO_PROTOCOL = 38,SO_DOMAIN = 39,SO_RXQ_OVFL = 40,SO_WIFI_STATUS = 41,};
enum MACRO_SUBCMDSHIFT {SUBCMDSHIFT = 8,};
enum MACRO_SUPER_MAGIC {ADFS_SUPER_MAGIC = 0xADF5,AFFS_SUPER_MAGIC = 0xADFF,AFS_SUPER_MAGIC = 0x5346414F,AUTOFS_SUPER_MAGIC = 0x187,CODA_SUPER_MAGIC = 0x73757245,CRAMFS_MAGIC = 0x28CD3D45,};
enum MACRO_SYS_restart {SYS_restart_syscall = 0,SYS_exit = 1,SYS_fork = 2,SYS_read = 3,SYS_write = 4,SYS_open = 5,SYS_close = 6,SYS_waitpid = 7,SYS_creat = 8,SYS_link = 9,SYS_unlink = 10,SYS_execve = 11,SYS_chdir = 12,SYS_time = 13,SYS_mknod = 14,SYS_chmod = 15,SYS_lchown = 16,SYS_break = 17,SYS_oldstat = 18,SYS_lseek = 19,SYS_getpid = 20,SYS_mount = 21,SYS_umount = 22,SYS_setuid = 23,SYS_getuid = 24,SYS_stime = 25,SYS_ptrace = 26,SYS_alarm = 27,SYS_oldfstat = 28,SYS_pause = 29,SYS_utime = 30,SYS_stty = 31,SYS_gtty = 32,SYS_access = 33,SYS_nice = 34,SYS_ftime = 35,SYS_sync = 36,SYS_kill = 37,SYS_rename = 38,SYS_mkdir = 39,SYS_rmdir = 40,SYS_dup = 41,SYS_pipe = 42,SYS_times = 43,SYS_prof = 44,SYS_brk = 45,SYS_setgid = 46,SYS_getgid = 47,SYS_signal = 48,SYS_geteuid = 49,SYS_getegid = 50,SYS_acct = 51,SYS_umount2 = 52,SYS_lock = 53,SYS_ioctl = 54,SYS_fcntl = 55,SYS_mpx = 56,SYS_setpgid = 57,SYS_ulimit = 58,SYS_oldolduname = 59,SYS_umask = 60,SYS_chroot = 61,SYS_ustat = 62,SYS_dup2 = 63,SYS_getppid = 64,SYS_getpgrp = 65,SYS_setsid = 66,SYS_sigaction = 67,SYS_sgetmask = 68,SYS_ssetmask = 69,SYS_setreuid = 70,SYS_setregid = 71,SYS_sigsuspend = 72,SYS_sigpending = 73,SYS_sethostname = 74,SYS_setrlimit = 75,SYS_getrlimit = 76,SYS_getrusage = 77,SYS_gettimeofday = 78,SYS_settimeofday = 79,SYS_getgroups = 80,SYS_setgroups = 81,SYS_select = 82,SYS_symlink = 83,SYS_oldlstat = 84,SYS_readlink = 85,SYS_uselib = 86,SYS_swapon = 87,SYS_reboot = 88,SYS_readdir = 89,SYS_mmap = 90,SYS_munmap = 91,SYS_truncate = 92,SYS_ftruncate = 93,SYS_fchmod = 94,SYS_fchown = 95,SYS_getpriority = 96,SYS_setpriority = 97,SYS_profil = 98,SYS_statfs = 99,SYS_fstatfs = 100,SYS_ioperm = 101,SYS_socketcall = 102,SYS_syslog = 103,SYS_setitimer = 104,SYS_getitimer = 105,SYS_stat = 106,SYS_lstat = 107,SYS_fstat = 108,SYS_olduname = 109,SYS_iopl = 110,SYS_vhangup = 111,SYS_idle = 112,SYS_vm86 = 113,SYS_wait4 = 114,SYS_swapoff = 115,SYS_sysinfo = 116,SYS_ipc = 117,SYS_fsync = 118,SYS_sigreturn = 119,SYS_clone = 120,SYS_setdomainname = 121,SYS_uname = 122,SYS_modify_ldt = 123,SYS_adjtimex = 124,SYS_mprotect = 125,SYS_sigprocmask = 126,SYS_create_module = 127,SYS_init_module = 128,SYS_delete_module = 129,SYS_get_kernel_syms = 130,SYS_quotactl = 131,SYS_getpgid = 132,SYS_fchdir = 133,SYS_bdflush = 134,SYS_sysfs = 135,SYS_personality = 136,SYS_afs_syscall = 137,SYS_setfsuid = 138,SYS_setfsgid = 139,SYS__llseek = 140,SYS_getdents = 141,SYS__newselect = 142,SYS_flock = 143,SYS_msync = 144,SYS_readv = 145,SYS_writev = 146,SYS_getsid = 147,SYS_fdatasync = 148,SYS__sysctl = 149,SYS_mlock = 150,SYS_munlock = 151,SYS_mlockall = 152,SYS_munlockall = 153,SYS_sched_setparam = 154,SYS_sched_getparam = 155,SYS_sched_setscheduler = 156,SYS_sched_getscheduler = 157,SYS_sched_yield = 158,SYS_sched_get_priority_max = 159,SYS_sched_get_priority_min = 160,SYS_sched_rr_get_interval = 161,SYS_nanosleep = 162,SYS_mremap = 163,SYS_setresuid = 164,SYS_getresuid = 165,SYS_query_module = 166,SYS_poll = 167,SYS_nfsservctl = 168,SYS_setresgid = 169,SYS_getresgid = 170,SYS_prctl = 171,SYS_rt_sigreturn = 172,SYS_rt_sigaction = 173,SYS_rt_sigprocmask = 174,SYS_rt_sigpending = 175,SYS_rt_sigtimedwait = 176,SYS_rt_sigqueueinfo = 177,SYS_rt_sigsuspend = 178,SYS_pread64 = 179,SYS_pwrite64 = 180,SYS_chown = 181,SYS_getcwd = 182,SYS_capget = 183,SYS_capset = 184,SYS_sigaltstack = 185,SYS_sendfile = 186,SYS_getpmsg = 187,SYS_putpmsg = 188,SYS_vfork = 189,SYS_ugetrlimit = 190,SYS_readahead = 191,SYS_pciconfig_read = 198,SYS_pciconfig_write = 199,SYS_pciconfig_iobase = 200,SYS_multiplexer = 201,SYS_getdents64 = 202,SYS_pivot_root = 203,SYS_madvise = 205,SYS_mincore = 206,SYS_gettid = 207,SYS_tkill = 208,SYS_setxattr = 209,SYS_lsetxattr = 210,SYS_fsetxattr = 211,SYS_getxattr = 212,SYS_lgetxattr = 213,SYS_fgetxattr = 214,SYS_listxattr = 215,SYS_llistxattr = 216,SYS_flistxattr = 217,SYS_removexattr = 218,SYS_lremovexattr = 219,SYS_fremovexattr = 220,SYS_futex = 221,SYS_sched_setaffinity = 222,SYS_sched_getaffinity = 223,SYS_tuxcall = 225,SYS_io_setup = 227,SYS_io_destroy = 228,SYS_io_getevents = 229,SYS_io_submit = 230,SYS_io_cancel = 231,SYS_set_tid_address = 232,SYS_fadvise64 = 233,SYS_exit_group = 234,SYS_lookup_dcookie = 235,SYS_epoll_create = 236,SYS_epoll_ctl = 237,SYS_epoll_wait = 238,SYS_remap_file_pages = 239,SYS_timer_create = 240,SYS_timer_settime = 241,SYS_timer_gettime = 242,SYS_timer_getoverrun = 243,SYS_timer_delete = 244,SYS_clock_settime = 245,SYS_clock_gettime = 246,SYS_clock_getres = 247,SYS_clock_nanosleep = 248,SYS_swapcontext = 249,SYS_tgkill = 250,SYS_utimes = 251,SYS_statfs64 = 252,SYS_fstatfs64 = 253,SYS_rtas = 255,SYS_sys_debug_setcontext = 256,SYS_migrate_pages = 258,SYS_mbind = 259,SYS_get_mempolicy = 260,SYS_set_mempolicy = 261,SYS_mq_open = 262,SYS_mq_unlink = 263,SYS_mq_timedsend = 264,SYS_mq_timedreceive = 265,SYS_mq_notify = 266,SYS_mq_getsetattr = 267,SYS_kexec_load = 268,SYS_add_key = 269,SYS_request_key = 270,SYS_keyctl = 271,SYS_waitid = 272,SYS_ioprio_set = 273,SYS_ioprio_get = 274,SYS_inotify_init = 275,SYS_inotify_add_watch = 276,SYS_inotify_rm_watch = 277,SYS_spu_run = 278,SYS_spu_create = 279,SYS_pselect6 = 280,SYS_ppoll = 281,SYS_unshare = 282,SYS_splice = 283,SYS_tee = 284,SYS_vmsplice = 285,SYS_openat = 286,SYS_mkdirat = 287,SYS_mknodat = 288,SYS_fchownat = 289,SYS_futimesat = 290,SYS_newfstatat = 291,SYS_unlinkat = 292,SYS_renameat = 293,SYS_linkat = 294,SYS_symlinkat = 295,SYS_readlinkat = 296,SYS_fchmodat = 297,SYS_faccessat = 298,SYS_get_robust_list = 299,SYS_set_robust_list = 300,SYS_move_pages = 301,SYS_getcpu = 302,SYS_epoll_pwait = 303,SYS_utimensat = 304,SYS_signalfd = 305,SYS_timerfd_create = 306,SYS_eventfd = 307,SYS_sync_file_range2 = 308,SYS_fallocate = 309,SYS_subpage_prot = 310,SYS_timerfd_settime = 311,SYS_timerfd_gettime = 312,SYS_signalfd4 = 313,SYS_eventfd2 = 314,SYS_epoll_create1 = 315,SYS_dup3 = 316,SYS_pipe2 = 317,SYS_inotify_init1 = 318,SYS_perf_event_open = 319,SYS_preadv = 320,SYS_pwritev = 321,SYS_rt_tgsigqueueinfo = 322,SYS_fanotify_init = 323,SYS_fanotify_mark = 324,SYS_prlimit64 = 325,SYS_socket = 326,SYS_bind = 327,SYS_connect = 328,SYS_listen = 329,SYS_accept = 330,SYS_getsockname = 331,SYS_getpeername = 332,SYS_socketpair = 333,SYS_send = 334,SYS_sendto = 335,SYS_recv = 336,SYS_recvfrom = 337,SYS_shutdown = 338,SYS_setsockopt = 339,SYS_getsockopt = 340,SYS_sendmsg = 341,SYS_recvmsg = 342,SYS_recvmmsg = 343,SYS_accept4 = 344,SYS_name_to_handle_at = 345,SYS_open_by_handle_at = 346,SYS_clock_adjtime = 347,SYS_syncfs = 348,SYS_sendmmsg = 349,SYS_setns = 350,SYS_process_vm_readv = 351,SYS_process_vm_writev = 352,SYS_finit_module = 353,SYS_kcmp = 354,SYS_sched_setattr = 355,SYS_sched_getattr = 356,SYS_renameat2 = 357,SYS_seccomp = 358,SYS_getrandom = 359,SYS_memfd_create = 360,SYS_bpf = 361,SYS_execveat = 362,SYS_switch_endian = 363,SYS_userfaultfd = 364,SYS_membarrier = 365,SYS_mlock2 = 378,SYS_copy_file_range = 379,SYS_preadv2 = 380,SYS_pwritev2 = 381,};
enum MACRO_ShapeNotify {ShapeNotify = 0,ShapeNumberEvents = 1,};
enum MACRO_TCA_ACT_IPT {TCA_ACT_IPT = 6,TCA_ACT_MIRRED = 8,TCA_EGRESS_REDIR = 1,TCA_EGRESS_MIRROR = 2,TCA_INGRESS_REDIR = 3,TCA_INGRESS_MIRROR = 4,TCA_ACT_NAT = 9,TCA_NAT_FLAG_EGRESS = 1,TCA_ACT_PEDIT = 7,TCA_ACT_SKBEDIT = 11,};
enum MACRO_TCPOPT_SACK {TCPOPT_SACK = 5,TCPOPT_TIMESTAMP = 8,};
enum MACRO_TCP_METRICS {TCP_METRICS_GENL_VERSION = 0x1,};
enum MACRO_TIOCGICOUNT {TIOCGICOUNT = 0x545D,};
enum MACRO_TIOCGSERIAL {TIOCGSERIAL = 0x541E,};
enum MACRO_TIOCSSERIAL {TIOCSSERIAL = 0x541F,};
enum MACRO_TIOCVHANGUP {TIOCVHANGUP = 0x5437,};
enum MACRO_TLV_ALIGNTO {TLV_ALIGNTO = 4,};
enum MACRO_TRANSNAMSIZ {TRANSNAMSIZ = 16,};
enum MACRO_TV_STANDARD {TV_STANDARD = 12336,TV_INTERFACE = 100288,TV_YPBPR525I = 16,TV_YPBPR525P = 32,TV_YPBPR750P = 4096,TV_YPBPR1080I = 8192,TV_YPBPRALL = 12336,};
enum MACRO_TopToBottom {TopToBottom = 3,};
enum MACRO_UAC1_STATUS {UAC1_STATUS_TYPE_ORIG_MASK = 0xF,UAC1_STATUS_TYPE_ORIG_AUDIO_CONTROL_IF = 0x0,UAC1_STATUS_TYPE_ORIG_AUDIO_STREAM_IF = 0x1,UAC1_STATUS_TYPE_ORIG_AUDIO_STREAM_EP = 0x2,UAC1_STATUS_TYPE_IRQ_PENDING = 0x80,UAC1_STATUS_TYPE_MEM_CHANGED = 0x40,};
enum MACRO_UnmapNotify {UnmapNotify = 18,};
enum MACRO_VB_DISPTYPE {VB_DISPTYPE_DISP2 = 14,VB_DISPTYPE_CRT2 = 14,VB_DISPTYPE_DISP1 = 524288,VB_DISPMODE_SINGLE = 536870912,VB_DISPMODE_MIRROR = 1073741824,VB_DISPMODE_DUAL = -2147483648,};
enum MACRO_VIRTIO_RING {VIRTIO_RING_F_INDIRECT_DESC = 28,VIRTIO_RING_F_EVENT_IDX = 29,};
enum MACRO_VSCREENINFO {FBIOGET_VSCREENINFO = 0x4600,FBIOPUT_VSCREENINFO = 0x4601,};
enum MACRO_WINDOW_SIZE {DP_WINDOW_SIZE = 0x80000,ZE_DP_WINDOW_SIZE = 0x100000,CTRL_WINDOW_SIZE = 0x80,};
enum MACRO_XF86BIGFONT {XF86BIGFONT_MAJOR_VERSION = 1,XF86BIGFONT_MINOR_VERSION = 1,};
enum MACRO_XF86Bigfont {XF86Bigfont_CAP_LocalShm = 1,};
enum MACRO_XF86VIDMODE {XF86VIDMODE_MAJOR_VERSION = 2,XF86VIDMODE_MINOR_VERSION = 2,};
enum MACRO_XI2REQUESTS {XI2REQUESTS = 22,};
enum MACRO_XIAddMaster {XIAddMaster = 1,XIRemoveMaster = 2,};
enum MACRO_XIAnyButton {XIAnyButton = 0,};
enum MACRO_XLookupNone {XLookupNone = 1,XLookupChars = 2,};
enum MACRO_XTestMOTION {XTestMOTION_MAX = 15,XTestMOTION_MIN = -15,};
enum MACRO_XTestPACKED {XTestPACKED_ACTIONS = 2,XTestPACKED_MOTION = 4,};
enum MACRO_XTestSTROKE {XTestSTROKE_DELAY_TIME = 10,};
enum MACRO_XcmsFailure {XcmsFailure = 0,XcmsSuccess = 1,XcmsSuccessWithCompression = 2,};
enum MACRO_XkbAllXIIds {XkbAllXIIds = 0x600,};
enum MACRO_XkbAnyGroup {XkbAnyGroup = 254,};
enum MACRO_XkbKeyboard {XkbKeyboard = 0,XkbNumberErrors = 1,};
enum MACRO_XvInputMask {XvInputMask = 1,XvOutputMask = 2,XvVideoMask = 4,XvStillMask = 8,XvImageMask = 16,XvPixmapMask = 65536,XvWindowMask = 131072,};
enum MACRO_XvMCVersion {XvMCVersion = 1,};
enum MACRO_XvNumErrors {XvNumErrors = 3,};
enum MACRO_XvPreempted {XvPreempted = 3,XvHardError = 4,};
enum MACRO_YPMAXDOMAIN {YPMAXDOMAIN = 64,};
enum MACRO_YPMAXRECORD {YPMAXRECORD = 1024,};
enum MACRO__BITS_POSIX {_BITS_POSIX_OPT_H = 1,};
enum MACRO__BITS_TIMEX {_BITS_TIMEX_H = 1,};
enum MACRO__GNU_SOURCE {_GNU_SOURCE = 1,_NETBSD_SOURCE = 1,};
enum MACRO__NETINET_IF {_NETINET_IF_TR_H = 1,};
enum MACRO__NETINET_IN {_NETINET_IN_SYSTM_H = 1,_NETINET_IP6_H = 1,};
enum MACRO__SYS_PROCFS {_SYS_PROCFS_H = 1,_SYS_USER_H = 1,};
enum MACRO__SYS_REBOOT {_SYS_REBOOT_H = 1,};
enum MACRO__SYS_SELECT {_SYS_SELECT_H = 1,};
enum MACRO__SYS_STATFS {_SYS_STATFS_H = 1,_SYS_STATVFS_H = 1,_SYS_SWAP_H = 1,};
enum MACRO__SYS_SYSCTL {_SYS_SYSCTL_H = 1,};
enum MACRO__SYS_VLIMIT {_SYS_VLIMIT_H = 1,};
enum MACRO__SYS_VTIMES {_SYS_VTIMES_H = 1,};
enum MACRO___USE_XOPEN {__USE_XOPEN = 1,__USE_XOPEN_EXTENDED = 1,__USE_UNIX98 = 1,};
enum MACRO___WCOREFLAG {__WCOREFLAG = 0x80,};
enum MACRO_____mbstate {____mbstate_t_defined = 1,};
enum MACRO_sz_xSegment {sz_xSegment = 8,sz_xPoint = 4,sz_xRectangle = 8,sz_xArc = 12,sz_xConnClientPrefix = 12,sz_xConnSetupPrefix = 8,sz_xConnSetup = 32,sz_xPixmapFormat = 8,sz_xDepth = 8,sz_xVisualType = 24,sz_xWindowRoot = 40,sz_xTimecoord = 8,sz_xHostEntry = 4,sz_xCharInfo = 12,sz_xFontProp = 8,sz_xTextElt = 2,sz_xColorItem = 12,sz_xrgb = 8,sz_xGenericReply = 32,sz_xGetWindowAttributesReply = 44,sz_xGetGeometryReply = 32,sz_xQueryTreeReply = 32,sz_xInternAtomReply = 32,sz_xGetAtomNameReply = 32,sz_xGetPropertyReply = 32,sz_xListPropertiesReply = 32,sz_xGetSelectionOwnerReply = 32,sz_xGrabPointerReply = 32,sz_xQueryPointerReply = 32,sz_xGetMotionEventsReply = 32,sz_xTranslateCoordsReply = 32,sz_xGetInputFocusReply = 32,sz_xQueryKeymapReply = 40,sz_xQueryFontReply = 60,sz_xQueryTextExtentsReply = 32,sz_xListFontsReply = 32,sz_xGetFontPathReply = 32,sz_xGetImageReply = 32,sz_xListInstalledColormapsReply = 32,sz_xAllocColorReply = 32,sz_xAllocNamedColorReply = 32,sz_xAllocColorCellsReply = 32,sz_xAllocColorPlanesReply = 32,sz_xQueryColorsReply = 32,sz_xLookupColorReply = 32,sz_xQueryBestSizeReply = 32,sz_xQueryExtensionReply = 32,sz_xListExtensionsReply = 32,sz_xSetMappingReply = 32,sz_xGetKeyboardControlReply = 52,sz_xGetPointerControlReply = 32,sz_xGetScreenSaverReply = 32,sz_xListHostsReply = 32,sz_xSetModifierMappingReply = 32,sz_xError = 32,sz_xEvent = 32,sz_xKeymapEvent = 32,sz_xReq = 4,sz_xResourceReq = 8,sz_xCreateWindowReq = 32,sz_xChangeWindowAttributesReq = 12,sz_xChangeSaveSetReq = 8,sz_xReparentWindowReq = 16,sz_xConfigureWindowReq = 12,sz_xCirculateWindowReq = 8,sz_xInternAtomReq = 8,sz_xChangePropertyReq = 24,sz_xDeletePropertyReq = 12,sz_xGetPropertyReq = 24,sz_xSetSelectionOwnerReq = 16,sz_xConvertSelectionReq = 24,sz_xSendEventReq = 44,sz_xGrabPointerReq = 24,sz_xGrabButtonReq = 24,sz_xUngrabButtonReq = 12,sz_xChangeActivePointerGrabReq = 16,sz_xGrabKeyboardReq = 16,sz_xGrabKeyReq = 16,sz_xUngrabKeyReq = 12,sz_xAllowEventsReq = 8,sz_xGetMotionEventsReq = 16,sz_xTranslateCoordsReq = 16,sz_xWarpPointerReq = 24,sz_xSetInputFocusReq = 12,sz_xOpenFontReq = 12,sz_xQueryTextExtentsReq = 8,sz_xListFontsReq = 8,sz_xSetFontPathReq = 8,sz_xCreatePixmapReq = 16,sz_xCreateGCReq = 16,sz_xChangeGCReq = 12,sz_xCopyGCReq = 16,sz_xSetDashesReq = 12,sz_xSetClipRectanglesReq = 12,sz_xCopyAreaReq = 28,sz_xCopyPlaneReq = 32,sz_xPolyPointReq = 12,sz_xPolySegmentReq = 12,sz_xFillPolyReq = 16,sz_xPutImageReq = 24,sz_xGetImageReq = 20,sz_xPolyTextReq = 16,sz_xImageTextReq = 16,sz_xCreateColormapReq = 16,sz_xCopyColormapAndFreeReq = 12,sz_xAllocColorReq = 16,sz_xAllocNamedColorReq = 12,sz_xAllocColorCellsReq = 12,sz_xAllocColorPlanesReq = 16,sz_xFreeColorsReq = 12,sz_xStoreColorsReq = 8,sz_xStoreNamedColorReq = 16,sz_xQueryColorsReq = 8,sz_xLookupColorReq = 12,sz_xCreateCursorReq = 32,sz_xCreateGlyphCursorReq = 32,sz_xRecolorCursorReq = 20,sz_xQueryBestSizeReq = 12,sz_xQueryExtensionReq = 8,sz_xChangeKeyboardControlReq = 8,sz_xBellReq = 4,sz_xChangePointerControlReq = 12,sz_xSetScreenSaverReq = 12,sz_xChangeHostsReq = 8,sz_xListHostsReq = 4,sz_xChangeModeReq = 4,sz_xRotatePropertiesReq = 12,sz_xReply = 32,sz_xGrabKeyboardReply = 32,sz_xListFontsWithInfoReply = 60,sz_xSetPointerMappingReply = 32,sz_xGetKeyboardMappingReply = 32,sz_xGetPointerMappingReply = 32,sz_xGetModifierMappingReply = 32,sz_xListFontsWithInfoReq = 8,sz_xPolyLineReq = 12,sz_xPolyArcReq = 12,sz_xPolyRectangleReq = 12,sz_xPolyFillRectangleReq = 12,sz_xPolyFillArcReq = 12,sz_xPolyText8Req = 16,sz_xPolyText16Req = 16,sz_xImageText8Req = 16,sz_xImageText16Req = 16,sz_xSetPointerMappingReq = 4,sz_xForceScreenSaverReq = 4,sz_xSetCloseDownModeReq = 4,sz_xClearAreaReq = 16,sz_xSetAccessControlReq = 4,sz_xGetKeyboardMappingReq = 8,sz_xSetModifierMappingReq = 4,sz_xPropIconSize = 24,sz_xChangeKeyboardMappingReq = 8,};
typedef struct _2AE07F4A994C5FC6C65BC46898F1D740 XExtensionVersion;
typedef struct _E688C0674EF62F7B7CE00CF8BBC4E652 XF86MiscFilePaths;
typedef struct _BA3BC151FA826CD0885676DC609737ED XFocusChangeEvent;
typedef struct _XIMHotKeyTriggers XIMHotKeyTriggers;
typedef struct _4C9FC87DA575F754989D5BFCDDDAE424 XStandardColormap;
typedef struct _CF8EABCA377A8F90C7BBBD004ED67F2E XWindowAttributes;
typedef struct _XkbKbdDpyState *XkbKbdDpyStatePtr;
typedef struct _XkbKbdDpyState XkbKbdDpyStateRec;
typedef struct _XkbMapNotifyEvent XkbMapNotifyEvent;
typedef struct _XkbNameChanges *XkbNameChangesPtr;
typedef struct _XkbNameChanges XkbNameChangesRec;
typedef struct _XkbShapeDoodad *XkbShapeDoodadPtr;
typedef struct _XkbShapeDoodad XkbShapeDoodadRec;
typedef struct _CB86ED79A67F464A5E5DD7E35915D8C3 *XrmOptionDescList;
typedef struct _XAsyncEState _XAsyncErrorState;
struct _XkbCompatChanges {unsigned __int8 changed_groups;unsigned __int16 first_si;unsigned __int16 num_si;};
struct _XkbComponentName {unsigned __int16 flags;char *name;};
struct _XkbGeometrySizes {unsigned int which;unsigned __int16 num_properties;unsigned __int16 num_colors;unsigned __int16 num_shapes;unsigned __int16 num_sections;unsigned __int16 num_doodads;unsigned __int16 num_key_aliases;};
struct _XkbMessageAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 message[6];};
struct _XkbPtrDfltAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 affect;char valueXXX;};
struct _XrmHashBucketRec;
typedef void *__builtin_va_list;
struct __old_kernel_stat;
enum __rlimit_resource {RLIMIT_CPU = 0x0,RLIMIT_FSIZE = 0x1,RLIMIT_DATA = 0x2,RLIMIT_STACK = 0x3,RLIMIT_CORE = 0x4,__RLIMIT_RSS = 0x5,RLIMIT_NOFILE = 0x7,__RLIMIT_OFILE = 0x7,RLIMIT_AS = 0x9,__RLIMIT_NPROC = 0x6,__RLIMIT_MEMLOCK = 0x8,__RLIMIT_LOCKS = 0xA,__RLIMIT_SIGPENDING = 0xB,__RLIMIT_MSGQUEUE = 0xC,__RLIMIT_NICE = 0xD,__RLIMIT_RTPRIO = 0xE,__RLIMIT_RTTIME = 0xF,__RLIMIT_NLIMITS = 0x10,__RLIM_NLIMITS = 0x10,};
enum __stab_debug_code {N_GSYM = 0x20,N_FNAME = 0x22,N_FUN = 0x24,N_STSYM = 0x26,N_LCSYM = 0x28,N_MAIN = 0x2A,N_PC = 0x30,N_NSYMS = 0x32,N_NOMAP = 0x34,N_OBJ = 0x38,N_OPT = 0x3C,N_RSYM = 0x40,N_M2C = 0x42,N_SLINE = 0x44,N_DSLINE = 0x46,N_BSLINE = 0x48,N_BROWS = 0x48,N_DEFD = 0x4A,N_EHDECL = 0x50,N_MOD2 = 0x50,N_CATCH = 0x54,N_SSYM = 0x60,N_SO = 0x64,N_LSYM = 0x80,N_BINCL = 0x82,N_SOL = 0x84,N_PSYM = 0xA0,N_EINCL = 0xA2,N_ENTRY = 0xA4,N_LBRAC = 0xC0,N_EXCL = 0xC2,N_SCOPE = 0xC4,N_RBRAC = 0xE0,N_BCOMM = 0xE2,N_ECOMM = 0xE4,N_ECOML = 0xE8,N_NBTEXT = 0xF0,N_NBDATA = 0xF2,N_NBBSS = 0xF4,N_NBSTS = 0xF6,N_NBLCS = 0xF8,N_LENG = 0xFE,LAST_UNUSED_STAB_CODE = 0xFF,};
typedef __int64 __syscall_slong_t;
typedef unsigned __int64 __syscall_ulong_t;
enum __vlimit_resource {LIM_NORAISE = 0x0,LIM_CPU = 0x1,LIM_FSIZE = 0x2,LIM_DATA = 0x3,LIM_STACK = 0x4,LIM_CORE = 0x5,LIM_MAXRSS = 0x6,};
struct arpt_devaddr_info {char addr[16];char mask[16];};
struct atmlec_config_msg {unsigned int maximum_unknown_frame_count;unsigned int max_unknown_frame_time;unsigned __int16 max_retry_count;unsigned int aging_time;unsigned int forward_delay_time;unsigned int arp_response_time;unsigned int flush_timeout;unsigned int path_switching_delay;unsigned int lane_version;int mtu;int is_proxy;};
struct autofs_packet_hdr {int proto_version;int type;};
struct baycom_debug_data {unsigned __int64 debug1;unsigned __int64 debug2;__int64 debug3;};
typedef char *bp_machine_name_t;
typedef struct __user_cap_header_struct *cap_user_header_t;
enum ctattr_expect_nat {CTA_EXPECT_NAT_UNSPEC = 0x0,CTA_EXPECT_NAT_DIR = 0x1,CTA_EXPECT_NAT_TUPLE = 0x2,__CTA_EXPECT_NAT_MAX = 0x3,};
typedef struct _A55E8F963C5B6AC40AFF9FD81070CC8F deviceStateNotify;
struct ebt_arpreply_info {unsigned __int8 mac[6];int target;};
struct ebt_redirect_info {int target;};
enum ethtool_stringset {ETH_SS_TEST = 0x0,ETH_SS_STATS = 0x1,ETH_SS_PRIV_FLAGS = 0x2,ETH_SS_NTUPLE_FILTERS = 0x3,ETH_SS_FEATURES = 0x4,};
enum fc_els_rjt_explan {ELS_EXPL_NONE = 0x0,ELS_EXPL_SPP_OPT_ERR = 0x1,ELS_EXPL_SPP_ICTL_ERR = 0x3,ELS_EXPL_AH = 0x11,ELS_EXPL_AH_REQ = 0x13,ELS_EXPL_SID = 0x15,ELS_EXPL_OXID_RXID = 0x17,ELS_EXPL_INPROG = 0x19,ELS_EXPL_PLOGI_REQD = 0x1E,ELS_EXPL_INSUF_RES = 0x29,ELS_EXPL_UNAB_DATA = 0x2A,ELS_EXPL_UNSUPR = 0x2C,ELS_EXPL_INV_LEN = 0x2D,ELS_EXPL_NOT_NEIGHBOR = 0x62,};
enum fc_els_rjt_reason {ELS_RJT_NONE = 0x0,ELS_RJT_INVAL = 0x1,ELS_RJT_LOGIC = 0x3,ELS_RJT_BUSY = 0x5,ELS_RJT_PROT = 0x7,ELS_RJT_UNAB = 0x9,ELS_RJT_UNSUP = 0xB,ELS_RJT_INPROG = 0xE,ELS_RJT_FIP = 0x20,ELS_RJT_VENDOR = 0xFF,};
enum fc_els_rnid_atype {ELS_RNIDA_UNK = 0x1,ELS_RNIDA_OTHER = 0x2,ELS_RNIDA_HUB = 0x3,ELS_RNIDA_SWITCH = 0x4,ELS_RNIDA_GATEWAY = 0x5,ELS_RNIDA_CONV = 0x6,ELS_RNIDA_HBA = 0x7,ELS_RNIDA_PROXY = 0x8,ELS_RNIDA_STORAGE = 0x9,ELS_RNIDA_HOST = 0xA,ELS_RNIDA_SUBSYS = 0xB,ELS_RNIDA_ACCESS = 0xE,ELS_RNIDA_NAS = 0x11,ELS_RNIDA_BRIDGE = 0x12,ELS_RNIDA_VIRT = 0x13,ELS_RNIDA_MF = 0xFF,ELS_RNIDA_MF_HUB = 0x80000000,ELS_RNIDA_MF_SW = 0x40000000,ELS_RNIDA_MF_GW = 0x20000000,ELS_RNIDA_MF_ST = 0x10000000,ELS_RNIDA_MF_HOST = 0x8000000,ELS_RNIDA_MF_SUB = 0x4000000,ELS_RNIDA_MF_ACC = 0x2000000,ELS_RNIDA_MF_WDM = 0x1000000,ELS_RNIDA_MF_NAS = 0x800000,ELS_RNIDA_MF_BR = 0x400000,ELS_RNIDA_MF_VIRT = 0x200000,};
enum fc_els_rnid_ipver {ELS_RNIDIP_NONE = 0x0,ELS_RNIDIP_V4 = 0x1,ELS_RNIDIP_V6 = 0x2,};
enum fc_well_known_fid {FC_FID_NONE = 0x0,FC_FID_BCAST = 0xFFFFFF,FC_FID_FLOGI = 0xFFFFFE,FC_FID_FCTRL = 0xFFFFFD,FC_FID_DIR_SERV = 0xFFFFFC,FC_FID_TIME_SERV = 0xFFFFFB,FC_FID_MGMT_SERV = 0xFFFFFA,FC_FID_QOS = 0xFFFFF9,FC_FID_ALIASES = 0xFFFFF8,FC_FID_SEC_KEY = 0xFFFFF7,FC_FID_CLOCK = 0xFFFFF6,FC_FID_MCAST_SERV = 0xFFFFF5,};
enum fe_guard_interval {GUARD_INTERVAL_1_32 = 0x0,GUARD_INTERVAL_1_16 = 0x1,GUARD_INTERVAL_1_8 = 0x2,GUARD_INTERVAL_1_4 = 0x3,GUARD_INTERVAL_AUTO = 0x4,GUARD_INTERVAL_1_128 = 0x5,GUARD_INTERVAL_19_128 = 0x6,GUARD_INTERVAL_19_256 = 0x7,GUARD_INTERVAL_PN420 = 0x8,GUARD_INTERVAL_PN595 = 0x9,GUARD_INTERVAL_PN945 = 0xA,};
struct files_stat_struct {unsigned __int64 nr_files;unsigned __int64 nr_free_files;unsigned __int64 max_files;};
typedef char floppy_drive_name[16];
struct floppy_max_errors {unsigned int abort;unsigned int read_track;unsigned int reset;unsigned int recal;unsigned int reporting;};
typedef struct _73FDACF34BD773846371F264A3DF2411 fr_proto_pvc_info;
typedef struct _6313E54CC161B7E5C4F7C30B4DF21654 fsChar2b_version1;
typedef struct _9DC1427BFA5A30405B067C9596620D04 fsConnSetupAccept;
typedef struct _797907A242F94DB9200676D3A724828B fsGetEventMaskReq;
typedef struct _3E18A7AAF5D17F3F11EB968C0A78AED4 fsQueryXInfoReply;
typedef struct _0F63C52D50F31C01632B7951AEFCA4FD fsResolutionError;
typedef struct _8BE617EABEB75C8FAB9CB9A4A240FEE3 fsSetEventMaskReq;
typedef struct _33AF8112BACFF99F66629433CE03587D fsXFontInfoHeader;
struct hdspm_config_info;
struct hdspm_mixer_ioctl {struct hdspm_mixer *mixer;};
struct hipnet_statistics {int rx_packets;int tx_packets;int rx_errors;int tx_errors;int rx_dropped;int tx_dropped;int rx_length_errors;int rx_over_errors;int rx_crc_errors;int rx_frame_errors;int rx_fifo_errors;int rx_missed_errors;int tx_aborted_errors;int tx_carrier_errors;int tx_fifo_errors;int tx_heartbeat_errors;int tx_window_errors;};
enum hwtstamp_tx_types {HWTSTAMP_TX_OFF = 0x0,HWTSTAMP_TX_ON = 0x1,HWTSTAMP_TX_ONESTEP_SYNC = 0x2,};
enum i2400m_brh_opcode {I2400M_BRH_READ = 0x1,I2400M_BRH_WRITE = 0x2,I2400M_BRH_JUMP = 0x3,I2400M_BRH_SIGNED_JUMP = 0x8,I2400M_BRH_HASH_PAYLOAD_ONLY = 0x9,};
enum ip_conntrack_info {IP_CT_ESTABLISHED = 0x0,IP_CT_RELATED = 0x1,IP_CT_NEW = 0x2,IP_CT_IS_REPLY = 0x3,IP_CT_ESTABLISHED_REPLY = 0x3,IP_CT_RELATED_REPLY = 0x4,IP_CT_NEW_REPLY = 0x5,IP_CT_NUMBER = 0x5,};
struct ip_vs_daemon_user {int state;char mcast_ifn[16];int syncid;};
struct ipmi_timing_parms {int retries;unsigned int retry_time_ms;};
typedef struct _9FABDCAC63F9A2F0CDDE223D7391684B isdn_ioctl_struct;
struct mdu_bitmap_file_s {char pathname[4096];};
typedef struct mdu_bitmap_file_s mdu_bitmap_file_t;
struct ncp_mount_data_v4 {int version;unsigned __int64 flags;unsigned __int64 mounted_uid;__int64 wdog_pid;unsigned int ncp_fd;unsigned int time_out;unsigned int retry_count;unsigned __int64 uid;unsigned __int64 gid;unsigned __int64 file_mode;unsigned __int64 dir_mode;};
enum nfqnl_attr_config {NFQA_CFG_UNSPEC = 0x0,NFQA_CFG_CMD = 0x1,NFQA_CFG_PARAMS = 0x2,NFQA_CFG_QUEUE_MAXLEN = 0x3,NFQA_CFG_MASK = 0x4,NFQA_CFG_FLAGS = 0x5,__NFQA_CFG_MAX = 0x6,};
enum nfqnl_config_mode {NFQNL_COPY_NONE = 0x0,NFQNL_COPY_META = 0x1,NFQNL_COPY_PACKET = 0x2,};
struct ns_tcp_tsig_state {int counter;struct dst_key *key;void *ctx;unsigned __int8 sig[512];int siglen;};
enum ovs_datapath_attr {OVS_DP_ATTR_UNSPEC = 0x0,OVS_DP_ATTR_NAME = 0x1,OVS_DP_ATTR_UPCALL_PID = 0x2,OVS_DP_ATTR_STATS = 0x3,__OVS_DP_ATTR_MAX = 0x4,};
typedef struct _6999C5F45A7509ACAEE4435BC7D6BE11 pmGetProxyAddrMsg;
typedef struct _B4C695B0250A38B82AFFE65B8304A51A posix_spawnattr_t;
struct ppdev_frob_struct {unsigned __int8 mask;unsigned __int8 val;};
typedef union _0C72A33DA16A3FF6F4A3A372A725953A pthread_barrier_t;
struct ptp_extts_request {unsigned int index;unsigned int flags;unsigned int rsv[2];};
struct revectored_struct {unsigned __int64 __map[8];};
struct rose_cause_struct {unsigned __int8 cause;unsigned __int8 diagnostic;};
enum sctp_spinfo_state {SCTP_INACTIVE = 0x0,SCTP_PF = 0x1,SCTP_ACTIVE = 0x2,SCTP_UNCONFIRMED = 0x3,SCTP_UNKNOWN = 0xFFFF,};
typedef struct slaving_request slaving_request_t;
struct snd_ctl_elem_list {unsigned int offset;unsigned int space;unsigned int used;unsigned int count;struct snd_ctl_elem_id *pids;unsigned __int8 reserved[50];};
typedef signed __int64 snd_pcm_sframes_t;
typedef unsigned __int64 snd_pcm_uframes_t;
struct snd_seq_real_time {unsigned int tv_sec;unsigned int tv_nsec;};
typedef struct _AB5F7E1CFB8B75B23227FD0CD252BAA6 track_information;
typedef struct ulog_packet_msg ulog_packet_msg_t;
enum v4l2_dv_rgb_range {V4L2_DV_RGB_RANGE_AUTO = 0x0,V4L2_DV_RGB_RANGE_LIMITED = 0x1,V4L2_DV_RGB_RANGE_FULL = 0x2,};
enum v4l2_frmivaltypes {V4L2_FRMIVAL_TYPE_DISCRETE = 0x1,V4L2_FRMIVAL_TYPE_CONTINUOUS = 0x2,V4L2_FRMIVAL_TYPE_STEPWISE = 0x3,};
enum v4l2_frmsizetypes {V4L2_FRMSIZE_TYPE_DISCRETE = 0x1,V4L2_FRMSIZE_TYPE_CONTINUOUS = 0x2,V4L2_FRMSIZE_TYPE_STEPWISE = 0x3,};
struct vhost_scsi_target {int abi_version;char vhost_wwpn[224];unsigned __int16 vhost_tpgt;unsigned __int16 reserved;};
struct vhost_vring_state {unsigned int index;unsigned int num;};
typedef struct video_highlight video_highlight_t;
typedef struct video_navi_pack video_navi_pack_t;
typedef struct _EC87D4E5EFECFC4D155F79244EABA9BB xChangeSaveSetReq;
typedef struct _07A0BBE0F3D6D0E97B5A30869B6D39C4 xConnClientPrefix;
typedef struct _0566ABB5D656E83D377732EE088CAE2E xDMXAddInputReply;
typedef struct _B6C2B50A2126E272B3960EB4DC4F6604 xDPMSCapableReply;
typedef struct _3CF9C552218676756FBC5AC837F62592 xDRI2ConnectReply;
typedef struct _2CBA644A081B49363F2046758E32CF0D xDamageDestroyReq;
typedef struct _EF3075C2F2980D34C2767B31474F1A14 xDbeBeginIdiomReq;
typedef struct _DE99FD7022C5FF7012AC4CC23AAA0836 xDbeGetVersionReq;
typedef struct _5CE23C12CE680B06D74E0C7033A4C5D0 xDbeScreenVisInfo;
typedef struct _16D469E4E47B7327E679AF2DCECA539C xDeviceAbsAreaCtl;
typedef struct _8B1EAF7AAA57F33F38F96E94C6EE2E44 xGetAtomNameReply;
typedef struct _8E1349AD4AC8D9A4F1DC84C54B0BE169 xGetFontPathReply;
typedef struct _37BE2491590EE7EB76B44447C3CB76CA xGetGeometryReply;
typedef struct _D70593ABB97D9ADE4A069324C98D63AE xGetPropertyReply;
typedef struct _37CF6FD3D8604C440825361FBCF768B5 xGrabDeviceKeyReq;
typedef struct _8C544AC6C871408AE6573DA61B3B8C70 xGrabPointerReply;
typedef struct _F97BA04A84B56701784896B95A4002D0 xKbdFeedbackState;
typedef struct _2C303F742F1AA0AC713FA8EB1EC01C89 xLbxAllocColorReq;
typedef struct _67EB8B73AFD8C3C32B210944A0EE6A33 xLbxGetImageReply;
typedef struct _5FD5198515091F6F9684846B8D2DAFFB xLbxGrabCmapReply;
typedef struct _LbxStartProxy xLbxStartProxyReq;
typedef struct _A9B1BAFFCE9059101A2CA55F4DE425B3 xLedFeedbackState;
typedef struct _79D3745B39F9E71262BFBA7985E1C7DE xLookupColorReply;
typedef struct _GetBugMode xMITGetBugModeReq;
typedef struct _SetBugMode xMITSetBugModeReq;
typedef struct _24BF153529F05C45F0A0621575016FCA xPtrFeedbackState;
typedef struct _E6A7EC26390A1436F354D6A4637276C8 xQueryBestSizeReq;
typedef struct _3C4C38FC10522588E30AD31A846C8E7D xQueryColorsReply;
typedef struct _27AC02CFF97A742F93959B98FA171589 xQueryKeymapReply;
typedef struct _6197E9F903ED803C824E8A215640B820 xRRDestroyModeReq;
typedef struct _0D9E7AE1C1D47F10E3F53D770D6A64FD xRRGetCrtcInfoReq;
typedef struct _89ACFCE72F27CF3E8997F0C88CBC1FEF xRRSelectInputReq;
typedef struct _1463B1446DFC3BE3591F88FAF0B4315C xRecolorCursorReq;
typedef struct _EDCAE6FAA77F2844B16FB7E0B618EDD7 xSetDeviceModeReq;
typedef struct _60FD28E41E68D30D206D9EC072DAC7C8 xSetInputFocusReq;
typedef struct _ShapeNotify xShapeNotifyEvent;
typedef struct _ShmGetImageReply xShmGetImageReply;
typedef struct _F466B234F46A211DC597B6DC6FDB33CA xTestFakeAckEvent;
typedef struct _221FB40353091864D31474CD79EAAEF6 xTestFakeInputReq;
typedef struct _5CD0DDA75FC8A64FD62E45433429A157 xTestStopInputReq;
typedef struct _E8D391135C8469DFAA1B91EC6A7D7277 xXDGASetModeReply;
typedef struct _D8420CC1363AF2C8EAD0CBC387915DA6 xXIAllowEventsReq;
typedef struct _34EAD46D4136C0FB62D0AF99E563E31F xXIGetPropertyReq;
typedef struct _3C37F6B251EFBC95637A014CFEA9DDEB xXIHierarchyEvent;
typedef struct _F761E35AAB0F963E8328223906FB41E6 xXIQueryDeviceReq;
typedef struct _923A7E11775A94934B3B1E345D223966 xXIWarpPointerReq;
typedef struct _XResClientIdSpec xXResClientIdSpec;
typedef xcb_request_error_t xcb_alloc_error_t;
enum xcb_back_pixmap_t {XCB_BACK_PIXMAP_NONE = 0x0,XCB_BACK_PIXMAP_PARENT_RELATIVE = 0x1,};
enum xcb_button_mask_t {XCB_BUTTON_MASK_1 = 0x100,XCB_BUTTON_MASK_2 = 0x200,XCB_BUTTON_MASK_3 = 0x400,XCB_BUTTON_MASK_4 = 0x800,XCB_BUTTON_MASK_5 = 0x1000,XCB_BUTTON_MASK_ANY = 0x8000,};
enum xcb_cursor_enum_t {XCB_CURSOR_NONE = 0x0,};
typedef float xcb_glx_float32_t;
typedef double xcb_glx_float64_t;
enum xcb_grab_status_t {XCB_GRAB_STATUS_SUCCESS = 0x0,XCB_GRAB_STATUS_ALREADY_GRABBED = 0x1,XCB_GRAB_STATUS_INVALID_TIME = 0x2,XCB_GRAB_STATUS_NOT_VIEWABLE = 0x3,XCB_GRAB_STATUS_FROZEN = 0x4,};
enum xcb_image_order_t {XCB_IMAGE_ORDER_LSB_FIRST = 0x0,XCB_IMAGE_ORDER_MSB_FIRST = 0x1,};
enum xcb_input_focus_t {XCB_INPUT_FOCUS_NONE = 0x0,XCB_INPUT_FOCUS_POINTER_ROOT = 0x1,XCB_INPUT_FOCUS_PARENT = 0x2,XCB_INPUT_FOCUS_FOLLOW_KEYBOARD = 0x3,};
typedef xcb_request_error_t xcb_match_error_t;
enum xcb_notify_mode_t {XCB_NOTIFY_MODE_NORMAL = 0x0,XCB_NOTIFY_MODE_GRAB = 0x1,XCB_NOTIFY_MODE_UNGRAB = 0x2,XCB_NOTIFY_MODE_WHILE_GRABBED = 0x3,};
enum xcb_pixmap_enum_t {XCB_PIXMAP_NONE = 0x0,};
enum xcb_test_cursor_t {XCB_TEST_CURSOR_NONE = 0x0,XCB_TEST_CURSOR_CURRENT = 0x1,};
typedef struct _EAD4BA1AA5D214B5D4E5F46AB8426598 xcb_void_cookie_t;
enum xcb_window_enum_t {XCB_WINDOW_NONE = 0x0,};
enum xcb_xkb_control_t {XCB_XKB_CONTROL_GROUPS_WRAP = 0x8000000,XCB_XKB_CONTROL_INTERNAL_MODS = 0x10000000,XCB_XKB_CONTROL_IGNORE_LOCK_MODS = 0x20000000,XCB_XKB_CONTROL_PER_KEY_REPEAT = 0x40000000,XCB_XKB_CONTROL_CONTROLS_ENABLED = 0x80000000,};
enum xcb_xkb_im_flag_t {XCB_XKB_IM_FLAG_NO_EXPLICIT = 0x80,XCB_XKB_IM_FLAG_NO_AUTOMATIC = 0x40,XCB_XKB_IM_FLAG_LED_DRIVES_KB = 0x20,};
enum xcb_xkb_sa_type_t {XCB_XKB_SA_TYPE_NO_ACTION = 0x0,XCB_XKB_SA_TYPE_SET_MODS = 0x1,XCB_XKB_SA_TYPE_LATCH_MODS = 0x2,XCB_XKB_SA_TYPE_LOCK_MODS = 0x3,XCB_XKB_SA_TYPE_SET_GROUP = 0x4,XCB_XKB_SA_TYPE_LATCH_GROUP = 0x5,XCB_XKB_SA_TYPE_LOCK_GROUP = 0x6,XCB_XKB_SA_TYPE_MOVE_PTR = 0x7,XCB_XKB_SA_TYPE_PTR_BTN = 0x8,XCB_XKB_SA_TYPE_LOCK_PTR_BTN = 0x9,XCB_XKB_SA_TYPE_SET_PTR_DFLT = 0xA,XCB_XKB_SA_TYPE_ISO_LOCK = 0xB,XCB_XKB_SA_TYPE_TERMINATE = 0xC,XCB_XKB_SA_TYPE_SWITCH_SCREEN = 0xD,XCB_XKB_SA_TYPE_SET_CONTROLS = 0xE,XCB_XKB_SA_TYPE_LOCK_CONTROLS = 0xF,XCB_XKB_SA_TYPE_ACTION_MESSAGE = 0x10,XCB_XKB_SA_TYPE_REDIRECT_KEY = 0x11,XCB_XKB_SA_TYPE_DEVICE_BTN = 0x12,XCB_XKB_SA_TYPE_LOCK_DEVICE_BTN = 0x13,XCB_XKB_SA_TYPE_DEVICE_VALUATOR = 0x14,};
typedef char xcb_xkb_string8_t;
typedef struct _xkbActionWireDesc xkbActionWireDesc;
typedef struct _xkbControlsNotify xkbControlsNotify;
typedef union _xkbDoodadWireDesc xkbDoodadWireDesc;
typedef struct _xkbGetControls xkbGetControlsReq;
typedef struct _xkbGetGeometry xkbGetGeometryReq;
typedef struct _xkbSetControls xkbSetControlsReq;
typedef struct _xkbSetGeometry xkbSetGeometryReq;
typedef struct _xkbSymMapWireDesc xkbSymMapWireDesc;
enum xt_connbytes_what {XT_CONNBYTES_PKTS = 0x0,XT_CONNBYTES_BYTES = 0x1,XT_CONNBYTES_AVGPKT = 0x2,};
struct xt_connlimit_data;
enum xt_devgroup_flags {XT_DEVGROUP_MATCH_SRC = 0x1,XT_DEVGROUP_INVERT_SRC = 0x2,XT_DEVGROUP_MATCH_DST = 0x4,XT_DEVGROUP_INVERT_DST = 0x8,};
enum xt_statistic_mode {XT_STATISTIC_MODE_RANDOM = 0x0,XT_STATISTIC_MODE_NTH = 0x1,__XT_STATISTIC_MODE_MAX = 0x2,};
struct xt_statistic_priv;
typedef struct _C277CB81CBAA95C145BFA0CE4951774F xvImageFormatInfo;
enum Dwarf_Form_Class {DW_FORM_CLASS_UNKNOWN = 0x0,DW_FORM_CLASS_ADDRESS = 0x1,DW_FORM_CLASS_BLOCK = 0x2,DW_FORM_CLASS_CONSTANT = 0x3,DW_FORM_CLASS_EXPRLOC = 0x4,DW_FORM_CLASS_FLAG = 0x5,DW_FORM_CLASS_LINEPTR = 0x6,DW_FORM_CLASS_LOCLISTPTR = 0x7,DW_FORM_CLASS_MACPTR = 0x8,DW_FORM_CLASS_RANGELISTPTR = 0x9,DW_FORM_CLASS_REFERENCE = 0xA,DW_FORM_CLASS_STRING = 0xB,DW_FORM_CLASS_FRAMEPTR = 0xC,};
typedef struct Dwarf_Reg_value3_s Dwarf_Reg_Value3;
typedef struct _ErrorInfo_struct ErrorInfo_struct;
typedef char FirmwareVer_type[4];
typedef union _8172E892401C380D352F1B0F85477F39 La_x86_64_vector;
enum MACRO_ACCOUNTING {ACCOUNTING = 9,};
enum MACRO_ADDRSTRLEN {INET_ADDRSTRLEN = 16,INET6_ADDRSTRLEN = 46,};
enum MACRO_ADVERTISED {ADVERTISED_10baseT_Half = 1,ADVERTISED_10baseT_Full = 2,ADVERTISED_100baseT_Half = 4,ADVERTISED_100baseT_Full = 8,ADVERTISED_1000baseT_Half = 16,ADVERTISED_1000baseT_Full = 32,ADVERTISED_Autoneg = 64,ADVERTISED_TP = 128,ADVERTISED_AUI = 256,ADVERTISED_MII = 512,ADVERTISED_FIBRE = 1024,ADVERTISED_BNC = 2048,ADVERTISED_10000baseT_Full = 4096,ADVERTISED_Pause = 8192,ADVERTISED_Asym_Pause = 16384,ADVERTISED_2500baseX_Full = 32768,ADVERTISED_Backplane = 65536,ADVERTISED_1000baseKX_Full = 131072,ADVERTISED_10000baseKX4_Full = 262144,ADVERTISED_10000baseKR_Full = 524288,ADVERTISED_10000baseR_FEC = 1048576,ADVERTISED_20000baseMLD2_Full = 2097152,ADVERTISED_20000baseKR2_Full = 4194304,ADVERTISED_40000baseKR4_Full = 8388608,ADVERTISED_40000baseCR4_Full = 16777216,ADVERTISED_40000baseSR4_Full = 33554432,ADVERTISED_40000baseLR4_Full = 67108864,};
enum MACRO_ARCDENSITY {ARCDENSITY = 3,};
enum MACRO_AUDIT_ARCH {AUDIT_ARCH_ALPHA = -1073704922,AUDIT_ARCH_ARM = 1073741864,AUDIT_ARCH_ARMEB = 40,AUDIT_ARCH_CRIS = 1073741900,AUDIT_ARCH_FRV = 21569,AUDIT_ARCH_H8300 = 46,AUDIT_ARCH_I386 = 1073741827,AUDIT_ARCH_IA64 = -1073741774,AUDIT_ARCH_M32R = 88,AUDIT_ARCH_M68K = 4,AUDIT_ARCH_MIPS = 8,AUDIT_ARCH_MIPSEL = 1073741832,AUDIT_ARCH_MIPS64 = -2147483640,AUDIT_ARCH_MIPSEL64 = -1073741816,AUDIT_ARCH_OPENRISC = 92,AUDIT_ARCH_PARISC = 15,AUDIT_ARCH_PARISC64 = -2147483633,AUDIT_ARCH_PPC = 20,AUDIT_ARCH_PPC64 = -2147483627,AUDIT_ARCH_S390 = 22,AUDIT_ARCH_S390X = -2147483626,AUDIT_ARCH_SH = 42,AUDIT_ARCH_SHEL = 1073741866,AUDIT_ARCH_SH64 = -2147483606,AUDIT_ARCH_SHEL64 = -1073741782,AUDIT_ARCH_SPARC = 2,AUDIT_ARCH_SPARC64 = -2147483605,AUDIT_ARCH_X86_64 = -1073741762,AUDIT_PERM_EXEC = 1,AUDIT_PERM_WRITE = 2,AUDIT_PERM_READ = 4,AUDIT_PERM_ATTR = 8,};
enum MACRO_AUTOFS_IOC {AUTOFS_IOC_READY = 0x9360,AUTOFS_IOC_FAIL = 0x9361,AUTOFS_IOC_CATATONIC = 0x9362,AUTOFS_PROTO_VERSION = 0x5,AUTOFS_MIN_PROTO_VERSION = 0x3,AUTOFS_MAX_PROTO_VERSION = 0x5,AUTOFS_PROTO_SUBVERSION = 0x2,AUTOFS_EXP_IMMEDIATE = 0x1,AUTOFS_EXP_LEAVES = 0x2,AUTOFS_TYPE_ANY = 0x0,AUTOFS_TYPE_INDIRECT = 0x1,AUTOFS_TYPE_DIRECT = 0x2,AUTOFS_TYPE_OFFSET = 0x4,};
enum MACRO_AX25_NOUID {AX25_NOUID_DEFAULT = 0,AX25_NOUID_BLOCK = 1,AX25_SET_RT_IPMODE = 2,AX25_DIGI_INBAND = 1,AX25_DIGI_XBAND = 2,AX25_MAX_DIGIS = 8,AX25_VALUES_IPDEFMODE = 0,AX25_VALUES_AXDEFMODE = 1,AX25_VALUES_NETROM = 2,AX25_VALUES_TEXT = 3,AX25_VALUES_BACKOFF = 4,AX25_VALUES_CONMODE = 5,AX25_VALUES_WINDOW = 6,AX25_VALUES_EWINDOW = 7,AX25_VALUES_T1 = 8,AX25_VALUES_T2 = 9,AX25_VALUES_T3 = 10,AX25_VALUES_N2 = 11,AX25_VALUES_DIGI = 12,AX25_VALUES_IDLE = 13,AX25_VALUES_PACLEN = 14,AX25_VALUES_IPMAXQUEUE = 15,AX25_MAX_VALUES = 20,};
enum MACRO_AllocError {AllocError = 80,};
enum MACRO_AuthDenied {AuthDenied = 3,};
enum MACRO_BADVERSION {BADVERSION = 6,};
enum MACRO_BLKDISCARD {BLKDISCARD = 0x1277,};
enum MACRO_BLKGETSIZE {BLKGETSIZE = 0x1260,};
enum MACRO_BLKPBSZGET {BLKPBSZGET = 0x127B,};
enum MACRO_BLKSECTGET {BLKSECTGET = 0x1267,};
enum MACRO_BLKSECTSET {BLKSECTSET = 0x1266,};
enum MACRO_BLKZEROOUT {BLKZEROOUT = 0x127F,};
enum MACRO_CDROMEJECT {CDROMEJECT = 0x5309,};
enum MACRO_CDROMPAUSE {CDROMPAUSE = 0x5301,};
enum MACRO_CDROMRESET {CDROMRESET = 0x5312,};
enum MACRO_CDROMSTART {CDROMSTART = 0x5308,};
enum MACRO_CDROM_SEND {CDROM_SEND_PACKET = 0x5393,CDROM_NEXT_WRITABLE = 0x5394,CDROM_LAST_WRITTEN = 0x5395,CDROM_PACKET_SIZE = 0xC,};
enum MACRO_CHECK_TYPE {CHECK_TYPE = 0xAA,};
enum MACRO_CLIENT_REQ {CLIENT_REQ = 1,};
enum MACRO_CYGETRFLOW {CYGETRFLOW = 0x43590B,};
enum MACRO_CYSETRFLOW {CYSETRFLOW = 0x43590A,};
enum MACRO_CapNotLast {CapNotLast = 0,CapButt = 1,CapRound = 2,};
enum MACRO_DATA_PLANE {DATA_PLANE_PURGE = 208,};
enum MACRO_DELAYTIMER {DELAYTIMER_MAX = 2147483647,TTY_NAME_MAX = 32,LOGIN_NAME_MAX = 256,HOST_NAME_MAX = 64,MQ_PRIO_MAX = 32768,SEM_VALUE_MAX = 2147483647,};
enum MACRO_DES_MAXLEN {DES_MAXLEN = 65536,DES_QUICKLEN = 16,};
enum MACRO_DIAGNOSTIC {RECEIVE_DIAGNOSTIC = 0x1C,SEND_DIAGNOSTIC = 0x1D,};
enum MACRO_DISCONNECT {DISCONNECT = 0x4,};
enum MACRO_DMX_FILTER {DMX_FILTER_SIZE = 16,DMX_CHECK_CRC = 1,DMX_ONESHOT = 2,DMX_IMMEDIATE_START = 4,DMX_KERNEL_CLIENT = 32768,DMX_START = 28457,DMX_STOP = 28458,DMX_SET_BUFFER_SIZE = 28461,};
enum MACRO_DPMSModeOn {DPMSModeOn = 0,DPMSModeStandby = 1,DPMSModeSuspend = 2,};
enum MACRO_DVD_STRUCT {DVD_STRUCT_PHYSICAL = 0x0,DVD_STRUCT_COPYRIGHT = 0x1,DVD_STRUCT_DISCKEY = 0x2,DVD_STRUCT_BCA = 0x3,DVD_STRUCT_MANUFACT = 0x4,DVD_LAYERS = 0x4,DVD_LU_SEND_AGID = 0x0,DVD_HOST_SEND_CHALLENGE = 0x1,DVD_LU_SEND_KEY1 = 0x2,DVD_LU_SEND_CHALLENGE = 0x3,DVD_HOST_SEND_KEY2 = 0x4,DVD_AUTH_ESTABLISHED = 0x5,DVD_AUTH_FAILURE = 0x6,DVD_LU_SEND_TITLE_KEY = 0x7,DVD_LU_SEND_ASF = 0x8,DVD_INVALIDATE_AGID = 0x9,DVD_LU_SEND_RPC_STATE = 0xA,DVD_HOST_SEND_RPC_STATE = 0xB,DVD_CPM_NO_COPYRIGHT = 0x0,DVD_CPM_COPYRIGHTED = 0x1,DVD_CP_SEC_NONE = 0x0,DVD_CP_SEC_EXIST = 0x1,DVD_CGMS_UNRESTRICTED = 0x0,DVD_CGMS_SINGLE = 0x2,DVD_CGMS_RESTRICTED = 0x3,};
enum MACRO_DestroyAll {DestroyAll = 0,RetainPermanent = 1,RetainTemporary = 2,};
enum MACRO_DeviceMode {DeviceMode = 1,};
enum MACRO_DiagStatus {DiagStatus_OK = 0,DiagStatus_AddressFailure = 1,DiagStatus_AddressConflict = 2,DiagStatus_IrqFailure = 3,DiagStatus_IrqConflict = 4,DiagStatus_DmaFailure = 5,DiagStatus_DmaConflict = 6,DiagStatus_PciAdapterNotFound = 7,DiagStatus_CantAssignPciResources = 8,DiagStatus_CantAssignPciMemAddr = 9,DiagStatus_CantAssignPciIoAddr = 10,DiagStatus_CantAssignPciIrq = 11,DiagStatus_MemoryError = 12,};
enum MACRO_DvAccelNum {DvAccelNum = 1,DvAccelDenom = 2,DvThreshold = 4,};
enum MACRO_EF_SPARCV9 {EF_SPARCV9_MM = 3,EF_SPARCV9_TSO = 0,EF_SPARCV9_PSO = 1,EF_SPARCV9_RMO = 2,EF_SPARC_LEDATA = 8388608,EF_SPARC_EXT_MASK = 16776960,EF_SPARC_32PLUS = 256,EF_SPARC_SUN_US1 = 512,EF_SPARC_HAL_R1 = 1024,EF_SPARC_SUN_US3 = 2048,};
enum MACRO_EI_VERSION {EI_VERSION = 6,EI_OSABI = 7,};
enum MACRO_ELFDATANUM {ELFDATANUM = 3,};
enum MACRO_ETH_MODULE {ETH_MODULE_SFF_8079 = 0x1,ETH_MODULE_SFF_8079_LEN = 0x100,ETH_MODULE_SFF_8472 = 0x2,ETH_MODULE_SFF_8472_LEN = 0x200,ETH_RESET_SHARED_SHIFT = 0x10,};
enum MACRO_E_SYMNMLEN {E_SYMNMLEN = 8,E_FILNMLEN = 14,E_DIMNUM = 4,};
enum MACRO_FBIO_ALLOC {FBIO_ALLOC = 0x4613,FBIO_FREE = 0x4614,};
enum MACRO_FD_CLOEXEC {FD_CLOEXEC = 1,};
enum MACRO_FD_STRETCH {FD_STRETCH = 1,FD_SWAPSIDES = 2,FD_ZEROBASED = 4,FD_SECTBASEMASK = 1020,FD_2M = 4,FD_SIZECODEMASK = 56,FD_PERP = 64,};
enum MACRO_FSBadAlloc {FSBadAlloc = 9,};
enum MACRO_FSBadRange {FSBadRange = 3,FSBadEventMask = 4,};
enum MACRO_FUNCTIONFS {FUNCTIONFS_FIFO_STATUS = 26369,FUNCTIONFS_FIFO_FLUSH = 26370,FUNCTIONFS_CLEAR_HALT = 26371,FUNCTIONFS_INTERFACE_REVMAP = 26496,FUNCTIONFS_ENDPOINT_REVMAP = 26497,};
enum MACRO_FUSE_ASYNC {FUSE_ASYNC_READ = 1,FUSE_POSIX_LOCKS = 2,FUSE_FILE_OPS = 4,FUSE_ATOMIC_O_TRUNC = 8,FUSE_EXPORT_SUPPORT = 16,FUSE_BIG_WRITES = 32,FUSE_DONT_MASK = 64,FUSE_SPLICE_WRITE = 128,FUSE_SPLICE_MOVE = 256,FUSE_SPLICE_READ = 512,FUSE_FLOCK_LOCKS = 1024,FUSE_HAS_IOCTL_DIR = 2048,FUSE_AUTO_INVAL_DATA = 4096,FUSE_DO_READDIRPLUS = 8192,FUSE_READDIRPLUS_AUTO = 16384,FUSE_ASYNC_DIO = 32768,};
enum MACRO_FamilyWild {FamilyWild = 65535,};
enum MACRO_FocusClass {FocusClass = 5,};
enum MACRO_FocusEvent {lbxsz_FocusEvent = 12,lbxupsz_FocusEvent = 9,};
enum MACRO_FontChange {FontChange = 255,};
enum MACRO_GCFunction {GCFunction = 1,GCPlaneMask = 2,GCForeground = 4,GCBackground = 8,GCLineWidth = 16,GCLineStyle = 32,GCCapStyle = 64,GCJoinStyle = 128,GCFillStyle = 256,GCFillRule = 512,GCTile = 1024,GCStipple = 2048,GCTileStipXOrigin = 4096,GCTileStipYOrigin = 8192,GCFont = 16384,GCSubwindowMode = 32768,GCGraphicsExposures = 65536,GCClipXOrigin = 131072,GCClipYOrigin = 262144,GCClipMask = 524288,GCDashOffset = 1048576,GCDashList = 2097152,GCArcMode = 4194304,};
enum MACRO_HDLCDRVCTL {HDLCDRVCTL_GETMODEMPAR = 0,HDLCDRVCTL_SETMODEMPAR = 1,HDLCDRVCTL_MODEMPARMASK = 2,HDLCDRVCTL_GETCHANNELPAR = 10,HDLCDRVCTL_SETCHANNELPAR = 11,HDLCDRVCTL_OLDGETSTAT = 20,HDLCDRVCTL_CALIBRATE = 21,HDLCDRVCTL_GETSTAT = 22,HDLCDRVCTL_GETSAMPLES = 30,HDLCDRVCTL_GETBITS = 31,HDLCDRVCTL_GETMODE = 40,HDLCDRVCTL_SETMODE = 41,HDLCDRVCTL_MODELIST = 42,HDLCDRVCTL_DRIVERNAME = 43,};
enum MACRO_HostInsert {HostInsert = 0,HostDelete = 1,};
enum MACRO_ICMP_REDIR {ICMP_REDIR_NET = 0,ICMP_REDIR_HOST = 1,ICMP_REDIR_NETTOS = 2,ICMP_REDIR_HOSTTOS = 3,ICMP_EXC_TTL = 0,ICMP_EXC_FRAGTIME = 1,ICMP_MINLEN = 8,ICMP_MASKLEN = 12,ICMP_UNREACH = 3,ICMP_SOURCEQUENCH = 4,ICMP_ROUTERADVERT = 9,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,ICMP_PARAMPROB = 12,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,ICMP_MAXTYPE = 18,ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_FILTER_PROHIB = 13,ICMP_UNREACH_HOST_PRECEDENCE = 14,ICMP_UNREACH_PRECEDENCE_CUTOFF = 15,ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,ICMP_PARAMPROB_OPTABSENT = 1,};
enum MACRO_IF_SETSIZE {IF_SETSIZE = 256,};
enum MACRO_IIOCDBGVAR {IIOCDBGVAR = 18815,};
enum MACRO_IIOCDRVCTL {IIOCDRVCTL = 18816,};
enum MACRO_IIOCGETCPS {IIOCGETCPS = 18709,};
enum MACRO_IIOCGETDVR {IIOCGETDVR = 18710,};
enum MACRO_IIOCGETMAP {IIOCGETMAP = 18705,};
enum MACRO_IIOCGETPRF {IIOCGETPRF = 18703,};
enum MACRO_IIOCGETSET {IIOCGETSET = 18696,};
enum MACRO_IIOCNETAIF {IIOCNETAIF = 18689,};
enum MACRO_IIOCNETALN {IIOCNETALN = 18720,};
enum MACRO_IIOCNETANM {IIOCNETANM = 18693,};
enum MACRO_IIOCNETASL {IIOCNETASL = 18707,};
enum MACRO_IIOCNETDIF {IIOCNETDIF = 18690,};
enum MACRO_IIOCNETDIL {IIOCNETDIL = 18708,};
enum MACRO_IIOCNETDLN {IIOCNETDLN = 18721,};
enum MACRO_IIOCNETDNM {IIOCNETDNM = 18694,};
enum MACRO_IIOCNETGCF {IIOCNETGCF = 18692,};
enum MACRO_IIOCNETGNM {IIOCNETGNM = 18695,};
enum MACRO_IIOCNETGPN {IIOCNETGPN = 18722,};
enum MACRO_IIOCNETHUP {IIOCNETHUP = 18699,};
enum MACRO_IIOCNETLCR {IIOCNETLCR = 18711,};
enum MACRO_IIOCNETSCF {IIOCNETSCF = 18691,};
enum MACRO_IIOCSETBRJ {IIOCSETBRJ = 18701,};
enum MACRO_IIOCSETGST {IIOCSETGST = 18700,};
enum MACRO_IIOCSETMAP {IIOCSETMAP = 18706,};
enum MACRO_IIOCSETPRF {IIOCSETPRF = 18704,};
enum MACRO_IIOCSETSET {IIOCSETSET = 18697,};
enum MACRO_IIOCSETVER {IIOCSETVER = 18698,};
enum MACRO_IIOCSIGPRF {IIOCSIGPRF = 18702,};
enum MACRO_INFINIBAND {INFINIBAND_ALEN = 20,};
enum MACRO_INFINITY_0 {INFINITY = 0x7FFFFFFF,};
enum MACRO_IPV6_RTHDR {IPV6_RTHDR_LOOSE = 0,IPV6_RTHDR_STRICT = 1,IPV6_RTHDR_TYPE_0 = 0,};
enum MACRO_IP_DEFAULT {IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MAX_MEMBERSHIPS = 20,};
enum MACRO_IXJCTL_GET {IXJCTL_GET_TONE_ON_TIME = 29086,IXJCTL_GET_TONE_OFF_TIME = 29087,IXJCTL_GET_TONE_STATE = 29088,IXJCTL_BUSY = 29089,IXJCTL_RINGBACK = 29090,IXJCTL_DIALTONE = 29091,IXJCTL_CPT_STOP = 29092,};
enum MACRO_IsUnmapped {IsUnmapped = 0,IsUnviewable = 1,IsViewable = 2,};
enum MACRO_IsXPointer {IsXPointer = 0,IsXKeyboard = 1,IsXExtensionDevice = 2,};
enum MACRO_KDGKBDIACR {KDGKBDIACR = 0x4B4A,};
enum MACRO_KDSKBDIACR {KDSKBDIACR = 0x4B4B,};
enum MACRO_KeyRelease {KeyRelease = 3,ButtonPress = 4,};
enum MACRO_LPGETFLAGS {LPGETFLAGS = 0x60E,};
enum MACRO_LP_TIMEOUT {LP_TIMEOUT_INTERRUPT = 6000,LP_TIMEOUT_POLLED = 1000,};
enum MACRO_LedModeOff {LedModeOff = 0,LedModeOn = 1,};
enum MACRO_MAP_FAILED {MAP_FAILED = -1,};
enum MACRO_MATSUSHITA {MATSUSHITA_CDROM_MAJOR = 25,};
enum MACRO_MAXDFLSRCH {MAXDFLSRCH = 3,};
enum MACRO_MAXNAMELEN {MAXNAMELEN = 1025,};
enum MACRO_MAX_HANDLE {MAX_HANDLE_SZ = 128,};
enum MACRO_MAX_NETOBJ {MAX_NETOBJ_SZ = 1024,MAX_AUTH_BYTES = 400,};
enum MACRO_MAX_SHARED {MAX_SHARED_LIBS = 1,};
enum MACRO_MD_FEATURE {MD_FEATURE_BITMAP_OFFSET = 1,MD_FEATURE_RECOVERY_OFFSET = 2,MD_FEATURE_RESHAPE_ACTIVE = 4,MD_FEATURE_BAD_BLOCKS = 8,MD_FEATURE_REPLACEMENT = 16,MD_FEATURE_RESHAPE_BACKWARDS = 32,MD_FEATURE_NEW_OFFSET = 64,MD_FEATURE_ALL = 127,MD_MAJOR_VERSION = 0,MD_MINOR_VERSION = 90,MD_PATCHLEVEL_VERSION = 3,};
enum MACRO_MGSL_MAGIC {MGSL_MAGIC_IOC = 109,MGSL_IOCSTXIDLE = 27906,MGSL_IOCGTXIDLE = 27907,MGSL_IOCTXENABLE = 27908,MGSL_IOCRXENABLE = 27909,MGSL_IOCTXABORT = 27910,MGSL_IOCGSTATS = 27911,MGSL_IOCCLRMODCOUNT = 27919,MGSL_IOCLOOPTXDONE = 27913,MGSL_IOCSIF = 27914,MGSL_IOCGIF = 27915,MGSL_IOCSXSYNC = 27923,MGSL_IOCGXSYNC = 27924,MGSL_IOCSXCTRL = 27925,MGSL_IOCGXCTRL = 27926,};
enum MACRO_MINIX_ROOT {MINIX_ROOT_INO = 1,MINIX_LINK_MAX = 250,};
enum MACRO_MISCOMPARE {MISCOMPARE = 0xE,};
enum MACRO_MIXER_PORT {MIXER_PORT_CD_L = 0x600,MIXER_PORT_CD_R = 0x700,MIXER_PORT_LINE_IN_L = 0x800,MIXER_PORT_LINE_IN_R = 0x900,MIXER_PORT_POTS_REC = 0xC00,MIXER_PORT_MIC = 0xE00,};
enum MACRO_MNTPATHLEN {MNTPATHLEN = 1024,};
enum MACRO_MODE_SENSE {MODE_SENSE = 0x1A,};
enum MACRO_MSDOS_NAME {MSDOS_NAME = 11,MSDOS_SLOTS = 21,};
enum MACRO_MSR_FAM10H {MSR_FAM10H_NODE_ID = 0xC001100C,MSR_K8_TOP_MEM1 = 0xC001001A,MSR_K8_TOP_MEM2 = 0xC001001D,MSR_K8_SYSCFG = 0xC0010010,MSR_K8_INT_PENDING_MSG = 0xC0010055,};
enum MACRO_MSR_THERM2 {MSR_THERM2_CTL = 0x19D,MSR_THERM2_CTL_TM_SELECT = 0x10000,MSR_IA32_MISC_ENABLE = 0x1A0,MSR_IA32_TEMPERATURE_TARGET = 0x1A2,MSR_IA32_ENERGY_PERF_BIAS = 0x1B0,};
enum MACRO_MS_VERBOSE {MS_VERBOSE = 32768,MS_NOSEC = 268435456,MS_BORN = 536870912,MS_RMT_MASK = 8388689,};
enum MACRO_MapRequest {MapRequest = 20,};
enum MACRO_NF_NETLINK {NF_NETLINK_CONNTRACK_NEW = 0x1,NF_NETLINK_CONNTRACK_UPDATE = 0x2,NF_NETLINK_CONNTRACK_DESTROY = 0x4,NF_NETLINK_CONNTRACK_EXP_NEW = 0x8,NF_NETLINK_CONNTRACK_EXP_UPDATE = 0x10,NF_NETLINK_CONNTRACK_EXP_DESTROY = 0x20,};
enum MACRO_NF_VERDICT {NF_VERDICT_BITS = 16,NF_ARP = 0,NF_ARP_IN = 0,NF_ARP_OUT = 1,NF_ARP_FORWARD = 2,NF_ARP_NUMHOOKS = 3,};
enum MACRO_NO_ADDRESS {NO_ADDRESS = 4,};
enum MACRO_NSS_BUFLEN {NSS_BUFLEN_PASSWD = 1024,};
enum MACRO_NT_PRFPREG {NT_PRFPREG = 2,NT_SIGINFO = 1397311305,NT_FILE = 1179208773,NT_S390_TDB = 776,NT_METAG_CBUF = 1280,NT_METAG_RPIPE = 1281,NT_METAG_TLS = 1282,};
enum MACRO_NULLSTRING {NULLSTRING = 0,};
enum MACRO_NewPointer {NewPointer = 0,NewKeyboard = 1,};
enum MACRO_NotifyHint {NotifyHint = 1,};
enum MACRO_OVERCOMMIT {OVERCOMMIT_GUESS = 0,OVERCOMMIT_ALWAYS = 1,OVERCOMMIT_NEVER = 2,};
enum MACRO_OVS_PACKET {OVS_PACKET_VERSION = 0x1,OVS_VPORT_VERSION = 0x1,OVS_FLOW_VERSION = 0x1,};
enum MACRO_O_ONEVALUE {O_ONEVALUE = 0x1,O_SHOWDESC = 0x2,O_ROWMAJOR = 0x4,O_IGNORECASE = 0x8,O_SHOWMATCH = 0x10,O_NONCYCLIC = 0x20,O_SELECTABLE = 0x1,};
enum MACRO_OtherClass {OtherClass = 6,};
enum MACRO_PACKET_CDR {PACKET_CDR = 1,PACKET_CDRW = 2,PACKET_DVDR = 3,PACKET_DVDRW = 4,PACKET_WRITABLE = 1,PACKET_NWA_VALID = 2,PACKET_LRA_VALID = 3,PACKET_MERGE_SEGS = 4,PACKET_DISC_EMPTY = 0,PACKET_DISC_INCOMPLETE = 1,PACKET_DISC_COMPLETE = 2,PACKET_DISC_OTHER = 3,PACKET_MODE1 = 1,PACKET_MODE2 = 2,PACKET_BLOCK_MODE1 = 8,PACKET_BLOCK_MODE2 = 10,PACKET_SESSION_EMPTY = 0,PACKET_SESSION_INCOMPLETE = 1,PACKET_SESSION_RESERVED = 2,PACKET_SESSION_COMPLETE = 3,};
enum MACRO_PERMISSION {PERMISSION_DENIED = 4,};
enum MACRO_PERSISTENT {PERSISTENT_RESERVE_IN = 0x5E,PERSISTENT_RESERVE_OUT = 0x5F,};
enum MACRO_PHONE_PSTN {PHONE_PSTN_LINETEST = 0x71A8,};
enum MACRO_PHONE_RING {PHONE_RING_STOP = 0x7188,};
enum MACRO_PORT_QUERY {PORT_QUERY = 0,PORT_POTS = 1,PORT_PSTN = 2,PORT_SPEAKER = 3,PORT_HANDSET = 4,};
enum MACRO_POSIX_MADV {POSIX_MADV_NORMAL = 0,POSIX_MADV_RANDOM = 1,POSIX_MADV_SEQUENTIAL = 2,POSIX_MADV_WILLNEED = 3,POSIX_MADV_DONTNEED = 4,};
enum MACRO_PURGE_RCVD {INGRESS_PURGE_RCVD = 103,EGRESS_PURGE_RCVD = 104,};
enum MACRO_PictOpAtop {PictOpAtop = 9,};
enum MACRO_PictOpOver {PictOpOver = 3,PictOpOverReverse = 4,};
enum MACRO_PlaceOnTop {PlaceOnTop = 0,PlaceOnBottom = 1,};
enum MACRO_QUEUE_SIZE {QUEUE_SIZE = 640,};
enum MACRO_Q_XQUOTAON {Q_XQUOTAON = 22529,Q_XQUOTAOFF = 22530,Q_XGETQUOTA = 22531,Q_XSETQLIM = 22532,Q_XGETQSTAT = 22533,Q_XQUOTARM = 22534,Q_XQUOTASYNC = 22535,};
enum MACRO_RELEASE_10 {RELEASE_10 = 0x57,};
enum MACRO_RESERVE_10 {RESERVE_10 = 0x56,};
enum MACRO_RFC1483LLC {RFC1483LLC_LEN = 8,};
enum MACRO_RIPVERSION {RIPVERSION = 1,};
enum MACRO_RUSERSPROC {RUSERSPROC_NUM = 1,RUSERSPROC_NAMES = 2,RUSERSPROC_ALLNAMES = 3,};
enum MACRO_RUSERSPROG {RUSERSPROG = 100002,};
enum MACRO_RUSERSVERS {RUSERSVERS_IDLE = 2,};
enum MACRO_RepeatNone {RepeatNone = 0,RepeatNormal = 1,RepeatPad = 2,};
enum MACRO_SECUREBITS {SECUREBITS_DEFAULT = 0x0,};
enum MACRO_SECURE_ALL {SECURE_ALL_BITS = 21,SECURE_ALL_LOCKS = 42,};
enum MACRO_SERIAL_RSA {SERIAL_RSA_BAUD_BASE = 921600,SERIAL_RSA_BAUD_BASE_LO = 115200,};
enum MACRO_SET_LIMITS {SET_LIMITS = 0x33,};
enum MACRO_SHF_PARISC {SHF_PARISC_SHORT = 0x20000000,SHF_PARISC_HUGE = 0x40000000,SHF_PARISC_SBP = 0x80000000,};
enum MACRO_SHN_PARISC {SHN_PARISC_ANSI_COMMON = 0xFF00,SHN_PARISC_HUGE_COMMON = 0xFF01,};
enum MACRO_SHT_PARISC {SHT_PARISC_EXT = 0x70000000,SHT_PARISC_UNWIND = 0x70000001,SHT_PARISC_DOC = 0x70000002,};
enum MACRO_SIOCATMARK {SIOCATMARK = 0x8905,};
enum MACRO_SIOCGETRPF {SIOCGETRPF = 35298,};
enum MACRO_SIOCGIFMAP {SIOCGIFMAP = 0x8970,};
enum MACRO_SIOCGIFMEM {SIOCGIFMEM = 0x891F,};
enum MACRO_SIOCGIFMTU {SIOCGIFMTU = 0x8921,};
enum MACRO_SIOCGLEASE {SIOCGLEASE = 35317,};
enum MACRO_SIOCGSTAMP {SIOCGSTAMP = 0x8906,};
enum MACRO_SIOCMKCLIP {SIOCMKCLIP = 25056,};
enum MACRO_SIOCSIFMAP {SIOCSIFMAP = 0x8971,};
enum MACRO_SIOCSIFMEM {SIOCSIFMEM = 0x8920,};
enum MACRO_SIOCSIFMTU {SIOCSIFMTU = 0x8922,};
enum MACRO_SIOCSLEASE {SIOCSLEASE = 35316,};
enum MACRO_SIOCWANDEV {SIOCWANDEV = 0x894A,};
enum MACRO_SNDCTL_DSP {SNDCTL_DSP_RESET = 20480,SNDCTL_DSP_SYNC = 20481,SNDCTL_DSP_POST = 20488,};
enum MACRO_SND_EGRESS {SND_EGRESS_PURGE = 206,};
enum MACRO_SOL_NETROM {SOL_NETROM = 259,};
enum MACRO_SOL_SOCKET {SOL_SOCKET = 1,};
enum MACRO_SO_CONDATA {SO_CONDATA = 1,SO_CONACCESS = 2,SO_PROXYUSR = 3,SO_LINKINFO = 7,};
enum MACRO_STOP_ARRAY {STOP_ARRAY = 0x932,STOP_ARRAY_RO = 0x933,};
enum MACRO_STRINGSIZE {STRINGSIZE = 1024,};
enum MACRO_STT_PARISC {STT_PARISC_MILLICODE = 13,STT_HP_OPAQUE = 11,STT_HP_STUB = 12,};
enum MACRO_SUBCMDMASK {SUBCMDMASK = 0xFF,};
enum MACRO_SYNC_MAJOR {SYNC_MAJOR_VERSION = 3,SYNC_MINOR_VERSION = 1,};
enum MACRO_SYS_SOCKET {SYS_SOCKET = 1,SYS_BIND = 2,SYS_CONNECT = 3,SYS_LISTEN = 4,SYS_ACCEPT = 5,SYS_GETSOCKNAME = 6,SYS_GETPEERNAME = 7,SYS_SOCKETPAIR = 8,SYS_SEND = 9,SYS_RECV = 10,SYS_SENDTO = 11,SYS_RECVFROM = 12,SYS_SHUTDOWN = 13,SYS_SETSOCKOPT = 14,SYS_GETSOCKOPT = 15,SYS_SENDMSG = 16,SYS_RECVMSG = 17,SYS_ACCEPT4 = 18,SYS_RECVMMSG = 19,SYS_SENDMMSG = 20,};
enum MACRO_SaveSetMap {SaveSetMap = 0,SaveSetUnmap = 1,};
enum MACRO_StaticGray {StaticGray = 0,GrayScale = 1,StaticColor = 2,};
enum MACRO_Successful {Successful = 85,};
enum MACRO_TCF_EM_CMP {TCF_EM_CMP_TRANS = 1,TCF_META_TYPE_MASK = 61440,TCF_META_ID_MASK = 2047,};
enum MACRO_TCODE_LOCK {TCODE_LOCK_MASK_SWAP = 0x11,TCODE_LOCK_COMPARE_SWAP = 0x12,TCODE_LOCK_FETCH_ADD = 0x13,TCODE_LOCK_LITTLE_ADD = 0x14,TCODE_LOCK_BOUNDED_ADD = 0x15,TCODE_LOCK_WRAP_ADD = 0x16,TCODE_LOCK_VENDOR_DEPENDENT = 0x17,};
enum MACRO_TCP_MD5SIG {TCP_MD5SIG_MAXKEYLEN = 80,};
enum MACRO_TIMER_RATE {TIMER_RATE = 30,};
enum MACRO_TIOCGRS485 {TIOCGRS485 = 0x542E,};
enum MACRO_TIOCGWINSZ {TIOCGWINSZ = 0x5413,};
enum MACRO_TIOCMIWAIT {TIOCMIWAIT = 0x545C,};
enum MACRO_TIOCSRS485 {TIOCSRS485 = 0x542F,};
enum MACRO_TIOCSWINSZ {TIOCSWINSZ = 0x5414,};
enum MACRO_TSPVERSION {TSPVERSION = 1,};
enum MACRO_UAC_HEADER {UAC_HEADER = 0x1,UAC_INPUT_TERMINAL = 0x2,UAC_OUTPUT_TERMINAL = 0x3,UAC_MIXER_UNIT = 0x4,UAC_SELECTOR_UNIT = 0x5,UAC_FEATURE_UNIT = 0x6,};
enum MACRO_UINT_FAST8 {UINT_FAST8_MAX = 255,UINT_FAST16_MAX = -1,UINT_FAST32_MAX = -1,UINT_FAST64_MAX = -1,};
enum MACRO_UNISCRNMAP {GIO_UNISCRNMAP = 0x4B69,PIO_UNISCRNMAP = 0x4B6A,};
enum MACRO_USB_DEVICE {USB_DEVICE_U1_ENABLE = 48,USB_DEVICE_U2_ENABLE = 49,USB_DEVICE_LTM_ENABLE = 50,USB_INTRF_FUNC_SUSPEND = 0,USB_INTR_FUNC_SUSPEND_OPT_MASK = 65280,USB_INTRF_FUNC_SUSPEND_LP = 256,USB_INTRF_FUNC_SUSPEND_RW = 512,USB_INTRF_STAT_FUNC_RW_CAP = 1,USB_INTRF_STAT_FUNC_RW = 2,USB_ENDPOINT_HALT = 0,USB_DEV_STAT_U1_ENABLED = 2,USB_DEV_STAT_U2_ENABLED = 3,USB_DEV_STAT_LTM_ENABLED = 4,USB_DT_DEVICE = 1,USB_DT_CONFIG = 2,USB_DT_STRING = 3,USB_DT_INTERFACE = 4,USB_DT_ENDPOINT = 5,USB_DT_DEVICE_QUALIFIER = 6,USB_DT_OTHER_SPEED_CONFIG = 7,USB_DT_INTERFACE_POWER = 8,USB_DT_OTG = 9,USB_DT_DEBUG = 10,USB_DT_INTERFACE_ASSOCIATION = 11,USB_DT_SECURITY = 12,USB_DT_KEY = 13,USB_DT_ENCRYPTION_TYPE = 14,USB_DT_BOS = 15,USB_DT_DEVICE_CAPABILITY = 16,USB_DT_WIRELESS_ENDPOINT_COMP = 17,USB_DT_WIRE_ADAPTER = 33,USB_DT_RPIPE = 34,USB_DT_CS_RADIO_CONTROL = 35,USB_DT_PIPE_USAGE = 36,USB_DT_SS_ENDPOINT_COMP = 48,USB_DT_CS_DEVICE = 33,USB_DT_CS_CONFIG = 34,USB_DT_CS_STRING = 35,USB_DT_CS_INTERFACE = 36,USB_DT_CS_ENDPOINT = 37,USB_DT_DEVICE_SIZE = 18,USB_CLASS_PER_INTERFACE = 0,USB_CLASS_AUDIO = 1,USB_CLASS_COMM = 2,USB_CLASS_HID = 3,USB_CLASS_PHYSICAL = 5,USB_CLASS_STILL_IMAGE = 6,USB_CLASS_PRINTER = 7,USB_CLASS_MASS_STORAGE = 8,USB_CLASS_HUB = 9,USB_CLASS_CDC_DATA = 10,USB_CLASS_CSCID = 11,USB_CLASS_CONTENT_SEC = 13,USB_CLASS_VIDEO = 14,USB_CLASS_WIRELESS_CONTROLLER = 224,USB_CLASS_MISC = 239,USB_CLASS_APP_SPEC = 254,USB_CLASS_VENDOR_SPEC = 255,USB_SUBCLASS_VENDOR_SPEC = 255,USB_DT_CONFIG_SIZE = 9,USB_CONFIG_ATT_ONE = 128,USB_CONFIG_ATT_SELFPOWER = 64,USB_CONFIG_ATT_WAKEUP = 32,USB_CONFIG_ATT_BATTERY = 16,USB_DT_INTERFACE_SIZE = 9,USB_DT_ENDPOINT_SIZE = 7,USB_DT_ENDPOINT_AUDIO_SIZE = 9,USB_ENDPOINT_NUMBER_MASK = 15,USB_ENDPOINT_DIR_MASK = 128,USB_ENDPOINT_XFERTYPE_MASK = 3,USB_ENDPOINT_XFER_CONTROL = 0,USB_ENDPOINT_XFER_ISOC = 1,USB_ENDPOINT_XFER_BULK = 2,USB_ENDPOINT_XFER_INT = 3,USB_ENDPOINT_MAX_ADJUSTABLE = 128,USB_ENDPOINT_INTRTYPE = 48,USB_ENDPOINT_INTR_PERIODIC = 0,USB_ENDPOINT_INTR_NOTIFICATION = 16,USB_ENDPOINT_SYNCTYPE = 12,USB_ENDPOINT_SYNC_NONE = 0,USB_ENDPOINT_SYNC_ASYNC = 4,USB_ENDPOINT_SYNC_ADAPTIVE = 8,USB_ENDPOINT_SYNC_SYNC = 12,USB_ENDPOINT_USAGE_MASK = 48,USB_ENDPOINT_USAGE_DATA = 0,USB_ENDPOINT_USAGE_FEEDBACK = 16,USB_ENDPOINT_USAGE_IMPLICIT_FB = 32,USB_DT_SS_EP_COMP_SIZE = 6,USB_OTG_SRP = 1,USB_OTG_HNP = 2,USB_ENC_TYPE_UNSECURE = 0,USB_ENC_TYPE_WIRED = 1,USB_ENC_TYPE_CCM_1 = 2,USB_ENC_TYPE_RSA_1 = 3,USB_DT_BOS_SIZE = 5,USB_CAP_TYPE_WIRELESS_USB = 1,USB_WIRELESS_P2P_DRD = 2,USB_WIRELESS_BEACON_MASK = 12,USB_WIRELESS_BEACON_SELF = 4,USB_WIRELESS_BEACON_DIRECTED = 8,USB_WIRELESS_BEACON_NONE = 12,USB_WIRELESS_PHY_53 = 1,USB_WIRELESS_PHY_80 = 2,USB_WIRELESS_PHY_107 = 4,USB_WIRELESS_PHY_160 = 8,USB_WIRELESS_PHY_200 = 16,USB_WIRELESS_PHY_320 = 32,USB_WIRELESS_PHY_400 = 64,USB_WIRELESS_PHY_480 = 128,USB_CAP_TYPE_EXT = 2,USB_LPM_SUPPORT = 2,USB_BESL_SUPPORT = 4,USB_BESL_BASELINE_VALID = 8,USB_BESL_DEEP_VALID = 16,USB_DT_USB_EXT_CAP_SIZE = 7,USB_SS_CAP_TYPE = 3,USB_LTM_SUPPORT = 2,USB_LOW_SPEED_OPERATION = 1,USB_FULL_SPEED_OPERATION = 2,USB_HIGH_SPEED_OPERATION = 4,USB_5GBPS_OPERATION = 8,USB_DT_USB_SS_CAP_SIZE = 10,};
enum MACRO_USB_DT_USB {USB_DT_USB_SS_CONTN_ID_SIZE = 20,USB_ENDPOINT_SWITCH_MASK = 3,USB_ENDPOINT_SWITCH_NO = 0,USB_ENDPOINT_SWITCH_SWITCH = 1,USB_ENDPOINT_SWITCH_SCALE = 2,};
enum MACRO_USPosition {USPosition = 1,USSize = 2,PPosition = 4,PSize = 8,PMinSize = 16,PMaxSize = 32,PResizeInc = 64,PAspect = 128,PBaseSize = 256,PWinGravity = 512,};
enum MACRO_UT_UNKNOWN {UT_UNKNOWN = 0,};
enum MACRO_V4L2_EVENT {V4L2_EVENT_OMAP3ISP_CLASS = 134217984,V4L2_EVENT_OMAP3ISP_AEWB = 134217985,V4L2_EVENT_OMAP3ISP_AF = 134217986,V4L2_EVENT_OMAP3ISP_HIST = 134217987,};
enum MACRO_WINDOW_HAS {WINDOW_HAS_FLAGS = 1,};
enum MACRO_WRITE_LONG {WRITE_LONG_2 = 0xEA,};
enum MACRO_WRITE_SAME {WRITE_SAME = 0x41,};
enum MACRO_XIKeyClass {XIKeyClass = 0,XIButtonClass = 1,XIValuatorClass = 2,};
enum MACRO_XIMReverse {XIMReverse = 1,XIMUnderline = 2,XIMHighlight = 4,XIMPrimary = 32,XIMSecondary = 64,XIMTertiary = 128,XIMVisibleToForward = 256,XIMVisibleToBackword = 512,XIMVisibleToCenter = 1024,};
enum MACRO_XISyncPair {XISyncPair = 5,};
enum MACRO_XTestDELAY {XTestDELAY_DEVICE_ID = 0xF,};
enum MACRO_XTestEVENT {XTestEVENT_COUNT = 2,};
enum MACRO_XTestPRESS {XTestPRESS = 1,XTestRELEASE = 2,XTestSTROKE = 4,};
enum MACRO_XTestSHORT {XTestSHORT_DELAY_TIME = 0xFFFF,};
enum MACRO_XdbeCopied {XdbeCopied = 3,};
enum MACRO_XkbNoShape {XkbNoShape = 0xFF,};
enum MACRO_XvBadAlloc {XvBadAlloc = 5,};
enum MACRO_XvGettable {XvGettable = 0x1,XvSettable = 0x2,};
enum MACRO_XvRevision {XvRevision = 2,};
enum MACRO_YPBINDPROC {YPBINDPROC_NULL = 0,YPBINDPROC_DOMAIN = 1,YPBINDPROC_SETDOM = 2,};
enum MACRO_YPBINDPROG {YPBINDPROG = 100007,};
enum MACRO_YPBINDVERS {YPBINDVERS = 2,};
enum MACRO_YPPUSHPROC {YPPUSHPROC_NULL = 0,YPPUSHPROC_XFRRESP = 1,};
enum MACRO__ARPA_INET {_ARPA_INET_H = 1,_NETINET_IN_H = 1,_SYS_SOCKET_H = 1,_SYS_UIO_H = 1,_BITS_UIO_H = 1,};
enum MACRO__ARPA_TFTP {_ARPA_TFTP_H = 1,};
enum MACRO__BITS_LIBC {_BITS_LIBC_LOCK_H = 1,};
enum MACRO__BITS_STAT {_BITS_STAT_H = 1,};
enum MACRO__BITS_TIME {_BITS_TIME_H = 1,};
enum MACRO__DPMSCONST {_DPMSCONST_H = 1,};
enum MACRO__LARGEFILE {_LARGEFILE_SOURCE = 1,};
enum MACRO__MKNOD_VER {_MKNOD_VER = 0,};
enum MACRO__NETECONET {_NETECONET_EC_H = 1,};
enum MACRO__NET_ROUTE {_NET_ROUTE_H = 1,};
enum MACRO__POSIX2_BC {_POSIX2_BC_BASE_MAX = 99,_POSIX2_BC_DIM_MAX = 2048,_POSIX2_BC_SCALE_MAX = 99,_POSIX2_BC_STRING_MAX = 1000,_POSIX2_COLL_WEIGHTS_MAX = 2,_POSIX2_EXPR_NEST_MAX = 32,_POSIX2_LINE_MAX = 2048,_POSIX2_RE_DUP_MAX = 255,_POSIX2_CHARCLASS_NAME_MAX = 14,};
enum MACRO__POSIX_AIO {_POSIX_AIO_LISTIO_MAX = 2,_POSIX_AIO_MAX = 1,_POSIX_ARG_MAX = 4096,_POSIX_CHILD_MAX = 25,_POSIX_DELAYTIMER_MAX = 32,_POSIX_HOST_NAME_MAX = 255,_POSIX_LINK_MAX = 8,_POSIX_LOGIN_NAME_MAX = 9,_POSIX_MAX_CANON = 255,_POSIX_MAX_INPUT = 255,_POSIX_MQ_OPEN_MAX = 8,_POSIX_MQ_PRIO_MAX = 32,_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 8,_POSIX_OPEN_MAX = 20,_POSIX_FD_SETSIZE = 20,_POSIX_PATH_MAX = 256,_POSIX_PIPE_BUF = 512,_POSIX_RE_DUP_MAX = 255,_POSIX_RTSIG_MAX = 8,_POSIX_SEM_NSEMS_MAX = 256,_POSIX_SEM_VALUE_MAX = 32767,_POSIX_SIGQUEUE_MAX = 32,_POSIX_SSIZE_MAX = 32767,_POSIX_STREAM_MAX = 8,_POSIX_SYMLINK_MAX = 255,_POSIX_SYMLOOP_MAX = 8,_POSIX_TIMER_MAX = 32,_POSIX_TTY_NAME_MAX = 9,_POSIX_TZNAME_MAX = 6,_POSIX_QLIMIT = 1,_POSIX_HIWAT = 512,_POSIX_UIO_MAXIOV = 16,_POSIX_CLOCKRES_MIN = 20000000,};
enum MACRO__PROTOCOLS {_PROTOCOLS_ROUTED_H = 1,};
enum MACRO__SEMAPHORE {_SEMAPHORE_H = 1,};
enum MACRO__STDIO_EXT {_STDIO_EXT_H = 1,_STRINGS_H = 1,_SYS_ACCT_H = 1,};
enum MACRO__SYS_IOCTL {_SYS_IOCTL_H = 1,};
enum MACRO__SYS_MOUNT {_SYS_MOUNT_H = 1,};
enum MACRO__SYS_PARAM {_SYS_PARAM_H = 1,};
enum MACRO__SYS_TIMEB {_SYS_TIMEB_H = 1,_SYS_TIMERFD_H = 1,_SYS_TIMES_H = 1,_SYS_TIMEX_H = 1,};
enum MACRO__SYS_USTAT {_SYS_USTAT_H = 1,_SYS_UTSNAME_H = 1,};
enum MACRO__SYS_XATTR {_SYS_XATTR_H = 1,_TAR_H = 1,};
enum MACRO__XBS5_LP64 {_XBS5_LP64_OFF64 = 1,};
enum MACRO__XOPEN_LIM {_XOPEN_LIM_H = 1,};
enum MACRO___F_SETSIG {__F_SETSIG = 10,__F_GETSIG = 11,__F_SETOWN_EX = 15,__F_GETOWN_EX = 16,};
enum MACRO___SIGRTMIN {__SIGRTMIN = 32,__SIGRTMAX = 64,};
enum MACRO___WORDSIZE {__WORDSIZE = 64,};
enum MACRO_____gwchar {____gwchar_t_defined = 1,};
enum MACRO___dontcare {__dontcare__ = -1,};
enum MACRO___timespec {__timespec_defined = 1,};
typedef union _SCSI3Addr_struct SCSI3Addr_struct;
enum XEventQueueOwner {XlibOwnsEventQueue = 0x0,XCBOwnsEventQueue = 0x1,};
typedef struct _XIMHotKeyTrigger XIMHotKeyTrigger;
typedef struct _BFB970BD49ED9B406D7CBF54A76D57DD XKeyboardControl;
typedef struct _3224684BD501E054CF1A67297C7290FB XMapRequestEvent;
typedef struct _CC1BC89F17F8E2D162EA4A62A1B63DC5 XVisibilityEvent;
typedef struct _XkbDeviceInfo *XkbDeviceInfoPtr;
typedef struct _XkbDeviceInfo XkbDeviceInfoRec;
typedef struct _XkbKTMapEntry *XkbKTMapEntryPtr;
typedef struct _XkbKTMapEntry XkbKTMapEntryRec;
typedef struct _XkbLogoDoodad *XkbLogoDoodadPtr;
typedef struct _XkbLogoDoodad XkbLogoDoodadRec;
typedef struct _XkbMapChanges *XkbMapChangesPtr;
typedef struct _XkbMapChanges XkbMapChangesRec;
typedef struct _XkbMessageAction XkbMessageAction;
typedef struct _XkbOverlayKey *XkbOverlayKeyPtr;
typedef struct _XkbOverlayKey XkbOverlayKeyRec;
typedef struct _XkbOverlayRow *XkbOverlayRowPtr;
typedef struct _XkbOverlayRow XkbOverlayRowRec;
typedef struct _XkbPtrDfltAction XkbPtrDfltAction;
typedef struct _XkbTextDoodad *XkbTextDoodadPtr;
typedef struct _XkbTextDoodad XkbTextDoodadRec;
typedef struct _CB86ED79A67F464A5E5DD7E35915D8C3 XrmOptionDescRec;
struct _XkbPtrBtnAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 count;unsigned __int8 button;};
struct _XvMCMpegControl {unsigned int BVMV_range;unsigned int BHMV_range;unsigned int FVMV_range;unsigned int FHMV_range;unsigned int picture_structure;unsigned int intra_dc_precision;unsigned int picture_coding_type;unsigned int mpeg_coding;unsigned int flags;};
enum __codecvt_result {__codecvt_ok = 0x0,__codecvt_partial = 0x1,__codecvt_error = 0x2,__codecvt_noconv = 0x3,};
typedef int (*__gconv_init_fct)(struct __gconv_step *);
typedef char *__kernel_caddr_t;
typedef int __kernel_daddr_t;
typedef unsigned __int16 __kernel_gid16_t;
typedef unsigned int __kernel_gid32_t;
typedef int __kernel_timer_t;
typedef unsigned __int16 __kernel_uid16_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned __int64 __kernel_ulong_t;
enum __priority_which {PRIO_PROCESS = 0x0,PRIO_PGRP = 0x1,PRIO_USER = 0x2,};
typedef struct __pthread_internal_list __pthread_list_t;
enum __ptrace_request {PTRACE_TRACEME = 0x0,PTRACE_PEEKTEXT = 0x1,PTRACE_PEEKDATA = 0x2,PTRACE_PEEKUSER = 0x3,PTRACE_POKETEXT = 0x4,PTRACE_POKEDATA = 0x5,PTRACE_POKEUSER = 0x6,PTRACE_CONT = 0x7,PTRACE_KILL = 0x8,PTRACE_SINGLESTEP = 0x9,PTRACE_GETREGS = 0xC,PTRACE_SETREGS = 0xD,PTRACE_GETFPREGS = 0xE,PTRACE_SETFPREGS = 0xF,PTRACE_ATTACH = 0x10,PTRACE_DETACH = 0x11,PTRACE_GETFPXREGS = 0x12,PTRACE_SETFPXREGS = 0x13,PTRACE_SYSCALL = 0x18,PTRACE_SETOPTIONS = 0x4200,PTRACE_GETEVENTMSG = 0x4201,PTRACE_GETSIGINFO = 0x4202,PTRACE_SETSIGINFO = 0x4203,PTRACE_GETREGSET = 0x4204,PTRACE_SETREGSET = 0x4205,PTRACE_SEIZE = 0x4206,PTRACE_INTERRUPT = 0x4207,PTRACE_LISTEN = 0x4208,};
typedef struct timezone *__timezone_ptr_t;
enum atmarp_ctrl_type {act_invalid = 0x0,act_need = 0x1,act_up = 0x2,act_down = 0x3,act_change = 0x4,};
enum authdes_namekind {ADN_FULLNAME = 0x0,ADN_NICKNAME = 0x1,};
struct avmb1_extcarddef {int port;int irq;int cardtype;int cardnr;};
struct ax25_info_struct {unsigned int n2;unsigned int n2count;unsigned int t1;unsigned int t1timer;unsigned int t2;unsigned int t2timer;unsigned int t3;unsigned int t3timer;unsigned int idle;unsigned int idletimer;unsigned int state;unsigned int rcv_q;unsigned int snd_q;};
enum caif_socket_opts {CAIFSO_LINK_SELECT = 0x7F,CAIFSO_REQ_PARAM = 0x80,CAIFSO_RSP_PARAM = 0x81,};
struct ccs_modesel_head {unsigned __int8 _r1;unsigned __int8 medium;unsigned __int8 _r2;unsigned __int8 block_desc_length;unsigned __int8 density;unsigned __int8 number_blocks_hi;unsigned __int8 number_blocks_med;unsigned __int8 number_blocks_lo;unsigned __int8 _r3;unsigned __int8 block_length_hi;unsigned __int8 block_length_med;unsigned __int8 block_length_lo;};
struct changer_exchange {int ce_srctype;int ce_srcunit;int ce_fdsttype;int ce_fdstunit;int ce_sdsttype;int ce_sdstunit;int ce_flags;};
struct changer_position {int cp_type;int cp_unit;int cp_flags;};
struct clusterip_config;
enum ctattr_protoinfo {CTA_PROTOINFO_UNSPEC = 0x0,CTA_PROTOINFO_TCP = 0x1,CTA_PROTOINFO_DCCP = 0x2,CTA_PROTOINFO_SCTP = 0x3,__CTA_PROTOINFO_MAX = 0x4,};
enum ctattr_stats_cpu {CTA_STATS_UNSPEC = 0x0,CTA_STATS_SEARCHED = 0x1,CTA_STATS_FOUND = 0x2,CTA_STATS_NEW = 0x3,CTA_STATS_INVALID = 0x4,CTA_STATS_IGNORE = 0x5,CTA_STATS_DELETE = 0x6,CTA_STATS_DELETE_LIST = 0x7,CTA_STATS_INSERT = 0x8,CTA_STATS_INSERT_FAILED = 0x9,CTA_STATS_DROP = 0xA,CTA_STATS_EARLY_DROP = 0xB,CTA_STATS_ERROR = 0xC,CTA_STATS_SEARCH_RESTART = 0xD,__CTA_STATS_MAX = 0xE,};
struct cyclades_monitor {unsigned __int64 int_count;unsigned __int64 char_count;unsigned __int64 char_max;unsigned __int64 char_last;};
enum dccp_reset_codes {DCCP_RESET_CODE_UNSPECIFIED = 0x0,DCCP_RESET_CODE_CLOSED = 0x1,DCCP_RESET_CODE_ABORTED = 0x2,DCCP_RESET_CODE_NO_CONNECTION = 0x3,DCCP_RESET_CODE_PACKET_ERROR = 0x4,DCCP_RESET_CODE_OPTION_ERROR = 0x5,DCCP_RESET_CODE_MANDATORY_ERROR = 0x6,DCCP_RESET_CODE_CONNECTION_REFUSED = 0x7,DCCP_RESET_CODE_BAD_SERVICE_CODE = 0x8,DCCP_RESET_CODE_TOO_BUSY = 0x9,DCCP_RESET_CODE_BAD_INIT_COOKIE = 0xA,DCCP_RESET_CODE_AGGRESSION_PENALTY = 0xB,DCCP_MAX_RESET_CODES = 0xC,};
typedef struct _31656A24DD6A4D60E66F5C984119D448 disc_information;
typedef struct Elf *dwarf_elf_handle;
enum fc_ba_rjt_explan {FC_BA_RJT_EXP_NONE = 0x0,FC_BA_RJT_INV_XID = 0x3,FC_BA_RJT_ABT = 0x5,};
enum fc_ba_rjt_reason {FC_BA_RJT_NONE = 0x0,FC_BA_RJT_INVL_CMD = 0x1,FC_BA_RJT_LOG_ERR = 0x3,FC_BA_RJT_LOG_BUSY = 0x5,FC_BA_RJT_PROTO_ERR = 0x7,FC_BA_RJT_UNABLE = 0x9,FC_BA_RJT_VENDOR = 0xFF,};
enum fc_els_lirr_func {ELS_LIRR_SET_COND = 0x1,ELS_LIRR_SET_UNCOND = 0x2,ELS_LIRR_CLEAR = 0xFF,};
enum fc_els_rnid_mgmt {ELS_RNIDM_SNMP = 0x0,ELS_RNIDM_TELNET = 0x1,ELS_RNIDM_HTTP = 0x2,ELS_RNIDM_HTTPS = 0x3,ELS_RNIDM_XML = 0x4,};
enum fc_pf_rjt_reason {FC_RJT_NONE = 0x0,FC_RJT_INVL_DID = 0x1,FC_RJT_INVL_SID = 0x2,FC_RJT_P_UNAV_T = 0x3,FC_RJT_P_UNAV = 0x4,FC_RJT_CLS_UNSUP = 0x5,FC_RJT_DEL_USAGE = 0x6,FC_RJT_TYPE_UNSUP = 0x7,FC_RJT_LINK_CTL = 0x8,FC_RJT_R_CTL = 0x9,FC_RJT_F_CTL = 0xA,FC_RJT_OX_ID = 0xB,FC_RJT_RX_ID = 0xC,FC_RJT_SEQ_ID = 0xD,FC_RJT_DF_CTL = 0xE,FC_RJT_SEQ_CNT = 0xF,FC_RJT_PARAM = 0x10,FC_RJT_EXCH_ERR = 0x11,FC_RJT_PROTO = 0x12,FC_RJT_LEN = 0x13,FC_RJT_UNEXP_ACK = 0x14,FC_RJT_FAB_CLASS = 0x15,FC_RJT_LOGI_REQ = 0x16,FC_RJT_SEQ_XS = 0x17,FC_RJT_EXCH_EST = 0x18,FC_RJT_FAB_UNAV = 0x1A,FC_RJT_VC_ID = 0x1B,FC_RJT_CS_CTL = 0x1C,FC_RJT_INSUF_RES = 0x1D,FC_RJT_INVL_CLS = 0x1F,FC_RJT_PREEMT_RJT = 0x20,FC_RJT_PREEMT_DIS = 0x21,FC_RJT_MCAST_ERR = 0x22,FC_RJT_MCAST_ET = 0x23,FC_RJT_PRLI_REQ = 0x24,FC_RJT_INVL_ATT = 0x25,FC_RJT_VENDOR = 0xFF,};
enum fe_sec_tone_mode {SEC_TONE_ON = 0x0,SEC_TONE_OFF = 0x1,};
enum fe_transmit_mode {TRANSMISSION_MODE_2K = 0x0,TRANSMISSION_MODE_8K = 0x1,TRANSMISSION_MODE_AUTO = 0x2,TRANSMISSION_MODE_4K = 0x3,TRANSMISSION_MODE_1K = 0x4,TRANSMISSION_MODE_16K = 0x5,TRANSMISSION_MODE_32K = 0x6,TRANSMISSION_MODE_C1 = 0x7,TRANSMISSION_MODE_C3780 = 0x8,};
struct floppy_fdc_state {int spec1;int spec2;int dtr;unsigned __int8 version;unsigned __int8 dor;unsigned __int64 address;unsigned __int32 rawcmd : 2;unsigned __int32 reset : 1;unsigned __int32 need_configure : 1;unsigned __int32 perp_mode : 2;unsigned __int32 has_fifo : 1;unsigned int driver_version;unsigned __int8 track[4];};
typedef struct _29DBA087DFE16744A29CB8F8CD68D43B fsConnSetupExtra;
typedef struct _2A73BF0E4CA9808D683BEEEFEEB2900C fsEventMaskError;
typedef struct _E5FCE84481A5DA4B542276D3CC112A29 fsKeepAliveEvent;
typedef struct _D7F0CB1571AAC0714CF3A2A9DC0827E7 fsListFontsReply;
enum fuse_notify_code {FUSE_NOTIFY_POLL = 0x1,FUSE_NOTIFY_INVAL_INODE = 0x2,FUSE_NOTIFY_INVAL_ENTRY = 0x3,FUSE_NOTIFY_STORE = 0x4,FUSE_NOTIFY_RETRIEVE = 0x5,FUSE_NOTIFY_DELETE = 0x6,FUSE_NOTIFY_CODE_MAX = 0x7,};
struct hdsp_config_info {unsigned __int8 pref_sync_ref;unsigned __int8 wordclock_sync_check;unsigned __int8 spdif_sync_check;unsigned __int8 adatsync_sync_check;unsigned __int8 adat_sync_check[3];unsigned __int8 spdif_in;unsigned __int8 spdif_out;unsigned __int8 spdif_professional;unsigned __int8 spdif_emphasis;unsigned __int8 spdif_nonaudio;unsigned int spdif_sample_rate;unsigned int system_sample_rate;unsigned int autosync_sample_rate;unsigned __int8 system_clock_mode;unsigned __int8 clock_source;unsigned __int8 autosync_ref;unsigned __int8 line_out;unsigned __int8 passthru;unsigned __int8 da_gain;unsigned __int8 ad_gain;unsigned __int8 phone_gain;unsigned __int8 xlr_breakout_cable;unsigned __int8 analog_extension_board;};
enum hdspm_ltc_format {format_invalid = 0x0,fps_24 = 0x1,fps_25 = 0x2,fps_2997 = 0x3,fps_30 = 0x4,};
enum hdspm_madi_input {hdspm_input_optical = 0x0,hdspm_input_coax = 0x1,};
typedef struct hdspm_peak_rms hdspm_peak_rms_t;
enum hdspm_syncsource {syncsource_wc = 0x0,syncsource_madi = 0x1,syncsource_tco = 0x2,syncsource_sync = 0x3,syncsource_none = 0x4,};
struct i2o_cmd_passthru {unsigned int iop;void *msg;};
typedef struct _i2o_status_block i2o_status_block;
enum ip6t_reject_with {IP6T_ICMP6_NO_ROUTE = 0x0,IP6T_ICMP6_ADM_PROHIBITED = 0x1,IP6T_ICMP6_NOT_NEIGHBOUR = 0x2,IP6T_ICMP6_ADDR_UNREACH = 0x3,IP6T_ICMP6_PORT_UNREACH = 0x4,IP6T_ICMP6_ECHOREPLY = 0x5,IP6T_TCP_RESET = 0x6,};
enum ip_conntrack_dir {IP_CT_DIR_ORIGINAL = 0x0,IP_CT_DIR_REPLY = 0x1,IP_CT_DIR_MAX = 0x2,};
enum ipset_cadt_flags {IPSET_FLAG_BIT_BEFORE = 0x0,IPSET_FLAG_BEFORE = 0x1,IPSET_FLAG_BIT_PHYSDEV = 0x1,IPSET_FLAG_PHYSDEV = 0x2,IPSET_FLAG_BIT_NOMATCH = 0x2,IPSET_FLAG_NOMATCH = 0x4,IPSET_FLAG_BIT_WITH_COUNTERS = 0x3,IPSET_FLAG_WITH_COUNTERS = 0x8,IPSET_FLAG_CADT_MAX = 0xF,};
enum irda_nl_commands {IRDA_NL_CMD_UNSPEC = 0x0,IRDA_NL_CMD_SET_MODE = 0x1,IRDA_NL_CMD_GET_MODE = 0x2,__IRDA_NL_CMD_AFTER_LAST = 0x3,};
struct ivtvfb_dma_frame {void *source;unsigned __int64 dest_offset;int count;};
enum l2tp_l2spec_type {L2TP_L2SPECTYPE_NONE = 0x0,L2TP_L2SPECTYPE_DEFAULT = 0x1,};
enum matroxfb_ctrl_id {MATROXFB_CID_TESTOUT = 0x8000000,MATROXFB_CID_DEFLICKER = 0x8000001,MATROXFB_CID_LAST = 0x8000002,};
struct mdu_array_info_s {int major_version;int minor_version;int patch_version;int ctime;int level;int size;int nr_disks;int raid_disks;int md_minor;int not_persistent;int utime;int state;int active_disks;int working_disks;int failed_disks;int spare_disks;int layout;int chunk_size;};
typedef struct mdu_array_info_s mdu_array_info_t;
struct mdu_start_info_s {int major;int minor;int raid_disk;int state;};
typedef struct mdu_start_info_s mdu_start_info_t;
enum mpol_rebind_step {MPOL_REBIND_ONCE = 0x0,MPOL_REBIND_STEP1 = 0x1,MPOL_REBIND_STEP2 = 0x2,MPOL_REBIND_NSTEP = 0x3,};
typedef struct nand_ecclayout_user nand_ecclayout_t;
enum nfnetlink_groups {NFNLGRP_NONE = 0x0,NFNLGRP_CONNTRACK_NEW = 0x1,NFNLGRP_CONNTRACK_UPDATE = 0x2,NFNLGRP_CONNTRACK_DESTROY = 0x3,NFNLGRP_CONNTRACK_EXP_NEW = 0x4,NFNLGRP_CONNTRACK_EXP_UPDATE = 0x5,NFNLGRP_CONNTRACK_EXP_DESTROY = 0x6,__NFNLGRP_MAX = 0x7,};
enum nfs4_acl_whotype {NFS4_ACL_WHO_NAMED = 0x0,NFS4_ACL_WHO_OWNER = 0x1,NFS4_ACL_WHO_GROUP = 0x2,NFS4_ACL_WHO_EVERYONE = 0x3,};
enum nfulnl_attr_type {NFULA_UNSPEC = 0x0,NFULA_PACKET_HDR = 0x1,NFULA_MARK = 0x2,NFULA_TIMESTAMP = 0x3,NFULA_IFINDEX_INDEV = 0x4,NFULA_IFINDEX_OUTDEV = 0x5,NFULA_IFINDEX_PHYSINDEV = 0x6,NFULA_IFINDEX_PHYSOUTDEV = 0x7,NFULA_HWADDR = 0x8,NFULA_PAYLOAD = 0x9,NFULA_PREFIX = 0xA,NFULA_UID = 0xB,NFULA_SEQ = 0xC,NFULA_SEQ_GLOBAL = 0xD,NFULA_GID = 0xE,NFULA_HWTYPE = 0xF,NFULA_HWHEADER = 0x10,NFULA_HWLEN = 0x11,__NFULA_MAX = 0x12,};
enum nfulnl_msg_types {NFULNL_MSG_PACKET = 0x0,NFULNL_MSG_CONFIG = 0x1,NFULNL_MSG_MAX = 0x2,};
enum nubus_cpu_res_id {NUBUS_RESID_MEMINFO = 0x81,NUBUS_RESID_ROMINFO = 0x82,};
enum nubus_net_res_id {NUBUS_RESID_MAC_ADDRESS = 0x80,};
struct old_linux_dirent;
enum omap3isp_cfa_fmt {OMAP3ISP_CFAFMT_BAYER = 0x0,OMAP3ISP_CFAFMT_SONYVGA = 0x1,OMAP3ISP_CFAFMT_RGBFOVEON = 0x2,OMAP3ISP_CFAFMT_DNSPL = 0x3,OMAP3ISP_CFAFMT_HONEYCOMB = 0x4,OMAP3ISP_CFAFMT_RRGGBBFOVEON = 0x5,};
enum ovs_datapath_cmd {OVS_DP_CMD_UNSPEC = 0x0,OVS_DP_CMD_NEW = 0x1,OVS_DP_CMD_DEL = 0x2,OVS_DP_CMD_GET = 0x3,OVS_DP_CMD_SET = 0x4,};
enum proc_cn_mcast_op {PROC_CN_MCAST_LISTEN = 0x1,PROC_CN_MCAST_IGNORE = 0x2,};
enum proc_event__what {PROC_EVENT_NONE = 0x0,PROC_EVENT_FORK = 0x1,PROC_EVENT_EXEC = 0x2,PROC_EVENT_UID = 0x4,PROC_EVENT_GID = 0x40,PROC_EVENT_SID = 0x80,PROC_EVENT_PTRACE = 0x100,PROC_EVENT_COMM = 0x200,PROC_EVENT_COREDUMP = 0x40000000,PROC_EVENT_EXIT = 0x80000000,};
typedef union _AEC512E533A23DF0E4E7770B7D3B7341 pthread_rwlock_t;
enum rfkill_operation {RFKILL_OP_ADD = 0x0,RFKILL_OP_DEL = 0x1,RFKILL_OP_CHANGE = 0x2,RFKILL_OP_CHANGE_ALL = 0x3,};
enum rtnetlink_groups {RTNLGRP_NONE = 0x0,RTNLGRP_LINK = 0x1,RTNLGRP_NOTIFY = 0x2,RTNLGRP_NEIGH = 0x3,RTNLGRP_TC = 0x4,RTNLGRP_IPV4_IFADDR = 0x5,RTNLGRP_IPV4_MROUTE = 0x6,RTNLGRP_IPV4_ROUTE = 0x7,RTNLGRP_IPV4_RULE = 0x8,RTNLGRP_IPV6_IFADDR = 0x9,RTNLGRP_IPV6_MROUTE = 0xA,RTNLGRP_IPV6_ROUTE = 0xB,RTNLGRP_IPV6_IFINFO = 0xC,RTNLGRP_DECnet_IFADDR = 0xD,RTNLGRP_NOP2 = 0xE,RTNLGRP_DECnet_ROUTE = 0xF,RTNLGRP_DECnet_RULE = 0x10,RTNLGRP_NOP4 = 0x11,RTNLGRP_IPV6_PREFIX = 0x12,RTNLGRP_IPV6_RULE = 0x13,RTNLGRP_ND_USEROPT = 0x14,RTNLGRP_PHONET_IFADDR = 0x15,RTNLGRP_PHONET_ROUTE = 0x16,RTNLGRP_DCB = 0x17,RTNLGRP_IPV4_NETCONF = 0x18,RTNLGRP_IPV6_NETCONF = 0x19,RTNLGRP_MDB = 0x1A,__RTNLGRP_MAX = 0x1B,};
typedef union _CFB4FEE1CB4302FAF2C3A1BC0E8F3BDD sctp_cmsg_data_t;
enum sctp_sinfo_flags {SCTP_UNORDERED = 0x1,SCTP_ADDR_OVER = 0x2,SCTP_ABORT = 0x4,SCTP_SACK_IMMEDIATELY = 0x8,SCTP_EOF = 0x200,};
enum sctp_sstat_state {SCTP_EMPTY = 0x0,SCTP_CLOSED = 0x1,SCTP_COOKIE_WAIT = 0x2,SCTP_COOKIE_ECHOED = 0x3,SCTP_ESTABLISHED = 0x4,SCTP_SHUTDOWN_PENDING = 0x5,SCTP_SHUTDOWN_SENT = 0x6,SCTP_SHUTDOWN_RECEIVED = 0x7,SCTP_SHUTDOWN_ACK_SENT = 0x8,};
enum selinux_nlgroups {SELNLGRP_NONE = 0x0,SELNLGRP_AVC = 0x1,__SELNLGRP_MAX = 0x2,};
struct snd_dm_fm_params {unsigned __int8 am_depth;unsigned __int8 vib_depth;unsigned __int8 kbd_split;unsigned __int8 rhythm;unsigned __int8 bass;unsigned __int8 snare;unsigned __int8 tomtom;unsigned __int8 cymbal;unsigned __int8 hihat;};
typedef int snd_pcm_access_t;
typedef int snd_pcm_format_t;
struct snd_sb_csp_start {int sample_width;int channels;};
struct snd_seq_ev_raw32 {unsigned int d[3];};
struct snd_timer_params {unsigned int flags;unsigned int ticks;unsigned int queue_size;unsigned int reserved0;unsigned int filter;unsigned __int8 reserved[60];};
enum tcp_metric_index {TCP_METRIC_RTT = 0x0,TCP_METRIC_RTTVAR = 0x1,TCP_METRIC_SSTHRESH = 0x2,TCP_METRIC_CWND = 0x3,TCP_METRIC_REORDERING = 0x4,__TCP_METRIC_MAX = 0x5,};
enum usb_device_speed {USB_SPEED_UNKNOWN = 0x0,USB_SPEED_LOW = 0x1,USB_SPEED_FULL = 0x2,USB_SPEED_HIGH = 0x3,USB_SPEED_WIRELESS = 0x4,USB_SPEED_SUPER = 0x5,};
enum usb_device_state {USB_STATE_NOTATTACHED = 0x0,USB_STATE_ATTACHED = 0x1,USB_STATE_POWERED = 0x2,USB_STATE_RECONNECTING = 0x3,USB_STATE_UNAUTHENTICATED = 0x4,USB_STATE_DEFAULT = 0x5,USB_STATE_ADDRESS = 0x6,USB_STATE_CONFIGURED = 0x7,USB_STATE_SUSPENDED = 0x8,};
struct user_regs_struct {unsigned __int64 r15;unsigned __int64 r14;unsigned __int64 r13;unsigned __int64 r12;unsigned __int64 rbp;unsigned __int64 rbx;unsigned __int64 r11;unsigned __int64 r10;unsigned __int64 r9;unsigned __int64 r8;unsigned __int64 rax;unsigned __int64 rcx;unsigned __int64 rdx;unsigned __int64 rsi;unsigned __int64 rdi;unsigned __int64 orig_rax;unsigned __int64 rip;unsigned __int64 cs;unsigned __int64 eflags;unsigned __int64 rsp;unsigned __int64 ss;unsigned __int64 fs_base;unsigned __int64 gs_base;unsigned __int64 ds;unsigned __int64 es;unsigned __int64 fs;unsigned __int64 gs;};
enum v4l2_preemphasis {V4L2_PREEMPHASIS_DISABLED = 0x0,V4L2_PREEMPHASIS_50_uS = 0x1,V4L2_PREEMPHASIS_75_uS = 0x2,};
struct vhost_vring_file {unsigned int index;int fd;};
struct x25_calluserdata {unsigned int cudlength;unsigned __int8 cuddata[128];};
typedef struct _0A270F69B196F9EFA6F2CD4624EE5655 xAllocColorReply;
typedef struct _67BA815F7CB0308CE8EF90A300D23A50 xBellFeedbackCtl;
typedef struct _10184D3025615BB97A779285FBA6EAF5 xBigReqEnableReq;
typedef struct _D60B59C14E4F896E4A7591EB7765B14B xConnSetupPrefix;
typedef struct _6FB552EA524F38554FA8528F506D34FD xCreateCursorReq;
typedef struct _1F1AC3FACFBF0931A43D0CD999C4D927 xCreatePixmapReq;
typedef struct _F5EF5DA862DE88FCCA82FCE0F474E907 xCreateWindowReq;
typedef struct _395B269B2EB9353EDAC9E4036758953F xDMXAddScreenReq;
typedef struct _19FC7662DCA21D9E3B89E1DCC09F0A20 xDRI2GetParamReq;
typedef struct _B366CC5B56440B0B1B4971EDF28ED7EF xDamageCreateReq;
typedef struct _CF3111049F55256272BC67C062EAE4FA xDeviceCoreState;
typedef struct _A7F49BCAD2F54790AC5A5BD9DFF19382 xDeviceEnableCtl;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xGrabDeviceReply;
typedef struct _94FA839E2A2E2CDB2FF04022E6E0CAA1 xGrabKeyboardReq;
typedef struct _FA4FE0B2CA883E06053CBA1706060353 xInternAtomReply;
typedef struct _LbxCopyPlane xLbxCopyPlaneReq;
typedef struct _LbxImageText xLbxImageTextReq;
typedef struct _LbxNewClient xLbxNewClientReq;
typedef struct _LbxPolyPoint xLbxPolyPointReq;
typedef struct _LbxQueryFont xLbxQueryFontReq;
typedef struct _LbxStopProxy xLbxStopProxyReq;
typedef struct _80262239D5DEFAC7F5C75EBAC6CCD93C xOpenDeviceReply;
typedef struct _097BEF8EA5AD56087B71A05CBB409B26 xRRCreateModeReq;
typedef struct _6C1CA9801472DA3CC516BCC310DA8AB0 xRRGetPanningReq;
typedef struct _649615F18ACD2676C0117F64906D4BB8 xRRSetPanningReq;
typedef struct _B1F3B1E8AC6C76EBFB982A13A87B6D55 xRenderTransform;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTriFanReq;
typedef struct _FE8C559F4B68F5A3A5D9DBCE5E9919CF xSetMappingReply;
typedef struct _ShapeCombine xShapeCombineReq;
typedef struct _3369594E17BD6DC3517892D04DD0216E xTestGetInputReq;
typedef struct _37A9DB4B311662424B6FA129E06762F1 xUngrabButtonReq;
typedef struct _F57445CCAF99E2554B974CAECD301767 xUngrabDeviceReq;
typedef struct _xValuatorInfo *xValuatorInfoPtr;
typedef struct _XDGACopyArea xXDGACopyAreaReq;
typedef struct _A78B9460B3A970BB806E84788697D919 xXIAddMasterInfo;
typedef struct _8B5E934A02E5303CBD075C3822A8790B xXIGetFocusReply;
typedef struct _9299B18999A9011A0F23F2925A47CC5A xXIGrabDeviceReq;
typedef struct _F7503CDF5949AE94D9EE93F1613B3477 xXIHierarchyInfo;
typedef struct _3C0F511821AED167BDBDCCDEFF5867E2 xXIPropertyEvent;
typedef struct _A27C0735E8A7EB8595B640D9B7BEF349 xXagGetAttrReply;
typedef struct _322E4D740D2A723112F8227414848916 xXevieStartReply;
typedef xcb_value_error_t xcb_atom_error_t;
enum xcb_close_down_t {XCB_CLOSE_DOWN_DESTROY_ALL = 0x0,XCB_CLOSE_DOWN_RETAIN_PERMANENT = 0x1,XCB_CLOSE_DOWN_RETAIN_TEMPORARY = 0x2,};
enum xcb_color_flag_t {XCB_COLOR_FLAG_RED = 0x1,XCB_COLOR_FLAG_GREEN = 0x2,XCB_COLOR_FLAG_BLUE = 0x4,};
struct xcb_connection_t;
enum xcb_coord_mode_t {XCB_COORD_MODE_ORIGIN = 0x0,XCB_COORD_MODE_PREVIOUS = 0x1,};
enum xcb_event_mask_t {XCB_EVENT_MASK_NO_EVENT = 0x0,XCB_EVENT_MASK_KEY_PRESS = 0x1,XCB_EVENT_MASK_KEY_RELEASE = 0x2,XCB_EVENT_MASK_BUTTON_PRESS = 0x4,XCB_EVENT_MASK_BUTTON_RELEASE = 0x8,XCB_EVENT_MASK_ENTER_WINDOW = 0x10,XCB_EVENT_MASK_LEAVE_WINDOW = 0x20,XCB_EVENT_MASK_POINTER_MOTION = 0x40,XCB_EVENT_MASK_POINTER_MOTION_HINT = 0x80,XCB_EVENT_MASK_BUTTON_1_MOTION = 0x100,XCB_EVENT_MASK_BUTTON_2_MOTION = 0x200,XCB_EVENT_MASK_BUTTON_3_MOTION = 0x400,XCB_EVENT_MASK_BUTTON_4_MOTION = 0x800,XCB_EVENT_MASK_BUTTON_5_MOTION = 0x1000,XCB_EVENT_MASK_BUTTON_MOTION = 0x2000,XCB_EVENT_MASK_KEYMAP_STATE = 0x4000,XCB_EVENT_MASK_EXPOSURE = 0x8000,XCB_EVENT_MASK_VISIBILITY_CHANGE = 0x10000,XCB_EVENT_MASK_STRUCTURE_NOTIFY = 0x20000,XCB_EVENT_MASK_RESIZE_REDIRECT = 0x40000,XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY = 0x80000,XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT = 0x100000,XCB_EVENT_MASK_FOCUS_CHANGE = 0x200000,XCB_EVENT_MASK_PROPERTY_CHANGE = 0x400000,XCB_EVENT_MASK_COLOR_MAP_CHANGE = 0x800000,XCB_EVENT_MASK_OWNER_GRAB_BUTTON = 0x1000000,};
enum xcb_fill_style_t {XCB_FILL_STYLE_SOLID = 0x0,XCB_FILL_STYLE_TILED = 0x1,XCB_FILL_STYLE_STIPPLED = 0x2,XCB_FILL_STYLE_OPAQUE_STIPPLED = 0x3,};
typedef xcb_value_error_t xcb_font_error_t;
enum xcb_join_style_t {XCB_JOIN_STYLE_MITER = 0x0,XCB_JOIN_STYLE_ROUND = 0x1,XCB_JOIN_STYLE_BEVEL = 0x2,};
enum xcb_line_style_t {XCB_LINE_STYLE_SOLID = 0x0,XCB_LINE_STYLE_ON_OFF_DASH = 0x1,XCB_LINE_STYLE_DOUBLE_DASH = 0x2,};
typedef xcb_request_error_t xcb_name_error_t;
enum xcb_poly_shape_t {XCB_POLY_SHAPE_COMPLEX = 0x0,XCB_POLY_SHAPE_NONCONVEX = 0x1,XCB_POLY_SHAPE_CONVEX = 0x2,};
enum xcb_stack_mode_t {XCB_STACK_MODE_ABOVE = 0x0,XCB_STACK_MODE_BELOW = 0x1,XCB_STACK_MODE_TOP_IF = 0x2,XCB_STACK_MODE_BOTTOM_IF = 0x3,XCB_STACK_MODE_OPPOSITE = 0x4,};
enum xcb_visibility_t {XCB_VISIBILITY_UNOBSCURED = 0x0,XCB_VISIBILITY_PARTIALLY_OBSCURED = 0x1,XCB_VISIBILITY_FULLY_OBSCURED = 0x2,};
enum xcb_xkb_groups_t {XCB_XKB_GROUPS_ANY = 0xFE,XCB_XKB_GROUPS_ALL = 0xFF,};
enum xfrm_attr_type_t {XFRMA_UNSPEC = 0x0,XFRMA_ALG_AUTH = 0x1,XFRMA_ALG_CRYPT = 0x2,XFRMA_ALG_COMP = 0x3,XFRMA_ENCAP = 0x4,XFRMA_TMPL = 0x5,XFRMA_SA = 0x6,XFRMA_POLICY = 0x7,XFRMA_SEC_CTX = 0x8,XFRMA_LTIME_VAL = 0x9,XFRMA_REPLAY_VAL = 0xA,XFRMA_REPLAY_THRESH = 0xB,XFRMA_ETIMER_THRESH = 0xC,XFRMA_SRCADDR = 0xD,XFRMA_COADDR = 0xE,XFRMA_LASTUSED = 0xF,XFRMA_POLICY_TYPE = 0x10,XFRMA_MIGRATE = 0x11,XFRMA_ALG_AEAD = 0x12,XFRMA_KMADDRESS = 0x13,XFRMA_ALG_AUTH_TRUNC = 0x14,XFRMA_MARK = 0x15,XFRMA_TFCPAD = 0x16,XFRMA_REPLAY_ESN_VAL = 0x17,XFRMA_SA_EXTRA_FLAGS = 0x18,__XFRMA_MAX = 0x19,};
typedef struct _xkbAccessXNotify xkbAccessXNotify;
typedef struct _xkbActionMessage xkbActionMessage;
typedef struct _xkbGetNamesReply xkbGetNamesReply;
typedef struct _xkbGetStateReply xkbGetStateReply;
typedef struct _xkbPointWireDesc xkbPointWireDesc;
typedef struct _xkbShapeWireDesc xkbShapeWireDesc;
enum xt_cluster_flags {XT_CLUSTER_F_INV = 0x1,};
enum xt_osf_attr_type {OSF_ATTR_UNSPEC = 0x0,OSF_ATTR_FINGER = 0x1,OSF_ATTR_MAX = 0x2,};
enum xt_osf_msg_types {OSF_MSG_ADD = 0x0,OSF_MSG_REMOVE = 0x1,OSF_MSG_MAX = 0x2,};
typedef struct _1309DA1401AD871232334AF15910FB3C xvShmPutImageReq;
typedef struct _DF2660A74F633C8EB56A7225DE8125F3 xvmcGetDRInfoReq;
typedef struct Dwarf_Attribute_s *Dwarf_Attribute;
typedef struct _D32AD62C57B9AFC5935156850A4EC9F1 Dwarf_Frame_Op3;
typedef struct Dwarf_Regtable3_s Dwarf_Regtable3;
typedef struct _FPEFunctions FPEFunctionsRec;
enum MACRO_ADB_QUERY {ADB_QUERY = 7,ADB_QUERY_GETDEVINFO = 1,};
enum MACRO_ADVERTISE {ADVERTISE_SLCT = 0x1F,ADVERTISE_CSMA = 0x1,ADVERTISE_10HALF = 0x20,ADVERTISE_1000XFULL = 0x20,ADVERTISE_10FULL = 0x40,ADVERTISE_1000XHALF = 0x40,ADVERTISE_100HALF = 0x80,ADVERTISE_1000XPAUSE = 0x80,ADVERTISE_100FULL = 0x100,ADVERTISE_1000XPSE_ASYM = 0x100,ADVERTISE_100BASE4 = 0x200,ADVERTISE_PAUSE_CAP = 0x400,ADVERTISE_PAUSE_ASYM = 0x800,ADVERTISE_RESV = 0x1000,ADVERTISE_RFAULT = 0x2000,ADVERTISE_LPACK = 0x4000,ADVERTISE_NPAGE = 0x8000,ADVERTISE_FULL = 0x141,ADVERTISE_ALL = 0x1E0,};
enum MACRO_ARM_EXIDX {PT_ARM_EXIDX = 1879048193,SHT_ARM_EXIDX = 1879048193,};
enum MACRO_ATTR_NONE {ATTR_NONE = 0,ATTR_RO = 1,ATTR_HIDDEN = 2,ATTR_SYS = 4,ATTR_VOLUME = 8,ATTR_DIR = 16,ATTR_ARCH = 32,ATTR_UNUSED = 46,ATTR_EXT = 15,};
enum MACRO_AT_HWCAP2 {AT_HWCAP2 = 26,};
enum MACRO_AT_VECTOR {AT_VECTOR_SIZE_ARCH = 2,};
enum MACRO_AUTH_NONE {AUTH_NONE = 0,AUTH_NULL = 0,AUTH_SYS = 1,AUTH_UNIX = 1,AUTH_SHORT = 2,AUTH_DES = 3,AUTH_DH = 3,AUTH_KERB = 4,};
enum MACRO_AddToList {AddToList = 0,DeleteFromList = 1,};
enum MACRO_AllPlanes {AllPlanes = -1,};
enum MACRO_AllValues {AllValues = 0xF,XNegative = 0x10,YNegative = 0x20,};
enum MACRO_AllocNone {AllocNone = 0,AllocAll = 1,};
enum MACRO_AnyButton {AnyButton = 0,};
enum MACRO_AsyncBoth {AsyncBoth = 6,};
enum MACRO_BAYCOMCTL {BAYCOMCTL_GETDEBUG = 0x92,};
enum MACRO_BLKFLSBUF {BLKFLSBUF = 0x1261,};
enum MACRO_BLKFRAGET {BLKFRAGET = 0x1265,};
enum MACRO_BLKFRASET {BLKFRASET = 0x1264,};
enum MACRO_BLKPG_ADD {BLKPG_ADD_PARTITION = 1,BLKPG_DEL_PARTITION = 2,BLKPG_RESIZE_PARTITION = 3,BLKPG_DEVNAMELTH = 64,BLKPG_VOLNAMELTH = 64,};
enum MACRO_BLKRRPART {BLKRRPART = 0x125F,};
enum MACRO_BLKSSZGET {BLKSSZGET = 0x1268,};
enum MACRO_BOOLCOUNT {BOOLCOUNT = 44,};
enum MACRO_BOOLWRITE {BOOLWRITE = 37,};
enum MACRO_BadAccess {BadAccess = 10,};
enum MACRO_BadCursor {BadCursor = 6,};
enum MACRO_BadDamage {BadDamage = 0,XDamageNumberErrors = 1,};
enum MACRO_BadRegion {BadRegion = 0,BadBarrier = 1,XFixesNumberErrors = 2,};
enum MACRO_BadShmSeg {BadShmSeg = 0,ShmNumberErrors = 1,};
enum MACRO_BadWindow {BadWindow = 3,BadPixmap = 4,};
enum MACRO_CANCELLED {CANCELLED_BOOLEAN = -2,CANCELLED_NUMERIC = -2,CANCELLED_STRING = -1,};
enum MACRO_CDROMSEEK {CDROMSEEK = 0x5316,};
enum MACRO_CDROMSTOP {CDROMSTOP = 0x5307,};
enum MACRO_CDROM_LBA {CDROM_LBA = 0x1,CDROM_MSF = 0x2,CDROM_DATA_TRACK = 0x4,CDROM_LEADOUT = 0xAA,CDROM_AUDIO_INVALID = 0x0,CDROM_AUDIO_PLAY = 0x11,CDROM_AUDIO_PAUSED = 0x12,CDROM_AUDIO_COMPLETED = 0x13,CDROM_AUDIO_ERROR = 0x14,CDROM_AUDIO_NO_STATUS = 0x15,};
enum MACRO_CDROM_SET {CDROM_SET_OPTIONS = 0x5320,CDROM_CLEAR_OPTIONS = 0x5321,CDROM_SELECT_SPEED = 0x5322,CDROM_SELECT_DISC = 0x5323,CDROM_MEDIA_CHANGED = 0x5325,CDROM_DRIVE_STATUS = 0x5326,CDROM_DISC_STATUS = 0x5327,CDROM_CHANGER_NSLOTS = 0x5328,CDROM_LOCKDOOR = 0x5329,CDROM_DEBUG = 0x5330,CDROM_GET_CAPABILITY = 0x5331,};
enum MACRO_CLSET_SVC {CLSET_SVC_ADDR = 16,CLSET_PUSH_TIMOD = 17,CLSET_POP_TIMOD = 18,CLSET_RETRY_TIMEOUT = 4,};
enum MACRO_CLUSTERIP {CLUSTERIP_MAX_NODES = 16,CLUSTERIP_FLAG_NEW = 1,};
enum MACRO_COMPOSITE {COMPOSITE_MAJOR = 0,COMPOSITE_MINOR = 4,};
enum MACRO_CON2FBMAP {FBIOGET_CON2FBMAP = 0x460F,FBIOPUT_CON2FBMAP = 0x4610,};
enum MACRO_CONDITION {CONDITION_GOOD = 0x2,};
enum MACRO_CONNECTOR {CONNECTOR_MAX_MSG_SIZE = 16384,};
enum MACRO_CONTAINER {CONTAINER_ID_TYPE = 4,};
enum MACRO_CPLastBit {CPLastBit = 12,};
enum MACRO_CPUSTATES {CPUSTATES = 4,};
enum MACRO_CUDA_WARM {CUDA_WARM_START = 0,CUDA_AUTOPOLL = 1,CUDA_GET_6805_ADDR = 2,CUDA_GET_TIME = 3,CUDA_GET_PRAM = 7,CUDA_SET_6805_ADDR = 8,CUDA_SET_TIME = 9,CUDA_POWERDOWN = 10,CUDA_POWERUP_TIME = 11,CUDA_SET_PRAM = 12,CUDA_MS_RESET = 13,CUDA_SEND_DFAC = 14,CUDA_RESET_SYSTEM = 17,CUDA_SET_IPL = 18,CUDA_SET_AUTO_RATE = 20,CUDA_GET_AUTO_RATE = 22,CUDA_SET_DEVICE_LIST = 25,CUDA_GET_DEVICE_LIST = 26,CUDA_GET_SET_IIC = 34,};
enum MACRO_CUSE_INIT {CUSE_INIT_INFO_MAX = 4096,};
enum MACRO_CYGETWAIT {CYGETWAIT = 0x435913,};
enum MACRO_CYSETWAIT {CYSETWAIT = 0x435912,};
enum MACRO_DNBUFSIZE {DNBUFSIZE = 65023,};
enum MACRO_DTV_IOCTL {DTV_IOCTL_MAX_MSGS = 64,};
enum MACRO_DvInteger {DvInteger = 1,};
enum MACRO_EBT_AMONG {EBT_AMONG_DST = 0x1,EBT_AMONG_SRC = 0x2,EBT_AMONG_DST_NEG = 0x1,EBT_AMONG_SRC_NEG = 0x2,EBT_ARP_OPCODE = 0x1,EBT_ARP_HTYPE = 0x2,EBT_ARP_PTYPE = 0x4,EBT_ARP_SRC_IP = 0x8,EBT_ARP_DST_IP = 0x10,EBT_ARP_SRC_MAC = 0x20,EBT_ARP_DST_MAC = 0x40,EBT_ARP_GRAT = 0x80,EBT_ARP_MASK = 0xFF,EBT_IP6_SOURCE = 0x1,EBT_IP6_DEST = 0x2,EBT_IP6_TCLASS = 0x4,EBT_IP6_PROTO = 0x8,EBT_IP6_SPORT = 0x10,EBT_IP6_DPORT = 0x20,EBT_IP6_ICMP6 = 0x40,EBT_IP6_MASK = 0x7F,EBT_IP_SOURCE = 0x1,EBT_IP_DEST = 0x2,EBT_IP_TOS = 0x4,EBT_IP_PROTO = 0x8,EBT_IP_SPORT = 0x10,EBT_IP_DPORT = 0x20,EBT_IP_MASK = 0x3F,EBT_LIMIT_SCALE = 0x2710,EBT_LOG_IP = 0x1,EBT_LOG_ARP = 0x2,EBT_LOG_NFLOG = 0x4,EBT_LOG_IP6 = 0x8,EBT_LOG_MASK = 0xB,EBT_LOG_PREFIX_SIZE = 0x1E,EBT_MARK_AND = 0x1,EBT_MARK_OR = 0x2,EBT_MARK_MASK = 0x3,};
enum MACRO_EBT_NFLOG {EBT_NFLOG_MASK = 0x0,EBT_NFLOG_PREFIX_SIZE = 0x40,EBT_NFLOG_DEFAULT_GROUP = 0x1,EBT_NFLOG_DEFAULT_THRESHOLD = 0x1,EBT_STP_TYPE = 0x1,EBT_STP_FLAGS = 0x2,EBT_STP_ROOTPRIO = 0x4,EBT_STP_ROOTADDR = 0x8,EBT_STP_ROOTCOST = 0x10,EBT_STP_SENDERPRIO = 0x20,EBT_STP_SENDERADDR = 0x40,EBT_STP_PORT = 0x80,EBT_STP_MSGAGE = 0x100,EBT_STP_MAXAGE = 0x200,EBT_STP_HELLOTIME = 0x400,EBT_STP_FWDD = 0x800,EBT_STP_MASK = 0xFFF,EBT_STP_CONFIG_MASK = 0xFFE,EBT_VLAN_ID = 0x1,EBT_VLAN_PRIO = 0x2,EBT_VLAN_ENCAP = 0x4,EBT_VLAN_MASK = 0x7,};
enum MACRO_EDDMAGIC1 {EDDMAGIC1 = 0x55AA,EDDMAGIC2 = 0xAA55,};
enum MACRO_EF_PARISC {EF_PARISC_TRAPNIL = 0x10000,EF_PARISC_EXT = 0x20000,EF_PARISC_LSB = 0x40000,EF_PARISC_WIDE = 0x80000,EF_PARISC_NO_KABP = 0x100000,EF_PARISC_LAZYSWAP = 0x400000,EF_PARISC_ARCH = 0xFFFF,};
enum MACRO_ELF_OSABI {ELF_OSABI = 0,};
enum MACRO_EOF_FAT12 {EOF_FAT12 = 0xFFF,EOF_FAT16 = 0xFFFF,EOF_FAT32 = 0xFFFFFFF,};
enum MACRO_ERR_BOARD {ERR_BOARD_DPRAM = 1002,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_SPRITE = 0x500,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_REVARP = 0x8035,ETHERTYPE_AT = 0x809B,ETHERTYPE_AARP = 0x80F3,ETHERTYPE_VLAN = 0x8100,ETHERTYPE_IPX = 0x8137,ETHERTYPE_IPV6 = 0x86DD,ETHERTYPE_LOOPBACK = 0x9000,};
enum MACRO_EXPANSION {EXPANSION_NWAY = 0x1,EXPANSION_LCWP = 0x2,EXPANSION_ENABLENPAGE = 0x4,EXPANSION_NPCAPABLE = 0x8,EXPANSION_MFAULTS = 0x10,EXPANSION_RESV = 0xFFE0,};
enum MACRO_FAN_ALLOW {FAN_ALLOW = 0x1,FAN_DENY = 0x2,FAN_NOFD = 0xFFFFFFFF,};
enum MACRO_FAT_START {FAT_START_ENT = 2,};
enum MACRO_FBIOBLANK {FBIOBLANK = 0x4611,};
enum MACRO_FB_VBLANK {FB_VBLANK_VBLANKING = 0x1,FB_VBLANK_HBLANKING = 0x2,FB_VBLANK_HAVE_VBLANK = 0x4,FB_VBLANK_HAVE_HBLANK = 0x8,FB_VBLANK_HAVE_COUNT = 0x10,FB_VBLANK_HAVE_VCOUNT = 0x20,FB_VBLANK_HAVE_HCOUNT = 0x40,FB_VBLANK_VSYNCING = 0x80,FB_VBLANK_HAVE_VSYNC = 0x100,};
enum MACRO_FDTWADDLE {FDTWADDLE = 601,};
enum MACRO_FD_BROKEN {FD_BROKEN_DCL = 0x20,FD_DEBUG = 0x2,FD_SILENT_DCL_CLEAR = 0x4,FD_INVERTED_DCL = 0x80,};
enum MACRO_FD_DRIVER {FD_DRIVER_VERSION = 0x100,};
enum MACRO_FD_IOPORT {FD_IOPORT = 0x3F0,FD_STATUS = 0x3F4,FD_DATA = 0x3F5,FD_DOR = 0x3F2,FD_DIR = 0x3F7,FD_DCR = 0x3F7,};
enum MACRO_FIOGETOWN {FIOGETOWN = 0x8903,};
enum MACRO_FIOSETOWN {FIOSETOWN = 0x8901,};
enum MACRO_FLAT_FLAG {FLAT_FLAG_RAM = 0x1,FLAT_FLAG_GOTPIC = 0x2,FLAT_FLAG_GZIP = 0x4,FLAT_FLAG_GZDATA = 0x8,FLAT_FLAG_KTRACE = 0x10,};
enum MACRO_FLOW_CTRL {FLOW_CTRL_TX = 0x1,FLOW_CTRL_RX = 0x2,};
enum MACRO_FNONBLOCK {FNONBLOCK = 2048,};
enum MACRO_FP_ILOGB0 {FP_ILOGB0 = -2147483648,FP_ILOGBNAN = -2147483648,};
enum MACRO_FSBadName {FSBadName = 7,FSBadResolution = 8,};
enum MACRO_FSSuccess {FSSuccess = -1,};
enum MACRO_FUNCPROTO {FUNCPROTO = 15,};
enum MACRO_F_GETLK64 {F_GETLK64 = 5,F_SETLK64 = 6,F_SETLKW64 = 7,};
enum MACRO_FillSolid {FillSolid = 0,FillTiled = 1,FillStippled = 2,};
enum MACRO_GCLastBit {GCLastBit = 22,};
enum MACRO_HDLC_FLAG {HDLC_FLAG_UNDERRUN_ABORT7 = 0x0,HDLC_FLAG_UNDERRUN_ABORT15 = 0x1,HDLC_FLAG_UNDERRUN_FLAG = 0x2,HDLC_FLAG_UNDERRUN_CRC = 0x4,HDLC_FLAG_SHARE_ZERO = 0x10,HDLC_FLAG_AUTO_CTS = 0x20,HDLC_FLAG_AUTO_DCD = 0x40,HDLC_FLAG_AUTO_RTS = 0x80,HDLC_FLAG_RXC_DPLL = 0x100,HDLC_FLAG_RXC_BRG = 0x200,HDLC_FLAG_RXC_TXCPIN = 0x8000,HDLC_FLAG_RXC_RXCPIN = 0x0,HDLC_FLAG_TXC_DPLL = 0x400,HDLC_FLAG_TXC_BRG = 0x800,HDLC_FLAG_TXC_TXCPIN = 0x0,HDLC_FLAG_TXC_RXCPIN = 0x8,HDLC_FLAG_DPLL_DIV8 = 0x1000,HDLC_FLAG_DPLL_DIV16 = 0x2000,HDLC_FLAG_DPLL_DIV32 = 0x0,HDLC_FLAG_HDLC_LOOPMODE = 0x4000,HDLC_CRC_NONE = 0x0,HDLC_CRC_16_CCITT = 0x1,HDLC_CRC_32_CCITT = 0x2,HDLC_CRC_MASK = 0xFF,HDLC_CRC_RETURN_EX = 0x8000,};
enum MACRO_ICMP6_DST {ICMP6_DST_UNREACH_NOROUTE = 0,ICMP6_DST_UNREACH_ADMIN = 1,ICMP6_DST_UNREACH_BEYONDSCOPE = 2,ICMP6_DST_UNREACH_ADDR = 3,ICMP6_DST_UNREACH_NOPORT = 4,ICMP6_TIME_EXCEED_TRANSIT = 0,ICMP6_TIME_EXCEED_REASSEMBLY = 1,ICMP6_PARAMPROB_HEADER = 0,ICMP6_PARAMPROB_NEXTHEADER = 1,ICMP6_PARAMPROB_OPTION = 2,};
enum MACRO_INITIATOR {INITIATOR_ERROR = 0x5,};
enum MACRO_INT_FAST8 {INT_FAST8_MIN = -128,INT_FAST16_MIN = -9223372036854775808,INT_FAST32_MIN = -9223372036854775808,INT_FAST64_MIN = -9223372036854775808,INT_FAST8_MAX = 127,INT_FAST16_MAX = 9223372036854775807,INT_FAST32_MAX = 9223372036854775807,INT_FAST64_MAX = 9223372036854775807,};
enum MACRO_IN_ACCESS {IN_ACCESS = 0x1,IN_MODIFY = 0x2,IN_ATTRIB = 0x4,IN_CLOSE_WRITE = 0x8,IN_CLOSE_NOWRITE = 0x10,IN_CLOSE = 0x18,IN_OPEN = 0x20,IN_MOVED_FROM = 0x40,IN_MOVED_TO = 0x80,IN_MOVE = 0xC0,IN_CREATE = 0x100,IN_DELETE = 0x200,IN_DELETE_SELF = 0x400,IN_MOVE_SELF = 0x800,IN_UNMOUNT = 0x2000,IN_Q_OVERFLOW = 0x4000,IN_IGNORED = 0x8000,IN_ONLYDIR = 0x1000000,IN_DONT_FOLLOW = 0x2000000,IN_EXCL_UNLINK = 0x4000000,IN_MASK_ADD = 0x20000000,IN_ISDIR = 0x40000000,IN_ONESHOT = 0x80000000,IN_ALL_EVENTS = 0xFFF,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 60,};
enum MACRO_IPSET_SRC {IPSET_SRC = 0x1,IPSET_DST = 0x2,IPSET_MATCH_INV = 0x4,};
enum MACRO_IPVERSION {IPVERSION = 4,};
enum MACRO_IP_ROUTER {IP_ROUTER_ALERT = 5,IP_PKTINFO = 8,IP_PKTOPTIONS = 9,IP_PMTUDISC = 10,IP_MTU_DISCOVER = 10,IP_RECVERR = 11,IP_RECVTTL = 12,IP_RECVTOS = 13,IP_MTU = 14,IP_FREEBIND = 15,IP_IPSEC_POLICY = 16,IP_XFRM_POLICY = 17,IP_PASSSEC = 18,IP_TRANSPARENT = 19,IP_ORIGDSTADDR = 20,IP_RECVORIGDSTADDR = 20,IP_MINTTL = 21,IP_PMTUDISC_DONT = 0,IP_PMTUDISC_WANT = 1,IP_PMTUDISC_DO = 2,IP_PMTUDISC_PROBE = 3,};
enum MACRO_IREQUESTS {IREQUESTS = 39,};
enum MACRO_InputHint {InputHint = 1,StateHint = 2,IconPixmapHint = 4,IconWindowHint = 8,IconPositionHint = 16,IconMaskHint = 32,WindowGroupHint = 64,};
enum MACRO_JoinMiter {JoinMiter = 0,JoinRound = 1,JoinBevel = 2,};
enum MACRO_KDDISABIO {KDDISABIO = 0x4B37,};
enum MACRO_KDGETMODE {KDGETMODE = 0x4B3B,};
enum MACRO_KDGKBMETA {KDGKBMETA = 0x4B62,};
enum MACRO_KDGKBMODE {KDGKBMODE = 0x4B44,};
enum MACRO_KDGKBSENT {KDGKBSENT = 0x4B48,};
enum MACRO_KDGKBTYPE {KDGKBTYPE = 0x4B33,};
enum MACRO_KDMAPDISP {KDMAPDISP = 0x4B3C,};
enum MACRO_KDSETMODE {KDSETMODE = 0x4B3A,};
enum MACRO_KDSKBMETA {KDSKBMETA = 0x4B63,};
enum MACRO_KDSKBMODE {KDSKBMODE = 0x4B45,};
enum MACRO_KDSKBSENT {KDSKBSENT = 0x4B49,};
enum MACRO_KIOCSOUND {KIOCSOUND = 0x4B2F,};
enum MACRO_KVM_STEAL {KVM_STEAL_ALIGNMENT_BITS = 5,KVM_STEAL_VALID_BITS = -64,KVM_STEAL_RESERVED_MASK = 62,KVM_MAX_MMU_OP_BATCH = 32,KVM_ASYNC_PF_ENABLED = 1,KVM_ASYNC_PF_SEND_ALWAYS = 2,KVM_MMU_OP_WRITE_PTE = 1,KVM_MMU_OP_FLUSH_TLB = 2,KVM_MMU_OP_RELEASE_PT = 3,KVM_PV_REASON_PAGE_NOT_PRESENT = 1,KVM_PV_REASON_PAGE_READY = 2,KVM_PV_EOI_BIT = 0,KVM_PV_EOI_MASK = 1,KVM_PV_EOI_ENABLED = 1,KVM_PV_EOI_DISABLED = 0,};
enum MACRO_K_METABIT {K_METABIT = 0x3,K_ESCPREFIX = 0x4,};
enum MACRO_K_NORMTAB {K_NORMTAB = 0x0,K_SHIFTTAB = 0x1,K_ALTTAB = 0x2,K_ALTSHIFTTAB = 0x3,};
enum MACRO_KeepAlive {KeepAlive = 0,CatalogueChangeNotify = 1,FontChangeNotify = 2,};
enum MACRO_LARGEFILE {_LFS_LARGEFILE = 1,_LFS64_LARGEFILE = 1,};
enum MACRO_LASTEvent {LASTEvent = 36,};
enum MACRO_LBX_SMART {LBX_SMART_GRAB = 0x80,LBX_AUTO_RELEASE = 0x40,LBX_3CHANNELS = 0x20,LBX_2BYTE_PIXELS = 0x10,LBX_RGB_BITS_MASK = 0xF,LBX_LIST_END = 0x0,LBX_PIXEL_PRIVATE = 0x1,LBX_PIXEL_SHARED = 0x2,LBX_PIXEL_RANGE_PRIVATE = 0x3,LBX_PIXEL_RANGE_SHARED = 0x4,LBX_NEXT_CHANNEL = 0x5,};
enum MACRO_LBX_WIDTH {LBX_WIDTH_SHIFT = 26,LBX_LEFT_SHIFT = 20,LBX_RIGHT_SHIFT = 13,LBX_ASCENT_SHIFT = 7,LBX_DESCENT_SHIFT = 0,LBX_WIDTH_BITS = 6,LBX_LEFT_BITS = 6,LBX_RIGHT_BITS = 7,LBX_ASCENT_BITS = 6,LBX_DESCENT_BITS = 7,LBX_WIDTH_MASK = -67108864,LBX_LEFT_MASK = 66060288,LBX_RIGHT_MASK = 1040384,LBX_ASCENT_MASK = 8064,LBX_DESCENT_MASK = 127,};
enum MACRO_LEVEL2LUN {LEVEL2LUN = 1,};
enum MACRO_LEVEL3LUN {LEVEL3LUN = 0,};
enum MACRO_LOG_EMERG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,LOG_PRIMASK = 7,LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_AUTHPRIV = 80,LOG_FTP = 88,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,LOG_NFACILITIES = 24,LOG_FACMASK = 1016,LOG_PID = 1,LOG_CONS = 2,LOG_ODELAY = 4,LOG_NDELAY = 8,LOG_NOWAIT = 16,LOG_PERROR = 32,};
enum MACRO_LPCAREFUL {LPCAREFUL = 0x609,};
enum MACRO_L_ctermid {L_ctermid = 9,L_cuserid = 9,};
enum MACRO_LineSolid {LineSolid = 0,LineOnOffDash = 1,LineDoubleDash = 2,};
enum MACRO_MADV_SOFT {MADV_SOFT_OFFLINE = 101,};
enum MACRO_MAXDNSRCH {MAXDNSRCH = 6,};
enum MACRO_MAXNAMLEN {MAXNAMLEN = 255,};
enum MACRO_MAXQUOTAS {MAXQUOTAS = 2,};
enum MACRO_MAX_ASYNC {MAX_ASYNC_TRANSMIT = 4096,MAX_ASYNC_BUFFER_SIZE = 4096,};
enum MACRO_MAX_BOARD {MAX_BOARD = 4,MAX_DEV = 256,};
enum MACRO_MAX_CANON {MAX_CANON = 255,MAX_INPUT = 255,};
enum MACRO_MAX_DIACR {MAX_DIACR = 256,};
enum MACRO_MAX_ERASE {MAX_ERASE_ZONES = 7680,};
enum MACRO_MAX_FAT12 {MAX_FAT12 = 0xFF4,MAX_FAT16 = 0xFFF4,MAX_FAT32 = 0xFFFFFF6,};
enum MACRO_MAX_LINKS {MAX_LINKS = 32,};
enum MACRO_MICROGATE {MICROGATE_VENDOR_ID = 0x13C0,SYNCLINK_DEVICE_ID = 0x10,MGSCC_DEVICE_ID = 0x20,SYNCLINK_SCA_DEVICE_ID = 0x30,SYNCLINK_GT_DEVICE_ID = 0x70,SYNCLINK_GT4_DEVICE_ID = 0x80,SYNCLINK_AC_DEVICE_ID = 0x90,SYNCLINK_GT2_DEVICE_ID = 0xA0,};
enum MACRO_MNTNAMLEN {MNTNAMLEN = 255,};
enum MACRO_MODE_EDIT {MODE_EDIT = 0x1,MODE_TRAPSIG = 0x2,MODE_ACK = 0x4,MODE_SOFT_TAB = 0x8,MODE_LIT_ECHO = 0x10,MODE_MASK = 0x1F,MODE_FLOW = 0x100,MODE_ECHO = 0x200,MODE_INBIN = 0x400,MODE_OUTBIN = 0x800,MODE_FORCE = 0x1000,};
enum MACRO_MOUNTPROC {MOUNTPROC_NULL = 0,MOUNTPROC_MNT = 1,MOUNTPROC_DUMP = 2,MOUNTPROC_UMNT = 3,MOUNTPROC_UMNTALL = 4,MOUNTPROC_EXPORT = 5,MOUNTPROC_EXPORTALL = 6,};
enum MACRO_MOUNTPROG {MOUNTPROG = 100005,};
enum MACRO_MOUNTVERS {MOUNTVERS = 1,};
enum MACRO_MPS_DEATH {MPS_DEATH = 105,};
enum MACRO_MTSETPART {MTSETPART = 33,};
enum MACRO_MapNotify {MapNotify = 19,};
enum MACRO_MgslEvent {MgslEvent_DsrActive = 0x1,MgslEvent_DsrInactive = 0x2,MgslEvent_Dsr = 0x3,MgslEvent_CtsActive = 0x4,MgslEvent_CtsInactive = 0x8,MgslEvent_Cts = 0xC,MgslEvent_DcdActive = 0x10,MgslEvent_DcdInactive = 0x20,MgslEvent_Dcd = 0x30,MgslEvent_RiActive = 0x40,MgslEvent_RiInactive = 0x80,MgslEvent_Ri = 0xC0,MgslEvent_ExitHuntMode = 0x100,MgslEvent_IdleReceived = 0x200,};
enum MACRO_NAME_SIZE {NAME_SIZE = 12,TTY_SIZE = 16,};
enum MACRO_NCP_MOUNT {NCP_MOUNT_VERSION = 3,NCP_MOUNT_SOFT = 1,NCP_MOUNT_INTR = 2,NCP_MOUNT_STRONG = 4,NCP_MOUNT_NO_OS2 = 8,NCP_MOUNT_NO_NFS = 16,NCP_MOUNT_EXTRAS = 32,NCP_MOUNT_SYMLINKS = 64,NCP_MOUNT_NFS_EXTRAS = 128,NCP_MOUNT_VERSION_V4 = 4,NCP_MOUNT_VERSION_V5 = 5,};
enum MACRO_NET_MAJOR {NET_MAJOR = 36,};
enum MACRO_NFNETLINK {NFNETLINK_V0 = 0,};
enum MACRO_NFS_ACL_0 {NFS_ACL = 0x1,NFS_ACLCNT = 0x2,NFS_DFACL = 0x4,NFS_DFACLCNT = 0x8,NFS_ACL_DEFAULT = 0x1000,};
enum MACRO_NGROUPS_0 {NGROUPS = 65536,};
enum MACRO_NOT_READY {NOT_READY = 0x2,};
enum MACRO_NO_STREAM {NO_STREAM_ID_FILTER = -1,};
enum MACRO_NR_DQHASH {NR_DQHASH = 43,NR_DQUOTS = 256,};
enum MACRO_NR_LDISCS {NR_LDISCS = 30,};
enum MACRO_NULLQUARK {NULLQUARK = 0,};
enum MACRO_N_GIGASET {N_GIGASET_M101 = 16,N_SLCAN = 17,N_PPS = 18,N_V253 = 19,N_CAIF = 20,N_GSM0710 = 21,N_TI_WL = 22,N_TRACESINK = 23,N_TRACEROUTER = 24,};
enum MACRO_NotUseful {NotUseful = 0,WhenMapped = 1,Always = 2,};
enum MACRO_OLD_PHONE {OLD_PHONE_RING_START = 0x7187,};
enum MACRO_O_VISIBLE {O_VISIBLE = 0x1,O_ACTIVE = 0x2,O_PUBLIC = 0x4,O_EDIT = 0x8,O_WRAP = 0x10,O_BLANK = 0x20,O_AUTOSKIP = 0x40,O_NULLOK = 0x80,O_PASSOK = 0x100,O_STATIC = 0x200,O_NL_OVERLOAD = 0x1,O_BS_OVERLOAD = 0x2,};
enum MACRO_PANORAMIX {PANORAMIX_MAJOR_VERSION = 1,PANORAMIX_MINOR_VERSION = 1,};
enum MACRO_PAllHints {PAllHints = 252,};
enum MACRO_PF_PARISC {PF_PARISC_SBP = 0x8000000,PF_HP_PAGE_SIZE = 0x100000,PF_HP_FAR_SHARED = 0x200000,PF_HP_NEAR_SHARED = 0x400000,PF_HP_CODE = 0x1000000,PF_HP_MODIFY = 0x2000000,PF_HP_LAZYSWAP = 0x4000000,PF_HP_SBP = 0x8000000,};
enum MACRO_PHONE_REC {PHONE_REC_START = 0x718A,PHONE_REC_STOP = 0x718B,PHONE_REC_LEVEL = 0x718F,PHONE_PLAY_START = 0x7191,PHONE_PLAY_STOP = 0x7192,PHONE_PLAY_LEVEL = 0x7195,PHONE_GET_TONE_ON_TIME = 0x719E,PHONE_GET_TONE_OFF_TIME = 0x719F,PHONE_GET_TONE_STATE = 0x71A0,PHONE_BUSY = 0x71A1,PHONE_RINGBACK = 0x71A2,PHONE_DIALTONE = 0x71A3,PHONE_CPT_STOP = 0x71A4,PHONE_PSTN_GET_STATE = 0x71A5,};
enum MACRO_PN_COMMON {PN_COMMON_MESSAGE = 0xF0,PN_COMMGR = 0x10,PN_PREFIX = 0xE0,PN_COMM_SERVICE_NOT_IDENTIFIED_RESP = 0x1,PN_COMM_ISA_ENTITY_NOT_REACHABLE_RESP = 0x14,PN_DEV_PC = 0x10,};
enum MACRO_PPRELEASE {PPRELEASE = 0x708C,};
enum MACRO_PictOpAdd {PictOpAdd = 12,};
enum MACRO_PictOpOut {PictOpOut = 7,PictOpOutReverse = 8,};
enum MACRO_PictOpXor {PictOpXor = 11,};
enum MACRO_QUEUE_TAG {SIMPLE_QUEUE_TAG = 0x20,HEAD_OF_QUEUE_TAG = 0x21,ORDERED_QUEUE_TAG = 0x22,};
enum MACRO_RECOVERED {RECOVERED_ERROR = 0x1,};
enum MACRO_ROMBSBITS {ROMBSBITS = 10,};
enum MACRO_RSTATPROC {RSTATPROC_STATS = 1,RSTATPROC_HAVEDISK = 2,};
enum MACRO_RSTATPROG {RSTATPROG = 100001,};
enum MACRO_RSTATVERS {RSTATVERS_TIME = 3,};
enum MACRO_RTCF_DEAD {RTCF_DEAD = 1,RTCF_ONLINK = 4,RTCF_NOTIFY = 65536,RTCF_DIRECTDST = 131072,RTCF_REDIRECTED = 262144,RTCF_TPROXY = 524288,RTCF_FAST = 2097152,RTCF_SNAT = 8388608,RTCF_DNAT = 134217728,RTCF_BROADCAST = 268435456,RTCF_MULTICAST = 536870912,RTCF_REJECT = 1073741824,RTCF_LOCAL = -2147483648,};
enum MACRO_RTF_LOCAL {RTF_LOCAL = 0x80000000,RTF_INTERFACE = 0x40000000,RTF_MULTICAST = 0x20000000,RTF_BROADCAST = 0x10000000,RTF_NAT = 0x8000000,RTF_ADDRCLASSMASK = 0xF8000000,};
enum MACRO_RTNETLINK {RTNETLINK_HAVE_PEERINFO = 1,};
enum MACRO_R_AARCH64 {R_AARCH64_NONE = 0,R_AARCH64_ABS64 = 257,R_AARCH64_ABS32 = 258,R_AARCH64_COPY = 1024,R_AARCH64_GLOB_DAT = 1025,R_AARCH64_JUMP_SLOT = 1026,R_AARCH64_RELATIVE = 1027,R_AARCH64_TLS_DTPMOD64 = 1028,R_AARCH64_TLS_DTPREL64 = 1029,R_AARCH64_TLS_TPREL64 = 1030,R_AARCH64_TLSDESC = 1031,R_ARM_NONE = 0,R_ARM_PC24 = 1,R_ARM_ABS32 = 2,R_ARM_REL32 = 3,R_ARM_PC13 = 4,R_ARM_ABS16 = 5,R_ARM_ABS12 = 6,R_ARM_THM_ABS5 = 7,R_ARM_ABS8 = 8,R_ARM_SBREL32 = 9,R_ARM_THM_PC22 = 10,R_ARM_THM_PC8 = 11,R_ARM_AMP_VCALL9 = 12,R_ARM_SWI24 = 13,R_ARM_TLS_DESC = 13,R_ARM_THM_SWI8 = 14,R_ARM_XPC25 = 15,R_ARM_THM_XPC22 = 16,R_ARM_TLS_DTPMOD32 = 17,R_ARM_TLS_DTPOFF32 = 18,R_ARM_TLS_TPOFF32 = 19,R_ARM_COPY = 20,R_ARM_GLOB_DAT = 21,R_ARM_JUMP_SLOT = 22,R_ARM_RELATIVE = 23,R_ARM_GOTOFF = 24,R_ARM_GOTPC = 25,R_ARM_GOT32 = 26,R_ARM_PLT32 = 27,R_ARM_ALU_PCREL_7_0 = 32,R_ARM_ALU_PCREL_15_8 = 33,R_ARM_ALU_PCREL_23_15 = 34,R_ARM_LDR_SBREL_11_0 = 35,R_ARM_ALU_SBREL_19_12 = 36,R_ARM_ALU_SBREL_27_20 = 37,R_ARM_TLS_GOTDESC = 90,R_ARM_TLS_CALL = 91,R_ARM_TLS_DESCSEQ = 92,R_ARM_THM_TLS_CALL = 93,R_ARM_GNU_VTENTRY = 100,R_ARM_GNU_VTINHERIT = 101,R_ARM_THM_PC11 = 102,R_ARM_THM_PC9 = 103,R_ARM_TLS_GD32 = 104,R_ARM_TLS_LDM32 = 105,R_ARM_TLS_LDO32 = 106,R_ARM_TLS_IE32 = 107,R_ARM_TLS_LE32 = 108,R_ARM_THM_TLS_DESCSEQ = 129,R_ARM_IRELATIVE = 160,R_ARM_RXPC25 = 249,R_ARM_RSBREL32 = 250,R_ARM_THM_RPC22 = 251,R_ARM_RREL32 = 252,R_ARM_RABS22 = 253,R_ARM_RPC24 = 254,R_ARM_RBASE = 255,R_ARM_NUM = 256,};
enum MACRO_SECBIT_NO {SECBIT_NO_SETUID_FIXUP = 4,SECBIT_NO_SETUID_FIXUP_LOCKED = 8,};
enum MACRO_SECURE_NO {SECURE_NO_SETUID_FIXUP = 2,SECURE_NO_SETUID_FIXUP_LOCKED = 3,};
enum MACRO_SHF_ALPHA {SHF_ALPHA_GPREL = 0x10000000,};
enum MACRO_SHM_MAJOR {SHM_MAJOR_VERSION = 1,SHM_MINOR_VERSION = 1,};
enum MACRO_SHT_ALPHA {SHT_ALPHA_DEBUG = 0x70000001,SHT_ALPHA_REGINFO = 0x70000002,};
enum MACRO_SIG_BLOCK {SIG_BLOCK = 0,SIG_UNBLOCK = 1,SIG_SETMASK = 2,};
enum MACRO_SIOCADDRT {SIOCADDRT = 0x890B,};
enum MACRO_SIOCDELRT {SIOCDELRT = 0x890C,};
enum MACRO_SIOCDRARP {SIOCDRARP = 0x8960,};
enum MACRO_SIOCGIFBR {SIOCGIFBR = 0x8940,};
enum MACRO_SIOCGMODE {SIOCGMODE = 35319,};
enum MACRO_SIOCGPGRP {SIOCGPGRP = 0x8904,};
enum MACRO_SIOCGRARP {SIOCGRARP = 0x8961,};
enum MACRO_SIOCRTMSG {SIOCRTMSG = 0x890D,};
enum MACRO_SIOCSIFBR {SIOCSIFBR = 0x8941,};
enum MACRO_SIOCSMODE {SIOCSMODE = 35318,};
enum MACRO_SIOCSPGRP {SIOCSPGRP = 0x8902,};
enum MACRO_SIOCSRARP {SIOCSRARP = 0x8962,};
enum MACRO_SNDRV_SEQ {SNDRV_SEQ_FILTER_BROADCAST = 1,SNDRV_SEQ_FILTER_MULTICAST = 2,SNDRV_SEQ_FILTER_BOUNCE = 4,SNDRV_SEQ_FILTER_USE_EVENT = 2147483648,SNDRV_SEQ_REMOVE_INPUT = 1,SNDRV_SEQ_REMOVE_OUTPUT = 2,SNDRV_SEQ_REMOVE_DEST = 4,SNDRV_SEQ_REMOVE_DEST_CHANNEL = 8,SNDRV_SEQ_REMOVE_TIME_BEFORE = 16,SNDRV_SEQ_REMOVE_TIME_AFTER = 32,SNDRV_SEQ_REMOVE_TIME_TICK = 64,SNDRV_SEQ_REMOVE_EVENT_TYPE = 128,SNDRV_SEQ_REMOVE_IGNORE_OFF = 256,SNDRV_SEQ_REMOVE_TAG_MATCH = 512,SNDRV_SEQ_PORT_SYSTEM_TIMER = 0,SNDRV_SEQ_PORT_SYSTEM_ANNOUNCE = 1,SNDRV_SEQ_PORT_CAP_READ = 1,SNDRV_SEQ_PORT_CAP_WRITE = 2,SNDRV_SEQ_PORT_CAP_SYNC_READ = 4,SNDRV_SEQ_PORT_CAP_SYNC_WRITE = 8,SNDRV_SEQ_PORT_CAP_DUPLEX = 16,SNDRV_SEQ_PORT_CAP_SUBS_READ = 32,SNDRV_SEQ_PORT_CAP_SUBS_WRITE = 64,SNDRV_SEQ_PORT_CAP_NO_EXPORT = 128,SNDRV_SEQ_PORT_TYPE_SPECIFIC = 1,SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC = 2,SNDRV_SEQ_PORT_TYPE_MIDI_GM = 4,SNDRV_SEQ_PORT_TYPE_MIDI_GS = 8,SNDRV_SEQ_PORT_TYPE_MIDI_XG = 16,SNDRV_SEQ_PORT_TYPE_MIDI_MT32 = 32,SNDRV_SEQ_PORT_TYPE_MIDI_GM2 = 64,SNDRV_SEQ_PORT_TYPE_SYNTH = 1024,SNDRV_SEQ_PORT_TYPE_DIRECT_SAMPLE = 2048,SNDRV_SEQ_PORT_TYPE_SAMPLE = 4096,SNDRV_SEQ_PORT_TYPE_HARDWARE = 65536,SNDRV_SEQ_PORT_TYPE_SOFTWARE = 131072,SNDRV_SEQ_PORT_TYPE_SYNTHESIZER = 262144,SNDRV_SEQ_PORT_TYPE_PORT = 524288,SNDRV_SEQ_PORT_TYPE_APPLICATION = 1048576,SNDRV_SEQ_PORT_FLG_GIVEN_PORT = 1,SNDRV_SEQ_PORT_FLG_TIMESTAMP = 2,SNDRV_SEQ_PORT_FLG_TIME_REAL = 4,SNDRV_SEQ_QUEUE_FLG_SYNC = 1,SNDRV_SEQ_TIMER_ALSA = 0,SNDRV_SEQ_TIMER_MIDI_CLOCK = 1,SNDRV_SEQ_TIMER_MIDI_TICK = 2,SNDRV_SEQ_PORT_SUBS_EXCLUSIVE = 1,SNDRV_SEQ_PORT_SUBS_TIMESTAMP = 2,SNDRV_SEQ_PORT_SUBS_TIME_REAL = 4,SNDRV_SEQ_QUERY_SUBS_READ = 0,SNDRV_SEQ_QUERY_SUBS_WRITE = 1,};
enum MACRO_SND_COMPR {SND_COMPR_TRIGGER_DRAIN = 7,SND_COMPR_TRIGGER_NEXT_TRACK = 8,SND_COMPR_TRIGGER_PARTIAL_DRAIN = 9,};
enum MACRO_SOL_ATALK {SOL_ATALK = 258,};
enum MACRO_SOL_IRLMP {SOL_IRLMP = 266,SOL_IRTTP = 266,};
enum MACRO_SOMAXCONN {SOMAXCONN = 128,};
enum MACRO_SOUND_PCM {SOUND_PCM_POST = 20488,SOUND_PCM_RESET = 20480,SOUND_PCM_SYNC = 20481,SOUND_PCM_NONBLOCK = 20494,SOUND_PCM_SETSYNCRO = 20501,};
enum MACRO_SPECIALIX {SPECIALIX_NORMAL_MAJOR = 75,SPECIALIX_CALLOUT_MAJOR = 76,};
enum MACRO_SPRAYPROC {SPRAYPROC_SPRAY = 1,SPRAYPROC_GET = 2,SPRAYPROC_CLEAR = 3,};
enum MACRO_SPRAYPROG {SPRAYPROG = 100012,};
enum MACRO_SPRAYVERS {SPRAYVERS = 1,};
enum MACRO_STO_ALPHA {STO_ALPHA_NOPV = 0x80,STO_ALPHA_STD_GPLOAD = 0x88,};
enum MACRO_STT_SPARC {STT_SPARC_REGISTER = 13,};
enum MACRO_SUPPORTED {SUPPORTED_10baseT_Half = 1,SUPPORTED_10baseT_Full = 2,SUPPORTED_100baseT_Half = 4,SUPPORTED_100baseT_Full = 8,SUPPORTED_1000baseT_Half = 16,SUPPORTED_1000baseT_Full = 32,SUPPORTED_Autoneg = 64,SUPPORTED_TP = 128,SUPPORTED_AUI = 256,SUPPORTED_MII = 512,SUPPORTED_FIBRE = 1024,SUPPORTED_BNC = 2048,SUPPORTED_10000baseT_Full = 4096,SUPPORTED_Pause = 8192,SUPPORTED_Asym_Pause = 16384,SUPPORTED_2500baseX_Full = 32768,SUPPORTED_Backplane = 65536,SUPPORTED_1000baseKX_Full = 131072,SUPPORTED_10000baseKX4_Full = 262144,SUPPORTED_10000baseKR_Full = 524288,SUPPORTED_10000baseR_FEC = 1048576,SUPPORTED_20000baseMLD2_Full = 2097152,SUPPORTED_20000baseKR2_Full = 4194304,SUPPORTED_40000baseKR4_Full = 8388608,SUPPORTED_40000baseCR4_Full = 16777216,SUPPORTED_40000baseSR4_Full = 33554432,SUPPORTED_40000baseLR4_Full = 67108864,};
enum MACRO_SYNTH_CAP {SYNTH_CAP_PERCMODE = 0x1,SYNTH_CAP_OPL3 = 0x2,SYNTH_CAP_INPUT = 0x4,};
enum MACRO_S_BLKSIZE {S_BLKSIZE = 512,};
enum MACRO_S_TC_RTTL {S_TC_RTTL = 9,S_TC_AT = 12,};
enum MACRO_ShiftMask {ShiftMask = 1,LockMask = 2,ControlMask = 4,Mod1Mask = 8,Mod2Mask = 16,Mod3Mask = 32,Mod4Mask = 64,Mod5Mask = 128,};
enum MACRO_Suspended {Suspended = 84,};
enum MACRO_TASKSTATS {TASKSTATS_VERSION = 8,};
enum MACRO_TC_MUNGED {TC_MUNGED = 1,TC_OK2MUNGE = 2,};
enum MACRO_TELEPHONY {TELEPHONY_VERSION = 3013,};
enum MACRO_THERM_INT {THERM_INT_THRESHOLD0_ENABLE = 32768,THERM_SHIFT_THRESHOLD0 = 8,THERM_MASK_THRESHOLD0 = 32512,THERM_INT_THRESHOLD1_ENABLE = 8388608,THERM_SHIFT_THRESHOLD1 = 16,THERM_MASK_THRESHOLD1 = 8323072,THERM_STATUS_THRESHOLD0 = 64,THERM_LOG_THRESHOLD0 = 128,THERM_STATUS_THRESHOLD1 = 256,THERM_LOG_THRESHOLD1 = 512,};
enum MACRO_TIMER_OFF {TIMER_OFF = 65535,};
enum MACRO_TIME_WITH {TIME_WITH_SYS_TIME = 1,};
enum MACRO_TIOCGPGRP {TIOCGPGRP = 0x540F,};
enum MACRO_TIOCLINUX {TIOCLINUX = 0x541C,};
enum MACRO_TIOCNOTTY {TIOCNOTTY = 0x5422,};
enum MACRO_TIOCSCTTY {TIOCSCTTY = 0x540E,};
enum MACRO_TIOCSPGRP {TIOCSPGRP = 0x5410,};
enum MACRO_TIPC_ADDR {TIPC_ADDR_NAMESEQ = 1,TIPC_ADDR_MCAST = 1,TIPC_ADDR_NAME = 2,TIPC_ADDR_ID = 3,TIPC_ERRINFO = 1,TIPC_RETDATA = 2,TIPC_DESTNAME = 3,TIPC_IMPORTANCE = 127,TIPC_SRC_DROPPABLE = 128,TIPC_DEST_DROPPABLE = 129,TIPC_CONN_TIMEOUT = 130,TIPC_NODE_RECVQ_DEPTH = 131,TIPC_SOCK_RECVQ_DEPTH = 132,};
enum MACRO_TIPC_GENL {TIPC_GENL_VERSION = 0x1,TIPC_GENL_CMD = 0x1,};
enum MACRO_TYPE_DISK {TYPE_DISK = 0x0,TYPE_TAPE = 0x1,TYPE_PROCESSOR = 0x3,TYPE_WORM = 0x4,TYPE_ROM = 0x5,TYPE_SCANNER = 0x6,TYPE_MOD = 0x7,TYPE_MEDIUM_CHANGER = 0x8,TYPE_ENCLOSURE = 0xD,TYPE_NO_LUN = 0x7F,};
enum MACRO_UART_OMAP {UART_OMAP_MDR1 = 0x8,UART_OMAP_MDR2 = 0x9,UART_OMAP_SCR = 0x10,UART_OMAP_SSR = 0x11,UART_OMAP_EBLR = 0x12,UART_OMAP_OSC_12M_SEL = 0x13,UART_OMAP_MVER = 0x14,UART_OMAP_SYSC = 0x15,UART_OMAP_SYSS = 0x16,UART_OMAP_WER = 0x17,UART_OMAP_MDR1_16X_MODE = 0x0,UART_OMAP_MDR1_SIR_MODE = 0x1,UART_OMAP_MDR1_16X_ABAUD_MODE = 0x2,UART_OMAP_MDR1_13X_MODE = 0x3,UART_OMAP_MDR1_MIR_MODE = 0x4,UART_OMAP_MDR1_FIR_MODE = 0x5,UART_OMAP_MDR1_CIR_MODE = 0x6,UART_OMAP_MDR1_DISABLE = 0x7,UART_EXAR_8XMODE = 0x88,UART_EXAR_SLEEP = 0x8B,UART_EXAR_DVID = 0x8D,UART_EXAR_FCTR = 0x8,UART_FCTR_EXAR_IRDA = 0x8,UART_FCTR_EXAR_485 = 0x10,UART_FCTR_EXAR_TRGA = 0x0,UART_FCTR_EXAR_TRGB = 0x60,UART_FCTR_EXAR_TRGC = 0x80,UART_FCTR_EXAR_TRGD = 0xC0,UART_EXAR_TXTRG = 0xA,UART_EXAR_RXTRG = 0xB,};
enum MACRO_VIDEO_CMD {VIDEO_CMD_PLAY = 0,VIDEO_CMD_STOP = 1,VIDEO_CMD_FREEZE = 2,VIDEO_CMD_CONTINUE = 3,VIDEO_CMD_FREEZE_TO_BLACK = 1,VIDEO_CMD_STOP_TO_BLACK = 1,VIDEO_CMD_STOP_IMMEDIATELY = 2,VIDEO_PLAY_FMT_NONE = 0,VIDEO_PLAY_FMT_GOP = 1,VIDEO_VSYNC_FIELD_UNKNOWN = 0,VIDEO_VSYNC_FIELD_ODD = 1,VIDEO_VSYNC_FIELD_EVEN = 2,VIDEO_VSYNC_FIELD_PROGRESSIVE = 3,VIDEO_EVENT_SIZE_CHANGED = 1,VIDEO_EVENT_FRAME_RATE_CHANGED = 2,VIDEO_EVENT_DECODER_STOPPED = 3,VIDEO_EVENT_VSYNC = 4,VIDEO_CAP_MPEG1 = 1,VIDEO_CAP_MPEG2 = 2,VIDEO_CAP_SYS = 4,VIDEO_CAP_PROG = 8,VIDEO_CAP_SPU = 16,VIDEO_CAP_NAVI = 32,VIDEO_CAP_CSS = 64,VIDEO_STOP = 28437,VIDEO_PLAY = 28438,VIDEO_FREEZE = 28439,VIDEO_CONTINUE = 28440,VIDEO_SELECT_SOURCE = 28441,VIDEO_SET_BLANK = 28442,VIDEO_SET_DISPLAY_FORMAT = 28445,VIDEO_FAST_FORWARD = 28447,VIDEO_SLOWMOTION = 28448,VIDEO_CLEAR_BUFFER = 28450,VIDEO_SET_ID = 28451,VIDEO_SET_STREAMTYPE = 28452,VIDEO_SET_FORMAT = 28453,VIDEO_SET_SYSTEM = 28454,VIDEO_SET_ATTRIBUTES = 28469,};
enum MACRO_VIDEO_MAX {VIDEO_MAX_FRAME = 32,VIDEO_MAX_PLANES = 8,};
enum MACRO_VIRTIO_ID {VIRTIO_ID_NET = 1,VIRTIO_ID_BLOCK = 2,VIRTIO_ID_CONSOLE = 3,VIRTIO_ID_RNG = 4,VIRTIO_ID_BALLOON = 5,VIRTIO_ID_RPMSG = 7,VIRTIO_ID_SCSI = 8,VIRTIO_ID_9P = 9,VIRTIO_ID_RPROC_SERIAL = 11,VIRTIO_ID_CAIF = 12,VIRTIO_9P_MOUNT_TAG = 0,VIRTIO_BALLOON_F_MUST_TELL_HOST = 0,VIRTIO_BALLOON_F_STATS_VQ = 1,VIRTIO_BALLOON_PFN_SHIFT = 12,VIRTIO_BALLOON_S_SWAP_IN = 0,VIRTIO_BALLOON_S_SWAP_OUT = 1,VIRTIO_BALLOON_S_MAJFLT = 2,VIRTIO_BALLOON_S_MINFLT = 3,VIRTIO_BALLOON_S_MEMFREE = 4,VIRTIO_BALLOON_S_MEMTOT = 5,VIRTIO_BALLOON_S_NR = 6,VIRTIO_BLK_F_BARRIER = 0,VIRTIO_BLK_F_SIZE_MAX = 1,VIRTIO_BLK_F_SEG_MAX = 2,VIRTIO_BLK_F_GEOMETRY = 4,VIRTIO_BLK_F_RO = 5,VIRTIO_BLK_F_BLK_SIZE = 6,VIRTIO_BLK_F_SCSI = 7,VIRTIO_BLK_F_WCE = 9,VIRTIO_BLK_F_TOPOLOGY = 10,VIRTIO_BLK_F_CONFIG_WCE = 11,VIRTIO_BLK_F_FLUSH = 9,VIRTIO_BLK_ID_BYTES = 20,VIRTIO_BLK_T_IN = 0,VIRTIO_BLK_T_OUT = 1,VIRTIO_BLK_T_SCSI_CMD = 2,VIRTIO_BLK_T_FLUSH = 4,VIRTIO_BLK_T_GET_ID = 8,VIRTIO_BLK_T_BARRIER = -2147483648,VIRTIO_BLK_S_OK = 0,VIRTIO_BLK_S_IOERR = 1,VIRTIO_BLK_S_UNSUPP = 2,VIRTIO_CONSOLE_F_SIZE = 0,VIRTIO_CONSOLE_F_MULTIPORT = 1,VIRTIO_CONSOLE_F_EMERG_WRITE = 2,VIRTIO_CONSOLE_BAD_ID = -1,VIRTIO_CONSOLE_DEVICE_READY = 0,VIRTIO_CONSOLE_PORT_ADD = 1,VIRTIO_CONSOLE_PORT_REMOVE = 2,VIRTIO_CONSOLE_PORT_READY = 3,VIRTIO_CONSOLE_CONSOLE_PORT = 4,VIRTIO_CONSOLE_RESIZE = 5,VIRTIO_CONSOLE_PORT_OPEN = 6,VIRTIO_CONSOLE_PORT_NAME = 7,VIRTIO_NET_F_CSUM = 0,VIRTIO_NET_F_GUEST_CSUM = 1,VIRTIO_NET_F_MAC = 5,VIRTIO_NET_F_GSO = 6,VIRTIO_NET_F_GUEST_TSO4 = 7,VIRTIO_NET_F_GUEST_TSO6 = 8,VIRTIO_NET_F_GUEST_ECN = 9,VIRTIO_NET_F_GUEST_UFO = 10,VIRTIO_NET_F_HOST_TSO4 = 11,VIRTIO_NET_F_HOST_TSO6 = 12,VIRTIO_NET_F_HOST_ECN = 13,VIRTIO_NET_F_HOST_UFO = 14,VIRTIO_NET_F_MRG_RXBUF = 15,VIRTIO_NET_F_STATUS = 16,VIRTIO_NET_F_CTRL_VQ = 17,VIRTIO_NET_F_CTRL_RX = 18,VIRTIO_NET_F_CTRL_VLAN = 19,VIRTIO_NET_F_CTRL_RX_EXTRA = 20,VIRTIO_NET_F_GUEST_ANNOUNCE = 21,VIRTIO_NET_F_MQ = 22,VIRTIO_NET_F_CTRL_MAC_ADDR = 23,VIRTIO_NET_S_LINK_UP = 1,VIRTIO_NET_S_ANNOUNCE = 2,VIRTIO_NET_HDR_F_NEEDS_CSUM = 1,VIRTIO_NET_HDR_F_DATA_VALID = 2,VIRTIO_NET_HDR_GSO_NONE = 0,VIRTIO_NET_HDR_GSO_TCPV4 = 1,VIRTIO_NET_HDR_GSO_UDP = 3,VIRTIO_NET_HDR_GSO_TCPV6 = 4,VIRTIO_NET_HDR_GSO_ECN = 128,VIRTIO_NET_OK = 0,VIRTIO_NET_ERR = 1,VIRTIO_NET_CTRL_RX = 0,VIRTIO_NET_CTRL_RX_PROMISC = 0,VIRTIO_NET_CTRL_RX_ALLMULTI = 1,VIRTIO_NET_CTRL_RX_ALLUNI = 2,VIRTIO_NET_CTRL_RX_NOMULTI = 3,VIRTIO_NET_CTRL_RX_NOUNI = 4,VIRTIO_NET_CTRL_RX_NOBCAST = 5,VIRTIO_NET_CTRL_MAC = 1,VIRTIO_NET_CTRL_MAC_TABLE_SET = 0,VIRTIO_NET_CTRL_MAC_ADDR_SET = 1,VIRTIO_NET_CTRL_VLAN = 2,VIRTIO_NET_CTRL_VLAN_ADD = 0,VIRTIO_NET_CTRL_VLAN_DEL = 1,VIRTIO_NET_CTRL_ANNOUNCE = 3,VIRTIO_NET_CTRL_ANNOUNCE_ACK = 0,VIRTIO_NET_CTRL_MQ = 4,VIRTIO_NET_CTRL_MQ_VQ_PAIRS_SET = 0,VIRTIO_NET_CTRL_MQ_VQ_PAIRS_MIN = 1,VIRTIO_NET_CTRL_MQ_VQ_PAIRS_MAX = 32768,VIRTIO_PCI_HOST_FEATURES = 0,VIRTIO_PCI_GUEST_FEATURES = 4,VIRTIO_PCI_QUEUE_PFN = 8,VIRTIO_PCI_QUEUE_NUM = 12,VIRTIO_PCI_QUEUE_SEL = 14,VIRTIO_PCI_QUEUE_NOTIFY = 16,VIRTIO_PCI_STATUS = 18,VIRTIO_PCI_ISR = 19,VIRTIO_PCI_ISR_CONFIG = 2,VIRTIO_MSI_CONFIG_VECTOR = 20,VIRTIO_MSI_QUEUE_VECTOR = 22,VIRTIO_MSI_NO_VECTOR = 65535,VIRTIO_PCI_ABI_VERSION = 0,VIRTIO_PCI_QUEUE_ADDR_SHIFT = 12,VIRTIO_PCI_VRING_ALIGN = 4096,};
enum MACRO_WCOREFLAG {WCOREFLAG = 128,};
enum MACRO_XCSUCCESS {XCSUCCESS = 0,XCNOMEM = 1,XCNOENT = 2,};
enum MACRO_XFRM_MODE {XFRM_MODE_TRANSPORT = 0,XFRM_MODE_TUNNEL = 1,XFRM_MODE_ROUTEOPTIMIZATION = 2,XFRM_MODE_IN_TRIGGER = 3,XFRM_MODE_BEET = 4,XFRM_MODE_MAX = 5,XFRM_STATE_NOECN = 1,XFRM_STATE_DECAP_DSCP = 2,XFRM_STATE_NOPMTUDISC = 4,XFRM_STATE_WILDRECV = 8,XFRM_STATE_ICMP = 16,XFRM_STATE_AF_UNSPEC = 32,XFRM_STATE_ALIGN4 = 64,XFRM_STATE_ESN = 128,XFRM_SA_XFLAG_DONT_ENCAP_DSCP = 1,XFRM_POLICY_ALLOW = 0,XFRM_POLICY_BLOCK = 1,XFRM_POLICY_LOCALOK = 1,XFRM_POLICY_ICMP = 2,};
enum MACRO_XI2EVENTS {XI2EVENTS = 27,};
enum MACRO_XI_Absent {XI_Absent = 0,XI_Present = 1,XI_Initial_Release_Major = 1,XI_Initial_Release_Minor = 0,XI_Add_XDeviceBell_Major = 1,XI_Add_XDeviceBell_Minor = 1,XI_Add_XSetDeviceValuators_Major = 1,XI_Add_XSetDeviceValuators_Minor = 2,XI_Add_XChangeDeviceControl_Major = 1,XI_Add_XChangeDeviceControl_Minor = 3,XI_Add_DevicePresenceNotify_Major = 1,XI_Add_DevicePresenceNotify_Minor = 4,XI_Add_DeviceProperties_Major = 1,XI_Add_DeviceProperties_Minor = 5,};
enum MACRO_XNoMemory {XNoMemory = -1,};
enum MACRO_XTestFAKE {XTestFAKE_ACK_NOT_NEEDED = 0,XTestFAKE_ACK_REQUEST = 1,};
enum MACRO_XkbXINone {XkbXINone = 0xFF00,};
enum MACRO_XvBadPort {XvBadPort = 0,XvBadEncoding = 1,XvBadControl = 2,};
enum MACRO_XvStarted {XvStarted = 0,XvStopped = 1,XvBusy = 2,};
enum MACRO_XvVersion {XvVersion = 2,};
enum MACRO_YPMAXPEER {YPMAXPEER = 64,};
enum MACRO__BITS_UIO {_BITS_UIO_H_FOR_SYS_UIO_H = 1,};
enum MACRO__BYTESWAP {_BYTESWAP_H = 1,_AIO_H = 1,};
enum MACRO__EXECINFO {_EXECINFO_H = 1,_FCNTL_H = 1,};
enum MACRO__FEATURES {_FEATURES_H = 1,};
enum MACRO__INTTYPES {_INTTYPES_H = 1,_STDINT_H = 1,_BITS_WCHAR_H = 1,};
enum MACRO__IO_MAGIC {_IO_MAGIC_MASK = 0xFFFF0000,_IO_USER_BUF = 0x1,_IO_UNBUFFERED = 0x2,_IO_NO_READS = 0x4,_IO_NO_WRITES = 0x8,_IO_EOF_SEEN = 0x10,_IO_ERR_SEEN = 0x20,_IO_DELETE_DONT_CLOSE = 0x40,_IO_LINKED = 0x80,_IO_IN_BACKUP = 0x100,_IO_LINE_BUF = 0x200,_IO_TIED_PUT_GET = 0x400,_IO_CURRENTLY_PUTTING = 0x800,_IO_IS_APPENDING = 0x1000,_IO_IS_FILEBUF = 0x2000,_IO_BAD_SEEN = 0x4000,_IO_USER_LOCK = 0x8000,_IO_FLAGS2_MMAP = 0x1,_IO_FLAGS2_NOTCANCEL = 0x2,_IO_FLAGS2_USER_WBUF = 0x8,_IO_SKIPWS = 0x1,_IO_LEFT = 0x2,_IO_RIGHT = 0x4,_IO_INTERNAL = 0x8,_IO_DEC = 0x10,_IO_OCT = 0x20,_IO_HEX = 0x40,_IO_SHOWBASE = 0x80,_IO_SHOWPOINT = 0x100,_IO_UPPERCASE = 0x200,_IO_SHOWPOS = 0x400,_IO_SCIENTIFIC = 0x800,_IO_FIXED = 0x1000,_IO_UNITBUF = 0x2000,_IO_STDIO = 0x4000,_IO_DONT_CLOSE = 0x8000,_IO_BOOLALPHA = 0x10000,};
enum MACRO__NETATALK {_NETATALK_AT_H = 1,};
enum MACRO__NEWINDEX {_NEWINDEX = -1,};
enum MACRO__NOCHANGE {_NOCHANGE = -1,};
enum MACRO__POSIX_V7 {_POSIX_V7_LPBIG_OFFBIG = -1,_POSIX_V6_LPBIG_OFFBIG = -1,};
enum MACRO__RPC_AUTH {_RPC_AUTH_UNIX_H = 1,};
enum MACRO__RPC_CLNT {_RPC_CLNT_H = 1,_SYS_UN_H = 1,};
enum MACRO__RPC_PMAP {_RPC_PMAP_CLNT_H = 1,_RPC_PMAP_PROT_H = 1,};
enum MACRO__SDT_NOTE {_SDT_NOTE_TYPE = 3,};
enum MACRO__SIGSET_H {_SIGSET_H_fns = 1,};
enum MACRO__STAT_VER {_STAT_VER = 1,};
enum MACRO__SYS_AUXV {_SYS_AUXV_H = 1,_SYS_DEBUGREG_H = 1,};
enum MACRO__SYS_FILE {_SYS_FILE_H = 1,_SYS_FSUID_H = 1,_SYS_GMON_H = 1,};
enum MACRO__SYS_GMON {_SYS_GMON_OUT_H = 1,};
enum MACRO__SYS_KLOG {_SYS_KLOG_H = 1,_SYS_SYSLOG_H = 1,};
enum MACRO__SYS_MMAN {_SYS_MMAN_H = 1,};
enum MACRO__SYS_MTIO {_SYS_MTIO_H = 1,};
enum MACRO__SYS_PERM {_SYS_PERM_H = 1,_SYS_PERSONALITY_H = 1,_SYS_PRCTL_H = 1,};
enum MACRO__SYS_POLL {_SYS_POLL_H = 1,};
enum MACRO__SYS_WAIT {_SYS_WAIT_H = 1,};
enum MACRO__UCONTEXT {_UCONTEXT_H = 1,_ULIMIT_H = 1,_UTIME_H = 1,_UTMPX_H = 1,};
enum MACRO___NAMESER {__NAMESER = 19991006,};
enum MACRO___NETINET {__NETINET_IP_H = 1,};
enum MACRO___NETIUCV {__NETIUCV_IUCV_H = 1,__NETPACKET_PACKET_H = 1,};
enum MACRO___PTHREAD {__PTHREAD_MUTEX_HAVE_PREV = 1,__PTHREAD_RWLOCK_INT_FLAGS_SHARED = 1,};
enum MACRO___SYSCALL {__SYSCALL_WORDSIZE = 64,};
enum MACRO___UNKNOWN {__UNKNOWN_10646_CHAR = 0xFFFD,};
enum MACRO___USE_GNU {__USE_GNU_GETTEXT = 1,};
enum MACRO___defined {__defined_schedparam = 1,};
enum MACRO___mbstate {__mbstate_t_defined = 1,};
enum MACRO_t_defined {__ldiv_t_defined = 1,__lldiv_t_defined = 1,};
typedef struct _355FFBAADB08B4CAA5BBFAF829DED10A RECORD_EXTRANGE;
typedef struct _5F1D1C367F851FDE7EA3DDE22527B9A9 XCirculateEvent;
typedef struct _B511218BDE8923632D5391031F827DC7 XConfigureEvent;
typedef struct _6BA9BAD34CD581FCA2A7610248080448 XFontSetExtents;
typedef unsigned __int64 XIMPreeditState;
typedef struct _64419251F3172C7227A52AC30EAD3C9D XModifierKeymap;
typedef unsigned __int64 XRandrModeFlags;
typedef struct _EBA30041B1367D967CE55670260EF592 XSelectionEvent;
typedef struct _E59953A36063650DE92A1957B98E4A1B XTestMotionInfo;
typedef unsigned __int64 XcmsColorFormat;
typedef struct _XcmsFunctionSet XcmsFunctionSet;
typedef struct _XcmsPerScrnInfo XcmsPerScrnInfo;
typedef struct _XkbAnyDoodad *XkbAnyDoodadPtr;
typedef struct _XkbAnyDoodad XkbAnyDoodadRec;
typedef struct _XkbClientMapRec *XkbClientMapPtr;
typedef struct _XkbClientMapRec XkbClientMapRec;
typedef struct _XkbCompatMapRec *XkbCompatMapPtr;
typedef struct _XkbCompatMapRec XkbCompatMapRec;
typedef struct _XkbIndicatorRec *XkbIndicatorPtr;
typedef struct _XkbIndicatorRec XkbIndicatorRec;
typedef struct _XkbPtrBtnAction XkbPtrBtnAction;
typedef struct _XkbServerMapRec *XkbServerMapPtr;
typedef struct _XkbServerMapRec XkbServerMapRec;
typedef struct _XvMCMpegControl XvMCMpegControl;
typedef struct _1647B670B91D8E45F62891AE6C005714 XvMCSurfaceInfo;
struct _FontResolution {unsigned __int16 x_resolution;unsigned __int16 y_resolution;unsigned __int16 point_size;};
struct _IO_cookie_file;
struct _Unwind_Context;
struct _XkbCtrlsAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 ctrls3;unsigned __int8 ctrls2;unsigned __int8 ctrls1;unsigned __int8 ctrls0;};
struct _XkbGroupAction {unsigned __int8 type;unsigned __int8 flags;char group_XXX;};
struct _XkbKbdDpyState;
struct _XkbNameChanges {unsigned int changed;unsigned __int8 first_type;unsigned __int8 num_types;unsigned __int8 first_lvl;unsigned __int8 num_lvls;unsigned __int8 num_aliases;unsigned __int8 num_rg;unsigned __int8 first_key;unsigned __int8 num_keys;unsigned __int16 changed_vmods;unsigned __int64 changed_indicators;unsigned __int8 changed_groups;};
typedef int (*__compar_d_fn_t)(const void *, const void *, void *);
typedef void (*__dispatch_fn_t)(struct svc_req *, SVCXPRT *);
typedef void (*__gconv_end_fct)(struct __gconv_step *);
typedef struct _A66CD72C4F75B61BA7A5B80768A132ED __kernel_fd_set;
typedef struct _06CAB5296C39900A9CE51DBF4F560AD6 __kernel_fsid_t;
typedef __int64 __kernel_loff_t;
typedef __int64 __kernel_long_t;
typedef unsigned int __kernel_mode_t;
typedef struct __libc_rwlock_opaque__ __libc_rwlock_t;
struct __locale_struct {struct __locale_data *__locales[13];const unsigned __int16 *__ctype_b;const int *__ctype_tolower;const int *__ctype_toupper;const char *__names[13];};
typedef int (*__nftw64_func_t)(const char *filename, const struct stat64 *status, int flag, struct FTW *info);
enum __ns_cert_types {cert_t_pkix = 0x1,cert_t_spki = 0x2,cert_t_pgp = 0x3,cert_t_url = 0xFD,cert_t_oid = 0xFE,};
typedef unsigned __int16 apm_eventinfo_t;
enum atmsvc_msg_type {as_catch_null = 0x0,as_bind = 0x1,as_connect = 0x2,as_accept = 0x3,as_reject = 0x4,as_listen = 0x5,as_okay = 0x6,as_error = 0x7,as_indicate = 0x8,as_close = 0x9,as_itf_notify = 0xA,as_modify = 0xB,as_identify = 0xC,as_terminate = 0xD,as_addparty = 0xE,as_dropparty = 0xF,};
typedef struct audio_karaoke audio_karaoke_t;
struct blkpg_ioctl_arg {int op;int flags;int datalen;void *data;};
struct blkpg_partition {__int64 start;__int64 length;int pno;char devname[64];char volname[64];};
enum blktrace_notify {__BLK_TN_PROCESS = 0x0,__BLK_TN_TIMESTAMP = 0x1,__BLK_TN_MESSAGE = 0x2,};
typedef struct ca_descr_info ca_descr_info_t;
enum caif_debug_type {CAIF_DEBUG_TRACE_INTERACTIVE = 0x0,CAIF_DEBUG_TRACE = 0x1,CAIF_DEBUG_INTERACTIVE = 0x2,};
typedef struct __user_cap_data_struct *cap_user_data_t;
struct console_font_op {unsigned int op;unsigned int flags;unsigned int width;unsigned int height;unsigned int charcount;unsigned __int8 *data;};
struct consolefontdesc {unsigned __int16 charcount;unsigned __int16 charheight;char *chardata;};
enum ctattr_counters {CTA_COUNTERS_UNSPEC = 0x0,CTA_COUNTERS_PACKETS = 0x1,CTA_COUNTERS_BYTES = 0x2,CTA_COUNTERS32_PACKETS = 0x3,CTA_COUNTERS32_BYTES = 0x4,__CTA_COUNTERS_MAX = 0x5,};
enum ctattr_protonat {CTA_PROTONAT_UNSPEC = 0x0,CTA_PROTONAT_PORT_MIN = 0x1,CTA_PROTONAT_PORT_MAX = 0x2,__CTA_PROTONAT_MAX = 0x3,};
enum dcbnl_app_attrs {DCB_APP_ATTR_UNDEFINED = 0x0,DCB_APP_ATTR_IDTYPE = 0x1,DCB_APP_ATTR_ID = 0x2,DCB_APP_ATTR_PRIORITY = 0x3,__DCB_APP_ATTR_ENUM_MAX = 0x4,DCB_APP_ATTR_MAX = 0x3,};
enum dcbnl_bcn_attrs {DCB_BCN_ATTR_UNDEFINED = 0x0,DCB_BCN_ATTR_RP_0 = 0x1,DCB_BCN_ATTR_RP_1 = 0x2,DCB_BCN_ATTR_RP_2 = 0x3,DCB_BCN_ATTR_RP_3 = 0x4,DCB_BCN_ATTR_RP_4 = 0x5,DCB_BCN_ATTR_RP_5 = 0x6,DCB_BCN_ATTR_RP_6 = 0x7,DCB_BCN_ATTR_RP_7 = 0x8,DCB_BCN_ATTR_RP_ALL = 0x9,DCB_BCN_ATTR_BCNA_0 = 0xA,DCB_BCN_ATTR_BCNA_1 = 0xB,DCB_BCN_ATTR_ALPHA = 0xC,DCB_BCN_ATTR_BETA = 0xD,DCB_BCN_ATTR_GD = 0xE,DCB_BCN_ATTR_GI = 0xF,DCB_BCN_ATTR_TMAX = 0x10,DCB_BCN_ATTR_TD = 0x11,DCB_BCN_ATTR_RMIN = 0x12,DCB_BCN_ATTR_W = 0x13,DCB_BCN_ATTR_RD = 0x14,DCB_BCN_ATTR_RU = 0x15,DCB_BCN_ATTR_WRTT = 0x16,DCB_BCN_ATTR_RI = 0x17,DCB_BCN_ATTR_C = 0x18,DCB_BCN_ATTR_ALL = 0x19,__DCB_BCN_ATTR_ENUM_MAX = 0x1A,DCB_BCN_ATTR_MAX = 0x19,};
enum dcbnl_cap_attrs {DCB_CAP_ATTR_UNDEFINED = 0x0,DCB_CAP_ATTR_ALL = 0x1,DCB_CAP_ATTR_PG = 0x2,DCB_CAP_ATTR_PFC = 0x3,DCB_CAP_ATTR_UP2TC = 0x4,DCB_CAP_ATTR_PG_TCS = 0x5,DCB_CAP_ATTR_PFC_TCS = 0x6,DCB_CAP_ATTR_GSP = 0x7,DCB_CAP_ATTR_BCN = 0x8,DCB_CAP_ATTR_DCBX = 0x9,__DCB_CAP_ATTR_ENUM_MAX = 0xA,DCB_CAP_ATTR_MAX = 0x9,};
typedef void dlm_lockspace_t;
struct ebt_mark_t_info {unsigned __int64 mark;int target;};
struct eni_multipliers {int tx;int rx;};
enum fc_els_rnid_fmt {ELS_RNIDF_NONE = 0x0,ELS_RNIDF_GEN = 0xDF,};
enum fc_els_rps_flag {FC_ELS_RPS_DID = 0x0,FC_ELS_RPS_PPN = 0x1,FC_ELS_RPS_WWPN = 0x2,};
enum fc_els_scr_func {ELS_SCRF_FAB = 0x1,ELS_SCRF_NPORT = 0x2,ELS_SCRF_FULL = 0x3,ELS_SCRF_CLEAR = 0xFF,};
enum fc_els_spp_resp {FC_SPP_RESP_ACK = 0x1,FC_SPP_RESP_RES = 0x2,FC_SPP_RESP_INIT = 0x3,FC_SPP_RESP_NO_PA = 0x4,FC_SPP_RESP_CONF = 0x5,FC_SPP_RESP_COND = 0x6,FC_SPP_RESP_MULT = 0x7,FC_SPP_RESP_INVL = 0x8,};
enum fc_els_srl_flag {FC_ELS_SRL_ALL = 0x0,FC_ELS_SRL_ONE = 0x1,FC_ELS_SRL_EN_PER = 0x2,FC_ELS_SRL_DIS_PER = 0x3,};
enum fe_interleaving {INTERLEAVING_NONE = 0x0,INTERLEAVING_AUTO = 0x1,INTERLEAVING_240 = 0x2,INTERLEAVING_720 = 0x3,};
enum fe_sec_mini_cmd {SEC_MINI_A = 0x0,SEC_MINI_B = 0x1,};
typedef struct _624041EF38A3D722ECC431A5F82DF930 fsCreateACReply;
typedef struct _3BE679DC1FFA371624A790DBC1F4853A fsIDChoiceError;
typedef struct fs_disk_quota fs_disk_quota_t;
typedef struct fs_quota_stat fs_quota_stat_t;
typedef struct hdsp_9632_aeb hdsp_9632_aeb_t;
typedef struct hdsp_firmware hdsp_firmware_t;
typedef struct hdsp_peak_rms hdsp_peak_rms_t;
enum hdspm_ltc_frame {frame_invalid = 0x0,drop_frame = 0x1,full_frame = 0x2,};
typedef struct hdspm_version hdspm_version_t;
struct hwtstamp_config {int flags;int tx_type;int rx_filter;};
struct i2o_cmd_psetget {unsigned int iop;unsigned int tid;void *opbuf;unsigned int oplen;void *resbuf;unsigned int *reslen;};
typedef struct i2o_sg_io_hdr i2o_sg_io_hdr_t;
struct inet_diag_bc_op {unsigned __int8 code;unsigned __int8 yes;unsigned __int16 no;};
enum ipset_cmd_flags {IPSET_FLAG_BIT_EXIST = 0x0,IPSET_FLAG_EXIST = 0x1,IPSET_FLAG_BIT_LIST_SETNAME = 0x1,IPSET_FLAG_LIST_SETNAME = 0x2,IPSET_FLAG_BIT_LIST_HEADER = 0x2,IPSET_FLAG_LIST_HEADER = 0x4,IPSET_FLAG_BIT_SKIP_COUNTER_UPDATE = 0x3,IPSET_FLAG_SKIP_COUNTER_UPDATE = 0x8,IPSET_FLAG_BIT_SKIP_SUBCOUNTER_UPDATE = 0x4,IPSET_FLAG_SKIP_SUBCOUNTER_UPDATE = 0x10,IPSET_FLAG_BIT_MATCH_COUNTERS = 0x5,IPSET_FLAG_MATCH_COUNTERS = 0x20,IPSET_FLAG_BIT_RETURN_NOMATCH = 0x7,IPSET_FLAG_RETURN_NOMATCH = 0x80,IPSET_FLAG_CMD_MAX = 0xF,};
enum ipt_reject_with {IPT_ICMP_NET_UNREACHABLE = 0x0,IPT_ICMP_HOST_UNREACHABLE = 0x1,IPT_ICMP_PROT_UNREACHABLE = 0x2,IPT_ICMP_PORT_UNREACHABLE = 0x3,IPT_ICMP_ECHOREPLY = 0x4,IPT_ICMP_NET_PROHIBITED = 0x5,IPT_ICMP_HOST_PROHIBITED = 0x6,IPT_TCP_RESET = 0x7,IPT_ICMP_ADMIN_PROHIBITED = 0x8,};
struct ipx_config_data {unsigned __int8 ipxcfg_auto_select_primary;unsigned __int8 ipxcfg_auto_create_interfaces;};
struct kernel_ipmi_msg {unsigned __int8 netfn;unsigned __int8 cmd;unsigned __int16 data_len;unsigned __int8 *data;};
struct kvm_lapic_state {char regs[1024];};
enum l2tp_encap_type {L2TP_ENCAPTYPE_UDP = 0x0,L2TP_ENCAPTYPE_IP = 0x1,};
typedef struct master_config master_config_t;
struct mdu_disk_info_s {int number;int major;int minor;int raid_disk;int state;};
typedef struct mdu_disk_info_s mdu_disk_info_t;
struct mmap_arg_struct;
typedef struct _880211171E610BEC08A41169F91F4D60 mpu_command_rec;
enum nfqnl_attr_type {NFQA_UNSPEC = 0x0,NFQA_PACKET_HDR = 0x1,NFQA_VERDICT_HDR = 0x2,NFQA_MARK = 0x3,NFQA_TIMESTAMP = 0x4,NFQA_IFINDEX_INDEV = 0x5,NFQA_IFINDEX_OUTDEV = 0x6,NFQA_IFINDEX_PHYSINDEV = 0x7,NFQA_IFINDEX_PHYSOUTDEV = 0x8,NFQA_HWADDR = 0x9,NFQA_PAYLOAD = 0xA,NFQA_CT = 0xB,NFQA_CT_INFO = 0xC,NFQA_CAP_LEN = 0xD,NFQA_SKB_INFO = 0xE,__NFQA_MAX = 0xF,};
enum nfqnl_msg_types {NFQNL_MSG_PACKET = 0x0,NFQNL_MSG_VERDICT = 0x1,NFQNL_MSG_CONFIG = 0x2,NFQNL_MSG_VERDICT_BATCH = 0x3,NFQNL_MSG_MAX = 0x4,};
enum nfs3_createmode {NFS3_CREATE_UNCHECKED = 0x0,NFS3_CREATE_GUARDED = 0x1,NFS3_CREATE_EXCLUSIVE = 0x2,};
struct nr_parms_struct {unsigned int quality;unsigned int obs_count;unsigned int ttl;unsigned int timeout;unsigned int ack_delay;unsigned int busy_delay;unsigned int tries;unsigned int window;unsigned int paclen;};
enum ovs_action_attr {OVS_ACTION_ATTR_UNSPEC = 0x0,OVS_ACTION_ATTR_OUTPUT = 0x1,OVS_ACTION_ATTR_USERSPACE = 0x2,OVS_ACTION_ATTR_SET = 0x3,OVS_ACTION_ATTR_PUSH_VLAN = 0x4,OVS_ACTION_ATTR_POP_VLAN = 0x5,OVS_ACTION_ATTR_SAMPLE = 0x6,__OVS_ACTION_ATTR_MAX = 0x7,};
enum ovs_packet_attr {OVS_PACKET_ATTR_UNSPEC = 0x0,OVS_PACKET_ATTR_PACKET = 0x1,OVS_PACKET_ATTR_KEY = 0x2,OVS_PACKET_ATTR_ACTIONS = 0x3,OVS_PACKET_ATTR_USERDATA = 0x4,__OVS_PACKET_ATTR_MAX = 0x5,};
enum ovs_sample_attr {OVS_SAMPLE_ATTR_UNSPEC = 0x0,OVS_SAMPLE_ATTR_PROBABILITY = 0x1,OVS_SAMPLE_ATTR_ACTIONS = 0x2,__OVS_SAMPLE_ATTR_MAX = 0x3,};
struct perf_event_attr;
typedef struct _9862706C0A5BB87114D8D1264CC215A3 pmStartProxyMsg;
typedef union _955F1759725876F7F898C71A8A4DCDA3 pthread_mutex_t;
struct relocation_info {int r_address;unsigned __int32 r_symbolnum : 24;unsigned __int32 r_pcrel : 1;unsigned __int32 r_length : 2;unsigned __int32 r_extern : 1;unsigned __int32 r_pad : 4;};
struct slaving_request {char slave_name[16];__int64 priority;};
struct snd_dm_fm_voice {unsigned __int8 op;unsigned __int8 voice;unsigned __int8 am;unsigned __int8 vibrato;unsigned __int8 do_sustain;unsigned __int8 kbd_scale;unsigned __int8 harmonic;unsigned __int8 scale_level;unsigned __int8 volume;unsigned __int8 attack;unsigned __int8 decay;unsigned __int8 sustain;unsigned __int8 release;unsigned __int8 feedback;unsigned __int8 connection;unsigned __int8 left;unsigned __int8 right;unsigned __int8 waveform;};
typedef int snd_pcm_state_t;
union snd_pcm_sync_id {unsigned __int8 id[16];unsigned __int16 id16[8];unsigned int id32[4];};
struct snd_sb_csp_info {char codec_name[16];unsigned __int16 func_nr;unsigned int acc_format;unsigned __int16 acc_channels;unsigned __int16 acc_width;unsigned __int16 acc_rates;unsigned __int16 csp_mode;unsigned __int16 run_channels;unsigned __int16 run_width;unsigned __int16 version;unsigned __int16 state;};
struct snd_seq_ev_ctrl {unsigned __int8 channel;unsigned __int8 unused1;unsigned __int8 unused2;unsigned __int8 unused3;unsigned int param;signed int value;};
struct snd_seq_ev_note {unsigned __int8 channel;unsigned __int8 note;unsigned __int8 velocity;unsigned __int8 off_velocity;unsigned int duration;};
struct snd_seq_ev_raw8 {unsigned __int8 d[12];};
typedef struct td_thr_events td_thr_events_t;
struct tiocl_selection {unsigned __int16 xs;unsigned __int16 ys;unsigned __int16 xe;unsigned __int16 ye;unsigned __int16 sel_mode;};
enum usb3_link_state {USB3_LPM_U0 = 0x0,USB3_LPM_U1 = 0x1,USB3_LPM_U2 = 0x2,USB3_LPM_U3 = 0x3,};
enum v4l2_colorspace {V4L2_COLORSPACE_SMPTE170M = 0x1,V4L2_COLORSPACE_SMPTE240M = 0x2,V4L2_COLORSPACE_REC709 = 0x3,V4L2_COLORSPACE_BT878 = 0x4,V4L2_COLORSPACE_470_SYSTEM_M = 0x5,V4L2_COLORSPACE_470_SYSTEM_BG = 0x6,V4L2_COLORSPACE_JPEG = 0x7,V4L2_COLORSPACE_SRGB = 0x8,};
enum v4l2_deemphasis {V4L2_DEEMPHASIS_DISABLED = 0x0,V4L2_DEEMPHASIS_50_uS = 0x1,V4L2_DEEMPHASIS_75_uS = 0x2,};
enum v4l2_dv_tx_mode {V4L2_DV_TX_MODE_DVI_D = 0x0,V4L2_DV_TX_MODE_HDMI = 0x1,};
enum v4l2_scene_mode {V4L2_SCENE_MODE_NONE = 0x0,V4L2_SCENE_MODE_BACKLIGHT = 0x1,V4L2_SCENE_MODE_BEACH_SNOW = 0x2,V4L2_SCENE_MODE_CANDLE_LIGHT = 0x3,V4L2_SCENE_MODE_DAWN_DUSK = 0x4,V4L2_SCENE_MODE_FALL_COLORS = 0x5,V4L2_SCENE_MODE_FIREWORKS = 0x6,V4L2_SCENE_MODE_LANDSCAPE = 0x7,V4L2_SCENE_MODE_NIGHT = 0x8,V4L2_SCENE_MODE_PARTY_INDOOR = 0x9,V4L2_SCENE_MODE_PORTRAIT = 0xA,V4L2_SCENE_MODE_SPORTS = 0xB,V4L2_SCENE_MODE_SUNSET = 0xC,V4L2_SCENE_MODE_TEXT = 0xD,};
enum v4l2_tuner_type {V4L2_TUNER_RADIO = 0x1,V4L2_TUNER_ANALOG_TV = 0x2,V4L2_TUNER_DIGITAL_TV = 0x3,};
enum vlan_ioctl_cmds {ADD_VLAN_CMD = 0x0,DEL_VLAN_CMD = 0x1,SET_VLAN_INGRESS_PRIORITY_CMD = 0x2,SET_VLAN_EGRESS_PRIORITY_CMD = 0x3,GET_VLAN_INGRESS_PRIORITY_CMD = 0x4,GET_VLAN_EGRESS_PRIORITY_CMD = 0x5,SET_VLAN_NAME_TYPE_CMD = 0x6,SET_VLAN_FLAG_CMD = 0x7,GET_VLAN_REALDEV_NAME_CMD = 0x8,GET_VLAN_VID_CMD = 0x9,};
enum vlan_name_types {VLAN_NAME_TYPE_PLUS_VID = 0x0,VLAN_NAME_TYPE_RAW_PLUS_VID = 0x1,VLAN_NAME_TYPE_PLUS_VID_NO_PAD = 0x2,VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD = 0x3,VLAN_NAME_TYPE_HIGHEST = 0x4,};
typedef struct _F3EFAA27463B93CC96181BFE5F29A4C5 xAllowEventsReq;
typedef struct _FB619B5CE8E6B82A3D0938CCE57F62CA xChangeHostsReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xCloseDeviceReq;
typedef struct _895A6AA0EC03D09B638DC82C89B5E3C4 xDMXAddInputReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSCapableReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSDisableReq;
typedef struct _CF1CBE9BFB7E9609B8A4034B734E37B9 xDRI2ConnectReq;
typedef struct _E9AF2F2A8EA064B789B183AF44D2C131 xDRI2WaitMSCReq;
typedef struct _F48CE0DBD7E8B40C5BE46DCA241B28C2 xDRI2WaitSBCReq;
typedef struct _EF3075C2F2980D34C2767B31474F1A14 xDbeEndIdiomReq;
typedef struct _F0BD037E525ACFEA0C1F272EFA8FD580 xGetPropertyReq;
typedef struct _79FC17A0C7A3F31E1105D33CC8C2AA30 xGrabPointerReq;
typedef struct _0C21A611EFF1A0A24872DDA75B66705A xInputClassInfo;
typedef struct _A7019015FC7C2C37D01376608F5D1FF2 xKbdFeedbackCtl;
typedef struct _LbxCopyArea xLbxCopyAreaReq;
typedef struct _LbxFillPoly xLbxFillPolyReq;
typedef struct _3C4960FCBBDB3233211578F053843777 xLbxGetImageReq;
typedef struct _50E42323027751282F1104957020037E xLbxGrabCmapReq;
typedef struct _LbxPolyText xLbxPolyTextReq;
typedef struct _LbxPutImage xLbxPutImageReq;
typedef struct _LbxSwitchEvent xLbxSwitchEvent;
typedef struct _A9B1BAFFCE9059101A2CA55F4DE425B3 xLedFeedbackCtl;
typedef struct _57642C20A930BC40CC56BFA51EFC45F8 xListFontsReply;
typedef struct _EF54914952AB89C7E0EBAF949772487D xListHostsReply;
typedef struct _4E2DFB9F6290197309D31FB10928FA58 xLookupColorReq;
typedef struct _77B5DA89F8222E8D6D7C1ABF47542A30 xPolySegmentReq;
typedef struct _67223C7576264C1E3F5454254FA2FCB7 xPtrFeedbackCtl;
typedef struct _7905F1106D6192C786F48B3D63EB8F32 xQueryColorsReq;
typedef struct _xQueryFontReply xQueryFontReply;
typedef struct _DDAC1D07D44FFC2E5C65864F60CCE1DF xQueryTreeReply;
typedef struct _3578C73785DC808474EBF8D1E351F2D3 xRenderScaleReq;
typedef struct _069CA722659D31B5E21E1ACEADA10473 xSetFontPathReq;
typedef struct _ShapeOffset xShapeOffsetReq;
typedef struct _ShmGetImage xShmGetImageReq;
typedef struct _ShmPutImage xShmPutImageReq;
typedef struct _7905F1106D6192C786F48B3D63EB8F32 xStoreColorsReq;
typedef struct _F52D9FC92091A8183F87E95DDBDC622D xWarpPointerReq;
typedef struct _XDGASetMode xXDGASetModeReq;
typedef struct _2D0C5444B9314DA523692ACDBC5F4808 xXIBarrierEvent;
typedef struct _4BB2E57EB8074CF4622278B169F475B1 xXIModifierInfo;
typedef struct _F2B249C6E9F478F0CD898D371C46DBB5 xXIValuatorInfo;
typedef struct _322E4D740D2A723112F8227414848916 xXevieSendReply;
enum xcb_atom_enum_t {XCB_ATOM_NONE = 0x0,XCB_ATOM_ANY = 0x0,XCB_ATOM_PRIMARY = 0x1,XCB_ATOM_SECONDARY = 0x2,XCB_ATOM_ARC = 0x3,XCB_ATOM_ATOM = 0x4,XCB_ATOM_BITMAP = 0x5,XCB_ATOM_CARDINAL = 0x6,XCB_ATOM_COLORMAP = 0x7,XCB_ATOM_CURSOR = 0x8,XCB_ATOM_CUT_BUFFER0 = 0x9,XCB_ATOM_CUT_BUFFER1 = 0xA,XCB_ATOM_CUT_BUFFER2 = 0xB,XCB_ATOM_CUT_BUFFER3 = 0xC,XCB_ATOM_CUT_BUFFER4 = 0xD,XCB_ATOM_CUT_BUFFER5 = 0xE,XCB_ATOM_CUT_BUFFER6 = 0xF,XCB_ATOM_CUT_BUFFER7 = 0x10,XCB_ATOM_DRAWABLE = 0x11,XCB_ATOM_FONT = 0x12,XCB_ATOM_INTEGER = 0x13,XCB_ATOM_PIXMAP = 0x14,XCB_ATOM_POINT = 0x15,XCB_ATOM_RECTANGLE = 0x16,XCB_ATOM_RESOURCE_MANAGER = 0x17,XCB_ATOM_RGB_COLOR_MAP = 0x18,XCB_ATOM_RGB_BEST_MAP = 0x19,XCB_ATOM_RGB_BLUE_MAP = 0x1A,XCB_ATOM_RGB_DEFAULT_MAP = 0x1B,XCB_ATOM_RGB_GRAY_MAP = 0x1C,XCB_ATOM_RGB_GREEN_MAP = 0x1D,XCB_ATOM_RGB_RED_MAP = 0x1E,XCB_ATOM_STRING = 0x1F,XCB_ATOM_VISUALID = 0x20,XCB_ATOM_WINDOW = 0x21,XCB_ATOM_WM_COMMAND = 0x22,XCB_ATOM_WM_HINTS = 0x23,XCB_ATOM_WM_CLIENT_MACHINE = 0x24,XCB_ATOM_WM_ICON_NAME = 0x25,XCB_ATOM_WM_ICON_SIZE = 0x26,XCB_ATOM_WM_NAME = 0x27,XCB_ATOM_WM_NORMAL_HINTS = 0x28,XCB_ATOM_WM_SIZE_HINTS = 0x29,XCB_ATOM_WM_ZOOM_HINTS = 0x2A,XCB_ATOM_MIN_SPACE = 0x2B,XCB_ATOM_NORM_SPACE = 0x2C,XCB_ATOM_MAX_SPACE = 0x2D,XCB_ATOM_END_SPACE = 0x2E,XCB_ATOM_SUPERSCRIPT_X = 0x2F,XCB_ATOM_SUPERSCRIPT_Y = 0x30,XCB_ATOM_SUBSCRIPT_X = 0x31,XCB_ATOM_SUBSCRIPT_Y = 0x32,XCB_ATOM_UNDERLINE_POSITION = 0x33,XCB_ATOM_UNDERLINE_THICKNESS = 0x34,XCB_ATOM_STRIKEOUT_ASCENT = 0x35,XCB_ATOM_STRIKEOUT_DESCENT = 0x36,XCB_ATOM_ITALIC_ANGLE = 0x37,XCB_ATOM_X_HEIGHT = 0x38,XCB_ATOM_QUAD_WIDTH = 0x39,XCB_ATOM_WEIGHT = 0x3A,XCB_ATOM_POINT_SIZE = 0x3B,XCB_ATOM_RESOLUTION = 0x3C,XCB_ATOM_COPYRIGHT = 0x3D,XCB_ATOM_NOTICE = 0x3E,XCB_ATOM_FONT_NAME = 0x3F,XCB_ATOM_FAMILY_NAME = 0x40,XCB_ATOM_FULL_NAME = 0x41,XCB_ATOM_CAP_HEIGHT = 0x42,XCB_ATOM_WM_CLASS = 0x43,XCB_ATOM_WM_TRANSIENT_FOR = 0x44,};
struct xcb_auth_info_t {int namelen;char *name;int datalen;char *data;};
enum xcb_cap_style_t {XCB_CAP_STYLE_NOT_LAST = 0x0,XCB_CAP_STYLE_BUTT = 0x1,XCB_CAP_STYLE_ROUND = 0x2,XCB_CAP_STYLE_PROJECTING = 0x3,};
enum xcb_circulate_t {XCB_CIRCULATE_RAISE_LOWEST = 0x0,XCB_CIRCULATE_LOWER_HIGHEST = 0x1,};
enum xcb_exposures_t {XCB_EXPOSURES_NOT_ALLOWED = 0x0,XCB_EXPOSURES_ALLOWED = 0x1,XCB_EXPOSURES_DEFAULT = 0x2,};
struct xcb_extension_t {const char *name;int global_id;};
enum xcb_fill_rule_t {XCB_FILL_RULE_EVEN_ODD = 0x0,XCB_FILL_RULE_WINDING = 0x1,};
enum xcb_font_draw_t {XCB_FONT_DRAW_LEFT_TO_RIGHT = 0x0,XCB_FONT_DRAW_RIGHT_TO_LEFT = 0x1,};
enum xcb_font_enum_t {XCB_FONT_NONE = 0x0,};
enum xcb_glx_pbcdt_t {XCB_GLX_PBCDT_WINDOW = 0x8019,XCB_GLX_PBCDT_PBUFFER = 0x801A,};
enum xcb_glx_pbcet_t {XCB_GLX_PBCET_DAMAGED = 0x8017,XCB_GLX_PBCET_SAVED = 0x8018,};
enum xcb_grab_mode_t {XCB_GRAB_MODE_SYNC = 0x0,XCB_GRAB_MODE_ASYNC = 0x1,};
enum xcb_host_mode_t {XCB_HOST_MODE_INSERT = 0x0,XCB_HOST_MODE_DELETE = 0x1,};
enum xcb_map_index_t {XCB_MAP_INDEX_SHIFT = 0x0,XCB_MAP_INDEX_LOCK = 0x1,XCB_MAP_INDEX_CONTROL = 0x2,XCB_MAP_INDEX_1 = 0x3,XCB_MAP_INDEX_2 = 0x4,XCB_MAP_INDEX_3 = 0x5,XCB_MAP_INDEX_4 = 0x6,XCB_MAP_INDEX_5 = 0x7,};
enum xcb_map_state_t {XCB_MAP_STATE_UNMAPPED = 0x0,XCB_MAP_STATE_UNVIEWABLE = 0x1,XCB_MAP_STATE_VIEWABLE = 0x2,};
enum xcb_prop_mode_t {XCB_PROP_MODE_REPLACE = 0x0,XCB_PROP_MODE_PREPEND = 0x1,XCB_PROP_MODE_APPEND = 0x2,};
enum xcb_record_cs_t {XCB_RECORD_CS_CURRENT_CLIENTS = 0x1,XCB_RECORD_CS_FUTURE_CLIENTS = 0x2,XCB_RECORD_CS_ALL_CLIENTS = 0x3,};
enum xcb_render_cp_t {XCB_RENDER_CP_REPEAT = 0x1,XCB_RENDER_CP_ALPHA_MAP = 0x2,XCB_RENDER_CP_ALPHA_X_ORIGIN = 0x4,XCB_RENDER_CP_ALPHA_Y_ORIGIN = 0x8,XCB_RENDER_CP_CLIP_X_ORIGIN = 0x10,XCB_RENDER_CP_CLIP_Y_ORIGIN = 0x20,XCB_RENDER_CP_CLIP_MASK = 0x40,XCB_RENDER_CP_GRAPHICS_EXPOSURE = 0x80,XCB_RENDER_CP_SUBWINDOW_MODE = 0x100,XCB_RENDER_CP_POLY_EDGE = 0x200,XCB_RENDER_CP_POLY_MODE = 0x400,XCB_RENDER_CP_DITHER = 0x800,XCB_RENDER_CP_COMPONENT_ALPHA = 0x1000,};
enum xcb_xkb_const_t {XCB_XKB_CONST_MAX_LEGAL_KEY_CODE = 0xFF,XCB_XKB_CONST_PER_KEY_BIT_ARRAY_SIZE = 0x20,XCB_XKB_CONST_KEY_NAME_LENGTH = 0x4,};
enum xcb_xkb_error_t {XCB_XKB_ERROR_BAD_DEVICE = 0xFF,XCB_XKB_ERROR_BAD_CLASS = 0xFE,XCB_XKB_ERROR_BAD_ID = 0xFD,};
enum xcb_xkb_group_t {XCB_XKB_GROUP_1 = 0x0,XCB_XKB_GROUP_2 = 0x1,XCB_XKB_GROUP_3 = 0x2,XCB_XKB_GROUP_4 = 0x3,};
enum xcb_xkb_v_mod_t {XCB_XKB_V_MOD_15 = 0x8000,XCB_XKB_V_MOD_14 = 0x4000,XCB_XKB_V_MOD_13 = 0x2000,XCB_XKB_V_MOD_12 = 0x1000,XCB_XKB_V_MOD_11 = 0x800,XCB_XKB_V_MOD_10 = 0x400,XCB_XKB_V_MOD_9 = 0x200,XCB_XKB_V_MOD_8 = 0x100,XCB_XKB_V_MOD_7 = 0x80,XCB_XKB_V_MOD_6 = 0x40,XCB_XKB_V_MOD_5 = 0x20,XCB_XKB_V_MOD_4 = 0x10,XCB_XKB_V_MOD_3 = 0x8,XCB_XKB_V_MOD_2 = 0x4,XCB_XKB_V_MOD_1 = 0x2,XCB_XKB_V_MOD_0 = 0x1,};
enum xfrm_ae_ftype_t {XFRM_AE_UNSPEC = 0x0,XFRM_AE_RTHR = 0x1,XFRM_AE_RVAL = 0x2,XFRM_AE_LVAL = 0x4,XFRM_AE_ETHR = 0x8,XFRM_AE_CR = 0x10,XFRM_AE_CE = 0x20,XFRM_AE_CU = 0x40,__XFRM_AE_MAX = 0x41,};
typedef struct _xkbModsWireDesc xkbModsWireDesc;
struct xt_comment_info {char comment[256];};
struct xt_pkttype_info {int pkttype;int invert;};
enum xt_policy_flags {XT_POLICY_MATCH_IN = 0x1,XT_POLICY_MATCH_OUT = 0x2,XT_POLICY_MATCH_NONE = 0x4,XT_POLICY_MATCH_STRICT = 0x8,};
enum xt_policy_modes {XT_POLICY_MODE_TRANSPORT = 0x0,XT_POLICY_MODE_TUNNEL = 0x1,};
typedef struct _7086C2867C7D4B0306B00A1789D67F56 xvAttributeInfo;
typedef struct _7801A91C37AF2AAC45BD7DD78FEE34EA xvGrabPortReply;
typedef struct _DEEBBF9E678AFA2413B9A4D363D90472 xvUngrabPortReq;
typedef struct _BE4469CD69A158FEF141EB99E29DC657 xvmcSurfaceInfo;
enum ypbind_resptype {YPBIND_SUCC_VAL = 0x1,YPBIND_FAIL_VAL = 0x2,};
struct AUTH__auth_ops {void (*ah_nextverf)(AUTH *);int (*ah_marshal)(AUTH *, XDR *);int (*ah_validate)(AUTH *, struct opaque_auth *);int (*ah_refresh)(AUTH *);void (*ah_destroy)(AUTH *);};
typedef struct _85FDB541DDB6AD166616600B6EEC2237 Dwarf_Frame_Op;
typedef struct Dwarf_P_Marker_s *Dwarf_P_Marker;
typedef struct Dwarf_Regtable_s Dwarf_Regtable;
enum Dwarf_Rel_Type {dwarf_drt_none = 0x0,dwarf_drt_data_reloc = 0x1,dwarf_drt_segment_rel = 0x2,dwarf_drt_first_of_length_pair = 0x3,dwarf_drt_second_of_length_pair = 0x4,};
typedef unsigned __int64 Dwarf_Unsigned;
typedef struct _D30E1CD2E9753287075FA3466243327C Elf_Options_Hw;
typedef struct _2C76E819DF093E6F4CE4D5F76713877F IXJ_FILTER_RAW;
typedef union _LUNAddr_struct LUNAddr_struct;
enum MACRO_ACLPROC2 {ACLPROC2_GETACL = 1,ACLPROC2_SETACL = 2,ACLPROC2_GETATTR = 3,ACLPROC2_ACCESS = 4,};
enum MACRO_ACLPROC3 {ACLPROC3_GETACL = 1,ACLPROC3_SETACL = 2,};
enum MACRO_AGRR00DB {AGRR00DB = 0x0,};
enum MACRO_AGRR06DB {AGRR06DB = 0x30,};
enum MACRO_ALLPERMS {ALLPERMS = 4095,};
enum MACRO_ALL_MIFS {ALL_MIFS = 65535,};
enum MACRO_ALL_VIFS {ALL_VIFS = 65535,};
enum MACRO_ANNOUNCE {ANNOUNCE = 3,};
enum MACRO_AREGTYPE {AREGTYPE = 0,LNKTYPE = 49,};
enum MACRO_AT_FDCWD {AT_FDCWD = -100,AT_SYMLINK_NOFOLLOW = 256,AT_REMOVEDIR = 512,AT_SYMLINK_FOLLOW = 1024,AT_NO_AUTOMOUNT = 2048,AT_EMPTY_PATH = 4096,AT_EACCESS = 512,};
enum MACRO_AT_STACK {AT_STACK = 0x0,AT_INGRESS = 0x1,AT_EGRESS = 0x2,};
enum MACRO_AUTHTYPE {AUTHTYPE_NULL = 0,AUTHTYPE_KERBEROS_V4 = 1,AUTHTYPE_KERBEROS_V5 = 2,AUTHTYPE_SPX = 3,AUTHTYPE_MINK = 4,AUTHTYPE_CNT = 5,AUTHTYPE_TEST = 99,};
enum MACRO_AllHints {AllHints = 127,XUrgencyHint = 256,};
enum MACRO_ArcChord {ArcChord = 0,ArcPieSlice = 1,};
enum MACRO_B1000000 {B1000000 = 0x1008,};
enum MACRO_B1152000 {B1152000 = 0x1009,};
enum MACRO_B1500000 {B1500000 = 0x100A,};
enum MACRO_B2000000 {B2000000 = 0x100B,};
enum MACRO_B2500000 {B2500000 = 0x100C,};
enum MACRO_B3000000 {B3000000 = 0x100D,};
enum MACRO_B3500000 {B3500000 = 0x100E,};
enum MACRO_B4000000 {B4000000 = 0x100F,};
enum MACRO_BIT_SEG7 {BIT_SEG7_A = 0,BIT_SEG7_B = 1,BIT_SEG7_C = 2,BIT_SEG7_D = 3,BIT_SEG7_E = 4,BIT_SEG7_F = 5,BIT_SEG7_G = 6,BIT_SEG7_RESERVED = 7,};
enum MACRO_BLKIOMIN {BLKIOMIN = 0x1278,};
enum MACRO_BLKIOOPT {BLKIOOPT = 0x1279,};
enum MACRO_BLKRAGET {BLKRAGET = 0x1263,};
enum MACRO_BLKRASET {BLKRASET = 0x1262,};
enum MACRO_BLKROGET {BLKROGET = 0x125E,};
enum MACRO_BLKROSET {BLKROSET = 0x125D,};
enum MACRO_BLKTRACE {BLKTRACE_BDEV_SIZE = 32,};
enum MACRO_BadAlloc {BadAlloc = 11,};
enum MACRO_BadColor {BadColor = 12,};
enum MACRO_BottomIf {BottomIf = 3,Opposite = 4,};
enum MACRO_CACHE_16 {CACHE_16_BIT_GLYPHS = 1,CACHE_ALL_GLYPHS = 2,};
enum MACRO_CALLTYPE {CALLTYPE_INCOMING = 0x1,CALLTYPE_OUTGOING = 0x2,CALLTYPE_CALLBACK = 0x4,};
enum MACRO_CAPIFLAG {CAPIFLAG_HIGHJACKING = 0x1,};
enum MACRO_CAPI_MSG {CAPI_MSG_BASELEN = 8,CAPI_DATA_B3_REQ_LEN = 22,CAPI_DATA_B3_RESP_LEN = 14,CAPI_ALERT = 1,CAPI_CONNECT = 2,CAPI_CONNECT_ACTIVE = 3,CAPI_CONNECT_B3_ACTIVE = 131,CAPI_CONNECT_B3 = 130,CAPI_CONNECT_B3_T90_ACTIVE = 136,CAPI_DATA_B3 = 134,CAPI_DISCONNECT_B3 = 132,CAPI_DISCONNECT = 4,CAPI_FACILITY = 128,CAPI_INFO = 8,CAPI_LISTEN = 5,CAPI_MANUFACTURER = 255,CAPI_RESET_B3 = 135,CAPI_SELECT_B_PROTOCOL = 65,CAPI_REQ = 128,CAPI_CONF = 129,CAPI_IND = 130,CAPI_RESP = 131,CAPI_DISCONNECT_REQ = 1152,CAPI_DISCONNECT_CONF = 1153,CAPI_DISCONNECT_IND = 1154,CAPI_DISCONNECT_RESP = 1155,CAPI_ALERT_REQ = 384,CAPI_ALERT_CONF = 385,CAPI_CONNECT_REQ = 640,CAPI_CONNECT_CONF = 641,CAPI_CONNECT_IND = 642,CAPI_CONNECT_RESP = 643,CAPI_CONNECT_ACTIVE_REQ = 896,CAPI_CONNECT_ACTIVE_CONF = 897,CAPI_CONNECT_ACTIVE_IND = 898,CAPI_CONNECT_ACTIVE_RESP = 899,CAPI_SELECT_B_PROTOCOL_REQ = 16768,CAPI_SELECT_B_PROTOCOL_CONF = 16769,CAPI_CONNECT_B3_ACTIVE_REQ = 33664,CAPI_CONNECT_B3_ACTIVE_CONF = 33665,CAPI_CONNECT_B3_ACTIVE_IND = 33666,CAPI_CONNECT_B3_ACTIVE_RESP = 33667,CAPI_CONNECT_B3_REQ = 33408,CAPI_CONNECT_B3_CONF = 33409,CAPI_CONNECT_B3_IND = 33410,CAPI_CONNECT_B3_RESP = 33411,CAPI_CONNECT_B3_T90_ACTIVE_IND = 34946,CAPI_CONNECT_B3_T90_ACTIVE_RESP = 34947,CAPI_DATA_B3_REQ = 34432,CAPI_DATA_B3_CONF = 34433,CAPI_DATA_B3_IND = 34434,CAPI_DATA_B3_RESP = 34435,CAPI_DISCONNECT_B3_REQ = 33920,CAPI_DISCONNECT_B3_CONF = 33921,CAPI_DISCONNECT_B3_IND = 33922,CAPI_DISCONNECT_B3_RESP = 33923,CAPI_RESET_B3_REQ = 34688,CAPI_RESET_B3_CONF = 34689,CAPI_RESET_B3_IND = 34690,CAPI_RESET_B3_RESP = 34691,CAPI_LISTEN_REQ = 1408,CAPI_LISTEN_CONF = 1409,CAPI_MANUFACTURER_REQ = 65408,CAPI_MANUFACTURER_CONF = 65409,CAPI_MANUFACTURER_IND = 65410,CAPI_MANUFACTURER_RESP = 65411,CAPI_FACILITY_REQ = 32896,CAPI_FACILITY_CONF = 32897,CAPI_FACILITY_IND = 32898,CAPI_FACILITY_RESP = 32899,CAPI_INFO_REQ = 2176,CAPI_INFO_CONF = 2177,CAPI_INFO_IND = 2178,CAPI_INFO_RESP = 2179,};
enum MACRO_CDISCARD {CDISCARD = 15,};
enum MACRO_CESTATUS {CESTATUS_FULL = 0x1,CESTATUS_IMPEXP = 0x2,CESTATUS_EXCEPT = 0x4,CESTATUS_ACCESS = 0x8,CESTATUS_EXENAB = 0x10,CESTATUS_INENAB = 0x20,};
enum MACRO_CONSOLES {MIN_NR_CONSOLES = 1,MAX_NR_CONSOLES = 63,MAX_NR_USER_CONSOLES = 63,};
enum MACRO_CONTINUE {CONTINUE = 3,TRANSIENT = 4,};
enum MACRO_CONTTYPE {CONTTYPE = 55,};
enum MACRO_CPRepeat {CPRepeat = 1,CPAlphaMap = 2,CPAlphaXOrigin = 4,CPAlphaYOrigin = 8,CPClipXOrigin = 16,CPClipYOrigin = 32,CPClipMask = 64,CPGraphicsExposure = 128,CPSubwindowMode = 256,CPPolyEdge = 512,CPPolyMode = 1024,CPDither = 2048,CPComponentAlpha = 4096,};
enum MACRO_CREPRINT {CREPRINT = 18,};
enum MACRO_CS_ASCII {CS_ASCII = 0x0,CS_ISO_8859_1 = 0x1,CS_ISO_8859_2 = 0x2,CS_ISO_8859_3 = 0x3,CS_ISO_8859_4 = 0x4,CS_ISO_8859_5 = 0x5,CS_ISO_8859_6 = 0x6,CS_ISO_8859_7 = 0x7,CS_ISO_8859_8 = 0x8,CS_ISO_8859_9 = 0x9,CS_UNICODE = 0xFF,};
enum MACRO_CURSES_H {CURSES_H = 1,};
enum MACRO_CYCLADES {CYCLADES_MAGIC = 0x4359,};
enum MACRO_CYGETMON {CYGETMON = 0x435901,};
enum MACRO_DSP_BIND {DSP_BIND_QUERY = 0x0,DSP_BIND_FRONT = 0x1,DSP_BIND_SURR = 0x2,DSP_BIND_CENTER_LFE = 0x4,DSP_BIND_HANDSET = 0x8,DSP_BIND_MIC = 0x10,DSP_BIND_MODEM1 = 0x20,DSP_BIND_MODEM2 = 0x40,DSP_BIND_I2S = 0x80,DSP_BIND_SPDIF = 0x100,};
enum MACRO_DT_ALPHA {DT_ALPHA_PLTRO = 1879048192,DT_ALPHA_NUM = 1,};
enum MACRO_DT_PPC64 {DT_PPC64_GLINK = 1879048192,DT_PPC64_OPD = 1879048193,DT_PPC64_OPDSZ = 1879048194,DT_PPC64_NUM = 3,};
enum MACRO_DT_SPARC {DT_SPARC_REGISTER = 0x70000001,DT_SPARC_NUM = 0x2,};
enum MACRO_DvString {DvString = 1,};
enum MACRO_E820_RAM {E820_RAM = 1,E820_RESERVED = 2,E820_ACPI = 3,E820_NVS = 4,E820_UNUSABLE = 5,E820_RESERVED_KERN = 128,};
enum MACRO_EDDMAXNR {EDDMAXNR = 6,EDDEXTSIZE = 8,};
enum MACRO_EF_ALPHA {EF_ALPHA_32BIT = 1,EF_ALPHA_CANRELAX = 2,};
enum MACRO_EI_CLASS {EI_CLASS = 4,};
enum MACRO_ELFOSABI {ELFOSABI_NONE = 0,ELFOSABI_SYSV = 0,ELFOSABI_HPUX = 1,ELFOSABI_NETBSD = 2,ELFOSABI_GNU = 3,ELFOSABI_LINUX = 3,ELFOSABI_SOLARIS = 6,ELFOSABI_AIX = 7,ELFOSABI_IRIX = 8,ELFOSABI_FREEBSD = 9,ELFOSABI_TRU64 = 10,ELFOSABI_MODESTO = 11,ELFOSABI_OPENBSD = 12,ELFOSABI_ARM_AEABI = 64,ELFOSABI_ARM = 97,ELFOSABI_STANDALONE = 255,};
enum MACRO_ELF_NOTE {ELF_NOTE_ABI = 1,ELF_NOTE_OS_LINUX = 0,ELF_NOTE_OS_GNU = 1,ELF_NOTE_OS_SOLARIS2 = 2,ELF_NOTE_OS_FREEBSD = 3,};
enum MACRO_ENCODING {ENCODING_DEFAULT = 0,ENCODING_NRZ = 1,ENCODING_NRZI = 2,ENCODING_FM_MARK = 3,ENCODING_FM_SPACE = 4,ENCODING_MANCHESTER = 5,};
enum MACRO_ENOSPACE {ENOSPACE = 3,EBADOP = 4,};
enum MACRO_ERR_NONE {ERR_NONE = 0,ERR_ALREADY_BOOT = 1000,};
enum MACRO_ETHERMIN {ETHERMIN = 46,};
enum MACRO_ETHERMTU {ETHERMTU = 1500,};
enum MACRO_ETH_MDIO {ETH_MDIO_SUPPORTS_C22 = 1,ETH_MDIO_SUPPORTS_C45 = 2,};
enum MACRO_EXCHGID4 {EXCHGID4_FLAG_SUPP_MOVED_REFER = 0x1,EXCHGID4_FLAG_SUPP_MOVED_MIGR = 0x2,EXCHGID4_FLAG_BIND_PRINC_STATEID = 0x100,EXCHGID4_FLAG_USE_NON_PNFS = 0x10000,EXCHGID4_FLAG_USE_PNFS_MDS = 0x20000,EXCHGID4_FLAG_USE_PNFS_DS = 0x40000,EXCHGID4_FLAG_MASK_PNFS = 0x70000,EXCHGID4_FLAG_UPD_CONFIRMED_REC_A = 0x40000000,EXCHGID4_FLAG_CONFIRMED_R = 0x80000000,EXCHGID4_FLAG_MASK_A = 0x40070103,EXCHGID4_FLAG_MASK_R = 0x80070103,};
enum MACRO_EXTENDED {EXTENDED_SAP = 0xAA,};
enum MACRO_FANOTIFY {FANOTIFY_METADATA_VERSION = 3,};
enum MACRO_FC_FRAME {FC_FRAME_HEADER_LEN = 24,FC_MAX_PAYLOAD = 2112,FC_MIN_MAX_PAYLOAD = 256,FC_MAX_FRAME = 2136,FC_MIN_MAX_FRAME = 280,FC_FID_WELL_KNOWN_MAX = 16777215,FC_FID_WELL_KNOWN_BASE = 16777205,FC_FID_DOM_MGR = 16776192,FC_FID_DOMAIN = 0,FC_FID_PORT = 1,FC_FID_LINK = 2,FC_XID_UNKNOWN = 65535,FC_XID_MIN = 0,FC_XID_MAX = 65534,FC_FC_EX_CTX = 8388608,FC_FC_SEQ_CTX = 4194304,FC_FC_FIRST_SEQ = 2097152,FC_FC_LAST_SEQ = 1048576,FC_FC_END_SEQ = 524288,FC_FC_END_CONN = 262144,FC_FC_RES_B17 = 131072,FC_FC_SEQ_INIT = 65536,FC_FC_X_ID_REASS = 32768,FC_FC_X_ID_INVAL = 16384,FC_FC_ACK_1 = 4096,FC_FC_ACK_N = 8192,FC_FC_ACK_0 = 12288,FC_FC_RES_B11 = 2048,FC_FC_RES_B10 = 1024,FC_FC_RETX_SEQ = 512,FC_FC_UNI_TX = 256,FC_FC_REL_OFF = 8,FC_FC_RES2 = 4,FC_BA_SEQ_ID_VAL = 128,FC_DEF_E_D_TOV = 2000,FC_DEF_R_A_TOV = 10000,FC_CT_HDR_LEN = 16,FC_NS_SUBTYPE = 2,FC_NS_FID_LAST = 128,FC_NS_TYPES = 256,FC_NS_BPW = 32,FC_DEFAULT_BSG_TIMEOUT = 1000,FC_BSG_CLS_MASK = -268435456,FC_BSG_HST_MASK = -2147483648,FC_BSG_RPT_MASK = 1073741824,FC_BSG_HST_ADD_RPORT = -2147483647,FC_BSG_HST_DEL_RPORT = -2147483646,FC_BSG_HST_ELS_NOLOGIN = -2147483645,FC_BSG_HST_CT = -2147483644,FC_BSG_HST_VENDOR = -2147483393,FC_BSG_RPT_ELS = 1073741825,FC_BSG_RPT_CT = 1073741826,FC_CTELS_STATUS_OK = 0,FC_CTELS_STATUS_REJECT = 1,FC_CTELS_STATUS_P_RJT = 2,FC_CTELS_STATUS_F_RJT = 3,FC_CTELS_STATUS_P_BSY = 4,FC_CTELS_STATUS_F_BSY = 6,};
enum MACRO_FDCLRPRM {FDCLRPRM = 577,};
enum MACRO_FDFMTBEG {FDFMTBEG = 583,};
enum MACRO_FDFMTEND {FDFMTEND = 585,};
enum MACRO_FDMSGOFF {FDMSGOFF = 582,};
enum MACRO_FDRAWCMD {FDRAWCMD = 600,};
enum MACRO_FD_RESET {FD_RESET_DELAY = 20,};
enum MACRO_FIFOTYPE {FIFOTYPE = 54,};
enum MACRO_FIOASYNC {FIOASYNC = 0x5452,};
enum MACRO_FIONCLEX {FIONCLEX = 0x5450,};
enum MACRO_FIONREAD {FIONREAD = 0x541B,};
enum MACRO_FIOQSIZE {FIOQSIZE = 0x5460,};
enum MACRO_FLOW_EXT {FLOW_EXT = 0x80000000,FLOW_MAC_EXT = 0x40000000,};
enum MACRO_FS_DQUOT {FS_DQUOT_VERSION = 1,FS_DQ_ISOFT = 1,FS_DQ_IHARD = 2,FS_DQ_BSOFT = 4,FS_DQ_BHARD = 8,FS_DQ_RTBSOFT = 16,FS_DQ_RTBHARD = 32,FS_DQ_LIMIT_MASK = 63,FS_DQ_BTIMER = 64,FS_DQ_ITIMER = 128,FS_DQ_RTBTIMER = 256,FS_DQ_TIMER_MASK = 448,FS_DQ_BWARNS = 512,FS_DQ_IWARNS = 1024,FS_DQ_RTBWARNS = 2048,FS_DQ_WARNS_MASK = 3584,FS_DQ_BCOUNT = 4096,FS_DQ_ICOUNT = 8192,FS_DQ_RTBCOUNT = 16384,FS_DQ_ACCT_MASK = 28672,FS_QUOTA_UDQ_ACCT = 1,FS_QUOTA_UDQ_ENFD = 2,FS_QUOTA_GDQ_ACCT = 4,FS_QUOTA_GDQ_ENFD = 8,FS_QUOTA_PDQ_ACCT = 16,FS_QUOTA_PDQ_ENFD = 32,FS_USER_QUOTA = 1,FS_PROJ_QUOTA = 2,FS_GROUP_QUOTA = 4,FS_QSTAT_VERSION = 1,};
enum MACRO_FS_Reply {FS_Reply = 0,FS_Error = 1,FS_Event = 2,FS_Noop = 0,FS_ListExtensions = 1,FS_QueryExtension = 2,FS_ListCatalogues = 3,FS_SetCatalogues = 4,FS_GetCatalogues = 5,FS_SetEventMask = 6,FS_GetEventMask = 7,FS_CreateAC = 8,FS_FreeAC = 9,FS_SetAuthorization = 10,FS_SetResolution = 11,FS_GetResolution = 12,FS_ListFonts = 13,FS_ListFontsWithXInfo = 14,FS_OpenBitmapFont = 15,FS_QueryXInfo = 16,FS_QueryXExtents8 = 17,FS_QueryXExtents16 = 18,FS_QueryXBitmaps8 = 19,FS_QueryXBitmaps16 = 20,FS_CloseFont = 21,};
enum MACRO_FS_SECRM {FS_SECRM_FL = 0x1,FS_UNRM_FL = 0x2,FS_COMPR_FL = 0x4,FS_SYNC_FL = 0x8,FS_IMMUTABLE_FL = 0x10,FS_APPEND_FL = 0x20,FS_NODUMP_FL = 0x40,FS_NOATIME_FL = 0x80,FS_DIRTY_FL = 0x100,FS_COMPRBLK_FL = 0x200,FS_NOCOMP_FL = 0x400,FS_ECOMPR_FL = 0x800,FS_BTREE_FL = 0x1000,FS_INDEX_FL = 0x1000,FS_IMAGIC_FL = 0x2000,FS_JOURNAL_DATA_FL = 0x4000,FS_NOTAIL_FL = 0x8000,FS_DIRSYNC_FL = 0x10000,FS_TOPDIR_FL = 0x20000,FS_EXTENT_FL = 0x80000,FS_DIRECTIO_FL = 0x100000,FS_NOCOW_FL = 0x800000,FS_RESERVED_FL = 0x80000000,FS_FL_USER_VISIBLE = 0x3DFFF,FS_FL_USER_MODIFIABLE = 0x380FF,};
enum MACRO_F_SETOWN {F_SETOWN = 8,F_GETOWN = 9,};
enum MACRO_F_SETSIG {F_SETSIG = 10,F_GETSIG = 11,F_SETOWN_EX = 15,F_GETOWN_EX = 16,F_SETLEASE = 1024,F_GETLEASE = 1025,F_NOTIFY = 1026,F_SETPIPE_SZ = 1031,F_GETPIPE_SZ = 1032,F_DUPFD_CLOEXEC = 1030,};
enum MACRO_FocusOut {FocusOut = 10,};
enum MACRO_GADGETFS {GADGETFS_FIFO_STATUS = 26369,GADGETFS_FIFO_FLUSH = 26370,GADGETFS_CLEAR_HALT = 26371,};
enum MACRO_GAIN00DB {GAIN00DB = 0x6,};
enum MACRO_GAIN02DB {GAIN02DB = 0x5,};
enum MACRO_GAIN06DB {GAIN06DB = 0x3,GAIN04DB = 0x4,};
enum MACRO_GAIN12DB {GAIN12DB = 0x0,GAIN10DB = 0x1,GAIN08DB = 0x2,};
enum MACRO_GAMEPORT {GAMEPORT_MODE_DISABLED = 0,GAMEPORT_MODE_RAW = 1,GAMEPORT_MODE_COOKED = 2,GAMEPORT_ID_VENDOR_ANALOG = 1,GAMEPORT_ID_VENDOR_MADCATZ = 2,GAMEPORT_ID_VENDOR_LOGITECH = 3,GAMEPORT_ID_VENDOR_CREATIVE = 4,GAMEPORT_ID_VENDOR_GENIUS = 5,GAMEPORT_ID_VENDOR_INTERACT = 6,GAMEPORT_ID_VENDOR_MICROSOFT = 7,GAMEPORT_ID_VENDOR_THRUSTMASTER = 8,GAMEPORT_ID_VENDOR_GRAVIS = 9,GAMEPORT_ID_VENDOR_GUILLEMOT = 10,};
enum MACRO_GXinvert {GXinvert = 0xA,};
enum MACRO_HDLC_MAX {HDLC_MAX_FRAME_SIZE = 65535,};
enum MACRO_HDR_SIZE {RFC1201_HDR_SIZE = 4,RFC1051_HDR_SIZE = 1,ETH_ENCAP_HDR_SIZE = 14,ARC_HDR_SIZE = 4,};
enum MACRO_HUB_CHAR {HUB_CHAR_LPSM = 0x3,HUB_CHAR_COMMON_LPSM = 0x0,HUB_CHAR_INDV_PORT_LPSM = 0x1,HUB_CHAR_NO_LPSM = 0x2,HUB_CHAR_COMPOUND = 0x4,HUB_CHAR_OCPM = 0x18,HUB_CHAR_COMMON_OCPM = 0x0,HUB_CHAR_INDV_PORT_OCPM = 0x8,HUB_CHAR_NO_OCPM = 0x10,HUB_CHAR_TTTT = 0x60,HUB_CHAR_PORTIND = 0x80,HUB_STATUS_LOCAL_POWER = 0x1,HUB_STATUS_OVERCURRENT = 0x2,HUB_CHANGE_LOCAL_POWER = 0x1,HUB_CHANGE_OVERCURRENT = 0x2,};
enum MACRO_ICMP6_RR {ICMP6_RR_PCOUSE_RAFLAGS_ONLINK = 0x20,ICMP6_RR_PCOUSE_RAFLAGS_AUTO = 0x10,ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME = 0x80,ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME = 0x40,ICMP6_RR_RESULT_FLAGS_OOB = 0x200,ICMP6_RR_RESULT_FLAGS_FORBIDDEN = 0x100,};
enum MACRO_ICMP_NET {ICMP_NET_UNREACH = 0,ICMP_HOST_UNREACH = 1,ICMP_PROT_UNREACH = 2,ICMP_PORT_UNREACH = 3,ICMP_FRAG_NEEDED = 4,ICMP_SR_FAILED = 5,ICMP_NET_UNKNOWN = 6,ICMP_HOST_UNKNOWN = 7,ICMP_HOST_ISOLATED = 8,ICMP_NET_ANO = 9,ICMP_HOST_ANO = 10,ICMP_NET_UNR_TOS = 11,ICMP_HOST_UNR_TOS = 12,ICMP_PKT_FILTERED = 13,ICMP_PREC_VIOLATION = 14,ICMP_PREC_CUTOFF = 15,};
enum MACRO_IEEE1284 {IEEE1284_MODE_NIBBLE = 0,IEEE1284_MODE_BYTE = 1,IEEE1284_MODE_COMPAT = 256,IEEE1284_MODE_BECP = 512,IEEE1284_MODE_ECP = 16,IEEE1284_MODE_ECPRLE = 48,IEEE1284_MODE_ECPSWE = 1024,IEEE1284_MODE_EPP = 64,IEEE1284_MODE_EPPSL = 2048,IEEE1284_MODE_EPPSWE = 4096,IEEE1284_DEVICEID = 4,IEEE1284_EXT_LINK = 16384,IEEE1284_ADDR = 8192,IEEE1284_DATA = 0,};
enum MACRO_IGMP_AGE {IGMP_AGE_THRESHOLD = 400,};
enum MACRO_INFINITY {RLIM_INFINITY = -1,RLIM64_INFINITY = -1,};
enum MACRO_IPDEFTTL {IPDEFTTL = 64,};
enum MACRO_IPOPT_TS {IPOPT_TS_TSONLY = 0,IPOPT_TS_TSANDADDR = 1,IPOPT_TS_PRESPEC = 3,IPOPT_SECUR_UNCLASS = 0,IPOPT_SECUR_CONFID = 61749,IPOPT_SECUR_EFTO = 30874,IPOPT_SECUR_MMMM = 48205,IPOPT_SECUR_RESTR = 44819,IPOPT_SECUR_SECRET = 55176,IPOPT_SECUR_TOPSECRET = 27589,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,};
enum MACRO_IPV6_TLV {IPV6_TLV_TNL_ENCAP_LIMIT = 4,IPV6_DEFAULT_TNL_ENCAP_LIMIT = 4,};
enum MACRO_IRNAMSIZ {IRNAMSIZ = 16,};
enum MACRO_ISDN_NET {ISDN_NET_ENCAP_ETHER = 0,ISDN_NET_ENCAP_RAWIP = 1,ISDN_NET_ENCAP_IPTYP = 2,ISDN_NET_ENCAP_CISCOHDLC = 3,ISDN_NET_ENCAP_SYNCPPP = 4,ISDN_NET_ENCAP_UIHDLC = 5,ISDN_NET_ENCAP_CISCOHDLCK = 6,ISDN_NET_ENCAP_X25IFACE = 7,ISDN_NET_ENCAP_MAX_ENCAP = 7,ISDN_USAGE_NONE = 0,ISDN_USAGE_RAW = 1,ISDN_USAGE_MODEM = 2,ISDN_USAGE_NET = 3,ISDN_USAGE_VOICE = 4,ISDN_USAGE_FAX = 5,ISDN_USAGE_MASK = 7,ISDN_USAGE_DISABLED = 32,ISDN_USAGE_EXCLUSIVE = 64,ISDN_USAGE_OUTGOING = 128,ISDN_MODEM_NUMREG = 24,ISDN_LMSNLEN = 255,ISDN_CMSGLEN = 50,ISDN_MSNLEN = 32,};
enum MACRO_ISDN_PPP {ISDN_PPP_COMP_MAX_OPTIONS = 16,};
enum MACRO_KDENABIO {KDENABIO = 0x4B36,};
enum MACRO_KDFONTOP {KDFONTOP = 0x4B72,};
enum MACRO_KDGETLED {KDGETLED = 0x4B31,};
enum MACRO_KDGKBENT {KDGKBENT = 0x4B46,};
enum MACRO_KDGKBLED {KDGKBLED = 0x4B64,};
enum MACRO_KDKBDREP {KDKBDREP = 0x4B52,};
enum MACRO_KDMKTONE {KDMKTONE = 0x4B30,};
enum MACRO_KDSETLED {KDSETLED = 0x4B32,};
enum MACRO_KDSKBENT {KDSKBENT = 0x4B47,};
enum MACRO_KDSKBLED {KDSKBLED = 0x4B65,};
enum MACRO_KEYBYTES {KEYBYTES = 24,};
enum MACRO_KEY_PROG {KEY_PROG = 100029,KEY_VERS = 1,KEY_SET = 1,KEY_ENCRYPT = 2,KEY_DECRYPT = 3,KEY_GEN = 4,KEY_GETCRED = 5,KEY_VERS2 = 2,KEY_ENCRYPT_PK = 6,KEY_DECRYPT_PK = 7,KEY_NET_PUT = 8,KEY_NET_GET = 9,KEY_GET_CONV = 10,};
enum MACRO_KEY_SPEC {KEY_SPEC_THREAD_KEYRING = -1,KEY_SPEC_PROCESS_KEYRING = -2,KEY_SPEC_SESSION_KEYRING = -3,KEY_SPEC_USER_KEYRING = -4,KEY_SPEC_USER_SESSION_KEYRING = -5,KEY_SPEC_GROUP_KEYRING = -6,KEY_SPEC_REQKEY_AUTH_KEY = -7,KEY_SPEC_REQUESTOR_KEYRING = -8,KEY_REQKEY_DEFL_NO_CHANGE = -1,KEY_REQKEY_DEFL_DEFAULT = 0,KEY_REQKEY_DEFL_THREAD_KEYRING = 1,KEY_REQKEY_DEFL_PROCESS_KEYRING = 2,KEY_REQKEY_DEFL_SESSION_KEYRING = 3,KEY_REQKEY_DEFL_USER_KEYRING = 4,KEY_REQKEY_DEFL_USER_SESSION_KEYRING = 5,KEY_REQKEY_DEFL_GROUP_KEYRING = 6,KEY_REQKEY_DEFL_REQUESTOR_KEYRING = 7,};
enum MACRO_K_DGRAVE {K_DGRAVE = 1024,K_DACUTE = 1025,K_DCIRCM = 1026,K_DTILDE = 1027,K_DDIERE = 1028,K_DCEDIL = 1029,};
enum MACRO_KeyClass {KeyClass = 0,ButtonClass = 1,ValuatorClass = 2,};
enum MACRO_KeyPress {KeyPress = 2,};
enum MACRO_LPGETIRQ {LPGETIRQ = 0x606,};
enum MACRO_LPSETIRQ {LPSETIRQ = 0x605,};
enum MACRO_LSBFirst {LSBFirst = 0,MSBFirst = 1,};
enum MACRO_LbxEvent {LbxEvent = 0,LbxQuickMotionDeltaEvent = 1,LbxNumberEvents = 2,};
enum MACRO_MAP_HUGE {MAP_HUGE_SHIFT = 26,MAP_HUGE_MASK = 63,};
enum MACRO_MATROXFB {MATROXFB_OUTPUT_PRIMARY = 0x0,MATROXFB_OUTPUT_SECONDARY = 0x1,MATROXFB_OUTPUT_DFP = 0x2,MATROXFB_OUTPUT_MODE_PAL = 0x1,MATROXFB_OUTPUT_MODE_NTSC = 0x2,MATROXFB_OUTPUT_MODE_MONITOR = 0x80,MATROXFB_OUTPUT_CONN_PRIMARY = 0x1,MATROXFB_OUTPUT_CONN_SECONDARY = 0x2,MATROXFB_OUTPUT_CONN_DFP = 0x4,};
enum MACRO_MAXSHORT {MAXSHORT = 32767,};
enum MACRO_MAX_ADDR {MAX_ADDR_LEN = 7,};
enum MACRO_MAX_CHAN {MAX_CHAN = 64,};
enum MACRO_MAX_HPET {MAX_HPET_TBS = 8,};
enum MACRO_MAX_LIFE {MAX_LIFE = 60,};
enum MACRO_MAX_NAME {MAX_NAME_SIZE = 512,MAX_ENTRY_SIZE = 4096,MAX_ALIAS = 14,MAX_DEBUG_LEVEL = 15,};
enum MACRO_MAX_PATH {MAX_PATH_LEN = 1024,MAX_FILEID = 32,};
enum MACRO_MAX_RAND {MAX_RAND = 3,};
enum MACRO_MGSL_MAX {MGSL_MAX_SERIAL_NUMBER = 30,};
enum MACRO_MIDI_CAP {MIDI_CAP_MPU401 = 1,};
enum MACRO_MINSHORT {MINSHORT = -32767,};
enum MACRO_MSR_EFER {MSR_EFER = 0xC0000080,MSR_STAR = 0xC0000081,MSR_LSTAR = 0xC0000082,MSR_CSTAR = 0xC0000083,MSR_SYSCALL_MASK = 0xC0000084,MSR_FS_BASE = 0xC0000100,MSR_GS_BASE = 0xC0000101,MSR_KERNEL_GS_BASE = 0xC0000102,MSR_TSC_AUX = 0xC0000103,};
enum MACRO_MSR_IA32 {MSR_IA32_PERFCTR0 = 0xC1,MSR_IA32_PERFCTR1 = 0xC2,MSR_FSB_FREQ = 0xCD,MSR_NHM_PLATFORM_INFO = 0xCE,MSR_NHM_SNB_PKG_CST_CFG_CTL = 0xE2,};
enum MACRO_MTMKPART {MTMKPART = 34,};
enum MACRO_MTSETBLK {MTSETBLK = 20,};
enum MACRO_MTUNLOAD {MTUNLOAD = 31,MTCOMPRESSION = 32,};
enum MACRO_MTUNLOCK {MTUNLOCK = 29,};
enum MACRO_MVWDELCH {MVWDELCH_IS_EXPRESSION = 1,};
enum MACRO_NEGATIVE {XTestX_NEGATIVE = 0x4,XTestY_NEGATIVE = 0x8,};
enum MACRO_NETCONFA {NETCONFA_IFINDEX_ALL = -1,NETCONFA_IFINDEX_DEFAULT = -2,};
enum MACRO_NFS2MODE {NFS2MODE_FMT = 0xF000,NFS2MODE_DIR = 0x4000,NFS2MODE_CHR = 0x2000,NFS2MODE_BLK = 0x6000,NFS2MODE_REG = 0x8000,NFS2MODE_LNK = 0xA000,NFS2MODE_SOCK = 0xC000,NFS2MODE_FIFO = 0x1000,};
enum MACRO_NFS3MODE {NFS3MODE_FMT = 0xF000,NFS3MODE_DIR = 0x4000,NFS3MODE_CHR = 0x2000,NFS3MODE_BLK = 0x6000,NFS3MODE_REG = 0x8000,NFS3MODE_LNK = 0xA000,NFS3MODE_SOCK = 0xC000,NFS3MODE_FIFO = 0x1000,};
enum MACRO_NFS3PROC {NFS3PROC_NULL = 0,NFS3PROC_GETATTR = 1,NFS3PROC_SETATTR = 2,NFS3PROC_LOOKUP = 3,NFS3PROC_ACCESS = 4,NFS3PROC_READLINK = 5,NFS3PROC_READ = 6,NFS3PROC_WRITE = 7,NFS3PROC_CREATE = 8,NFS3PROC_MKDIR = 9,NFS3PROC_SYMLINK = 10,NFS3PROC_MKNOD = 11,NFS3PROC_REMOVE = 12,NFS3PROC_RMDIR = 13,NFS3PROC_RENAME = 14,NFS3PROC_LINK = 15,NFS3PROC_READDIR = 16,NFS3PROC_READDIRPLUS = 17,NFS3PROC_FSSTAT = 18,NFS3PROC_FSINFO = 19,NFS3PROC_PATHCONF = 20,NFS3PROC_COMMIT = 21,};
enum MACRO_NFS4_ACE {NFS4_ACE_FILE_INHERIT_ACE = 0x1,NFS4_ACE_DIRECTORY_INHERIT_ACE = 0x2,NFS4_ACE_NO_PROPAGATE_INHERIT_ACE = 0x4,NFS4_ACE_INHERIT_ONLY_ACE = 0x8,NFS4_ACE_SUCCESSFUL_ACCESS_ACE_FLAG = 0x10,NFS4_ACE_FAILED_ACCESS_ACE_FLAG = 0x20,NFS4_ACE_IDENTIFIER_GROUP = 0x40,NFS4_ACE_READ_DATA = 0x1,NFS4_ACE_LIST_DIRECTORY = 0x1,NFS4_ACE_WRITE_DATA = 0x2,NFS4_ACE_ADD_FILE = 0x2,NFS4_ACE_APPEND_DATA = 0x4,NFS4_ACE_ADD_SUBDIRECTORY = 0x4,NFS4_ACE_READ_NAMED_ATTRS = 0x8,NFS4_ACE_WRITE_NAMED_ATTRS = 0x10,NFS4_ACE_EXECUTE = 0x20,NFS4_ACE_DELETE_CHILD = 0x40,NFS4_ACE_READ_ATTRIBUTES = 0x80,NFS4_ACE_WRITE_ATTRIBUTES = 0x100,NFS4_ACE_DELETE = 0x10000,NFS4_ACE_READ_ACL = 0x20000,NFS4_ACE_WRITE_ACL = 0x40000,NFS4_ACE_WRITE_OWNER = 0x80000,NFS4_ACE_SYNCHRONIZE = 0x100000,NFS4_ACE_GENERIC_READ = 0x120081,NFS4_ACE_GENERIC_WRITE = 0x160106,NFS4_ACE_GENERIC_EXECUTE = 0x1200A0,NFS4_ACE_MASK_ALL = 0x1F01FF,};
enum MACRO_NIS_PROG {NIS_PROG = 100300,NIS_VERSION = 3,NIS_LOOKUP = 1,NIS_ADD = 2,NIS_MODIFY = 3,NIS_REMOVE = 4,NIS_IBLIST = 5,NIS_IBADD = 6,NIS_IBMODIFY = 7,NIS_IBREMOVE = 8,NIS_IBFIRST = 9,NIS_IBNEXT = 10,NIS_FINDDIRECTORY = 12,NIS_STATUS = 14,NIS_DUMPLOG = 15,NIS_DUMP = 16,NIS_CALLBACK = 17,NIS_CPTIME = 18,NIS_CHECKPOINT = 19,NIS_PING = 20,NIS_SERVSTATE = 21,NIS_MKDIR = 22,NIS_RMDIR = 23,NIS_UPDKEYS = 24,};
enum MACRO_NIS_READ {NIS_READ_ACC = 1,NIS_MODIFY_ACC = 2,NIS_CREATE_ACC = 4,NIS_DESTROY_ACC = 8,};
enum MACRO_NO_CACHE {NO_CACHE = 16,};
enum MACRO_NO_SENSE {NO_SENSE = 0x0,};
enum MACRO_NR_ASCII {NR_ASCII = 26,};
enum MACRO_NR_SHIFT {NR_SHIFT = 9,NR_KEYS = 256,};
enum MACRO_NTELOPTS {NTELOPTS = 40,};
enum MACRO_NULLPROC {NULLPROC = 0,UDPMSGSIZE = 8800,};
enum MACRO_NUMCOUNT {NUMCOUNT = 39,};
enum MACRO_NUMWRITE {NUMWRITE = 33,STRWRITE = 394,};
enum MACRO_NWAYTEST {NWAYTEST_RESV1 = 0xFF,NWAYTEST_LOOPBACK = 0x100,NWAYTEST_RESV2 = 0xFE00,};
enum MACRO_NoExpose {NoExpose = 14,};
enum MACRO_NoSymbol {NoSymbol = 0,};
enum MACRO_NullFont {NullFont = 0,};
enum MACRO_OMAP3ISP {OMAP3ISP_AEWB_MAX_SATURATION_LIM = 1023,OMAP3ISP_AEWB_MIN_WIN_H = 2,OMAP3ISP_AEWB_MAX_WIN_H = 256,OMAP3ISP_AEWB_MIN_WIN_W = 6,OMAP3ISP_AEWB_MAX_WIN_W = 256,OMAP3ISP_AEWB_MIN_WINVC = 1,OMAP3ISP_AEWB_MIN_WINHC = 1,OMAP3ISP_AEWB_MAX_WINVC = 128,OMAP3ISP_AEWB_MAX_WINHC = 36,OMAP3ISP_AEWB_MAX_WINSTART = 4095,OMAP3ISP_AEWB_MIN_SUB_INC = 2,OMAP3ISP_AEWB_MAX_SUB_INC = 32,OMAP3ISP_AEWB_MAX_BUF_SIZE = 83600,OMAP3ISP_AF_IIRSH_MIN = 0,OMAP3ISP_AF_IIRSH_MAX = 4095,OMAP3ISP_AF_PAXEL_HORIZONTAL_COUNT_MIN = 1,OMAP3ISP_AF_PAXEL_HORIZONTAL_COUNT_MAX = 36,OMAP3ISP_AF_PAXEL_VERTICAL_COUNT_MIN = 1,OMAP3ISP_AF_PAXEL_VERTICAL_COUNT_MAX = 128,OMAP3ISP_AF_PAXEL_INCREMENT_MIN = 2,OMAP3ISP_AF_PAXEL_INCREMENT_MAX = 32,OMAP3ISP_AF_PAXEL_HEIGHT_MIN = 2,OMAP3ISP_AF_PAXEL_HEIGHT_MAX = 256,OMAP3ISP_AF_PAXEL_WIDTH_MIN = 16,OMAP3ISP_AF_PAXEL_WIDTH_MAX = 256,OMAP3ISP_AF_PAXEL_HZSTART_MIN = 1,OMAP3ISP_AF_PAXEL_HZSTART_MAX = 4095,OMAP3ISP_AF_PAXEL_VTSTART_MIN = 0,OMAP3ISP_AF_PAXEL_VTSTART_MAX = 4095,OMAP3ISP_AF_THRESHOLD_MAX = 255,OMAP3ISP_AF_COEF_MAX = 4095,OMAP3ISP_AF_PAXEL_SIZE = 48,OMAP3ISP_AF_MAX_BUF_SIZE = 221184,OMAP3ISP_HIST_BINS_32 = 0,OMAP3ISP_HIST_BINS_64 = 1,OMAP3ISP_HIST_BINS_128 = 2,OMAP3ISP_HIST_BINS_256 = 3,OMAP3ISP_HIST_MEM_SIZE = 1024,OMAP3ISP_HIST_MIN_REGIONS = 1,OMAP3ISP_HIST_MAX_REGIONS = 4,OMAP3ISP_HIST_MAX_WB_GAIN = 255,OMAP3ISP_HIST_MIN_WB_GAIN = 0,OMAP3ISP_HIST_MAX_BIT_WIDTH = 14,OMAP3ISP_HIST_MIN_BIT_WIDTH = 8,OMAP3ISP_HIST_MAX_WG = 4,OMAP3ISP_HIST_MAX_BUF_SIZE = 4096,OMAP3ISP_HIST_SOURCE_CCDC = 0,OMAP3ISP_HIST_SOURCE_MEM = 1,OMAP3ISP_HIST_CFA_BAYER = 0,OMAP3ISP_HIST_CFA_FOVEONX3 = 1,OMAP3ISP_AF_NUM_COEF = 11,OMAP3ISP_CCDC_ALAW = 1,OMAP3ISP_CCDC_LPF = 2,OMAP3ISP_CCDC_BLCLAMP = 4,OMAP3ISP_CCDC_BCOMP = 8,OMAP3ISP_CCDC_FPC = 16,OMAP3ISP_CCDC_CULL = 32,OMAP3ISP_CCDC_CONFIG_LSC = 128,OMAP3ISP_CCDC_TBL_LSC = 256,OMAP3ISP_RGB_MAX = 3,OMAP3ISP_PREV_LUMAENH = 1,OMAP3ISP_PREV_INVALAW = 2,OMAP3ISP_PREV_HRZ_MED = 4,OMAP3ISP_PREV_CFA = 8,OMAP3ISP_PREV_CHROMA_SUPP = 16,OMAP3ISP_PREV_WB = 32,OMAP3ISP_PREV_BLKADJ = 64,OMAP3ISP_PREV_RGB2RGB = 128,OMAP3ISP_PREV_COLOR_CONV = 256,OMAP3ISP_PREV_YC_LIMIT = 512,OMAP3ISP_PREV_DEFECT_COR = 1024,OMAP3ISP_PREV_DRK_FRM_CAPTURE = 4096,OMAP3ISP_PREV_DRK_FRM_SUBTRACT = 8192,OMAP3ISP_PREV_LENS_SHADING = 16384,OMAP3ISP_PREV_NF = 32768,OMAP3ISP_PREV_GAMMA = 65536,OMAP3ISP_PREV_NF_TBL_SIZE = 64,OMAP3ISP_PREV_CFA_TBL_SIZE = 576,OMAP3ISP_PREV_CFA_BLK_SIZE = 144,OMAP3ISP_PREV_GAMMA_TBL_SIZE = 1024,OMAP3ISP_PREV_YENH_TBL_SIZE = 128,OMAP3ISP_PREV_DETECT_CORRECT_CHANNELS = 4,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_PKT_CTRL {PKT_CTRL_CMD_SETUP = 0,PKT_CTRL_CMD_TEARDOWN = 1,PKT_CTRL_CMD_STATUS = 2,};
enum MACRO_PMAPPORT {PMAPPORT = 111,};
enum MACRO_PMAPPROC {PMAPPROC_NULL = 0,PMAPPROC_SET = 1,PMAPPROC_UNSET = 2,PMAPPROC_GETPORT = 3,PMAPPROC_DUMP = 4,PMAPPROC_CALLIT = 5,};
enum MACRO_PMAPPROG {PMAPPROG = 100000,};
enum MACRO_PMAPVERS {PMAPVERS = 2,};
enum MACRO_PN_PROTO {PN_PROTO_TRANSPORT = 0,PN_PROTO_PHONET = 1,PN_PROTO_PIPE = 2,};
enum MACRO_POINTERS {SAVE_POINTERS = 0x2,RESTORE_POINTERS = 0x3,};
enum MACRO_POLLFREE {POLLFREE = 0x4000,};
enum MACRO_PROT_SEM {PROT_SEM = 0x8,};
enum MACRO_PictOpIn {PictOpIn = 5,};
enum MACRO_RDS_INFO {RDS_INFO_MESSAGE_FLAG_ACK = 0x1,RDS_INFO_MESSAGE_FLAG_FAST_ACK = 0x2,RDS_IB_GID_LEN = 0x10,RDS_CONG_MONITOR_SIZE = 0x40,RDS_RDMA_SUCCESS = 0x0,RDS_RDMA_REMOTE_ERROR = 0x1,RDS_RDMA_CANCELED = 0x2,RDS_RDMA_DROPPED = 0x3,RDS_RDMA_OTHER_ERROR = 0x4,RDS_RDMA_READWRITE = 0x1,RDS_RDMA_FENCE = 0x2,RDS_RDMA_INVALIDATE = 0x4,RDS_RDMA_USE_ONCE = 0x8,RDS_RDMA_DONTWAIT = 0x10,RDS_RDMA_NOTIFY_ME = 0x20,RDS_RDMA_SILENT = 0x40,};
enum MACRO_READ_TOC {READ_TOC = 0x43,};
enum MACRO_REASSIGN {REASSIGN_BLOCKS = 0x7,};
enum MACRO_RECOVERY {INITIATE_RECOVERY = 0xF,RELEASE_RECOVERY = 0x10,};
enum MACRO_REISERFS {REISERFS_XATTR_MAGIC = 0x52465841,};
enum MACRO_REQ_LEFT {REQ_LEFT_ITEM = 512,REQ_RIGHT_ITEM = 513,REQ_UP_ITEM = 514,REQ_DOWN_ITEM = 515,REQ_SCR_ULINE = 516,REQ_SCR_DLINE = 517,REQ_SCR_DPAGE = 518,REQ_SCR_UPAGE = 519,REQ_FIRST_ITEM = 520,REQ_LAST_ITEM = 521,REQ_NEXT_ITEM = 522,REQ_PREV_ITEM = 523,REQ_TOGGLE_ITEM = 524,REQ_CLEAR_PATTERN = 525,REQ_BACK_PATTERN = 526,REQ_NEXT_MATCH = 527,REQ_PREV_MATCH = 528,};
enum MACRO_RESERVED {ADD_RESERVED = 2048,REM_RESERVED = 4096,};
enum MACRO_RE_NREGS {RE_NREGS = 30,};
enum MACRO_ROMBMASK {ROMBMASK = 1023,};
enum MACRO_ROMBSIZE {ROMBSIZE = 1024,};
enum MACRO_ROSE_DTE {ROSE_DTE_ORIGINATED = 0x0,ROSE_NUMBER_BUSY = 0x1,ROSE_INVALID_FACILITY = 0x3,ROSE_NETWORK_CONGESTION = 0x5,ROSE_OUT_OF_ORDER = 0x9,ROSE_ACCESS_BARRED = 0xB,ROSE_NOT_OBTAINABLE = 0xD,ROSE_REMOTE_PROCEDURE = 0x11,ROSE_LOCAL_PROCEDURE = 0x13,ROSE_SHIP_ABSENT = 0x39,};
enum MACRO_RRNotify {RRNotify_CrtcChange = 0,RRNotify_OutputChange = 1,RRNotify_OutputProperty = 2,RRNotify_ProviderChange = 3,RRNotify_ProviderProperty = 4,RRNotify_ResourceChange = 5,};
enum MACRO_R_PARISC {R_PARISC_NONE = 0,R_PARISC_DIR32 = 1,R_PARISC_DIR21L = 2,R_PARISC_DIR17R = 3,R_PARISC_DIR17F = 4,R_PARISC_DIR14R = 6,R_PARISC_PCREL32 = 9,R_PARISC_PCREL21L = 10,R_PARISC_PCREL17R = 11,R_PARISC_PCREL17F = 12,R_PARISC_PCREL14R = 14,R_PARISC_DPREL21L = 18,R_PARISC_DPREL14R = 22,R_PARISC_GPREL21L = 26,R_PARISC_GPREL14R = 30,R_PARISC_LTOFF21L = 34,R_PARISC_LTOFF14R = 38,R_PARISC_SECREL32 = 41,R_PARISC_SEGBASE = 48,R_PARISC_SEGREL32 = 49,R_PARISC_PLTOFF21L = 50,R_PARISC_PLTOFF14R = 54,R_PARISC_LTOFF_FPTR32 = 57,R_PARISC_LTOFF_FPTR21L = 58,R_PARISC_LTOFF_FPTR14R = 62,R_PARISC_FPTR64 = 64,R_PARISC_PLABEL32 = 65,R_PARISC_PLABEL21L = 66,R_PARISC_PLABEL14R = 70,R_PARISC_PCREL64 = 72,R_PARISC_PCREL22F = 74,R_PARISC_PCREL14WR = 75,R_PARISC_PCREL14DR = 76,R_PARISC_PCREL16F = 77,R_PARISC_PCREL16WF = 78,R_PARISC_PCREL16DF = 79,R_PARISC_DIR64 = 80,R_PARISC_DIR14WR = 83,R_PARISC_DIR14DR = 84,R_PARISC_DIR16F = 85,R_PARISC_DIR16WF = 86,R_PARISC_DIR16DF = 87,R_PARISC_GPREL64 = 88,R_PARISC_GPREL14WR = 91,R_PARISC_GPREL14DR = 92,R_PARISC_GPREL16F = 93,R_PARISC_GPREL16WF = 94,R_PARISC_GPREL16DF = 95,R_PARISC_LTOFF64 = 96,R_PARISC_LTOFF14WR = 99,R_PARISC_LTOFF14DR = 100,R_PARISC_LTOFF16F = 101,R_PARISC_LTOFF16WF = 102,R_PARISC_LTOFF16DF = 103,R_PARISC_SECREL64 = 104,R_PARISC_SEGREL64 = 112,R_PARISC_PLTOFF14WR = 115,R_PARISC_PLTOFF14DR = 116,R_PARISC_PLTOFF16F = 117,R_PARISC_PLTOFF16WF = 118,R_PARISC_PLTOFF16DF = 119,R_PARISC_LTOFF_FPTR64 = 120,R_PARISC_LTOFF_FPTR14WR = 123,R_PARISC_LTOFF_FPTR14DR = 124,R_PARISC_LTOFF_FPTR16F = 125,R_PARISC_LTOFF_FPTR16WF = 126,R_PARISC_LTOFF_FPTR16DF = 127,R_PARISC_LORESERVE = 128,R_PARISC_COPY = 128,R_PARISC_IPLT = 129,R_PARISC_EPLT = 130,R_PARISC_TPREL32 = 153,R_PARISC_TPREL21L = 154,R_PARISC_TPREL14R = 158,R_PARISC_LTOFF_TP21L = 162,R_PARISC_LTOFF_TP14R = 166,R_PARISC_LTOFF_TP14F = 167,R_PARISC_TPREL64 = 216,R_PARISC_TPREL14WR = 219,R_PARISC_TPREL14DR = 220,R_PARISC_TPREL16F = 221,R_PARISC_TPREL16WF = 222,R_PARISC_TPREL16DF = 223,R_PARISC_LTOFF_TP64 = 224,R_PARISC_LTOFF_TP14WR = 227,R_PARISC_LTOFF_TP14DR = 228,R_PARISC_LTOFF_TP16F = 229,R_PARISC_LTOFF_TP16WF = 230,R_PARISC_LTOFF_TP16DF = 231,R_PARISC_GNU_VTENTRY = 232,R_PARISC_GNU_VTINHERIT = 233,R_PARISC_TLS_GD21L = 234,R_PARISC_TLS_GD14R = 235,R_PARISC_TLS_GDCALL = 236,R_PARISC_TLS_LDM21L = 237,R_PARISC_TLS_LDM14R = 238,R_PARISC_TLS_LDMCALL = 239,R_PARISC_TLS_LDO21L = 240,R_PARISC_TLS_LDO14R = 241,R_PARISC_TLS_DTPMOD32 = 242,R_PARISC_TLS_DTPMOD64 = 243,R_PARISC_TLS_DTPOFF32 = 244,R_PARISC_TLS_DTPOFF64 = 245,R_PARISC_TLS_LE21L = 154,R_PARISC_TLS_LE14R = 158,R_PARISC_TLS_IE21L = 162,R_PARISC_TLS_IE14R = 166,R_PARISC_TLS_TPREL32 = 153,R_PARISC_TLS_TPREL64 = 216,R_PARISC_HIRESERVE = 255,};
enum MACRO_Relative {Relative = 0,Absolute = 1,ProximityState = 2,};
enum MACRO_SCM_WIFI {SCM_WIFI_STATUS = 41,};
enum MACRO_SECURITY {SECURITY_MAJOR_VERSION = 1,SECURITY_MINOR_VERSION = 0,};
enum MACRO_SEEK_MAX {SEEK_MAX = 4,};
enum MACRO_SEM_STAT {SEM_STAT = 18,SEM_INFO = 19,};
enum MACRO_SETTIMER {SETTIMER = 0x1,STARTTIMER = 0x2,};
enum MACRO_SET_DISK {SET_DISK_FAULTY = 0x929,};
enum MACRO_SHF_MIPS {SHF_MIPS_GPREL = 0x10000000,SHF_MIPS_MERGE = 0x20000000,SHF_MIPS_ADDR = 0x40000000,SHF_MIPS_STRINGS = 0x80000000,SHF_MIPS_NOSTRIP = 0x8000000,SHF_MIPS_LOCAL = 0x4000000,SHF_MIPS_NAMES = 0x2000000,SHF_MIPS_NODUPE = 0x1000000,};
enum MACRO_SHN_MIPS {SHN_MIPS_ACOMMON = 0xFF00,SHN_MIPS_TEXT = 0xFF01,SHN_MIPS_DATA = 0xFF02,SHN_MIPS_SCOMMON = 0xFF03,SHN_MIPS_SUNDEFINED = 0xFF04,};
enum MACRO_SHT_MIPS {SHT_MIPS_LIBLIST = 0x70000000,SHT_MIPS_MSYM = 0x70000001,SHT_MIPS_CONFLICT = 0x70000002,SHT_MIPS_GPTAB = 0x70000003,SHT_MIPS_UCODE = 0x70000004,SHT_MIPS_DEBUG = 0x70000005,SHT_MIPS_REGINFO = 0x70000006,SHT_MIPS_PACKAGE = 0x70000007,SHT_MIPS_PACKSYM = 0x70000008,SHT_MIPS_RELD = 0x70000009,SHT_MIPS_IFACE = 0x7000000B,SHT_MIPS_CONTENT = 0x7000000C,SHT_MIPS_OPTIONS = 0x7000000D,SHT_MIPS_SHDR = 0x70000010,SHT_MIPS_FDESC = 0x70000011,SHT_MIPS_EXTSYM = 0x70000012,SHT_MIPS_DENSE = 0x70000013,SHT_MIPS_PDESC = 0x70000014,SHT_MIPS_LOCSYM = 0x70000015,SHT_MIPS_AUXSYM = 0x70000016,SHT_MIPS_OPTSYM = 0x70000017,SHT_MIPS_LOCSTR = 0x70000018,SHT_MIPS_LINE = 0x70000019,SHT_MIPS_RFDESC = 0x7000001A,SHT_MIPS_DELTASYM = 0x7000001B,SHT_MIPS_DELTAINST = 0x7000001C,SHT_MIPS_DELTACLASS = 0x7000001D,SHT_MIPS_DWARF = 0x7000001E,SHT_MIPS_DELTADECL = 0x7000001F,SHT_MIPS_SYMBOL_LIB = 0x70000020,SHT_MIPS_EVENTS = 0x70000021,SHT_MIPS_TRANSLATE = 0x70000022,SHT_MIPS_PIXIE = 0x70000023,SHT_MIPS_XLATE = 0x70000024,SHT_MIPS_XLATE_DEBUG = 0x70000025,SHT_MIPS_WHIRL = 0x70000026,SHT_MIPS_EH_REGION = 0x70000027,SHT_MIPS_XLATE_OLD = 0x70000028,SHT_MIPS_PDR_EXCEPTION = 0x70000029,};
enum MACRO_SIOCDARP {SIOCDARP = 0x8953,};
enum MACRO_SIOCGARP {SIOCGARP = 0x8954,};
enum MACRO_SIOCGQOS {SIOCGQOS = 35321,};
enum MACRO_SIOCOUTQ {SIOCOUTQ = 21521,SIOCETHTOOL = 35142,};
enum MACRO_SIOCSARP {SIOCSARP = 0x8955,};
enum MACRO_SNAPSHOT {SNAPSHOT_IOC_MAGIC = 51,SNAPSHOT_FREEZE = 13057,SNAPSHOT_UNFREEZE = 13058,SNAPSHOT_ATOMIC_RESTORE = 13060,SNAPSHOT_FREE = 13061,SNAPSHOT_FREE_SWAP_PAGES = 13065,SNAPSHOT_S2RAM = 13067,SNAPSHOT_PLATFORM_SUPPORT = 13071,SNAPSHOT_POWER_OFF = 13072,SNAPSHOT_PREF_IMAGE_SIZE = 13074,SNAPSHOT_IOC_MAXNR = 20,};
enum MACRO_SNDRV_SB {SNDRV_SB_CSP_MODE_NONE = 0x0,SNDRV_SB_CSP_MODE_DSP_READ = 0x1,SNDRV_SB_CSP_MODE_DSP_WRITE = 0x2,SNDRV_SB_CSP_MODE_QSOUND = 0x4,SNDRV_SB_CSP_LOAD_FROMUSER = 0x1,SNDRV_SB_CSP_LOAD_INITBLOCK = 0x2,SNDRV_SB_CSP_SAMPLE_8BIT = 0x1,SNDRV_SB_CSP_SAMPLE_16BIT = 0x2,SNDRV_SB_CSP_MONO = 0x1,SNDRV_SB_CSP_STEREO = 0x2,SNDRV_SB_CSP_RATE_8000 = 0x1,SNDRV_SB_CSP_RATE_11025 = 0x2,SNDRV_SB_CSP_RATE_22050 = 0x4,SNDRV_SB_CSP_RATE_44100 = 0x8,SNDRV_SB_CSP_RATE_ALL = 0xF,SNDRV_SB_CSP_ST_IDLE = 0x0,SNDRV_SB_CSP_ST_LOADED = 0x1,SNDRV_SB_CSP_ST_RUNNING = 0x2,SNDRV_SB_CSP_ST_PAUSED = 0x4,SNDRV_SB_CSP_ST_AUTO = 0x8,SNDRV_SB_CSP_ST_QSOUND = 0x10,SNDRV_SB_CSP_QSOUND_MAX_RIGHT = 0x20,SNDRV_SB_CSP_MAX_MICROCODE_FILE_SIZE = 0x3000,SNDRV_SB_CSP_IOCTL_UNLOAD_CODE = 0x4812,SNDRV_SB_CSP_IOCTL_STOP = 0x4814,SNDRV_SB_CSP_IOCTL_PAUSE = 0x4815,SNDRV_SB_CSP_IOCTL_RESTART = 0x4816,SNDRV_OSS_SOUNDFONT_PATCH = 0x7FD,SNDRV_SFNT_LOAD_INFO = 0x0,SNDRV_SFNT_LOAD_DATA = 0x1,SNDRV_SFNT_OPEN_PATCH = 0x2,SNDRV_SFNT_CLOSE_PATCH = 0x3,SNDRV_SFNT_REPLACE_DATA = 0x5,SNDRV_SFNT_MAP_PRESET = 0x6,SNDRV_SFNT_PROBE_DATA = 0x8,SNDRV_SFNT_REMOVE_INFO = 0x9,SNDRV_SFNT_PATCH_NAME_LEN = 0x20,SNDRV_SFNT_PAT_TYPE_MISC = 0x0,SNDRV_SFNT_PAT_TYPE_GUS = 0x6,SNDRV_SFNT_PAT_TYPE_MAP = 0x7,SNDRV_SFNT_PAT_LOCKED = 0x100,SNDRV_SFNT_PAT_SHARED = 0x200,SNDRV_SFNT_MODE_ROMSOUND = 0x8000,SNDRV_SFNT_MODE_STEREO = 0x1,SNDRV_SFNT_MODE_LOOPING = 0x2,SNDRV_SFNT_MODE_NORELEASE = 0x4,SNDRV_SFNT_MODE_INIT_PARM = 0x8,SNDRV_SFNT_WR_APPEND = 0x0,SNDRV_SFNT_WR_EXCLUSIVE = 0x1,SNDRV_SFNT_WR_REPLACE = 0x2,SNDRV_SFNT_SAMPLE_8BITS = 0x1,SNDRV_SFNT_SAMPLE_UNSIGNED = 0x2,SNDRV_SFNT_SAMPLE_NO_BLANK = 0x4,SNDRV_SFNT_SAMPLE_SINGLESHOT = 0x8,SNDRV_SFNT_SAMPLE_BIDIR_LOOP = 0x10,SNDRV_SFNT_SAMPLE_STEREO_LEFT = 0x20,SNDRV_SFNT_SAMPLE_STEREO_RIGHT = 0x40,SNDRV_SFNT_SAMPLE_REVERSE_LOOP = 0x80,SNDRV_EMUX_VERSION = 0x10000,SNDRV_EMUX_IOCTL_RESET_SAMPLES = 0x4882,SNDRV_EMUX_IOCTL_REMOVE_LAST_SAMPLES = 0x4883,SNDRV_SEQ_VERSION = 0x10001,SNDRV_SEQ_EVENT_SYSTEM = 0x0,SNDRV_SEQ_EVENT_RESULT = 0x1,SNDRV_SEQ_EVENT_NOTE = 0x5,SNDRV_SEQ_EVENT_NOTEON = 0x6,SNDRV_SEQ_EVENT_NOTEOFF = 0x7,SNDRV_SEQ_EVENT_KEYPRESS = 0x8,SNDRV_SEQ_EVENT_CONTROLLER = 0xA,SNDRV_SEQ_EVENT_PGMCHANGE = 0xB,SNDRV_SEQ_EVENT_CHANPRESS = 0xC,SNDRV_SEQ_EVENT_PITCHBEND = 0xD,SNDRV_SEQ_EVENT_CONTROL14 = 0xE,SNDRV_SEQ_EVENT_NONREGPARAM = 0xF,SNDRV_SEQ_EVENT_REGPARAM = 0x10,SNDRV_SEQ_EVENT_SONGPOS = 0x14,SNDRV_SEQ_EVENT_SONGSEL = 0x15,SNDRV_SEQ_EVENT_QFRAME = 0x16,SNDRV_SEQ_EVENT_TIMESIGN = 0x17,SNDRV_SEQ_EVENT_KEYSIGN = 0x18,SNDRV_SEQ_EVENT_START = 0x1E,SNDRV_SEQ_EVENT_CONTINUE = 0x1F,SNDRV_SEQ_EVENT_STOP = 0x20,SNDRV_SEQ_EVENT_SETPOS_TICK = 0x21,SNDRV_SEQ_EVENT_SETPOS_TIME = 0x22,SNDRV_SEQ_EVENT_TEMPO = 0x23,SNDRV_SEQ_EVENT_CLOCK = 0x24,SNDRV_SEQ_EVENT_TICK = 0x25,SNDRV_SEQ_EVENT_QUEUE_SKEW = 0x26,SNDRV_SEQ_EVENT_TUNE_REQUEST = 0x28,SNDRV_SEQ_EVENT_RESET = 0x29,SNDRV_SEQ_EVENT_SENSING = 0x2A,SNDRV_SEQ_EVENT_ECHO = 0x32,SNDRV_SEQ_EVENT_OSS = 0x33,SNDRV_SEQ_EVENT_CLIENT_START = 0x3C,SNDRV_SEQ_EVENT_CLIENT_EXIT = 0x3D,SNDRV_SEQ_EVENT_CLIENT_CHANGE = 0x3E,SNDRV_SEQ_EVENT_PORT_START = 0x3F,SNDRV_SEQ_EVENT_PORT_EXIT = 0x40,SNDRV_SEQ_EVENT_PORT_CHANGE = 0x41,SNDRV_SEQ_EVENT_PORT_SUBSCRIBED = 0x42,SNDRV_SEQ_EVENT_PORT_UNSUBSCRIBED = 0x43,SNDRV_SEQ_EVENT_USR0 = 0x5A,SNDRV_SEQ_EVENT_USR1 = 0x5B,SNDRV_SEQ_EVENT_USR2 = 0x5C,SNDRV_SEQ_EVENT_USR3 = 0x5D,SNDRV_SEQ_EVENT_USR4 = 0x5E,SNDRV_SEQ_EVENT_USR5 = 0x5F,SNDRV_SEQ_EVENT_USR6 = 0x60,SNDRV_SEQ_EVENT_USR7 = 0x61,SNDRV_SEQ_EVENT_USR8 = 0x62,SNDRV_SEQ_EVENT_USR9 = 0x63,SNDRV_SEQ_EVENT_SYSEX = 0x82,SNDRV_SEQ_EVENT_BOUNCE = 0x83,SNDRV_SEQ_EVENT_USR_VAR0 = 0x87,SNDRV_SEQ_EVENT_USR_VAR1 = 0x88,SNDRV_SEQ_EVENT_USR_VAR2 = 0x89,SNDRV_SEQ_EVENT_USR_VAR3 = 0x8A,SNDRV_SEQ_EVENT_USR_VAR4 = 0x8B,SNDRV_SEQ_EVENT_KERNEL_ERROR = 0x96,SNDRV_SEQ_EVENT_KERNEL_QUOTE = 0x97,SNDRV_SEQ_EVENT_NONE = 0xFF,SNDRV_SEQ_ADDRESS_UNKNOWN = 0xFD,SNDRV_SEQ_ADDRESS_SUBSCRIBERS = 0xFE,SNDRV_SEQ_ADDRESS_BROADCAST = 0xFF,SNDRV_SEQ_QUEUE_DIRECT = 0xFD,SNDRV_SEQ_TIME_STAMP_TICK = 0x0,SNDRV_SEQ_TIME_STAMP_REAL = 0x1,SNDRV_SEQ_TIME_STAMP_MASK = 0x1,SNDRV_SEQ_TIME_MODE_ABS = 0x0,SNDRV_SEQ_TIME_MODE_REL = 0x2,SNDRV_SEQ_TIME_MODE_MASK = 0x2,SNDRV_SEQ_EVENT_LENGTH_FIXED = 0x0,SNDRV_SEQ_EVENT_LENGTH_VARIABLE = 0x4,SNDRV_SEQ_EVENT_LENGTH_VARUSR = 0x8,SNDRV_SEQ_EVENT_LENGTH_MASK = 0xC,SNDRV_SEQ_PRIORITY_NORMAL = 0x0,SNDRV_SEQ_PRIORITY_HIGH = 0x10,SNDRV_SEQ_PRIORITY_MASK = 0x10,SNDRV_SEQ_CLIENT_SYSTEM = 0x0,SNDRV_SEQ_CLIENT_DUMMY = 0xE,SNDRV_SEQ_CLIENT_OSS = 0xF,};
enum MACRO_SND_MPOA {SND_MPOA_RES_RQST = 201,};
enum MACRO_SOL_AX25 {SOL_AX25 = 257,};
enum MACRO_SOL_IPV6 {SOL_IPV6 = 41,SOL_ICMPV6 = 58,};
enum MACRO_SOL_ROSE {SOL_ROSE = 260,};
enum MACRO_SOL_TIPC {SOL_TIPC = 271,};
enum MACRO_SPRAYMAX {SPRAYMAX = 8845,};
enum MACRO_STB_MIPS {STB_MIPS_SPLIT_COMMON = 13,};
enum MACRO_STRCOUNT {STRCOUNT = 414,};
enum MACRO_SYS_NMLN {SYS_NMLN = 65,};
enum MACRO_ShapeSet {ShapeSet = 0,ShapeUnion = 1,ShapeIntersect = 2,};
enum MACRO_SyncBoth {SyncBoth = 7,};
enum MACRO_TCIFLUSH {TCIFLUSH = 0,TCOFLUSH = 1,TCIOFLUSH = 2,};
enum MACRO_TIMER_BY {TIMER_BY_1M = 0x0,TIMER_BY_256K = 0x1,TIMER_BY_128K = 0x2,TIMER_BY_32K = 0x3,};
enum MACRO_TIOCCBRK {TIOCCBRK = 0x5428,};
enum MACRO_TIOCCONS {TIOCCONS = 0x541D,};
enum MACRO_TIOCEXCL {TIOCEXCL = 0x540C,};
enum MACRO_TIOCGETD {TIOCGETD = 0x5424,};
enum MACRO_TIOCGSID {TIOCGSID = 0x5429,};
enum MACRO_TIOCMBIC {TIOCMBIC = 0x5417,};
enum MACRO_TIOCMBIS {TIOCMBIS = 0x5416,};
enum MACRO_TIOCMGET {TIOCMGET = 0x5415,};
enum MACRO_TIOCMSET {TIOCMSET = 0x5418,};
enum MACRO_TIOCNXCL {TIOCNXCL = 0x540D,};
enum MACRO_TIOCOUTQ {TIOCOUTQ = 0x5411,};
enum MACRO_TIOCSBRK {TIOCSBRK = 0x5427,};
enum MACRO_TIOCSETD {TIOCSETD = 0x5423,};
enum MACRO_TIPC_CFG {TIPC_CFG_SRV = 0,TIPC_TOP_SRV = 1,TIPC_RESERVED_TYPES = 64,TIPC_ZONE_SCOPE = 1,TIPC_CLUSTER_SCOPE = 2,TIPC_NODE_SCOPE = 3,TIPC_MAX_USER_MSG_SIZE = 66000,TIPC_LOW_IMPORTANCE = 0,TIPC_MEDIUM_IMPORTANCE = 1,TIPC_HIGH_IMPORTANCE = 2,TIPC_CRITICAL_IMPORTANCE = 3,TIPC_OK = 0,TIPC_ERR_NO_NAME = 1,TIPC_ERR_NO_PORT = 2,TIPC_ERR_NO_NODE = 3,TIPC_ERR_OVERLOAD = 4,TIPC_CONN_SHUTDOWN = 5,TIPC_SUB_PORTS = 1,TIPC_SUB_SERVICE = 2,TIPC_SUB_CANCEL = 4,TIPC_WAIT_FOREVER = -1,TIPC_PUBLISHED = 1,TIPC_WITHDRAWN = 2,TIPC_SUBSCR_TIMEOUT = 3,};
enum MACRO_TMR_WAIT {TMR_WAIT_REL = 1,TMR_WAIT_ABS = 2,TMR_STOP = 3,TMR_START = 4,TMR_CONTINUE = 5,TMR_TEMPO = 6,TMR_ECHO = 8,TMR_CLOCK = 9,TMR_SPP = 10,TMR_TIMESIG = 11,};
enum MACRO_TVERSLEN {TVERSLEN = 2,};
enum MACRO_TX_RESET {TX_RESET_MULTI_IDX = 0x200,};
enum MACRO_TYPE_CMD {TYPE_CMD = 0x0,TYPE_MSG = 0x1,};
enum MACRO_UNLOCKED {UNLOCKED = 0,BUFSIZE = 2048,};
enum MACRO_USBDEVFS {USBDEVFS_MAXDRIVERNAME = 255,USBDEVFS_URB_SHORT_NOT_OK = 1,USBDEVFS_URB_ISO_ASAP = 2,USBDEVFS_URB_BULK_CONTINUATION = 4,USBDEVFS_URB_NO_FSBR = 32,USBDEVFS_URB_ZERO_PACKET = 64,USBDEVFS_URB_NO_INTERRUPT = 128,USBDEVFS_URB_TYPE_ISO = 0,USBDEVFS_URB_TYPE_INTERRUPT = 1,USBDEVFS_URB_TYPE_CONTROL = 2,USBDEVFS_URB_TYPE_BULK = 3,USBDEVFS_CAP_ZERO_PACKET = 1,USBDEVFS_CAP_BULK_CONTINUATION = 2,USBDEVFS_CAP_NO_PACKET_SIZE_LIM = 4,USBDEVFS_CAP_BULK_SCATTER_GATHER = 8,USBDEVFS_DISCONNECT_CLAIM_IF_DRIVER = 1,USBDEVFS_DISCONNECT_CLAIM_EXCEPT_DRIVER = 2,USBDEVFS_DISCARDURB = 21771,USBDEVFS_RESET = 21780,USBDEVFS_DISCONNECT = 21782,USBDEVFS_CONNECT = 21783,};
enum MACRO_USB_PORT {USB_PORT_FEAT_CONNECTION = 0,USB_PORT_FEAT_ENABLE = 1,USB_PORT_FEAT_SUSPEND = 2,USB_PORT_FEAT_OVER_CURRENT = 3,USB_PORT_FEAT_RESET = 4,USB_PORT_FEAT_L1 = 5,USB_PORT_FEAT_POWER = 8,USB_PORT_FEAT_LOWSPEED = 9,USB_PORT_FEAT_C_CONNECTION = 16,USB_PORT_FEAT_C_ENABLE = 17,USB_PORT_FEAT_C_SUSPEND = 18,USB_PORT_FEAT_C_OVER_CURRENT = 19,USB_PORT_FEAT_C_RESET = 20,USB_PORT_FEAT_TEST = 21,USB_PORT_FEAT_INDICATOR = 22,USB_PORT_FEAT_C_PORT_L1 = 23,USB_PORT_FEAT_LINK_STATE = 5,USB_PORT_FEAT_U1_TIMEOUT = 23,USB_PORT_FEAT_U2_TIMEOUT = 24,USB_PORT_FEAT_C_PORT_LINK_STATE = 25,USB_PORT_FEAT_C_PORT_CONFIG_ERROR = 26,USB_PORT_FEAT_REMOTE_WAKE_MASK = 27,USB_PORT_FEAT_BH_PORT_RESET = 28,USB_PORT_FEAT_C_BH_PORT_RESET = 29,USB_PORT_FEAT_FORCE_LINKPM_ACCEPT = 30,USB_PORT_FEAT_REMOTE_WAKE_CONNECT = 256,USB_PORT_FEAT_REMOTE_WAKE_DISCONNECT = 512,USB_PORT_FEAT_REMOTE_WAKE_OVER_CURRENT = 1024,USB_PORT_STAT_CONNECTION = 1,USB_PORT_STAT_ENABLE = 2,USB_PORT_STAT_SUSPEND = 4,USB_PORT_STAT_OVERCURRENT = 8,USB_PORT_STAT_RESET = 16,USB_PORT_STAT_L1 = 32,USB_PORT_STAT_POWER = 256,USB_PORT_STAT_LOW_SPEED = 512,USB_PORT_STAT_HIGH_SPEED = 1024,USB_PORT_STAT_TEST = 2048,USB_PORT_STAT_INDICATOR = 4096,USB_PORT_STAT_LINK_STATE = 480,USB_SS_PORT_STAT_POWER = 512,USB_SS_PORT_STAT_SPEED = 7168,USB_PORT_STAT_SPEED_5GBPS = 0,USB_SS_PORT_STAT_MASK = 27,USB_SS_PORT_LS_U0 = 0,USB_SS_PORT_LS_U1 = 32,USB_SS_PORT_LS_U2 = 64,USB_SS_PORT_LS_U3 = 96,USB_SS_PORT_LS_SS_DISABLED = 128,USB_SS_PORT_LS_RX_DETECT = 160,USB_SS_PORT_LS_SS_INACTIVE = 192,USB_SS_PORT_LS_POLLING = 224,USB_SS_PORT_LS_RECOVERY = 256,USB_SS_PORT_LS_HOT_RESET = 288,USB_SS_PORT_LS_COMP_MOD = 320,USB_SS_PORT_LS_LOOPBACK = 352,USB_PORT_STAT_C_CONNECTION = 1,USB_PORT_STAT_C_ENABLE = 2,USB_PORT_STAT_C_SUSPEND = 4,USB_PORT_STAT_C_OVERCURRENT = 8,USB_PORT_STAT_C_RESET = 16,USB_PORT_STAT_C_L1 = 32,USB_PORT_STAT_C_BH_RESET = 32,USB_PORT_STAT_C_LINK_STATE = 64,USB_PORT_STAT_C_CONFIG_ERROR = 128,};
enum MACRO_USB_SELF {USB_SELF_POWER_VBUS_MAX_DRAW = 100,};
enum MACRO_USRQUOTA {USRQUOTA = 0,GRPQUOTA = 1,};
enum MACRO_UVC_CTRL {UVC_CTRL_DATA_TYPE_RAW = 0,UVC_CTRL_DATA_TYPE_SIGNED = 1,UVC_CTRL_DATA_TYPE_UNSIGNED = 2,UVC_CTRL_DATA_TYPE_BOOLEAN = 3,UVC_CTRL_DATA_TYPE_ENUM = 4,UVC_CTRL_DATA_TYPE_BITMASK = 5,UVC_CTRL_FLAG_SET_CUR = 1,UVC_CTRL_FLAG_GET_CUR = 2,UVC_CTRL_FLAG_GET_MIN = 4,UVC_CTRL_FLAG_GET_MAX = 8,UVC_CTRL_FLAG_GET_RES = 16,UVC_CTRL_FLAG_GET_DEF = 32,UVC_CTRL_FLAG_RESTORE = 64,UVC_CTRL_FLAG_AUTO_UPDATE = 128,UVC_CTRL_FLAG_GET_RANGE = 62,};
enum MACRO_Unsorted {Unsorted = 0,YSorted = 1,YXSorted = 2,};
enum MACRO_V4L2_CAP {V4L2_CAP_VIDEO_CAPTURE = 0x1,V4L2_CAP_VIDEO_OUTPUT = 0x2,V4L2_CAP_VIDEO_OVERLAY = 0x4,V4L2_CAP_VBI_CAPTURE = 0x10,V4L2_CAP_VBI_OUTPUT = 0x20,V4L2_CAP_SLICED_VBI_CAPTURE = 0x40,V4L2_CAP_SLICED_VBI_OUTPUT = 0x80,V4L2_CAP_RDS_CAPTURE = 0x100,V4L2_CAP_VIDEO_OUTPUT_OVERLAY = 0x200,V4L2_CAP_HW_FREQ_SEEK = 0x400,V4L2_CAP_RDS_OUTPUT = 0x800,V4L2_CAP_VIDEO_CAPTURE_MPLANE = 0x1000,V4L2_CAP_VIDEO_OUTPUT_MPLANE = 0x2000,V4L2_CAP_VIDEO_M2M_MPLANE = 0x4000,V4L2_CAP_VIDEO_M2M = 0x8000,V4L2_CAP_TUNER = 0x10000,V4L2_CAP_AUDIO = 0x20000,V4L2_CAP_RADIO = 0x40000,V4L2_CAP_MODULATOR = 0x80000,V4L2_CAP_READWRITE = 0x1000000,V4L2_CAP_ASYNCIO = 0x2000000,V4L2_CAP_STREAMING = 0x4000000,V4L2_CAP_DEVICE_CAPS = 0x80000000,V4L2_PIX_FMT_RGB332 = 0x31424752,V4L2_PIX_FMT_RGB444 = 0x34343452,V4L2_PIX_FMT_RGB555 = 0x4F424752,V4L2_PIX_FMT_RGB565 = 0x50424752,V4L2_PIX_FMT_RGB555X = 0x51424752,V4L2_PIX_FMT_RGB565X = 0x52424752,V4L2_PIX_FMT_BGR666 = 0x48524742,V4L2_PIX_FMT_BGR24 = 0x33524742,V4L2_PIX_FMT_RGB24 = 0x33424752,V4L2_PIX_FMT_BGR32 = 0x34524742,V4L2_PIX_FMT_RGB32 = 0x34424752,V4L2_PIX_FMT_GREY = 0x59455247,V4L2_PIX_FMT_Y4 = 0x20343059,V4L2_PIX_FMT_Y6 = 0x20363059,V4L2_PIX_FMT_Y10 = 0x20303159,V4L2_PIX_FMT_Y12 = 0x20323159,V4L2_PIX_FMT_Y16 = 0x20363159,V4L2_PIX_FMT_Y10BPACK = 0x42303159,V4L2_PIX_FMT_PAL8 = 0x384C4150,V4L2_PIX_FMT_UV8 = 0x20385655,V4L2_PIX_FMT_YVU410 = 0x39555659,V4L2_PIX_FMT_YVU420 = 0x32315659,V4L2_PIX_FMT_YUYV = 0x56595559,V4L2_PIX_FMT_YYUV = 0x56555959,V4L2_PIX_FMT_YVYU = 0x55595659,V4L2_PIX_FMT_UYVY = 0x59565955,V4L2_PIX_FMT_VYUY = 0x59555956,V4L2_PIX_FMT_YUV422P = 0x50323234,V4L2_PIX_FMT_YUV411P = 0x50313134,V4L2_PIX_FMT_Y41P = 0x50313459,V4L2_PIX_FMT_YUV444 = 0x34343459,V4L2_PIX_FMT_YUV555 = 0x4F565559,V4L2_PIX_FMT_YUV565 = 0x50565559,V4L2_PIX_FMT_YUV32 = 0x34565559,V4L2_PIX_FMT_YUV410 = 0x39565559,V4L2_PIX_FMT_YUV420 = 0x32315559,V4L2_PIX_FMT_HI240 = 0x34324948,V4L2_PIX_FMT_HM12 = 0x32314D48,V4L2_PIX_FMT_M420 = 0x3032344D,V4L2_PIX_FMT_NV12 = 0x3231564E,V4L2_PIX_FMT_NV21 = 0x3132564E,V4L2_PIX_FMT_NV16 = 0x3631564E,V4L2_PIX_FMT_NV61 = 0x3136564E,V4L2_PIX_FMT_NV24 = 0x3432564E,V4L2_PIX_FMT_NV42 = 0x3234564E,V4L2_PIX_FMT_NV12M = 0x32314D4E,V4L2_PIX_FMT_NV21M = 0x31324D4E,V4L2_PIX_FMT_NV12MT = 0x32314D54,V4L2_PIX_FMT_NV12MT_16X16 = 0x32314D56,V4L2_PIX_FMT_YUV420M = 0x32314D59,V4L2_PIX_FMT_YVU420M = 0x31324D59,V4L2_PIX_FMT_SBGGR8 = 0x31384142,V4L2_PIX_FMT_SGBRG8 = 0x47524247,V4L2_PIX_FMT_SGRBG8 = 0x47425247,V4L2_PIX_FMT_SRGGB8 = 0x42474752,V4L2_PIX_FMT_SBGGR10 = 0x30314742,V4L2_PIX_FMT_SGBRG10 = 0x30314247,V4L2_PIX_FMT_SGRBG10 = 0x30314142,V4L2_PIX_FMT_SRGGB10 = 0x30314752,V4L2_PIX_FMT_SBGGR12 = 0x32314742,V4L2_PIX_FMT_SGBRG12 = 0x32314247,V4L2_PIX_FMT_SGRBG12 = 0x32314142,V4L2_PIX_FMT_SRGGB12 = 0x32314752,V4L2_PIX_FMT_SBGGR10ALAW8 = 0x38414261,V4L2_PIX_FMT_SGBRG10ALAW8 = 0x38414761,V4L2_PIX_FMT_SGRBG10ALAW8 = 0x38416761,V4L2_PIX_FMT_SRGGB10ALAW8 = 0x38415261,V4L2_PIX_FMT_SBGGR10DPCM8 = 0x38414262,V4L2_PIX_FMT_SGBRG10DPCM8 = 0x38414762,V4L2_PIX_FMT_SGRBG10DPCM8 = 0x30314442,V4L2_PIX_FMT_SRGGB10DPCM8 = 0x38415262,V4L2_PIX_FMT_SBGGR16 = 0x32525942,V4L2_PIX_FMT_MJPEG = 0x47504A4D,V4L2_PIX_FMT_JPEG = 0x4745504A,V4L2_PIX_FMT_DV = 0x64737664,V4L2_PIX_FMT_MPEG = 0x4745504D,V4L2_PIX_FMT_H264 = 0x34363248,V4L2_PIX_FMT_H264_NO_SC = 0x31435641,V4L2_PIX_FMT_H264_MVC = 0x3436324D,V4L2_PIX_FMT_H263 = 0x33363248,V4L2_PIX_FMT_MPEG1 = 0x3147504D,V4L2_PIX_FMT_MPEG2 = 0x3247504D,V4L2_PIX_FMT_MPEG4 = 0x3447504D,V4L2_PIX_FMT_XVID = 0x44495658,V4L2_PIX_FMT_VC1_ANNEX_G = 0x47314356,V4L2_PIX_FMT_VC1_ANNEX_L = 0x4C314356,V4L2_PIX_FMT_VP8 = 0x30385056,V4L2_PIX_FMT_CPIA1 = 0x41495043,V4L2_PIX_FMT_WNVA = 0x41564E57,V4L2_PIX_FMT_SN9C10X = 0x30313953,V4L2_PIX_FMT_SN9C20X_I420 = 0x30323953,V4L2_PIX_FMT_PWC1 = 0x31435750,V4L2_PIX_FMT_PWC2 = 0x32435750,V4L2_PIX_FMT_ET61X251 = 0x35323645,V4L2_PIX_FMT_SPCA501 = 0x31303553,V4L2_PIX_FMT_SPCA505 = 0x35303553,V4L2_PIX_FMT_SPCA508 = 0x38303553,V4L2_PIX_FMT_SPCA561 = 0x31363553,V4L2_PIX_FMT_PAC207 = 0x37303250,V4L2_PIX_FMT_MR97310A = 0x3031334D,V4L2_PIX_FMT_JL2005BCD = 0x30324C4A,V4L2_PIX_FMT_SN9C2028 = 0x584E4F53,V4L2_PIX_FMT_SQ905C = 0x43353039,V4L2_PIX_FMT_PJPG = 0x47504A50,V4L2_PIX_FMT_OV511 = 0x3131354F,V4L2_PIX_FMT_OV518 = 0x3831354F,V4L2_PIX_FMT_STV0680 = 0x30383653,V4L2_PIX_FMT_TM6000 = 0x30364D54,V4L2_PIX_FMT_CIT_YYVYUY = 0x56544943,V4L2_PIX_FMT_KONICA420 = 0x494E4F4B,V4L2_PIX_FMT_JPGL = 0x4C47504A,V4L2_PIX_FMT_SE401 = 0x31303453,V4L2_PIX_FMT_S5C_UYVY_JPG = 0x49433553,V4L2_FMT_FLAG_COMPRESSED = 0x1,V4L2_FMT_FLAG_EMULATED = 0x2,V4L2_TC_TYPE_24FPS = 0x1,V4L2_TC_TYPE_25FPS = 0x2,V4L2_TC_TYPE_30FPS = 0x3,V4L2_TC_TYPE_50FPS = 0x4,V4L2_TC_TYPE_60FPS = 0x5,V4L2_TC_FLAG_DROPFRAME = 0x1,V4L2_TC_FLAG_COLORFRAME = 0x2,V4L2_TC_USERBITS_field = 0xC,V4L2_TC_USERBITS_USERDEFINED = 0x0,V4L2_TC_USERBITS_8BITCHARS = 0x8,V4L2_JPEG_MARKER_DHT = 0x8,V4L2_JPEG_MARKER_DQT = 0x10,V4L2_JPEG_MARKER_DRI = 0x20,V4L2_JPEG_MARKER_COM = 0x40,V4L2_JPEG_MARKER_APP = 0x80,V4L2_BUF_FLAG_MAPPED = 0x1,V4L2_BUF_FLAG_QUEUED = 0x2,V4L2_BUF_FLAG_DONE = 0x4,V4L2_BUF_FLAG_KEYFRAME = 0x8,V4L2_BUF_FLAG_PFRAME = 0x10,V4L2_BUF_FLAG_BFRAME = 0x20,V4L2_BUF_FLAG_ERROR = 0x40,V4L2_BUF_FLAG_TIMECODE = 0x100,V4L2_BUF_FLAG_PREPARED = 0x400,V4L2_BUF_FLAG_NO_CACHE_INVALIDATE = 0x800,V4L2_BUF_FLAG_NO_CACHE_CLEAN = 0x1000,V4L2_BUF_FLAG_TIMESTAMP_MASK = 0xE000,V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN = 0x0,V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC = 0x2000,V4L2_BUF_FLAG_TIMESTAMP_COPY = 0x4000,V4L2_FBUF_CAP_EXTERNOVERLAY = 0x1,V4L2_FBUF_CAP_CHROMAKEY = 0x2,V4L2_FBUF_CAP_LIST_CLIPPING = 0x4,V4L2_FBUF_CAP_BITMAP_CLIPPING = 0x8,V4L2_FBUF_CAP_LOCAL_ALPHA = 0x10,V4L2_FBUF_CAP_GLOBAL_ALPHA = 0x20,V4L2_FBUF_CAP_LOCAL_INV_ALPHA = 0x40,V4L2_FBUF_CAP_SRC_CHROMAKEY = 0x80,V4L2_FBUF_FLAG_PRIMARY = 0x1,V4L2_FBUF_FLAG_OVERLAY = 0x2,V4L2_FBUF_FLAG_CHROMAKEY = 0x4,V4L2_FBUF_FLAG_LOCAL_ALPHA = 0x8,V4L2_FBUF_FLAG_GLOBAL_ALPHA = 0x10,V4L2_FBUF_FLAG_LOCAL_INV_ALPHA = 0x20,V4L2_FBUF_FLAG_SRC_CHROMAKEY = 0x40,V4L2_MODE_HIGHQUALITY = 0x1,V4L2_CAP_TIMEPERFRAME = 0x1000,V4L2_STD_PAL_B = 0x1,V4L2_STD_PAL_B1 = 0x2,V4L2_STD_PAL_G = 0x4,V4L2_STD_PAL_H = 0x8,V4L2_STD_PAL_I = 0x10,V4L2_STD_PAL_D = 0x20,V4L2_STD_PAL_D1 = 0x40,V4L2_STD_PAL_K = 0x80,V4L2_STD_PAL_M = 0x100,V4L2_STD_PAL_N = 0x200,V4L2_STD_PAL_Nc = 0x400,V4L2_STD_PAL_60 = 0x800,V4L2_STD_NTSC_M = 0x1000,V4L2_STD_NTSC_M_JP = 0x2000,V4L2_STD_NTSC_443 = 0x4000,V4L2_STD_NTSC_M_KR = 0x8000,V4L2_STD_SECAM_B = 0x10000,V4L2_STD_SECAM_D = 0x20000,V4L2_STD_SECAM_G = 0x40000,V4L2_STD_SECAM_H = 0x80000,V4L2_STD_SECAM_K = 0x100000,V4L2_STD_SECAM_K1 = 0x200000,V4L2_STD_SECAM_L = 0x400000,V4L2_STD_SECAM_LC = 0x800000,V4L2_STD_ATSC_8_VSB = 0x1000000,V4L2_STD_ATSC_16_VSB = 0x2000000,V4L2_STD_NTSC = 0xB000,V4L2_STD_SECAM_DK = 0x320000,V4L2_STD_SECAM = 0xFF0000,V4L2_STD_PAL_BG = 0x7,V4L2_STD_PAL_DK = 0xE0,V4L2_STD_PAL = 0xFF,V4L2_STD_B = 0x10003,V4L2_STD_G = 0x40004,V4L2_STD_H = 0x80008,V4L2_STD_L = 0xC00000,V4L2_STD_GH = 0xC000C,V4L2_STD_DK = 0x3200E0,V4L2_STD_BG = 0x50007,V4L2_STD_MN = 0xB700,V4L2_STD_MTS = 0x1700,V4L2_STD_525_60 = 0xF900,V4L2_STD_625_50 = 0xFF06FF,V4L2_STD_ATSC = 0x3000000,V4L2_STD_UNKNOWN = 0x0,V4L2_STD_ALL = 0xFFFFFF,V4L2_DV_PROGRESSIVE = 0x0,V4L2_DV_INTERLACED = 0x1,V4L2_DV_VSYNC_POS_POL = 0x1,V4L2_DV_HSYNC_POS_POL = 0x2,V4L2_DV_BT_STD_CEA861 = 0x1,V4L2_DV_BT_STD_DMT = 0x2,V4L2_DV_BT_STD_CVT = 0x4,V4L2_DV_BT_STD_GTF = 0x8,V4L2_DV_FL_REDUCED_BLANKING = 0x1,V4L2_DV_FL_CAN_REDUCE_FPS = 0x2,V4L2_DV_FL_REDUCED_FPS = 0x4,V4L2_DV_FL_HALF_LINE = 0x8,V4L2_DV_BT_656_1120 = 0x0,V4L2_DV_BT_CAP_INTERLACED = 0x1,V4L2_DV_BT_CAP_PROGRESSIVE = 0x2,V4L2_DV_BT_CAP_REDUCED_BLANKING = 0x4,V4L2_DV_BT_CAP_CUSTOM = 0x8,V4L2_INPUT_TYPE_TUNER = 0x1,V4L2_INPUT_TYPE_CAMERA = 0x2,V4L2_IN_ST_NO_POWER = 0x1,V4L2_IN_ST_NO_SIGNAL = 0x2,V4L2_IN_ST_NO_COLOR = 0x4,V4L2_IN_ST_HFLIP = 0x10,V4L2_IN_ST_VFLIP = 0x20,V4L2_IN_ST_NO_H_LOCK = 0x100,V4L2_IN_ST_COLOR_KILL = 0x200,V4L2_IN_ST_NO_SYNC = 0x10000,V4L2_IN_ST_NO_EQU = 0x20000,V4L2_IN_ST_NO_CARRIER = 0x40000,V4L2_IN_ST_MACROVISION = 0x1000000,V4L2_IN_ST_NO_ACCESS = 0x2000000,V4L2_IN_ST_VTR = 0x4000000,V4L2_IN_CAP_DV_TIMINGS = 0x2,V4L2_IN_CAP_CUSTOM_TIMINGS = 0x2,V4L2_IN_CAP_STD = 0x4,V4L2_OUTPUT_TYPE_MODULATOR = 0x1,V4L2_OUTPUT_TYPE_ANALOG = 0x2,V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY = 0x3,V4L2_OUT_CAP_DV_TIMINGS = 0x2,V4L2_OUT_CAP_CUSTOM_TIMINGS = 0x2,V4L2_OUT_CAP_STD = 0x4,V4L2_CTRL_ID_MASK = 0xFFFFFFF,V4L2_CTRL_FLAG_DISABLED = 0x1,V4L2_CTRL_FLAG_GRABBED = 0x2,V4L2_CTRL_FLAG_READ_ONLY = 0x4,V4L2_CTRL_FLAG_UPDATE = 0x8,V4L2_CTRL_FLAG_INACTIVE = 0x10,V4L2_CTRL_FLAG_SLIDER = 0x20,V4L2_CTRL_FLAG_WRITE_ONLY = 0x40,V4L2_CTRL_FLAG_VOLATILE = 0x80,V4L2_CTRL_FLAG_NEXT_CTRL = 0x80000000,V4L2_CID_MAX_CTRLS = 0x400,V4L2_CID_PRIVATE_BASE = 0x8000000,V4L2_TUNER_CAP_LOW = 0x1,V4L2_TUNER_CAP_NORM = 0x2,V4L2_TUNER_CAP_HWSEEK_BOUNDED = 0x4,V4L2_TUNER_CAP_HWSEEK_WRAP = 0x8,V4L2_TUNER_CAP_STEREO = 0x10,V4L2_TUNER_CAP_LANG2 = 0x20,V4L2_TUNER_CAP_SAP = 0x20,V4L2_TUNER_CAP_LANG1 = 0x40,V4L2_TUNER_CAP_RDS = 0x80,V4L2_TUNER_CAP_RDS_BLOCK_IO = 0x100,V4L2_TUNER_CAP_RDS_CONTROLS = 0x200,V4L2_TUNER_CAP_FREQ_BANDS = 0x400,V4L2_TUNER_CAP_HWSEEK_PROG_LIM = 0x800,V4L2_TUNER_SUB_MONO = 0x1,V4L2_TUNER_SUB_STEREO = 0x2,V4L2_TUNER_SUB_LANG2 = 0x4,V4L2_TUNER_SUB_SAP = 0x4,V4L2_TUNER_SUB_LANG1 = 0x8,V4L2_TUNER_SUB_RDS = 0x10,V4L2_TUNER_MODE_MONO = 0x0,V4L2_TUNER_MODE_STEREO = 0x1,V4L2_TUNER_MODE_LANG2 = 0x2,V4L2_TUNER_MODE_SAP = 0x2,V4L2_TUNER_MODE_LANG1 = 0x3,V4L2_TUNER_MODE_LANG1_LANG2 = 0x4,V4L2_BAND_MODULATION_VSB = 0x2,V4L2_BAND_MODULATION_FM = 0x4,V4L2_BAND_MODULATION_AM = 0x8,V4L2_RDS_BLOCK_MSK = 0x7,V4L2_RDS_BLOCK_A = 0x0,V4L2_RDS_BLOCK_B = 0x1,V4L2_RDS_BLOCK_C = 0x2,V4L2_RDS_BLOCK_D = 0x3,V4L2_RDS_BLOCK_C_ALT = 0x4,V4L2_RDS_BLOCK_INVALID = 0x7,V4L2_RDS_BLOCK_CORRECTED = 0x40,V4L2_RDS_BLOCK_ERROR = 0x80,V4L2_AUDCAP_STEREO = 0x1,V4L2_AUDCAP_AVL = 0x2,V4L2_AUDMODE_AVL = 0x1,V4L2_ENC_IDX_FRAME_I = 0x0,V4L2_ENC_IDX_FRAME_P = 0x1,V4L2_ENC_IDX_FRAME_B = 0x2,V4L2_ENC_IDX_FRAME_MASK = 0xF,V4L2_ENC_IDX_ENTRIES = 0x40,V4L2_ENC_CMD_START = 0x0,V4L2_ENC_CMD_STOP = 0x1,V4L2_ENC_CMD_PAUSE = 0x2,V4L2_ENC_CMD_RESUME = 0x3,V4L2_ENC_CMD_STOP_AT_GOP_END = 0x1,V4L2_DEC_CMD_START = 0x0,V4L2_DEC_CMD_STOP = 0x1,V4L2_DEC_CMD_PAUSE = 0x2,V4L2_DEC_CMD_RESUME = 0x3,V4L2_DEC_CMD_START_MUTE_AUDIO = 0x1,V4L2_DEC_CMD_PAUSE_TO_BLACK = 0x1,V4L2_DEC_CMD_STOP_TO_BLACK = 0x1,V4L2_DEC_CMD_STOP_IMMEDIATELY = 0x2,V4L2_DEC_START_FMT_NONE = 0x0,V4L2_DEC_START_FMT_GOP = 0x1,V4L2_VBI_UNSYNC = 0x1,V4L2_VBI_INTERLACED = 0x2,V4L2_SLICED_TELETEXT_B = 0x1,V4L2_SLICED_VPS = 0x400,V4L2_SLICED_CAPTION_525 = 0x1000,V4L2_SLICED_WSS_625 = 0x4000,V4L2_SLICED_VBI_525 = 0x1000,V4L2_SLICED_VBI_625 = 0x4401,V4L2_MPEG_VBI_IVTV_TELETEXT_B = 0x1,V4L2_MPEG_VBI_IVTV_CAPTION_525 = 0x4,V4L2_MPEG_VBI_IVTV_WSS_625 = 0x5,V4L2_MPEG_VBI_IVTV_VPS = 0x7,V4L2_EVENT_ALL = 0x0,V4L2_EVENT_VSYNC = 0x1,V4L2_EVENT_EOS = 0x2,V4L2_EVENT_CTRL = 0x3,V4L2_EVENT_FRAME_SYNC = 0x4,V4L2_EVENT_PRIVATE_START = 0x8000000,V4L2_EVENT_CTRL_CH_VALUE = 0x1,V4L2_EVENT_CTRL_CH_FLAGS = 0x2,V4L2_EVENT_CTRL_CH_RANGE = 0x4,V4L2_EVENT_SUB_FL_SEND_INITIAL = 0x1,V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK = 0x2,V4L2_CHIP_MATCH_BRIDGE = 0x0,V4L2_CHIP_MATCH_SUBDEV = 0x4,V4L2_CHIP_MATCH_HOST = 0x0,V4L2_CHIP_MATCH_I2C_DRIVER = 0x1,V4L2_CHIP_MATCH_I2C_ADDR = 0x2,V4L2_CHIP_MATCH_AC97 = 0x3,V4L2_CHIP_FL_READABLE = 0x1,V4L2_CHIP_FL_WRITABLE = 0x2,};
enum MACRO_V4L2_CID {V4L2_CID_MEYE_AGC = 9967872,V4L2_CID_MEYE_PICTURE = 9967873,V4L2_CID_MEYE_FRAMERATE = 9967874,};
enum MACRO_VDISCARD {VDISCARD = 13,};
enum MACRO_VMX_EXIT {VMX_EXIT_REASONS_FAILED_VMENTRY = 0x80000000,};
enum MACRO_VREPRINT {VREPRINT = 12,};
enum MACRO_VSYSCALL {VSYSCALL_START = -10485760,VSYSCALL_SIZE = 1024,VSYSCALL_END = -2097152,VSYSCALL_MAPPED_PAGES = 1,};
enum MACRO_WAITTIME {MIN_WAITTIME = 2,MAX_WAITTIME = 5,};
enum MACRO_WATCHDOG {WATCHDOG_IOCTL_BASE = 87,};
enum MACRO_WRITE_10 {WRITE_10 = 0x2A,};
enum MACRO_WRITE_12 {WRITE_12 = 0xAA,WRITE_VERIFY_12 = 0xAE,};
enum MACRO_WSTOPPED {WSTOPPED = 2,WEXITED = 4,WCONTINUED = 8,WNOWAIT = 16777216,__WNOTHREAD = 536870912,__WALL = 1073741824,__WCLONE = -2147483648,};
enum MACRO_XF86MISC {XF86MISC_MAJOR_VERSION = 0,XF86MISC_MINOR_VERSION = 9,};
enum MACRO_XK_Reset {XK_Reset = 0x1000FF6C,XK_System = 0x1000FF6D,XK_User = 0x1000FF6E,XK_ClearLine = 0x1000FF6F,XK_InsertLine = 0x1000FF70,XK_DeleteLine = 0x1000FF71,XK_InsertChar = 0x1000FF72,XK_DeleteChar = 0x1000FF73,XK_BackTab = 0x1000FF74,XK_KP_BackTab = 0x1000FF75,XK_Ext16bit_L = 0x1000FF76,XK_Ext16bit_R = 0x1000FF77,XK_mute_acute = 0x100000A8,XK_mute_grave = 0x100000A9,XK_mute_asciicircum = 0x100000AA,XK_mute_diaeresis = 0x100000AB,XK_mute_asciitilde = 0x100000AC,XK_lira = 0x100000AF,XK_guilder = 0x100000BE,XK_IO = 0x100000EE,XK_longminus = 0x100000F6,XK_block = 0x100000FC,};
enum MACRO_XPOINTER {XPOINTER = 0,XKEYBOARD = 1,};
enum MACRO_XTHREADS {XTHREADS = 1,};
enum MACRO_XT_LIMIT {XT_LIMIT_SCALE = 10000,XT_LOG_TCPSEQ = 1,XT_LOG_TCPOPT = 2,XT_LOG_IPOPT = 4,XT_LOG_UID = 8,XT_LOG_NFLOG = 16,XT_LOG_MACDECODE = 32,XT_LOG_MASK = 47,XT_MULTI_PORTS = 15,XT_NFLOG_DEFAULT_GROUP = 1,XT_NFLOG_DEFAULT_THRESHOLD = 0,XT_NFLOG_MASK = 0,};
enum MACRO_XT_STATE {XT_STATE_INVALID = 1,XT_STATISTIC_MASK = 1,XT_STRING_MAX_PATTERN_SIZE = 128,XT_STRING_MAX_ALGO_NAME_SIZE = 16,XT_TCPMSS_CLAMP_PMTU = 65535,};
enum MACRO_XTestKEY {XTestKEY_UP = 0x4,XTestKEY_DOWN = 0x0,};
enum MACRO_XTestMAX {XTestMAX_ACTION_LIST_SIZE = 64,XTestACTIONS_SIZE = 28,};
enum MACRO_XYBitmap {XYBitmap = 0,XYPixmap = 1,ZPixmap = 2,};
enum MACRO_XvPacked {XvPacked = 0,XvPlanar = 1,};
enum MACRO_YPMAXMAP {YPMAXMAP = 64,};
enum MACRO_YXBanded {YXBanded = 3,};
enum MACRO__ALIASES {_ALIASES_H = 1,};
enum MACRO__CPUFREQ {_CPUFREQ_H = 1,_CRYPT_H = 1,};
enum MACRO__FNMATCH {_FNMATCH_H = 1,};
enum MACRO__GSHADOW {_GSHADOW_H = 1,};
enum MACRO__IEEE754 {_IEEE754_H = 1,};
enum MACRO__IFADDRS {_IFADDRS_H = 1,_LANGINFO_H = 1,_NL_TYPES_H = 1,};
enum MACRO__NETINET {_NETINET_IF_FDDI_H = 1,};
enum MACRO__NETROSE {_NETROSE_ROSE_H = 1,};
enum MACRO__PTHREAD {_PTHREAD_H = 1,_SCHED_H = 1,};
enum MACRO__RPC_RPC {_RPC_RPC_H = 1,_RPC_MSG_H = 1,};
enum MACRO__RPC_SVC {_RPC_SVC_H = 1,};
enum MACRO__SCSI_SG {_SCSI_SG_H = 1,};
enum MACRO__SYS_DIR {_SYS_DIR_H = 1,_SYS_EPOLL_H = 1,};
enum MACRO__SYS_PCI {_SYS_PCI_H = 1,};
enum MACRO__SYS_RAW {_SYS_RAW_H = 1,};
enum MACRO__SYS_REG {_SYS_REG_H = 1,};
enum MACRO__SYS_SDT {_SYS_SDT_H = 1,};
enum MACRO__SYS_SEM {_SYS_SEM_H = 1,};
enum MACRO__UTSNAME {_UTSNAME_LENGTH = 65,_UTSNAME_DOMAIN_LENGTH = 65,_UTSNAME_SYSNAME_LENGTH = 65,_UTSNAME_NODENAME_LENGTH = 65,_UTSNAME_RELEASE_LENGTH = 65,_UTSNAME_VERSION_LENGTH = 65,_UTSNAME_MACHINE_LENGTH = 65,};
enum MACRO__WORDEXP {_WORDEXP_H = 1,};
enum MACRO___ASSERT {__ASSERT_FUNCTION = 0,};
enum MACRO___FMTMSG {__FMTMSG_H = 1,};
enum MACRO___NETIPX {__NETIPX_IPX_H = 1,};
enum MACRO___NET_IF {__NET_IF_PPP_H = 1,_NET_PPP_DEFS_H = 1,};
enum MACRO___SIZEOF {__SIZEOF_PTHREAD_ATTR_T = 56,__SIZEOF_PTHREAD_MUTEX_T = 40,__SIZEOF_PTHREAD_MUTEXATTR_T = 4,__SIZEOF_PTHREAD_COND_T = 48,__SIZEOF_PTHREAD_CONDATTR_T = 4,__SIZEOF_PTHREAD_RWLOCK_T = 56,__SIZEOF_PTHREAD_RWLOCKATTR_T = 8,__SIZEOF_PTHREAD_BARRIER_T = 32,__SIZEOF_PTHREAD_BARRIERATTR_T = 4,};
enum MACRO___iswxxx {__iswxxx_defined = 1,};
enum MACRO_argument {no_argument = 0,required_argument = 1,optional_argument = 2,};
typedef struct _991DB0B5CB0892F70B164889AA9E2739 RECORD_RANGE16;
enum SCC_ioctl_cmds {SIOCSCCRESERVED = 0x89F0,SIOCSCCCFG = 0x89F1,SIOCSCCINI = 0x89F2,SIOCSCCCHANINI = 0x89F3,SIOCSCCSMEM = 0x89F4,SIOCSCCGKISS = 0x89F5,SIOCSCCSKISS = 0x89F6,SIOCSCCGSTAT = 0x89F7,SIOCSCCCAL = 0x89F8,};
typedef struct _3896B2BCF45D7EED33CC60DD2030F7DF XColormapEvent;
typedef struct _XComposeStatus XComposeStatus;
typedef struct _99C954413A17768447BF0852A4562C6B XCrossingEvent;
typedef unsigned __int64 XIMHotKeyState;
typedef struct _6EF26E53794972BE8CF37E7A46EF3D5C XKeyboardState;
typedef struct _8C606E8C629293621C4597F91F88DAA0 XNoExposeEvent;
typedef struct _6B1106A64659663BF4BA9950E3F10E4F XOMCharSetList;
typedef struct _9375A326D5D02800B5E28ACECE8480CB XOMOrientation;
typedef struct _E7F9FD2C37FD56671DBF7E32D3F10830 XPropertyEvent;
typedef unsigned __int16 XRandrRotation;
typedef struct _786884C59B8460C39A9F20EFE8931D61 XReparentEvent;
typedef struct _1E4927A029C92C0FD595CCC76CE8B139 XTestDelayInfo;
typedef struct _BA1C9873524F37DFA28FC6E8B2A0BC7B XWindowChanges;
typedef struct _XcmsColorSpace XcmsColorSpace;
typedef struct _XkbControls *XkbControlsPtr;
typedef struct _XkbControls XkbControlsRec;
typedef struct _XkbCtrlsAction XkbCtrlsAction;
typedef struct _XkbGeometry *XkbGeometryPtr;
typedef struct _XkbGeometry XkbGeometryRec;
typedef struct _XkbGroupAction XkbGroupAction;
typedef struct _XkbKeyAliasRec *XkbKeyAliasPtr;
typedef struct _XkbKeyAliasRec XkbKeyAliasRec;
typedef struct _XkbProperty *XkbPropertyPtr;
typedef struct _XkbProperty XkbPropertyRec;
typedef struct _2DDFDD5DD8CD88FDBBE41C4BA29EE9C7 XvMCBlockArray;
typedef struct _AE7090D44B263C525193247B1C3DC203 XvMCMacroBlock;
typedef struct _C0A8173FD3695D4670457D810A0436B3 XvMCSubpicture;
typedef int _Unwind_Action;
typedef struct _XInternalAsync _XAsyncHandler;
typedef unsigned __int64 __fsblkcnt64_t;
typedef unsigned __int64 __fsfilcnt64_t;
typedef int (*__ftw64_func_t)(const char *filename, const struct stat64 *status, int flag);
enum __itimer_which {ITIMER_REAL = 0x0,ITIMER_VIRTUAL = 0x1,ITIMER_PROF = 0x2,};
typedef unsigned int __kernel_gid_t;
typedef int __kernel_key_t;
typedef int __kernel_mqd_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __mf_uintptr_t;
enum __ns_key_types {ns_kt_rsa = 0x1,ns_kt_dh = 0x2,ns_kt_dsa = 0x3,ns_kt_private = 0xFE,};
enum __ptrace_flags {PTRACE_SEIZE_DEVEL = 0x80000000,};
typedef int __sig_atomic_t;
typedef void (*__sighandler_t)(int);
struct _obstack_chunk {char *limit;struct _obstack_chunk *prev;char contents[4];};
struct audio_buf_info {int fragments;int fragstotal;int fragsize;int bytes;};
typedef struct audio_status audio_status_t;
struct avmb1_resetdef {int contr;};
enum btrfs_err_code {notused = 0x0,BTRFS_ERROR_DEV_RAID1_MIN_NOT_MET = 0x1,BTRFS_ERROR_DEV_RAID10_MIN_NOT_MET = 0x2,BTRFS_ERROR_DEV_RAID5_MIN_NOT_MET = 0x3,BTRFS_ERROR_DEV_RAID6_MIN_NOT_MET = 0x4,BTRFS_ERROR_DEV_TGT_REPLACE = 0x5,BTRFS_ERROR_DEV_MISSING_NOT_FOUND = 0x6,BTRFS_ERROR_DEV_ONLY_WRITABLE = 0x7,BTRFS_ERROR_DEV_EXCL_RUN_IN_PROGRESS = 0x8,};
typedef struct ca_slot_info ca_slot_info_t;
struct changer_params {int cp_curpicker;int cp_npickers;int cp_nslots;int cp_nportals;int cp_ndrives;};
enum cntl_msg_types {IPCTNL_MSG_CT_NEW = 0x0,IPCTNL_MSG_CT_GET = 0x1,IPCTNL_MSG_CT_DELETE = 0x2,IPCTNL_MSG_CT_GET_CTRZERO = 0x3,IPCTNL_MSG_CT_GET_STATS_CPU = 0x4,IPCTNL_MSG_CT_GET_STATS = 0x5,IPCTNL_MSG_CT_GET_DYING = 0x6,IPCTNL_MSG_CT_GET_UNCONFIRMED = 0x7,IPCTNL_MSG_MAX = 0x8,};
struct compat_timeval;
typedef const char *const_nis_name;
struct copr_debug_buf {int command;int parm1;int parm2;int flags;int len;};
struct cpufreq_policy {unsigned __int64 min;unsigned __int64 max;char *governor;};
enum ctattr_l4proto {CTA_PROTO_UNSPEC = 0x0,CTA_PROTO_NUM = 0x1,CTA_PROTO_SRC_PORT = 0x2,CTA_PROTO_DST_PORT = 0x3,CTA_PROTO_ICMP_ID = 0x4,CTA_PROTO_ICMP_TYPE = 0x5,CTA_PROTO_ICMP_CODE = 0x6,CTA_PROTO_ICMPV6_ID = 0x7,CTA_PROTO_ICMPV6_TYPE = 0x8,CTA_PROTO_ICMPV6_CODE = 0x9,__CTA_PROTO_MAX = 0xA,};
enum ctattr_timeout {CTA_TIMEOUT_UNSPEC = 0x0,CTA_TIMEOUT_NAME = 0x1,CTA_TIMEOUT_L3PROTO = 0x2,CTA_TIMEOUT_L4PROTO = 0x3,CTA_TIMEOUT_DATA = 0x4,CTA_TIMEOUT_USE = 0x5,__CTA_TIMEOUT_MAX = 0x6,};
struct cycx_fw_header {unsigned __int64 reset_size;unsigned __int64 data_size;unsigned __int64 code_size;};
enum dcbnl_commands {DCB_CMD_UNDEFINED = 0x0,DCB_CMD_GSTATE = 0x1,DCB_CMD_SSTATE = 0x2,DCB_CMD_PGTX_GCFG = 0x3,DCB_CMD_PGTX_SCFG = 0x4,DCB_CMD_PGRX_GCFG = 0x5,DCB_CMD_PGRX_SCFG = 0x6,DCB_CMD_PFC_GCFG = 0x7,DCB_CMD_PFC_SCFG = 0x8,DCB_CMD_SET_ALL = 0x9,DCB_CMD_GPERM_HWADDR = 0xA,DCB_CMD_GCAP = 0xB,DCB_CMD_GNUMTCS = 0xC,DCB_CMD_SNUMTCS = 0xD,DCB_CMD_PFC_GSTATE = 0xE,DCB_CMD_PFC_SSTATE = 0xF,DCB_CMD_BCN_GCFG = 0x10,DCB_CMD_BCN_SCFG = 0x11,DCB_CMD_GAPP = 0x12,DCB_CMD_SAPP = 0x13,DCB_CMD_IEEE_SET = 0x14,DCB_CMD_IEEE_GET = 0x15,DCB_CMD_GDCBX = 0x16,DCB_CMD_SDCBX = 0x17,DCB_CMD_GFEATCFG = 0x18,DCB_CMD_SFEATCFG = 0x19,DCB_CMD_CEE_GET = 0x1A,DCB_CMD_IEEE_DEL = 0x1B,__DCB_CMD_ENUM_MAX = 0x1C,DCB_CMD_MAX = 0x1B,};
enum dcbnl_pg_attrs {DCB_PG_ATTR_UNDEFINED = 0x0,DCB_PG_ATTR_TC_0 = 0x1,DCB_PG_ATTR_TC_1 = 0x2,DCB_PG_ATTR_TC_2 = 0x3,DCB_PG_ATTR_TC_3 = 0x4,DCB_PG_ATTR_TC_4 = 0x5,DCB_PG_ATTR_TC_5 = 0x6,DCB_PG_ATTR_TC_6 = 0x7,DCB_PG_ATTR_TC_7 = 0x8,DCB_PG_ATTR_TC_MAX = 0x9,DCB_PG_ATTR_TC_ALL = 0xA,DCB_PG_ATTR_BW_ID_0 = 0xB,DCB_PG_ATTR_BW_ID_1 = 0xC,DCB_PG_ATTR_BW_ID_2 = 0xD,DCB_PG_ATTR_BW_ID_3 = 0xE,DCB_PG_ATTR_BW_ID_4 = 0xF,DCB_PG_ATTR_BW_ID_5 = 0x10,DCB_PG_ATTR_BW_ID_6 = 0x11,DCB_PG_ATTR_BW_ID_7 = 0x12,DCB_PG_ATTR_BW_ID_MAX = 0x13,DCB_PG_ATTR_BW_ID_ALL = 0x14,__DCB_PG_ATTR_ENUM_MAX = 0x15,DCB_PG_ATTR_MAX = 0x14,};
enum dcbnl_tc_attrs {DCB_TC_ATTR_PARAM_UNDEFINED = 0x0,DCB_TC_ATTR_PARAM_PGID = 0x1,DCB_TC_ATTR_PARAM_UP_MAPPING = 0x2,DCB_TC_ATTR_PARAM_STRICT_PRIO = 0x3,DCB_TC_ATTR_PARAM_BW_PCT = 0x4,DCB_TC_ATTR_PARAM_ALL = 0x5,__DCB_TC_ATTR_PARAM_ENUM_MAX = 0x6,DCB_TC_ATTR_PARAM_MAX = 0x5,};
enum dccp_cmsg_type {DCCP_SCM_PRIORITY = 0x1,DCCP_SCM_QPOLICY_MAX = 0xFFFF,DCCP_SCM_MAX = 0x10000,};
typedef struct _1BB85DE3512B339811D8B67FC16B212D deviceValuator;
struct ebt_among_info {int wh_dst_ofs;int wh_src_ofs;int bitmask;};
typedef struct user_fpregs_struct elf_fpregset_t;
enum fc_els_clid_ic {ELS_CLID_IC_IMPL = 0x1,ELS_CLID_IC_BER = 0x2,ELS_CLID_IC_LOS = 0x3,ELS_CLID_IC_NOS = 0x4,ELS_CLID_IC_PST = 0x5,ELS_CLID_IC_INVAL = 0x6,ELS_CLID_IC_LOOP_TO = 0x7,ELS_CLID_IC_LIP = 0x8,};
enum fc_els_clid_iq {ELS_CLID_SWITCH = 0x20,ELS_CLID_E_PORT = 0x10,ELS_CLID_SEV_MASK = 0xC,ELS_CLID_SEV_INFO = 0x0,ELS_CLID_SEV_INOP = 0x8,ELS_CLID_SEV_DEG = 0x4,ELS_CLID_LASER = 0x2,ELS_CLID_FRU = 0x1,};
enum fe_sec_voltage {SEC_VOLTAGE_13 = 0x0,SEC_VOLTAGE_18 = 0x1,SEC_VOLTAGE_OFF = 0x2,};
struct floppy_raw_cmd {unsigned int flags;void *data;char *kernel_data;struct floppy_raw_cmd *next;__int64 length;__int64 phys_length;int buffer_length;unsigned __int8 rate;unsigned __int8 cmd_count;unsigned __int8 cmd[16];unsigned __int8 reply_count;unsigned __int8 reply[16];int track;int resultcode;int reserved1;int reserved2;};
typedef struct _32814486483B74398EA3D6D6C36E06C2 fsGenericReply;
typedef struct _2178B426BC8C8AE0F5D29E93EB059F03 fsListFontsReq;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsRequestError;
typedef struct fs_qfilestat fs_qfilestat_t;
struct gnet_estimator {signed __int8 interval;unsigned __int8 ewma_log;};
struct hdlcdrv_params {int iobase;int irq;int dma;int dma2;int seriobase;int pariobase;int midiiobase;};
typedef struct hdsp_version hdsp_version_t;
enum i2400m_ro_type {I2400M_RO_TYPE_RESET = 0x0,I2400M_RO_TYPE_PACKET = 0x1,I2400M_RO_TYPE_WS = 0x2,I2400M_RO_TYPE_PACKET_WS = 0x3,};
struct i2o_cmd_hrtlct {unsigned int iop;void *resbuf;unsigned int *reslen;};
enum ieee_attrs_app {DCB_ATTR_IEEE_APP_UNSPEC = 0x0,DCB_ATTR_IEEE_APP = 0x1,__DCB_ATTR_IEEE_APP_MAX = 0x2,};
struct ipmi_ipmb_addr {int addr_type;__int16 channel;unsigned __int8 slave_addr;unsigned __int8 lun;};
struct linux_dirent64;
enum mtd_file_modes {MTD_FILE_MODE_NORMAL = 0x0,MTD_FILE_MODE_OTP_FACTORY = 0x1,MTD_FILE_MODE_OTP_USER = 0x2,MTD_FILE_MODE_RAW = 0x3,};
typedef struct nand_oobinfo nand_oobinfo_t;
enum nf_ct_ftp_type {NF_CT_FTP_PORT = 0x0,NF_CT_FTP_PASV = 0x1,NF_CT_FTP_EPRT = 0x2,NF_CT_FTP_EPSV = 0x3,};
enum nfnl_acct_type {NFACCT_UNSPEC = 0x0,NFACCT_NAME = 0x1,NFACCT_PKTS = 0x2,NFACCT_BYTES = 0x3,NFACCT_USE = 0x4,__NFACCT_MAX = 0x5,};
enum nl_mmap_status {NL_MMAP_STATUS_UNUSED = 0x0,NL_MMAP_STATUS_RESERVED = 0x1,NL_MMAP_STATUS_VALID = 0x2,NL_MMAP_STATUS_COPY = 0x3,NL_MMAP_STATUS_SKIP = 0x4,};
enum nubus_category {NUBUS_CAT_BOARD = 0x1,NUBUS_CAT_DISPLAY = 0x3,NUBUS_CAT_NETWORK = 0x4,NUBUS_CAT_COMMUNICATIONS = 0x6,NUBUS_CAT_FONT = 0x9,NUBUS_CAT_CPU = 0xA,NUBUS_CAT_DUODOCK = 0x20,};
enum nubus_type_cpu {NUBUS_TYPE_68020 = 0x3,NUBUS_TYPE_68030 = 0x4,NUBUS_TYPE_68040 = 0x5,};
struct oldold_utsname {char sysname[9];char nodename[9];char release[9];char version[9];char machine[9];};
enum ovs_packet_cmd {OVS_PACKET_CMD_UNSPEC = 0x0,OVS_PACKET_CMD_MISS = 0x1,OVS_PACKET_CMD_ACTION = 0x2,OVS_PACKET_CMD_EXECUTE = 0x3,};
enum ovs_vport_attr {OVS_VPORT_ATTR_UNSPEC = 0x0,OVS_VPORT_ATTR_PORT_NO = 0x1,OVS_VPORT_ATTR_TYPE = 0x2,OVS_VPORT_ATTR_NAME = 0x3,OVS_VPORT_ATTR_OPTIONS = 0x4,OVS_VPORT_ATTR_UPCALL_PID = 0x5,OVS_VPORT_ATTR_STATS = 0x6,__OVS_VPORT_ATTR_MAX = 0x7,};
enum ovs_vport_type {OVS_VPORT_TYPE_UNSPEC = 0x0,OVS_VPORT_TYPE_NETDEV = 0x1,OVS_VPORT_TYPE_INTERNAL = 0x2,OVS_VPORT_TYPE_GRE = 0x3,__OVS_VPORT_TYPE_MAX = 0x4,};
union pthread_attr_t {char __size[56];__int64 __align;};
typedef union _1C4035FDEAFFF0FCE26E66A96F6BBEB4 pthread_cond_t;
typedef int pthread_once_t;
struct ptp_clock_caps {int max_adj;int n_alarm;int n_ext_ts;int n_per_out;int pps;int rsv[15];};
typedef struct _F1F9335C32D188513BC2595A34A539C6 raw_hdlc_proto;
typedef unsigned __int8 sbi_instr_data[32];
struct scc_mem_config {unsigned int dummy;unsigned int bufsize;};
enum sctp_cmsg_type {SCTP_INIT = 0x0,SCTP_SNDRCV = 0x1,};
enum sctp_conntrack {SCTP_CONNTRACK_NONE = 0x0,SCTP_CONNTRACK_CLOSED = 0x1,SCTP_CONNTRACK_COOKIE_WAIT = 0x2,SCTP_CONNTRACK_COOKIE_ECHOED = 0x3,SCTP_CONNTRACK_ESTABLISHED = 0x4,SCTP_CONNTRACK_SHUTDOWN_SENT = 0x5,SCTP_CONNTRACK_SHUTDOWN_RECD = 0x6,SCTP_CONNTRACK_SHUTDOWN_ACK_SENT = 0x7,SCTP_CONNTRACK_MAX = 0x8,};
enum sctp_msg_flags {MSG_NOTIFICATION = 0x8000,};
enum sctp_sac_state {SCTP_COMM_UP = 0x0,SCTP_COMM_LOST = 0x1,SCTP_RESTART = 0x2,SCTP_SHUTDOWN_COMP = 0x3,SCTP_CANT_STR_ASSOC = 0x4,};
enum sctp_spc_state {SCTP_ADDR_AVAILABLE = 0x0,SCTP_ADDR_UNREACHABLE = 0x1,SCTP_ADDR_REMOVED = 0x2,SCTP_ADDR_ADDED = 0x3,SCTP_ADDR_MADE_PRIM = 0x4,SCTP_ADDR_CONFIRMED = 0x5,};
enum sctp_spp_flags {SPP_HB_ENABLE = 0x1,SPP_HB_DISABLE = 0x2,SPP_HB = 0x3,SPP_HB_DEMAND = 0x4,SPP_PMTUD_ENABLE = 0x8,SPP_PMTUD_DISABLE = 0x10,SPP_PMTUD = 0x18,SPP_SACKDELAY_ENABLE = 0x20,SPP_SACKDELAY_DISABLE = 0x40,SPP_SACKDELAY = 0x60,SPP_HB_TIME_IS_ZERO = 0x80,};
enum sctp_ssf_flags {SCTP_DATA_UNSENT = 0x0,SCTP_DATA_SENT = 0x1,};
struct sdla_dlci_conf {__int16 config;__int16 CIR_fwd;__int16 Bc_fwd;__int16 Be_fwd;__int16 CIR_bwd;__int16 Bc_bwd;__int16 Be_bwd;__int16 Tc_fwd;__int16 Tc_bwd;__int16 Tf_max;__int16 Tb_max;};
struct sel_arg_struct;
typedef struct slave_config slave_config_t;
struct snd_dm_fm_info {unsigned __int8 fm_mode;unsigned __int8 rhythm;};
struct snd_dm_fm_note {unsigned __int8 voice;unsigned __int8 octave;unsigned int fnum;unsigned __int8 key_on;};
struct __attribute__((packed)) snd_seq_ev_ext {unsigned int len;void *ptr;};
struct snd_seq_result {int event;int result;};
struct snd_timer_read {unsigned int resolution;unsigned int ticks;};
typedef struct td_event_msg td_event_msg_t;
typedef struct td_thrhandle td_thrhandle_t;
typedef unsigned __int16 uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned __int64 uint_least64_t;
struct usbdevfs_ioctl {int ifno;int ioctl_code;void *data;};
enum v4l2_ctrl_type {V4L2_CTRL_TYPE_INTEGER = 0x1,V4L2_CTRL_TYPE_BOOLEAN = 0x2,V4L2_CTRL_TYPE_MENU = 0x3,V4L2_CTRL_TYPE_BUTTON = 0x4,V4L2_CTRL_TYPE_INTEGER64 = 0x5,V4L2_CTRL_TYPE_CTRL_CLASS = 0x6,V4L2_CTRL_TYPE_STRING = 0x7,V4L2_CTRL_TYPE_BITMASK = 0x8,V4L2_CTRL_TYPE_INTEGER_MENU = 0x9,};
enum wimax_rf_state {WIMAX_RF_OFF = 0x0,WIMAX_RF_ON = 0x1,WIMAX_RF_QUERY = 0x2,};
struct x25_facilities {unsigned int winsize_in;unsigned int winsize_out;unsigned int pacsize_in;unsigned int pacsize_out;unsigned int throughput;unsigned int reverse;};
typedef struct _70E4CC7E54BA43D6E5622AB555079691 xAllocColorReq;
typedef struct _8BC4543EF695142B249D7CC5D558FED0 xAnimCursorElt;
typedef struct _xButtonInfo *xButtonInfoPtr;
typedef struct _F88DFF0D39F146217256B482FD360ACC xChangeModeReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSEnableReq;
typedef struct _81227E6A2E975B2588700A3A20196845 xDPMSInfoReply;
typedef struct _95AD98905D37F3C4828B107878AF9BCB xDRI2GetMSCReq;
typedef struct _FC3BB1A81303FA005E7D17D8401F89AB xDeviceBellReq;
typedef struct _11B292B49D7574EDADD15F3F19C7735E xDeviceCoreCtl;
typedef struct _xDeviceInfo *xDeviceInfoPtr;
typedef struct _4D2E0013E954DA651F15636ABC395F09 xFeedbackState;
typedef struct _091A8121C3C792D8858188DBB434C01C xFreeColorsReq;
typedef struct _1E68C84E6BE3B673D767CBEC47B3DECA xGetImageReply;
typedef struct _03C803DDC9061B143F519D4D73BD5571 xGrabButtonReq;
typedef struct _EDE17C06FAF221A5878FFED27CF569B6 xGrabDeviceReq;
typedef struct _7A455DB3BD331D79AF16B3231F86E0C5 xInternAtomReq;
typedef struct _LbxCloseEvent xLbxCloseEvent;
typedef struct _A03D8E09E1901FA73C4A77E2D3267500 xLbxStartReply;
typedef struct _LbxTagData xLbxTagDataReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xOpenDeviceReq;
typedef struct _87651D9D31681607819E457EB5237059 xValuatorState;
typedef struct _F1E1BB7F23F71F625712F6F0DB53C50A xXDGASyncReply;
typedef struct _254D69ABE7D19BD30B5C577476AC4C63 xXIDeviceEvent;
typedef struct _524CF13A1D734F6153C9475201DD66D0 xXIGetFocusReq;
typedef struct _7FBA3E320C553851CFD795D35ADFF810 xXISetFocusReq;
typedef struct _XagDestroy xXagDestroyReq;
typedef struct _XagGetAttr xXagGetAttrReq;
typedef struct _B39400A659C1078B091D331E19541038 xXagQueryReply;
typedef struct _322E4D740D2A723112F8227414848916 xXevieEndReply;
typedef struct _XevieStart xXevieStartReq;
enum xcb_arc_mode_t {XCB_ARC_MODE_CHORD = 0x0,XCB_ARC_MODE_PIE_SLICE = 0x1,};
enum xcb_blanking_t {XCB_BLANKING_NOT_PREFERRED = 0x0,XCB_BLANKING_PREFERRED = 0x1,XCB_BLANKING_DEFAULT = 0x2,};
typedef struct _3B0A3C5E53A42F20C20C43D841AB73C8 xcb_ge_event_t;
enum xcb_led_mode_t {XCB_LED_MODE_OFF = 0x0,XCB_LED_MODE_ON = 0x1,};
enum xcb_mod_mask_t {XCB_MOD_MASK_SHIFT = 0x1,XCB_MOD_MASK_LOCK = 0x2,XCB_MOD_MASK_CONTROL = 0x4,XCB_MOD_MASK_1 = 0x8,XCB_MOD_MASK_2 = 0x10,XCB_MOD_MASK_3 = 0x20,XCB_MOD_MASK_4 = 0x40,XCB_MOD_MASK_5 = 0x80,XCB_MOD_MASK_ANY = 0x8000,};
enum xcb_property_t {XCB_PROPERTY_NEW_VALUE = 0x0,XCB_PROPERTY_DELETE = 0x1,};
enum xcb_set_mode_t {XCB_SET_MODE_INSERT = 0x0,XCB_SET_MODE_DELETE = 0x1,};
enum xcb_shape_sk_t {XCB_SHAPE_SK_BOUNDING = 0x0,XCB_SHAPE_SK_CLIP = 0x1,XCB_SHAPE_SK_INPUT = 0x2,};
enum xcb_shape_so_t {XCB_SHAPE_SO_SET = 0x0,XCB_SHAPE_SO_UNION = 0x1,XCB_SHAPE_SO_INTERSECT = 0x2,XCB_SHAPE_SO_SUBTRACT = 0x3,XCB_SHAPE_SO_INVERT = 0x4,};
typedef union _4A6884A56FE442900684DB208A74F8AB xfrm_address_t;
struct xfrm_algo_aead {char alg_name[64];unsigned int alg_key_len;unsigned int alg_icv_len;char alg_key[];};
struct xfrm_algo_auth {char alg_name[64];unsigned int alg_key_len;unsigned int alg_trunc_len;char alg_key[];};
typedef struct _xkbGetMapReply xkbGetMapReply;
typedef struct _xkbGetNames xkbGetNamesReq;
typedef struct _xkbGetState xkbGetStateReq;
typedef struct _xkbKeyWireDesc xkbKeyWireDesc;
typedef struct _xkbNamesNotify xkbNamesNotify;
typedef struct _xkbRowWireDesc xkbRowWireDesc;
typedef struct _xkbSetNames xkbSetNamesReq;
typedef struct _xkbStateNotify xkbStateNotify;
struct xt_policy_spec {unsigned __int8 saddr : 1;unsigned __int8 daddr : 1;unsigned __int8 proto : 1;unsigned __int8 mode : 1;unsigned __int8 spi : 1;unsigned __int8 reqid : 1;};
enum xt_quota_flags {XT_QUOTA_INVERT = 0x1,};
typedef struct _12C70FB380D888247B65F57E99B647A7 xvEncodingInfo;
typedef struct _DE5295A524AE5E785ED4C88469459F67 xvStopVideoReq;
struct ypbind_binding {char ypbind_binding_addr[4];char ypbind_binding_port[2];};
struct zatm_pool_info {int ref_count;int low_water;int high_water;int rqa_count;int rqu_count;int offset;int next_off;int next_cnt;int next_thres;};
enum CLOCK_sources {CLK_DPLL = 0x0,CLK_EXTERNAL = 0x1,CLK_DIVIDER = 0x2,CLK_BRG = 0x3,};
typedef int DrawDirection;
typedef struct _2E669CC187FBBB2ECC14F5757D46E269 Dwarf_Locdesc;
typedef struct Dwarf_P_Debug_s *Dwarf_P_Debug;
typedef struct _BC4B0D515307F8380CCAE7BF44CFA97C Elf32_RegInfo;
typedef struct _FE43560485AD2DF497423A9D2646B91A Elf32_Syminfo;
typedef struct _12883A0710B467FBB4742064A9BE69DF Elf32_Verdaux;
typedef struct _E714B4690DCD4CE2097239CD07373860 Elf32_Vernaux;
typedef struct _DDB9E5FBB16C40A976BC405025678C57 Elf32_Verneed;
typedef struct _2FC37C12F50461D7B99376C23209E757 Elf64_Syminfo;
typedef struct _D758E79311354DDC9AF0CC7E7C22CD10 Elf64_Verdaux;
typedef struct _A46BFD4B6B8C284ED478D587B5722CAB Elf64_Vernaux;
typedef struct _DBDB4AF8E469679C3A4CD785AB502395 Elf64_Verneed;
typedef struct _ExtentInfo *ExtentInfoPtr;
typedef struct _ExtentInfo ExtentInfoRec;
enum FULLDUP_modes {KISS_DUPLEX_HALF = 0x0,KISS_DUPLEX_FULL = 0x1,KISS_DUPLEX_LINK = 0x2,KISS_DUPLEX_OPTIMA = 0x3,};
typedef int Field_Options;
typedef float La_x86_64_xmm;
enum MACRO_ABORTED {ABORTED_COMMAND = 0xB,};
enum MACRO_ADAPTER {ADAPTER_STATE_INITIALIZING = 0x1,ADAPTER_STATE_RESET = 0x2,ADAPTER_STATE_HOLD = 0x4,ADAPTER_STATE_READY = 0x5,ADAPTER_STATE_OPERATIONAL = 0x8,ADAPTER_STATE_FAILED = 0x10,ADAPTER_STATE_FAULTED = 0x11,};
enum MACRO_AGX00DB {AGX00DB = 0x0,};
enum MACRO_ANYADDR {ANYADDR = 0,};
enum MACRO_ATMARPD {ATMARPD_CTRL = 25057,};
enum MACRO_ATMSIGD {ATMSIGD_CTRL = 25072,};
enum MACRO_ATM_OC3 {ATM_OC3_PCR = 353207,ATM_25_PCR = 59111,ATM_OC12_PCR = 1412830,ATM_DS3_PCR = 96000,ATM_BACKEND_RAW = 0,ATM_BACKEND_PPP = 1,ATM_BACKEND_BR2684 = 2,ATM_ITFTYP_LEN = 8,};
enum MACRO_ATT00DB {ATT00DB = 0x0,ATT02DB = 0x1,ATT04DB = 0x2,};
enum MACRO_ATT06DB {ATT06DB = 0x3,ATT08DB = 0x4,};
enum MACRO_ATT10DB {ATT10DB = 0x5,};
enum MACRO_ATT12DB {ATT12DB = 0x6,};
enum MACRO_ATT14DB {ATT14DB = 0x7,ATT16DB = 0x8,};
enum MACRO_ATT18DB {ATT18DB = 0x9,};
enum MACRO_ATT20DB {ATT20DB = 0xA,};
enum MACRO_ATT22DB {ATT22DB = 0xB,};
enum MACRO_ATT24DB {ATT24DB = 0xC,};
enum MACRO_ATT26DB {ATT26DB = 0xD,};
enum MACRO_ATT28DB {ATT28DB = 0xE,};
enum MACRO_ATT30DB {ATT30DB = 0xF,ATT32DB = 0x10,};
enum MACRO_ATT34DB {ATT34DB = 0x11,};
enum MACRO_ATT36DB {ATT36DB = 0x12,};
enum MACRO_ATT38DB {ATT38DB = 0x13,};
enum MACRO_ATT40DB {ATT40DB = 0x14,};
enum MACRO_ATT42DB {ATT42DB = 0x15,};
enum MACRO_ATT44DB {ATT44DB = 0x16,};
enum MACRO_ATT46DB {ATT46DB = 0x17,};
enum MACRO_ATT48DB {ATT48DB = 0x18,};
enum MACRO_ATT50DB {ATT50DB = 0x19,};
enum MACRO_ATT52DB {ATT52DB = 0x1A,};
enum MACRO_ATT54DB {ATT54DB = 0x1B,};
enum MACRO_ATT56DB {ATT56DB = 0x1C,};
enum MACRO_ATT58DB {ATT58DB = 0x1D,};
enum MACRO_ATT60DB {ATT60DB = 0x1E,};
enum MACRO_ATT62DB {ATT62DB = 0x1F,};
enum MACRO_AUTONEG {AUTONEG_DISABLE = 0x0,AUTONEG_ENABLE = 0x1,};
enum MACRO_B115200 {B115200 = 0x1002,};
enum MACRO_B230400 {B230400 = 0x1003,};
enum MACRO_B460800 {B460800 = 0x1004,};
enum MACRO_B500000 {B500000 = 0x1005,};
enum MACRO_B576000 {B576000 = 0x1006,};
enum MACRO_B921600 {B921600 = 0x1007,};
enum MACRO_BADADDR {BADADDR = 7,BADCTLADDR = 8,};
enum MACRO_BIOSSEG {BIOSSEG = 0xF000,};
enum MACRO_BLKTYPE {BLKTYPE = 52,};
enum MACRO_BOOLEAN {BOOLEAN = 0,NUMBER = 1,STRING = 2,};
enum MACRO_BUTTON1 {BUTTON1_RELEASED = 1,BUTTON1_PRESSED = 2,BUTTON1_CLICKED = 4,BUTTON1_DOUBLE_CLICKED = 8,BUTTON1_TRIPLE_CLICKED = 16,};
enum MACRO_BUTTON2 {BUTTON2_RELEASED = 64,BUTTON2_PRESSED = 128,BUTTON2_CLICKED = 256,BUTTON2_DOUBLE_CLICKED = 512,BUTTON2_TRIPLE_CLICKED = 1024,};
enum MACRO_BUTTON3 {BUTTON3_RELEASED = 4096,BUTTON3_PRESSED = 8192,BUTTON3_CLICKED = 16384,BUTTON3_DOUBLE_CLICKED = 32768,BUTTON3_TRIPLE_CLICKED = 65536,};
enum MACRO_BUTTON4 {BUTTON4_RELEASED = 262144,BUTTON4_PRESSED = 524288,BUTTON4_CLICKED = 1048576,BUTTON4_DOUBLE_CLICKED = 2097152,BUTTON4_TRIPLE_CLICKED = 4194304,};
enum MACRO_BadAtom {BadAtom = 5,};
enum MACRO_BadFont {BadFont = 7,BadMatch = 8,};
enum MACRO_BadName {BadName = 15,BadLength = 16,};
enum MACRO_Button1 {Button1 = 1,Button2 = 2,};
enum MACRO_Button3 {Button3 = 3,Button4 = 4,};
enum MACRO_Button5 {Button5 = 5,};
enum MACRO_CACHING {CACHING_OFF = 0,};
enum MACRO_CANBSIZ {CANBSIZ = 255,MAXPATHLEN = 4096,};
enum MACRO_CAN_EFF {CAN_EFF_FLAG = 0x80000000,CAN_RTR_FLAG = 0x40000000,CAN_ERR_FLAG = 0x20000000,CAN_SFF_MASK = 0x7FF,CAN_EFF_MASK = 0x1FFFFFFF,CAN_ERR_MASK = 0x1FFFFFFF,CAN_SFF_ID_BITS = 0xB,CAN_EFF_ID_BITS = 0x1D,CAN_MAX_DLC = 0x8,CAN_MAX_DLEN = 0x8,};
enum MACRO_CAN_ERR {CAN_ERR_DLC = 8,CAN_ERR_TX_TIMEOUT = 1,CAN_ERR_LOSTARB = 2,CAN_ERR_CRTL = 4,CAN_ERR_PROT = 8,CAN_ERR_TRX = 16,CAN_ERR_ACK = 32,CAN_ERR_BUSOFF = 64,CAN_ERR_BUSERROR = 128,CAN_ERR_RESTARTED = 256,CAN_ERR_LOSTARB_UNSPEC = 0,CAN_ERR_CRTL_UNSPEC = 0,CAN_ERR_CRTL_RX_OVERFLOW = 1,CAN_ERR_CRTL_TX_OVERFLOW = 2,CAN_ERR_CRTL_RX_WARNING = 4,CAN_ERR_CRTL_TX_WARNING = 8,CAN_ERR_CRTL_RX_PASSIVE = 16,CAN_ERR_CRTL_TX_PASSIVE = 32,CAN_ERR_PROT_UNSPEC = 0,CAN_ERR_PROT_BIT = 1,CAN_ERR_PROT_FORM = 2,CAN_ERR_PROT_STUFF = 4,CAN_ERR_PROT_BIT0 = 8,CAN_ERR_PROT_BIT1 = 16,CAN_ERR_PROT_OVERLOAD = 32,CAN_ERR_PROT_ACTIVE = 64,CAN_ERR_PROT_TX = 128,CAN_ERR_PROT_LOC_UNSPEC = 0,CAN_ERR_PROT_LOC_SOF = 3,CAN_ERR_PROT_LOC_ID28_21 = 2,CAN_ERR_PROT_LOC_ID20_18 = 6,CAN_ERR_PROT_LOC_SRTR = 4,CAN_ERR_PROT_LOC_IDE = 5,CAN_ERR_PROT_LOC_ID17_13 = 7,CAN_ERR_PROT_LOC_ID12_05 = 15,CAN_ERR_PROT_LOC_ID04_00 = 14,CAN_ERR_PROT_LOC_RTR = 12,CAN_ERR_PROT_LOC_RES1 = 13,CAN_ERR_PROT_LOC_RES0 = 9,CAN_ERR_PROT_LOC_DLC = 11,CAN_ERR_PROT_LOC_DATA = 10,CAN_ERR_PROT_LOC_CRC_SEQ = 8,CAN_ERR_PROT_LOC_CRC_DEL = 24,CAN_ERR_PROT_LOC_ACK = 25,CAN_ERR_PROT_LOC_ACK_DEL = 27,CAN_ERR_PROT_LOC_EOF = 26,CAN_ERR_PROT_LOC_INTERM = 18,CAN_ERR_TRX_UNSPEC = 0,CAN_ERR_TRX_CANH_NO_WIRE = 4,CAN_ERR_TRX_CANH_SHORT_TO_BAT = 5,CAN_ERR_TRX_CANH_SHORT_TO_VCC = 6,CAN_ERR_TRX_CANH_SHORT_TO_GND = 7,CAN_ERR_TRX_CANL_NO_WIRE = 64,CAN_ERR_TRX_CANL_SHORT_TO_BAT = 80,CAN_ERR_TRX_CANL_SHORT_TO_VCC = 96,CAN_ERR_TRX_CANL_SHORT_TO_GND = 112,CAN_ERR_TRX_CANL_SHORT_TO_CANH = 128,};
enum MACRO_CAN_INV {CAN_INV_FILTER = 0x20000000,};
enum MACRO_CAN_RAW {CAN_RAW = 1,CAN_BCM = 2,CAN_TP16 = 3,CAN_TP20 = 4,CAN_MCNET = 5,CAN_ISOTP = 6,CAN_NPROTO = 7,};
enum MACRO_CD_PART {CD_PART_MAX = 64,CD_PART_MASK = 63,};
enum MACRO_CHRTYPE {CHRTYPE = 51,};
enum MACRO_CLKFLAG {CLKFLAG_PROGRAMABLE = 1,};
enum MACRO_COMMAND {MIN_FORM_COMMAND = 512,MAX_FORM_COMMAND = 568,MAX_COMMAND = 639,};
enum MACRO_COMPARE {COMPARE = 0x39,};
enum MACRO_CSIGNAL {CSIGNAL = 0xFF,};
enum MACRO_CSTATUS {CSTATUS = 0,CKILL = 21,};
enum MACRO_CTL1000 {CTL1000_AS_MASTER = 0x800,CTL1000_ENABLE_MASTER = 0x1000,};
enum MACRO_CWERASE {CWERASE = 23,};
enum MACRO_Complex {Complex = 0,Nonconvex = 1,Convex = 2,};
enum MACRO_DEBUGFS {DEBUGFS_MAGIC = 0x64626720,SECURITYFS_MAGIC = 0x73636673,SELINUX_MAGIC = 0xF97CFF8C,SMACK_MAGIC = 0x43415D53,RAMFS_MAGIC = 0x858458F6,TMPFS_MAGIC = 0x1021994,HUGETLBFS_MAGIC = 0x958458F6,SQUASHFS_MAGIC = 0x73717368,ECRYPTFS_SUPER_MAGIC = 0xF15F,EFS_SUPER_MAGIC = 0x414A53,EXT2_SUPER_MAGIC = 0xEF53,EXT3_SUPER_MAGIC = 0xEF53,XENFS_SUPER_MAGIC = 0xABBA1974,EXT4_SUPER_MAGIC = 0xEF53,BTRFS_SUPER_MAGIC = 0x9123683E,NILFS_SUPER_MAGIC = 0x3434,F2FS_SUPER_MAGIC = 0xF2F52010,HPFS_SUPER_MAGIC = 0xF995E849,ISOFS_SUPER_MAGIC = 0x9660,JFFS2_SUPER_MAGIC = 0x72B6,PSTOREFS_MAGIC = 0x6165676C,EFIVARFS_MAGIC = 0xDE5E81E4,HOSTFS_SUPER_MAGIC = 0xC0FFEE,MINIX_SUPER_MAGIC = 0x137F,};
enum MACRO_DEFAULT {WORLD_DEFAULT = 1,GROUP_DEFAULT = 256,OWNER_DEFAULT = 983040,};
enum MACRO_DEFLATE {DEFLATE_MIN_SIZE = 9,DEFLATE_MAX_SIZE = 15,DEFLATE_METHOD_VAL = 8,DEFLATE_CHK_SEQUENCE = 0,};
enum MACRO_DELETED {DELETED_FLAG = 0xE5,};
enum MACRO_DIRTYPE {DIRTYPE = 53,};
enum MACRO_DNPROTO {DNPROTO_NSP = 2,DNPROTO_ROU = 3,DNPROTO_NML = 4,DNPROTO_EVL = 5,DNPROTO_EVR = 6,DNPROTO_NSPT = 7,};
enum MACRO_DN_ADDL {DN_ADDL = 2,DN_MAXADDL = 2,DN_MAXOPTL = 16,DN_MAXOBJL = 16,DN_MAXACCL = 40,DN_MAXALIASL = 128,DN_MAXNODEL = 256,};
enum MACRO_DR_TRAP {DR_TRAP_BITS = 15,DR_LOCAL_ENABLE = 1,DR_GLOBAL_ENABLE = 2,};
enum MACRO_DT_MIPS {DT_MIPS_RLD_VERSION = 0x70000001,DT_MIPS_TIME_STAMP = 0x70000002,DT_MIPS_ICHECKSUM = 0x70000003,DT_MIPS_IVERSION = 0x70000004,DT_MIPS_FLAGS = 0x70000005,DT_MIPS_BASE_ADDRESS = 0x70000006,DT_MIPS_MSYM = 0x70000007,DT_MIPS_CONFLICT = 0x70000008,DT_MIPS_LIBLIST = 0x70000009,DT_MIPS_LOCAL_GOTNO = 0x7000000A,DT_MIPS_CONFLICTNO = 0x7000000B,DT_MIPS_LIBLISTNO = 0x70000010,DT_MIPS_SYMTABNO = 0x70000011,DT_MIPS_UNREFEXTNO = 0x70000012,DT_MIPS_GOTSYM = 0x70000013,DT_MIPS_HIPAGENO = 0x70000014,DT_MIPS_RLD_MAP = 0x70000016,DT_MIPS_DELTA_CLASS = 0x70000017,DT_MIPS_DELTA_CLASS_NO = 0x70000018,DT_MIPS_DELTA_INSTANCE = 0x70000019,DT_MIPS_DELTA_INSTANCE_NO = 0x7000001A,DT_MIPS_DELTA_RELOC = 0x7000001B,DT_MIPS_DELTA_RELOC_NO = 0x7000001C,DT_MIPS_DELTA_SYM = 0x7000001D,DT_MIPS_DELTA_SYM_NO = 0x7000001E,DT_MIPS_DELTA_CLASSSYM = 0x70000020,DT_MIPS_DELTA_CLASSSYM_NO = 0x70000021,DT_MIPS_CXX_FLAGS = 0x70000022,DT_MIPS_PIXIE_INIT = 0x70000023,DT_MIPS_SYMBOL_LIB = 0x70000024,DT_MIPS_LOCALPAGE_GOTIDX = 0x70000025,DT_MIPS_LOCAL_GOTIDX = 0x70000026,DT_MIPS_HIDDEN_GOTIDX = 0x70000027,DT_MIPS_PROTECTED_GOTIDX = 0x70000028,DT_MIPS_OPTIONS = 0x70000029,DT_MIPS_INTERFACE = 0x7000002A,DT_MIPS_DYNSTR_ALIGN = 0x7000002B,DT_MIPS_INTERFACE_SIZE = 0x7000002C,DT_MIPS_RLD_TEXT_RESOLVE_ADDR = 0x7000002D,DT_MIPS_PERF_SUFFIX = 0x7000002E,DT_MIPS_COMPACT_SIZE = 0x7000002F,DT_MIPS_GP_VALUE = 0x70000030,DT_MIPS_AUX_DYNAMIC = 0x70000031,DT_MIPS_PLTGOT = 0x70000032,DT_MIPS_RWPLT = 0x70000034,DT_MIPS_NUM = 0x35,};
enum MACRO_DVB_API {DVB_API_VERSION = 5,DVB_API_VERSION_MINOR = 10,};
enum MACRO_E820MAP {E820MAP = 0x2D0,};
enum MACRO_E820MAX {E820MAX = 128,};
enum MACRO_ECHOCTL {ECHOCTL = 0x200,ECHOPRT = 0x400,ECHOKE = 0x800,FLUSHO = 0x800000,PENDIN = 0x20000000,};
enum MACRO_EEXISTS {EEXISTS = 6,};
enum MACRO_EF_MIPS {EF_MIPS_NOREORDER = 1,EF_MIPS_PIC = 2,EF_MIPS_CPIC = 4,EF_MIPS_XGOT = 8,EF_MIPS_64BIT_WHIRL = 16,EF_MIPS_ABI2 = 32,EF_MIPS_ABI_ON32 = 64,EF_MIPS_ARCH = -268435456,EF_MIPS_ARCH_1 = 0,EF_MIPS_ARCH_2 = 268435456,EF_MIPS_ARCH_3 = 536870912,EF_MIPS_ARCH_4 = 805306368,EF_MIPS_ARCH_5 = 1073741824,EF_MIPS_ARCH_32 = 1610612736,EF_MIPS_ARCH_64 = 1879048192,};
enum MACRO_EF_S390 {EF_S390_HIGH_GPRS = 0x1,};
enum MACRO_EI_DATA {EI_DATA = 5,};
enum MACRO_EI_MAG1 {EI_MAG1 = 1,};
enum MACRO_EI_MAG2 {EI_MAG2 = 2,};
enum MACRO_EI_MAG3 {EI_MAG3 = 3,};
enum MACRO_ELFMAG0 {ELFMAG0 = 0x7F,};
enum MACRO_ELFMAG1 {ELFMAG1 = 69,};
enum MACRO_ELFMAG2 {ELFMAG2 = 76,};
enum MACRO_ELFMAG3 {ELFMAG3 = 70,};
enum MACRO_ENCRYPT {ENCRYPT_IS = 0,ENCRYPT_SUPPORT = 1,ENCRYPT_REPLY = 2,ENCRYPT_START = 3,ENCRYPT_END = 4,ENCRYPT_REQSTART = 5,ENCRYPT_REQEND = 6,ENCRYPT_ENC_KEYID = 7,ENCRYPT_DEC_KEYID = 8,ENCRYPT_CNT = 9,};
enum MACRO_ENCTYPE {ENCTYPE_ANY = 0,ENCTYPE_DES_CFB64 = 1,ENCTYPE_DES_OFB64 = 2,ENCTYPE_CNT = 3,};
enum MACRO_ENOTSUP {ENOTSUP = 95,};
enum MACRO_ENOUSER {ENOUSER = 7,};
enum MACRO_ERASE_0 {ERASE = 0x19,};
enum MACRO_ESTATUS {ESTATUS_1000_TFULL = 0x2000,ESTATUS_1000_THALF = 0x1000,};
enum MACRO_ETHER_H {_NETINET_ETHER_H = 1,__NETINET_IF_ETHER_H = 1,_NETINET_ICMP6_H = 1,};
enum MACRO_ETHTOOL {ETHTOOL_FWVERS_LEN = 32,ETHTOOL_BUSINFO_LEN = 32,};
enum MACRO_EXTCODE {EXTCODE_MASK_SWAP = 0x1,EXTCODE_COMPARE_SWAP = 0x2,EXTCODE_FETCH_ADD = 0x3,EXTCODE_LITTLE_ADD = 0x4,EXTCODE_BOUNDED_ADD = 0x5,EXTCODE_WRAP_ADD = 0x6,EXTCODE_VENDOR_DEPENDENT = 0x7,};
enum MACRO_E_TABSZ {E_TABSZ = 256,};
enum MACRO_FAPPEND {FAPPEND = 1024,FFSYNC = 1052672,};
enum MACRO_FAT_ENT {FAT_ENT_FREE = 0,FAT_ENT_BAD = 268435447,FAT_ENT_EOF = 268435455,FAT_FSINFO_SIG1 = 1096897106,FAT_FSINFO_SIG2 = 1631679090,FAT_STATE_DIRTY = 1,};
enum MACRO_FAT_LFN {FAT_LFN_LEN = 255,};
enum MACRO_FBIOGET {FBIOGET_FSCREENINFO = 0x4602,};
enum MACRO_FBIOPAN {FBIOPAN_DISPLAY = 0x4606,};
enum MACRO_FBIOPUT {FBIOPUT_MODEINFO = 0x4617,};
enum MACRO_FB_TYPE {FB_TYPE_PACKED_PIXELS = 0,FB_TYPE_PLANES = 1,FB_TYPE_INTERLEAVED_PLANES = 2,FB_TYPE_TEXT = 3,FB_TYPE_VGA_PLANES = 4,FB_TYPE_FOURCC = 5,FB_AUX_TEXT_MDA = 0,FB_AUX_TEXT_CGA = 1,FB_AUX_TEXT_S3_MMIO = 2,FB_AUX_TEXT_MGA_STEP16 = 3,FB_AUX_TEXT_MGA_STEP8 = 4,FB_AUX_TEXT_SVGA_GROUP = 8,FB_AUX_TEXT_SVGA_MASK = 7,FB_AUX_TEXT_SVGA_STEP2 = 8,FB_AUX_TEXT_SVGA_STEP4 = 9,FB_AUX_TEXT_SVGA_STEP8 = 10,FB_AUX_TEXT_SVGA_STEP16 = 11,FB_AUX_TEXT_SVGA_LAST = 15,FB_AUX_VGA_PLANES_VGA4 = 0,FB_AUX_VGA_PLANES_CFB4 = 1,FB_AUX_VGA_PLANES_CFB8 = 2,FB_VISUAL_MONO01 = 0,FB_VISUAL_MONO10 = 1,FB_VISUAL_TRUECOLOR = 2,FB_VISUAL_PSEUDOCOLOR = 3,FB_VISUAL_DIRECTCOLOR = 4,FB_VISUAL_STATIC_PSEUDOCOLOR = 5,FB_VISUAL_FOURCC = 6,FB_ACCEL_NONE = 0,FB_ACCEL_ATARIBLITT = 1,FB_ACCEL_AMIGABLITT = 2,FB_ACCEL_S3_TRIO64 = 3,FB_ACCEL_NCR_77C32BLT = 4,FB_ACCEL_S3_VIRGE = 5,FB_ACCEL_ATI_MACH64GX = 6,FB_ACCEL_DEC_TGA = 7,FB_ACCEL_ATI_MACH64CT = 8,FB_ACCEL_ATI_MACH64VT = 9,FB_ACCEL_ATI_MACH64GT = 10,FB_ACCEL_SUN_CREATOR = 11,FB_ACCEL_SUN_CGSIX = 12,FB_ACCEL_SUN_LEO = 13,FB_ACCEL_IMS_TWINTURBO = 14,FB_ACCEL_3DLABS_PERMEDIA2 = 15,FB_ACCEL_MATROX_MGA2064W = 16,FB_ACCEL_MATROX_MGA1064SG = 17,FB_ACCEL_MATROX_MGA2164W = 18,FB_ACCEL_MATROX_MGA2164W_AGP = 19,FB_ACCEL_MATROX_MGAG100 = 20,FB_ACCEL_MATROX_MGAG200 = 21,FB_ACCEL_SUN_CG14 = 22,FB_ACCEL_SUN_BWTWO = 23,FB_ACCEL_SUN_CGTHREE = 24,FB_ACCEL_SUN_TCX = 25,FB_ACCEL_MATROX_MGAG400 = 26,FB_ACCEL_NV3 = 27,FB_ACCEL_NV4 = 28,FB_ACCEL_NV5 = 29,FB_ACCEL_CT_6555x = 30,FB_ACCEL_3DFX_BANSHEE = 31,FB_ACCEL_ATI_RAGE128 = 32,FB_ACCEL_IGS_CYBER2000 = 33,FB_ACCEL_IGS_CYBER2010 = 34,FB_ACCEL_IGS_CYBER5000 = 35,FB_ACCEL_SIS_GLAMOUR = 36,FB_ACCEL_3DLABS_PERMEDIA3 = 37,FB_ACCEL_ATI_RADEON = 38,FB_ACCEL_I810 = 39,FB_ACCEL_SIS_GLAMOUR_2 = 40,FB_ACCEL_SIS_XABRE = 41,FB_ACCEL_I830 = 42,FB_ACCEL_NV_10 = 43,FB_ACCEL_NV_20 = 44,FB_ACCEL_NV_30 = 45,FB_ACCEL_NV_40 = 46,FB_ACCEL_XGI_VOLARI_V = 47,FB_ACCEL_XGI_VOLARI_Z = 48,FB_ACCEL_OMAP1610 = 49,FB_ACCEL_TRIDENT_TGUI = 50,FB_ACCEL_TRIDENT_3DIMAGE = 51,FB_ACCEL_TRIDENT_BLADE3D = 52,FB_ACCEL_TRIDENT_BLADEXP = 53,FB_ACCEL_CIRRUS_ALPINE = 53,FB_ACCEL_NEOMAGIC_NM2070 = 90,FB_ACCEL_NEOMAGIC_NM2090 = 91,FB_ACCEL_NEOMAGIC_NM2093 = 92,FB_ACCEL_NEOMAGIC_NM2097 = 93,FB_ACCEL_NEOMAGIC_NM2160 = 94,FB_ACCEL_NEOMAGIC_NM2200 = 95,FB_ACCEL_NEOMAGIC_NM2230 = 96,FB_ACCEL_NEOMAGIC_NM2360 = 97,FB_ACCEL_NEOMAGIC_NM2380 = 98,FB_ACCEL_PXA3XX = 99,FB_ACCEL_SAVAGE4 = 128,FB_ACCEL_SAVAGE3D = 129,FB_ACCEL_SAVAGE3D_MV = 130,FB_ACCEL_SAVAGE2000 = 131,FB_ACCEL_SAVAGE_MX_MV = 132,FB_ACCEL_SAVAGE_MX = 133,FB_ACCEL_SAVAGE_IX_MV = 134,FB_ACCEL_SAVAGE_IX = 135,FB_ACCEL_PROSAVAGE_PM = 136,FB_ACCEL_PROSAVAGE_KM = 137,FB_ACCEL_S3TWISTER_P = 138,FB_ACCEL_S3TWISTER_K = 139,FB_ACCEL_SUPERSAVAGE = 140,FB_ACCEL_PROSAVAGE_DDR = 141,FB_ACCEL_PROSAVAGE_DDRK = 142,FB_ACCEL_PUV3_UNIGFX = 160,FB_CAP_FOURCC = 1,FB_NONSTD_HAM = 1,FB_NONSTD_REV_PIX_IN_B = 2,FB_ACTIVATE_NOW = 0,FB_ACTIVATE_NXTOPEN = 1,FB_ACTIVATE_TEST = 2,FB_ACTIVATE_MASK = 15,FB_ACTIVATE_VBL = 16,FB_CHANGE_CMAP_VBL = 32,FB_ACTIVATE_ALL = 64,FB_ACTIVATE_FORCE = 128,FB_ACTIVATE_INV_MODE = 256,FB_ACCELF_TEXT = 1,FB_SYNC_HOR_HIGH_ACT = 1,FB_SYNC_VERT_HIGH_ACT = 2,FB_SYNC_EXT = 4,FB_SYNC_COMP_HIGH_ACT = 8,FB_SYNC_BROADCAST = 16,FB_SYNC_ON_GREEN = 32,FB_VMODE_NONINTERLACED = 0,FB_VMODE_INTERLACED = 1,FB_VMODE_DOUBLE = 2,FB_VMODE_ODD_FLD_FIRST = 4,FB_VMODE_MASK = 255,FB_VMODE_YWRAP = 256,FB_VMODE_SMOOTH_XPAN = 512,FB_VMODE_CONUPDATE = 512,FB_ROTATE_UR = 0,FB_ROTATE_CW = 1,FB_ROTATE_UD = 2,FB_ROTATE_CCW = 3,};
enum MACRO_FC_ALEN {FC_ALEN = 6,FC_ID_LEN = 3,};
enum MACRO_FDEJECT {FDEJECT = 602,};
enum MACRO_FDFLUSH {FDFLUSH = 587,};
enum MACRO_FDMSGON {FDMSGON = 581,};
enum MACRO_FDRESET {FDRESET = 596,};
enum MACRO_FD_FILL {FD_FILL_BYTE = 0xF6,};
enum MACRO_FEATURE {FEATURE_CONTROL_LOCKED = 1,FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX = 2,FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX = 4,};
enum MACRO_FE_TUNE {FE_TUNE_MODE_ONESHOT = 0x1,FE_DISEQC_RESET_OVERLOAD = 0x6F3E,FE_DISEQC_SEND_BURST = 0x6F41,FE_SET_TONE = 0x6F42,FE_SET_VOLTAGE = 0x6F43,FE_ENABLE_HIGH_LNB_VOLTAGE = 0x6F44,FE_SET_FRONTEND_TUNE_MODE = 0x6F51,FE_DISHNETWORK_SEND_LEGACY_CMD = 0x6F50,};
enum MACRO_FIOCLEX {FIOCLEX = 0x5451,};
enum MACRO_FIONBIO {FIONBIO = 0x5421,};
enum MACRO_FM_TYPE {FM_TYPE_ADLIB = 0x0,FM_TYPE_OPL3 = 0x1,};
enum MACRO_FNDELAY {FNDELAY = 2048,};
enum MACRO_F_DUPFD {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,};
enum MACRO_F_GETLK {F_GETLK = 5,F_SETLK = 6,F_SETLKW = 7,};
enum MACRO_F_RDLCK {F_RDLCK = 0,F_WRLCK = 1,F_UNLCK = 2,F_EXLCK = 4,F_SHLCK = 8,};
enum MACRO_FocusIn {FocusIn = 9,};
enum MACRO_GENERIC {GENERIC_HDLC_VERSION = 4,};
enum MACRO_GETNCNT {GETNCNT = 14,};
enum MACRO_GETSOCK {TCPDIAG_GETSOCK = 18,DCCPDIAG_GETSOCK = 19,};
enum MACRO_GETZCNT {GETZCNT = 15,SETVAL = 16,};
enum MACRO_GIGASET {GIGASET_IOCTL = 0x47,};
enum MACRO_GXclear {GXclear = 0x0,GXand = 0x1,GXandReverse = 0x2,};
enum MACRO_GXequiv {GXequiv = 0x9,};
enum MACRO_HDLCDRV {HDLCDRV_PARMASK_IOBASE = 1,HDLCDRV_PARMASK_IRQ = 2,HDLCDRV_PARMASK_DMA = 4,HDLCDRV_PARMASK_DMA2 = 8,HDLCDRV_PARMASK_SERIOBASE = 16,HDLCDRV_PARMASK_PARIOBASE = 32,HDLCDRV_PARMASK_MIDIIOBASE = 64,};
enum MACRO_HID_REQ {HID_REQ_GET_REPORT = 0x1,HID_REQ_GET_IDLE = 0x2,HID_REQ_GET_PROTOCOL = 0x3,HID_REQ_SET_REPORT = 0x9,HID_REQ_SET_IDLE = 0xA,HID_REQ_SET_PROTOCOL = 0xB,HID_MAX_DESCRIPTOR_SIZE = 0x1000,};
enum MACRO_HOLDING {HOLDING_TIME_DEFAULT = 1200,};
enum MACRO_HOT_ADD {HOT_ADD_DISK = 0x928,};
enum MACRO_HUB_LED {HUB_LED_AUTO = 0,HUB_LED_AMBER = 1,HUB_LED_GREEN = 2,HUB_LED_OFF = 3,HUB_TTTT_8_BITS = 0,HUB_TTTT_16_BITS = 32,HUB_TTTT_24_BITS = 64,HUB_TTTT_32_BITS = 96,};
enum MACRO_IEEE754 {IEEE754_FLOAT_BIAS = 0x7F,IEEE754_DOUBLE_BIAS = 0x3FF,};
enum MACRO_IEEE854 {IEEE854_LONG_DOUBLE_BIAS = 0x3FFF,};
enum MACRO_IERRORS {IERRORS = 5,};
enum MACRO_IEVENTS {IEVENTS = 17,};
enum MACRO_IGMPMSG {IGMPMSG_NOCACHE = 1,IGMPMSG_WRONGVIF = 2,IGMPMSG_WHOLEPKT = 3,};
enum MACRO_ILLEGAL {ILLEGAL_REQUEST = 0x5,};
enum MACRO_INQUIRY {INQUIRY = 0x12,};
enum MACRO_INT_MAX {INT_MAX = 2147483647,UINT_MAX = 4294967295,};
enum MACRO_IOCSIZE {IOCSIZE_MASK = 1073676288,IOCSIZE_SHIFT = 16,};
enum MACRO_IP6T_MH {IP6T_MH_INV_TYPE = 0x1,IP6T_MH_INV_MASK = 0x1,IP6T_OPTS_OPTSNR = 0x10,IP6T_OPTS_LEN = 0x1,IP6T_OPTS_OPTS = 0x2,IP6T_OPTS_NSTRICT = 0x4,IP6T_OPTS_INV_LEN = 0x1,IP6T_OPTS_INV_MASK = 0x1,IP6T_RT_HOPS = 0x10,IP6T_RT_TYP = 0x1,IP6T_RT_SGS = 0x2,IP6T_RT_LEN = 0x4,IP6T_RT_RES = 0x8,IP6T_RT_FST_MASK = 0x30,IP6T_RT_FST = 0x10,IP6T_RT_FST_NSTRICT = 0x20,IP6T_RT_INV_TYP = 0x1,IP6T_RT_INV_SGS = 0x2,IP6T_RT_INV_LEN = 0x4,IP6T_RT_INV_MASK = 0x7,};
enum MACRO_IP6_TNL {IP6_TNL_F_IGN_ENCAP_LIMIT = 0x1,IP6_TNL_F_USE_ORIG_TCLASS = 0x2,IP6_TNL_F_USE_ORIG_FLOWLABEL = 0x4,IP6_TNL_F_MIP6_DEV = 0x8,IP6_TNL_F_RCV_DSCP_COPY = 0x10,IP6_TNL_F_USE_ORIG_FWMARK = 0x20,};
enum MACRO_IPPROTO {IPPROTO_L2TP = 115,};
enum MACRO_IPT_TCP {IPT_TCP_INV_SRCPT = 1,IPT_TCP_INV_DSTPT = 2,IPT_TCP_INV_FLAGS = 4,IPT_TCP_INV_OPTION = 8,IPT_TCP_INV_MASK = 15,IPT_UDP_INV_SRCPT = 1,IPT_UDP_INV_DSTPT = 2,IPT_UDP_INV_MASK = 3,IPT_F_FRAG = 1,IPT_F_GOTO = 2,IPT_F_MASK = 3,IPT_INV_VIA_IN = 1,IPT_INV_VIA_OUT = 2,IPT_INV_TOS = 4,IPT_INV_SRCIP = 8,IPT_INV_DSTIP = 16,IPT_INV_FRAG = 32,IPT_INV_PROTO = 64,IPT_INV_MASK = 127,IPT_BASE_CTL = 64,IPT_SO_SET_REPLACE = 64,IPT_SO_SET_ADD_COUNTERS = 65,IPT_SO_SET_MAX = 65,IPT_SO_GET_INFO = 64,IPT_SO_GET_ENTRIES = 65,IPT_SO_GET_REVISION_MATCH = 66,IPT_SO_GET_REVISION_TARGET = 67,IPT_SO_GET_MAX = 67,IPT_ICMP_INV = 1,IPT_AH_INV_SPI = 1,IPT_AH_INV_MASK = 1,};
enum MACRO_IP_ADDR {IP_ADDR_TYPE = 1,};
enum MACRO_JUSTIFY {JUSTIFY_LEFT = 1,JUSTIFY_CENTER = 2,JUSTIFY_RIGHT = 3,};
enum MACRO_KDADDIO {KDADDIO = 0x4B34,};
enum MACRO_KDDELIO {KDDELIO = 0x4B35,};
enum MACRO_KD_FONT {KD_FONT_OP_SET = 0,KD_FONT_OP_GET = 1,KD_FONT_OP_SET_DEFAULT = 2,KD_FONT_OP_COPY = 3,KD_FONT_FLAG_DONT_RECALC = 1,};
enum MACRO_KSAMTIB {KSAMTIB_CIGAM_2SFFJ = 0x8519,};
enum MACRO_KVM_API {KVM_API_VERSION = 12,KVM_TRC_SHIFT = 16,KVM_TRC_ENTRYEXIT = 65536,KVM_TRC_HANDLER = 131072,KVM_TRC_VMENTRY = 65537,KVM_TRC_VMEXIT = 65538,KVM_TRC_PAGE_FAULT = 131073,KVM_TRC_HEAD_SIZE = 12,KVM_TRC_CYCLE_SIZE = 8,KVM_TRC_EXTRA_MAX = 7,KVM_TRC_INJ_VIRQ = 131074,KVM_TRC_REDELIVER_EVT = 131075,KVM_TRC_PEND_INTR = 131076,KVM_TRC_IO_READ = 131077,KVM_TRC_IO_WRITE = 131078,KVM_TRC_CR_READ = 131079,KVM_TRC_CR_WRITE = 131080,KVM_TRC_DR_READ = 131081,KVM_TRC_DR_WRITE = 131082,KVM_TRC_MSR_READ = 131083,KVM_TRC_MSR_WRITE = 131084,KVM_TRC_CPUID = 131085,KVM_TRC_INTR = 131086,KVM_TRC_NMI = 131087,KVM_TRC_VMMCALL = 131088,KVM_TRC_HLT = 131089,KVM_TRC_CLTS = 131090,KVM_TRC_LMSW = 131091,KVM_TRC_APIC_ACCESS = 131092,KVM_TRC_TDP_FAULT = 131093,KVM_TRC_GTLB_WRITE = 131094,KVM_TRC_STLB_WRITE = 131095,KVM_TRC_STLB_INVAL = 131096,KVM_TRC_PPC_INSTR = 131097,KVM_MEM_LOG_DIRTY_PAGES = 1,KVM_MEM_READONLY = 2,KVM_PIT_SPEAKER_DUMMY = 1,KVM_EXIT_UNKNOWN = 0,KVM_EXIT_EXCEPTION = 1,KVM_EXIT_IO = 2,KVM_EXIT_HYPERCALL = 3,KVM_EXIT_DEBUG = 4,KVM_EXIT_HLT = 5,KVM_EXIT_MMIO = 6,KVM_EXIT_IRQ_WINDOW_OPEN = 7,KVM_EXIT_SHUTDOWN = 8,KVM_EXIT_FAIL_ENTRY = 9,KVM_EXIT_INTR = 10,KVM_EXIT_SET_TPR = 11,KVM_EXIT_TPR_ACCESS = 12,KVM_EXIT_S390_SIEIC = 13,KVM_EXIT_S390_RESET = 14,KVM_EXIT_DCR = 15,KVM_EXIT_NMI = 16,KVM_EXIT_INTERNAL_ERROR = 17,KVM_EXIT_OSI = 18,KVM_EXIT_PAPR_HCALL = 19,KVM_EXIT_S390_UCONTROL = 20,KVM_EXIT_WATCHDOG = 21,KVM_EXIT_S390_TSCH = 22,KVM_EXIT_EPR = 23,KVM_INTERNAL_ERROR_EMULATION = 1,KVM_INTERNAL_ERROR_SIMUL_EX = 2,KVM_INTERNAL_ERROR_DELIVERY_EV = 3,KVM_EXIT_IO_IN = 0,KVM_EXIT_IO_OUT = 1,KVM_S390_RESET_POR = 1,KVM_S390_RESET_CLEAR = 2,KVM_S390_RESET_SUBSYSTEM = 4,KVM_S390_RESET_CPU_INIT = 8,KVM_S390_RESET_IPL = 16,KVM_MP_STATE_RUNNABLE = 0,KVM_MP_STATE_UNINITIALIZED = 1,KVM_MP_STATE_INIT_RECEIVED = 2,KVM_MP_STATE_HALTED = 3,KVM_MP_STATE_SIPI_RECEIVED = 4,KVM_S390_SIGP_STOP = -131072,KVM_S390_PROGRAM_INT = -131071,KVM_S390_SIGP_SET_PREFIX = -131070,KVM_S390_RESTART = -131069,KVM_S390_MCHK = -126976,KVM_S390_INT_VIRTIO = -55805,KVM_S390_INT_SERVICE = -56319,KVM_S390_INT_EMERGENCY = -60927,KVM_S390_INT_EXTERNAL_CALL = -60926,KVM_S390_INT_IO_MIN = 0,KVM_S390_INT_IO_MAX = -131073,KVM_GUESTDBG_ENABLE = 1,KVM_GUESTDBG_SINGLESTEP = 2,KVM_PPC_PAGE_SIZES_MAX_SZ = 8,KVM_PPC_PAGE_SIZES_REAL = 1,KVM_PPC_1T_SEGMENTS = 2,KVM_PPC_PVINFO_FLAGS_EV_IDLE = 1,};
enum MACRO_KVM_MSR {KVM_MSR_ENABLED = 1,};
enum MACRO_LLC_OPT {LLC_OPT_MAX_RETRY = 100,LLC_OPT_MAX_SIZE = 4196,LLC_OPT_MAX_WIN = 127,LLC_OPT_MAX_ACK_TMR_EXP = 60,LLC_OPT_MAX_P_TMR_EXP = 60,LLC_OPT_MAX_REJ_TMR_EXP = 60,LLC_OPT_MAX_BUSY_TMR_EXP = 60,LLC_SAP_NULL = 0,LLC_SAP_LLC = 2,LLC_SAP_SNA = 4,LLC_SAP_PNM = 14,LLC_SAP_IP = 6,LLC_SAP_BSPAN = 66,LLC_SAP_MMS = 78,LLC_SAP_8208 = 126,LLC_SAP_3COM = 128,LLC_SAP_PRO = 142,LLC_SAP_SNAP = 170,LLC_SAP_BANYAN = 188,LLC_SAP_IPX = 224,LLC_SAP_NETBEUI = 240,LLC_SAP_LANMGR = 244,LLC_SAP_IMPL = 248,LLC_SAP_DISC = 252,LLC_SAP_OSI = 254,LLC_SAP_LAR = 220,LLC_SAP_RM = 212,LLC_SAP_GLOBAL = 255,};
enum MACRO_LPABORT {LPABORT = 0x604,};
enum MACRO_LPRESET {LPRESET = 0x60C,};
enum MACRO_LoadAll {LoadAll = 0x1,FinishRamge = 0x2,EightBitFont = 0x4,SixteenBitFont = 0x8,};
enum MACRO_MACHINE {MACHINE_UNKNOWN = 3,};
enum MACRO_MACVLAN {MACVLAN_FLAG_NOPROMISC = 1,};
enum MACRO_MAGIC_0 {MAGIC = 0x11A,};
enum MACRO_MAXGIDS {MAXGIDS = 16,};
enum MACRO_MAXMIFS {MAXMIFS = 32,};
enum MACRO_MAXVIFS {MAXVIFS = 32,};
enum MACRO_MAX_ARG {MAX_ARG_STRLEN = 131072,MAX_ARG_STRINGS = 2147483647,};
enum MACRO_MAX_ATR {MAX_ATR = 33,};
enum MACRO_MAX_DPs {MAX_DPs = 16,};
enum MACRO_MAX_DTV {MAX_DTV_STATS = 4,};
enum MACRO_MAX_I2O {MAX_I2O_CONTROLLERS = 32,};
enum MACRO_MAX_LEC {MAX_LEC_ITF = 48,};
enum MACRO_MAX_NUM {MAX_NUM_CODECS = 32,MAX_NUM_CODEC_DESCRIPTORS = 32,MAX_NUM_BITRATES = 32,};
enum MACRO_MAX_REC {MAX_REC_LOOP = 4,MAX_RED_LOOP = 4,};
enum MACRO_MAX_UBI {MAX_UBI_MTD_NAME_LEN = 127,};
enum MACRO_MESSAGE {MESSAGE_REJECT = 0x7,};
enum MACRO_MEYEIOC {MEYEIOC_STILLCAPT = 30404,};
enum MACRO_MIB_MAX {__ICMPMSG_MIB_MAX = 512,__ICMP6MSG_MIB_MAX = 512,};
enum MACRO_MII_MMD {MII_MMD_CTRL_DEVAD_MASK = 0x1F,MII_MMD_CTRL_ADDR = 0x0,MII_MMD_CTRL_NOINCR = 0x4000,MII_MMD_CTRL_INCR_RDWT = 0x8000,MII_MMD_CTRL_INCR_ON_WT = 0xC000,};
enum MACRO_MINARCS {MINARCS = 50,MAXARCS = 1048576,};
enum MACRO_MINIX_I {MINIX_I_MAP_SLOTS = 8,MINIX_Z_MAP_SLOTS = 64,MINIX_VALID_FS = 1,MINIX_ERROR_FS = 2,};
enum MACRO_MMTIMER {MMTIMER_IOCTL_BASE = 109,MMTIMER_GETOFFSET = 27904,MMTIMER_GETBITS = 27908,MMTIMER_MMAPAVAIL = 27910,};
enum MACRO_MPS_AND {MPS_AND_MPC = 3,};
enum MACRO_MRT6MSG {MRT6MSG_NOCACHE = 1,MRT6MSG_WRONGMIF = 2,MRT6MSG_WHOLEPKT = 3,};
enum MACRO_MSR_KVM {MSR_KVM_WALL_CLOCK_NEW = 0x4B564D00,MSR_KVM_SYSTEM_TIME_NEW = 0x4B564D01,MSR_KVM_ASYNC_PF_EN = 0x4B564D02,MSR_KVM_STEAL_TIME = 0x4B564D03,MSR_KVM_PV_EOI_EN = 0x4B564D04,};
enum MACRO_MTD_MAX {MTD_MAX_OOBFREE_ENTRIES = 8,MTD_MAX_ECCPOS_ENTRIES = 64,};
enum MACRO_MTERASE {MTERASE = 13,};
enum MACRO_MTRESET {MTRESET = 0,MTFSF = 1,MTBSF = 2,};
enum MACRO_MTRETEN {MTRETEN = 9,};
enum MACRO_NCURSES {NCURSES_VERSION_MAJOR = 5,NCURSES_VERSION_MINOR = 9,NCURSES_VERSION_PATCH = 20130511,NCURSES_MOUSE_VERSION = 1,NCURSES_DLL_H_incl = 1,NCURSES_ENABLE_STDBOOL_H = 1,NCURSES_OPAQUE = 0,NCURSES_REENTRANT = 0,NCURSES_INTEROP_FUNCS = 0,NCURSES_TPARM_VARARGS = 1,NCURSES_WIDECHAR = 1,};
enum MACRO_NETDB_H {_NETDB_H = 1,_RPC_NETDB_H = 1,};
enum MACRO_NETLINK {NETLINK_ROUTE = 0,NETLINK_UNUSED = 1,NETLINK_USERSOCK = 2,NETLINK_FIREWALL = 3,NETLINK_SOCK_DIAG = 4,NETLINK_NFLOG = 5,NETLINK_XFRM = 6,NETLINK_SELINUX = 7,NETLINK_ISCSI = 8,NETLINK_AUDIT = 9,NETLINK_FIB_LOOKUP = 10,NETLINK_CONNECTOR = 11,NETLINK_NETFILTER = 12,NETLINK_IP6_FW = 13,NETLINK_DNRTMSG = 14,NETLINK_KOBJECT_UEVENT = 15,NETLINK_GENERIC = 16,NETLINK_SCSITRANSPORT = 18,NETLINK_ECRYPTFS = 19,NETLINK_RDMA = 20,NETLINK_CRYPTO = 21,NETLINK_INET_DIAG = 4,};
enum MACRO_NFC_IP6 {NFC_IP6_SRC = 0x1,NFC_IP6_DST = 0x2,NFC_IP6_IF_IN = 0x4,NFC_IP6_IF_OUT = 0x8,NFC_IP6_TOS = 0x10,NFC_IP6_PROTO = 0x20,NFC_IP6_OPTIONS = 0x40,NFC_IP6_FRAG = 0x80,NFC_IP6_TCPFLAGS = 0x100,NFC_IP6_SRC_PT = 0x200,NFC_IP6_DST_PT = 0x400,NFC_IP6_PROTO_UNKNOWN = 0x2000,};
enum MACRO_NFSCLNT {NFSCLNT_IDMAX = 1024,NFSCLNT_ADDRMAX = 16,NFSCLNT_KEYMAX = 32,};
enum MACRO_NFSDDBG {NFSDDBG_SOCK = 0x1,NFSDDBG_FH = 0x2,NFSDDBG_EXPORT = 0x4,NFSDDBG_SVC = 0x8,NFSDDBG_PROC = 0x10,NFSDDBG_FILEOP = 0x20,NFSDDBG_AUTH = 0x40,NFSDDBG_REPCACHE = 0x80,NFSDDBG_XDR = 0x100,NFSDDBG_LOCKD = 0x200,NFSDDBG_ALL = 0x7FFF,NFSDDBG_NOCHANGE = 0xFFFF,};
enum MACRO_NFSMODE {NFSMODE_FMT = 0xF000,NFSMODE_DIR = 0x4000,NFSMODE_CHR = 0x2000,NFSMODE_BLK = 0x6000,NFSMODE_REG = 0x8000,NFSMODE_LNK = 0xA000,NFSMODE_SOCK = 0xC000,NFSMODE_FIFO = 0x1000,};
enum MACRO_NFSPROC {NFSPROC_NULL = 0,NFSPROC_GETATTR = 1,NFSPROC_SETATTR = 2,NFSPROC_ROOT = 3,NFSPROC_LOOKUP = 4,NFSPROC_READLINK = 5,NFSPROC_READ = 6,NFSPROC_WRITECACHE = 7,NFSPROC_WRITE = 8,NFSPROC_CREATE = 9,NFSPROC_REMOVE = 10,NFSPROC_RENAME = 11,NFSPROC_LINK = 12,NFSPROC_SYMLINK = 13,NFSPROC_MKDIR = 14,NFSPROC_RMDIR = 15,NFSPROC_READDIR = 16,NFSPROC_STATFS = 17,};
enum MACRO_NFS_ACL {NFS_ACL_PROGRAM = 100227,};
enum MACRO_NFS_DEF {NFS_DEF_UDP_TIMEO = 11,NFS_DEF_UDP_RETRANS = 3,NFS_DEF_TCP_TIMEO = 600,NFS_DEF_TCP_RETRANS = 2,NFS_MAX_UDP_TIMEOUT = 6000,NFS_MAX_TCP_TIMEOUT = 60000,NFS_DEF_ACREGMIN = 3,NFS_DEF_ACREGMAX = 60,NFS_DEF_ACDIRMIN = 30,NFS_DEF_ACDIRMAX = 60,};
enum MACRO_NFS_MNT {NFS_MNT_PROGRAM = 100005,NFS_MNT_VERSION = 1,NFS_MNT3_VERSION = 3,};
enum MACRO_NGROUPS {NGROUPS_MAX = 65536,};
enum MACRO_NL_MMAP {NL_MMAP_MSG_ALIGNMENT = 4,};
enum MACRO_NL_SETD {NL_SETD = 1,NL_CAT_LOCALE = 1,};
enum MACRO_NOGROUP {NOGROUP = -1,};
enum MACRO_NO_SUCH {NO_SUCH_CHAR = -1,};
enum MACRO_NR_DEAD {NR_DEAD = 6,};
enum MACRO_NR_FILE {NR_FILE = 8192,};
enum MACRO_NR_ICMP {NR_ICMP_UNREACH = 15,};
enum MACRO_NR_LOCK {NR_LOCK = 9,};
enum MACRO_NoValue {NoValue = 0x0,XValue = 0x1,YValue = 0x2,WidthValue = 0x4,HeightValue = 0x8,};
enum MACRO_OPENVPN {OPENVPN_PLUGIN_VERSION = 3,OPENVPN_PLUGIN_UP = 0,OPENVPN_PLUGIN_DOWN = 1,OPENVPN_PLUGIN_ROUTE_UP = 2,OPENVPN_PLUGIN_IPCHANGE = 3,OPENVPN_PLUGIN_TLS_VERIFY = 4,OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY = 5,OPENVPN_PLUGIN_CLIENT_CONNECT = 6,OPENVPN_PLUGIN_CLIENT_DISCONNECT = 7,OPENVPN_PLUGIN_LEARN_ADDRESS = 8,OPENVPN_PLUGIN_CLIENT_CONNECT_V2 = 9,OPENVPN_PLUGIN_TLS_FINAL = 10,OPENVPN_PLUGIN_ENABLE_PF = 11,OPENVPN_PLUGIN_ROUTE_PREDOWN = 12,OPENVPN_PLUGIN_N = 13,OPENVPN_PLUGIN_FUNC_SUCCESS = 0,OPENVPN_PLUGIN_FUNC_ERROR = 1,OPENVPN_PLUGIN_FUNC_DEFERRED = 2,OPENVPN_PLUGINv3_STRUCTVER = 1,OPENVPN_PLUGIN_INIT_PRE_CONFIG_PARSE = 1,OPENVPN_PLUGIN_INIT_PRE_DAEMON = 2,OPENVPN_PLUGIN_INIT_POST_DAEMON = 3,OPENVPN_PLUGIN_INIT_POST_UID_CHANGE = 4,};
enum MACRO_PACKAGE {PACKAGE_THERM_STATUS_PROCHOT = 1,PACKAGE_THERM_STATUS_POWER_LIMIT = 1024,};
enum MACRO_PARPORT {PARPORT_MAX = 16,PARPORT_IRQ_NONE = -1,PARPORT_DMA_NONE = -1,PARPORT_IRQ_AUTO = -2,PARPORT_DMA_AUTO = -2,PARPORT_DMA_NOFIFO = -3,PARPORT_DISABLE = -2,PARPORT_IRQ_PROBEONLY = -3,PARPORT_IOHI_AUTO = -1,PARPORT_CONTROL_STROBE = 1,PARPORT_CONTROL_AUTOFD = 2,PARPORT_CONTROL_INIT = 4,PARPORT_CONTROL_SELECT = 8,PARPORT_STATUS_ERROR = 8,PARPORT_STATUS_SELECT = 16,PARPORT_STATUS_PAPEROUT = 32,PARPORT_STATUS_ACK = 64,PARPORT_STATUS_BUSY = 128,PARPORT_MODE_PCSPP = 1,PARPORT_MODE_TRISTATE = 2,PARPORT_MODE_EPP = 4,PARPORT_MODE_ECP = 8,PARPORT_MODE_COMPAT = 16,PARPORT_MODE_DMA = 32,PARPORT_MODE_SAFEININT = 64,};
enum MACRO_PCI_ARI {PCI_ARI_CAP = 0x4,PCI_ARI_CAP_MFVC = 0x1,PCI_ARI_CAP_ACS = 0x2,PCI_ARI_CTRL = 0x6,PCI_ARI_CTRL_MFVC = 0x1,PCI_ARI_CTRL_ACS = 0x2,PCI_EXT_CAP_ARI_SIZEOF = 0x8,PCI_ATS_CAP = 0x4,PCI_ATS_MAX_QDEP = 0x20,PCI_ATS_CTRL = 0x6,PCI_ATS_CTRL_ENABLE = 0x8000,PCI_ATS_MIN_STU = 0xC,PCI_EXT_CAP_ATS_SIZEOF = 0x8,PCI_PRI_CTRL = 0x4,PCI_PRI_CTRL_ENABLE = 0x1,PCI_PRI_CTRL_RESET = 0x2,PCI_PRI_STATUS = 0x6,PCI_PRI_STATUS_RF = 0x1,PCI_PRI_STATUS_UPRGI = 0x2,PCI_PRI_STATUS_STOPPED = 0x100,PCI_PRI_MAX_REQ = 0x8,PCI_PRI_ALLOC_REQ = 0xC,PCI_EXT_CAP_PRI_SIZEOF = 0x10,PCI_PASID_CAP = 0x4,PCI_PASID_CAP_EXEC = 0x2,PCI_PASID_CAP_PRIV = 0x4,PCI_PASID_CTRL = 0x6,PCI_PASID_CTRL_ENABLE = 0x1,PCI_PASID_CTRL_EXEC = 0x2,PCI_PASID_CTRL_PRIV = 0x4,PCI_EXT_CAP_PASID_SIZEOF = 0x8,PCI_SRIOV_CAP = 0x4,PCI_SRIOV_CAP_VFM = 0x1,PCI_SRIOV_CTRL = 0x8,PCI_SRIOV_CTRL_VFE = 0x1,PCI_SRIOV_CTRL_VFM = 0x2,PCI_SRIOV_CTRL_INTR = 0x4,PCI_SRIOV_CTRL_MSE = 0x8,PCI_SRIOV_CTRL_ARI = 0x10,PCI_SRIOV_STATUS = 0xA,PCI_SRIOV_STATUS_VFM = 0x1,PCI_SRIOV_INITIAL_VF = 0xC,PCI_SRIOV_TOTAL_VF = 0xE,PCI_SRIOV_NUM_VF = 0x10,PCI_SRIOV_FUNC_LINK = 0x12,PCI_SRIOV_VF_OFFSET = 0x14,PCI_SRIOV_VF_STRIDE = 0x16,PCI_SRIOV_VF_DID = 0x1A,PCI_SRIOV_SUP_PGSIZE = 0x1C,PCI_SRIOV_SYS_PGSIZE = 0x20,PCI_SRIOV_BAR = 0x24,PCI_SRIOV_NUM_BARS = 0x6,PCI_SRIOV_VFM = 0x3C,PCI_SRIOV_VFM_UA = 0x0,PCI_SRIOV_VFM_MI = 0x1,PCI_SRIOV_VFM_MO = 0x2,PCI_SRIOV_VFM_AV = 0x3,PCI_EXT_CAP_SRIOV_SIZEOF = 0x40,PCI_LTR_MAX_SNOOP_LAT = 0x4,PCI_LTR_MAX_NOSNOOP_LAT = 0x6,PCI_LTR_VALUE_MASK = 0x3FF,PCI_LTR_SCALE_MASK = 0x1C00,PCI_LTR_SCALE_SHIFT = 0xA,PCI_EXT_CAP_LTR_SIZEOF = 0x8,PCI_ACS_CAP = 0x4,PCI_ACS_SV = 0x1,PCI_ACS_TB = 0x2,PCI_ACS_RR = 0x4,PCI_ACS_CR = 0x8,PCI_ACS_UF = 0x10,PCI_ACS_EC = 0x20,PCI_ACS_DT = 0x40,PCI_ACS_EGRESS_BITS = 0x5,PCI_ACS_CTRL = 0x6,PCI_ACS_EGRESS_CTL_V = 0x8,PCI_VSEC_HDR = 0x4,PCI_VSEC_HDR_LEN_SHIFT = 0x14,PCI_SATA_REGS = 0x4,PCI_SATA_REGS_MASK = 0xF,PCI_SATA_REGS_INLINE = 0xF,PCI_SATA_SIZEOF_SHORT = 0x8,PCI_SATA_SIZEOF_LONG = 0x10,PCI_REBAR_CTRL = 0x8,PCI_REBAR_CTRL_NBAR_MASK = 0xE0,PCI_REBAR_CTRL_NBAR_SHIFT = 0x5,PCI_DPA_CAP = 0x4,PCI_DPA_CAP_SUBSTATE_MASK = 0x1F,PCI_DPA_BASE_SIZEOF = 0x10,PCI_TPH_CAP = 0x4,PCI_TPH_CAP_LOC_MASK = 0x600,PCI_TPH_LOC_NONE = 0x0,PCI_TPH_LOC_CAP = 0x200,PCI_TPH_LOC_MSIX = 0x400,PCI_TPH_CAP_ST_MASK = 0x7FF0000,PCI_TPH_CAP_ST_SHIFT = 0x10,PCI_TPH_BASE_SIZEOF = 0xC,};
enum MACRO_PFKEYV2 {PFKEYV2_REVISION = 199806,};
enum MACRO_PF_MIPS {PF_MIPS_LOCAL = 0x10000000,};
enum MACRO_POLLERR {POLLERR = 0x8,POLLHUP = 0x10,POLLNVAL = 0x20,};
enum MACRO_PPCLAIM {PPCLAIM = 0x708B,};
enum MACRO_PPPOATM {PPPOATM_ENCAPS_AUTODETECT = 0,PPPOATM_ENCAPS_VC = 1,PPPOATM_ENCAPS_LLC = 2,};
enum MACRO_PPYIELD {PPYIELD = 0x708D,};
enum MACRO_PRINTER {PRINTER_NOT_ERROR = 0x8,PRINTER_SELECTED = 0x10,PRINTER_PAPER_EMPTY = 0x20,};
enum MACRO_PROCESS {INIT_PROCESS = 5,LOGIN_PROCESS = 6,USER_PROCESS = 7,DEAD_PROCESS = 8,};
enum MACRO_PTHREAD {PTHREAD_CANCELED = -1,PTHREAD_ONCE_INIT = 0,PTHREAD_BARRIER_SERIAL_THREAD = -1,};
enum MACRO_PTRDIFF {PTRDIFF_MIN = -9223372036854775808,PTRDIFF_MAX = 9223372036854775807,};
enum MACRO_PT_MIPS {PT_MIPS_REGINFO = 0x70000000,PT_MIPS_RTPROC = 0x70000001,PT_MIPS_OPTIONS = 0x70000002,};
enum MACRO_RAMDISK {RAMDISK_IMAGE_START_MASK = 0x7FF,RAMDISK_PROMPT_FLAG = 0x8000,RAMDISK_LOAD_FLAG = 0x4000,};
enum MACRO_READ_12 {READ_12 = 0xA8,};
enum MACRO_RECOVER {RECOVER_BUFFERED_DATA = 0x14,};
enum MACRO_RELEASE {RELEASE = 0x17,};
enum MACRO_REQUEST {REQUEST_SENSE = 0x3,};
enum MACRO_RESERVE {RESERVE = 0x16,};
enum MACRO_RESTART {RESTART_ARRAY_RW = 0x934,};
enum MACRO_REXPROC {REXPROC_START = 1,REXPROC_WAIT = 2,REXPROC_MODES = 3,REXPROC_WINCH = 4,REXPROC_SIGNAL = 5,};
enum MACRO_REXPROG {REXPROG = 100017,};
enum MACRO_REXVERS {REXVERS = 1,};
enum MACRO_RFC1626 {RFC1626_MTU = 9180,};
enum MACRO_RPCTEST {RPCTEST_PROGRAM = 1,RPCTEST_VERSION = 1,RPCTEST_NULL_PROC = 2,RPCTEST_NULL_BATCH_PROC = 3,};
enum MACRO_RXGROUP {RXGROUP = 0x40,TXGROUP = 0x80,};
enum MACRO_R_ALPHA {R_ALPHA_NONE = 0,R_ALPHA_REFLONG = 1,R_ALPHA_REFQUAD = 2,R_ALPHA_GPREL32 = 3,R_ALPHA_LITERAL = 4,R_ALPHA_LITUSE = 5,R_ALPHA_GPDISP = 6,R_ALPHA_BRADDR = 7,R_ALPHA_HINT = 8,R_ALPHA_SREL16 = 9,R_ALPHA_SREL32 = 10,R_ALPHA_SREL64 = 11,R_ALPHA_GPRELHIGH = 17,R_ALPHA_GPRELLOW = 18,R_ALPHA_GPREL16 = 19,R_ALPHA_COPY = 24,R_ALPHA_GLOB_DAT = 25,R_ALPHA_JMP_SLOT = 26,R_ALPHA_RELATIVE = 27,R_ALPHA_TLS_GD_HI = 28,R_ALPHA_TLSGD = 29,R_ALPHA_TLS_LDM = 30,R_ALPHA_DTPMOD64 = 31,R_ALPHA_GOTDTPREL = 32,R_ALPHA_DTPREL64 = 33,R_ALPHA_DTPRELHI = 34,R_ALPHA_DTPRELLO = 35,R_ALPHA_DTPREL16 = 36,R_ALPHA_GOTTPREL = 37,R_ALPHA_TPREL64 = 38,R_ALPHA_TPRELHI = 39,R_ALPHA_TPRELLO = 40,R_ALPHA_TPREL16 = 41,R_ALPHA_NUM = 46,};
enum MACRO_R_PPC64 {R_PPC64_NONE = 0,R_PPC64_ADDR32 = 1,R_PPC64_ADDR24 = 2,R_PPC64_ADDR16 = 3,R_PPC64_ADDR16_LO = 4,R_PPC64_ADDR16_HI = 5,R_PPC64_ADDR16_HA = 6,R_PPC64_ADDR14 = 7,R_PPC64_ADDR14_BRTAKEN = 8,R_PPC64_ADDR14_BRNTAKEN = 9,R_PPC64_REL24 = 10,R_PPC64_REL14 = 11,R_PPC64_REL14_BRTAKEN = 12,R_PPC64_REL14_BRNTAKEN = 13,R_PPC64_GOT16 = 14,R_PPC64_GOT16_LO = 15,R_PPC64_GOT16_HI = 16,R_PPC64_GOT16_HA = 17,R_PPC64_COPY = 19,R_PPC64_GLOB_DAT = 20,R_PPC64_JMP_SLOT = 21,R_PPC64_RELATIVE = 22,R_PPC64_UADDR32 = 24,R_PPC64_UADDR16 = 25,R_PPC64_REL32 = 26,R_PPC64_PLT32 = 27,R_PPC64_PLTREL32 = 28,R_PPC64_PLT16_LO = 29,R_PPC64_PLT16_HI = 30,R_PPC64_PLT16_HA = 31,R_PPC64_SECTOFF = 33,R_PPC64_SECTOFF_LO = 34,R_PPC64_SECTOFF_HI = 35,R_PPC64_SECTOFF_HA = 36,R_PPC64_ADDR30 = 37,R_PPC64_ADDR64 = 38,R_PPC64_ADDR16_HIGHER = 39,R_PPC64_ADDR16_HIGHERA = 40,R_PPC64_ADDR16_HIGHEST = 41,R_PPC64_ADDR16_HIGHESTA = 42,R_PPC64_UADDR64 = 43,R_PPC64_REL64 = 44,R_PPC64_PLT64 = 45,R_PPC64_PLTREL64 = 46,R_PPC64_TOC16 = 47,R_PPC64_TOC16_LO = 48,R_PPC64_TOC16_HI = 49,R_PPC64_TOC16_HA = 50,R_PPC64_TOC = 51,R_PPC64_PLTGOT16 = 52,R_PPC64_PLTGOT16_LO = 53,R_PPC64_PLTGOT16_HI = 54,R_PPC64_PLTGOT16_HA = 55,R_PPC64_ADDR16_DS = 56,R_PPC64_ADDR16_LO_DS = 57,R_PPC64_GOT16_DS = 58,R_PPC64_GOT16_LO_DS = 59,R_PPC64_PLT16_LO_DS = 60,R_PPC64_SECTOFF_DS = 61,R_PPC64_SECTOFF_LO_DS = 62,R_PPC64_TOC16_DS = 63,R_PPC64_TOC16_LO_DS = 64,R_PPC64_PLTGOT16_DS = 65,R_PPC64_PLTGOT16_LO_DS = 66,R_PPC64_TLS = 67,R_PPC64_DTPMOD64 = 68,R_PPC64_TPREL16 = 69,R_PPC64_TPREL16_LO = 70,R_PPC64_TPREL16_HI = 71,R_PPC64_TPREL16_HA = 72,R_PPC64_TPREL64 = 73,R_PPC64_DTPREL16 = 74,R_PPC64_DTPREL16_LO = 75,R_PPC64_DTPREL16_HI = 76,R_PPC64_DTPREL16_HA = 77,R_PPC64_DTPREL64 = 78,R_PPC64_GOT_TLSGD16 = 79,R_PPC64_GOT_TLSGD16_LO = 80,R_PPC64_GOT_TLSGD16_HI = 81,R_PPC64_GOT_TLSGD16_HA = 82,R_PPC64_GOT_TLSLD16 = 83,R_PPC64_GOT_TLSLD16_LO = 84,R_PPC64_GOT_TLSLD16_HI = 85,R_PPC64_GOT_TLSLD16_HA = 86,R_PPC64_GOT_TPREL16_DS = 87,R_PPC64_GOT_TPREL16_LO_DS = 88,R_PPC64_GOT_TPREL16_HI = 89,R_PPC64_GOT_TPREL16_HA = 90,R_PPC64_GOT_DTPREL16_DS = 91,R_PPC64_GOT_DTPREL16_LO_DS = 92,R_PPC64_GOT_DTPREL16_HI = 93,R_PPC64_GOT_DTPREL16_HA = 94,R_PPC64_TPREL16_DS = 95,R_PPC64_TPREL16_LO_DS = 96,R_PPC64_TPREL16_HIGHER = 97,R_PPC64_TPREL16_HIGHERA = 98,R_PPC64_TPREL16_HIGHEST = 99,R_PPC64_TPREL16_HIGHESTA = 100,R_PPC64_DTPREL16_DS = 101,R_PPC64_DTPREL16_LO_DS = 102,R_PPC64_DTPREL16_HIGHER = 103,R_PPC64_DTPREL16_HIGHERA = 104,R_PPC64_DTPREL16_HIGHEST = 105,R_PPC64_DTPREL16_HIGHESTA = 106,R_PPC64_JMP_IREL = 247,R_PPC64_IRELATIVE = 248,R_PPC64_REL16 = 249,R_PPC64_REL16_LO = 250,R_PPC64_REL16_HI = 251,R_PPC64_REL16_HA = 252,};
enum MACRO_R_SPARC {R_SPARC_NONE = 0,R_SPARC_8 = 1,R_SPARC_16 = 2,R_SPARC_32 = 3,R_SPARC_DISP8 = 4,R_SPARC_DISP16 = 5,R_SPARC_DISP32 = 6,R_SPARC_WDISP30 = 7,R_SPARC_WDISP22 = 8,R_SPARC_HI22 = 9,R_SPARC_22 = 10,R_SPARC_13 = 11,R_SPARC_LO10 = 12,R_SPARC_GOT10 = 13,R_SPARC_GOT13 = 14,R_SPARC_GOT22 = 15,R_SPARC_PC10 = 16,R_SPARC_PC22 = 17,R_SPARC_WPLT30 = 18,R_SPARC_COPY = 19,R_SPARC_GLOB_DAT = 20,R_SPARC_JMP_SLOT = 21,R_SPARC_RELATIVE = 22,R_SPARC_UA32 = 23,R_SPARC_PLT32 = 24,R_SPARC_HIPLT22 = 25,R_SPARC_LOPLT10 = 26,R_SPARC_PCPLT32 = 27,R_SPARC_PCPLT22 = 28,R_SPARC_PCPLT10 = 29,R_SPARC_10 = 30,R_SPARC_11 = 31,R_SPARC_64 = 32,R_SPARC_OLO10 = 33,R_SPARC_HH22 = 34,R_SPARC_HM10 = 35,R_SPARC_LM22 = 36,R_SPARC_PC_HH22 = 37,R_SPARC_PC_HM10 = 38,R_SPARC_PC_LM22 = 39,R_SPARC_WDISP16 = 40,R_SPARC_WDISP19 = 41,R_SPARC_GLOB_JMP = 42,R_SPARC_7 = 43,R_SPARC_5 = 44,R_SPARC_6 = 45,R_SPARC_DISP64 = 46,R_SPARC_PLT64 = 47,R_SPARC_HIX22 = 48,R_SPARC_LOX10 = 49,R_SPARC_H44 = 50,R_SPARC_M44 = 51,R_SPARC_L44 = 52,R_SPARC_REGISTER = 53,R_SPARC_UA64 = 54,R_SPARC_UA16 = 55,R_SPARC_TLS_GD_HI22 = 56,R_SPARC_TLS_GD_LO10 = 57,R_SPARC_TLS_GD_ADD = 58,R_SPARC_TLS_GD_CALL = 59,R_SPARC_TLS_LDM_HI22 = 60,R_SPARC_TLS_LDM_LO10 = 61,R_SPARC_TLS_LDM_ADD = 62,R_SPARC_TLS_LDM_CALL = 63,R_SPARC_TLS_LDO_HIX22 = 64,R_SPARC_TLS_LDO_LOX10 = 65,R_SPARC_TLS_LDO_ADD = 66,R_SPARC_TLS_IE_HI22 = 67,R_SPARC_TLS_IE_LO10 = 68,R_SPARC_TLS_IE_LD = 69,R_SPARC_TLS_IE_LDX = 70,R_SPARC_TLS_IE_ADD = 71,R_SPARC_TLS_LE_HIX22 = 72,R_SPARC_TLS_LE_LOX10 = 73,R_SPARC_TLS_DTPMOD32 = 74,R_SPARC_TLS_DTPMOD64 = 75,R_SPARC_TLS_DTPOFF32 = 76,R_SPARC_TLS_DTPOFF64 = 77,R_SPARC_TLS_TPOFF32 = 78,R_SPARC_TLS_TPOFF64 = 79,R_SPARC_GOTDATA_HIX22 = 80,R_SPARC_GOTDATA_LOX10 = 81,R_SPARC_GOTDATA_OP_HIX22 = 82,R_SPARC_GOTDATA_OP_LOX10 = 83,R_SPARC_GOTDATA_OP = 84,R_SPARC_H34 = 85,R_SPARC_SIZE32 = 86,R_SPARC_SIZE64 = 87,R_SPARC_WDISP10 = 88,R_SPARC_JMP_IREL = 248,R_SPARC_IRELATIVE = 249,R_SPARC_GNU_VTINHERIT = 250,R_SPARC_GNU_VTENTRY = 251,R_SPARC_REV32 = 252,R_SPARC_NUM = 253,};
enum MACRO_SCRNMAP {GIO_SCRNMAP = 0x4B40,PIO_SCRNMAP = 0x4B41,};
enum MACRO_SECCOMP {SECCOMP_MODE_DISABLED = 0,SECCOMP_MODE_STRICT = 1,SECCOMP_MODE_FILTER = 2,SECCOMP_RET_KILL = 0,SECCOMP_RET_TRAP = 196608,SECCOMP_RET_ERRNO = 327680,SECCOMP_RET_TRACE = 2146435072,SECCOMP_RET_ALLOW = 2147418112,SECCOMP_RET_ACTION = 2147418112,SECCOMP_RET_DATA = 65535,};
enum MACRO_SECMARK {SECMARK_MODE_SEL = 0x1,SECMARK_SECCTX_MAX = 0x100,};
enum MACRO_SEEK_10 {SEEK_10 = 0x2B,};
enum MACRO_SEGMENT {SEGMENT_SIZE = 1024,};
enum MACRO_SEGSIZE {SEGSIZE = 512,};
enum MACRO_SELFMAG {SELFMAG = 4,};
enum MACRO_SETSIZE {__CPU_SETSIZE = 1024,CPU_SETSIZE = 1024,};
enum MACRO_SET_MPC {SET_MPC_CTRL_ADDR = 107,SET_MPS_MAC_ADDR = 108,};
enum MACRO_SET_MPS {SET_MPS_CTRL_ADDR = 202,};
enum MACRO_SHF_ARM {SHF_ARM_ENTRYSECT = 0x10000000,SHF_ARM_COMDEF = 0x80000000,};
enum MACRO_SHT_ARM {SHT_ARM_PREEMPTMAP = 1879048194,SHT_ARM_ATTRIBUTES = 1879048195,};
enum MACRO_SIG_ERR {SIG_ERR = -1,SIG_DFL = 0,SIG_IGN = 1,SIG_HOLD = 2,};
enum MACRO_SIOCINQ {SIOCINQ = 21531,};
enum MACRO_SKBEDIT {SKBEDIT_F_PRIORITY = 0x1,SKBEDIT_F_QUEUE_MAPPING = 0x2,SKBEDIT_F_MARK = 0x4,};
enum MACRO_SNDCARD {SNDCARD_ADLIB = 1,SNDCARD_SB = 2,SNDCARD_PAS = 3,SNDCARD_GUS = 4,SNDCARD_MPU401 = 5,SNDCARD_SB16 = 6,SNDCARD_SB16MIDI = 7,SNDCARD_UART6850 = 8,SNDCARD_GUS16 = 9,SNDCARD_MSS = 10,SNDCARD_PSS = 11,SNDCARD_SSCAPE = 12,SNDCARD_PSS_MPU = 13,SNDCARD_PSS_MSS = 14,SNDCARD_SSCAPE_MSS = 15,SNDCARD_TRXPRO = 16,SNDCARD_TRXPRO_SB = 17,SNDCARD_TRXPRO_MPU = 18,SNDCARD_MAD16 = 19,SNDCARD_MAD16_MPU = 20,SNDCARD_CS4232 = 21,SNDCARD_CS4232_MPU = 22,SNDCARD_MAUI = 23,SNDCARD_PSEUDO_MSS = 24,SNDCARD_GUSPNP = 25,SNDCARD_UART401 = 26,};
enum MACRO_SND_DEV {SND_DEV_CTL = 0,SND_DEV_SEQ = 1,SND_DEV_MIDIN = 2,SND_DEV_DSP = 3,SND_DEV_AUDIO = 4,SND_DEV_DSP16 = 5,SND_DEV_UNUSED = 6,SND_DEV_AWFM = 7,SND_DEV_SEQ2 = 8,SND_DEV_SYNTH = 9,SND_DEV_DMFM = 10,SND_DEV_UNKNOWN11 = 11,SND_DEV_ADSP = 12,SND_DEV_AMIDI = 13,SND_DEV_ADMMIDI = 14,};
enum MACRO_SOL_CAN {SOL_CAN_BASE = 100,};
enum MACRO_SOL_IPX {SOL_IPX = 256,};
enum MACRO_SOL_TCP {SOL_TCP = 6,};
enum MACRO_SOL_UDP {SOL_UDP = 17,};
enum MACRO_SO_MARK {SO_MARK = 36,SO_TIMESTAMPING = 37,};
enum MACRO_SO_PEEK {SO_PEEK_OFF = 42,SO_NOFCS = 43,SO_LOCK_FILTER = 44,SO_SELECT_ERR_QUEUE = 45,SO_BUSY_POLL = 46,};
enum MACRO_STT_ARM {STT_ARM_TFUNC = 13,STT_ARM_16BIT = 15,};
enum MACRO_SYMINFO {SYMINFO_BT_SELF = 0xFFFF,SYMINFO_BT_PARENT = 0xFFFE,SYMINFO_BT_LOWRESERVE = 0xFF00,SYMINFO_FLG_DIRECT = 0x1,SYMINFO_FLG_PASSTHRU = 0x2,SYMINFO_FLG_COPY = 0x4,SYMINFO_FLG_LAZYLOAD = 0x8,SYMINFO_NONE = 0x0,SYMINFO_CURRENT = 0x1,SYMINFO_NUM = 0x2,};
enum MACRO_SYMTYPE {SYMTYPE = 50,};
enum MACRO_S_IREAD {S_IREAD = 256,S_IWRITE = 128,S_IEXEC = 64,};
enum MACRO_Success {Success = 0,BadRequest = 1,BadValue = 2,};
enum MACRO_SyncAll {SyncAll = 5,};
enum MACRO_TCA_ACT {TCA_ACT_MAX_PRIO = 32,TCA_ACT_BIND = 1,TCA_ACT_NOBIND = 0,TCA_ACT_UNBIND = 1,TCA_ACT_NOUNBIND = 0,TCA_ACT_REPLACE = 1,TCA_ACT_NOREPLACE = 0,};
enum MACRO_TCPOLEN {TCPOLEN_MAXSEG = 4,};
enum MACRO_TCP_MSS {TCP_MSS = 512,TCP_MAXWIN = 65535,TCP_MAX_WINSHIFT = 14,};
enum MACRO_TCSANOW {TCSANOW = 0,TCSADRAIN = 1,TCSAFLUSH = 2,};
enum MACRO_TCSBRKP {TCSBRKP = 0x5425,};
enum MACRO_TCSETAF {TCSETAF = 0x5408,};
enum MACRO_TCSETAW {TCSETAW = 0x5407,};
enum MACRO_TCSETSF {TCSETSF = 0x5404,};
enum MACRO_TCSETSW {TCSETSW = 0x5403,};
enum MACRO_TCSETXF {TCSETXF = 0x5434,};
enum MACRO_TCSETXW {TCSETXW = 0x5435,};
enum MACRO_TC_NCLS {TC_NCLS = 256,};
enum MACRO_TC_QOPT {TC_QOPT_BITMASK = 15,TC_QOPT_MAX_QUEUE = 16,};
enum MACRO_TELQUAL {TELQUAL_IS = 0,TELQUAL_SEND = 1,TELQUAL_INFO = 2,TELQUAL_REPLY = 2,TELQUAL_NAME = 3,};
enum MACRO_TERMIOS {TERMIOS = 1,NAMESIZE = 256,};
enum MACRO_TGWRITE {TGWRITE = 0x10,};
enum MACRO_TIMEOUT {CLSET_TIMEOUT = 1,CLGET_TIMEOUT = 2,};
enum MACRO_TIME_OK {TIME_OK = 0,TIME_INS = 1,TIME_DEL = 2,TIME_OOP = 3,TIME_WAIT = 4,TIME_ERROR = 5,TIME_BAD = 5,};
enum MACRO_TIOCINQ {TIOCINQ = 21531,};
enum MACRO_TIOCPKT {TIOCPKT = 0x5420,};
enum MACRO_TIOCSER {TIOCSER_TEMT = 0x1,};
enum MACRO_TIOCSTI {TIOCSTI = 0x5412,};
enum MACRO_TMAGLEN {TMAGLEN = 6,};
enum MACRO_TOWRITE {TOWRITE = 0x2,};
enum MACRO_TUWRITE {TUWRITE = 0x80,};
enum MACRO_UART_RX {UART_RX = 0,UART_TX = 0,UART_IER = 1,UART_IER_MSI = 8,UART_IER_RLSI = 4,UART_IER_THRI = 2,UART_IER_RDI = 1,UART_IERX_SLEEP = 16,UART_IIR = 2,UART_IIR_NO_INT = 1,UART_IIR_ID = 6,UART_IIR_MSI = 0,UART_IIR_THRI = 2,UART_IIR_RDI = 4,UART_IIR_RLSI = 6,UART_IIR_BUSY = 7,UART_IIR_RX_TIMEOUT = 12,UART_IIR_XOFF = 16,UART_IIR_CTS_RTS_DSR = 32,UART_FCR = 2,UART_FCR_ENABLE_FIFO = 1,UART_FCR_CLEAR_RCVR = 2,UART_FCR_CLEAR_XMIT = 4,UART_FCR_DMA_SELECT = 8,UART_FCR_R_TRIG_00 = 0,UART_FCR_R_TRIG_01 = 64,UART_FCR_R_TRIG_10 = 128,UART_FCR_R_TRIG_11 = 192,UART_FCR_T_TRIG_00 = 0,UART_FCR_T_TRIG_01 = 16,UART_FCR_T_TRIG_10 = 32,UART_FCR_T_TRIG_11 = 48,UART_FCR_TRIGGER_MASK = 192,UART_FCR_TRIGGER_1 = 0,UART_FCR_TRIGGER_4 = 64,UART_FCR_TRIGGER_8 = 128,UART_FCR_TRIGGER_14 = 192,UART_FCR6_R_TRIGGER_8 = 0,UART_FCR6_R_TRIGGER_16 = 64,UART_FCR6_R_TRIGGER_24 = 128,UART_FCR6_R_TRIGGER_28 = 192,UART_FCR6_T_TRIGGER_16 = 0,UART_FCR6_T_TRIGGER_8 = 16,UART_FCR6_T_TRIGGER_24 = 32,UART_FCR6_T_TRIGGER_30 = 48,UART_FCR7_64BYTE = 32,UART_LCR = 3,UART_LCR_DLAB = 128,UART_LCR_SBC = 64,UART_LCR_SPAR = 32,UART_LCR_EPAR = 16,UART_LCR_PARITY = 8,UART_LCR_STOP = 4,UART_LCR_WLEN5 = 0,UART_LCR_WLEN6 = 1,UART_LCR_WLEN7 = 2,UART_LCR_WLEN8 = 3,UART_LCR_CONF_MODE_A = 128,UART_LCR_CONF_MODE_B = 191,UART_MCR = 4,UART_MCR_CLKSEL = 128,UART_MCR_TCRTLR = 64,UART_MCR_XONANY = 32,UART_MCR_AFE = 32,UART_MCR_LOOP = 16,UART_MCR_OUT2 = 8,UART_MCR_OUT1 = 4,UART_MCR_RTS = 2,UART_MCR_DTR = 1,UART_LSR = 5,UART_LSR_FIFOE = 128,UART_LSR_TEMT = 64,UART_LSR_THRE = 32,UART_LSR_BI = 16,UART_LSR_FE = 8,UART_LSR_PE = 4,UART_LSR_OE = 2,UART_LSR_DR = 1,UART_LSR_BRK_ERROR_BITS = 30,UART_MSR = 6,UART_MSR_DCD = 128,UART_MSR_RI = 64,UART_MSR_DSR = 32,UART_MSR_CTS = 16,UART_MSR_DDCD = 8,UART_MSR_TERI = 4,UART_MSR_DDSR = 2,UART_MSR_DCTS = 1,UART_MSR_ANY_DELTA = 15,UART_SCR = 7,UART_DLL = 0,UART_DLM = 1,UART_EFR = 2,UART_XR_EFR = 9,UART_EFR_CTS = 128,UART_EFR_RTS = 64,UART_EFR_SCD = 32,UART_EFR_ECB = 16,UART_XON1 = 4,UART_XON2 = 5,UART_XOFF1 = 6,UART_XOFF2 = 7,UART_TI752_TCR = 6,UART_TI752_TLR = 7,UART_TRG = 0,UART_TRG_1 = 1,UART_TRG_4 = 4,UART_TRG_8 = 8,UART_TRG_16 = 16,UART_TRG_32 = 32,UART_TRG_64 = 64,UART_TRG_96 = 96,UART_TRG_120 = 120,UART_TRG_128 = 128,UART_FCTR = 1,UART_FCTR_RTS_NODELAY = 0,UART_FCTR_RTS_4DELAY = 1,UART_FCTR_RTS_6DELAY = 2,UART_FCTR_RTS_8DELAY = 3,UART_FCTR_IRDA = 4,UART_FCTR_TX_INT = 8,UART_FCTR_TRGA = 0,UART_FCTR_TRGB = 16,UART_FCTR_TRGC = 32,UART_FCTR_TRGD = 48,UART_FCTR_SCR_SWAP = 64,UART_FCTR_RX = 0,UART_FCTR_TX = 128,UART_EMSR = 7,UART_EMSR_FIFO_COUNT = 1,UART_EMSR_ALT_COUNT = 2,UART_IER_DMAE = 128,UART_IER_UUE = 64,UART_IER_NRZE = 32,UART_IER_RTOIE = 16,UART_IIR_TOD = 8,UART_FCR_PXAR1 = 0,UART_FCR_PXAR8 = 64,UART_FCR_PXAR16 = 128,UART_FCR_PXAR32 = 192,UART_FCR_HSU_64_1B = 0,UART_FCR_HSU_64_16B = 64,UART_FCR_HSU_64_32B = 128,UART_FCR_HSU_64_56B = 192,UART_FCR_HSU_16_1B = 0,UART_FCR_HSU_16_4B = 64,UART_FCR_HSU_16_8B = 128,UART_FCR_HSU_16_14B = 192,UART_FCR_HSU_64B_FIFO = 32,UART_FCR_HSU_16B_FIFO = 0,UART_FCR_HALF_EMPT_TXI = 0,UART_FCR_FULL_EMPT_TXI = 8,UART_ASR = 1,UART_RFL = 3,UART_TFL = 4,UART_ICR = 5,UART_ACR = 0,UART_CPR = 1,UART_TCR = 2,UART_CKS = 3,UART_TTL = 4,UART_RTL = 5,UART_FCL = 6,UART_FCH = 7,UART_ID1 = 8,UART_ID2 = 9,UART_ID3 = 10,UART_REV = 11,UART_CSR = 12,UART_NMR = 13,UART_CTR = 255,UART_ACR_RXDIS = 1,UART_ACR_TXDIS = 2,UART_ACR_DSRFC = 4,UART_ACR_TLENB = 32,UART_ACR_ICRRD = 64,UART_ACR_ASREN = 128,UART_RSA_BASE = -8,UART_RSA_MSR = -8,UART_RSA_MSR_SWAP = 1,UART_RSA_MSR_FIFO = 4,UART_RSA_MSR_FLOW = 8,UART_RSA_MSR_ITYP = 16,UART_RSA_IER = -7,UART_RSA_IER_Rx_FIFO_H = 1,UART_RSA_IER_Tx_FIFO_H = 2,UART_RSA_IER_Tx_FIFO_E = 4,UART_RSA_IER_Rx_TOUT = 8,UART_RSA_IER_TIMER = 16,UART_RSA_SRR = -6,UART_RSA_SRR_Tx_FIFO_NEMP = 1,UART_RSA_SRR_Tx_FIFO_NHFL = 2,UART_RSA_SRR_Tx_FIFO_NFUL = 4,UART_RSA_SRR_Rx_FIFO_NEMP = 8,UART_RSA_SRR_Rx_FIFO_NHFL = 16,UART_RSA_SRR_Rx_FIFO_NFUL = 32,UART_RSA_SRR_Rx_TOUT = 64,UART_RSA_SRR_TIMER = 128,UART_RSA_FRR = -6,UART_RSA_TIVSR = -5,UART_RSA_TCR = -4,UART_RSA_TCR_SWITCH = 1,};
enum MACRO_UBI_MAX {UBI_MAX_RNVOL = 32,};
enum MACRO_UINTMAX {UINTMAX_MAX = -1,};
enum MACRO_UINTPTR {UINTPTR_MAX = -1,};
enum MACRO_UNKNOWN {UNKNOWN_REQUEST = 5,};
enum MACRO_USB_CDC {USB_CDC_SUBCLASS_ACM = 0x2,USB_CDC_SUBCLASS_ETHERNET = 0x6,USB_CDC_SUBCLASS_WHCM = 0x8,USB_CDC_SUBCLASS_DMM = 0x9,USB_CDC_SUBCLASS_MDLM = 0xA,USB_CDC_SUBCLASS_OBEX = 0xB,USB_CDC_SUBCLASS_EEM = 0xC,USB_CDC_SUBCLASS_NCM = 0xD,USB_CDC_SUBCLASS_MBIM = 0xE,USB_CDC_PROTO_NONE = 0x0,USB_CDC_ACM_PROTO_AT_V25TER = 0x1,USB_CDC_ACM_PROTO_AT_PCCA101 = 0x2,USB_CDC_ACM_PROTO_AT_PCCA101_WAKE = 0x3,USB_CDC_ACM_PROTO_AT_GSM = 0x4,USB_CDC_ACM_PROTO_AT_3G = 0x5,USB_CDC_ACM_PROTO_AT_CDMA = 0x6,USB_CDC_ACM_PROTO_VENDOR = 0xFF,USB_CDC_PROTO_EEM = 0x7,USB_CDC_NCM_PROTO_NTB = 0x1,USB_CDC_MBIM_PROTO_NTB = 0x2,USB_CDC_HEADER_TYPE = 0x0,USB_CDC_CALL_MANAGEMENT_TYPE = 0x1,USB_CDC_ACM_TYPE = 0x2,USB_CDC_UNION_TYPE = 0x6,USB_CDC_COUNTRY_TYPE = 0x7,USB_CDC_NETWORK_TERMINAL_TYPE = 0xA,USB_CDC_ETHERNET_TYPE = 0xF,USB_CDC_WHCM_TYPE = 0x11,USB_CDC_MDLM_TYPE = 0x12,USB_CDC_MDLM_DETAIL_TYPE = 0x13,USB_CDC_DMM_TYPE = 0x14,USB_CDC_OBEX_TYPE = 0x15,USB_CDC_NCM_TYPE = 0x1A,USB_CDC_MBIM_TYPE = 0x1B,USB_CDC_CALL_MGMT_CAP_CALL_MGMT = 0x1,USB_CDC_CALL_MGMT_CAP_DATA_INTF = 0x2,USB_CDC_COMM_FEATURE = 0x1,USB_CDC_CAP_LINE = 0x2,USB_CDC_CAP_BRK = 0x4,USB_CDC_CAP_NOTIFY = 0x8,USB_CDC_SEND_ENCAPSULATED_COMMAND = 0x0,USB_CDC_GET_ENCAPSULATED_RESPONSE = 0x1,USB_CDC_REQ_SET_LINE_CODING = 0x20,USB_CDC_REQ_GET_LINE_CODING = 0x21,USB_CDC_REQ_SET_CONTROL_LINE_STATE = 0x22,USB_CDC_REQ_SEND_BREAK = 0x23,USB_CDC_SET_ETHERNET_MULTICAST_FILTERS = 0x40,USB_CDC_SET_ETHERNET_PM_PATTERN_FILTER = 0x41,USB_CDC_GET_ETHERNET_PM_PATTERN_FILTER = 0x42,USB_CDC_SET_ETHERNET_PACKET_FILTER = 0x43,USB_CDC_GET_ETHERNET_STATISTIC = 0x44,USB_CDC_GET_NTB_PARAMETERS = 0x80,USB_CDC_GET_NET_ADDRESS = 0x81,USB_CDC_SET_NET_ADDRESS = 0x82,USB_CDC_GET_NTB_FORMAT = 0x83,USB_CDC_SET_NTB_FORMAT = 0x84,USB_CDC_GET_NTB_INPUT_SIZE = 0x85,USB_CDC_SET_NTB_INPUT_SIZE = 0x86,USB_CDC_GET_MAX_DATAGRAM_SIZE = 0x87,USB_CDC_SET_MAX_DATAGRAM_SIZE = 0x88,USB_CDC_GET_CRC_MODE = 0x89,USB_CDC_SET_CRC_MODE = 0x8A,USB_CDC_1_STOP_BITS = 0x0,USB_CDC_1_5_STOP_BITS = 0x1,USB_CDC_2_STOP_BITS = 0x2,USB_CDC_NO_PARITY = 0x0,USB_CDC_ODD_PARITY = 0x1,USB_CDC_EVEN_PARITY = 0x2,USB_CDC_MARK_PARITY = 0x3,USB_CDC_SPACE_PARITY = 0x4,USB_CDC_PACKET_TYPE_PROMISCUOUS = 0x1,USB_CDC_PACKET_TYPE_ALL_MULTICAST = 0x2,USB_CDC_PACKET_TYPE_DIRECTED = 0x4,USB_CDC_PACKET_TYPE_BROADCAST = 0x8,USB_CDC_PACKET_TYPE_MULTICAST = 0x10,USB_CDC_NOTIFY_NETWORK_CONNECTION = 0x0,USB_CDC_NOTIFY_RESPONSE_AVAILABLE = 0x1,USB_CDC_NOTIFY_SERIAL_STATE = 0x20,USB_CDC_NOTIFY_SPEED_CHANGE = 0x2A,USB_CDC_NCM_NTH16_SIGN = 0x484D434E,USB_CDC_NCM_NTH32_SIGN = 0x686D636E,USB_CDC_NCM_NDP16_CRC_SIGN = 0x314D434E,USB_CDC_NCM_NDP16_NOCRC_SIGN = 0x304D434E,USB_CDC_NCM_NDP32_CRC_SIGN = 0x316D636E,USB_CDC_NCM_NDP32_NOCRC_SIGN = 0x306D636E,USB_CDC_MBIM_NDP16_IPS_SIGN = 0x535049,USB_CDC_MBIM_NDP32_IPS_SIGN = 0x737069,USB_CDC_MBIM_NDP16_DSS_SIGN = 0x535344,USB_CDC_MBIM_NDP32_DSS_SIGN = 0x737364,USB_CDC_NCM_NDP16_INDEX_MIN = 0xC,USB_CDC_NCM_NDP32_INDEX_MIN = 0x10,USB_CDC_NCM_DATAGRAM_FORMAT_CRC = 0x30,USB_CDC_NCM_DATAGRAM_FORMAT_NOCRC = 0x31,USB_CDC_NCM_PROTO_CODE_NO_ENCAP_COMMANDS = 0x0,USB_CDC_NCM_PROTO_CODE_EXTERN_PROTO = 0xFE,USB_CDC_NCM_NCAP_ETH_FILTER = 0x1,USB_CDC_NCM_NCAP_NET_ADDRESS = 0x2,USB_CDC_NCM_NCAP_ENCAP_COMMAND = 0x4,USB_CDC_NCM_NCAP_MAX_DATAGRAM_SIZE = 0x8,USB_CDC_NCM_NCAP_CRC_MODE = 0x10,USB_CDC_NCM_NCAP_NTB_INPUT_SIZE = 0x20,USB_CDC_NCM_NTB16_SUPPORTED = 0x1,USB_CDC_NCM_NTB32_SUPPORTED = 0x2,USB_CDC_NCM_NDP_ALIGN_MIN_SIZE = 0x4,USB_CDC_NCM_NTB_MAX_LENGTH = 0x1C,USB_CDC_NCM_NTB16_FORMAT = 0x0,USB_CDC_NCM_NTB32_FORMAT = 0x1,USB_CDC_NCM_NTB_MIN_IN_SIZE = 0x800,USB_CDC_NCM_NTB_MIN_OUT_SIZE = 0x800,USB_CDC_NCM_CRC_NOT_APPENDED = 0x0,USB_CDC_NCM_CRC_APPENDED = 0x1,USB_MAXCHILDREN = 0x1F,};
enum MACRO_USB_DIR {USB_DIR_OUT = 0,USB_DIR_IN = 128,USB_TYPE_MASK = 96,USB_TYPE_STANDARD = 0,USB_TYPE_CLASS = 32,USB_TYPE_VENDOR = 64,USB_TYPE_RESERVED = 96,USB_RECIP_MASK = 31,USB_RECIP_DEVICE = 0,USB_RECIP_INTERFACE = 1,USB_RECIP_ENDPOINT = 2,USB_RECIP_OTHER = 3,USB_RECIP_PORT = 4,USB_RECIP_RPIPE = 5,USB_REQ_GET_STATUS = 0,USB_REQ_CLEAR_FEATURE = 1,USB_REQ_SET_FEATURE = 3,USB_REQ_SET_ADDRESS = 5,USB_REQ_GET_DESCRIPTOR = 6,USB_REQ_SET_DESCRIPTOR = 7,USB_REQ_GET_CONFIGURATION = 8,USB_REQ_SET_CONFIGURATION = 9,USB_REQ_GET_INTERFACE = 10,USB_REQ_SET_INTERFACE = 11,USB_REQ_SYNCH_FRAME = 12,USB_REQ_SET_SEL = 48,USB_REQ_SET_ISOCH_DELAY = 49,USB_REQ_SET_ENCRYPTION = 13,USB_REQ_GET_ENCRYPTION = 14,USB_REQ_RPIPE_ABORT = 14,USB_REQ_SET_HANDSHAKE = 15,USB_REQ_RPIPE_RESET = 15,USB_REQ_GET_HANDSHAKE = 16,USB_REQ_SET_CONNECTION = 17,USB_REQ_SET_SECURITY_DATA = 18,USB_REQ_GET_SECURITY_DATA = 19,USB_REQ_SET_WUSB_DATA = 20,USB_REQ_LOOPBACK_DATA_WRITE = 21,USB_REQ_LOOPBACK_DATA_READ = 22,USB_REQ_SET_INTERFACE_DS = 23,USB_DEVICE_SELF_POWERED = 0,USB_DEVICE_REMOTE_WAKEUP = 1,USB_DEVICE_TEST_MODE = 2,USB_DEVICE_BATTERY = 2,USB_DEVICE_B_HNP_ENABLE = 3,USB_DEVICE_WUSB_DEVICE = 3,USB_DEVICE_A_HNP_SUPPORT = 4,USB_DEVICE_A_ALT_HNP_SUPPORT = 5,USB_DEVICE_DEBUG_MODE = 6,};
enum MACRO_UTS_LEN {__OLD_UTS_LEN = 8,__NEW_UTS_LEN = 64,};
enum MACRO_VERSION {_POSIX_VERSION = 200809,__POSIX2_THIS_VERSION = 200809,_POSIX2_VERSION = 200809,};
enum MACRO_VIODASD {VIODASD_MAJOR = 112,VIOCD_MAJOR = 113,ATARAID_MAJOR = 114,SCSI_DISK8_MAJOR = 128,SCSI_DISK9_MAJOR = 129,SCSI_DISK10_MAJOR = 130,SCSI_DISK11_MAJOR = 131,SCSI_DISK12_MAJOR = 132,SCSI_DISK13_MAJOR = 133,SCSI_DISK14_MAJOR = 134,SCSI_DISK15_MAJOR = 135,UNIX98_PTY_MASTER_MAJOR = 128,};
enum MACRO_VWERASE {VWERASE = 14,};
enum MACRO_WNOHANG {WNOHANG = 1,WUNTRACED = 2,};
enum MACRO_XALLOCA {XALLOCA_H = 1,};
enum MACRO_XFRMGRP {XFRMGRP_ACQUIRE = 1,XFRMGRP_EXPIRE = 2,XFRMGRP_SA = 4,XFRMGRP_POLICY = 8,XFRMGRP_REPORT = 32,};
enum MACRO_XT_DSCP {XT_DSCP_MASK = 0xFC,XT_DSCP_SHIFT = 0x2,XT_DSCP_MAX = 0x3F,XT_ECN_IP_MASK = 0xFFFFFF03,XT_ECN_OP_MATCH_IP = 0x1,XT_ECN_OP_MATCH_ECE = 0x10,XT_ECN_OP_MATCH_CWR = 0x20,XT_ECN_OP_MATCH_MASK = 0xCE,};
enum MACRO_XT_SCTP {XT_SCTP_SRC_PORTS = 0x1,XT_SCTP_DEST_PORTS = 0x2,XT_SCTP_CHUNK_TYPES = 0x4,XT_SCTP_VALID_FLAGS = 0x7,XT_NUM_SCTP_FLAGS = 0x4,};
enum MACRO_X_Reply {X_Reply = 1,X_Error = 0,X_CreateWindow = 1,X_ChangeWindowAttributes = 2,X_GetWindowAttributes = 3,X_DestroyWindow = 4,X_DestroySubwindows = 5,X_ChangeSaveSet = 6,X_ReparentWindow = 7,X_MapWindow = 8,X_MapSubwindows = 9,X_UnmapWindow = 10,X_UnmapSubwindows = 11,X_ConfigureWindow = 12,X_CirculateWindow = 13,X_GetGeometry = 14,X_QueryTree = 15,X_InternAtom = 16,X_GetAtomName = 17,X_ChangeProperty = 18,X_DeleteProperty = 19,X_GetProperty = 20,X_ListProperties = 21,X_SetSelectionOwner = 22,X_GetSelectionOwner = 23,X_ConvertSelection = 24,X_SendEvent = 25,X_GrabPointer = 26,X_UngrabPointer = 27,X_GrabButton = 28,X_UngrabButton = 29,X_ChangeActivePointerGrab = 30,X_GrabKeyboard = 31,X_UngrabKeyboard = 32,X_GrabKey = 33,X_UngrabKey = 34,X_AllowEvents = 35,X_GrabServer = 36,X_UngrabServer = 37,X_QueryPointer = 38,X_GetMotionEvents = 39,X_TranslateCoords = 40,X_WarpPointer = 41,X_SetInputFocus = 42,X_GetInputFocus = 43,X_QueryKeymap = 44,X_OpenFont = 45,X_CloseFont = 46,X_QueryFont = 47,X_QueryTextExtents = 48,X_ListFonts = 49,X_ListFontsWithInfo = 50,X_SetFontPath = 51,X_GetFontPath = 52,X_CreatePixmap = 53,X_FreePixmap = 54,X_CreateGC = 55,X_ChangeGC = 56,X_CopyGC = 57,X_SetDashes = 58,X_SetClipRectangles = 59,X_FreeGC = 60,X_ClearArea = 61,X_CopyArea = 62,X_CopyPlane = 63,X_PolyPoint = 64,X_PolyLine = 65,X_PolySegment = 66,X_PolyRectangle = 67,X_PolyArc = 68,X_FillPoly = 69,X_PolyFillRectangle = 70,X_PolyFillArc = 71,X_PutImage = 72,X_GetImage = 73,X_PolyText8 = 74,X_PolyText16 = 75,X_ImageText8 = 76,X_ImageText16 = 77,X_CreateColormap = 78,X_FreeColormap = 79,X_CopyColormapAndFree = 80,X_InstallColormap = 81,X_UninstallColormap = 82,X_ListInstalledColormaps = 83,X_AllocColor = 84,X_AllocNamedColor = 85,X_AllocColorCells = 86,X_AllocColorPlanes = 87,X_FreeColors = 88,X_StoreColors = 89,X_StoreNamedColor = 90,X_QueryColors = 91,X_LookupColor = 92,X_CreateCursor = 93,X_CreateGlyphCursor = 94,X_FreeCursor = 95,X_RecolorCursor = 96,X_QueryBestSize = 97,X_QueryExtension = 98,X_ListExtensions = 99,X_ChangeKeyboardMapping = 100,X_GetKeyboardMapping = 101,X_ChangeKeyboardControl = 102,X_GetKeyboardControl = 103,X_Bell = 104,X_ChangePointerControl = 105,X_GetPointerControl = 106,X_SetScreenSaver = 107,X_GetScreenSaver = 108,X_ChangeHosts = 109,X_ListHosts = 110,X_SetAccessControl = 111,X_SetCloseDownMode = 112,X_KillClient = 113,X_RotateProperties = 114,X_ForceScreenSaver = 115,X_SetPointerMapping = 116,X_GetPointerMapping = 117,X_SetModifierMapping = 118,X_GetModifierMapping = 119,X_NoOperation = 127,};
enum MACRO_XvInput {XvInput = 0,XvOutput = 1,};
enum MACRO__ALLOCA {_ALLOCA_H = 1,};
enum MACRO__ASSERT {_ASSERT_H = 1,};
enum MACRO__ATFILE {_ATFILE_SOURCE = 1,};
enum MACRO__DARWIN {_DARWIN_C_SOURCE = 1,};
enum MACRO__DIRENT {_DIRENT_H = 1,_DIRENT_MATCHES_DIRENT64 = 1,};
enum MACRO__ENDIAN {_ENDIAN_H = 1,};
enum MACRO__G_HAVE {_G_HAVE_MMAP = 1,_G_HAVE_MREMAP = 1,_G_IO_IO_FILE_VERSION = 131073,_G_HAVE_ST_BLKSIZE = 0,_G_BUFSIZ = 8192,};
enum MACRO__LIBGEN {_LIBGEN_H = 1,_LIBINTL_H = 1,};
enum MACRO__LOCALE {_LOCALE_H = 1,};
enum MACRO__MALLOC {_MALLOC_H = 1,};
enum MACRO__MCHECK {_MCHECK_H = 1,_MEMORY_H = 1,};
enum MACRO__MNTENT {_MNTENT_H = 1,_MONETARY_H = 1,};
enum MACRO__NETASH {_NETASH_ASH_H = 1,};
enum MACRO__NETROM {_NETROM_NETROM_H = 1,_NETAX25_AX25_H = 1,};
enum MACRO__NET_IF {_NET_IF_H = 1,};
enum MACRO__POSIX2 {_POSIX2_C_BIND = 200809,_POSIX2_C_DEV = 200809,_POSIX2_SW_DEV = 200809,_POSIX2_LOCALEDEF = 200809,};
enum MACRO__PRINTF {_PRINTF_H = 1,};
enum MACRO__PROFIL {_PROFIL_H = 1,_SYS_PTRACE_H = 1,_SYS_QUOTA_H = 1,};
enum MACRO__REGEXP {_REGEXP_H = 1,};
enum MACRO__RPCSVC {_RPCSVC_NIS_CALLBACK_H = 1,_RPCSVC_NIS_H = 1,};
enum MACRO__SEARCH {_SEARCH_H = 1,};
enum MACRO__SETJMP {_SETJMP_H = 1,_SGTTY_H = 1,_SHADOW_H = 1,};
enum MACRO__SIGSET {_SIGSET_H_types = 1,};
enum MACRO__STDLIB {_STDLIB_H = 1,};
enum MACRO__STRING {_STRING_H = 1,};
enum MACRO__STRUCT {_STRUCT_TIMEVAL = 1,};
enum MACRO__SYS_IO {_SYS_IO_H = 1,_SYS_IPC_H = 1,};
enum MACRO__TANDEM {_TANDEM_SOURCE = 1,};
enum MACRO__THREAD {_THREAD_DB_H = 1,};
enum MACRO__TTYENT {_TTYENT_H = 1,};
enum MACRO__UNISTD {_UNISTD_H = 1,};
enum MACRO__VALUES {_VALUES_H = 1,};
enum MACRO__WCTYPE {_WCTYPE_H = 1,};
enum MACRO___AUDIT {__AUDIT_ARCH_64BIT = 0x80000000,__AUDIT_ARCH_LE = 0x40000000,};
enum MACRO___GLIBC {__GLIBC__ = 2,__GLIBC_MINOR__ = 17,__GLIBC_HAVE_LONG_LONG = 1,};
enum MACRO___LINUX {__LINUX_OPENVSWITCH_H = 1,};
enum MACRO___POSIX {__POSIX_FADV_DONTNEED = 4,__POSIX_FADV_NOREUSE = 5,};
enum MACRO___SIGEV {__SIGEV_MAX_SIZE = 64,};
enum MACRO___WCHAR {__WCHAR_MIN = -2147483648,__WCHAR_MAX = 2147483647,};
enum MACRO___error {__error_t_defined = 1,};
enum MACRO_defined {__clock_t_defined = 1,__time_t_defined = 1,__clockid_t_defined = 1,__timer_t_defined = 1,};
enum MACRO_fsFalse {fsFalse = 0,};
typedef char NodeName_type[16];
typedef struct _F9A11BF5FCA53245437FD040CE8F0807 RECORD_RANGE8;
typedef unsigned __int16 SubpixelOrder;
typedef struct _XExtEventInfo XExtEventInfo;
typedef struct _2E734CDD133C90FA8809C11E24CF40CD XGenericEvent;
typedef struct _F9ED97278D4922C5DE254E13FEAC389D XGravityEvent;
typedef unsigned __int64 XIMResetState;
typedef struct _2E56E956F88F593FE24676E86AAE3518 XIMValuesList;
typedef struct _69AF41EBDA657EE1FC7AC417361C4229 XMappingEvent;
typedef struct _666210E100F3CB5D4A75782C69E711A8 XTestJumpInfo;
typedef struct _A64E5FDBC99443F3D6ECB2BCB6D30607 XTextProperty;
typedef void *XVaNestedList;
typedef struct _xwd_file_header XWDFileHeader;
typedef struct _XkbChanges *XkbChangesPtr;
typedef struct _XkbChanges XkbChangesRec;
typedef struct _XkbKeyNameRec *XkbKeyNamePtr;
typedef struct _XkbKeyNameRec XkbKeyNameRec;
typedef struct _XkbKeyType *XkbKeyTypePtr;
typedef struct _XkbKeyType XkbKeyTypeRec;
typedef struct _XkbOutline *XkbOutlinePtr;
typedef struct _XkbOutline XkbOutlineRec;
typedef struct _XkbOverlay *XkbOverlayPtr;
typedef struct _XkbOverlay XkbOverlayRec;
typedef struct _XkbSection *XkbSectionPtr;
typedef struct _XkbSection XkbSectionRec;
typedef struct _XrmHashBucketRec *XrmHashBucket;
struct _IO_FILE_plus;
typedef signed int _Unwind_Sword;
struct _XAsyncEState {unsigned __int64 min_sequence_number;unsigned __int64 max_sequence_number;unsigned __int8 error_code;unsigned __int8 major_opcode;unsigned __int16 minor_opcode;unsigned __int8 last_error_received;int error_count;};
typedef struct _XFreeFuncs _XFreeFuncRec;
typedef struct _8BBFFC8A8A28EE3AA7AE1BC2A0B06E26 *_XPrivDisplay;
struct _XkbAnyAction {unsigned __int8 type;unsigned __int8 data[7];};
struct _XkbISOAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 mask;unsigned __int8 real_mods;char group_XXX;unsigned __int8 affect;unsigned __int8 vmods1;unsigned __int8 vmods2;};
struct _XkbModAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 mask;unsigned __int8 real_mods;unsigned __int8 vmods1;unsigned __int8 vmods2;};
struct _XkbPtrAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 high_XXX;unsigned __int8 low_XXX;unsigned __int8 high_YYY;unsigned __int8 low_YYY;};
struct _XkbSymMapRec {unsigned __int8 kt_index[4];unsigned __int8 group_info;unsigned __int8 width;unsigned __int16 offset;};
typedef union _A43692C56D550C478BB98A946A0505D5 __WAIT_STATUS;
typedef int (*__compar_fn_t)(const void *, const void *);
struct __exit_status {__int16 e_termination;__int16 e_exit;};
typedef int __io_close_fn(void *cookie);
typedef struct __libc_lock_opaque__ __libc_lock_t;
typedef int (*__nftw_func_t)(const char *filename, const struct stat *status, int flag, struct FTW *info);
typedef void __restorefn_t(void);
struct __sched_param {int __sched_priority;};
enum __socket_type {SOCK_STREAM = 0x1,SOCK_DGRAM = 0x2,SOCK_RAW = 0x3,SOCK_RDM = 0x4,SOCK_SEQPACKET = 0x5,SOCK_DCCP = 0x6,SOCK_PACKET = 0xA,SOCK_CLOEXEC = 0x80000,SOCK_NONBLOCK = 0x800,};
typedef __int64 __suseconds_t;
struct _win_st__pdat {__int16 _pad_y;__int16 _pad_x;__int16 _pad_top;__int16 _pad_left;__int16 _pad_bottom;__int16 _pad_right;};
struct atm_aal_stats {int tx;int tx_err;int rx;int rx_err;int rx_drop;};
typedef unsigned __int16 atm_backend_t;
struct audio_karaoke {int vocal1;int vocal2;int melody;};
typedef struct audio_mixer audio_mixer_t;
enum autofs_notify {NFY_NONE = 0x0,NFY_MOUNT = 0x1,NFY_EXPIRE = 0x2,};
struct avmb1_carddef {int port;int irq;};
struct ca_descr_info {unsigned int num;unsigned int type;};
enum cee_attrs_app {DCB_ATTR_CEE_APP_UNSPEC = 0x0,DCB_ATTR_CEE_APP = 0x1,__DCB_ATTR_CEE_APP_MAX = 0x2,};
struct cpufreq_stats {unsigned __int64 frequency;unsigned __int64 time_in_state;struct cpufreq_stats *next;struct cpufreq_stats *first;};
enum ctattr_expect {CTA_EXPECT_UNSPEC = 0x0,CTA_EXPECT_MASTER = 0x1,CTA_EXPECT_TUPLE = 0x2,CTA_EXPECT_MASK = 0x3,CTA_EXPECT_TIMEOUT = 0x4,CTA_EXPECT_ID = 0x5,CTA_EXPECT_HELP_NAME = 0x6,CTA_EXPECT_ZONE = 0x7,CTA_EXPECT_FLAGS = 0x8,CTA_EXPECT_CLASS = 0x9,CTA_EXPECT_NAT = 0xA,CTA_EXPECT_FN = 0xB,__CTA_EXPECT_MAX = 0xC,};
enum ctattr_natseq {CTA_NAT_SEQ_UNSPEC = 0x0,CTA_NAT_SEQ_CORRECTION_POS = 0x1,CTA_NAT_SEQ_OFFSET_BEFORE = 0x2,CTA_NAT_SEQ_OFFSET_AFTER = 0x3,__CTA_NAT_SEQ_MAX = 0x4,};
enum ctattr_secctx {CTA_SECCTX_UNSPEC = 0x0,CTA_SECCTX_NAME = 0x1,__CTA_SECCTX_MAX = 0x2,};
enum ctattr_tstamp {CTA_TIMESTAMP_UNSPEC = 0x0,CTA_TIMESTAMP_START = 0x1,CTA_TIMESTAMP_STOP = 0x2,__CTA_TIMESTAMP_MAX = 0x3,};
enum dccp_pkt_type {DCCP_PKT_REQUEST = 0x0,DCCP_PKT_RESPONSE = 0x1,DCCP_PKT_DATA = 0x2,DCCP_PKT_ACK = 0x3,DCCP_PKT_DATAACK = 0x4,DCCP_PKT_CLOSEREQ = 0x5,DCCP_PKT_CLOSE = 0x6,DCCP_PKT_RESET = 0x7,DCCP_PKT_SYNC = 0x8,DCCP_PKT_SYNCACK = 0x9,DCCP_PKT_INVALID = 0xA,};
enum ethtool_flags {ETH_FLAG_TXVLAN = 0x80,ETH_FLAG_RXVLAN = 0x100,ETH_FLAG_LRO = 0x8000,ETH_FLAG_NTUPLE = 0x8000000,ETH_FLAG_RXHASH = 0x10000000,};
enum fc_ct_fs_type {FC_FST_ALIAS = 0xF8,FC_FST_MGMT = 0xFA,FC_FST_TIME = 0xFB,FC_FST_DIR = 0xFC,};
enum fe_modulation {QPSK = 0x0,QAM_16 = 0x1,QAM_32 = 0x2,QAM_64 = 0x3,QAM_128 = 0x4,QAM_256 = 0x5,QAM_AUTO = 0x6,VSB_8 = 0x7,VSB_16 = 0x8,PSK_8 = 0x9,APSK_16 = 0xA,APSK_32 = 0xB,DQPSK = 0xC,QAM_4_NR = 0xD,};
struct floppy_struct {unsigned int size;unsigned int sect;unsigned int head;unsigned int track;unsigned int stretch;unsigned __int8 gap;unsigned __int8 rate;unsigned __int8 spec1;unsigned __int8 fmt_gap;const char *name;};
typedef unsigned int fpu_control_t;
typedef struct _1A68CE477B37BE31DCB043B6F4664E49 fsCreateACReq;
typedef struct _B17A026830C769E803D493B7F2598A70 fsFormatError;
typedef struct _69EBDB3A774B1AFC7F282884D9B780FC fsLengthError;
typedef struct _A23F2D0A331F720D631E2B6171CC3ECA fsResourceReq;
struct gmon_hist_hdr {char low_pc[8];char high_pc[8];char hist_size[4];char prof_rate[4];char dimen[15];char dimen_abbrev;};
struct hdsp_9632_aeb {int aebi;int aebo;};
struct hdsp_firmware {void *firmware_data;};
enum hdspm_io_type {MADI = 0x0,MADIface = 0x1,AIO = 0x2,AES32 = 0x3,RayDAT = 0x4,};
typedef struct hdspm_mixer hdspm_mixer_t;
typedef struct _i2o_hrt_entry i2o_hrt_entry;
typedef struct _i2o_lct_entry i2o_lct_entry;
typedef struct _i2o_local_bus i2o_local_bus;
typedef struct _i2o_other_bus i2o_other_bus;
struct i2o_sg_io_hdr {unsigned int flags;};
struct inodes_stat_t {int nr_inodes;int nr_unused;int dummy[5];};
typedef __int16 int_least16_t;
typedef int int_least32_t;
typedef __int64 int_least64_t;
struct ip_vs_getinfo {unsigned int version;unsigned int size;unsigned int num_services;};
struct ipmi_lan_addr {int addr_type;__int16 channel;unsigned __int8 privilege;unsigned __int8 session_handle;unsigned __int8 remote_SWID;unsigned __int8 local_SWID;unsigned __int8 lun;};
struct ipx_route_def {unsigned __int64 ipx_network;unsigned __int64 ipx_router_network;unsigned __int8 ipx_router_node[6];unsigned __int8 ipx_device[16];unsigned __int16 ipx_flags;};
struct kcapi_carddef {char driver[32];unsigned int port;unsigned int irq;unsigned int membase;int cardnr;};
struct kcapi_flagdef {int contr;int flag;};
struct kvm_sync_regs {};
struct master_config {char master_name[16];int max_slaves;int min_slaves;};
enum mcheck_status {MCHECK_DISABLED = 0xFFFFFFFF,MCHECK_OK = 0x0,MCHECK_FREE = 0x1,MCHECK_HEAD = 0x2,MCHECK_TAIL = 0x3,};
struct mdu_version_s {int major;int minor;int patchlevel;};
typedef struct mdu_version_s mdu_version_t;
enum nf_inet_hooks {NF_INET_PRE_ROUTING = 0x0,NF_INET_LOCAL_IN = 0x1,NF_INET_FORWARD = 0x2,NF_INET_LOCAL_OUT = 0x3,NF_INET_POST_ROUTING = 0x4,NF_INET_NUMHOOKS = 0x5,};
enum nl80211_attrs {IRDA_NL_ATTR_UNSPEC = 0x0,IRDA_NL_ATTR_IFNAME = 0x1,IRDA_NL_ATTR_MODE = 0x2,__IRDA_NL_ATTR_AFTER_LAST = 0x3,};
struct nr_ctl_struct {unsigned __int8 index;unsigned __int8 id;unsigned int cmd;unsigned __int64 arg;};
enum ovs_flow_attr {OVS_FLOW_ATTR_UNSPEC = 0x0,OVS_FLOW_ATTR_KEY = 0x1,OVS_FLOW_ATTR_ACTIONS = 0x2,OVS_FLOW_ATTR_STATS = 0x3,OVS_FLOW_ATTR_TCP_FLAGS = 0x4,OVS_FLOW_ATTR_USED = 0x5,OVS_FLOW_ATTR_CLEAR = 0x6,__OVS_FLOW_ATTR_MAX = 0x7,};
enum ovs_frag_type {OVS_FRAG_TYPE_NONE = 0x0,OVS_FRAG_TYPE_FIRST = 0x1,OVS_FRAG_TYPE_LATER = 0x2,__OVS_FRAG_TYPE_MAX = 0x3,};
enum ovs_vport_cmd {OVS_VPORT_CMD_UNSPEC = 0x0,OVS_VPORT_CMD_NEW = 0x1,OVS_VPORT_CMD_DEL = 0x2,OVS_VPORT_CMD_GET = 0x3,OVS_VPORT_CMD_SET = 0x4,};
enum peer_app_attr {DCB_ATTR_CEE_PEER_APP_UNSPEC = 0x0,DCB_ATTR_CEE_PEER_APP_INFO = 0x1,DCB_ATTR_CEE_PEER_APP = 0x2,__DCB_ATTR_CEE_PEER_APP_MAX = 0x3,};
struct pps_bind_args {int tsformat;int edge;int consumer;};
struct ps_prochandle;
typedef unsigned int pthread_key_t;
typedef struct region_info_user region_info_t;
struct remove_sample {int devno;int bankno;int instrno;};
enum rtattr_type_t {RTA_UNSPEC = 0x0,RTA_DST = 0x1,RTA_SRC = 0x2,RTA_IIF = 0x3,RTA_OIF = 0x4,RTA_GATEWAY = 0x5,RTA_PRIORITY = 0x6,RTA_PREFSRC = 0x7,RTA_METRICS = 0x8,RTA_MULTIPATH = 0x9,RTA_PROTOINFO = 0xA,RTA_FLOW = 0xB,RTA_CACHEINFO = 0xC,RTA_SESSION = 0xD,RTA_MP_ALGO = 0xE,RTA_TABLE = 0xF,RTA_MARK = 0x10,RTA_MFC_STATS = 0x11,__RTA_MAX = 0x12,};
struct scc_calibrate {unsigned int time;unsigned __int8 pattern;};
enum sctp_sn_error {SCTP_FAILED_THRESHOLD = 0x0,SCTP_RECEIVED_SACK = 0x1,SCTP_HEARTBEAT_SUCCESS = 0x2,SCTP_RESPONSE_TO_USER_REQ = 0x3,SCTP_INTERNAL_ERROR = 0x4,SCTP_SHUTDOWN_GUARD_EXPIRES = 0x5,SCTP_PEER_FAULTY = 0x6,};
struct seq_event_rec {unsigned __int8 arr[8];};
struct serial_struct {int type;int line;unsigned int port;int irq;int flags;int xmit_fifo_size;int custom_divisor;int baud_base;unsigned __int16 close_delay;char io_type;char reserved_char[1];int hub6;unsigned __int16 closing_wait;unsigned __int16 closing_wait2;unsigned __int8 *iomem_base;unsigned __int16 iomem_reg_shift;unsigned int port_high;unsigned __int64 iomap_base;};
typedef struct sg_req_info sg_req_info_t;
struct synth_control {int devno;char data[4000];};
struct tc_cbq_police {unsigned __int8 police;unsigned __int8 __res1;unsigned __int16 __res2;};
enum tc_link_layer {TC_LINKLAYER_UNAWARE = 0x0,TC_LINKLAYER_ETHERNET = 0x1,TC_LINKLAYER_ATM = 0x2,};
enum tcp_conntrack {TCP_CONNTRACK_NONE = 0x0,TCP_CONNTRACK_SYN_SENT = 0x1,TCP_CONNTRACK_SYN_RECV = 0x2,TCP_CONNTRACK_ESTABLISHED = 0x3,TCP_CONNTRACK_FIN_WAIT = 0x4,TCP_CONNTRACK_CLOSE_WAIT = 0x5,TCP_CONNTRACK_LAST_ACK = 0x6,TCP_CONNTRACK_TIME_WAIT = 0x7,TCP_CONNTRACK_CLOSE = 0x8,TCP_CONNTRACK_LISTEN = 0x9,TCP_CONNTRACK_MAX = 0xA,TCP_CONNTRACK_IGNORE = 0xB,TCP_CONNTRACK_RETRANS = 0xC,TCP_CONNTRACK_UNACK = 0xD,TCP_CONNTRACK_TIMEOUT_MAX = 0xE,};
typedef struct _13745364EEA695BC65B7D4AAC1B24515 td_eventbuf_t;
typedef struct td_ta_stats td_ta_stats_t;
typedef struct td_thragent td_thragent_t;
struct tr_statistics {unsigned __int64 rx_packets;unsigned __int64 tx_packets;unsigned __int64 rx_bytes;unsigned __int64 tx_bytes;unsigned __int64 rx_errors;unsigned __int64 tx_errors;unsigned __int64 rx_dropped;unsigned __int64 tx_dropped;unsigned __int64 multicast;unsigned __int64 transmit_collision;unsigned __int64 line_errors;unsigned __int64 internal_errors;unsigned __int64 burst_errors;unsigned __int64 A_C_errors;unsigned __int64 abort_delimiters;unsigned __int64 lost_frames;unsigned __int64 recv_congest_count;unsigned __int64 frame_copied_errors;unsigned __int64 frequency_errors;unsigned __int64 token_errors;unsigned __int64 dummy1;};
typedef unsigned __int64 uint_fast16_t;
typedef unsigned __int64 uint_fast32_t;
typedef unsigned __int64 uint_fast64_t;
typedef unsigned __int8 uint_least8_t;
enum v4l2_buf_type {V4L2_BUF_TYPE_VIDEO_CAPTURE = 0x1,V4L2_BUF_TYPE_VIDEO_OUTPUT = 0x2,V4L2_BUF_TYPE_VIDEO_OVERLAY = 0x3,V4L2_BUF_TYPE_VBI_CAPTURE = 0x4,V4L2_BUF_TYPE_VBI_OUTPUT = 0x5,V4L2_BUF_TYPE_SLICED_VBI_CAPTURE = 0x6,V4L2_BUF_TYPE_SLICED_VBI_OUTPUT = 0x7,V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = 0x8,V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE = 0x9,V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE = 0xA,V4L2_BUF_TYPE_PRIVATE = 0x80,};
enum v4l2_priority {V4L2_PRIORITY_UNSET = 0x0,V4L2_PRIORITY_BACKGROUND = 0x1,V4L2_PRIORITY_INTERACTIVE = 0x2,V4L2_PRIORITY_RECORD = 0x3,V4L2_PRIORITY_DEFAULT = 0x2,};
struct x25_causediag {unsigned __int8 cause;unsigned __int8 diagnostic;};
typedef struct _xAnyClassinfo xAnyClassInfo;
typedef struct _53B2C5E872CF4691EFE90F887D66B7FD xClearAreaReq;
typedef struct _45331FD382D3B76DE50383933A2C35C9 xCopyPlaneReq;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXSyncReply;
typedef struct _F7C1CEA4394D109A2161A09361931998 xDRI2MSCReply;
typedef struct _2E4398F466C16291FBF2DFDFDD4EEEFA xDamageAddReq;
typedef struct _9DBA678C3E373C7A30D5EC7DD13ED3FC xDirectFormat;
typedef struct _44C6D9B4A8493A71FE6AEB2BA1147362 xGenericEvent;
typedef struct _33E0BD21BC9E25CB376AFEED9A297D0A xGenericReply;
typedef struct _D53EE25F80C41C95CC04B700465E64D8 xImageTextReq;
typedef struct _LbxSwitch xLbxSwitchReq;
typedef struct _4856EFEBDD7E53CA21A9CBFC75FEF206 xLbxSyncReply;
typedef struct _292923DDD4ED46EE83D974C820DC3932 xListFontsReq;
typedef struct _B4F2C86EC2AFA3B90E8AE0EA0F71367B xListHostsReq;
typedef struct _DB2D4F6E439022CA547DF8AA2CE83D6E xPictFormInfo;
typedef struct _5C0DD3C4E70CCCC9965B24A6BE5ED8FB xPixmapFormat;
typedef struct _82D86B5B3C9D9E6A7BE98808A956EE82 xPolyPointReq;
typedef struct _7250734D77F79F0949305E641023FE62 xSendEventReq;
typedef struct _1296C23E7EDA709A08D87BF116515624 xSetDashesReq;
typedef struct _ShapeMask xShapeMaskReq;
typedef struct _ShmAttach xShmAttachReq;
typedef struct _ShmDetach xShmDetachReq;
typedef struct _xSyncAwaitReq xSyncAwaitReq;
typedef struct _5CD0DDA75FC8A64FD62E45433429A157 xTestResetReq;
typedef struct _9DF5225FB79C7EC3237B4B73EEC9C169 xUngrabKeyReq;
typedef struct _xValuatorInfo xValuatorInfo;
typedef struct _F134966C153EAA2FEEB175F7114F713D xXDGAModeInfo;
typedef struct _AAE8A52A0C0419608DDD9DF8462D9921 xXIButtonInfo;
typedef struct _95C1FEB0645AD02B5C1E9ED7A3FFD156 xXIDeviceInfo;
typedef struct _DA12207DA6457E73E677233E4BD11235 xXIEnterEvent;
typedef struct _99CEDDFDC374B3E2BEA3B5EBC859ABB7 xXIScrollInfo;
typedef struct _XagCreate xXagCreateReq;
typedef struct _XevieSend xXevieSendReq;
enum xcb_gravity_t {XCB_GRAVITY_BIT_FORGET = 0x0,XCB_GRAVITY_WIN_UNMAP = 0x0,XCB_GRAVITY_NORTH_WEST = 0x1,XCB_GRAVITY_NORTH = 0x2,XCB_GRAVITY_NORTH_EAST = 0x3,XCB_GRAVITY_WEST = 0x4,XCB_GRAVITY_CENTER = 0x5,XCB_GRAVITY_EAST = 0x6,XCB_GRAVITY_SOUTH_WEST = 0x7,XCB_GRAVITY_SOUTH = 0x8,XCB_GRAVITY_SOUTH_EAST = 0x9,XCB_GRAVITY_STATIC = 0xA,};
enum xcb_mapping_t {XCB_MAPPING_MODIFIER = 0x0,XCB_MAPPING_KEYBOARD = 0x1,XCB_MAPPING_POINTER = 0x2,};
enum xcb_sync_ca_t {XCB_SYNC_CA_COUNTER = 0x1,XCB_SYNC_CA_VALUE_TYPE = 0x2,XCB_SYNC_CA_VALUE = 0x4,XCB_SYNC_CA_TEST_TYPE = 0x8,XCB_SYNC_CA_DELTA = 0x10,XCB_SYNC_CA_EVENTS = 0x20,};
enum xcb_xv_type_t {XCB_XV_TYPE_INPUT_MASK = 0x1,XCB_XV_TYPE_OUTPUT_MASK = 0x2,XCB_XV_TYPE_VIDEO_MASK = 0x4,XCB_XV_TYPE_STILL_MASK = 0x8,XCB_XV_TYPE_IMAGE_MASK = 0x10,};
enum xfrm_nlgroups {XFRMNLGRP_NONE = 0x0,XFRMNLGRP_ACQUIRE = 0x1,XFRMNLGRP_EXPIRE = 0x2,XFRMNLGRP_SA = 0x3,XFRMNLGRP_POLICY = 0x4,XFRMNLGRP_AEVENTS = 0x5,XFRMNLGRP_REPORT = 0x6,XFRMNLGRP_MIGRATE = 0x7,XFRMNLGRP_MAPPING = 0x8,__XFRMNLGRP_MAX = 0x9,};
typedef struct _xkbBellNotify xkbBellNotify;
struct xt_limit_priv;
struct xt_quota_priv;
struct xt_state_info {unsigned int statemask;};
typedef struct _D0F732F65C44B5672B29FFE38726918A xvAdaptorInfo;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvGetStillReq;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvGetVideoReq;
typedef struct _DEEBBF9E678AFA2413B9A4D363D90472 xvGrabPortReq;
typedef struct _75FC8135A7E79B969971564222AED43C xvPutImageReq;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvPutStillReq;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvPutVideoReq;
enum yppush_status {YPPUSH_SUCC = 0x1,YPPUSH_AGE = 0x2,YPPUSH_NOMAP = 0xFFFFFFFF,YPPUSH_NODOM = 0xFFFFFFFE,YPPUSH_RSRC = 0xFFFFFFFD,YPPUSH_RPC = 0xFFFFFFFC,YPPUSH_MADDR = 0xFFFFFFFB,YPPUSH_YPERR = 0xFFFFFFFA,YPPUSH_BADARGS = 0xFFFFFFF9,YPPUSH_DBM = 0xFFFFFFF8,YPPUSH_FILE = 0xFFFFFFF7,YPPUSH_SKEW = 0xFFFFFFF6,YPPUSH_CLEAR = 0xFFFFFFF5,YPPUSH_FORCE = 0xFFFFFFF4,YPPUSH_XFRERR = 0xFFFFFFF3,YPPUSH_REFUSED = 0xFFFFFFF2,};
typedef struct _3FAE0D239BF72F1C4090C29672BF8F72 COFF_AOUTHDR;
struct COFF_filehdr {char f_magic[2];char f_nscns[2];char f_timdat[4];char f_symptr[4];char f_nsyms[4];char f_opthdr[2];char f_flags[2];};
typedef struct _3DC7B7400B12314EE6EFE34533277AB7 CTL_RESPONSE;
typedef struct Dwarf_Abbrev_s *Dwarf_Abbrev;
typedef struct Dwarf_Arange_s *Dwarf_Arange;
typedef struct Dwarf_Global_s *Dwarf_Global;
typedef struct Dwarf_P_Expr_s *Dwarf_P_Expr;
typedef struct _CB514849AD88F11A467565D13DD0C300 Dwarf_Ranges;
typedef signed __int64 Dwarf_Signed;
enum EPOLL_EVENTS {EPOLLIN = 0x1,EPOLLPRI = 0x2,EPOLLOUT = 0x4,EPOLLRDNORM = 0x40,EPOLLRDBAND = 0x80,EPOLLWRNORM = 0x100,EPOLLWRBAND = 0x200,EPOLLMSG = 0x400,EPOLLERR = 0x8,EPOLLHUP = 0x10,EPOLLRDHUP = 0x2000,EPOLLWAKEUP = 0x20000000,EPOLLONESHOT = 0x40000000,EPOLLET = 0x80000000,};
typedef struct _A0565235DB0A025ED98270EC8F0003BF Elf32_Verdef;
typedef struct _F9E7774477A9727B3397D0BE30B022B2 Elf32_auxv_t;
typedef struct _75FD820D0CE6C215ACE04A8FAA270A6D Elf64_Verdef;
typedef struct _E8B6B3D679DDF9A2A9F1E31A29349D07 Elf64_auxv_t;
typedef struct _FPEFunctions FPEFunctions;
typedef struct _FontNames *FontNamesPtr;
typedef struct _FontNames FontNamesRec;
typedef int Form_Options;
enum HDSP_IO_Type {Digiface = 0x0,Multiface = 0x1,H9652 = 0x2,H9632 = 0x3,RPM = 0x4,Undefined = 0x5,};
enum HWEVENT_opts {HWEV_DCD_ON = 0x0,HWEV_DCD_OFF = 0x1,HWEV_ALL_SENT = 0x2,};
typedef int Item_Options;
enum MACRO_ABSENT {ABSENT_BOOLEAN = -1,ABSENT_NUMERIC = -1,ABSENT_STRING = 0,};
enum MACRO_ACTION {XTestDELAY_ACTION = 0,XTestKEY_ACTION = 1,XTestMOTION_ACTION = 2,XTestJUMP_ACTION = 3,};
enum MACRO_AGPIOC {AGPIOC_BASE = 65,AGPIOC_ACQUIRE = 16641,AGPIOC_RELEASE = 16642,AGPIOC_CHIPSET_FLUSH = 16650,};
enum MACRO_ARCNET {ARCNET_ALEN = 1,};
enum MACRO_ARPHRD {ARPHRD_NETROM = 0,ARPHRD_ETHER = 1,ARPHRD_EETHER = 2,ARPHRD_AX25 = 3,ARPHRD_PRONET = 4,ARPHRD_CHAOS = 5,ARPHRD_IEEE802 = 6,ARPHRD_ARCNET = 7,ARPHRD_APPLETLK = 8,ARPHRD_DLCI = 15,ARPHRD_ATM = 19,ARPHRD_METRICOM = 23,ARPHRD_IEEE1394 = 24,ARPHRD_EUI64 = 27,ARPHRD_INFINIBAND = 32,ARPHRD_SLIP = 256,ARPHRD_CSLIP = 257,ARPHRD_SLIP6 = 258,ARPHRD_CSLIP6 = 259,ARPHRD_RSRVD = 260,ARPHRD_ADAPT = 264,ARPHRD_ROSE = 270,ARPHRD_X25 = 271,ARPHRD_HWX25 = 272,ARPHRD_PPP = 512,ARPHRD_CISCO = 513,ARPHRD_HDLC = 513,ARPHRD_LAPB = 516,ARPHRD_DDCMP = 517,ARPHRD_RAWHDLC = 518,ARPHRD_TUNNEL = 768,ARPHRD_TUNNEL6 = 769,ARPHRD_FRAD = 770,ARPHRD_SKIP = 771,ARPHRD_LOOPBACK = 772,ARPHRD_LOCALTLK = 773,ARPHRD_FDDI = 774,ARPHRD_BIF = 775,ARPHRD_SIT = 776,ARPHRD_IPDDP = 777,ARPHRD_IPGRE = 778,ARPHRD_PIMREG = 779,ARPHRD_HIPPI = 780,ARPHRD_ASH = 781,ARPHRD_ECONET = 782,ARPHRD_IRDA = 783,ARPHRD_FCPP = 784,ARPHRD_FCAL = 785,ARPHRD_FCPL = 786,ARPHRD_FCFABRIC = 787,ARPHRD_IEEE802_TR = 800,ARPHRD_IEEE80211 = 801,ARPHRD_IEEE80211_PRISM = 802,ARPHRD_IEEE80211_RADIOTAP = 803,ARPHRD_IEEE802154 = 804,ARPHRD_IEEE802154_PHY = 805,ARPHRD_VOID = 65535,ARPHRD_NONE = 65534,};
enum MACRO_ASYNCB {ASYNCB_HUP_NOTIFY = 0,ASYNCB_FOURPORT = 1,ASYNCB_SAK = 2,ASYNCB_SPLIT_TERMIOS = 3,ASYNCB_SPD_HI = 4,ASYNCB_SPD_VHI = 5,ASYNCB_SKIP_TEST = 6,ASYNCB_AUTO_IRQ = 7,ASYNCB_SESSION_LOCKOUT = 8,ASYNCB_PGRP_LOCKOUT = 9,ASYNCB_CALLOUT_NOHUP = 10,ASYNCB_HARDPPS_CD = 11,ASYNCB_SPD_SHI = 12,ASYNCB_LOW_LATENCY = 13,ASYNCB_BUGGY_UART = 14,ASYNCB_AUTOPROBE = 15,ASYNCB_LAST_USER = 15,ASYNCB_INITIALIZED = 31,ASYNCB_SUSPENDED = 30,ASYNCB_NORMAL_ACTIVE = 29,ASYNCB_BOOT_AUTOCONF = 28,ASYNCB_CLOSING = 27,ASYNCB_CTS_FLOW = 26,ASYNCB_CHECK_CD = 25,ASYNCB_SHARE_IRQ = 24,ASYNCB_CONS_FLOW = 23,ASYNCB_FIRST_KERNEL = 22,};
enum MACRO_ATADDR {ATADDR_ANYNET = 0,ATADDR_ANYNODE = 0,ATADDR_ANYPORT = 0,ATADDR_BCAST = 255,};
enum MACRO_ATMARP {ATMARP_RETRY_DELAY = 30,ATMARP_MAX_UNRES_PACKETS = 5,};
enum MACRO_ATMIOC {ATMIOC_PHYCOM = 0x0,ATMIOC_PHYCOM_END = 0xF,ATMIOC_PHYTYP = 0x10,ATMIOC_PHYTYP_END = 0x2F,ATMIOC_PHYPRV = 0x30,ATMIOC_PHYPRV_END = 0x4F,ATMIOC_SARCOM = 0x50,ATMIOC_SARCOM_END = 0x50,ATMIOC_SARPRV = 0x60,ATMIOC_SARPRV_END = 0x7F,ATMIOC_ITF = 0x80,ATMIOC_ITF_END = 0x8F,ATMIOC_BACKEND = 0x90,ATMIOC_BACKEND_END = 0xAF,ATMIOC_AREQUIPA = 0xC0,ATMIOC_LANE = 0xD0,ATMIOC_MPOA = 0xD8,ATMIOC_CLIP = 0xE0,ATMIOC_CLIP_END = 0xEF,ATMIOC_SPECIAL = 0xF0,ATMIOC_SPECIAL_END = 0xFF,};
enum MACRO_ATMLEC {ATMLEC_CTRL = 25040,ATMLEC_DATA = 25041,ATMLEC_MCAST = 25042,};
enum MACRO_ATMMPC {ATMMPC_CTRL = 25048,ATMMPC_DATA = 25049,};
enum MACRO_ATMTCP {ATMTCP_HDR_MAGIC = -1,ATMTCP_CTRL_OPEN = 1,ATMTCP_CTRL_CLOSE = 2,};
enum MACRO_ATM_L2 {ATM_L2_NONE = 0,ATM_L2_ISO1745 = 1,ATM_L2_Q291 = 2,ATM_L2_X25_LL = 6,ATM_L2_X25_ML = 7,ATM_L2_LAPB = 8,ATM_L2_HDLC_ARM = 9,ATM_L2_HDLC_NRM = 10,ATM_L2_HDLC_ABM = 11,ATM_L2_ISO8802 = 12,ATM_L2_X75 = 13,ATM_L2_Q922 = 14,ATM_L2_USER = 16,ATM_L2_ISO7776 = 17,ATM_L3_NONE = 0,ATM_L3_X25 = 6,ATM_L3_ISO8208 = 7,ATM_L3_X223 = 8,ATM_L3_ISO8473 = 9,ATM_L3_T70 = 10,ATM_L3_TR9577 = 11,ATM_L3_H310 = 12,ATM_L3_H321 = 13,ATM_L3_USER = 16,ATM_HL_NONE = 0,ATM_HL_ISO = 1,ATM_HL_USER = 2,ATM_HL_HLP = 3,ATM_HL_VENDOR = 4,ATM_IMD_NONE = 0,ATM_IMD_NORMAL = 1,ATM_IMD_EXTENDED = 2,ATM_TT_NONE = 0,ATM_TT_RX = 1,ATM_TT_TX = 2,ATM_TT_RXTX = 3,ATM_MC_NONE = 0,ATM_MC_TS = 1,ATM_MC_TS_FEC = 2,ATM_MC_PS = 3,ATM_MC_PS_FEC = 4,ATM_MC_H221 = 5,ATM_MAX_HLI = 8,ATM_MAX_BLLI = 3,ATM_CELL_SIZE = 53,ATM_CELL_PAYLOAD = 48,ATM_AAL0_SDU = 52,ATM_MAX_AAL34_PDU = 65535,ATM_AAL5_TRAILER = 8,ATM_MAX_AAL5_PDU = 65535,ATM_MAX_CDV = 9999,ATM_NOT_RSV_VCI = 32,ATM_MAX_VPI = 255,ATM_MAX_VPI_NNI = 4096,ATM_MAX_VCI = 65535,ATM_NO_AAL = 0,ATM_AAL0 = 13,ATM_AAL1 = 1,ATM_AAL2 = 2,ATM_AAL34 = 3,ATM_AAL5 = 5,ATM_HDR_GFC_MASK = -268435456,ATM_HDR_GFC_SHIFT = 28,ATM_HDR_VPI_MASK = 267386880,ATM_HDR_VPI_SHIFT = 20,ATM_HDR_VCI_MASK = 1048560,ATM_HDR_VCI_SHIFT = 4,ATM_HDR_PTI_MASK = 14,ATM_HDR_PTI_SHIFT = 1,ATM_HDR_CLP = 1,ATM_PTI_US0 = 0,ATM_PTI_US1 = 1,ATM_PTI_UCES0 = 2,ATM_PTI_UCES1 = 3,ATM_PTI_SEGF5 = 4,ATM_PTI_E2EF5 = 5,ATM_PTI_RSV_RM = 6,ATM_PTI_RSV = 7,ATM_NONE = 0,ATM_UBR = 1,ATM_CBR = 2,ATM_VBR = 3,ATM_ABR = 4,ATM_ANYCLASS = 5,ATM_MAX_PCR = -1,ATM_ITF_ANY = -1,ATM_VPI_ANY = -1,ATM_VCI_ANY = -1,ATM_VPI_UNSPEC = -2,ATM_VCI_UNSPEC = -2,ATM_ESA_LEN = 20,ATM_E164_LEN = 12,ATM_AFI_DCC = 57,ATM_AFI_ICD = 71,ATM_AFI_E164 = 69,ATM_AFI_LOCAL = 73,ATM_AFI_DCC_GROUP = 189,ATM_AFI_ICD_GROUP = 197,ATM_AFI_E164_GROUP = 195,ATM_AFI_LOCAL_GROUP = 199,ATM_LIJ_NONE = 0,ATM_LIJ = 1,ATM_LIJ_RPJ = 2,ATM_LIJ_NJ = 3,};
enum MACRO_ATM_LM {ATM_LM_NONE = 0,ATM_LM_LOC_AAL = 1,ATM_LM_LOC_ATM = 2,ATM_LM_LOC_PHY = 8,ATM_LM_LOC_ANALOG = 16,ATM_LM_RMT_AAL = 256,ATM_LM_RMT_ATM = 512,ATM_LM_RMT_PHY = 2048,ATM_LM_RMT_ANALOG = 4096,ATM_CI_MAX = -1,ATM_SC_RX = 1024,ATM_SC_TX = 2048,ATM_BACKLOG_DEFAULT = 32,ATM_MF_IMMED = 1,ATM_MF_INC_RSV = 2,ATM_MF_INC_SHP = 4,ATM_MF_DEC_RSV = 8,ATM_MF_DEC_SHP = 16,ATM_MF_BWD = 32,ATM_MF_SET = 62,ATM_VS_IDLE = 0,ATM_VS_CONNECTED = 1,ATM_VS_CLOSING = 2,ATM_VS_LISTEN = 3,ATM_VS_INUSE = 4,ATM_VS_BOUND = 5,};
enum MACRO_ATPORT {ATPORT_FIRST = 1,ATPORT_RESERVED = 128,ATPORT_LAST = 254,};
enum MACRO_AURORA {AURORA_MAJOR = 79,I2O_MAJOR = 80,SHMIQ_MAJOR = 85,SCSI_CHANGER_MAJOR = 86,IDE6_MAJOR = 88,IDE7_MAJOR = 89,IDE8_MAJOR = 90,IDE9_MAJOR = 91,DASD_MAJOR = 94,MDISK_MAJOR = 95,UBD_MAJOR = 98,PP_MAJOR = 99,JSFD_MAJOR = 99,PHONE_MAJOR = 100,COMPAQ_CISS_MAJOR = 104,};
enum MACRO_AnyKey {AnyKey = 0,};
enum MACRO_B19200 {B19200 = 0xE,};
enum MACRO_B38400 {B38400 = 0xF,};
enum MACRO_B57600 {B57600 = 0x1001,};
enum MACRO_BINPRM {BINPRM_BUF_SIZE = 128,};
enum MACRO_BLK_TC {BLK_TC_SHIFT = 16,BLK_IO_TRACE_MAGIC = 1700885504,BLK_IO_TRACE_VERSION = 7,};
enum MACRO_BRIDGE {BRIDGE_FLAGS_MASTER = 1,BRIDGE_FLAGS_SELF = 2,BRIDGE_MODE_VEB = 0,BRIDGE_MODE_VEPA = 1,BRIDGE_VLAN_INFO_MASTER = 1,BRIDGE_VLAN_INFO_PVID = 2,BRIDGE_VLAN_INFO_UNTAGGED = 4,};
enum MACRO_BUFFER {WRITE_BUFFER = 0x3B,READ_BUFFER = 0x3C,};
enum MACRO_BUTTON {BUTTON_CTRL = 16777216,BUTTON_SHIFT = 33554432,BUTTON_ALT = 67108864,};
enum MACRO_CANCEL {CANCEL = 3,NAMES = 4,};
enum MACRO_CBPROC {CBPROC_RECEIVE = 1,CBPROC_FINISH = 2,CBPROC_ERROR = 3,};
enum MACRO_CCHARW {CCHARW_MAX = 5,};
enum MACRO_CFLUSH {CFLUSH = 15,};
enum MACRO_CHANGE {CHANGE_DEFINITION = 0x40,};
enum MACRO_CIBAUD {CIBAUD = 0x100F0000,CMSPAR = 0x40000000,CRTSCTS = 0x80000000,};
enum MACRO_CLIENT {NO_CLIENT = 0,USER_CLIENT = 1,KERNEL_CLIENT = 2,};
enum MACRO_CLNEXT {CLNEXT = 22,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000000,};
enum MACRO_CM4000 {CM4000_MAX_DEV = 4,};
enum MACRO_CM_IOC {CM_IOC_MAGIC = 99,CM_IOC_MAXNR = 255,CM_IOCSRDR = 25347,CM_IOCARDOFF = 25348,CM_CARD_INSERTED = 1,CM_CARD_POWERED = 2,CM_ATR_PRESENT = 4,CM_ATR_VALID = 8,CM_STATE_VALID = 15,CM_NO_READER = 16,CM_BAD_CARD = 32,};
enum MACRO_COMPAQ {COMPAQ_SMART2_MAJOR1 = 73,COMPAQ_SMART2_MAJOR2 = 74,COMPAQ_SMART2_MAJOR3 = 75,COMPAQ_SMART2_MAJOR4 = 76,COMPAQ_SMART2_MAJOR5 = 77,COMPAQ_SMART2_MAJOR6 = 78,COMPAQ_SMART2_MAJOR7 = 79,};
enum MACRO_CRAMFS {CRAMFS_MAGIC_WEND = 0x453DCD28,};
enum MACRO_CSTART {CSTART = 17,};
enum MACRO_CURSES {CURSES = 1,};
enum MACRO_DAMAGE {DAMAGE_MAJOR = 1,DAMAGE_MINOR = 1,};
enum MACRO_DECNET {DECNET_IOCTL_BASE = 0x89,};
enum MACRO_DELETE {DELETE = 2,};
enum MACRO_DESERR {DESERR_NONE = 0,DESERR_NOHWDEVICE = 1,DESERR_HWERROR = 2,DESERR_BADPARAM = 3,};
enum MACRO_DEVICE {DEVICE_RESOLUTION = 1,DEVICE_ABS_CALIB = 2,DEVICE_CORE = 3,DEVICE_ENABLE = 4,DEVICE_ABS_AREA = 5,};
enum MACRO_DIVERT {DIVERT_IF_MAGIC = 0x25873401,DIVERT_CMD_REG = 0x0,DIVERT_CMD_REL = 0x1,DIVERT_NO_ERR = 0x0,DIVERT_CMD_ERR = 0x1,DIVERT_VER_ERR = 0x2,DIVERT_REG_ERR = 0x3,DIVERT_REL_ERR = 0x4,};
enum MACRO_DM_MAX {DM_MAX_TYPE_NAME = 16,DM_NAME_LEN = 128,DM_UUID_LEN = 129,DM_IOCTL = 253,DM_VERSION_MAJOR = 4,DM_VERSION_MINOR = 25,DM_VERSION_PATCHLEVEL = 0,DM_READONLY_FLAG = 1,DM_SUSPEND_FLAG = 2,DM_PERSISTENT_DEV_FLAG = 8,DM_STATUS_TABLE_FLAG = 16,DM_ACTIVE_PRESENT_FLAG = 32,DM_INACTIVE_PRESENT_FLAG = 64,DM_BUFFER_FULL_FLAG = 256,DM_SKIP_BDGET_FLAG = 512,DM_SKIP_LOCKFS_FLAG = 1024,DM_NOFLUSH_FLAG = 2048,DM_QUERY_INACTIVE_TABLE_FLAG = 4096,DM_UEVENT_GENERATED_FLAG = 8192,DM_UUID_FLAG = 16384,DM_SECURE_DATA_FLAG = 32768,DM_DATA_OUT_FLAG = 65536,DM_ULOG_CTR = 1,DM_ULOG_DTR = 2,DM_ULOG_PRESUSPEND = 3,DM_ULOG_POSTSUSPEND = 4,DM_ULOG_RESUME = 5,DM_ULOG_GET_REGION_SIZE = 6,DM_ULOG_IS_CLEAN = 7,DM_ULOG_IN_SYNC = 8,DM_ULOG_FLUSH = 9,DM_ULOG_MARK_REGION = 10,DM_ULOG_CLEAR_REGION = 11,DM_ULOG_GET_RESYNC_WORK = 12,DM_ULOG_SET_REGION_SYNC = 13,DM_ULOG_GET_SYNC_COUNT = 14,DM_ULOG_STATUS_INFO = 15,DM_ULOG_STATUS_TABLE = 16,DM_ULOG_IS_REMOTE_RECOVERING = 17,DM_ULOG_REQUEST_MASK = 255,DM_ULOG_REQUEST_VERSION = 2,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_DOUBLE {DOUBLE_IS_LITTLE_ENDIAN_IEEE754 = 1,};
enum MACRO_DT_PPC {DT_PPC_GOT = 1879048192,DT_PPC_NUM = 1,};
enum MACRO_DUPLEX {DUPLEX_HALF = 0x0,DUPLEX_FULL = 0x1,DUPLEX_UNKNOWN = 0xFF,};
enum MACRO_E820NR {E820NR = 0x1E8,};
enum MACRO_EBADID {EBADID = 5,};
enum MACRO_ECTYPE {ECTYPE_PACKET_RECEIVED = 0,ECTYPE_TRANSMIT_STATUS = 16,ECTYPE_TRANSMIT_OK = 1,ECTYPE_TRANSMIT_NOT_LISTENING = 2,ECTYPE_TRANSMIT_NET_ERROR = 3,ECTYPE_TRANSMIT_NO_CLOCK = 4,ECTYPE_TRANSMIT_LINE_JAMMED = 5,ECTYPE_TRANSMIT_NOT_PRESENT = 6,};
enum MACRO_EDDBUF {EDDBUF = 0xD00,};
enum MACRO_EDRIVE {EDRIVE_CANT_DO_THIS = 95,};
enum MACRO_EFLAGS {EFLAGS = 18,};
enum MACRO_EF_ARM {EF_ARM_RELEXEC = 0x1,EF_ARM_HASENTRY = 0x2,EF_ARM_INTERWORK = 0x4,EF_ARM_APCS_26 = 0x8,EF_ARM_APCS_FLOAT = 0x10,EF_ARM_PIC = 0x20,EF_ARM_ALIGN8 = 0x40,EF_ARM_NEW_ABI = 0x80,EF_ARM_OLD_ABI = 0x100,EF_ARM_SOFT_FLOAT = 0x200,EF_ARM_VFP_FLOAT = 0x400,EF_ARM_MAVERICK_FLOAT = 0x800,EF_ARM_ABI_FLOAT_SOFT = 0x200,EF_ARM_ABI_FLOAT_HARD = 0x400,EF_ARM_SYMSARESORTED = 0x4,EF_ARM_DYNSYMSUSESEGIDX = 0x8,EF_ARM_MAPSYMSFIRST = 0x10,EF_ARM_EABIMASK = 0xFF000000,EF_ARM_BE8 = 0x800000,EF_ARM_LE8 = 0x400000,EF_ARM_EABI_UNKNOWN = 0x0,EF_ARM_EABI_VER1 = 0x1000000,EF_ARM_EABI_VER2 = 0x2000000,EF_ARM_EABI_VER3 = 0x3000000,EF_ARM_EABI_VER4 = 0x4000000,EF_ARM_EABI_VER5 = 0x5000000,};
enum MACRO_EF_PPC {EF_PPC_EMB = 0x80000000,EF_PPC_RELOCATABLE = 0x10000,EF_PPC_RELOCATABLE_LIB = 0x8000,};
enum MACRO_EGRESS {EGRESS_ENTRY_REMOVED = 205,};
enum MACRO_EM_486 {EM_486 = 6,EM_MIPS_RS4_BE = 10,EM_SPU = 23,EM_BLACKFIN = 106,EM_TI_C6000 = 140,EM_FRV = 21569,EM_AVR32 = 6317,EM_CYGNUS_V850 = 36992,EM_CYGNUS_M32R = 36929,EM_S390_OLD = 41872,EM_CYGNUS_MN10300 = 48879,};
enum MACRO_ENABLE {ENABLE_IPV6 = 1,};
enum MACRO_ENDIAN {__LITTLE_ENDIAN = 1234,__BIG_ENDIAN = 4321,__PDP_ENDIAN = 3412,};
enum MACRO_ENERGY {ENERGY_PERF_BIAS_PERFORMANCE = 0,ENERGY_PERF_BIAS_NORMAL = 6,ENERGY_PERF_BIAS_POWERSAVE = 15,};
enum MACRO_ETH_FW {ETH_FW_DUMP_DISABLE = 0,};
enum MACRO_ETH_TP {ETH_TP_MDI_INVALID = 0x0,ETH_TP_MDI = 0x1,ETH_TP_MDI_X = 0x2,ETH_TP_MDI_AUTO = 0x3,};
enum MACRO_EUNDEF {EUNDEF = 0,ENOTFOUND = 1,EACCESS = 2,};
enum MACRO_EV_SEQ {EV_SEQ_LOCAL = 0x80,EV_TIMING = 0x81,EV_CHN_COMMON = 0x92,EV_CHN_VOICE = 0x93,EV_SYSEX = 0x94,};
enum MACRO_EXPAND {EXPAND_NAME = 64,};
enum MACRO_EXPIRE {EXPIRE_TIME = 180,GARBAGE_TIME = 240,};
enum MACRO_Expose {Expose = 12,};
enum MACRO_FAILED {FAILED = 2,};
enum MACRO_FALLOC {FALLOC_FL_KEEP_SIZE = 0x1,FALLOC_FL_PUNCH_HOLE = 0x2,FALLOC_FL_NO_HIDE_STALE = 0x4,};
enum MACRO_FAM10H {FAM10H_MMIO_CONF_ENABLE = 1,FAM10H_MMIO_CONF_BUSRANGE_MASK = 15,FAM10H_MMIO_CONF_BUSRANGE_SHIFT = 2,FAM10H_MMIO_CONF_BASE_MASK = 268435455,FAM10H_MMIO_CONF_BASE_SHIFT = 20,};
enum MACRO_FASYNC {FASYNC = 8192,};
enum MACRO_FB_CUR {FB_CUR_SETIMAGE = 0x1,FB_CUR_SETPOS = 0x2,FB_CUR_SETHOT = 0x4,FB_CUR_SETCMAP = 0x8,FB_CUR_SETSHAPE = 0x10,FB_CUR_SETSIZE = 0x20,FB_CUR_SETALL = 0xFF,};
enum MACRO_FD_RAW {FD_RAW_READ = 1,FD_RAW_WRITE = 2,FD_RAW_NO_MOTOR = 4,FD_RAW_DISK_CHANGE = 4,FD_RAW_INTR = 8,FD_RAW_SPIN = 16,FD_RAW_NO_MOTOR_AFTER = 32,FD_RAW_NEED_DISK = 64,FD_RAW_NEED_SEEK = 128,FD_RAW_MORE = 256,FD_RAW_STOP_IF_FAILURE = 512,FD_RAW_STOP_IF_SUCCESS = 1024,FD_RAW_SOFTFAILURE = 2048,FD_RAW_FAILURE = 65536,FD_RAW_HARDFAILURE = 131072,};
enum MACRO_FHSIZE {FHSIZE = 32,};
enum MACRO_FIBMAP {FIBMAP = 0x1,FIGETBSZ = 0x2,};
enum MACRO_FIEMAP {FIEMAP_MAX_OFFSET = -1,FIEMAP_FLAG_SYNC = 1,FIEMAP_FLAG_XATTR = 2,FIEMAP_FLAGS_COMPAT = 3,FIEMAP_EXTENT_LAST = 1,FIEMAP_EXTENT_UNKNOWN = 2,FIEMAP_EXTENT_DELALLOC = 4,FIEMAP_EXTENT_ENCODED = 8,FIEMAP_EXTENT_DATA_ENCRYPTED = 128,FIEMAP_EXTENT_NOT_ALIGNED = 256,FIEMAP_EXTENT_DATA_INLINE = 512,FIEMAP_EXTENT_DATA_TAIL = 1024,FIEMAP_EXTENT_UNWRITTEN = 2048,FIEMAP_EXTENT_MERGED = 4096,FIEMAP_EXTENT_SHARED = 8192,};
enum MACRO_FILENO {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,};
enum MACRO_FOLLOW {FOLLOW_LINKS = 1,FOLLOW_PATH = 2,};
enum MACRO_FORMAT {FORMAT_UNIT = 0x4,};
enum MACRO_FSHIFT {FSHIFT = 8,FSCALE = 256,};
enum MACRO_GETALL {GETALL = 13,};
enum MACRO_GETPID {GETPID = 11,};
enum MACRO_GETVAL {GETVAL = 12,};
enum MACRO_GIGVER {GIGVER_DRIVER = 0,GIGVER_COMPAT = 1,GIGVER_FWBASE = 2,};
enum MACRO_GPMODE {GPMODE_VENDOR_PAGE = 0x0,GPMODE_R_W_ERROR_PAGE = 0x1,GPMODE_WRITE_PARMS_PAGE = 0x5,GPMODE_WCACHING_PAGE = 0x8,GPMODE_AUDIO_CTL_PAGE = 0xE,GPMODE_POWER_PAGE = 0x1A,GPMODE_FAULT_FAIL_PAGE = 0x1C,GPMODE_TO_PROTECT_PAGE = 0x1D,GPMODE_CAPABILITIES_PAGE = 0x2A,GPMODE_ALL_PAGES = 0x3F,GPMODE_CDROM_PAGE = 0xD,};
enum MACRO_GROUPS {IMPMEM_GROUPS = 1,RECURS_GROUPS = 2,NEGMEM_GROUPS = 4,};
enum MACRO_GXcopy {GXcopy = 0x3,GXandInverted = 0x4,};
enum MACRO_GXnand {GXnand = 0xE,};
enum MACRO_GXnoop {GXnoop = 0x5,};
enum MACRO_HIDDEV {HIDDEV_FLAG_UREF = 0x1,HIDDEV_FLAG_REPORT = 0x2,HIDDEV_FLAGS = 0x3,};
enum MACRO_HIDRAW {HIDRAW_FIRST_MINOR = 0,HIDRAW_MAX_DEVICES = 64,HIDRAW_BUFFER_SIZE = 64,};
enum MACRO_HOPCNT {HOPCNT_INFINITY = 16,};
enum MACRO_HYPERV {HYPERV_CPUID_VENDOR_AND_MAX_FUNCTIONS = 0x40000000,HYPERV_CPUID_INTERFACE = 0x40000001,HYPERV_CPUID_VERSION = 0x40000002,HYPERV_CPUID_FEATURES = 0x40000003,HYPERV_CPUID_ENLIGHTMENT_INFO = 0x40000004,HYPERV_CPUID_IMPLEMENT_LIMITS = 0x40000005,HYPERV_HYPERVISOR_PRESENT_BIT = 0x80000000,HYPERV_CPUID_MIN = 0x40000005,HYPERV_CPUID_MAX = 0x4000FFFF,};
enum MACRO_I2400M {I2400M_PLD_SIZE_MASK = 0x3FFF,I2400M_PLD_TYPE_SHIFT = 0x10,I2400M_PLD_TYPE_MASK = 0xF0000,};
enum MACRO_IDNAME {IDNAME_RIGIDDISK = 0x5244534B,IDNAME_PARTITION = 0x50415254,};
enum MACRO_IEXTEN {IEXTEN = 0x8000,EXTPROC = 0x10000,};
enum MACRO_IGMPV3 {IGMPV3_MODE_IS_INCLUDE = 1,IGMPV3_MODE_IS_EXCLUDE = 2,IGMPV3_CHANGE_TO_INCLUDE = 3,IGMPV3_CHANGE_TO_EXCLUDE = 4,IGMPV3_ALLOW_NEW_SOURCES = 5,IGMPV3_BLOCK_OLD_SOURCES = 6,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IUCLC = 0x200,IXON = 0x400,IXANY = 0x800,IXOFF = 0x1000,IMAXBEL = 0x2000,IUTF8 = 0x4000,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFF,};
enum MACRO_INTMAX {INTMAX_MIN = -9223372036854775808,INTMAX_MAX = 9223372036854775807,};
enum MACRO_INTPTR {INTPTR_MIN = -9223372036854775808,INTPTR_MAX = 9223372036854775807,};
enum MACRO_IP6OPT {IP6OPT_TYPE_SKIP = 0x0,IP6OPT_TYPE_DISCARD = 0x40,IP6OPT_TYPE_FORCEICMP = 0x80,IP6OPT_TYPE_ICMP = 0xC0,IP6OPT_TYPE_MUTABLE = 0x20,IP6OPT_PAD1 = 0x0,IP6OPT_PADN = 0x1,IP6OPT_JUMBO = 0xC2,IP6OPT_NSAP_ADDR = 0xC3,IP6OPT_TUNNEL_LIMIT = 0x4,IP6OPT_ROUTER_ALERT = 0x5,IP6OPT_JUMBO_LEN = 0x6,};
enum MACRO_IP_MSS {IP_MSS = 576,};
enum MACRO_IP_SET {IP_SET_OP_GET_BYNAME = 0x6,IP_SET_OP_GET_BYINDEX = 0x7,IP_SET_OP_VERSION = 0x100,};
enum MACRO_IXJCTL {IXJCTL_DSP_RESET = 0x71C0,IXJCTL_RING = 0x7183,IXJCTL_HOOKSTATE = 0x7184,IXJCTL_RING_STOP = 0x7188,IXJCTL_DSP_IDLE = 0x71C5,IXJCTL_TESTRAM = 0x71C6,IXJCTL_REC_START = 0x718A,IXJCTL_REC_STOP = 0x718B,IXJCTL_REC_LEVEL = 0x718F,IXJCTL_PLAY_CID = 0x71D7,IXJCTL_PLAY_START = 0x7191,IXJCTL_PLAY_STOP = 0x7192,IXJCTL_PLAY_LEVEL = 0x7195,IXJCTL_AEC_STOP = 0x71CC,IXJCTL_AEC_GET_LEVEL = 0x71CD,};
enum MACRO_KEYCTL {KEYCTL_GET_KEYRING_ID = 0,KEYCTL_JOIN_SESSION_KEYRING = 1,KEYCTL_UPDATE = 2,KEYCTL_REVOKE = 3,KEYCTL_CHOWN = 4,KEYCTL_SETPERM = 5,KEYCTL_DESCRIBE = 6,KEYCTL_CLEAR = 7,KEYCTL_LINK = 8,KEYCTL_UNLINK = 9,KEYCTL_SEARCH = 10,KEYCTL_READ = 11,KEYCTL_INSTANTIATE = 12,KEYCTL_NEGATE = 13,KEYCTL_SET_REQKEY_KEYRING = 14,KEYCTL_SET_TIMEOUT = 15,KEYCTL_ASSUME_AUTHORITY = 16,KEYCTL_GET_SECURITY = 17,KEYCTL_SESSION_TO_PARENT = 18,KEYCTL_REJECT = 19,KEYCTL_INSTANTIATE_IOV = 20,KEYCTL_INVALIDATE = 21,};
enum MACRO_KVM_VM {KVM_VM_S390_UCONTROL = 1,KVM_S390_SIE_PAGE_OFFSET = 1,KVM_GET_API_VERSION = 44544,KVM_CREATE_VM = 44545,KVM_S390_ENABLE_SIE = 44550,KVM_CHECK_EXTENSION = 44547,KVM_GET_VCPU_MMAP_SIZE = 44548,KVM_TRACE_PAUSE = 44551,KVM_TRACE_DISABLE = 44552,KVM_CAP_IRQCHIP = 0,KVM_CAP_HLT = 1,KVM_CAP_MMU_SHADOW_CACHE_CONTROL = 2,KVM_CAP_USER_MEMORY = 3,KVM_CAP_SET_TSS_ADDR = 4,KVM_CAP_VAPIC = 6,KVM_CAP_EXT_CPUID = 7,KVM_CAP_CLOCKSOURCE = 8,KVM_CAP_NR_VCPUS = 9,KVM_CAP_NR_MEMSLOTS = 10,KVM_CAP_PIT = 11,KVM_CAP_NOP_IO_DELAY = 12,KVM_CAP_PV_MMU = 13,KVM_CAP_MP_STATE = 14,KVM_CAP_COALESCED_MMIO = 15,KVM_CAP_SYNC_MMU = 16,KVM_CAP_DEVICE_ASSIGNMENT = 17,KVM_CAP_IOMMU = 18,KVM_CAP_DEVICE_MSI = 20,KVM_CAP_DESTROY_MEMORY_REGION_WORKS = 21,KVM_CAP_USER_NMI = 22,KVM_CAP_SET_GUEST_DEBUG = 23,KVM_CAP_REINJECT_CONTROL = 24,KVM_CAP_IRQ_ROUTING = 25,KVM_CAP_IRQ_INJECT_STATUS = 26,KVM_CAP_DEVICE_DEASSIGNMENT = 27,KVM_CAP_DEVICE_MSIX = 28,KVM_CAP_ASSIGN_DEV_IRQ = 29,KVM_CAP_JOIN_MEMORY_REGIONS_WORKS = 30,KVM_CAP_MCE = 31,KVM_CAP_IRQFD = 32,KVM_CAP_PIT2 = 33,KVM_CAP_SET_BOOT_CPU_ID = 34,KVM_CAP_PIT_STATE2 = 35,KVM_CAP_IOEVENTFD = 36,KVM_CAP_SET_IDENTITY_MAP_ADDR = 37,KVM_CAP_XEN_HVM = 38,KVM_CAP_ADJUST_CLOCK = 39,KVM_CAP_INTERNAL_ERROR_DATA = 40,KVM_CAP_VCPU_EVENTS = 41,KVM_CAP_S390_PSW = 42,KVM_CAP_PPC_SEGSTATE = 43,KVM_CAP_HYPERV = 44,KVM_CAP_HYPERV_VAPIC = 45,KVM_CAP_HYPERV_SPIN = 46,KVM_CAP_PCI_SEGMENT = 47,KVM_CAP_PPC_PAIRED_SINGLES = 48,KVM_CAP_INTR_SHADOW = 49,KVM_CAP_DEBUGREGS = 50,KVM_CAP_X86_ROBUST_SINGLESTEP = 51,KVM_CAP_PPC_OSI = 52,KVM_CAP_PPC_UNSET_IRQ = 53,KVM_CAP_ENABLE_CAP = 54,KVM_CAP_XSAVE = 55,KVM_CAP_XCRS = 56,KVM_CAP_PPC_GET_PVINFO = 57,KVM_CAP_PPC_IRQ_LEVEL = 58,KVM_CAP_ASYNC_PF = 59,KVM_CAP_TSC_CONTROL = 60,KVM_CAP_GET_TSC_KHZ = 61,KVM_CAP_PPC_BOOKE_SREGS = 62,KVM_CAP_SPAPR_TCE = 63,KVM_CAP_PPC_SMT = 64,KVM_CAP_PPC_RMA = 65,KVM_CAP_MAX_VCPUS = 66,KVM_CAP_PPC_HIOR = 67,KVM_CAP_PPC_PAPR = 68,KVM_CAP_SW_TLB = 69,KVM_CAP_ONE_REG = 70,KVM_CAP_S390_GMAP = 71,KVM_CAP_TSC_DEADLINE_TIMER = 72,KVM_CAP_S390_UCONTROL = 73,KVM_CAP_SYNC_REGS = 74,KVM_CAP_PCI_2_3 = 75,KVM_CAP_KVMCLOCK_CTRL = 76,KVM_CAP_SIGNAL_MSI = 77,KVM_CAP_PPC_GET_SMMU_INFO = 78,KVM_CAP_S390_COW = 79,KVM_CAP_PPC_ALLOC_HTAB = 80,KVM_CAP_READONLY_MEM = 81,KVM_CAP_IRQFD_RESAMPLE = 82,KVM_CAP_PPC_BOOKE_WATCHDOG = 83,KVM_CAP_PPC_HTAB_FD = 84,KVM_CAP_S390_CSS_SUPPORT = 85,KVM_CAP_PPC_EPR = 86,KVM_CAP_ARM_PSCI = 87,KVM_CAP_ARM_SET_DEVICE_ADDR = 88,KVM_CAP_DEVICE_CTRL = 89,KVM_CAP_IRQ_MPIC = 90,KVM_CAP_PPC_RTAS = 91,KVM_CAP_IRQ_XICS = 92,KVM_CAP_ARM_EL1_32BIT = 93,KVM_IRQ_ROUTING_IRQCHIP = 1,KVM_IRQ_ROUTING_MSI = 2,KVM_IRQFD_FLAG_DEASSIGN = 1,KVM_IRQFD_FLAG_RESAMPLE = 2,KVM_MMU_FSL_BOOKE_NOHV = 0,KVM_MMU_FSL_BOOKE_HV = 1,KVM_REG_ARCH_MASK = -72057594037927936,KVM_REG_GENERIC = 0,KVM_REG_PPC = 1152921504606846976,KVM_REG_X86 = 2305843009213693952,KVM_REG_IA64 = 3458764513820540928,KVM_REG_ARM = 4611686018427387904,KVM_REG_S390 = 5764607523034234880,KVM_REG_ARM64 = 6917529027641081856,KVM_REG_MIPS = 8070450532247928832,KVM_REG_SIZE_SHIFT = 52,KVM_REG_SIZE_MASK = 67553994410557440,KVM_REG_SIZE_U8 = 0,KVM_REG_SIZE_U16 = 4503599627370496,KVM_REG_SIZE_U32 = 9007199254740992,KVM_REG_SIZE_U64 = 13510798882111488,KVM_REG_SIZE_U128 = 18014398509481984,KVM_REG_SIZE_U256 = 22517998136852480,KVM_REG_SIZE_U512 = 27021597764222976,KVM_REG_SIZE_U1024 = 31525197391593472,KVM_CREATE_DEVICE_TEST = 1,KVM_DEV_TYPE_FSL_MPIC_20 = 1,KVM_DEV_TYPE_FSL_MPIC_42 = 2,KVM_DEV_TYPE_XICS = 3,KVM_CREATE_VCPU = 44609,KVM_SET_NR_MMU_PAGES = 44612,KVM_GET_NR_MMU_PAGES = 44613,KVM_SET_TSS_ADDR = 44615,KVM_CREATE_IRQCHIP = 44640,KVM_CREATE_PIT = 44644,KVM_REINJECT_CONTROL = 44657,KVM_SET_BOOT_CPU_ID = 44664,KVM_SET_TSC_KHZ = 44706,KVM_GET_TSC_KHZ = 44707,KVM_RUN = 44672,KVM_S390_STORE_STATUS_NOADDR = -1,KVM_S390_STORE_STATUS_PREFIXED = -2,KVM_S390_INITIAL_RESET = 44695,KVM_NMI = 44698,KVM_KVMCLOCK_CTRL = 44717,KVM_DEV_ASSIGN_ENABLE_IOMMU = 1,KVM_DEV_ASSIGN_PCI_2_3 = 2,KVM_DEV_ASSIGN_MASK_INTX = 4,KVM_DEV_IRQ_HOST_INTX = 1,KVM_DEV_IRQ_HOST_MSI = 2,KVM_DEV_IRQ_HOST_MSIX = 4,KVM_DEV_IRQ_GUEST_INTX = 256,KVM_DEV_IRQ_GUEST_MSI = 512,KVM_DEV_IRQ_GUEST_MSIX = 1024,KVM_DEV_IRQ_HOST_MASK = 255,KVM_DEV_IRQ_GUEST_MASK = 65280,KVM_MAX_MSIX_PER_DEV = 256,KVM_ENOSYS = 1000,KVM_EFAULT = 14,KVM_E2BIG = 7,KVM_EPERM = 1,KVM_HC_VAPIC_POLL_IRQ = 1,KVM_HC_MMU_OP = 2,KVM_HC_FEATURES = 3,KVM_HC_PPC_MAP_MAGIC_PAGE = 4,};
enum MACRO_K_DOWN {K_DOWN = 1536,K_LEFT = 1537,K_RIGHT = 1538,K_UP = 1539,K_SHIFT = 1792,K_CTRL = 1794,K_ALT = 1795,K_ALTGR = 1793,K_SHIFTL = 1796,K_SHIFTR = 1797,K_CTRLL = 1798,K_CTRLR = 1799,K_CAPSSHIFT = 1800,K_ASC0 = 2304,K_ASC1 = 2305,K_ASC2 = 2306,K_ASC3 = 2307,K_ASC4 = 2308,K_ASC5 = 2309,K_ASC6 = 2310,K_ASC7 = 2311,K_ASC8 = 2312,K_ASC9 = 2313,K_HEX0 = 2314,K_HEX1 = 2315,K_HEX2 = 2316,K_HEX3 = 2317,K_HEX4 = 2318,K_HEX5 = 2319,K_HEX6 = 2320,K_HEX7 = 2321,K_HEX8 = 2322,K_HEX9 = 2323,K_HEXa = 2324,K_HEXb = 2325,K_HEXc = 2326,K_HEXd = 2327,K_HEXe = 2328,K_HEXf = 2329,};
enum MACRO_LCRTBS {LCRTBS = 0x1,LPRTERA = 0x2,LCRTERA = 0x4,LTILDE = 0x8,LMDMBUF = 0x10,LLITOUT = 0x20,LTOSTOP = 0x40,LFLUSHO = 0x80,LNOHANG = 0x100,LL001000 = 0x200,LCRTKIL = 0x400,LPASS8 = 0x800,LCTLECH = 0x1000,LPENDIN = 0x2000,LDECCTQ = 0x4000,LNOFLSH = 0x8000,};
enum MACRO_LINKED {LINKED_CMD_COMPLETE = 0xA,LINKED_FLG_CMD_COMPLETE = 0xB,};
enum MACRO_LITTLE {LITTLE_ENDIAN = 1234,BIG_ENDIAN = 4321,PDP_ENDIAN = 3412,};
enum MACRO_LITUSE {LITUSE_ALPHA_ADDR = 0,LITUSE_ALPHA_BASE = 1,LITUSE_ALPHA_BYTOFF = 2,LITUSE_ALPHA_JSR = 3,LITUSE_ALPHA_TLS_GD = 4,LITUSE_ALPHA_TLS_LDM = 5,};
enum MACRO_LOADED {LOADED_HIGH = 1,};
enum MACRO_LOCKED {LOCKED = 1,};
enum MACRO_LPCHAR {LPCHAR = 0x601,};
enum MACRO_LPTIME {LPTIME = 0x602,};
enum MACRO_LPWAIT {LPWAIT = 0x608,};
enum MACRO_MASTER {MASTER_ONLY = 32,};
enum MACRO_MAXINT {MAXINT = 2147483647,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MAX_IQ {MAX_IQ_TIME = 604800,MAX_DQ_TIME = 604800,};
enum MACRO_MAX_LO {MAX_LO_CRYPT = 20,};
enum MACRO_MAX_NR {MAX_NR_KEYMAPS = 256,MAX_NR_OF_USER_KEYMAPS = 256,MAX_NR_FUNC = 256,};
enum MACRO_MEDIUM {MEDIUM_SCAN = 0x38,};
enum MACRO_MININT {MININT = -2147483648,};
enum MACRO_MINIX2 {MINIX2_SUPER_MAGIC = 0x2468,MINIX2_SUPER_MAGIC2 = 0x2478,};
enum MACRO_MINIX3 {MINIX3_SUPER_MAGIC = 0x4D5A,MSDOS_SUPER_MAGIC = 0x4D44,NCP_SUPER_MAGIC = 0x564C,NFS_SUPER_MAGIC = 0x6969,OPENPROM_SUPER_MAGIC = 0x9FA1,QNX4_SUPER_MAGIC = 0x2F,QNX6_SUPER_MAGIC = 0x68191122,REISERFS_SUPER_MAGIC = 0x52654973,SMB_SUPER_MAGIC = 0x517B,CGROUP_SUPER_MAGIC = 0x27E0EB,STACK_END_MAGIC = 0x57AC6E9D,V9FS_MAGIC = 0x1021997,BDEVFS_MAGIC = 0x62646576,BINFMTFS_MAGIC = 0x42494E4D,DEVPTS_SUPER_MAGIC = 0x1CD1,FUTEXFS_SUPER_MAGIC = 0xBAD1DEA,PIPEFS_MAGIC = 0x50495045,PROC_SUPER_MAGIC = 0x9FA0,SOCKFS_MAGIC = 0x534F434B,SYSFS_MAGIC = 0x62656572,USBDEVICE_SUPER_MAGIC = 0x9FA2,MTD_INODE_FS_MAGIC = 0x11307854,ANON_INODE_FS_MAGIC = 0x9041934,};
enum MACRO_MODIFY {MODIFY_LDT_CONTENTS_DATA = 0,MODIFY_LDT_CONTENTS_STACK = 1,MODIFY_LDT_CONTENTS_CODE = 2,};
enum MACRO_MPC_C1 {MPC_C1 = 2,MPC_C2 = 60,};
enum MACRO_MPC_P1 {MPC_P1 = 10,MPC_P2 = 1,MPC_P3 = 0,MPC_P4 = 5,MPC_P5 = 40,MPC_P6 = 160,};
enum MACRO_MREMAP {MREMAP_MAYMOVE = 1,MREMAP_FIXED = 2,};
enum MACRO_MSR_K7 {MSR_K7_EVNTSEL0 = 0xC0010000,MSR_K7_PERFCTR0 = 0xC0010004,MSR_K7_EVNTSEL1 = 0xC0010001,MSR_K7_PERFCTR1 = 0xC0010005,MSR_K7_EVNTSEL2 = 0xC0010002,MSR_K7_PERFCTR2 = 0xC0010006,MSR_K7_EVNTSEL3 = 0xC0010003,MSR_K7_PERFCTR3 = 0xC0010007,MSR_K7_CLK_CTL = 0xC001001B,MSR_K7_HWCR = 0xC0010015,MSR_K7_FID_VID_CTL = 0xC0010041,MSR_K7_FID_VID_STATUS = 0xC0010042,MSR_K6_WHCR = 0xC0000082,MSR_K6_UWCCR = 0xC0000085,MSR_K6_EPMR = 0xC0000086,MSR_K6_PSOR = 0xC0000087,MSR_K6_PFIR = 0xC0000088,MSR_IDT_FCR1 = 0x107,MSR_IDT_FCR2 = 0x108,MSR_IDT_FCR3 = 0x109,MSR_IDT_FCR4 = 0x10A,MSR_IDT_MCR0 = 0x110,MSR_IDT_MCR1 = 0x111,MSR_IDT_MCR2 = 0x112,MSR_IDT_MCR3 = 0x113,MSR_IDT_MCR4 = 0x114,MSR_IDT_MCR5 = 0x115,MSR_IDT_MCR6 = 0x116,MSR_IDT_MCR7 = 0x117,MSR_IDT_MCR_CTRL = 0x120,MSR_VIA_FCR = 0x1107,MSR_VIA_LONGHAUL = 0x110A,MSR_VIA_RNG = 0x110B,MSR_VIA_BCR2 = 0x1147,MSR_TMTA_LONGRUN_CTRL = 0x80868010,MSR_TMTA_LONGRUN_FLAGS = 0x80868011,MSR_TMTA_LRTI_READOUT = 0x80868018,MSR_TMTA_LRTI_VOLT_MHZ = 0x8086801A,MSR_IA32_P5_MC_ADDR = 0x0,MSR_IA32_P5_MC_TYPE = 0x1,MSR_IA32_TSC = 0x10,MSR_IA32_PLATFORM_ID = 0x17,MSR_IA32_EBL_CR_POWERON = 0x2A,MSR_EBC_FREQUENCY_ID = 0x2C,MSR_SMI_COUNT = 0x34,MSR_IA32_FEATURE_CONTROL = 0x3A,MSR_IA32_TSC_ADJUST = 0x3B,};
enum MACRO_MSR_K8 {MSR_K8_TSEG_ADDR = 0xC0010112,};
enum MACRO_MS_MGC {MS_MGC_VAL = 0xC0ED0000,MS_MGC_MSK = 0xFFFF0000,};
enum MACRO_MTBSFM {MTBSFM = 10,};
enum MACRO_MTFSFM {MTFSFM = 11,};
enum MACRO_MTLOAD {MTLOAD = 30,};
enum MACRO_MTLOCK {MTLOCK = 28,};
enum MACRO_MTOFFL {MTOFFL = 7,MTNOP = 8,};
enum MACRO_MTRAS1 {MTRAS1 = 14,};
enum MACRO_MTRAS2 {MTRAS2 = 15,MTRAS3 = 16,};
enum MACRO_MTSEEK {MTSEEK = 22,};
enum MACRO_MTTELL {MTTELL = 23,};
enum MACRO_MTWEOF {MTWEOF = 5,};
enum MACRO_NETROM {NETROM_T1 = 1,NETROM_T2 = 2,NETROM_N2 = 3,NETROM_PACLEN = 5,NETROM_T4 = 6,NETROM_IDLE = 7,NETROM_KILL = 99,NETROM_NEIGH = 0,NETROM_NODE = 1,};
enum MACRO_NET_DM {NET_DM_CFG_VERSION = 0,NET_DM_CFG_ALERT_COUNT = 1,NET_DM_CFG_ALERT_DELAY = 2,NET_DM_CFG_MAX = 3,NET_DM_GRP_ALERT = 1,};
enum MACRO_NFACCT {NFACCT_NAME_MAX = 32,};
enum MACRO_NFC_DN {NFC_DN_SRC = 0x1,NFC_DN_DST = 0x2,NFC_DN_IF_IN = 0x4,NFC_DN_IF_OUT = 0x8,};
enum MACRO_NFC_IP {NFC_IP_SRC = 0x1,NFC_IP_DST = 0x2,NFC_IP_IF_IN = 0x4,NFC_IP_IF_OUT = 0x8,NFC_IP_TOS = 0x10,NFC_IP_PROTO = 0x20,NFC_IP_OPTIONS = 0x40,NFC_IP_FRAG = 0x80,NFC_IP_TCPFLAGS = 0x100,NFC_IP_SRC_PT = 0x200,NFC_IP_DST_PT = 0x400,NFC_IP_PROTO_UNKNOWN = 0x2000,};
enum MACRO_NFSDBG {NFSDBG_VFS = 0x1,NFSDBG_DIRCACHE = 0x2,NFSDBG_LOOKUPCACHE = 0x4,NFSDBG_PAGECACHE = 0x8,NFSDBG_PROC = 0x10,NFSDBG_XDR = 0x20,NFSDBG_FILE = 0x40,NFSDBG_ROOT = 0x80,NFSDBG_CALLBACK = 0x100,NFSDBG_CLIENT = 0x200,NFSDBG_MOUNT = 0x400,NFSDBG_FSCACHE = 0x800,NFSDBG_PNFS = 0x1000,NFSDBG_PNFS_LD = 0x2000,NFSDBG_STATE = 0x4000,NFSDBG_ALL = 0xFFFF,};
enum MACRO_NFSEXP {NFSEXP_READONLY = 0x1,NFSEXP_INSECURE_PORT = 0x2,NFSEXP_ROOTSQUASH = 0x4,NFSEXP_ALLSQUASH = 0x8,NFSEXP_ASYNC = 0x10,NFSEXP_GATHERED_WRITES = 0x20,NFSEXP_NOHIDE = 0x200,NFSEXP_NOSUBTREECHECK = 0x400,NFSEXP_NOAUTHNLM = 0x800,NFSEXP_MSNFS = 0x1000,NFSEXP_FSID = 0x2000,NFSEXP_CROSSMOUNT = 0x4000,NFSEXP_NOACL = 0x8000,NFSEXP_V4ROOT = 0x10000,NFSEXP_ALLFLAGS = 0x17E3F,NFSEXP_SECINFO_FLAGS = 0xF,};
enum MACRO_NFULNL {NFULNL_COPY_NONE = 0x0,NFULNL_COPY_META = 0x1,NFULNL_COPY_PACKET = 0x2,NFULNL_CFG_F_SEQ = 0x1,NFULNL_CFG_F_SEQ_GLOBAL = 0x2,};
enum MACRO_NF_IP6 {NF_IP6_PRE_ROUTING = 0,NF_IP6_LOCAL_IN = 1,NF_IP6_FORWARD = 2,NF_IP6_LOCAL_OUT = 3,NF_IP6_POST_ROUTING = 4,NF_IP6_NUMHOOKS = 5,};
enum MACRO_NF_NAT {NF_NAT_RANGE_MAP_IPS = 1,NF_NAT_RANGE_PROTO_SPECIFIED = 2,NF_NAT_RANGE_PROTO_RANDOM = 4,NF_NAT_RANGE_PERSISTENT = 8,};
enum MACRO_NMAGIC {NMAGIC = 0x108,};
enum MACRO_NOTIFY {NOTIFY_NONE = 0,NOTIFY_WOKENUP = 1,NOTIFY_REMOVED = 2,NOTIFY_COOKIE_LEN = 32,};
enum MACRO_NPROTO {NPROTO = 40,};
enum MACRO_NR_BRL {NR_BRL = 11,};
enum MACRO_NR_PAD {NR_PAD = 20,};
enum MACRO_NT_GNU {NT_GNU_ABI_TAG = 1,};
enum MACRO_OLD_DT {OLD_DT_LOOS = 0x60000000,OLD_DT_HIOS = 0x6FFFFFFF,};
enum MACRO_OMAGIC {OMAGIC = 0x107,};
enum MACRO_OMAPFB {OMAPFB_SYNC_GFX = 20261,OMAPFB_VSYNC = 20262,OMAPFB_WAITFORVSYNC = 20281,OMAPFB_WAITFORGO = 20284,OMAPFB_CAPS_GENERIC_MASK = 4095,OMAPFB_CAPS_LCDC_MASK = 16773120,OMAPFB_CAPS_PANEL_MASK = -16777216,OMAPFB_CAPS_MANUAL_UPDATE = 4096,OMAPFB_CAPS_TEARSYNC = 8192,OMAPFB_CAPS_PLANE_RELOCATE_MEM = 16384,OMAPFB_CAPS_PLANE_SCALE = 32768,OMAPFB_CAPS_WINDOW_PIXEL_DOUBLE = 65536,OMAPFB_CAPS_WINDOW_SCALE = 131072,OMAPFB_CAPS_WINDOW_OVERLAY = 262144,OMAPFB_CAPS_WINDOW_ROTATE = 524288,OMAPFB_CAPS_SET_BACKLIGHT = 16777216,OMAPFB_FORMAT_MASK = 255,OMAPFB_FORMAT_FLAG_DOUBLE = 256,OMAPFB_FORMAT_FLAG_TEARSYNC = 512,OMAPFB_FORMAT_FLAG_FORCE_VSYNC = 1024,OMAPFB_FORMAT_FLAG_ENABLE_OVERLAY = 2048,OMAPFB_FORMAT_FLAG_DISABLE_OVERLAY = 4096,OMAPFB_MEMTYPE_SDRAM = 0,OMAPFB_MEMTYPE_SRAM = 1,OMAPFB_MEMTYPE_MAX = 1,OMAPFB_MEM_IDX_ENABLED = 128,OMAPFB_MEM_IDX_MASK = 127,};
enum MACRO_OPTION {OPTION_ARG_OPTIONAL = 0x1,OPTION_HIDDEN = 0x2,OPTION_ALIAS = 0x4,OPTION_DOC = 0x8,OPTION_NO_USAGE = 0x10,};
enum MACRO_PA0HZP {PA0HZP = 0x0,EAGLE = 0x1,PC100 = 0x2,PRIMUS = 0x4,DRSI = 0x8,BAYCOM = 0x10,};
enum MACRO_PACKET {PACKET_HOST = 0,PACKET_BROADCAST = 1,PACKET_MULTICAST = 2,PACKET_OTHERHOST = 3,PACKET_OUTGOING = 4,PACKET_LOOPBACK = 5,PACKET_FASTROUTE = 6,PACKET_ADD_MEMBERSHIP = 1,PACKET_DROP_MEMBERSHIP = 2,PACKET_RECV_OUTPUT = 3,PACKET_RX_RING = 5,PACKET_STATISTICS = 6,PACKET_MR_MULTICAST = 0,PACKET_MR_PROMISC = 1,PACKET_MR_ALLMULTI = 2,};
enum MACRO_PARITY {PARITY_DEFAULT = 0,PARITY_NONE = 1,PARITY_CRC16_PR0 = 2,PARITY_CRC16_PR1 = 3,PARITY_CRC16_PR0_CCITT = 4,PARITY_CRC16_PR1_CCITT = 5,PARITY_CRC32_PR0_CCITT = 6,PARITY_CRC32_PR1_CCITT = 7,};
enum MACRO_PCIIOC {PCIIOC_BASE = 1346586880,PCIIOC_CONTROLLER = 1346586880,PCIIOC_MMAP_IS_IO = 1346586881,PCIIOC_MMAP_IS_MEM = 1346586882,PCIIOC_WRITE_COMBINE = 1346586883,};
enum MACRO_PF_ARM {PF_ARM_SB = 0x10000000,PF_ARM_PI = 0x20000000,PF_ARM_ABS = 0x40000000,};
enum MACRO_PF_KEY {PF_KEY_V2 = 2,};
enum MACRO_PHONET {PHONET_MIN_MTU = 6,PHONET_MAX_MTU = 65541,PHONET_DEV_MTU = 65541,};
enum MACRO_PNADDR {PNADDR_ANY = 0,PNADDR_BROADCAST = 252,};
enum MACRO_PNPIPE {PNPIPE_ENCAP = 1,PNPIPE_IFINDEX = 2,PNPIPE_HANDLE = 3,PNPIPE_INITSTATE = 4,};
enum MACRO_PNPORT {PNPORT_RESOURCE_ROUTING = 0,};
enum MACRO_POLLIN {POLLIN = 0x1,POLLPRI = 0x2,POLLOUT = 0x4,POLLRDNORM = 0x40,POLLRDBAND = 0x80,POLLWRNORM = 0x100,POLLWRBAND = 0x200,POLLMSG = 0x400,POLLREMOVE = 0x1000,POLLRDHUP = 0x2000,};
enum MACRO_PPEXCL {PPEXCL = 0x708F,};
enum MACRO_PRELIM {PRELIM = 1,COMPLETE = 2,};
enum MACRO_PTRACE {PTRACE_OLDSETOPTIONS = 21,PTRACE_GET_THREAD_AREA = 25,PTRACE_SET_THREAD_AREA = 26,PTRACE_ARCH_PRCTL = 30,PTRACE_SYSEMU = 31,PTRACE_SYSEMU_SINGLESTEP = 32,PTRACE_SINGLEBLOCK = 33,};
enum MACRO_QMAGIC {QMAGIC = 0xCC,CMAGIC = 0x111,};
enum MACRO_READ_6 {READ_6 = 0x8,};
enum MACRO_RECORD {RECORD_MAJOR_VERSION = 1,RECORD_MINOR_VERSION = 13,RECORD_LOWEST_MAJOR_VERSION = 1,RECORD_LOWEST_MINOR_VERSION = 12,};
enum MACRO_RELOAD {RELOAD = 301,};
enum MACRO_RENDER {RENDER_MAJOR = 0,RENDER_MINOR = 11,};
enum MACRO_REPORT {REPORT_MOUSE_POSITION = 134217728,};
enum MACRO_RETURN {RETURN_RESULT = 128,};
enum MACRO_REZERO {REZERO_UNIT = 0x1,};
enum MACRO_RFKILL {RFKILL_STATE_SOFT_BLOCKED = 0,RFKILL_STATE_UNBLOCKED = 1,RFKILL_STATE_HARD_BLOCKED = 2,RFKILL_EVENT_SIZE_V1 = 8,RFKILL_IOC_MAGIC = 82,RFKILL_IOC_NOINPUT = 1,RFKILL_IOCTL_NOINPUT = 20993,};
enum MACRO_RIPCMD {RIPCMD_REQUEST = 1,RIPCMD_RESPONSE = 2,RIPCMD_TRACEON = 3,RIPCMD_TRACEOFF = 4,RIPCMD_MAX = 5,};
enum MACRO_RLIMIT {RLIMIT_LOCKS = 10,RLIMIT_SIGPENDING = 11,RLIMIT_MSGQUEUE = 12,RLIMIT_NICE = 13,RLIMIT_RTPRIO = 14,RLIMIT_RTTIME = 15,};
enum MACRO_ROBUST {ROBUST_LIST_LIMIT = 2048,};
enum MACRO_RPCDBG {RPCDBG_XPRT = 0x1,RPCDBG_CALL = 0x2,RPCDBG_DEBUG = 0x4,RPCDBG_NFS = 0x8,RPCDBG_AUTH = 0x10,RPCDBG_BIND = 0x20,RPCDBG_SCHED = 0x40,RPCDBG_TRANS = 0x80,RPCDBG_SVCXPRT = 0x100,RPCDBG_SVCDSP = 0x200,RPCDBG_MISC = 0x400,RPCDBG_CACHE = 0x800,RPCDBG_ALL = 0x7FFF,};
enum MACRO_RTMGRP {RTMGRP_LINK = 1,RTMGRP_NOTIFY = 2,RTMGRP_NEIGH = 4,RTMGRP_TC = 8,RTMGRP_IPV4_IFADDR = 16,RTMGRP_IPV4_MROUTE = 32,RTMGRP_IPV4_ROUTE = 64,RTMGRP_IPV4_RULE = 128,RTMGRP_IPV6_IFADDR = 256,RTMGRP_IPV6_MROUTE = 512,RTMGRP_IPV6_ROUTE = 1024,RTMGRP_IPV6_IFINFO = 2048,RTMGRP_DECnet_IFADDR = 4096,RTMGRP_DECnet_ROUTE = 16384,RTMGRP_IPV6_PREFIX = 131072,};
enum MACRO_RTPROT {RTPROT_UNSPEC = 0,RTPROT_REDIRECT = 1,RTPROT_KERNEL = 2,RTPROT_BOOT = 3,RTPROT_STATIC = 4,RTPROT_GATED = 8,RTPROT_RA = 9,RTPROT_MRT = 10,RTPROT_ZEBRA = 11,RTPROT_BIRD = 12,RTPROT_DNROUTED = 13,RTPROT_XORP = 14,RTPROT_NTK = 15,RTPROT_DHCP = 16,RTPROT_MROUTED = 17,};
enum MACRO_RUSERS {RUSERS_MAXUSERLEN = 32,RUSERS_MAXLINELEN = 32,RUSERS_MAXHOSTLEN = 257,RUSERS_EMPTY = 0,RUSERS_RUN_LVL = 1,RUSERS_BOOT_TIME = 2,RUSERS_OLD_TIME = 3,RUSERS_NEW_TIME = 4,RUSERS_INIT_PROCESS = 5,RUSERS_LOGIN_PROCESS = 6,RUSERS_USER_PROCESS = 7,RUSERS_DEAD_PROCESS = 8,RUSERS_ACCOUNTING = 9,};
enum MACRO_RX_CLS {RX_CLS_FLOW_DISC = 0xFFFFFFFF,RX_CLS_LOC_SPECIAL = 0x80000000,RX_CLS_LOC_ANY = 0xFFFFFFFF,RX_CLS_LOC_FIRST = 0xFFFFFFFE,RX_CLS_LOC_LAST = 0xFFFFFFFD,};
enum MACRO_RX_RTR {RX_RTR_FRAME = 0x400,};
enum MACRO_R_IA64 {R_IA64_NONE = 0x0,R_IA64_IMM14 = 0x21,R_IA64_IMM22 = 0x22,R_IA64_IMM64 = 0x23,R_IA64_DIR32MSB = 0x24,R_IA64_DIR32LSB = 0x25,R_IA64_DIR64MSB = 0x26,R_IA64_DIR64LSB = 0x27,R_IA64_GPREL22 = 0x2A,R_IA64_GPREL64I = 0x2B,R_IA64_GPREL32MSB = 0x2C,R_IA64_GPREL32LSB = 0x2D,R_IA64_GPREL64MSB = 0x2E,R_IA64_GPREL64LSB = 0x2F,R_IA64_LTOFF22 = 0x32,R_IA64_LTOFF64I = 0x33,R_IA64_PLTOFF22 = 0x3A,R_IA64_PLTOFF64I = 0x3B,R_IA64_PLTOFF64MSB = 0x3E,R_IA64_PLTOFF64LSB = 0x3F,R_IA64_FPTR64I = 0x43,R_IA64_FPTR32MSB = 0x44,R_IA64_FPTR32LSB = 0x45,R_IA64_FPTR64MSB = 0x46,R_IA64_FPTR64LSB = 0x47,R_IA64_PCREL60B = 0x48,R_IA64_PCREL21B = 0x49,R_IA64_PCREL21M = 0x4A,R_IA64_PCREL21F = 0x4B,R_IA64_PCREL32MSB = 0x4C,R_IA64_PCREL32LSB = 0x4D,R_IA64_PCREL64MSB = 0x4E,R_IA64_PCREL64LSB = 0x4F,R_IA64_LTOFF_FPTR22 = 0x52,R_IA64_LTOFF_FPTR64I = 0x53,R_IA64_LTOFF_FPTR32MSB = 0x54,R_IA64_LTOFF_FPTR32LSB = 0x55,R_IA64_LTOFF_FPTR64MSB = 0x56,R_IA64_LTOFF_FPTR64LSB = 0x57,R_IA64_SEGREL32MSB = 0x5C,R_IA64_SEGREL32LSB = 0x5D,R_IA64_SEGREL64MSB = 0x5E,R_IA64_SEGREL64LSB = 0x5F,R_IA64_SECREL32MSB = 0x64,R_IA64_SECREL32LSB = 0x65,R_IA64_SECREL64MSB = 0x66,R_IA64_SECREL64LSB = 0x67,R_IA64_REL32MSB = 0x6C,R_IA64_REL32LSB = 0x6D,R_IA64_REL64MSB = 0x6E,R_IA64_REL64LSB = 0x6F,R_IA64_LTV32MSB = 0x74,R_IA64_LTV32LSB = 0x75,R_IA64_LTV64MSB = 0x76,R_IA64_LTV64LSB = 0x77,R_IA64_PCREL21BI = 0x79,R_IA64_PCREL22 = 0x7A,R_IA64_PCREL64I = 0x7B,R_IA64_IPLTMSB = 0x80,R_IA64_IPLTLSB = 0x81,R_IA64_COPY = 0x84,R_IA64_SUB = 0x85,R_IA64_LTOFF22X = 0x86,R_IA64_LDXMOV = 0x87,R_IA64_TPREL14 = 0x91,R_IA64_TPREL22 = 0x92,R_IA64_TPREL64I = 0x93,R_IA64_TPREL64MSB = 0x96,R_IA64_TPREL64LSB = 0x97,R_IA64_LTOFF_TPREL22 = 0x9A,R_IA64_DTPMOD64MSB = 0xA6,R_IA64_DTPMOD64LSB = 0xA7,R_IA64_LTOFF_DTPMOD22 = 0xAA,R_IA64_DTPREL14 = 0xB1,R_IA64_DTPREL22 = 0xB2,R_IA64_DTPREL64I = 0xB3,R_IA64_DTPREL32MSB = 0xB4,R_IA64_DTPREL32LSB = 0xB5,R_IA64_DTPREL64MSB = 0xB6,R_IA64_DTPREL64LSB = 0xB7,R_IA64_LTOFF_DTPREL22 = 0xBA,};
enum MACRO_R_MIPS {R_MIPS_NONE = 0,R_MIPS_16 = 1,R_MIPS_32 = 2,R_MIPS_REL32 = 3,R_MIPS_26 = 4,R_MIPS_HI16 = 5,R_MIPS_LO16 = 6,R_MIPS_GPREL16 = 7,R_MIPS_LITERAL = 8,R_MIPS_GOT16 = 9,R_MIPS_PC16 = 10,R_MIPS_CALL16 = 11,R_MIPS_GPREL32 = 12,R_MIPS_SHIFT5 = 16,R_MIPS_SHIFT6 = 17,R_MIPS_64 = 18,R_MIPS_GOT_DISP = 19,R_MIPS_GOT_PAGE = 20,R_MIPS_GOT_OFST = 21,R_MIPS_GOT_HI16 = 22,R_MIPS_GOT_LO16 = 23,R_MIPS_SUB = 24,R_MIPS_INSERT_A = 25,R_MIPS_INSERT_B = 26,R_MIPS_DELETE = 27,R_MIPS_HIGHER = 28,R_MIPS_HIGHEST = 29,R_MIPS_CALL_HI16 = 30,R_MIPS_CALL_LO16 = 31,R_MIPS_SCN_DISP = 32,R_MIPS_REL16 = 33,R_MIPS_ADD_IMMEDIATE = 34,R_MIPS_PJUMP = 35,R_MIPS_RELGOT = 36,R_MIPS_JALR = 37,R_MIPS_TLS_DTPMOD32 = 38,R_MIPS_TLS_DTPREL32 = 39,R_MIPS_TLS_DTPMOD64 = 40,R_MIPS_TLS_DTPREL64 = 41,R_MIPS_TLS_GD = 42,R_MIPS_TLS_LDM = 43,R_MIPS_TLS_DTPREL_HI16 = 44,R_MIPS_TLS_DTPREL_LO16 = 45,R_MIPS_TLS_GOTTPREL = 46,R_MIPS_TLS_TPREL32 = 47,R_MIPS_TLS_TPREL64 = 48,R_MIPS_TLS_TPREL_HI16 = 49,R_MIPS_TLS_TPREL_LO16 = 50,R_MIPS_GLOB_DAT = 51,R_MIPS_COPY = 126,R_MIPS_JUMP_SLOT = 127,R_MIPS_NUM = 128,};
enum MACRO_SAMPLE {SAMPLE_TYPE_BASIC = 0x10,SAMPLE_TYPE_GUS = 0x10,SAMPLE_TYPE_WAVEFRONT = 0x11,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SEARCH {SEARCH_HIGH = 0x30,SEARCH_EQUAL = 0x31,SEARCH_LOW = 0x32,};
enum MACRO_SECBIT {SECBIT_NOROOT = 1,SECBIT_NOROOT_LOCKED = 2,};
enum MACRO_SECTOR {SECTOR_FREE = 0xFF,SECTOR_USED = 0x55,SECTOR_IGNORE = 0x11,SECTOR_DELETED = 0x0,};
enum MACRO_SECURE {SECURE_NOROOT = 0,SECURE_NOROOT_LOCKED = 1,};
enum MACRO_SEEK_6 {SEEK_6 = 0xB,};
enum MACRO_SERIAL {SERIAL_IO_PORT = 0,SERIAL_IO_HUB6 = 1,SERIAL_IO_MEM = 2,};
enum MACRO_SETALL {SETALL = 17,};
enum MACRO_SHAPER {SHAPER_QLEN = 10,SHAPER_LATENCY = 500,SHAPER_MAXSLIP = 2,SHAPER_BURST = 2,SHAPER_SET_DEV = 1,SHAPER_SET_SPEED = 2,SHAPER_GET_DEV = 3,SHAPER_GET_SPEED = 4,};
enum MACRO_SHF_IA {SHF_IA_64_SHORT = 0x10000000,SHF_IA_64_NORECOV = 0x20000000,};
enum MACRO_SHMLBA {SHMLBA = 4096,};
enum MACRO_SHT_IA {SHT_IA_64_EXT = 1879048192,SHT_IA_64_UNWIND = 1879048193,};
enum MACRO_SIGNAL {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGABRT = 6,SIGIOT = 6,SIGBUS = 7,SIGFPE = 8,SIGKILL = 9,SIGUSR1 = 10,SIGSEGV = 11,SIGUSR2 = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGSTKFLT = 16,SIGCHLD = 17,SIGCONT = 18,SIGSTOP = 19,SIGTSTP = 20,SIGTTIN = 21,SIGTTOU = 22,SIGURG = 23,SIGXCPU = 24,SIGXFSZ = 25,SIGVTALRM = 26,SIGPROF = 27,SIGWINCH = 28,SIGIO = 29,SIGPWR = 30,SIGSYS = 31,SIGUNUSED = 31,_NSIG = 65,SIGCLD = 17,SIGPOLL = 29,};
enum MACRO_SIZEOF {SIZEOF_DOUBLE = 8,SIZEOF_FLOAT = 4,SIZEOF_FPOS_T = 16,SIZEOF_INT = 4,SIZEOF_LONG = 4,SIZEOF_LONG_DOUBLE = 12,SIZEOF_LONG_LONG = 8,SIZEOF_OFF_T = 8,SIZEOF_PID_T = 4,SIZEOF_PTHREAD_T = 4,SIZEOF_SHORT = 2,SIZEOF_SIZE_T = 4,SIZEOF_TIME_T = 4,SIZEOF_UINTPTR_T = 4,SIZEOF_VOID_P = 4,SIZEOF_WCHAR_T = 4,SIZEOF__BOOL = 1,};
enum MACRO_SNDCTL {SNDCTL_SEQ_RESET = 20736,SNDCTL_SEQ_SYNC = 20737,SNDCTL_SEQ_PANIC = 20753,SNDCTL_TMR_START = 21506,SNDCTL_TMR_STOP = 21507,SNDCTL_TMR_CONTINUE = 21508,};
enum MACRO_SOL_IP {SOL_IP = 0,};
enum MACRO_SONYPI {SONYPI_EVENT_IGNORE = 0,SONYPI_EVENT_JOGDIAL_DOWN = 1,SONYPI_EVENT_JOGDIAL_UP = 2,SONYPI_EVENT_JOGDIAL_DOWN_PRESSED = 3,SONYPI_EVENT_JOGDIAL_UP_PRESSED = 4,SONYPI_EVENT_JOGDIAL_PRESSED = 5,SONYPI_EVENT_JOGDIAL_RELEASED = 6,SONYPI_EVENT_CAPTURE_PRESSED = 7,SONYPI_EVENT_CAPTURE_RELEASED = 8,SONYPI_EVENT_CAPTURE_PARTIALPRESSED = 9,SONYPI_EVENT_CAPTURE_PARTIALRELEASED = 10,SONYPI_EVENT_FNKEY_ESC = 11,SONYPI_EVENT_FNKEY_F1 = 12,SONYPI_EVENT_FNKEY_F2 = 13,SONYPI_EVENT_FNKEY_F3 = 14,SONYPI_EVENT_FNKEY_F4 = 15,SONYPI_EVENT_FNKEY_F5 = 16,SONYPI_EVENT_FNKEY_F6 = 17,SONYPI_EVENT_FNKEY_F7 = 18,SONYPI_EVENT_FNKEY_F8 = 19,SONYPI_EVENT_FNKEY_F9 = 20,SONYPI_EVENT_FNKEY_F10 = 21,SONYPI_EVENT_FNKEY_F11 = 22,SONYPI_EVENT_FNKEY_F12 = 23,SONYPI_EVENT_FNKEY_1 = 24,SONYPI_EVENT_FNKEY_2 = 25,SONYPI_EVENT_FNKEY_D = 26,SONYPI_EVENT_FNKEY_E = 27,SONYPI_EVENT_FNKEY_F = 28,SONYPI_EVENT_FNKEY_S = 29,SONYPI_EVENT_FNKEY_B = 30,SONYPI_EVENT_BLUETOOTH_PRESSED = 31,SONYPI_EVENT_PKEY_P1 = 32,SONYPI_EVENT_PKEY_P2 = 33,SONYPI_EVENT_PKEY_P3 = 34,SONYPI_EVENT_BACK_PRESSED = 35,SONYPI_EVENT_LID_CLOSED = 36,SONYPI_EVENT_LID_OPENED = 37,SONYPI_EVENT_BLUETOOTH_ON = 38,SONYPI_EVENT_BLUETOOTH_OFF = 39,SONYPI_EVENT_HELP_PRESSED = 40,SONYPI_EVENT_FNKEY_ONLY = 41,SONYPI_EVENT_JOGDIAL_FAST_DOWN = 42,SONYPI_EVENT_JOGDIAL_FAST_UP = 43,SONYPI_EVENT_JOGDIAL_FAST_DOWN_PRESSED = 44,SONYPI_EVENT_JOGDIAL_FAST_UP_PRESSED = 45,SONYPI_EVENT_JOGDIAL_VFAST_DOWN = 46,SONYPI_EVENT_JOGDIAL_VFAST_UP = 47,SONYPI_EVENT_JOGDIAL_VFAST_DOWN_PRESSED = 48,SONYPI_EVENT_JOGDIAL_VFAST_UP_PRESSED = 49,SONYPI_EVENT_ZOOM_PRESSED = 50,SONYPI_EVENT_THUMBPHRASE_PRESSED = 51,SONYPI_EVENT_MEYE_FACE = 52,SONYPI_EVENT_MEYE_OPPOSITE = 53,SONYPI_EVENT_MEMORYSTICK_INSERT = 54,SONYPI_EVENT_MEMORYSTICK_EJECT = 55,SONYPI_EVENT_ANYBUTTON_RELEASED = 56,SONYPI_EVENT_BATTERY_INSERT = 57,SONYPI_EVENT_BATTERY_REMOVE = 58,SONYPI_EVENT_FNKEY_RELEASED = 59,SONYPI_EVENT_WIRELESS_ON = 60,SONYPI_EVENT_WIRELESS_OFF = 61,SONYPI_EVENT_ZOOM_IN_PRESSED = 62,SONYPI_EVENT_ZOOM_OUT_PRESSED = 63,SONYPI_EVENT_CD_EJECT_PRESSED = 64,SONYPI_EVENT_MODEKEY_PRESSED = 65,SONYPI_EVENT_PKEY_P4 = 66,SONYPI_EVENT_PKEY_P5 = 67,SONYPI_EVENT_SETTINGKEY_PRESSED = 68,SONYPI_EVENT_VOLUME_INC_PRESSED = 69,SONYPI_EVENT_VOLUME_DEC_PRESSED = 70,SONYPI_EVENT_BRIGHTNESS_PRESSED = 71,SONYPI_EVENT_MEDIA_PRESSED = 72,SONYPI_EVENT_VENDOR_PRESSED = 73,SONYPI_BFLAGS_B1 = 1,SONYPI_BFLAGS_B2 = 2,SONYPI_BFLAGS_AC = 4,};
enum MACRO_SOPASS {SOPASS_MAX = 6,};
enum MACRO_SOURCE {_ISOC95_SOURCE = 1,_ISOC99_SOURCE = 1,_ISOC11_SOURCE = 1,_POSIX_SOURCE = 1,_POSIX_C_SOURCE = 200112,_XOPEN_SOURCE = 600,};
enum MACRO_SPLICE {SPLICE_F_MOVE = 1,SPLICE_F_NONBLOCK = 2,SPLICE_F_MORE = 4,SPLICE_F_GIFT = 8,};
enum MACRO_STATUS {STATUS_MASK = 0x3E,};
enum MACRO_SUPPLY {SUPPLY_INTERVAL = 30,};
enum MACRO_TABDLY {TABDLY = 0x1800,};
enum MACRO_TANDEM {TANDEM = 0x1,CBREAK = 0x2,LCASE = 0x4,CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,};
enum MACRO_TCFLSH {TCFLSH = 0x540B,};
enum MACRO_TCF_EM {TCF_EM_REL_END = 0,TCF_EM_REL_AND = 1,TCF_EM_REL_OR = 2,TCF_EM_INVERT = 4,TCF_EM_SIMPLE = 8,TCF_EM_REL_MASK = 3,TCF_EM_CONTAINER = 0,TCF_EM_CMP = 1,TCF_EM_NBYTE = 2,TCF_EM_U32 = 3,TCF_EM_META = 4,TCF_EM_TEXT = 5,TCF_EM_VLAN = 6,TCF_EM_CANID = 7,TCF_EM_IPSET = 8,TCF_EM_MAX = 8,};
enum MACRO_TCGETA {TCGETA = 0x5405,};
enum MACRO_TCGETS {TCGETS = 0x5401,};
enum MACRO_TCGETX {TCGETX = 0x5432,};
enum MACRO_TCOOFF {TCOOFF = 0,TCOON = 1,TCIOFF = 2,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,};
enum MACRO_TCSBRK {TCSBRK = 0x5409,};
enum MACRO_TCSETA {TCSETA = 0x5406,};
enum MACRO_TCSETS {TCSETS = 0x5402,};
enum MACRO_TCSETX {TCSETX = 0x5433,};
enum MACRO_TCXONC {TCXONC = 0x540A,};
enum MACRO_TC_ACT {TC_ACT_UNSPEC = -1,TC_ACT_OK = 0,TC_ACT_RECLASSIFY = 1,TC_ACT_SHOT = 2,TC_ACT_PIPE = 3,TC_ACT_STOLEN = 4,TC_ACT_QUEUED = 5,TC_ACT_REPEAT = 6,TC_ACT_JUMP = 268435456,TC_POLICE_UNSPEC = -1,TC_POLICE_OK = 0,TC_POLICE_RECLASSIFY = 1,TC_POLICE_SHOT = 2,TC_POLICE_PIPE = 3,TC_U32_UNSPEC = 0,TC_U32_ROOT = -1048576,TC_U32_TERMINAL = 1,TC_U32_OFFSET = 2,TC_U32_VAROFFSET = 4,TC_U32_EAT = 8,TC_U32_MAXDEPTH = 8,};
enum MACRO_TC_CBQ {TC_CBQ_OVL_CLASSIC = 0,TC_CBQ_OVL_DELAY = 1,TC_CBQ_OVL_LOWPRIO = 2,TC_CBQ_OVL_DROP = 3,TC_CBQ_OVL_RCLASSIC = 4,};
enum MACRO_TC_HTB {TC_HTB_NUMPRIO = 8,TC_HTB_MAXDEPTH = 8,TC_HTB_PROTOVER = 3,TC_CBQ_MAXPRIO = 8,TC_CBQ_MAXLEVEL = 8,TC_CBQ_DEF_EWMA = 5,};
enum MACRO_TC_RED {TC_RED_ECN = 1,TC_RED_HARDDROP = 2,TC_RED_ADAPTATIVE = 4,};
enum MACRO_TELCMD {TELCMD_FIRST = 236,TELCMD_LAST = 255,};
enum MACRO_TELOPT {TELOPT_BINARY = 0,TELOPT_ECHO = 1,TELOPT_RCP = 2,TELOPT_SGA = 3,TELOPT_NAMS = 4,TELOPT_STATUS = 5,TELOPT_TM = 6,TELOPT_RCTE = 7,TELOPT_NAOL = 8,TELOPT_NAOP = 9,TELOPT_NAOCRD = 10,TELOPT_NAOHTS = 11,TELOPT_NAOHTD = 12,TELOPT_NAOFFD = 13,TELOPT_NAOVTS = 14,TELOPT_NAOVTD = 15,TELOPT_NAOLFD = 16,TELOPT_XASCII = 17,TELOPT_LOGOUT = 18,TELOPT_BM = 19,TELOPT_DET = 20,TELOPT_SUPDUP = 21,TELOPT_SUPDUPOUTPUT = 22,TELOPT_SNDLOC = 23,TELOPT_TTYPE = 24,TELOPT_EOR = 25,TELOPT_TUID = 26,TELOPT_OUTMRK = 27,TELOPT_TTYLOC = 28,TELOPT_3270REGIME = 29,TELOPT_X3PAD = 30,TELOPT_NAWS = 31,TELOPT_TSPEED = 32,TELOPT_LFLOW = 33,TELOPT_LINEMODE = 34,TELOPT_XDISPLOC = 35,TELOPT_OLD_ENVIRON = 36,TELOPT_AUTHENTICATION = 37,TELOPT_ENCRYPT = 38,TELOPT_NEW_ENVIRON = 39,TELOPT_EXOPL = 255,};
enum MACRO_TEST_J {TEST_J = 1,TEST_K = 2,TEST_SE0_NAK = 3,TEST_PACKET = 4,TEST_FORCE_EN = 5,};
enum MACRO_TGEXEC {TGEXEC = 0x8,};
enum MACRO_TGREAD {TGREAD = 0x20,};
enum MACRO_TOEXEC {TOEXEC = 0x1,REGTYPE = 0x30,};
enum MACRO_TOREAD {TOREAD = 0x4,};
enum MACRO_TOSTOP {TOSTOP = 0x400000,};
enum MACRO_TR_RII {TR_RII = 0x80,TR_RCF_DIR_BIT = 0x80,TR_RCF_LEN_MASK = 0x1F00,TR_RCF_BROADCAST = 0x8000,TR_RCF_LIMITED_BROADCAST = 0xC000,TR_RCF_FRAME2K = 0x20,TR_RCF_BROADCAST_MASK = 0xC000,TR_MAXRIFLEN = 0x12,};
enum MACRO_TUEXEC {TUEXEC = 0x40,};
enum MACRO_TUREAD {TUREAD = 0x100,};
enum MACRO_UAC_AS {UAC_AS_GENERAL = 0x1,UAC_FORMAT_TYPE = 0x2,UAC_FORMAT_SPECIFIC = 0x3,UAC_PROCESS_UNDEFINED = 0x0,UAC_PROCESS_UP_DOWNMIX = 0x1,UAC_PROCESS_DOLBY_PROLOGIC = 0x2,UAC_PROCESS_STEREO_EXTENDER = 0x3,UAC_PROCESS_REVERB = 0x4,UAC_PROCESS_CHORUS = 0x5,UAC_PROCESS_DYN_RANGE_COMP = 0x6,UAC_EP_GENERAL = 0x1,UAC_SET_ = 0x0,UAC_GET_ = 0x80,UAC__CUR = 0x1,UAC__MIN = 0x2,UAC__MAX = 0x3,UAC__RES = 0x4,UAC__MEM = 0x5,UAC_SET_CUR = 0x1,UAC_GET_CUR = 0x81,UAC_SET_MIN = 0x2,UAC_GET_MIN = 0x82,UAC_SET_MAX = 0x3,UAC_GET_MAX = 0x83,UAC_SET_RES = 0x4,UAC_GET_RES = 0x84,UAC_SET_MEM = 0x5,UAC_GET_MEM = 0x85,UAC_GET_STAT = 0xFF,UAC_TERM_COPY_PROTECT = 0x1,UAC_FU_MUTE = 0x1,UAC_FU_VOLUME = 0x2,UAC_FU_BASS = 0x3,UAC_FU_MID = 0x4,UAC_FU_TREBLE = 0x5,UAC_FU_GRAPHIC_EQUALIZER = 0x6,UAC_FU_AUTOMATIC_GAIN = 0x7,UAC_FU_DELAY = 0x8,UAC_FU_BASS_BOOST = 0x9,UAC_FU_LOUDNESS = 0xA,UAC_UD_ENABLE = 0x1,UAC_UD_MODE_SELECT = 0x2,UAC_DP_ENABLE = 0x1,UAC_DP_MODE_SELECT = 0x2,UAC_3D_ENABLE = 0x1,UAC_3D_SPACE = 0x2,UAC_REVERB_ENABLE = 0x1,UAC_REVERB_LEVEL = 0x2,UAC_REVERB_TIME = 0x3,UAC_REVERB_FEEDBACK = 0x4,UAC_CHORUS_ENABLE = 0x1,UAC_CHORUS_LEVEL = 0x2,UAC_CHORUS_RATE = 0x3,UAC_CHORUS_DEPTH = 0x4,UAC_DCR_ENABLE = 0x1,UAC_DCR_RATE = 0x2,UAC_DCR_MAXAMPL = 0x3,UAC_DCR_THRESHOLD = 0x4,UAC_DCR_ATTACK_TIME = 0x5,UAC_DCR_RELEASE_TIME = 0x6,UAC_XU_ENABLE = 0x1,UAC_MS_HEADER = 0x1,UAC_MIDI_IN_JACK = 0x2,UAC_MIDI_OUT_JACK = 0x3,UAC_MS_GENERAL = 0x1,UAC_TERMINAL_UNDEFINED = 0x100,UAC_TERMINAL_STREAMING = 0x101,UAC_TERMINAL_VENDOR_SPEC = 0x1FF,UAC_DT_INPUT_TERMINAL_SIZE = 0xC,UAC_INPUT_TERMINAL_UNDEFINED = 0x200,UAC_INPUT_TERMINAL_MICROPHONE = 0x201,UAC_INPUT_TERMINAL_DESKTOP_MICROPHONE = 0x202,UAC_INPUT_TERMINAL_PERSONAL_MICROPHONE = 0x203,UAC_INPUT_TERMINAL_OMNI_DIR_MICROPHONE = 0x204,UAC_INPUT_TERMINAL_MICROPHONE_ARRAY = 0x205,UAC_INPUT_TERMINAL_PROC_MICROPHONE_ARRAY = 0x206,UAC_TERMINAL_CS_COPY_PROTECT_CONTROL = 0x1,UAC_DT_OUTPUT_TERMINAL_SIZE = 0x9,UAC_OUTPUT_TERMINAL_UNDEFINED = 0x300,UAC_OUTPUT_TERMINAL_SPEAKER = 0x301,UAC_OUTPUT_TERMINAL_HEADPHONES = 0x302,UAC_OUTPUT_TERMINAL_HEAD_MOUNTED_DISPLAY_AUDIO = 0x303,UAC_OUTPUT_TERMINAL_DESKTOP_SPEAKER = 0x304,UAC_OUTPUT_TERMINAL_ROOM_SPEAKER = 0x305,UAC_OUTPUT_TERMINAL_COMMUNICATION_SPEAKER = 0x306,UAC_OUTPUT_TERMINAL_LOW_FREQ_EFFECTS_SPEAKER = 0x307,UAC_DT_AS_HEADER_SIZE = 0x7,UAC_FORMAT_TYPE_I_UNDEFINED = 0x0,UAC_FORMAT_TYPE_I_PCM = 0x1,UAC_FORMAT_TYPE_I_PCM8 = 0x2,UAC_FORMAT_TYPE_I_IEEE_FLOAT = 0x3,UAC_FORMAT_TYPE_I_ALAW = 0x4,UAC_FORMAT_TYPE_I_MULAW = 0x5,UAC_FORMAT_TYPE_I_CONTINUOUS_DESC_SIZE = 0xE,UAC_FORMAT_TYPE_II_MPEG = 0x1001,UAC_FORMAT_TYPE_II_AC3 = 0x1002,UAC_FORMAT_TYPE_III_IEC1937_AC3 = 0x2001,UAC_FORMAT_TYPE_III_IEC1937_MPEG1_LAYER1 = 0x2002,UAC_FORMAT_TYPE_III_IEC1937_MPEG2_NOEXT = 0x2003,UAC_FORMAT_TYPE_III_IEC1937_MPEG2_EXT = 0x2004,UAC_FORMAT_TYPE_III_IEC1937_MPEG2_LAYER1_LS = 0x2005,UAC_FORMAT_TYPE_III_IEC1937_MPEG2_LAYER23_LS = 0x2006,UAC_FORMAT_TYPE_UNDEFINED = 0x0,UAC_FORMAT_TYPE_I = 0x1,UAC_FORMAT_TYPE_II = 0x2,UAC_FORMAT_TYPE_III = 0x3,UAC_EXT_FORMAT_TYPE_I = 0x81,UAC_EXT_FORMAT_TYPE_II = 0x82,UAC_EXT_FORMAT_TYPE_III = 0x83,UAC_ISO_ENDPOINT_DESC_SIZE = 0x7,UAC_EP_CS_ATTR_SAMPLE_RATE = 0x1,UAC_EP_CS_ATTR_PITCH_CONTROL = 0x2,UAC_EP_CS_ATTR_FILL_MAX = 0x80,};
enum MACRO_UNIMAP {GIO_UNIMAP = 0x4B66,PIO_UNIMAP = 0x4B67,};
enum MACRO_UNIX98 {UNIX98_PTY_MAJOR_COUNT = 8,UNIX98_PTY_SLAVE_MAJOR = 136,};
enum MACRO_UPAGES {UPAGES = 1,};
enum MACRO_UPDATE {UPDATE_BLOCK = 0x3D,};
enum MACRO_USBTMC {USBTMC_STATUS_SUCCESS = 0x1,USBTMC_STATUS_PENDING = 0x2,USBTMC_STATUS_FAILED = 0x80,USBTMC_STATUS_TRANSFER_NOT_IN_PROGRESS = 0x81,USBTMC_STATUS_SPLIT_NOT_IN_PROGRESS = 0x82,USBTMC_STATUS_SPLIT_IN_PROGRESS = 0x83,USBTMC_REQUEST_INITIATE_ABORT_BULK_OUT = 0x1,USBTMC_REQUEST_CHECK_ABORT_BULK_OUT_STATUS = 0x2,USBTMC_REQUEST_INITIATE_ABORT_BULK_IN = 0x3,USBTMC_REQUEST_CHECK_ABORT_BULK_IN_STATUS = 0x4,USBTMC_REQUEST_INITIATE_CLEAR = 0x5,USBTMC_REQUEST_CHECK_CLEAR_STATUS = 0x6,USBTMC_REQUEST_GET_CAPABILITIES = 0x7,USBTMC_REQUEST_INDICATOR_PULSE = 0x40,USBTMC_IOC_NR = 0x5B,USBTMC_IOCTL_INDICATOR_PULSE = 0x5B01,USBTMC_IOCTL_CLEAR = 0x5B02,USBTMC_IOCTL_ABORT_BULK_OUT = 0x5B03,USBTMC_IOCTL_ABORT_BULK_IN = 0x5B04,USBTMC_IOCTL_CLEAR_OUT_HALT = 0x5B06,USBTMC_IOCTL_CLEAR_IN_HALT = 0x5B07,};
enum MACRO_USB_DT {USB_DT_HUB_NONVAR_SIZE = 7,USB_DT_SS_HUB_SIZE = 12,USB_HUB_PR_FS = 0,USB_HUB_PR_HS_NO_TT = 0,USB_HUB_PR_HS_SINGLE_TT = 1,USB_HUB_PR_HS_MULTI_TT = 2,USB_HUB_PR_SS = 3,};
enum MACRO_USB_MS {USB_MS_HEADER = 0x1,USB_MS_MIDI_IN_JACK = 0x2,USB_MS_MIDI_OUT_JACK = 0x3,USB_MS_ELEMENT = 0x4,USB_MS_GENERAL = 0x1,USB_MS_EMBEDDED = 0x1,USB_MS_EXTERNAL = 0x2,USB_DT_MS_HEADER_SIZE = 0x7,USB_DT_MIDI_IN_SIZE = 0x6,};
enum MACRO_VECTOR {DE_VECTOR = 0,DB_VECTOR = 1,BP_VECTOR = 3,OF_VECTOR = 4,BR_VECTOR = 5,UD_VECTOR = 6,NM_VECTOR = 7,DF_VECTOR = 8,TS_VECTOR = 10,NP_VECTOR = 11,SS_VECTOR = 12,GP_VECTOR = 13,PF_VECTOR = 14,MF_VECTOR = 16,MC_VECTOR = 18,};
enum MACRO_VERIFY {VERIFY = 0x2F,};
enum MACRO_VIDIOC {VIDIOC_RESERVED = 22017,VIDIOC_LOG_STATUS = 22086,};
enum MACRO_VIRTIO {VIRTIO_CONFIG_S_ACKNOWLEDGE = 1,VIRTIO_CONFIG_S_DRIVER = 2,VIRTIO_CONFIG_S_DRIVER_OK = 4,VIRTIO_CONFIG_S_FAILED = 128,VIRTIO_TRANSPORT_F_START = 28,VIRTIO_TRANSPORT_F_END = 32,VIRTIO_F_NOTIFY_ON_EMPTY = 24,VIRTIO_F_ANY_LAYOUT = 27,};
enum MACRO_VLNEXT {VLNEXT = 15,VEOL2 = 16,};
enum MACRO_VOLUME {VOLUME_OVERFLOW = 0xD,};
enum MACRO_VTIMES {VTIMES_UNITS_PER_SECOND = 60,};
enum MACRO_WINDOW {TCPOPT_WINDOW = 3,TCPOLEN_WINDOW = 3,};
enum MACRO_XF86VM {XF86VM_READ_PERMISSION = 1,XF86VM_WRITE_PERMISSION = 2,};
enum MACRO_XF86XK {XF86XK_ModeLock = 0x1008FF01,XF86XK_MonBrightnessUp = 0x1008FF02,XF86XK_MonBrightnessDown = 0x1008FF03,XF86XK_KbdLightOnOff = 0x1008FF04,XF86XK_KbdBrightnessUp = 0x1008FF05,XF86XK_KbdBrightnessDown = 0x1008FF06,XF86XK_Standby = 0x1008FF10,XF86XK_AudioLowerVolume = 0x1008FF11,XF86XK_AudioMute = 0x1008FF12,XF86XK_AudioRaiseVolume = 0x1008FF13,XF86XK_AudioPlay = 0x1008FF14,XF86XK_AudioStop = 0x1008FF15,XF86XK_AudioPrev = 0x1008FF16,XF86XK_AudioNext = 0x1008FF17,XF86XK_HomePage = 0x1008FF18,XF86XK_Mail = 0x1008FF19,XF86XK_Start = 0x1008FF1A,XF86XK_Search = 0x1008FF1B,XF86XK_AudioRecord = 0x1008FF1C,XF86XK_Calculator = 0x1008FF1D,XF86XK_Memo = 0x1008FF1E,XF86XK_ToDoList = 0x1008FF1F,XF86XK_Calendar = 0x1008FF20,XF86XK_PowerDown = 0x1008FF21,XF86XK_ContrastAdjust = 0x1008FF22,XF86XK_RockerUp = 0x1008FF23,XF86XK_RockerDown = 0x1008FF24,XF86XK_RockerEnter = 0x1008FF25,XF86XK_Back = 0x1008FF26,XF86XK_Forward = 0x1008FF27,XF86XK_Stop = 0x1008FF28,XF86XK_Refresh = 0x1008FF29,XF86XK_PowerOff = 0x1008FF2A,XF86XK_WakeUp = 0x1008FF2B,XF86XK_Eject = 0x1008FF2C,XF86XK_ScreenSaver = 0x1008FF2D,XF86XK_WWW = 0x1008FF2E,XF86XK_Sleep = 0x1008FF2F,XF86XK_Favorites = 0x1008FF30,XF86XK_AudioPause = 0x1008FF31,XF86XK_AudioMedia = 0x1008FF32,XF86XK_MyComputer = 0x1008FF33,XF86XK_VendorHome = 0x1008FF34,XF86XK_LightBulb = 0x1008FF35,XF86XK_Shop = 0x1008FF36,XF86XK_History = 0x1008FF37,XF86XK_OpenURL = 0x1008FF38,XF86XK_AddFavorite = 0x1008FF39,XF86XK_HotLinks = 0x1008FF3A,XF86XK_BrightnessAdjust = 0x1008FF3B,XF86XK_Finance = 0x1008FF3C,XF86XK_Community = 0x1008FF3D,XF86XK_AudioRewind = 0x1008FF3E,XF86XK_BackForward = 0x1008FF3F,XF86XK_Launch0 = 0x1008FF40,XF86XK_Launch1 = 0x1008FF41,XF86XK_Launch2 = 0x1008FF42,XF86XK_Launch3 = 0x1008FF43,XF86XK_Launch4 = 0x1008FF44,XF86XK_Launch5 = 0x1008FF45,XF86XK_Launch6 = 0x1008FF46,XF86XK_Launch7 = 0x1008FF47,XF86XK_Launch8 = 0x1008FF48,XF86XK_Launch9 = 0x1008FF49,XF86XK_LaunchA = 0x1008FF4A,XF86XK_LaunchB = 0x1008FF4B,XF86XK_LaunchC = 0x1008FF4C,XF86XK_LaunchD = 0x1008FF4D,XF86XK_LaunchE = 0x1008FF4E,XF86XK_LaunchF = 0x1008FF4F,XF86XK_ApplicationLeft = 0x1008FF50,XF86XK_ApplicationRight = 0x1008FF51,XF86XK_Book = 0x1008FF52,XF86XK_CD = 0x1008FF53,XF86XK_Calculater = 0x1008FF54,XF86XK_Clear = 0x1008FF55,XF86XK_Close = 0x1008FF56,XF86XK_Copy = 0x1008FF57,XF86XK_Cut = 0x1008FF58,XF86XK_Display = 0x1008FF59,XF86XK_DOS = 0x1008FF5A,XF86XK_Documents = 0x1008FF5B,XF86XK_Excel = 0x1008FF5C,XF86XK_Explorer = 0x1008FF5D,XF86XK_Game = 0x1008FF5E,XF86XK_Go = 0x1008FF5F,XF86XK_iTouch = 0x1008FF60,XF86XK_LogOff = 0x1008FF61,XF86XK_Market = 0x1008FF62,XF86XK_Meeting = 0x1008FF63,XF86XK_MenuKB = 0x1008FF65,XF86XK_MenuPB = 0x1008FF66,XF86XK_MySites = 0x1008FF67,XF86XK_New = 0x1008FF68,XF86XK_News = 0x1008FF69,XF86XK_OfficeHome = 0x1008FF6A,XF86XK_Open = 0x1008FF6B,XF86XK_Option = 0x1008FF6C,XF86XK_Paste = 0x1008FF6D,XF86XK_Phone = 0x1008FF6E,XF86XK_Q = 0x1008FF70,XF86XK_Reply = 0x1008FF72,XF86XK_Reload = 0x1008FF73,XF86XK_RotateWindows = 0x1008FF74,XF86XK_RotationPB = 0x1008FF75,XF86XK_RotationKB = 0x1008FF76,XF86XK_Save = 0x1008FF77,XF86XK_ScrollUp = 0x1008FF78,XF86XK_ScrollDown = 0x1008FF79,XF86XK_ScrollClick = 0x1008FF7A,XF86XK_Send = 0x1008FF7B,XF86XK_Spell = 0x1008FF7C,XF86XK_SplitScreen = 0x1008FF7D,XF86XK_Support = 0x1008FF7E,XF86XK_TaskPane = 0x1008FF7F,XF86XK_Terminal = 0x1008FF80,XF86XK_Tools = 0x1008FF81,XF86XK_Travel = 0x1008FF82,XF86XK_UserPB = 0x1008FF84,XF86XK_User1KB = 0x1008FF85,XF86XK_User2KB = 0x1008FF86,XF86XK_Video = 0x1008FF87,XF86XK_WheelButton = 0x1008FF88,XF86XK_Word = 0x1008FF89,XF86XK_Xfer = 0x1008FF8A,XF86XK_ZoomIn = 0x1008FF8B,XF86XK_ZoomOut = 0x1008FF8C,XF86XK_Away = 0x1008FF8D,XF86XK_Messenger = 0x1008FF8E,XF86XK_WebCam = 0x1008FF8F,XF86XK_MailForward = 0x1008FF90,XF86XK_Pictures = 0x1008FF91,XF86XK_Music = 0x1008FF92,XF86XK_Battery = 0x1008FF93,XF86XK_Bluetooth = 0x1008FF94,XF86XK_WLAN = 0x1008FF95,XF86XK_UWB = 0x1008FF96,XF86XK_AudioForward = 0x1008FF97,XF86XK_AudioRepeat = 0x1008FF98,XF86XK_AudioRandomPlay = 0x1008FF99,XF86XK_Subtitle = 0x1008FF9A,XF86XK_AudioCycleTrack = 0x1008FF9B,XF86XK_CycleAngle = 0x1008FF9C,XF86XK_FrameBack = 0x1008FF9D,XF86XK_FrameForward = 0x1008FF9E,XF86XK_Time = 0x1008FF9F,XF86XK_Select = 0x1008FFA0,XF86XK_View = 0x1008FFA1,XF86XK_TopMenu = 0x1008FFA2,XF86XK_Red = 0x1008FFA3,XF86XK_Green = 0x1008FFA4,XF86XK_Yellow = 0x1008FFA5,XF86XK_Blue = 0x1008FFA6,XF86XK_Suspend = 0x1008FFA7,XF86XK_Hibernate = 0x1008FFA8,XF86XK_TouchpadToggle = 0x1008FFA9,XF86XK_TouchpadOn = 0x1008FFB0,XF86XK_TouchpadOff = 0x1008FFB1,XF86XK_Switch_VT_1 = 0x1008FE01,XF86XK_Switch_VT_2 = 0x1008FE02,XF86XK_Switch_VT_3 = 0x1008FE03,XF86XK_Switch_VT_4 = 0x1008FE04,XF86XK_Switch_VT_5 = 0x1008FE05,XF86XK_Switch_VT_6 = 0x1008FE06,XF86XK_Switch_VT_7 = 0x1008FE07,XF86XK_Switch_VT_8 = 0x1008FE08,XF86XK_Switch_VT_9 = 0x1008FE09,XF86XK_Switch_VT_10 = 0x1008FE0A,XF86XK_Switch_VT_11 = 0x1008FE0B,XF86XK_Switch_VT_12 = 0x1008FE0C,XF86XK_Ungrab = 0x1008FE20,XF86XK_ClearGrab = 0x1008FE21,XF86XK_Next_VMode = 0x1008FE22,XF86XK_Prev_VMode = 0x1008FE23,XF86XK_LogWindowTree = 0x1008FE24,XF86XK_LogGrabInfo = 0x1008FE25,};
enum MACRO_XFIXES {XFIXES_MAJOR = 5,XFIXES_MINOR = 0,};
enum MACRO_XInput {XInput_2_0 = 7,};
enum MACRO_XT_BPF {XT_BPF_MAX_NUM_INSTR = 64,XT_CHECKSUM_OP_FILL = 1,XT_CLUSTER_NODES_MAX = 32,XT_MAX_COMMENT_LEN = 256,XT_CONNLABEL_MAXBIT = 127,XT_CONNTRACK_STATE_INVALID = 1,XT_DCCP_SRC_PORTS = 1,XT_DCCP_DEST_PORTS = 2,XT_DCCP_TYPE = 4,XT_DCCP_OPTION = 8,XT_DCCP_VALID_FLAGS = 15,XT_ESP_INV_SPI = 1,XT_ESP_INV_MASK = 1,XT_HASHLIMIT_SCALE = 10000,XT_HASHLIMIT_BYTE_SHIFT = 4,};
enum MACRO_XT_OSF {XT_OSF_GENRE = 1,XT_OSF_TTL = 2,XT_OSF_LOG = 4,XT_OSF_INVERT = 8,XT_OSF_LOGLEVEL_ALL = 0,XT_OSF_LOGLEVEL_FIRST = 1,XT_OSF_LOGLEVEL_ALL_KNOWN = 2,XT_OSF_TTL_TRUE = 0,XT_OSF_TTL_LESS = 1,XT_OSF_TTL_NOCHECK = 2,XT_PHYSDEV_OP_IN = 1,XT_PHYSDEV_OP_OUT = 2,XT_PHYSDEV_OP_BRIDGED = 4,XT_PHYSDEV_OP_ISIN = 8,XT_PHYSDEV_OP_ISOUT = 16,XT_PHYSDEV_OP_MASK = 31,XT_POLICY_MAX_ELEM = 4,XT_QUOTA_MASK = 1,};
enum MACRO_XT_TCP {XT_TCP_INV_SRCPT = 0x1,XT_TCP_INV_DSTPT = 0x2,XT_TCP_INV_FLAGS = 0x4,XT_TCP_INV_OPTION = 0x8,XT_TCP_INV_MASK = 0xF,XT_UDP_INV_SRCPT = 0x1,XT_UDP_INV_DSTPT = 0x2,XT_UDP_INV_MASK = 0x3,};
enum MACRO_XT_U32 {XT_U32_MAXSIZE = 10,};
enum MACRO_X_BYTE {X_BYTE_ORDER = 1234,X_BIG_ENDIAN = 4321,X_LITTLE_ENDIAN = 1234,};
enum MACRO_X_HAVE {X_HAVE_UTF8_STRING = 1,};
enum MACRO_X_LINE {X_LINE_MAX = 2048,};
enum MACRO_XkbAXN {XkbAXN_SKPress = 0,XkbAXN_SKAccept = 1,XkbAXN_SKReject = 2,XkbAXN_SKRelease = 3,XkbAXN_BKAccept = 4,XkbAXN_BKReject = 5,XkbAXN_AXKWarning = 6,XkbAXN_SKPressMask = 1,XkbAXN_SKAcceptMask = 2,XkbAXN_SKRejectMask = 4,XkbAXN_SKReleaseMask = 8,XkbAXN_BKAcceptMask = 16,XkbAXN_BKRejectMask = 32,XkbAXN_AXKWarningMask = 64,};
enum MACRO_XkbErr {XkbErr_BadDevice = 0xFF,XkbErr_BadClass = 0xFE,XkbErr_BadId = 0xFD,};
enum MACRO_XkbGBN {XkbGBN_TypesMask = 1,XkbGBN_CompatMapMask = 2,XkbGBN_ClientSymbolsMask = 4,XkbGBN_ServerSymbolsMask = 8,XkbGBN_SymbolsMask = 12,XkbGBN_IndicatorMapMask = 16,XkbGBN_KeyNamesMask = 32,XkbGBN_GeometryMask = 64,XkbGBN_OtherNamesMask = 128,XkbGBN_AllComponentsMask = 255,};
enum MACRO_XkbNKN {XkbNKN_KeycodesMask = 1,XkbNKN_GeometryMask = 2,XkbNKN_DeviceIDMask = 4,};
enum MACRO_XkbPCF {XkbPCF_DetectableAutoRepeatMask = 1,XkbPCF_GrabsUseXKBStateMask = 2,XkbPCF_AutoResetControlsMask = 4,XkbPCF_LookupStateWhenGrabbed = 8,XkbPCF_SendEventUsesXKBState = 16,XkbPCF_AllFlagsMask = 31,};
enum MACRO_XvNone {XvNone = 0,};
enum MACRO_YPBIND {YPBIND_ERR_ERR = 1,YPBIND_ERR_NOSERV = 2,YPBIND_ERR_RESC = 3,};
enum MACRO_YPPROC {YPPROC_NULL = 0,YPPROC_DOMAIN = 1,YPPROC_DOMAIN_NONACK = 2,YPPROC_MATCH = 3,YPPROC_FIRST = 4,YPPROC_NEXT = 5,YPPROC_XFR = 6,YPPROC_CLEAR = 7,YPPROC_ALL = 8,YPPROC_MASTER = 9,YPPROC_ORDER = 10,YPPROC_MAPLIST = 11,};
enum MACRO_YPPROG {YPPROG = 100004,};
enum MACRO_YPPUSH {YPPUSH_XFRRESPPROG = 0x40000000,YPPUSH_XFRRESPVERS = 0x1,};
enum MACRO_YPVERS {YPVERS = 2,};
enum MACRO_ZMAGIC {ZMAGIC = 0x10B,};
enum MACRO__CTYPE {_CTYPE_H = 1,_GETOPT_H = 1,};
enum MACRO__DLFCN {_DLFCN_H = 1,};
enum MACRO__ERRNO {_ERRNO_H = 1,};
enum MACRO__FSTAB {_FSTAB_H = 1,_FTS_H = 1,};
enum MACRO__GCONV {_GCONV_H = 1,};
enum MACRO__ICONV {_ICONV_H = 1,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,BUFSIZ = 8192,};
enum MACRO__LFS64 {_LFS64_STDIO = 1,};
enum MACRO__LINUX {_LINUX_QUOTA_VERSION = 2,};
enum MACRO__MKNOD {_MKNOD_VER_LINUX = 0,};
enum MACRO__POSIX {_POSIX_JOB_CONTROL = 1,_POSIX_SAVED_IDS = 1,_POSIX_PRIORITY_SCHEDULING = 200809,_POSIX_SYNCHRONIZED_IO = 200809,_POSIX_FSYNC = 200809,_POSIX_MAPPED_FILES = 200809,_POSIX_MEMLOCK = 200809,_POSIX_MEMLOCK_RANGE = 200809,_POSIX_MEMORY_PROTECTION = 200809,_POSIX_CHOWN_RESTRICTED = 0,_POSIX_VDISABLE = 0,_POSIX_NO_TRUNC = 1,};
enum MACRO__SPAWN {_SPAWN_H = 1,};
enum MACRO__STDIO {_STDIO_H = 1,};
enum MACRO__UCHAR {_UCHAR_H = 1,};
enum MACRO__WCHAR {_WCHAR_H = 1,};
enum MACRO__XOPEN {_XOPEN_SOURCE_EXTENDED = 1,};
enum MACRO___BIND {__BIND = 19950621,};
enum MACRO___BITS {__BITS_PER_LONG = 64,};
enum MACRO___GLOB {__GLOB_FLAGS = 32511,};
enum MACRO___MATH {__MATH_DECLARE_LDOUBLE = 1,};
enum MACRO___SOCK {__SOCK_SIZE__ = 16,};
enum MACRO___STDC {__STDC_IEC_559__ = 1,__STDC_IEC_559_COMPLEX__ = 1,__STDC_ISO_10646__ = 201103,__STDC_NO_THREADS__ = 1,};
enum MACRO___bool {__bool_true_false_are_defined = 1,};
enum MACRO___have {__have_pthread_attr_t = 1,};
enum MACRO_autofs {autofs_ptype_missing = 0,autofs_ptype_expire = 1,};
enum MACRO_fsTrue {fsTrue = 1,};
enum MACRO_xFalse {xFalse = 0,ELFlagFocus = 1,ELFlagSameScreen = 2,};
typedef int Menu_Options;
typedef unsigned __int8 NCURSES_BOOL;
typedef int (*NCURSES_OUTC)(int);
typedef struct _MGSL_PARAMS *PMGSL_PARAMS;
typedef struct _19819260117A2122793EF6A7F838A8D8 *RectanglePtr;
typedef struct _19819260117A2122793EF6A7F838A8D8 RectangleRec;
typedef struct _0274777D2FCFAE6C6A54957AD1D04326 SMMRegisters;
typedef struct _2E0E2C12F04118C9E52BAE749EE378FF ScreenFormat;
typedef struct _873989352E2697A1AEEAE6DD5F2AF6D9 XButtonEvent;
typedef union _D8231012D0728EC3472C30FA3109CEFA XEDataObject;
typedef struct _6FA9C15AF3974CA3A341A1191B3752B4 XExposeEvent;
typedef struct _4FFA9527088137D66D8D180D61C68358 XHostAddress;
typedef struct _4581608EB282A4CD84CF9A6FF906DD32 XKeymapEvent;
typedef struct _434B3255D002B67E7352AD09968BC579 XMotionEvent;
typedef unsigned __int16 XRandrSizeID;
typedef struct _AF5FB4080A51E8992C2DCC85F9B13FAA XTestKeyInfo;
typedef struct _XkbAnyAction XkbAnyAction;
typedef struct _XkbBounds *XkbBoundsPtr;
typedef struct _XkbBounds XkbBoundsRec;
typedef union _XkbDoodad *XkbDoodadPtr;
typedef union _XkbDoodad XkbDoodadRec;
typedef struct _XkbISOAction XkbISOAction;
typedef struct _XkbModAction XkbModAction;
typedef struct _XkbPtrAction XkbPtrAction;
typedef struct _XkbSymMapRec *XkbSymMapPtr;
typedef struct _XkbSymMapRec XkbSymMapRec;
typedef int *XrmQuarkList;
struct _MGSL_PARAMS {unsigned __int64 mode;unsigned __int8 loopback;unsigned __int16 flags;unsigned __int8 encoding;unsigned __int64 clock_speed;unsigned __int8 addr_filter;unsigned __int16 crc_type;unsigned __int8 preamble_length;unsigned __int8 preamble;unsigned __int64 data_rate;unsigned __int8 data_bits;unsigned __int8 stop_bits;unsigned __int8 parity;};
typedef unsigned int _Unwind_Word;
struct _XkbBehavior {unsigned __int8 type;unsigned __int8 data;};
struct _XkbProperty {char *name;char *value;};
struct _XkbStateRec {unsigned __int8 group;unsigned __int8 locked_group;unsigned __int16 base_group;unsigned __int16 latched_group;unsigned __int8 mods;unsigned __int8 base_mods;unsigned __int8 latched_mods;unsigned __int8 locked_mods;unsigned __int8 compat_state;unsigned __int8 grab_mods;unsigned __int8 compat_grab_mods;unsigned __int8 lookup_mods;unsigned __int8 compat_lookup_mods;unsigned __int16 ptr_buttons;};
struct _XvMCQMatrix {int load_intra_quantiser_matrix;int load_non_intra_quantiser_matrix;int load_chroma_intra_quantiser_matrix;int load_chroma_non_intra_quantiser_matrix;unsigned __int8 intra_quantiser_matrix[64];unsigned __int8 non_intra_quantiser_matrix[64];unsigned __int8 chroma_intra_quantiser_matrix[64];unsigned __int8 chroma_non_intra_quantiser_matrix[64];};
typedef __int64 __blkcnt64_t;
typedef unsigned __int64 __fsblkcnt_t;
typedef unsigned __int64 __fsfilcnt_t;
typedef int (*__ftw_func_t)(const char *filename, const struct stat *status, int flag);
enum __rusage_who {RUSAGE_SELF = 0x0,RUSAGE_CHILDREN = 0xFFFFFFFF,RUSAGE_THREAD = 0x1,};
typedef void __signalfn_t(int);
typedef unsigned int __useconds_t;
struct _libc_fpxreg {unsigned __int16 significand[4];unsigned __int16 exponent;unsigned __int16 padding[3];};
struct _ns_flagdata {int mask;int shift;};
typedef unsigned __int64 active_reg_t;
typedef struct _agp_allocate agp_allocate;
typedef unsigned int autofs_wqt_t;
struct avmb1_getdef {int contr;int cardtype;int cardstate;};
struct avmb1_t4file {int len;unsigned __int8 *data;};
typedef struct _2EA2B750C06C2344CAE427A9270EC33C ax25_address;
enum blktrace_act {__BLK_TA_QUEUE = 0x1,__BLK_TA_BACKMERGE = 0x2,__BLK_TA_FRONTMERGE = 0x3,__BLK_TA_GETRQ = 0x4,__BLK_TA_SLEEPRQ = 0x5,__BLK_TA_REQUEUE = 0x6,__BLK_TA_ISSUE = 0x7,__BLK_TA_COMPLETE = 0x8,__BLK_TA_PLUG = 0x9,__BLK_TA_UNPLUG_IO = 0xA,__BLK_TA_UNPLUG_TIMER = 0xB,__BLK_TA_INSERT = 0xC,__BLK_TA_SPLIT = 0xD,__BLK_TA_BOUNCE = 0xE,__BLK_TA_REMAP = 0xF,__BLK_TA_ABORT = 0x10,__BLK_TA_DRV_DATA = 0x11,};
enum blktrace_cat {BLK_TC_READ = 0x1,BLK_TC_WRITE = 0x2,BLK_TC_FLUSH = 0x4,BLK_TC_SYNC = 0x8,BLK_TC_SYNCIO = 0x8,BLK_TC_QUEUE = 0x10,BLK_TC_REQUEUE = 0x20,BLK_TC_ISSUE = 0x40,BLK_TC_COMPLETE = 0x80,BLK_TC_FS = 0x100,BLK_TC_PC = 0x200,BLK_TC_NOTIFY = 0x400,BLK_TC_AHEAD = 0x800,BLK_TC_META = 0x1000,BLK_TC_DISCARD = 0x2000,BLK_TC_DRV_DATA = 0x4000,BLK_TC_FUA = 0x8000,BLK_TC_END = 0x8000,};
struct buffmem_desc {unsigned int *buffer;int size;};
struct ca_slot_info {int num;int type;unsigned int flags;};
enum caif_at_type {CAIF_ATTYPE_PLAIN = 0x2,};
struct changer_move {int cm_fromtype;int cm_fromunit;int cm_totype;int cm_tounit;int cm_flags;};
struct console_font {unsigned int width;unsigned int height;unsigned int charcount;unsigned __int8 *data;};
struct cramfs_inode {unsigned __int32 mode : 16;unsigned __int32 uid : 16;unsigned __int32 size : 24;unsigned __int32 gid : 8;unsigned __int32 namelen : 6;unsigned __int32 offset : 26;};
enum ctattr_tuple {CTA_TUPLE_UNSPEC = 0x0,CTA_TUPLE_IP = 0x1,CTA_TUPLE_PROTO = 0x2,__CTA_TUPLE_MAX = 0x3,};
struct cycx_fw_info {unsigned __int16 codeid;unsigned __int16 version;unsigned __int16 adapter[1];unsigned __int64 memsize;unsigned __int16 reserved[2];unsigned __int16 startoffs;unsigned __int16 winoffs;unsigned __int16 codeoffs;unsigned __int64 codesize;unsigned __int16 dataoffs;unsigned __int64 datasize;};
typedef struct dmx_filter dmx_filter_t;
struct drand48_data {unsigned __int16 __x[3];unsigned __int16 __old_x[3];unsigned __int16 __c;unsigned __int16 __init;unsigned __int64 __a;};
typedef union _FCCE1A1F8B9F9C96C548060B126B0081 dvd_authinfo;
struct ebt_nat_info {unsigned __int8 mac[6];int target;};
struct elf_prpsinfo {char pr_state;char pr_sname;char pr_zomb;char pr_nice;unsigned __int64 pr_flag;unsigned int pr_uid;unsigned int pr_gid;int pr_pid;int pr_ppid;int pr_pgrp;int pr_sid;char pr_fname[16];char pr_psargs[80];};
typedef union epoll_data epoll_data_t;
typedef struct erase_info_user erase_info_t;
enum fc_ct_explan {FC_FS_EXP_NONE = 0x0,FC_FS_EXP_PID = 0x1,FC_FS_EXP_PNAM = 0x2,FC_FS_EXP_NNAM = 0x3,FC_FS_EXP_COS = 0x4,FC_FS_EXP_FTNR = 0x7,};
enum fc_ct_reason {FC_FS_RJT_CMD = 0x1,FC_FS_RJT_VER = 0x2,FC_FS_RJT_LOG = 0x3,FC_FS_RJT_IUSIZ = 0x4,FC_FS_RJT_BSY = 0x5,FC_FS_RJT_PROTO = 0x7,FC_FS_RJT_UNABL = 0x9,FC_FS_RJT_UNSUP = 0xB,};
enum fe_bandwidth {BANDWIDTH_8_MHZ = 0x0,BANDWIDTH_7_MHZ = 0x1,BANDWIDTH_6_MHZ = 0x2,BANDWIDTH_AUTO = 0x3,BANDWIDTH_5_MHZ = 0x4,BANDWIDTH_10_MHZ = 0x5,BANDWIDTH_1_712_MHZ = 0x6,};
enum fe_code_rate {FEC_NONE = 0x0,FEC_1_2 = 0x1,FEC_2_3 = 0x2,FEC_3_4 = 0x3,FEC_4_5 = 0x4,FEC_5_6 = 0x5,FEC_6_7 = 0x6,FEC_7_8 = 0x7,FEC_8_9 = 0x8,FEC_AUTO = 0x9,FEC_3_5 = 0xA,FEC_9_10 = 0xB,FEC_2_5 = 0xC,};
enum fe_hierarchy {HIERARCHY_NONE = 0x0,HIERARCHY_1 = 0x1,HIERARCHY_2 = 0x2,HIERARCHY_4 = 0x3,HIERARCHY_AUTO = 0x4,};
struct format_descr {unsigned int device;unsigned int head;unsigned int track;};
typedef struct _4D0B2EE74E9FAFCBF56BDC59F25A7FDB fr_proto_pvc;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsAllocError;
typedef struct _F059149F541946541B5DFE9F6EB20E96 fsPropOffset;
typedef struct _050D667D91EB5E6EF621582721732C5C fsRangeError;
typedef struct _048EDDC221AC6C2316AA6C5DA748547D fsResolution;
struct getcpu_cache;
typedef struct hdsp_mixer hdsp_mixer_t;
struct hdspm_config {unsigned __int8 pref_sync_ref;unsigned __int8 wordclock_sync_check;unsigned __int8 madi_sync_check;unsigned int system_sample_rate;unsigned int autosync_sample_rate;unsigned __int8 system_clock_mode;unsigned __int8 clock_source;unsigned __int8 autosync_ref;unsigned __int8 line_out;unsigned int passthru;unsigned int analog_out;};
struct he_ioctl_reg {unsigned int addr;unsigned int val;char type;};
struct hiddev_event {unsigned int hid;signed int value;};
struct hsearch_data {struct _ENTRY *table;unsigned int size;unsigned int filled;};
enum hub_led_mode {INDICATOR_AUTO = 0x0,INDICATOR_CYCLE = 0x1,INDICATOR_GREEN_BLINK = 0x2,INDICATOR_GREEN_BLINK_OFF = 0x3,INDICATOR_AMBER_BLINK = 0x4,INDICATOR_AMBER_BLINK_OFF = 0x5,INDICATOR_ALT_BLINK = 0x6,INDICATOR_ALT_BLINK_OFF = 0x7,};
typedef struct _i2o_eisa_bus_info i2o_eisa_bus;
enum iana_options {OSFOPT_EOL = 0x0,OSFOPT_NOP = 0x1,OSFOPT_MSS = 0x2,OSFOPT_WSO = 0x3,OSFOPT_SACKP = 0x4,OSFOPT_SACK = 0x5,OSFOPT_ECHO = 0x6,OSFOPT_ECHOREPLY = 0x7,OSFOPT_TS = 0x8,OSFOPT_POCP = 0x9,OSFOPT_POSP = 0xA,OSFOPT_EMPTY = 0xFF,};
struct if_nameindex {unsigned int if_index;char *if_name;};
typedef __int64 int_fast16_t;
typedef __int64 int_fast32_t;
typedef __int64 int_fast64_t;
typedef signed __int8 int_least8_t;
struct ipmi_cmdspec {unsigned __int8 netfn;unsigned __int8 cmd;};
enum l2tp_seqmode {L2TP_SEQ_NONE = 0x0,L2TP_SEQ_IP = 0x1,L2TP_SEQ_ALL = 0x2,};
struct linux_dirent;
enum llc_sockopts {LLC_OPT_UNKNOWN = 0x0,LLC_OPT_RETRY = 0x1,LLC_OPT_SIZE = 0x2,LLC_OPT_ACK_TMR_EXP = 0x3,LLC_OPT_P_TMR_EXP = 0x4,LLC_OPT_REJ_TMR_EXP = 0x5,LLC_OPT_BUSY_TMR_EXP = 0x6,LLC_OPT_TX_WIN = 0x7,LLC_OPT_RX_WIN = 0x8,LLC_OPT_PKTINFO = 0x9,LLC_OPT_MAX = 0xA,};
enum machine_type {M_OLDSUN2 = 0x0,M_68010 = 0x1,M_68020 = 0x2,M_SPARC = 0x3,M_386 = 0x64,M_MIPS1 = 0x97,M_MIPS2 = 0x98,};
enum macvlan_mode {MACVLAN_MODE_PRIVATE = 0x1,MACVLAN_MODE_VEPA = 0x2,MACVLAN_MODE_BRIDGE = 0x4,MACVLAN_MODE_PASSTHRU = 0x8,};
typedef unsigned __int8 mixer_record[128];
struct mt_tape_info {__int64 t_type;char *t_name;};
struct mtconfiginfo {__int64 mt_type;__int64 ifc_type;unsigned __int16 irqnr;unsigned __int16 dmanr;unsigned __int16 port;unsigned __int64 debug;unsigned __int32 have_dens : 1;unsigned __int32 have_bsf : 1;unsigned __int32 have_fsr : 1;unsigned __int32 have_bsr : 1;unsigned __int32 have_eod : 1;unsigned __int32 have_seek : 1;unsigned __int32 have_tell : 1;unsigned __int32 have_ras1 : 1;unsigned __int32 have_ras2 : 1;unsigned __int32 have_ras3 : 1;unsigned __int32 have_qfa : 1;unsigned __int32 pad1 : 5;char reserved[10];};
enum nubus_res_id {NUBUS_RESID_TYPE = 0x1,NUBUS_RESID_NAME = 0x2,NUBUS_RESID_ICON = 0x3,NUBUS_RESID_DRVRDIR = 0x4,NUBUS_RESID_LOADREC = 0x5,NUBUS_RESID_BOOTREC = 0x6,NUBUS_RESID_FLAGS = 0x7,NUBUS_RESID_HWDEVID = 0x8,NUBUS_RESID_MINOR_BASEOS = 0xA,NUBUS_RESID_MINOR_LENGTH = 0xB,NUBUS_RESID_MAJOR_BASEOS = 0xC,NUBUS_RESID_MAJOR_LENGTH = 0xD,NUBUS_RESID_CICN = 0xF,NUBUS_RESID_ICL8 = 0x10,NUBUS_RESID_ICL4 = 0x11,};
typedef unsigned __int64 old_sigset_t;
enum omapfb_plane {OMAPFB_PLANE_GFX = 0x0,OMAPFB_PLANE_VID1 = 0x1,OMAPFB_PLANE_VID2 = 0x2,};
enum ovs_flow_cmd {OVS_FLOW_CMD_UNSPEC = 0x0,OVS_FLOW_CMD_NEW = 0x1,OVS_FLOW_CMD_DEL = 0x2,OVS_FLOW_CMD_GET = 0x3,OVS_FLOW_CMD_SET = 0x4,};
enum ovs_key_attr {OVS_KEY_ATTR_UNSPEC = 0x0,OVS_KEY_ATTR_ENCAP = 0x1,OVS_KEY_ATTR_PRIORITY = 0x2,OVS_KEY_ATTR_IN_PORT = 0x3,OVS_KEY_ATTR_ETHERNET = 0x4,OVS_KEY_ATTR_VLAN = 0x5,OVS_KEY_ATTR_ETHERTYPE = 0x6,OVS_KEY_ATTR_IPV4 = 0x7,OVS_KEY_ATTR_IPV6 = 0x8,OVS_KEY_ATTR_TCP = 0x9,OVS_KEY_ATTR_UDP = 0xA,OVS_KEY_ATTR_ICMP = 0xB,OVS_KEY_ATTR_ICMPV6 = 0xC,OVS_KEY_ATTR_ARP = 0xD,OVS_KEY_ATTR_ND = 0xE,OVS_KEY_ATTR_SKB_MARK = 0xF,OVS_KEY_ATTR_TUNNEL = 0x10,__OVS_KEY_ATTR_MAX = 0x11,};
typedef __attribute__((aligned(4))) unsigned __int64 packed_ulong;
struct pg_write_hdr {char magic;char func;int dlen;int timeout;char packet[12];};
struct phone_except {unsigned __int32 dtmf_ready : 1;unsigned __int32 hookstate : 1;unsigned __int32 pstn_ring : 1;unsigned __int32 caller_id : 1;unsigned __int32 pstn_wink : 1;unsigned __int32 f0 : 1;unsigned __int32 f1 : 1;unsigned __int32 f2 : 1;unsigned __int32 f3 : 1;unsigned __int32 flash : 1;unsigned __int32 fc0 : 1;unsigned __int32 fc1 : 1;unsigned __int32 fc2 : 1;unsigned __int32 fc3 : 1;unsigned __int32 reserved : 18;};
typedef unsigned __int64 reg_syntax_t;
typedef struct _EDB85F966E4A638CA0FF7E75C4B94ACF rose_address;
struct rtc_pll_info {int pll_ctrl;int pll_value;int pll_max;int pll_min;int pll_posmult;int pll_negmult;__int64 pll_clock;};
struct scc_kiss_cmd {int command;unsigned int param;};
enum sctp_sn_type {SCTP_SN_TYPE_BASE = 0x8000,SCTP_ASSOC_CHANGE = 0x8001,SCTP_PEER_ADDR_CHANGE = 0x8002,SCTP_SEND_FAILED = 0x8003,SCTP_REMOTE_ERROR = 0x8004,SCTP_SHUTDOWN_EVENT = 0x8005,SCTP_PARTIAL_DELIVERY_EVENT = 0x8006,SCTP_ADAPTATION_INDICATION = 0x8007,SCTP_AUTHENTICATION_EVENT = 0x8008,SCTP_SENDER_DRY_EVENT = 0x8009,};
struct slave_config {char slave_name[16];__int64 priority;};
struct snd_interval {unsigned int min;unsigned int max;unsigned __int32 openmin : 1;unsigned __int32 openmax : 1;unsigned __int32 integer : 1;unsigned __int32 empty : 1;};
struct snd_seq_addr {unsigned __int8 client;unsigned __int8 port;};
struct snd_timer_id {int dev_class;int dev_sclass;int card;int device;int subdevice;};
struct tc_estimator {signed __int8 interval;unsigned __int8 ewma_log;};
enum tcp_ca_state {TCP_CA_Open = 0x0,TCP_CA_Disorder = 0x1,TCP_CA_CWR = 0x2,TCP_CA_Recovery = 0x3,TCP_CA_Loss = 0x4,};
typedef struct td_thrinfo td_thrinfo_t;
typedef struct _96852D299A3BC18B35313C48EFA48634 te1_settings;
typedef unsigned __int8 uint_fast8_t;
enum v4l2_colorfx {V4L2_COLORFX_NONE = 0x0,V4L2_COLORFX_BW = 0x1,V4L2_COLORFX_SEPIA = 0x2,V4L2_COLORFX_NEGATIVE = 0x3,V4L2_COLORFX_EMBOSS = 0x4,V4L2_COLORFX_SKETCH = 0x5,V4L2_COLORFX_SKY_BLUE = 0x6,V4L2_COLORFX_GRASS_GREEN = 0x7,V4L2_COLORFX_SKIN_WHITEN = 0x8,V4L2_COLORFX_VIVID = 0x9,V4L2_COLORFX_AQUA = 0xA,V4L2_COLORFX_ART_FREEZE = 0xB,V4L2_COLORFX_SILHOUETTE = 0xC,V4L2_COLORFX_SOLARIZATION = 0xD,V4L2_COLORFX_ANTIQUE = 0xE,V4L2_COLORFX_SET_CBCR = 0xF,};
typedef struct _618636EC27B0E4EC9B44F71D22005A57 video_size_t;
enum vsyscall_num {__NR_vgettimeofday = 0x0,__NR_vtime = 0x1,__NR_vgetcpu = 0x2,};
typedef struct _xAnyClassinfo *xAnyClassPtr;
typedef struct _xAxisInfo *xAxisInfoPtr;
typedef struct _51727A972DDFA83BAA2CC416714856EF xButtonState;
typedef struct _0D0114D795552F54A79F202DB3226B55 xChangeGCReq;
typedef struct _3B81704CAFF80915670BCDC93E5E5502 xCopyAreaReq;
typedef struct _0340F183E3D57BA98D278D6E8F4BBAEC xCreateGCReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSInfoReq;
typedef struct _C9AC95BFF7586B97AA4528D76B874D4D xDbeSwapInfo;
typedef struct _DB64A8459715AF3CEFE23597C08B5967 xDeviceState;
typedef struct _4D2E0013E954DA651F15636ABC395F09 xFeedbackCtl;
typedef struct _FillPolyReq xFillPolyReq;
typedef struct _4DCAC2088B3F168EF4BFBCEA383ECFD2 xGetImageReq;
typedef struct _34681C3D6FB58953006C9844DC50C14F xKeymapEvent;
typedef struct _6136D91980F3ED417B16959F6289782F xLbxCharInfo;
typedef struct _LbxDelta xLbxDeltaReq;
typedef struct _0187150EB0144696EE5998F276804071 xLbxDiffItem;
typedef struct _20372CCC7895932BACE6325FD7981C66 xLbxFontInfo;
typedef struct _431497C136870E9873948068EF0F03D8 xOpenFontReq;
typedef struct _4C0A166D0FCB5B830093FB9F7D7DFC34 xPolyTextReq;
typedef struct _PutImageReq xPutImageReq;
typedef struct _F0B6F56018B35AE6D958AA393C56DA44 xRecordRange;
typedef struct _5EC6E86656B6684A0C8370E4CB53DCE1 xRenderColor;
typedef struct _A23F2D0A331F720D631E2B6171CC3ECA xResourceReq;
typedef struct _BE873DF30A0F36F7B74D63F54E76D60A xScreenSizes;
typedef struct _XDGASync xXDGASyncReq;
typedef struct _F5409A53EFE8E3D243CC0647BA303F63 xXIEventMask;
typedef struct _9411444C71E1E75572D5F3D9F74657B9 xXIGroupInfo;
typedef struct _D499544929243D34F0E5D505EF6E776A xXITouchInfo;
typedef struct _XagQuery xXagQueryReq;
typedef struct _XevieEnd xXevieEndReq;
enum xcb_family_t {XCB_FAMILY_INTERNET = 0x0,XCB_FAMILY_DECNET = 0x1,XCB_FAMILY_CHAOS = 0x2,XCB_FAMILY_SERVER_INTERPRETED = 0x5,XCB_FAMILY_INTERNET_6 = 0x6,};
enum xcb_glx_gc_t {XCB_GLX_GC_GL_CURRENT_BIT = 0x1,XCB_GLX_GC_GL_POINT_BIT = 0x2,XCB_GLX_GC_GL_LINE_BIT = 0x4,XCB_GLX_GC_GL_POLYGON_BIT = 0x8,XCB_GLX_GC_GL_POLYGON_STIPPLE_BIT = 0x10,XCB_GLX_GC_GL_PIXEL_MODE_BIT = 0x20,XCB_GLX_GC_GL_LIGHTING_BIT = 0x40,XCB_GLX_GC_GL_FOG_BIT = 0x80,XCB_GLX_GC_GL_DEPTH_BUFFER_BIT = 0x100,XCB_GLX_GC_GL_ACCUM_BUFFER_BIT = 0x200,XCB_GLX_GC_GL_STENCIL_BUFFER_BIT = 0x400,XCB_GLX_GC_GL_VIEWPORT_BIT = 0x800,XCB_GLX_GC_GL_TRANSFORM_BIT = 0x1000,XCB_GLX_GC_GL_ENABLE_BIT = 0x2000,XCB_GLX_GC_GL_COLOR_BUFFER_BIT = 0x4000,XCB_GLX_GC_GL_HINT_BIT = 0x8000,XCB_GLX_GC_GL_EVAL_BIT = 0x10000,XCB_GLX_GC_GL_LIST_BIT = 0x20000,XCB_GLX_GC_GL_TEXTURE_BIT = 0x40000,XCB_GLX_GC_GL_SCISSOR_BIT = 0x80000,XCB_GLX_GC_GL_ALL_ATTRIB_BITS = 0xFFFFFF,};
enum xcb_glx_rm_t {XCB_GLX_RM_GL_RENDER = 0x1C00,XCB_GLX_RM_GL_FEEDBACK = 0x1C01,XCB_GLX_RM_GL_SELECT = 0x1C02,};
enum xcb_motion_t {XCB_MOTION_NORMAL = 0x0,XCB_MOTION_HINT = 0x1,};
enum xcb_xkb_id_t {XCB_XKB_ID_USE_CORE_KBD = 0x100,XCB_XKB_ID_USE_CORE_PTR = 0x200,XCB_XKB_ID_DFLT_XI_CLASS = 0x300,XCB_XKB_ID_DFLT_XI_ID = 0x400,XCB_XKB_ID_ALL_XI_CLASS = 0x500,XCB_XKB_ID_ALL_XI_ID = 0x600,XCB_XKB_ID_XI_NONE = 0xFF00,};
enum xcb_xkb_sa_t {XCB_XKB_SA_CLEAR_LOCKS = 0x1,XCB_XKB_SA_LATCH_TO_LOCK = 0x2,XCB_XKB_SA_USE_MOD_MAP_MODS = 0x4,XCB_XKB_SA_GROUP_ABSOLUTE = 0x4,};
typedef struct _xkbGetMap xkbGetMapReq;
typedef struct _xkbMapNotify xkbMapNotify;
typedef struct _xkbSetMap xkbSetMapReq;
struct COFF_scnhdr {char s_name[8];char s_paddr[4];char s_vaddr[4];char s_size[4];char s_scnptr[4];char s_relptr[4];char s_lnnoptr[4];char s_nreloc[2];char s_nlnno[2];char s_flags[4];};
typedef struct _CharInfo *CharInfoPtr;
typedef struct _CharInfo CharInfoRec;
typedef struct _C0A8BBE9C57177701090E972AEA8D416 Dwarf_Block;
typedef struct Dwarf_Debug_s *Dwarf_Debug;
typedef struct Dwarf_Error_s *Dwarf_Error;
typedef struct Dwarf_P_Die_s *Dwarf_P_Die;
typedef struct Dwarf_P_Fde_s *Dwarf_P_Fde;
typedef unsigned __int8 Dwarf_Small;
typedef union _6DF3DE276417BF858702C9AB9AD460CB Elf32_gptab;
typedef struct _8AF8D50F7459E989F83B822632060AA0 Elf_Options;
typedef struct _FontInfo *FontInfoPtr;
typedef struct _FontInfo FontInfoRec;
typedef struct _FontProp *FontPropPtr;
typedef struct _FontProp FontPropRec;
struct Gpm_Connect {unsigned __int16 eventMask;unsigned __int16 defaultMask;unsigned __int16 minMod;unsigned __int16 maxMod;int pid;int vc;};
typedef int Gpm_Handler(Gpm_Event *event, void *clientdata);
typedef struct _E1CFC36011533414D97A1ABDF69EC869 IXJ_CADENCE;
typedef struct _LockInfoRec *LockInfoPtr;
enum MACRO_ABORT {ABORT = 0x6,};
enum MACRO_AGRR3 {AGRR3_5DB = 0x10,};
enum MACRO_AGX_2 {AGX_2_5B = 0xC,};
enum MACRO_ALLOW {ALLOW_MEDIUM_REMOVAL = 0x1E,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,ARPOP_RREQUEST = 3,ARPOP_RREPLY = 4,ARPOP_InREQUEST = 8,ARPOP_InREPLY = 9,ARPOP_NAK = 10,};
enum MACRO_ARRAY {UNPROTECT_ARRAY = 0x926,PROTECT_ARRAY = 0x927,};
enum MACRO_ASYNC {ASYNC_HUP_NOTIFY = 1,ASYNC_SUSPENDED = 1073741824,ASYNC_FOURPORT = 2,ASYNC_SAK = 4,ASYNC_SPLIT_TERMIOS = 8,ASYNC_SPD_HI = 16,ASYNC_SPD_VHI = 32,ASYNC_SKIP_TEST = 64,ASYNC_AUTO_IRQ = 128,ASYNC_SESSION_LOCKOUT = 256,ASYNC_PGRP_LOCKOUT = 512,ASYNC_CALLOUT_NOHUP = 1024,ASYNC_HARDPPS_CD = 2048,ASYNC_SPD_SHI = 4096,ASYNC_LOW_LATENCY = 8192,ASYNC_BUGGY_UART = 16384,ASYNC_AUTOPROBE = 32768,ASYNC_FLAGS = 65535,ASYNC_SPD_CUST = 48,ASYNC_SPD_WARP = 4112,ASYNC_SPD_MASK = 4144,ASYNC_INITIALIZED = 2147483648,ASYNC_NORMAL_ACTIVE = 536870912,ASYNC_BOOT_AUTOCONF = 268435456,ASYNC_CLOSING = 134217728,ASYNC_CTS_FLOW = 67108864,ASYNC_CHECK_CD = 33554432,ASYNC_SHARE_IRQ = 16777216,ASYNC_CONS_FLOW = 8388608,ASYNC_INTERNAL_FLAGS = -4194304,ASYNC_CLOSING_WAIT_INF = 0,ASYNC_CLOSING_WAIT_NONE = 65535,};
enum MACRO_AUDIO {AUDIO_CAP_DTS = 1,AUDIO_CAP_LPCM = 2,AUDIO_CAP_MP1 = 4,AUDIO_CAP_MP2 = 8,AUDIO_CAP_MP3 = 16,AUDIO_CAP_AAC = 32,AUDIO_CAP_OGG = 64,AUDIO_CAP_SDDS = 128,AUDIO_CAP_AC3 = 256,AUDIO_STOP = 28417,AUDIO_PLAY = 28418,AUDIO_PAUSE = 28419,AUDIO_CONTINUE = 28420,AUDIO_SELECT_SOURCE = 28421,AUDIO_SET_MUTE = 28422,AUDIO_SET_AV_SYNC = 28423,AUDIO_SET_BYPASS_MODE = 28424,AUDIO_CHANNEL_SELECT = 28425,AUDIO_CLEAR_BUFFER = 28428,AUDIO_SET_ID = 28429,AUDIO_SET_STREAMTYPE = 28431,AUDIO_SET_EXT_ID = 28432,AUDIO_BILINGUAL_CHANNEL_SELECT = 28436,};
enum MACRO_AUDIT {AUDIT_GET = 1000,AUDIT_SET = 1001,AUDIT_LIST = 1002,AUDIT_ADD = 1003,AUDIT_DEL = 1004,AUDIT_USER = 1005,AUDIT_LOGIN = 1006,AUDIT_WATCH_INS = 1007,AUDIT_WATCH_REM = 1008,AUDIT_WATCH_LIST = 1009,AUDIT_SIGNAL_INFO = 1010,AUDIT_ADD_RULE = 1011,AUDIT_DEL_RULE = 1012,AUDIT_LIST_RULES = 1013,AUDIT_TRIM = 1014,AUDIT_MAKE_EQUIV = 1015,AUDIT_TTY_GET = 1016,AUDIT_TTY_SET = 1017,AUDIT_FIRST_USER_MSG = 1100,AUDIT_USER_AVC = 1107,AUDIT_USER_TTY = 1124,AUDIT_LAST_USER_MSG = 1199,AUDIT_FIRST_USER_MSG2 = 2100,AUDIT_LAST_USER_MSG2 = 2999,AUDIT_DAEMON_START = 1200,AUDIT_DAEMON_END = 1201,AUDIT_DAEMON_ABORT = 1202,AUDIT_DAEMON_CONFIG = 1203,AUDIT_SYSCALL = 1300,AUDIT_PATH = 1302,AUDIT_IPC = 1303,AUDIT_SOCKETCALL = 1304,AUDIT_CONFIG_CHANGE = 1305,AUDIT_SOCKADDR = 1306,AUDIT_CWD = 1307,AUDIT_EXECVE = 1309,AUDIT_IPC_SET_PERM = 1311,AUDIT_MQ_OPEN = 1312,AUDIT_MQ_SENDRECV = 1313,AUDIT_MQ_NOTIFY = 1314,AUDIT_MQ_GETSETATTR = 1315,AUDIT_KERNEL_OTHER = 1316,AUDIT_FD_PAIR = 1317,AUDIT_OBJ_PID = 1318,AUDIT_TTY = 1319,AUDIT_EOE = 1320,AUDIT_BPRM_FCAPS = 1321,AUDIT_CAPSET = 1322,AUDIT_MMAP = 1323,AUDIT_NETFILTER_PKT = 1324,AUDIT_NETFILTER_CFG = 1325,AUDIT_SECCOMP = 1326,AUDIT_AVC = 1400,AUDIT_SELINUX_ERR = 1401,AUDIT_AVC_PATH = 1402,AUDIT_MAC_POLICY_LOAD = 1403,AUDIT_MAC_STATUS = 1404,AUDIT_MAC_CONFIG_CHANGE = 1405,AUDIT_MAC_UNLBL_ALLOW = 1406,AUDIT_MAC_CIPSOV4_ADD = 1407,AUDIT_MAC_CIPSOV4_DEL = 1408,AUDIT_MAC_MAP_ADD = 1409,AUDIT_MAC_MAP_DEL = 1410,AUDIT_MAC_IPSEC_ADDSA = 1411,AUDIT_MAC_IPSEC_DELSA = 1412,AUDIT_MAC_IPSEC_ADDSPD = 1413,AUDIT_MAC_IPSEC_DELSPD = 1414,AUDIT_MAC_IPSEC_EVENT = 1415,AUDIT_MAC_UNLBL_STCADD = 1416,AUDIT_MAC_UNLBL_STCDEL = 1417,AUDIT_FIRST_KERN_ANOM_MSG = 1700,AUDIT_LAST_KERN_ANOM_MSG = 1799,AUDIT_ANOM_PROMISCUOUS = 1700,AUDIT_ANOM_ABEND = 1701,AUDIT_ANOM_LINK = 1702,AUDIT_INTEGRITY_DATA = 1800,AUDIT_INTEGRITY_METADATA = 1801,AUDIT_INTEGRITY_STATUS = 1802,AUDIT_INTEGRITY_HASH = 1803,AUDIT_INTEGRITY_PCR = 1804,AUDIT_INTEGRITY_RULE = 1805,AUDIT_KERNEL = 2000,AUDIT_FILTER_USER = 0,AUDIT_FILTER_TASK = 1,AUDIT_FILTER_ENTRY = 2,AUDIT_FILTER_WATCH = 3,AUDIT_FILTER_EXIT = 4,AUDIT_FILTER_TYPE = 5,AUDIT_NR_FILTERS = 6,AUDIT_FILTER_PREPEND = 16,AUDIT_NEVER = 0,AUDIT_POSSIBLE = 1,AUDIT_ALWAYS = 2,AUDIT_MAX_FIELDS = 64,AUDIT_MAX_KEY_LEN = 256,AUDIT_BITMASK_SIZE = 64,AUDIT_SYSCALL_CLASSES = 16,AUDIT_CLASS_DIR_WRITE = 0,AUDIT_CLASS_DIR_WRITE_32 = 1,AUDIT_CLASS_CHATTR = 2,AUDIT_CLASS_CHATTR_32 = 3,AUDIT_CLASS_READ = 4,AUDIT_CLASS_READ_32 = 5,AUDIT_CLASS_WRITE = 6,AUDIT_CLASS_WRITE_32 = 7,AUDIT_CLASS_SIGNAL = 8,AUDIT_CLASS_SIGNAL_32 = 9,AUDIT_UNUSED_BITS = 134216704,AUDIT_COMPARE_UID_TO_OBJ_UID = 1,AUDIT_COMPARE_GID_TO_OBJ_GID = 2,AUDIT_COMPARE_EUID_TO_OBJ_UID = 3,AUDIT_COMPARE_EGID_TO_OBJ_GID = 4,AUDIT_COMPARE_AUID_TO_OBJ_UID = 5,AUDIT_COMPARE_SUID_TO_OBJ_UID = 6,AUDIT_COMPARE_SGID_TO_OBJ_GID = 7,AUDIT_COMPARE_FSUID_TO_OBJ_UID = 8,AUDIT_COMPARE_FSGID_TO_OBJ_GID = 9,AUDIT_COMPARE_UID_TO_AUID = 10,AUDIT_COMPARE_UID_TO_EUID = 11,AUDIT_COMPARE_UID_TO_FSUID = 12,AUDIT_COMPARE_UID_TO_SUID = 13,AUDIT_COMPARE_AUID_TO_FSUID = 14,AUDIT_COMPARE_AUID_TO_SUID = 15,AUDIT_COMPARE_AUID_TO_EUID = 16,AUDIT_COMPARE_EUID_TO_SUID = 17,AUDIT_COMPARE_EUID_TO_FSUID = 18,AUDIT_COMPARE_SUID_TO_FSUID = 19,AUDIT_COMPARE_GID_TO_EGID = 20,AUDIT_COMPARE_GID_TO_FSGID = 21,AUDIT_COMPARE_GID_TO_SGID = 22,AUDIT_COMPARE_EGID_TO_FSGID = 23,AUDIT_COMPARE_EGID_TO_SGID = 24,AUDIT_COMPARE_SGID_TO_FSGID = 25,AUDIT_MAX_FIELD_COMPARE = 25,AUDIT_PID = 0,AUDIT_UID = 1,AUDIT_EUID = 2,AUDIT_SUID = 3,AUDIT_FSUID = 4,AUDIT_GID = 5,AUDIT_EGID = 6,AUDIT_SGID = 7,AUDIT_FSGID = 8,AUDIT_LOGINUID = 9,AUDIT_PERS = 10,AUDIT_ARCH = 11,AUDIT_MSGTYPE = 12,AUDIT_SUBJ_USER = 13,AUDIT_SUBJ_ROLE = 14,AUDIT_SUBJ_TYPE = 15,AUDIT_SUBJ_SEN = 16,AUDIT_SUBJ_CLR = 17,AUDIT_PPID = 18,AUDIT_OBJ_USER = 19,AUDIT_OBJ_ROLE = 20,AUDIT_OBJ_TYPE = 21,AUDIT_OBJ_LEV_LOW = 22,AUDIT_OBJ_LEV_HIGH = 23,AUDIT_LOGINUID_SET = 24,AUDIT_DEVMAJOR = 100,AUDIT_DEVMINOR = 101,AUDIT_INODE = 102,AUDIT_EXIT = 103,AUDIT_SUCCESS = 104,AUDIT_WATCH = 105,AUDIT_PERM = 106,AUDIT_DIR = 107,AUDIT_FILETYPE = 108,AUDIT_OBJ_UID = 109,AUDIT_OBJ_GID = 110,AUDIT_FIELD_COMPARE = 111,AUDIT_ARG0 = 200,AUDIT_ARG1 = 201,AUDIT_ARG2 = 202,AUDIT_ARG3 = 203,AUDIT_FILTERKEY = 210,AUDIT_NEGATE = -2147483648,AUDIT_BIT_MASK = 134217728,AUDIT_LESS_THAN = 268435456,AUDIT_GREATER_THAN = 536870912,AUDIT_NOT_EQUAL = 805306368,AUDIT_EQUAL = 1073741824,AUDIT_BIT_TEST = 1207959552,AUDIT_LESS_THAN_OR_EQUAL = 1342177280,AUDIT_GREATER_THAN_OR_EQUAL = 1610612736,AUDIT_OPERATORS = 2013265920,AUDIT_STATUS_ENABLED = 1,AUDIT_STATUS_FAILURE = 2,AUDIT_STATUS_PID = 4,AUDIT_STATUS_RATE_LIMIT = 8,AUDIT_STATUS_BACKLOG_LIMIT = 16,AUDIT_FAIL_SILENT = 0,AUDIT_FAIL_PRINTK = 1,AUDIT_FAIL_PANIC = 2,};
enum MACRO_AVMB1 {AVMB1_LOAD = 0,AVMB1_ADDCARD = 1,AVMB1_RESETCARD = 2,AVMB1_LOAD_AND_CONFIG = 3,AVMB1_ADDCARD_WITH_TYPE = 4,AVMB1_GET_CARDINFO = 5,AVMB1_REMOVECARD = 6,};
enum MACRO_Above {Above = 0,Below = 1,TopIf = 2,};
enum MACRO_B1200 {B1200 = 0x9,};
enum MACRO_B1800 {B1800 = 0xA,};
enum MACRO_B2400 {B2400 = 0xB,};
enum MACRO_B4800 {B4800 = 0xC,};
enum MACRO_B9600 {B9600 = 0xD,};
enum MACRO_BLANK {BLANK_CHECK = 0x8,};
enum MACRO_BLKPG {BLKPG = 0x1269,};
enum MACRO_BLOCK {BLOCK_SIZE = 1024,BLOCK_SIZE_BITS = 10,};
enum MACRO_BRCTL {BRCTL_VERSION = 1,BRCTL_GET_VERSION = 0,BRCTL_GET_BRIDGES = 1,BRCTL_ADD_BRIDGE = 2,BRCTL_DEL_BRIDGE = 3,BRCTL_ADD_IF = 4,BRCTL_DEL_IF = 5,BRCTL_GET_BRIDGE_INFO = 6,BRCTL_GET_PORT_LIST = 7,BRCTL_SET_BRIDGE_FORWARD_DELAY = 8,BRCTL_SET_BRIDGE_HELLO_TIME = 9,BRCTL_SET_BRIDGE_MAX_AGE = 10,BRCTL_SET_AGEING_TIME = 11,BRCTL_SET_GC_INTERVAL = 12,BRCTL_GET_PORT_INFO = 13,BRCTL_SET_BRIDGE_STP_STATE = 14,BRCTL_SET_BRIDGE_PRIORITY = 15,BRCTL_SET_PORT_PRIORITY = 16,BRCTL_SET_PATH_COST = 17,BRCTL_GET_FDB_ENTRIES = 18,};
enum MACRO_BREAK {BREAK = 243,};
enum MACRO_BTRFS {BTRFS_IOCTL_MAGIC = 0x94,BTRFS_VOL_NAME_MAX = 0xFF,BTRFS_PATH_NAME_MAX = 0xFF7,BTRFS_DEVICE_PATH_NAME_MAX = 0x400,BTRFS_SUBVOL_CREATE_ASYNC = 0x1,BTRFS_SUBVOL_RDONLY = 0x2,BTRFS_SUBVOL_QGROUP_INHERIT = 0x4,BTRFS_FSID_SIZE = 0x10,BTRFS_UUID_SIZE = 0x10,BTRFS_QGROUP_INHERIT_SET_LIMITS = 0x1,BTRFS_SUBVOL_NAME_MAX = 0xFC7,BTRFS_SCRUB_READONLY = 0x1,BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_ALWAYS = 0x0,BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_AVOID = 0x1,BTRFS_IOCTL_DEV_REPLACE_STATE_NEVER_STARTED = 0x0,BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED = 0x1,BTRFS_IOCTL_DEV_REPLACE_STATE_FINISHED = 0x2,BTRFS_IOCTL_DEV_REPLACE_STATE_CANCELED = 0x3,BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED = 0x4,BTRFS_IOCTL_DEV_REPLACE_CMD_START = 0x0,BTRFS_IOCTL_DEV_REPLACE_CMD_STATUS = 0x1,BTRFS_IOCTL_DEV_REPLACE_CMD_CANCEL = 0x2,BTRFS_IOCTL_DEV_REPLACE_RESULT_NO_ERROR = 0x0,BTRFS_IOCTL_DEV_REPLACE_RESULT_NOT_STARTED = 0x1,BTRFS_IOCTL_DEV_REPLACE_RESULT_ALREADY_STARTED = 0x2,BTRFS_BALANCE_CTL_PAUSE = 0x1,BTRFS_BALANCE_CTL_CANCEL = 0x2,BTRFS_BALANCE_STATE_RUNNING = 0x1,BTRFS_BALANCE_STATE_PAUSE_REQ = 0x2,BTRFS_BALANCE_STATE_CANCEL_REQ = 0x4,BTRFS_INO_LOOKUP_PATH_MAX = 0xFF0,BTRFS_DEFRAG_RANGE_COMPRESS = 0x1,BTRFS_DEFRAG_RANGE_START_IO = 0x2,BTRFS_DEV_STATS_RESET = 0x1,BTRFS_QUOTA_CTL_ENABLE = 0x1,BTRFS_QUOTA_CTL_DISABLE = 0x2,BTRFS_QUOTA_CTL_RESCAN__NOTUSED = 0x3,BTRFS_SEND_FLAG_NO_FILE_DATA = 0x1,BTRFS_SEND_FLAG_OMIT_STREAM_HEADER = 0x2,BTRFS_SEND_FLAG_OMIT_END_CMD = 0x4,BTRFS_SEND_FLAG_MASK = 0x7,BTRFS_IOC_TRANS_START = 0x9406,BTRFS_IOC_TRANS_END = 0x9407,BTRFS_IOC_SYNC = 0x9408,BTRFS_IOC_SCRUB_CANCEL = 0x941C,BTRFS_IOC_QUOTA_RESCAN_WAIT = 0x942E,};
enum MACRO_BYTES {BYTES_PER_XDR_UNIT = 4,};
enum MACRO_BadGC {BadGC = 13,};
enum MACRO_CACHE {SYNCHRONIZE_CACHE = 0x35,LOCK_UNLOCK_CACHE = 0x36,};
enum MACRO_CANFD {CANFD_MAX_DLC = 15,CANFD_MAX_DLEN = 64,CANFD_BRS = 1,CANFD_ESI = 2,};
enum MACRO_CCISS {CCISS_IOC_MAGIC = 66,};
enum MACRO_CDROM {CDROM_GET_MCN = 0x5311,CDROM_GET_UPC = 0x5311,};
enum MACRO_CHECK {CHECK_CONDITION = 0x1,};
enum MACRO_CILEN {CILEN_DEFLATE = 4,};
enum MACRO_CINTR {CINTR = 3,};
enum MACRO_CLEAN {CLEAN_UP_AND_EXIT = 109,};
enum MACRO_CLEAR {CLEAR_ARRAY = 0x920,};
enum MACRO_CLGET {CLGET_SERVER_ADDR = 3,CLGET_FD = 6,CLGET_SVC_ADDR = 7,};
enum MACRO_CLOCK {CLOCK_REALTIME = 0,CLOCK_MONOTONIC = 1,CLOCK_PROCESS_CPUTIME_ID = 2,CLOCK_THREAD_CPUTIME_ID = 3,CLOCK_MONOTONIC_RAW = 4,CLOCK_REALTIME_COARSE = 5,CLOCK_MONOTONIC_COARSE = 6,CLOCK_BOOTTIME = 7,CLOCK_REALTIME_ALARM = 8,CLOCK_BOOTTIME_ALARM = 9,};
enum MACRO_CLONE {CLONE_VM = 0x100,CLONE_FS = 0x200,CLONE_FILES = 0x400,CLONE_SIGHAND = 0x800,CLONE_PTRACE = 0x2000,CLONE_VFORK = 0x4000,CLONE_PARENT = 0x8000,CLONE_THREAD = 0x10000,CLONE_NEWNS = 0x20000,CLONE_SYSVSEM = 0x40000,CLONE_SETTLS = 0x80000,CLONE_PARENT_SETTID = 0x100000,CLONE_CHILD_CLEARTID = 0x200000,CLONE_DETACHED = 0x400000,CLONE_UNTRACED = 0x800000,CLONE_CHILD_SETTID = 0x1000000,CLONE_NEWUTS = 0x4000000,CLONE_NEWIPC = 0x8000000,CLONE_NEWUSER = 0x10000000,CLONE_NEWPID = 0x20000000,CLONE_NEWNET = 0x40000000,CLONE_IO = 0x80000000,};
enum MACRO_CLSET {CLSET_FD_CLOSE = 8,CLSET_FD_NCLOSE = 9,};
enum MACRO_COLOR {COLOR_BLACK = 0,COLOR_RED = 1,COLOR_GREEN = 2,COLOR_YELLOW = 3,COLOR_BLUE = 4,COLOR_MAGENTA = 5,COLOR_CYAN = 6,COLOR_WHITE = 7,};
enum MACRO_COUNT {COUNT = 0,CREATE = 1,};
enum MACRO_CSTOP {CSTOP = 19,};
enum MACRO_CSUSP {CSUSP = 26,};
enum MACRO_CTIME {CTIME = 0,CDSUSP = 25,};
enum MACRO_CZIOC {CZIOC = 19712,};
enum MACRO_C_HUB {C_HUB_LOCAL_POWER = 0,C_HUB_OVER_CURRENT = 1,};
enum MACRO_DEBUG {DEBUG_LEVEL_DATA = 1,DEBUG_LEVEL_ERROR = 2,DEBUG_LEVEL_INFO = 3,DEBUG_LEVEL_BH = 4,DEBUG_LEVEL_ISR = 5,};
enum MACRO_DF_P1 {DF_P1_LAZYLOAD = 0x1,DF_P1_GROUPPERM = 0x2,};
enum MACRO_DNRMG {DNRMG_L1_GROUP = 0x1,DNRMG_L2_GROUP = 0x2,};
enum MACRO_DT_IA {DT_IA_64_PLT_RESERVE = 1879048192,DT_IA_64_NUM = 1,};
enum MACRO_DWARF {DWARF_DRD_BUFFER_VERSION = 2,};
enum MACRO_DoRed {DoRed = 1,DoGreen = 2,DoBlue = 4,};
enum MACRO_EDDNR {EDDNR = 0x1E9,};
enum MACRO_EF_IA {EF_IA_64_MASKOS = 0xF,EF_IA_64_ABI64 = 0x10,EF_IA_64_ARCH = 0xFF000000,};
enum MACRO_EF_SH {EF_SH_MACH_MASK = 0x1F,EF_SH_UNKNOWN = 0x0,EF_SH1 = 0x1,EF_SH2 = 0x2,EF_SH3 = 0x3,EF_SH_DSP = 0x4,EF_SH3_DSP = 0x5,EF_SH4AL_DSP = 0x6,EF_SH3E = 0x8,EF_SH4 = 0x9,EF_SH2E = 0xB,EF_SH4A = 0xC,EF_SH2A = 0xD,EF_SH4_NOFPU = 0x10,EF_SH4A_NOFPU = 0x11,EF_SH4_NOMMU_NOFPU = 0x12,EF_SH2A_NOFPU = 0x13,EF_SH3_NOMMU = 0x14,EF_SH2A_SH4_NOFPU = 0x15,EF_SH2A_SH3_NOFPU = 0x16,EF_SH2A_SH4 = 0x17,EF_SH2A_SH3E = 0x18,};
enum MACRO_ELF32 {ELF32_FDPIC_LOADMAP_VERSION = 0x0,};
enum MACRO_EMPTY {EMPTY = 0,};
enum MACRO_EPOLL {EPOLL_CTL_ADD = 1,EPOLL_CTL_DEL = 2,EPOLL_CTL_MOD = 3,};
enum MACRO_ERASE {ERASE_MARK = 0x3C69,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDEADLK = 35,ENAMETOOLONG = 36,ENOLCK = 37,ENOSYS = 38,ENOTEMPTY = 39,ELOOP = 40,EWOULDBLOCK = 11,ENOMSG = 42,EIDRM = 43,ECHRNG = 44,EL2NSYNC = 45,EL3HLT = 46,EL3RST = 47,ELNRNG = 48,EUNATCH = 49,ENOCSI = 50,EL2HLT = 51,EBADE = 52,EBADR = 53,EXFULL = 54,ENOANO = 55,EBADRQC = 56,EBADSLT = 57,EDEADLOCK = 35,EBFONT = 59,ENOSTR = 60,ENODATA = 61,ETIME = 62,ENOSR = 63,ENONET = 64,ENOPKG = 65,EREMOTE = 66,ENOLINK = 67,EADV = 68,ESRMNT = 69,ECOMM = 70,EPROTO = 71,EMULTIHOP = 72,EDOTDOT = 73,EBADMSG = 74,EOVERFLOW = 75,ENOTUNIQ = 76,EBADFD = 77,EREMCHG = 78,ELIBACC = 79,ELIBBAD = 80,ELIBSCN = 81,ELIBMAX = 82,ELIBEXEC = 83,ERESTART = 85,ESTRPIPE = 86,EUSERS = 87,ENOTSOCK = 88,EDESTADDRREQ = 89,EMSGSIZE = 90,EPROTOTYPE = 91,ENOPROTOOPT = 92,EPROTONOSUPPORT = 93,ESOCKTNOSUPPORT = 94,EOPNOTSUPP = 95,EPFNOSUPPORT = 96,EAFNOSUPPORT = 97,EADDRINUSE = 98,EADDRNOTAVAIL = 99,ENETDOWN = 100,ENETUNREACH = 101,ENETRESET = 102,ECONNABORTED = 103,ECONNRESET = 104,ENOBUFS = 105,EISCONN = 106,ENOTCONN = 107,ESHUTDOWN = 108,ETOOMANYREFS = 109,ETIMEDOUT = 110,ECONNREFUSED = 111,EHOSTDOWN = 112,EHOSTUNREACH = 113,EALREADY = 114,EINPROGRESS = 115,ESTALE = 116,EUCLEAN = 117,ENOTNAM = 118,ENAVAIL = 119,EISNAM = 120,EREMOTEIO = 121,EDQUOT = 122,ENOMEDIUM = 123,EMEDIUMTYPE = 124,ECANCELED = 125,ENOKEY = 126,EKEYEXPIRED = 127,EKEYREVOKED = 128,EKEYREJECTED = 129,EOWNERDEAD = 130,ENOTRECOVERABLE = 131,ERFKILL = 132,EHWPOISON = 133,};
enum MACRO_ERROR {ERROR = 5,};
enum MACRO_ETHER {ETHER_ADDR_LEN = 6,ETHER_TYPE_LEN = 2,ETHER_CRC_LEN = 4,ETHER_HDR_LEN = 14,ETHER_MIN_LEN = 64,ETHER_MAX_LEN = 1518,};
enum MACRO_FATTR {FATTR_MODE = 1,FATTR_UID = 2,FATTR_GID = 4,FATTR_SIZE = 8,FATTR_ATIME = 16,FATTR_MTIME = 32,FATTR_FH = 64,FATTR_ATIME_NOW = 128,FATTR_MTIME_NOW = 256,FATTR_LOCKOWNER = 512,};
enum MACRO_FFDLY {FFDLY = 0x8000,};
enum MACRO_FLUSH {FLUSH_SYNC = 1,FLUSH_STABLE = 4,FLUSH_LOWPRI = 8,FLUSH_HIGHPRI = 16,FLUSH_COND_STABLE = 32,};
enum MACRO_FONTX {GIO_FONTX = 0x4B6B,PIO_FONTX = 0x4B6C,};
enum MACRO_FOPEN {FOPEN_MAX = 16,IOV_MAX = 1024,_XOPEN_IOV_MAX = 16,};
enum MACRO_FRAME {FRAME_SIZE = 168,};
enum MACRO_FUTEX {FUTEX_WAIT = 0,FUTEX_WAKE = 1,FUTEX_FD = 2,FUTEX_REQUEUE = 3,FUTEX_CMP_REQUEUE = 4,FUTEX_WAKE_OP = 5,FUTEX_LOCK_PI = 6,FUTEX_UNLOCK_PI = 7,FUTEX_TRYLOCK_PI = 8,FUTEX_WAIT_BITSET = 9,FUTEX_WAKE_BITSET = 10,FUTEX_WAIT_REQUEUE_PI = 11,FUTEX_CMP_REQUEUE_PI = 12,FUTEX_PRIVATE_FLAG = 128,FUTEX_CLOCK_REALTIME = 256,FUTEX_CMD_MASK = -385,FUTEX_WAIT_PRIVATE = 128,FUTEX_WAKE_PRIVATE = 129,FUTEX_REQUEUE_PRIVATE = 131,FUTEX_CMP_REQUEUE_PRIVATE = 132,FUTEX_WAKE_OP_PRIVATE = 133,FUTEX_LOCK_PI_PRIVATE = 134,FUTEX_UNLOCK_PI_PRIVATE = 135,FUTEX_TRYLOCK_PI_PRIVATE = 136,FUTEX_WAIT_BITSET_PRIVATE = 137,FUTEX_WAKE_BITSET_PRIVATE = 138,FUTEX_WAIT_REQUEUE_PI_PRIVATE = 139,FUTEX_CMP_REQUEUE_PI_PRIVATE = 140,FUTEX_WAITERS = -2147483648,FUTEX_OWNER_DIED = 1073741824,FUTEX_TID_MASK = 1073741823,};
enum MACRO_GPCMD {GPCMD_BLANK = 0xA1,GPCMD_CLOSE_TRACK = 0x5B,GPCMD_FLUSH_CACHE = 0x35,GPCMD_FORMAT_UNIT = 0x4,GPCMD_GET_CONFIGURATION = 0x46,GPCMD_GET_EVENT_STATUS_NOTIFICATION = 0x4A,GPCMD_GET_PERFORMANCE = 0xAC,GPCMD_INQUIRY = 0x12,GPCMD_LOAD_UNLOAD = 0xA6,GPCMD_MECHANISM_STATUS = 0xBD,GPCMD_MODE_SELECT_10 = 0x55,GPCMD_MODE_SENSE_10 = 0x5A,GPCMD_PAUSE_RESUME = 0x4B,GPCMD_PLAY_AUDIO_10 = 0x45,GPCMD_PLAY_AUDIO_MSF = 0x47,GPCMD_PLAY_AUDIO_TI = 0x48,GPCMD_PLAY_CD = 0xBC,GPCMD_PREVENT_ALLOW_MEDIUM_REMOVAL = 0x1E,GPCMD_READ_10 = 0x28,GPCMD_READ_12 = 0xA8,GPCMD_READ_BUFFER = 0x3C,GPCMD_READ_BUFFER_CAPACITY = 0x5C,GPCMD_READ_CDVD_CAPACITY = 0x25,GPCMD_READ_CD = 0xBE,GPCMD_READ_CD_MSF = 0xB9,GPCMD_READ_DISC_INFO = 0x51,GPCMD_READ_DVD_STRUCTURE = 0xAD,GPCMD_READ_FORMAT_CAPACITIES = 0x23,GPCMD_READ_HEADER = 0x44,GPCMD_READ_TRACK_RZONE_INFO = 0x52,GPCMD_READ_SUBCHANNEL = 0x42,GPCMD_READ_TOC_PMA_ATIP = 0x43,GPCMD_REPAIR_RZONE_TRACK = 0x58,GPCMD_REPORT_KEY = 0xA4,GPCMD_REQUEST_SENSE = 0x3,GPCMD_RESERVE_RZONE_TRACK = 0x53,GPCMD_SEND_CUE_SHEET = 0x5D,GPCMD_SCAN = 0xBA,GPCMD_SEEK = 0x2B,GPCMD_SEND_DVD_STRUCTURE = 0xBF,GPCMD_SEND_EVENT = 0xA2,GPCMD_SEND_KEY = 0xA3,GPCMD_SEND_OPC = 0x54,GPCMD_SET_READ_AHEAD = 0xA7,GPCMD_SET_STREAMING = 0xB6,GPCMD_START_STOP_UNIT = 0x1B,GPCMD_STOP_PLAY_SCAN = 0x4E,GPCMD_TEST_UNIT_READY = 0x0,GPCMD_VERIFY_10 = 0x2F,GPCMD_WRITE_10 = 0x2A,GPCMD_WRITE_12 = 0xAA,GPCMD_WRITE_AND_VERIFY_10 = 0x2E,GPCMD_WRITE_BUFFER = 0x3B,GPCMD_SET_SPEED = 0xBB,GPCMD_PLAYAUDIO_TI = 0x48,GPCMD_GET_MEDIA_STATUS = 0xDA,};
enum MACRO_GPROF {GPROF_STATE = 0,GPROF_COUNT = 1,GPROF_FROMS = 2,GPROF_TOS = 3,GPROF_GMONPARAM = 4,};
enum MACRO_GXset {GXset = 0xF,};
enum MACRO_GXxor {GXxor = 0x6,};
enum MACRO_HDSPM {HDSPM_MAX_CHANNELS = 64,HDSPM_ADDON_TCO = 1,HDSPM_MIXER_CHANNELS = 64,};
enum MACRO_HIPPI {HIPPI_ALEN = 6,HIPPI_ZLEN = 0,HIPPI_DATA_LEN = 65280,HIPPI_EXTENDED_SAP = 170,HIPPI_UI_CMD = 3,HIPPI_OUI_LEN = 3,};
enum MACRO_ICMP6 {ICMP6_FILTER = 1,ICMP6_FILTER_BLOCK = 1,ICMP6_FILTER_PASS = 2,ICMP6_FILTER_BLOCKOTHERS = 3,ICMP6_FILTER_PASSONLY = 4,ICMP6_DST_UNREACH = 1,ICMP6_PACKET_TOO_BIG = 2,ICMP6_TIME_EXCEEDED = 3,ICMP6_PARAM_PROB = 4,ICMP6_INFOMSG_MASK = 128,ICMP6_ECHO_REQUEST = 128,ICMP6_ECHO_REPLY = 129,};
enum MACRO_IDMAP {IDMAP_NAMESZ = 128,IDMAP_TYPE_USER = 0,IDMAP_TYPE_GROUP = 1,IDMAP_CONV_IDTONAME = 0,IDMAP_CONV_NAMETOID = 1,IDMAP_STATUS_INVALIDMSG = 1,IDMAP_STATUS_AGAIN = 2,IDMAP_STATUS_LOOKUPFAIL = 4,IDMAP_STATUS_SUCCESS = 8,};
enum MACRO_INFTL {INFTL_BINARY = 0x20000000,INFTL_BDTL = 0x40000000,INFTL_LAST = 0x80000000,};
enum MACRO_INPUT {INPUT_MUTE = 0x80,};
enum MACRO_IOCTL {IOCTL_EVTCHN_RESET = 17669,};
enum MACRO_IPOPT {IPOPT_COPY = 0x80,IPOPT_CLASS_MASK = 0x60,IPOPT_NUMBER_MASK = 0x1F,IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_MEASUREMENT = 0x40,IPOPT_RESERVED2 = 0x60,IPOPT_EOL = 0x0,IPOPT_END = 0x0,IPOPT_NOP = 0x1,IPOPT_NOOP = 0x1,IPOPT_RR = 0x7,IPOPT_TS = 0x44,IPOPT_TIMESTAMP = 0x44,IPOPT_SECURITY = 0x82,IPOPT_SEC = 0x82,IPOPT_LSRR = 0x83,IPOPT_SATID = 0x88,IPOPT_SID = 0x88,IPOPT_SSRR = 0x89,IPOPT_RA = 0x94,IPOPT_OPTVAL = 0x0,IPOPT_OLEN = 0x1,IPOPT_OFFSET = 0x2,IPOPT_MINOFF = 0x4,};
enum MACRO_IPSEC {IPSEC_PORT_ANY = 0,IPSEC_ULPROTO_ANY = 255,IPSEC_PROTO_ANY = 255,IPSEC_MANUAL_REQID_MAX = 16383,IPSEC_REPLAYWSIZE = 32,};
enum MACRO_IPSET {IPSET_PROTOCOL = 6,IPSET_MAXNAMELEN = 32,IPSET_INVALID_ID = 65535,};
enum MACRO_IPTOS {IPTOS_ECN_MASK = 0x3,IPTOS_ECN_NOT_ECT = 0x0,IPTOS_ECN_ECT1 = 0x1,IPTOS_ECN_ECT0 = 0x2,IPTOS_ECN_CE = 0x3,IPTOS_DSCP_MASK = 0xFC,IPTOS_DSCP_AF11 = 0x28,IPTOS_DSCP_AF12 = 0x30,IPTOS_DSCP_AF13 = 0x38,IPTOS_DSCP_AF21 = 0x48,IPTOS_DSCP_AF22 = 0x50,IPTOS_DSCP_AF23 = 0x58,IPTOS_DSCP_AF31 = 0x68,IPTOS_DSCP_AF32 = 0x70,IPTOS_DSCP_AF33 = 0x78,IPTOS_DSCP_AF41 = 0x88,IPTOS_DSCP_AF42 = 0x90,IPTOS_DSCP_AF43 = 0x98,IPTOS_DSCP_EF = 0xB8,IPTOS_CLASS_MASK = 0xE0,IPTOS_CLASS_CS0 = 0x0,IPTOS_CLASS_CS1 = 0x20,IPTOS_CLASS_CS2 = 0x40,IPTOS_CLASS_CS3 = 0x60,IPTOS_CLASS_CS4 = 0x80,IPTOS_CLASS_CS5 = 0xA0,IPTOS_CLASS_CS6 = 0xC0,IPTOS_CLASS_CS7 = 0xE0,IPTOS_CLASS_DEFAULT = 0x0,IPTOS_TOS_MASK = 0x1E,IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,IPTOS_LOWCOST = 0x2,IPTOS_MINCOST = 0x2,IPTOS_PREC_MASK = 0xE0,IPTOS_PREC_NETCONTROL = 0xE0,IPTOS_PREC_INTERNETCONTROL = 0xC0,IPTOS_PREC_CRITIC_ECP = 0xA0,IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x0,};
enum MACRO_IP_CT {IP_CT_TCP_FLAG_WINDOW_SCALE = 0x1,IP_CT_TCP_FLAG_SACK_PERM = 0x2,IP_CT_TCP_FLAG_CLOSE_INIT = 0x4,IP_CT_TCP_FLAG_BE_LIBERAL = 0x8,IP_CT_TCP_FLAG_DATA_UNACKNOWLEDGED = 0x10,IP_CT_TCP_FLAG_MAXACK_SET = 0x20,};
enum MACRO_IP_RF {IP_RF = 0x8000,IP_DF = 0x4000,IP_MF = 0x2000,IP_OFFMASK = 0x1FFF,};
enum MACRO_IP_VS {IP_VS_VERSION_CODE = 0x10201,IP_VS_SVC_F_PERSISTENT = 0x1,IP_VS_SVC_F_HASHED = 0x2,IP_VS_SVC_F_ONEPACKET = 0x4,IP_VS_SVC_F_SCHED1 = 0x8,IP_VS_SVC_F_SCHED2 = 0x10,IP_VS_SVC_F_SCHED3 = 0x20,IP_VS_SVC_F_SCHED_SH_FALLBACK = 0x8,IP_VS_SVC_F_SCHED_SH_PORT = 0x10,IP_VS_DEST_F_AVAILABLE = 0x1,IP_VS_DEST_F_OVERLOAD = 0x2,IP_VS_STATE_NONE = 0x0,IP_VS_STATE_MASTER = 0x1,IP_VS_STATE_BACKUP = 0x2,IP_VS_BASE_CTL = 0x480,IP_VS_SO_SET_NONE = 0x480,IP_VS_SO_SET_INSERT = 0x481,IP_VS_SO_SET_ADD = 0x482,IP_VS_SO_SET_EDIT = 0x483,IP_VS_SO_SET_DEL = 0x484,IP_VS_SO_SET_FLUSH = 0x485,IP_VS_SO_SET_LIST = 0x486,IP_VS_SO_SET_ADDDEST = 0x487,IP_VS_SO_SET_DELDEST = 0x488,IP_VS_SO_SET_EDITDEST = 0x489,IP_VS_SO_SET_TIMEOUT = 0x48A,IP_VS_SO_SET_STARTDAEMON = 0x48B,IP_VS_SO_SET_STOPDAEMON = 0x48C,IP_VS_SO_SET_RESTORE = 0x48D,IP_VS_SO_SET_SAVE = 0x48E,IP_VS_SO_SET_ZERO = 0x48F,IP_VS_SO_SET_MAX = 0x48F,IP_VS_SO_GET_VERSION = 0x480,IP_VS_SO_GET_INFO = 0x481,IP_VS_SO_GET_SERVICES = 0x482,IP_VS_SO_GET_SERVICE = 0x483,IP_VS_SO_GET_DESTS = 0x484,IP_VS_SO_GET_DEST = 0x485,IP_VS_SO_GET_TIMEOUT = 0x486,IP_VS_SO_GET_DAEMON = 0x487,IP_VS_SO_GET_MAX = 0x487,IP_VS_CONN_F_FWD_MASK = 0x7,IP_VS_CONN_F_MASQ = 0x0,IP_VS_CONN_F_LOCALNODE = 0x1,IP_VS_CONN_F_TUNNEL = 0x2,IP_VS_CONN_F_DROUTE = 0x3,IP_VS_CONN_F_BYPASS = 0x4,IP_VS_CONN_F_SYNC = 0x20,IP_VS_CONN_F_HASHED = 0x40,IP_VS_CONN_F_NOOUTPUT = 0x80,IP_VS_CONN_F_INACTIVE = 0x100,IP_VS_CONN_F_OUT_SEQ = 0x200,IP_VS_CONN_F_IN_SEQ = 0x400,IP_VS_CONN_F_SEQ_MASK = 0x600,IP_VS_CONN_F_NO_CPORT = 0x800,IP_VS_CONN_F_TEMPLATE = 0x1000,IP_VS_CONN_F_ONE_PACKET = 0x2000,IP_VS_CONN_F_BACKUP_MASK = 0x1F87,IP_VS_CONN_F_BACKUP_UPD_MASK = 0x700,IP_VS_CONN_F_NFCT = 0x10000,IP_VS_CONN_F_DEST_MASK = 0x12007,IP_VS_SCHEDNAME_MAXLEN = 0x10,IP_VS_PENAME_MAXLEN = 0x10,IP_VS_IFNAME_MAXLEN = 0x10,IP_VS_PEDATA_MAXLEN = 0xFF,};
enum MACRO_IRLMP {IRLMP_ENUMDEVICES = 1,IRLMP_IAS_SET = 2,IRLMP_IAS_QUERY = 3,IRLMP_HINTS_SET = 4,IRLMP_QOS_SET = 5,IRLMP_QOS_GET = 6,IRLMP_MAX_SDU_SIZE = 7,IRLMP_IAS_GET = 8,IRLMP_IAS_DEL = 9,IRLMP_HINT_MASK_SET = 10,IRLMP_WAITDEVICE = 11,};
enum MACRO_IRTTP {IRTTP_MAX_SDU_SIZE = 7,};
enum MACRO_ISOFS {ISOFS_BLOCK_BITS = 11,ISOFS_BLOCK_SIZE = 2048,};
enum MACRO_JFFS2 {JFFS2_OLD_MAGIC_BITMASK = 0x1984,JFFS2_MAGIC_BITMASK = 0x1985,};
enum MACRO_KCAPI {KCAPI_CMD_TRACE = 10,KCAPI_CMD_ADDCARD = 11,KCAPI_TRACE_OFF = 0,KCAPI_TRACE_SHORT_NO_DATA = 1,KCAPI_TRACE_FULL_NO_DATA = 2,KCAPI_TRACE_SHORT = 3,KCAPI_TRACE_FULL = 4,};
enum MACRO_KEXEC {KEXEC_ON_CRASH = 0x1,KEXEC_PRESERVE_CONTEXT = 0x2,KEXEC_ARCH_MASK = 0xFFFF0000,KEXEC_ARCH_DEFAULT = 0x0,KEXEC_ARCH_386 = 0x30000,KEXEC_ARCH_X86_64 = 0x3E0000,KEXEC_ARCH_PPC = 0x140000,KEXEC_ARCH_PPC64 = 0x150000,KEXEC_ARCH_IA_64 = 0x320000,KEXEC_ARCH_ARM = 0x280000,KEXEC_ARCH_S390 = 0x160000,KEXEC_ARCH_SH = 0x2A0000,KEXEC_ARCH_MIPS_LE = 0xA0000,KEXEC_ARCH_MIPS = 0x80000,KEXEC_SEGMENT_MAX = 0x10,};
enum MACRO_KTYPE {KTYPE_UNKNOWN = 0,KTYPE_84KEY = 1,KTYPE_101KEY = 2,KTYPE_OTHER = 3,KTYPE_XQUEUE = 4,};
enum MACRO_KVMIO {KVMIO = 0xAE,};
enum MACRO_K_BRL {K_BRL_BLANK = 3584,K_BRL_DOT1 = 3585,K_BRL_DOT2 = 3586,K_BRL_DOT3 = 3587,K_BRL_DOT4 = 3588,K_BRL_DOT5 = 3589,K_BRL_DOT6 = 3590,K_BRL_DOT7 = 3591,K_BRL_DOT8 = 3592,K_BRL_DOT9 = 3593,K_BRL_DOT10 = 3594,};
enum MACRO_LEAVE {LEAVE_INVITE = 0,};
enum MACRO_LEVEL {LEVEL_MULTIPATH = -4,LEVEL_LINEAR = -1,LEVEL_FAULTY = -5,LEVEL_NONE = -1000000,};
enum MACRO_LFLOW {LFLOW_OFF = 0,LFLOW_ON = 1,LFLOW_RESTART_ANY = 2,LFLOW_RESTART_XON = 3,};
enum MACRO_LINUX {LINUX_VERSION_CODE = 199433,};
enum MACRO_LM_ID {LM_ID_BASE = 0,LM_ID_NEWLM = -1,};
enum MACRO_LTALK {LTALK_HLEN = 1,LTALK_MTU = 600,LTALK_ALEN = 1,};
enum MACRO_L_SET {L_SET = 0,L_INCR = 1,L_XTND = 2,};
enum MACRO_MAGIC {_IO_MAGIC = 0xFBAD0000,_OLD_STDIO_MAGIC = 0xFABC0000,};
enum MACRO_MAJOR {UNNAMED_MAJOR = 0,MEM_MAJOR = 1,RAMDISK_MAJOR = 1,FLOPPY_MAJOR = 2,PTY_MASTER_MAJOR = 2,IDE0_MAJOR = 3,HD_MAJOR = 3,PTY_SLAVE_MAJOR = 3,TTY_MAJOR = 4,TTYAUX_MAJOR = 5,LP_MAJOR = 6,VCS_MAJOR = 7,LOOP_MAJOR = 7,SCSI_DISK0_MAJOR = 8,SCSI_TAPE_MAJOR = 9,MD_MAJOR = 9,MISC_MAJOR = 10,SCSI_CDROM_MAJOR = 11,MUX_MAJOR = 11,XT_DISK_MAJOR = 13,INPUT_MAJOR = 13,SOUND_MAJOR = 14,CDU31A_CDROM_MAJOR = 15,JOYSTICK_MAJOR = 15,GOLDSTAR_CDROM_MAJOR = 16,OPTICS_CDROM_MAJOR = 17,SANYO_CDROM_MAJOR = 18,CYCLADES_MAJOR = 19,CYCLADESAUX_MAJOR = 20,MITSUMI_X_CDROM_MAJOR = 20,MFM_ACORN_MAJOR = 21,SCSI_GENERIC_MAJOR = 21,IDE1_MAJOR = 22,DIGICU_MAJOR = 22,DIGI_MAJOR = 23,MITSUMI_CDROM_MAJOR = 23,CDU535_CDROM_MAJOR = 24,};
enum MACRO_MAXNS {MAXNS = 3,};
enum MACRO_MAXTC {MAXTC = 6,};
enum MACRO_MCAST {MCAST_JOIN_GROUP = 42,MCAST_BLOCK_SOURCE = 43,MCAST_UNBLOCK_SOURCE = 44,MCAST_LEAVE_GROUP = 45,MCAST_JOIN_SOURCE_GROUP = 46,MCAST_LEAVE_SOURCE_GROUP = 47,MCAST_MSFILTER = 48,};
enum MACRO_MEDIA {MEDIA_API_VERSION = 256,MEDIA_ENT_ID_FLAG_NEXT = 2147483648,MEDIA_ENT_TYPE_SHIFT = 16,MEDIA_ENT_TYPE_MASK = 16711680,MEDIA_ENT_SUBTYPE_MASK = 65535,MEDIA_ENT_T_DEVNODE = 65536,MEDIA_ENT_T_DEVNODE_V4L = 65537,MEDIA_ENT_T_DEVNODE_FB = 65538,MEDIA_ENT_T_DEVNODE_ALSA = 65539,MEDIA_ENT_T_DEVNODE_DVB = 65540,MEDIA_ENT_T_V4L2_SUBDEV = 131072,MEDIA_ENT_T_V4L2_SUBDEV_SENSOR = 131073,MEDIA_ENT_T_V4L2_SUBDEV_FLASH = 131074,MEDIA_ENT_T_V4L2_SUBDEV_LENS = 131075,MEDIA_ENT_T_V4L2_SUBDEV_DECODER = 131076,MEDIA_ENT_FL_DEFAULT = 1,MEDIA_PAD_FL_SINK = 1,MEDIA_PAD_FL_SOURCE = 2,MEDIA_LNK_FL_ENABLED = 1,MEDIA_LNK_FL_IMMUTABLE = 2,MEDIA_LNK_FL_DYNAMIC = 4,};
enum MACRO_MINIX {MINIX_SUPER_MAGIC2 = 0x138F,};
enum MACRO_MIXER {MIXER_MASTER_L = 0x0,MIXER_MASTER_R = 0x100,};
enum MACRO_MSDOS {MSDOS_DPB_BITS = 4,MSDOS_DPS_BITS = 4,MSDOS_LONGNAME = 256,MSDOS_ROOT_INO = 1,MSDOS_FSINFO_INO = 2,MSDOS_DIR_BITS = 5,};
enum MACRO_MTBSS {MTBSS = 26,};
enum MACRO_MTEOM {MTEOM = 12,};
enum MACRO_MTFSR {MTFSR = 3,MTBSR = 4,};
enum MACRO_MTFSS {MTFSS = 25,};
enum MACRO_MTREW {MTREW = 6,};
enum MACRO_MTWSM {MTWSM = 27,};
enum MACRO_MTYPE {MTYPE_MICROSOFT = 0,MTYPE_MOUSESYS = 1,MTYPE_MMSERIES = 2,MTYPE_LOGITECH = 3,MTYPE_BUSMOUSE = 4,MTYPE_LOGIMAN = 5,MTYPE_PS_2 = 6,MTYPE_MMHIT = 7,MTYPE_GLIDEPOINT = 8,MTYPE_IMSERIAL = 9,MTYPE_THINKING = 10,MTYPE_IMPS2 = 11,MTYPE_THINKINGPS2 = 12,MTYPE_MMANPLUSPS2 = 13,MTYPE_GLIDEPOINTPS2 = 14,MTYPE_NETPS2 = 15,MTYPE_NETSCROLLPS2 = 16,MTYPE_SYSMOUSE = 17,MTYPE_AUTOMOUSE = 18,MTYPE_ACECAD = 19,MTYPE_EXPPS2 = 20,MTYPE_XQUEUE = 127,MTYPE_OSMOUSE = 126,MTYPE_UNKNOWN = 125,};
enum MACRO_NDIAG {NDIAG_PROTO_ALL = 255,NDIAG_SHOW_MEMINFO = 1,NDIAG_SHOW_GROUPS = 2,NDIAG_SHOW_RING_CFG = 4,};
enum MACRO_NETDB {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NETEM {NETEM_DIST_SCALE = 8192,NETEM_DIST_MAX = 16384,};
enum MACRO_NF_BR {NF_BR_PRE_ROUTING = 0,NF_BR_LOCAL_IN = 1,NF_BR_FORWARD = 2,NF_BR_LOCAL_OUT = 3,NF_BR_POST_ROUTING = 4,NF_BR_BROUTING = 5,NF_BR_NUMHOOKS = 6,};
enum MACRO_NF_CT {NF_CT_EXPECT_PERMANENT = 0x1,NF_CT_EXPECT_INACTIVE = 0x2,NF_CT_EXPECT_USERSPACE = 0x4,};
enum MACRO_NF_DN {NF_DN_PRE_ROUTING = 0,NF_DN_LOCAL_IN = 1,NF_DN_FORWARD = 2,NF_DN_LOCAL_OUT = 3,NF_DN_POST_ROUTING = 4,NF_DN_HELLO = 5,NF_DN_ROUTE = 6,NF_DN_NUMHOOKS = 7,};
enum MACRO_NF_IP {NF_IP_PRE_ROUTING = 0,NF_IP_LOCAL_IN = 1,NF_IP_FORWARD = 2,NF_IP_LOCAL_OUT = 3,NF_IP_POST_ROUTING = 4,NF_IP_NUMHOOKS = 5,};
enum MACRO_NGREG {NGREG = 23,};
enum MACRO_NGRPS {NGRPS = 16,};
enum MACRO_NLMSG {NLMSG_ALIGNTO = 4,NLMSG_NOOP = 1,NLMSG_ERROR = 2,NLMSG_DONE = 3,NLMSG_OVERRUN = 4,NLMSG_MIN_TYPE = 16,};
enum MACRO_NLM_F {NLM_F_REQUEST = 1,NLM_F_MULTI = 2,NLM_F_ACK = 4,NLM_F_ECHO = 8,NLM_F_DUMP_INTR = 16,NLM_F_ROOT = 256,NLM_F_MATCH = 512,NLM_F_ATOMIC = 1024,NLM_F_DUMP = 768,NLM_F_REPLACE = 256,NLM_F_EXCL = 512,NLM_F_CREATE = 1024,NLM_F_APPEND = 2048,};
enum MACRO_NODEV {NODEV = -1,};
enum MACRO_NSIBM {NSIBM_NFS_NAME = 0x1,NSIBM_NFS_MODE = 0x2,NSIBM_NFS_GID = 0x4,NSIBM_NFS_NLINKS = 0x8,NSIBM_NFS_RDEV = 0x10,NSIBM_NFS_LINK = 0x20,NSIBM_NFS_CREATED = 0x40,NSIBM_NFS_UID = 0x80,NSIBM_NFS_ACSFLAG = 0x100,NSIBM_NFS_MYFLAG = 0x200,};
enum MACRO_NVRAM {NVRAM_INIT = 0x7040,NVRAM_SETCKS = 0x7041,NVRAM_FIRST_BYTE = 0xE,};
enum MACRO_NZERO {NZERO = 20,};
enum MACRO_N_TTY {N_TTY = 0,N_SLIP = 1,N_MOUSE = 2,N_PPP = 3,N_STRIP = 4,N_AX25 = 5,N_X25 = 6,N_6PACK = 7,N_MASC = 8,N_R3964 = 9,N_PROFIBUS_FDL = 10,N_IRDA = 11,N_SMSBLOCK = 12,N_HDLC = 13,N_SYNC_PPP = 14,N_HCI = 15,};
enum MACRO_OHWA0 {OHWA0_R4KEOP_CHECKED = 0x1,};
enum MACRO_OHWA1 {OHWA1_R4KEOP_CLEAN = 0x2,};
enum MACRO_OPOST {OPOST = 0x1,OLCUC = 0x2,ONLCR = 0x4,OCRNL = 0x8,ONOCR = 0x10,ONLRET = 0x20,OFILL = 0x40,OFDEL = 0x80,NLDLY = 0x100,};
enum MACRO_ORDER {__BYTE_ORDER = 1234,__FLOAT_WORD_ORDER = 1234,};
enum MACRO_PATCH {WAVE_PATCH = 0x4FD,GUS_PATCH = 0x4FD,WAVEFRONT_PATCH = 0x6FD,};
enum MACRO_PF_IA {PF_IA_64_NORECOV = 0x80000000,};
enum MACRO_PGACT {PGACT_NONE = 0,PGACT_NETRAND = 1,PGACT_DETERM = 2,};
enum MACRO_PHONE {PHONE_VENDOR_IXJ = 1,PHONE_VENDOR_QUICKNET = 1,PHONE_VENDOR_VOICETRONIX = 2,PHONE_VENDOR_ACULAB = 3,PHONE_VENDOR_DIGI = 4,PHONE_VENDOR_FRANKLIN = 5,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_POSIX {POSIX_FADV_NORMAL = 0,POSIX_FADV_RANDOM = 1,POSIX_FADV_SEQUENTIAL = 2,POSIX_FADV_WILLNEED = 3,POSIX_FADV_DONTNEED = 4,POSIX_FADV_NOREUSE = 5,};
enum MACRO_PPPOE {PPPOE_SES_HLEN = 8,};
enum MACRO_PRINT {PRINT_RAID_DEBUG = 0x913,};
enum MACRO_PROOT {PROOT = 3,HEXKEYBYTES = 48,KEYSIZE = 192,};
enum MACRO_PROTO {PROTO_IPX = 0x2B,PROTO_DNA_RT = 0x27,};
enum MACRO_PT_HP {PT_HP_TLS = 0x60000000,PT_HP_CORE_NONE = 0x60000001,PT_HP_CORE_VERSION = 0x60000002,PT_HP_CORE_KERNEL = 0x60000003,PT_HP_CORE_COMM = 0x60000004,PT_HP_CORE_PROC = 0x60000005,PT_HP_CORE_LOADABLE = 0x60000006,PT_HP_CORE_STACK = 0x60000007,PT_HP_CORE_SHM = 0x60000008,PT_HP_CORE_MMF = 0x60000009,PT_HP_PARALLEL = 0x60000010,PT_HP_FASTBIND = 0x60000011,PT_HP_OPT_ANNOT = 0x60000012,PT_HP_HSL_ANNOT = 0x60000013,PT_HP_STACK = 0x60000014,PT_PARISC_ARCHEXT = 0x70000000,PT_PARISC_UNWIND = 0x70000001,};
enum MACRO_PT_IA {PT_IA_64_ARCHEXT = 1879048192,PT_IA_64_UNWIND = 1879048193,PT_IA_64_HP_OPT_ANOT = 1610612754,PT_IA_64_HP_HSL_ANOT = 1610612755,PT_IA_64_HP_STACK = 1610612756,};
enum MACRO_QUEUE {QUEUE_FULL = 0x14,};
enum MACRO_QUIET {QUIET_FLAG = 32,};
enum MACRO_QUOTA {QUOTA_NL_NOWARN = 0,QUOTA_NL_IHARDWARN = 1,QUOTA_NL_ISOFTLONGWARN = 2,QUOTA_NL_ISOFTWARN = 3,QUOTA_NL_BHARDWARN = 4,QUOTA_NL_BSOFTLONGWARN = 5,QUOTA_NL_BSOFTWARN = 6,QUOTA_NL_IHARDBELOW = 7,QUOTA_NL_ISOFTBELOW = 8,QUOTA_NL_BHARDBELOW = 9,QUOTA_NL_BSOFTBELOW = 10,};
enum MACRO_R3964 {R3964_ENABLE_SIGNALS = 0x5301,R3964_SETPRIORITY = 0x5302,R3964_USE_BCC = 0x5303,R3964_READ_TELEGRAM = 0x5304,R3964_MASTER = 0x0,R3964_SLAVE = 0x1,R3964_SIG_ACK = 0x1,R3964_SIG_DATA = 0x2,R3964_SIG_ALL = 0xF,R3964_SIG_NONE = 0x0,R3964_USE_SIGIO = 0x1000,R3964_MAX_MSG_COUNT = 0x20,R3964_OK = 0x0,R3964_TX_FAIL = 0xFFFFFFFF,R3964_OVERFLOW = 0xFFFFFFFE,R3964_MTU = 0x100,};
enum MACRO_RANDR {RANDR_MAJOR = 1,RANDR_MINOR = 4,};
enum MACRO_RCODE {RCODE_COMPLETE = 0x0,RCODE_CONFLICT_ERROR = 0x4,RCODE_DATA_ERROR = 0x5,RCODE_TYPE_ERROR = 0x6,RCODE_ADDRESS_ERROR = 0x7,RCODE_SEND_ERROR = 0x10,RCODE_CANCELLED = 0x11,RCODE_BUSY = 0x12,RCODE_GENERATION = 0x13,RCODE_NO_ACK = 0x14,};
enum MACRO_RES_F {RES_F_VC = 0x1,RES_F_CONN = 0x2,RES_F_EDNS0ERR = 0x4,RES_EXHAUSTIVE = 0x1,RES_INIT = 0x1,RES_DEBUG = 0x2,RES_AAONLY = 0x4,RES_USEVC = 0x8,RES_PRIMARY = 0x10,RES_IGNTC = 0x20,RES_RECURSE = 0x40,RES_DEFNAMES = 0x80,RES_STAYOPEN = 0x100,RES_DNSRCH = 0x200,RES_INSECURE1 = 0x400,RES_INSECURE2 = 0x800,RES_NOALIASES = 0x1000,RES_USE_INET6 = 0x2000,RES_ROTATE = 0x4000,RES_NOCHECKNAME = 0x8000,RES_KEEPTSIG = 0x10000,RES_BLAST = 0x20000,RES_USEBSTRING = 0x40000,RES_NOIP6DOTINT = 0x80000,RES_USE_EDNS0 = 0x100000,RES_SNGLKUP = 0x200000,RES_SNGLKUPREOP = 0x400000,RES_USE_DNSSEC = 0x800000,RES_NOTLDQUERY = 0x1000000,RES_DEFAULT = 0x802C0,RES_PRF_STATS = 0x1,RES_PRF_UPDATE = 0x2,RES_PRF_CLASS = 0x4,RES_PRF_CMD = 0x8,RES_PRF_QUES = 0x10,RES_PRF_ANS = 0x20,RES_PRF_AUTH = 0x40,RES_PRF_ADD = 0x80,RES_PRF_HEAD1 = 0x100,RES_PRF_HEAD2 = 0x200,RES_PRF_TTLID = 0x400,RES_PRF_HEADX = 0x800,RES_PRF_QUERY = 0x1000,RES_PRF_REPLY = 0x2000,RES_PRF_INIT = 0x4000,};
enum MACRO_RETRY {RETRY_1 = 0x0,RETRY_X = 0x1,RETRY_A = 0x2,RETRY_B = 0x3,};
enum MACRO_ROMFH {ROMFH_TYPE = 7,ROMFH_HRD = 0,ROMFH_DIR = 1,ROMFH_REG = 2,ROMFH_SYM = 3,ROMFH_BLK = 4,ROMFH_CHR = 5,ROMFH_SCK = 6,ROMFH_FIF = 7,ROMFH_EXEC = 8,ROMFH_SIZE = 16,ROMFH_PAD = 15,ROMFH_MASK = -16,};
enum MACRO_ROMFS {ROMFS_MAGIC = 0x7275,ROMFS_MAXFN = 0x80,};
enum MACRO_RTEXT {RTEXT_FILTER_VF = 1,RTEXT_FILTER_BRVLAN = 2,};
enum MACRO_RTMSG {RTMSG_NEWDEVICE = 0x11,RTMSG_DELDEVICE = 0x12,RTMSG_NEWROUTE = 0x21,RTMSG_DELROUTE = 0x22,RTMSG_NEWRULE = 0x31,RTMSG_DELRULE = 0x32,RTMSG_CONTROL = 0x40,RTMSG_AR_FAILED = 0x51,};
enum MACRO_RTSIG {RTSIG_MAX = 32,_POSIX_THREAD_KEYS_MAX = 128,PTHREAD_KEYS_MAX = 1024,};
enum MACRO_RX_OK {RX_OK = 0,RX_CRC_ERROR = 1,};
enum MACRO_R_390 {R_390_NONE = 0,R_390_8 = 1,R_390_12 = 2,R_390_16 = 3,R_390_32 = 4,R_390_PC32 = 5,R_390_GOT12 = 6,R_390_GOT32 = 7,R_390_PLT32 = 8,R_390_COPY = 9,R_390_GLOB_DAT = 10,R_390_JMP_SLOT = 11,R_390_RELATIVE = 12,R_390_GOTOFF32 = 13,R_390_GOTPC = 14,R_390_GOT16 = 15,R_390_PC16 = 16,R_390_PC16DBL = 17,R_390_PLT16DBL = 18,R_390_PC32DBL = 19,R_390_PLT32DBL = 20,R_390_GOTPCDBL = 21,R_390_64 = 22,R_390_PC64 = 23,R_390_GOT64 = 24,R_390_PLT64 = 25,R_390_GOTENT = 26,R_390_GOTOFF16 = 27,R_390_GOTOFF64 = 28,R_390_GOTPLT12 = 29,R_390_GOTPLT16 = 30,R_390_GOTPLT32 = 31,R_390_GOTPLT64 = 32,R_390_GOTPLTENT = 33,R_390_PLTOFF16 = 34,R_390_PLTOFF32 = 35,R_390_PLTOFF64 = 36,R_390_TLS_LOAD = 37,R_390_TLS_GDCALL = 38,R_390_TLS_LDCALL = 39,R_390_TLS_GD32 = 40,R_390_TLS_GD64 = 41,R_390_TLS_GOTIE12 = 42,R_390_TLS_GOTIE32 = 43,R_390_TLS_GOTIE64 = 44,R_390_TLS_LDM32 = 45,R_390_TLS_LDM64 = 46,R_390_TLS_IE32 = 47,R_390_TLS_IE64 = 48,R_390_TLS_IEENT = 49,R_390_TLS_LE32 = 50,R_390_TLS_LE64 = 51,R_390_TLS_LDO32 = 52,R_390_TLS_LDO64 = 53,R_390_TLS_DTPMOD = 54,R_390_TLS_DTPOFF = 55,R_390_TLS_TPOFF = 56,R_390_20 = 57,R_390_GOT20 = 58,R_390_GOTPLT20 = 59,R_390_TLS_GOTIE20 = 60,R_390_IRELATIVE = 61,R_390_NUM = 62,R_CRIS_NONE = 0,R_CRIS_8 = 1,R_CRIS_16 = 2,R_CRIS_32 = 3,R_CRIS_8_PCREL = 4,R_CRIS_16_PCREL = 5,R_CRIS_32_PCREL = 6,R_CRIS_GNU_VTINHERIT = 7,R_CRIS_GNU_VTENTRY = 8,R_CRIS_COPY = 9,R_CRIS_GLOB_DAT = 10,R_CRIS_JUMP_SLOT = 11,R_CRIS_RELATIVE = 12,R_CRIS_16_GOT = 13,R_CRIS_32_GOT = 14,R_CRIS_16_GOTPLT = 15,R_CRIS_32_GOTPLT = 16,R_CRIS_32_GOTREL = 17,R_CRIS_32_PLT_GOTREL = 18,R_CRIS_32_PLT_PCREL = 19,R_CRIS_NUM = 20,R_X86_64_NONE = 0,R_X86_64_64 = 1,R_X86_64_PC32 = 2,R_X86_64_GOT32 = 3,R_X86_64_PLT32 = 4,R_X86_64_COPY = 5,R_X86_64_GLOB_DAT = 6,R_X86_64_JUMP_SLOT = 7,R_X86_64_RELATIVE = 8,R_X86_64_GOTPCREL = 9,R_X86_64_32 = 10,R_X86_64_32S = 11,R_X86_64_16 = 12,R_X86_64_PC16 = 13,R_X86_64_8 = 14,R_X86_64_PC8 = 15,R_X86_64_DTPMOD64 = 16,R_X86_64_DTPOFF64 = 17,R_X86_64_TPOFF64 = 18,R_X86_64_TLSGD = 19,R_X86_64_TLSLD = 20,R_X86_64_DTPOFF32 = 21,R_X86_64_GOTTPOFF = 22,R_X86_64_TPOFF32 = 23,R_X86_64_PC64 = 24,R_X86_64_GOTOFF64 = 25,R_X86_64_GOTPC32 = 26,R_X86_64_GOT64 = 27,R_X86_64_GOTPCREL64 = 28,R_X86_64_GOTPC64 = 29,R_X86_64_GOTPLT64 = 30,R_X86_64_PLTOFF64 = 31,R_X86_64_SIZE32 = 32,R_X86_64_SIZE64 = 33,R_X86_64_GOTPC32_TLSDESC = 34,R_X86_64_TLSDESC_CALL = 35,R_X86_64_TLSDESC = 36,R_X86_64_IRELATIVE = 37,R_X86_64_RELATIVE64 = 38,R_X86_64_NUM = 39,R_MN10300_NONE = 0,R_MN10300_32 = 1,R_MN10300_16 = 2,R_MN10300_8 = 3,R_MN10300_PCREL32 = 4,R_MN10300_PCREL16 = 5,R_MN10300_PCREL8 = 6,R_MN10300_GNU_VTINHERIT = 7,R_MN10300_GNU_VTENTRY = 8,R_MN10300_24 = 9,R_MN10300_GOTPC32 = 10,R_MN10300_GOTPC16 = 11,R_MN10300_GOTOFF32 = 12,R_MN10300_GOTOFF24 = 13,R_MN10300_GOTOFF16 = 14,R_MN10300_PLT32 = 15,R_MN10300_PLT16 = 16,R_MN10300_GOT32 = 17,R_MN10300_GOT24 = 18,R_MN10300_GOT16 = 19,R_MN10300_COPY = 20,R_MN10300_GLOB_DAT = 21,R_MN10300_JMP_SLOT = 22,R_MN10300_RELATIVE = 23,R_MN10300_TLS_GD = 24,R_MN10300_TLS_LD = 25,R_MN10300_TLS_LDO = 26,R_MN10300_TLS_GOTIE = 27,R_MN10300_TLS_IE = 28,R_MN10300_TLS_LE = 29,R_MN10300_TLS_DTPMOD = 30,R_MN10300_TLS_DTPOFF = 31,R_MN10300_TLS_TPOFF = 32,R_MN10300_SYM_DIFF = 33,R_MN10300_ALIGN = 34,R_MN10300_NUM = 35,R_M32R_NONE = 0,R_M32R_16 = 1,R_M32R_32 = 2,R_M32R_24 = 3,R_M32R_10_PCREL = 4,R_M32R_18_PCREL = 5,R_M32R_26_PCREL = 6,R_M32R_HI16_ULO = 7,R_M32R_HI16_SLO = 8,R_M32R_LO16 = 9,R_M32R_SDA16 = 10,R_M32R_GNU_VTINHERIT = 11,R_M32R_GNU_VTENTRY = 12,R_M32R_16_RELA = 33,R_M32R_32_RELA = 34,R_M32R_24_RELA = 35,R_M32R_10_PCREL_RELA = 36,R_M32R_18_PCREL_RELA = 37,R_M32R_26_PCREL_RELA = 38,R_M32R_HI16_ULO_RELA = 39,R_M32R_HI16_SLO_RELA = 40,R_M32R_LO16_RELA = 41,R_M32R_SDA16_RELA = 42,R_M32R_RELA_GNU_VTINHERIT = 43,R_M32R_RELA_GNU_VTENTRY = 44,R_M32R_REL32 = 45,R_M32R_GOT24 = 48,R_M32R_26_PLTREL = 49,R_M32R_COPY = 50,R_M32R_GLOB_DAT = 51,R_M32R_JMP_SLOT = 52,R_M32R_RELATIVE = 53,R_M32R_GOTOFF = 54,R_M32R_GOTPC24 = 55,R_M32R_GOT16_HI_ULO = 56,R_M32R_GOT16_HI_SLO = 57,R_M32R_GOT16_LO = 58,R_M32R_GOTPC_HI_ULO = 59,R_M32R_GOTPC_HI_SLO = 60,R_M32R_GOTPC_LO = 61,R_M32R_GOTOFF_HI_ULO = 62,R_M32R_GOTOFF_HI_SLO = 63,R_M32R_GOTOFF_LO = 64,R_M32R_NUM = 256,R_TILEPRO_NONE = 0,R_TILEPRO_32 = 1,R_TILEPRO_16 = 2,R_TILEPRO_8 = 3,R_TILEPRO_32_PCREL = 4,R_TILEPRO_16_PCREL = 5,R_TILEPRO_8_PCREL = 6,R_TILEPRO_LO16 = 7,R_TILEPRO_HI16 = 8,R_TILEPRO_HA16 = 9,R_TILEPRO_COPY = 10,R_TILEPRO_GLOB_DAT = 11,R_TILEPRO_JMP_SLOT = 12,R_TILEPRO_RELATIVE = 13,R_TILEPRO_BROFF_X1 = 14,R_TILEPRO_JOFFLONG_X1 = 15,R_TILEPRO_JOFFLONG_X1_PLT = 16,R_TILEPRO_IMM8_X0 = 17,R_TILEPRO_IMM8_Y0 = 18,R_TILEPRO_IMM8_X1 = 19,R_TILEPRO_IMM8_Y1 = 20,R_TILEPRO_MT_IMM15_X1 = 21,R_TILEPRO_MF_IMM15_X1 = 22,R_TILEPRO_IMM16_X0 = 23,R_TILEPRO_IMM16_X1 = 24,R_TILEPRO_IMM16_X0_LO = 25,R_TILEPRO_IMM16_X1_LO = 26,R_TILEPRO_IMM16_X0_HI = 27,R_TILEPRO_IMM16_X1_HI = 28,R_TILEPRO_IMM16_X0_HA = 29,R_TILEPRO_IMM16_X1_HA = 30,R_TILEPRO_IMM16_X0_PCREL = 31,R_TILEPRO_IMM16_X1_PCREL = 32,R_TILEPRO_IMM16_X0_LO_PCREL = 33,R_TILEPRO_IMM16_X1_LO_PCREL = 34,R_TILEPRO_IMM16_X0_HI_PCREL = 35,R_TILEPRO_IMM16_X1_HI_PCREL = 36,R_TILEPRO_IMM16_X0_HA_PCREL = 37,R_TILEPRO_IMM16_X1_HA_PCREL = 38,R_TILEPRO_IMM16_X0_GOT = 39,R_TILEPRO_IMM16_X1_GOT = 40,R_TILEPRO_IMM16_X0_GOT_LO = 41,R_TILEPRO_IMM16_X1_GOT_LO = 42,R_TILEPRO_IMM16_X0_GOT_HI = 43,R_TILEPRO_IMM16_X1_GOT_HI = 44,R_TILEPRO_IMM16_X0_GOT_HA = 45,R_TILEPRO_IMM16_X1_GOT_HA = 46,R_TILEPRO_MMSTART_X0 = 47,R_TILEPRO_MMEND_X0 = 48,R_TILEPRO_MMSTART_X1 = 49,R_TILEPRO_MMEND_X1 = 50,R_TILEPRO_SHAMT_X0 = 51,R_TILEPRO_SHAMT_X1 = 52,R_TILEPRO_SHAMT_Y0 = 53,R_TILEPRO_SHAMT_Y1 = 54,R_TILEPRO_DEST_IMM8_X1 = 55,R_TILEPRO_TLS_GD_CALL = 60,R_TILEPRO_IMM8_X0_TLS_GD_ADD = 61,R_TILEPRO_IMM8_X1_TLS_GD_ADD = 62,R_TILEPRO_IMM8_Y0_TLS_GD_ADD = 63,R_TILEPRO_IMM8_Y1_TLS_GD_ADD = 64,R_TILEPRO_TLS_IE_LOAD = 65,R_TILEPRO_IMM16_X0_TLS_GD = 66,R_TILEPRO_IMM16_X1_TLS_GD = 67,R_TILEPRO_IMM16_X0_TLS_GD_LO = 68,R_TILEPRO_IMM16_X1_TLS_GD_LO = 69,R_TILEPRO_IMM16_X0_TLS_GD_HI = 70,R_TILEPRO_IMM16_X1_TLS_GD_HI = 71,R_TILEPRO_IMM16_X0_TLS_GD_HA = 72,R_TILEPRO_IMM16_X1_TLS_GD_HA = 73,R_TILEPRO_IMM16_X0_TLS_IE = 74,R_TILEPRO_IMM16_X1_TLS_IE = 75,R_TILEPRO_IMM16_X0_TLS_IE_LO = 76,R_TILEPRO_IMM16_X1_TLS_IE_LO = 77,R_TILEPRO_IMM16_X0_TLS_IE_HI = 78,R_TILEPRO_IMM16_X1_TLS_IE_HI = 79,R_TILEPRO_IMM16_X0_TLS_IE_HA = 80,R_TILEPRO_IMM16_X1_TLS_IE_HA = 81,R_TILEPRO_TLS_DTPMOD32 = 82,R_TILEPRO_TLS_DTPOFF32 = 83,R_TILEPRO_TLS_TPOFF32 = 84,R_TILEPRO_IMM16_X0_TLS_LE = 85,R_TILEPRO_IMM16_X1_TLS_LE = 86,R_TILEPRO_IMM16_X0_TLS_LE_LO = 87,R_TILEPRO_IMM16_X1_TLS_LE_LO = 88,R_TILEPRO_IMM16_X0_TLS_LE_HI = 89,R_TILEPRO_IMM16_X1_TLS_LE_HI = 90,R_TILEPRO_IMM16_X0_TLS_LE_HA = 91,R_TILEPRO_IMM16_X1_TLS_LE_HA = 92,R_TILEPRO_GNU_VTINHERIT = 128,R_TILEPRO_GNU_VTENTRY = 129,R_TILEPRO_NUM = 130,R_TILEGX_NONE = 0,R_TILEGX_64 = 1,R_TILEGX_32 = 2,R_TILEGX_16 = 3,R_TILEGX_8 = 4,R_TILEGX_64_PCREL = 5,R_TILEGX_32_PCREL = 6,R_TILEGX_16_PCREL = 7,R_TILEGX_8_PCREL = 8,R_TILEGX_HW0 = 9,R_TILEGX_HW1 = 10,R_TILEGX_HW2 = 11,R_TILEGX_HW3 = 12,R_TILEGX_HW0_LAST = 13,R_TILEGX_HW1_LAST = 14,R_TILEGX_HW2_LAST = 15,R_TILEGX_COPY = 16,R_TILEGX_GLOB_DAT = 17,R_TILEGX_JMP_SLOT = 18,R_TILEGX_RELATIVE = 19,R_TILEGX_BROFF_X1 = 20,R_TILEGX_JUMPOFF_X1 = 21,R_TILEGX_JUMPOFF_X1_PLT = 22,R_TILEGX_IMM8_X0 = 23,R_TILEGX_IMM8_Y0 = 24,R_TILEGX_IMM8_X1 = 25,R_TILEGX_IMM8_Y1 = 26,R_TILEGX_DEST_IMM8_X1 = 27,R_TILEGX_MT_IMM14_X1 = 28,R_TILEGX_MF_IMM14_X1 = 29,R_TILEGX_MMSTART_X0 = 30,R_TILEGX_MMEND_X0 = 31,R_TILEGX_SHAMT_X0 = 32,R_TILEGX_SHAMT_X1 = 33,R_TILEGX_SHAMT_Y0 = 34,R_TILEGX_SHAMT_Y1 = 35,R_TILEGX_IMM16_X0_HW0 = 36,R_TILEGX_IMM16_X1_HW0 = 37,R_TILEGX_IMM16_X0_HW1 = 38,R_TILEGX_IMM16_X1_HW1 = 39,R_TILEGX_IMM16_X0_HW2 = 40,R_TILEGX_IMM16_X1_HW2 = 41,R_TILEGX_IMM16_X0_HW3 = 42,R_TILEGX_IMM16_X1_HW3 = 43,R_TILEGX_IMM16_X0_HW0_LAST = 44,R_TILEGX_IMM16_X1_HW0_LAST = 45,R_TILEGX_IMM16_X0_HW1_LAST = 46,R_TILEGX_IMM16_X1_HW1_LAST = 47,R_TILEGX_IMM16_X0_HW2_LAST = 48,R_TILEGX_IMM16_X1_HW2_LAST = 49,R_TILEGX_IMM16_X0_HW0_PCREL = 50,R_TILEGX_IMM16_X1_HW0_PCREL = 51,R_TILEGX_IMM16_X0_HW1_PCREL = 52,R_TILEGX_IMM16_X1_HW1_PCREL = 53,R_TILEGX_IMM16_X0_HW2_PCREL = 54,R_TILEGX_IMM16_X1_HW2_PCREL = 55,R_TILEGX_IMM16_X0_HW3_PCREL = 56,R_TILEGX_IMM16_X1_HW3_PCREL = 57,R_TILEGX_IMM16_X0_HW0_LAST_PCREL = 58,R_TILEGX_IMM16_X1_HW0_LAST_PCREL = 59,R_TILEGX_IMM16_X0_HW1_LAST_PCREL = 60,R_TILEGX_IMM16_X1_HW1_LAST_PCREL = 61,R_TILEGX_IMM16_X0_HW2_LAST_PCREL = 62,R_TILEGX_IMM16_X1_HW2_LAST_PCREL = 63,R_TILEGX_IMM16_X0_HW0_GOT = 64,R_TILEGX_IMM16_X1_HW0_GOT = 65,R_TILEGX_IMM16_X0_HW0_PLT_PCREL = 66,R_TILEGX_IMM16_X1_HW0_PLT_PCREL = 67,R_TILEGX_IMM16_X0_HW1_PLT_PCREL = 68,R_TILEGX_IMM16_X1_HW1_PLT_PCREL = 69,R_TILEGX_IMM16_X0_HW2_PLT_PCREL = 70,R_TILEGX_IMM16_X1_HW2_PLT_PCREL = 71,R_TILEGX_IMM16_X0_HW0_LAST_GOT = 72,R_TILEGX_IMM16_X1_HW0_LAST_GOT = 73,R_TILEGX_IMM16_X0_HW1_LAST_GOT = 74,R_TILEGX_IMM16_X1_HW1_LAST_GOT = 75,R_TILEGX_IMM16_X0_HW3_PLT_PCREL = 76,R_TILEGX_IMM16_X1_HW3_PLT_PCREL = 77,R_TILEGX_IMM16_X0_HW0_TLS_GD = 78,R_TILEGX_IMM16_X1_HW0_TLS_GD = 79,R_TILEGX_IMM16_X0_HW0_TLS_LE = 80,R_TILEGX_IMM16_X1_HW0_TLS_LE = 81,R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE = 82,R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE = 83,R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE = 84,R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE = 85,R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD = 86,R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD = 87,R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD = 88,R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD = 89,R_TILEGX_IMM16_X0_HW0_TLS_IE = 92,R_TILEGX_IMM16_X1_HW0_TLS_IE = 93,R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL = 94,R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL = 95,R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL = 96,R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL = 97,R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL = 98,R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL = 99,R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE = 100,R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE = 101,R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE = 102,R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE = 103,R_TILEGX_TLS_DTPMOD64 = 106,R_TILEGX_TLS_DTPOFF64 = 107,R_TILEGX_TLS_TPOFF64 = 108,R_TILEGX_TLS_DTPMOD32 = 109,R_TILEGX_TLS_DTPOFF32 = 110,R_TILEGX_TLS_TPOFF32 = 111,R_TILEGX_TLS_GD_CALL = 112,R_TILEGX_IMM8_X0_TLS_GD_ADD = 113,R_TILEGX_IMM8_X1_TLS_GD_ADD = 114,R_TILEGX_IMM8_Y0_TLS_GD_ADD = 115,R_TILEGX_IMM8_Y1_TLS_GD_ADD = 116,R_TILEGX_TLS_IE_LOAD = 117,R_TILEGX_IMM8_X0_TLS_ADD = 118,R_TILEGX_IMM8_X1_TLS_ADD = 119,R_TILEGX_IMM8_Y0_TLS_ADD = 120,R_TILEGX_IMM8_Y1_TLS_ADD = 121,R_TILEGX_GNU_VTINHERIT = 128,R_TILEGX_GNU_VTENTRY = 129,R_TILEGX_NUM = 130,};
enum MACRO_R_PPC {R_PPC_NONE = 0,R_PPC_ADDR32 = 1,R_PPC_ADDR24 = 2,R_PPC_ADDR16 = 3,R_PPC_ADDR16_LO = 4,R_PPC_ADDR16_HI = 5,R_PPC_ADDR16_HA = 6,R_PPC_ADDR14 = 7,R_PPC_ADDR14_BRTAKEN = 8,R_PPC_ADDR14_BRNTAKEN = 9,R_PPC_REL24 = 10,R_PPC_REL14 = 11,R_PPC_REL14_BRTAKEN = 12,R_PPC_REL14_BRNTAKEN = 13,R_PPC_GOT16 = 14,R_PPC_GOT16_LO = 15,R_PPC_GOT16_HI = 16,R_PPC_GOT16_HA = 17,R_PPC_PLTREL24 = 18,R_PPC_COPY = 19,R_PPC_GLOB_DAT = 20,R_PPC_JMP_SLOT = 21,R_PPC_RELATIVE = 22,R_PPC_LOCAL24PC = 23,R_PPC_UADDR32 = 24,R_PPC_UADDR16 = 25,R_PPC_REL32 = 26,R_PPC_PLT32 = 27,R_PPC_PLTREL32 = 28,R_PPC_PLT16_LO = 29,R_PPC_PLT16_HI = 30,R_PPC_PLT16_HA = 31,R_PPC_SDAREL16 = 32,R_PPC_SECTOFF = 33,R_PPC_SECTOFF_LO = 34,R_PPC_SECTOFF_HI = 35,R_PPC_SECTOFF_HA = 36,R_PPC_TLS = 67,R_PPC_DTPMOD32 = 68,R_PPC_TPREL16 = 69,R_PPC_TPREL16_LO = 70,R_PPC_TPREL16_HI = 71,R_PPC_TPREL16_HA = 72,R_PPC_TPREL32 = 73,R_PPC_DTPREL16 = 74,R_PPC_DTPREL16_LO = 75,R_PPC_DTPREL16_HI = 76,R_PPC_DTPREL16_HA = 77,R_PPC_DTPREL32 = 78,R_PPC_GOT_TLSGD16 = 79,R_PPC_GOT_TLSGD16_LO = 80,R_PPC_GOT_TLSGD16_HI = 81,R_PPC_GOT_TLSGD16_HA = 82,R_PPC_GOT_TLSLD16 = 83,R_PPC_GOT_TLSLD16_LO = 84,R_PPC_GOT_TLSLD16_HI = 85,R_PPC_GOT_TLSLD16_HA = 86,R_PPC_GOT_TPREL16 = 87,R_PPC_GOT_TPREL16_LO = 88,R_PPC_GOT_TPREL16_HI = 89,R_PPC_GOT_TPREL16_HA = 90,R_PPC_GOT_DTPREL16 = 91,R_PPC_GOT_DTPREL16_LO = 92,R_PPC_GOT_DTPREL16_HI = 93,R_PPC_GOT_DTPREL16_HA = 94,R_PPC_EMB_NADDR32 = 101,R_PPC_EMB_NADDR16 = 102,R_PPC_EMB_NADDR16_LO = 103,R_PPC_EMB_NADDR16_HI = 104,R_PPC_EMB_NADDR16_HA = 105,R_PPC_EMB_SDAI16 = 106,R_PPC_EMB_SDA2I16 = 107,R_PPC_EMB_SDA2REL = 108,R_PPC_EMB_SDA21 = 109,R_PPC_EMB_MRKREF = 110,R_PPC_EMB_RELSEC16 = 111,R_PPC_EMB_RELST_LO = 112,R_PPC_EMB_RELST_HI = 113,R_PPC_EMB_RELST_HA = 114,R_PPC_EMB_BIT_FLD = 115,R_PPC_EMB_RELSDA = 116,R_PPC_DIAB_SDA21_LO = 180,R_PPC_DIAB_SDA21_HI = 181,R_PPC_DIAB_SDA21_HA = 182,R_PPC_DIAB_RELSDA_LO = 183,R_PPC_DIAB_RELSDA_HI = 184,R_PPC_DIAB_RELSDA_HA = 185,R_PPC_IRELATIVE = 248,R_PPC_REL16 = 249,R_PPC_REL16_LO = 250,R_PPC_REL16_HI = 251,R_PPC_REL16_HA = 252,R_PPC_TOC16 = 255,};
enum MACRO_SCHED {SCHED_OTHER = 0,SCHED_FIFO = 1,SCHED_RR = 2,SCHED_BATCH = 3,SCHED_IDLE = 5,SCHED_RESET_ON_FORK = 1073741824,};
enum MACRO_SCODE {SCODE_100 = 0x0,SCODE_200 = 0x1,SCODE_400 = 0x2,SCODE_800 = 0x3,SCODE_1600 = 0x4,SCODE_3200 = 0x5,SCODE_BETA = 0x3,};
enum MACRO_SCOPE {SCOPE_DELIMITER = 37,};
enum MACRO_SC_MP {SC_MP_PROT = 0x200,SC_REJ_MP_PROT = 0x400,SC_OUT_SHORT_SEQ = 0x800,SC_IN_SHORT_SEQ = 0x4000,SC_DECOMP_ON = 0x1,SC_COMP_ON = 0x2,SC_DECOMP_DISCARD = 0x4,SC_COMP_DISCARD = 0x8,SC_LINK_DECOMP_ON = 0x10,SC_LINK_COMP_ON = 0x20,SC_LINK_DECOMP_DISCARD = 0x40,SC_LINK_COMP_DISCARD = 0x80,};
enum MACRO_SELNL {SELNL_MSG_BASE = 0x10,SELNL_GRP_NONE = 0x0,SELNL_GRP_AVC = 0x1,SELNL_GRP_ALL = 0xFFFFFFFF,};
enum MACRO_SERIO {SERIO_TIMEOUT = 1,SERIO_PARITY = 2,SERIO_FRAME = 4,SERIO_XT = 0,SERIO_8042 = 1,SERIO_RS232 = 2,SERIO_HIL_MLC = 3,SERIO_PS_PSTHRU = 5,SERIO_8042_XL = 6,SERIO_UNKNOWN = 0,SERIO_MSC = 1,SERIO_SUN = 2,SERIO_MS = 3,SERIO_MP = 4,SERIO_MZ = 5,SERIO_MZP = 6,SERIO_MZPP = 7,SERIO_VSXXXAA = 8,SERIO_SUNKBD = 16,SERIO_WARRIOR = 24,SERIO_SPACEORB = 25,SERIO_MAGELLAN = 26,SERIO_SPACEBALL = 27,SERIO_GUNZE = 28,SERIO_IFORCE = 29,SERIO_STINGER = 30,SERIO_NEWTON = 31,SERIO_STOWAWAY = 32,SERIO_H3600 = 33,SERIO_PS2SER = 34,SERIO_TWIDKBD = 35,SERIO_TWIDJOY = 36,SERIO_HIL = 37,SERIO_SNES232 = 38,SERIO_SEMTECH = 39,SERIO_LKKBD = 40,SERIO_ELO = 41,SERIO_MICROTOUCH = 48,SERIO_PENMOUNT = 49,SERIO_TOUCHRIGHT = 50,SERIO_TOUCHWIN = 51,SERIO_TAOSEVM = 52,SERIO_FUJITSU = 53,SERIO_ZHENHUA = 54,SERIO_INEXIO = 55,SERIO_TOUCHIT213 = 56,SERIO_W8001 = 57,SERIO_DYNAPRO = 58,SERIO_HAMPSHIRE = 59,SERIO_PS2MULT = 60,SERIO_TSC40 = 61,};
enum MACRO_SETUP {SETUP_NONE = 0,SETUP_E820_EXT = 1,SETUP_DTB = 2,SETUP_PCI = 3,};
enum MACRO_SHAPE {SHAPE_MAJOR_VERSION = 1,SHAPE_MINOR_VERSION = 1,};
enum MACRO_SISFB {SISFB_ID = 0x53495346,SISFB_CMD_GETVBFLAGS = 0x55AA0001,SISFB_CMD_SWITCHCRT1 = 0x55AA0010,SISFB_CMD_ERR_OK = 0x80000000,SISFB_CMD_ERR_LOCKED = 0x80000001,SISFB_CMD_ERR_EARLY = 0x80000002,SISFB_CMD_ERR_NOVB = 0x80000003,SISFB_CMD_ERR_NOCRT2 = 0x80000004,SISFB_CMD_ERR_UNKNOWN = 0x8000FFFF,SISFB_CMD_ERR_OTHER = 0x80010000,};
enum MACRO_SNDRV {SNDRV_DM_FM_MODE_OPL2 = 0x0,SNDRV_DM_FM_MODE_OPL3 = 0x1,SNDRV_DM_FM_IOCTL_RESET = 0x4821,SNDRV_DM_FM_IOCTL_CLEAR_PATCHES = 0x4840,SNDRV_DM_FM_OSS_IOCTL_RESET = 0x20,SNDRV_DM_FM_OSS_IOCTL_PLAY_NOTE = 0x21,SNDRV_DM_FM_OSS_IOCTL_SET_VOICE = 0x22,SNDRV_DM_FM_OSS_IOCTL_SET_PARAMS = 0x23,SNDRV_DM_FM_OSS_IOCTL_SET_MODE = 0x24,SNDRV_DM_FM_OSS_IOCTL_SET_OPL = 0x25,SNDRV_HWDEP_VERSION = 0x10001,SNDRV_PCM_VERSION = 0x2000B,SNDRV_PCM_ACCESS_MMAP_INTERLEAVED = 0x0,SNDRV_PCM_ACCESS_MMAP_NONINTERLEAVED = 0x1,SNDRV_PCM_ACCESS_MMAP_COMPLEX = 0x2,SNDRV_PCM_ACCESS_RW_INTERLEAVED = 0x3,SNDRV_PCM_ACCESS_RW_NONINTERLEAVED = 0x4,SNDRV_PCM_ACCESS_LAST = 0x4,SNDRV_PCM_FORMAT_S8 = 0x0,SNDRV_PCM_FORMAT_U8 = 0x1,SNDRV_PCM_FORMAT_S16_LE = 0x2,SNDRV_PCM_FORMAT_S16_BE = 0x3,SNDRV_PCM_FORMAT_U16_LE = 0x4,SNDRV_PCM_FORMAT_U16_BE = 0x5,SNDRV_PCM_FORMAT_S24_LE = 0x6,SNDRV_PCM_FORMAT_S24_BE = 0x7,SNDRV_PCM_FORMAT_U24_LE = 0x8,SNDRV_PCM_FORMAT_U24_BE = 0x9,SNDRV_PCM_FORMAT_S32_LE = 0xA,SNDRV_PCM_FORMAT_S32_BE = 0xB,SNDRV_PCM_FORMAT_U32_LE = 0xC,SNDRV_PCM_FORMAT_U32_BE = 0xD,SNDRV_PCM_FORMAT_FLOAT_LE = 0xE,SNDRV_PCM_FORMAT_FLOAT_BE = 0xF,SNDRV_PCM_FORMAT_FLOAT64_LE = 0x10,SNDRV_PCM_FORMAT_FLOAT64_BE = 0x11,SNDRV_PCM_FORMAT_IEC958_SUBFRAME_LE = 0x12,SNDRV_PCM_FORMAT_IEC958_SUBFRAME_BE = 0x13,SNDRV_PCM_FORMAT_MU_LAW = 0x14,SNDRV_PCM_FORMAT_A_LAW = 0x15,SNDRV_PCM_FORMAT_IMA_ADPCM = 0x16,SNDRV_PCM_FORMAT_MPEG = 0x17,SNDRV_PCM_FORMAT_GSM = 0x18,SNDRV_PCM_FORMAT_SPECIAL = 0x1F,SNDRV_PCM_FORMAT_S24_3LE = 0x20,SNDRV_PCM_FORMAT_S24_3BE = 0x21,SNDRV_PCM_FORMAT_U24_3LE = 0x22,SNDRV_PCM_FORMAT_U24_3BE = 0x23,SNDRV_PCM_FORMAT_S20_3LE = 0x24,SNDRV_PCM_FORMAT_S20_3BE = 0x25,SNDRV_PCM_FORMAT_U20_3LE = 0x26,SNDRV_PCM_FORMAT_U20_3BE = 0x27,SNDRV_PCM_FORMAT_S18_3LE = 0x28,SNDRV_PCM_FORMAT_S18_3BE = 0x29,SNDRV_PCM_FORMAT_U18_3LE = 0x2A,SNDRV_PCM_FORMAT_U18_3BE = 0x2B,SNDRV_PCM_FORMAT_G723_24 = 0x2C,SNDRV_PCM_FORMAT_G723_24_1B = 0x2D,SNDRV_PCM_FORMAT_G723_40 = 0x2E,SNDRV_PCM_FORMAT_G723_40_1B = 0x2F,SNDRV_PCM_FORMAT_DSD_U8 = 0x30,SNDRV_PCM_FORMAT_DSD_U16_LE = 0x31,SNDRV_PCM_FORMAT_LAST = 0x31,SNDRV_PCM_SUBFORMAT_STD = 0x0,SNDRV_PCM_SUBFORMAT_LAST = 0x0,SNDRV_PCM_INFO_MMAP = 0x1,SNDRV_PCM_INFO_MMAP_VALID = 0x2,SNDRV_PCM_INFO_DOUBLE = 0x4,SNDRV_PCM_INFO_BATCH = 0x10,SNDRV_PCM_INFO_INTERLEAVED = 0x100,SNDRV_PCM_INFO_NONINTERLEAVED = 0x200,SNDRV_PCM_INFO_COMPLEX = 0x400,SNDRV_PCM_INFO_BLOCK_TRANSFER = 0x10000,SNDRV_PCM_INFO_OVERRANGE = 0x20000,SNDRV_PCM_INFO_RESUME = 0x40000,SNDRV_PCM_INFO_PAUSE = 0x80000,SNDRV_PCM_INFO_HALF_DUPLEX = 0x100000,SNDRV_PCM_INFO_JOINT_DUPLEX = 0x200000,SNDRV_PCM_INFO_SYNC_START = 0x400000,SNDRV_PCM_INFO_NO_PERIOD_WAKEUP = 0x800000,SNDRV_PCM_INFO_HAS_WALL_CLOCK = 0x1000000,SNDRV_PCM_INFO_FIFO_IN_FRAMES = 0x80000000,SNDRV_PCM_STATE_OPEN = 0x0,SNDRV_PCM_STATE_SETUP = 0x1,SNDRV_PCM_STATE_PREPARED = 0x2,SNDRV_PCM_STATE_RUNNING = 0x3,SNDRV_PCM_STATE_XRUN = 0x4,SNDRV_PCM_STATE_DRAINING = 0x5,SNDRV_PCM_STATE_PAUSED = 0x6,SNDRV_PCM_STATE_SUSPENDED = 0x7,SNDRV_PCM_STATE_DISCONNECTED = 0x8,SNDRV_PCM_STATE_LAST = 0x8,SNDRV_PCM_HW_PARAM_ACCESS = 0x0,SNDRV_PCM_HW_PARAM_FORMAT = 0x1,SNDRV_PCM_HW_PARAM_SUBFORMAT = 0x2,SNDRV_PCM_HW_PARAM_FIRST_MASK = 0x0,SNDRV_PCM_HW_PARAM_LAST_MASK = 0x2,SNDRV_PCM_HW_PARAM_SAMPLE_BITS = 0x8,SNDRV_PCM_HW_PARAM_FRAME_BITS = 0x9,SNDRV_PCM_HW_PARAM_CHANNELS = 0xA,SNDRV_PCM_HW_PARAM_RATE = 0xB,SNDRV_PCM_HW_PARAM_PERIOD_TIME = 0xC,SNDRV_PCM_HW_PARAM_PERIOD_SIZE = 0xD,SNDRV_PCM_HW_PARAM_PERIOD_BYTES = 0xE,SNDRV_PCM_HW_PARAM_PERIODS = 0xF,SNDRV_PCM_HW_PARAM_BUFFER_TIME = 0x10,SNDRV_PCM_HW_PARAM_BUFFER_SIZE = 0x11,SNDRV_PCM_HW_PARAM_BUFFER_BYTES = 0x12,SNDRV_PCM_HW_PARAM_TICK_TIME = 0x13,SNDRV_PCM_HW_PARAM_FIRST_INTERVAL = 0x8,SNDRV_PCM_HW_PARAM_LAST_INTERVAL = 0x13,SNDRV_PCM_HW_PARAMS_NORESAMPLE = 0x1,SNDRV_PCM_HW_PARAMS_EXPORT_BUFFER = 0x2,SNDRV_PCM_HW_PARAMS_NO_PERIOD_WAKEUP = 0x4,SNDRV_MASK_MAX = 0x100,SNDRV_PCM_SYNC_PTR_HWSYNC = 0x1,SNDRV_PCM_SYNC_PTR_APPL = 0x2,SNDRV_PCM_SYNC_PTR_AVAIL_MIN = 0x4,SNDRV_CHMAP_POSITION_MASK = 0xFFFF,SNDRV_CHMAP_PHASE_INVERSE = 0x10000,SNDRV_CHMAP_DRIVER_SPEC = 0x20000,SNDRV_PCM_IOCTL_HW_FREE = 0x4112,SNDRV_PCM_IOCTL_HWSYNC = 0x4122,SNDRV_PCM_IOCTL_PREPARE = 0x4140,SNDRV_PCM_IOCTL_RESET = 0x4141,SNDRV_PCM_IOCTL_START = 0x4142,SNDRV_PCM_IOCTL_DROP = 0x4143,SNDRV_PCM_IOCTL_DRAIN = 0x4144,SNDRV_PCM_IOCTL_RESUME = 0x4147,SNDRV_PCM_IOCTL_XRUN = 0x4148,SNDRV_PCM_IOCTL_UNLINK = 0x4161,SNDRV_RAWMIDI_VERSION = 0x20000,SNDRV_RAWMIDI_INFO_OUTPUT = 0x1,SNDRV_RAWMIDI_INFO_INPUT = 0x2,SNDRV_RAWMIDI_INFO_DUPLEX = 0x4,SNDRV_TIMER_VERSION = 0x20006,SNDRV_TIMER_GLOBAL_SYSTEM = 0x0,SNDRV_TIMER_GLOBAL_RTC = 0x1,SNDRV_TIMER_GLOBAL_HPET = 0x2,SNDRV_TIMER_GLOBAL_HRTIMER = 0x3,SNDRV_TIMER_FLG_SLAVE = 0x1,SNDRV_TIMER_PSFLG_AUTO = 0x1,SNDRV_TIMER_PSFLG_EXCLUSIVE = 0x2,SNDRV_TIMER_PSFLG_EARLY_EVENT = 0x4,SNDRV_TIMER_IOCTL_START = 0x54A0,SNDRV_TIMER_IOCTL_STOP = 0x54A1,SNDRV_TIMER_IOCTL_CONTINUE = 0x54A2,SNDRV_TIMER_IOCTL_PAUSE = 0x54A3,SNDRV_CTL_VERSION = 0x20007,SNDRV_CTL_ELEM_TYPE_NONE = 0x0,SNDRV_CTL_ELEM_TYPE_BOOLEAN = 0x1,SNDRV_CTL_ELEM_TYPE_INTEGER = 0x2,SNDRV_CTL_ELEM_TYPE_ENUMERATED = 0x3,SNDRV_CTL_ELEM_TYPE_BYTES = 0x4,SNDRV_CTL_ELEM_TYPE_IEC958 = 0x5,SNDRV_CTL_ELEM_TYPE_INTEGER64 = 0x6,SNDRV_CTL_ELEM_TYPE_LAST = 0x6,SNDRV_CTL_ELEM_IFACE_CARD = 0x0,SNDRV_CTL_ELEM_IFACE_HWDEP = 0x1,SNDRV_CTL_ELEM_IFACE_MIXER = 0x2,SNDRV_CTL_ELEM_IFACE_PCM = 0x3,SNDRV_CTL_ELEM_IFACE_RAWMIDI = 0x4,SNDRV_CTL_ELEM_IFACE_TIMER = 0x5,SNDRV_CTL_ELEM_IFACE_SEQUENCER = 0x6,SNDRV_CTL_ELEM_IFACE_LAST = 0x6,SNDRV_CTL_ELEM_ACCESS_READ = 0x1,SNDRV_CTL_ELEM_ACCESS_WRITE = 0x2,SNDRV_CTL_ELEM_ACCESS_READWRITE = 0x3,SNDRV_CTL_ELEM_ACCESS_VOLATILE = 0x4,SNDRV_CTL_ELEM_ACCESS_TIMESTAMP = 0x8,SNDRV_CTL_ELEM_ACCESS_TLV_READ = 0x10,SNDRV_CTL_ELEM_ACCESS_TLV_WRITE = 0x20,SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE = 0x30,SNDRV_CTL_ELEM_ACCESS_TLV_COMMAND = 0x40,SNDRV_CTL_ELEM_ACCESS_INACTIVE = 0x100,SNDRV_CTL_ELEM_ACCESS_LOCK = 0x200,SNDRV_CTL_ELEM_ACCESS_OWNER = 0x400,SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK = 0x10000000,SNDRV_CTL_ELEM_ACCESS_USER = 0x20000000,SNDRV_CTL_POWER_D0 = 0x0,SNDRV_CTL_POWER_D1 = 0x100,SNDRV_CTL_POWER_D2 = 0x200,SNDRV_CTL_POWER_D3 = 0x300,SNDRV_CTL_POWER_D3hot = 0x300,SNDRV_CTL_POWER_D3cold = 0x301,SNDRV_CTL_ELEM_ID_NAME_MAXLEN = 0x2C,SNDRV_CTL_EVENT_MASK_VALUE = 0x1,SNDRV_CTL_EVENT_MASK_INFO = 0x2,SNDRV_CTL_EVENT_MASK_ADD = 0x4,SNDRV_CTL_EVENT_MASK_TLV = 0x8,SNDRV_CTL_EVENT_MASK_REMOVE = 0xFFFFFFFF,};
enum MACRO_SONET {SONET_INS_SBIP = 1,SONET_INS_LBIP = 2,SONET_INS_PBIP = 4,SONET_INS_FRAME = 8,SONET_INS_LOS = 16,SONET_INS_LAIS = 32,SONET_INS_PAIS = 64,SONET_INS_HCS = 128,SONET_FRAME_SONET = 0,SONET_FRAME_SDH = 1,SONET_FRSENSE_SIZE = 6,};
enum MACRO_SOUND {SOUND_VERSION = 0x30802,};
enum MACRO_SO_EE {SO_EE_ORIGIN_NONE = 0,SO_EE_ORIGIN_LOCAL = 1,SO_EE_ORIGIN_ICMP = 2,SO_EE_ORIGIN_ICMP6 = 3,SO_EE_ORIGIN_TXSTATUS = 4,SO_EE_ORIGIN_TIMESTAMPING = 4,};
enum MACRO_SO_IP {SO_IP_SET = 83,};
enum MACRO_SPACE {SPACE = 0x11,};
enum MACRO_SPARC {SPARC_ETH_GSET = 1,SPARC_ETH_SSET = 2,};
enum MACRO_SPDIF {SPDIF_PRO = 0x1,SPDIF_N_AUD = 0x2,SPDIF_COPY = 0x4,SPDIF_PRE = 0x8,SPDIF_CC = 0x7F0,SPDIF_L = 0x800,SPDIF_DRS = 0x4000,SPDIF_V = 0x8000,};
enum MACRO_SPEED {SPEED_10 = 10,SPEED_100 = 100,SPEED_1000 = 1000,SPEED_2500 = 2500,SPEED_10000 = 10000,SPEED_UNKNOWN = -1,};
enum MACRO_START {START_STOP = 0x1B,};
enum MACRO_SYNCH {SYNCH = 242,};
enum MACRO_SYNTH {SYNTH_TYPE_FM = 0,SYNTH_TYPE_SAMPLE = 1,SYNTH_TYPE_MIDI = 2,};
enum MACRO_SYSEX {SYSEX_PATCH = 0x5FD,MAUI_PATCH = 0x6FD,};
enum MACRO_SunXK {SunXK_FA_Grave = 0x1005FF00,SunXK_FA_Circum = 0x1005FF01,SunXK_FA_Tilde = 0x1005FF02,SunXK_FA_Acute = 0x1005FF03,SunXK_FA_Diaeresis = 0x1005FF04,SunXK_FA_Cedilla = 0x1005FF05,SunXK_F36 = 0x1005FF10,SunXK_F37 = 0x1005FF11,SunXK_Sys_Req = 0x1005FF60,SunXK_Print_Screen = 0xFF61,SunXK_Compose = 0xFF20,SunXK_AltGraph = 0xFF7E,SunXK_PageUp = 0xFF55,SunXK_PageDown = 0xFF56,SunXK_Undo = 0xFF65,SunXK_Again = 0xFF66,SunXK_Find = 0xFF68,SunXK_Stop = 0xFF69,SunXK_Props = 0x1005FF70,SunXK_Front = 0x1005FF71,SunXK_Copy = 0x1005FF72,SunXK_Open = 0x1005FF73,SunXK_Paste = 0x1005FF74,SunXK_Cut = 0x1005FF75,SunXK_PowerSwitch = 0x1005FF76,SunXK_AudioLowerVolume = 0x1005FF77,SunXK_AudioMute = 0x1005FF78,SunXK_AudioRaiseVolume = 0x1005FF79,SunXK_VideoDegauss = 0x1005FF7A,SunXK_VideoLowerBrightness = 0x1005FF7B,SunXK_VideoRaiseBrightness = 0x1005FF7C,SunXK_PowerSwitchShift = 0x1005FF7D,};
enum MACRO_TCION {TCION = 3,};
enum MACRO_TCODE {TCODE_WRITE_QUADLET_REQUEST = 0x0,TCODE_WRITE_BLOCK_REQUEST = 0x1,TCODE_WRITE_RESPONSE = 0x2,TCODE_READ_QUADLET_REQUEST = 0x4,TCODE_READ_BLOCK_REQUEST = 0x5,TCODE_READ_QUADLET_RESPONSE = 0x6,TCODE_READ_BLOCK_RESPONSE = 0x7,TCODE_CYCLE_START = 0x8,TCODE_LOCK_REQUEST = 0x9,TCODE_STREAM_DATA = 0xA,TCODE_LOCK_RESPONSE = 0xB,};
enum MACRO_TC_EM {TC_EM_TEXT_ALGOSIZ = 16,};
enum MACRO_THERM {THERM_INT_HIGH_ENABLE = 1,THERM_INT_LOW_ENABLE = 2,THERM_INT_PLN_ENABLE = 16777216,};
enum MACRO_TIMER {TIMER_ABSTIME = 1,};
enum MACRO_TIOCL {TIOCL_SETSEL = 2,TIOCL_SELCHAR = 0,TIOCL_SELWORD = 1,TIOCL_SELLINE = 2,TIOCL_SELPOINTER = 3,TIOCL_SELCLEAR = 4,TIOCL_SELMOUSEREPORT = 16,TIOCL_SELBUTTONMASK = 15,TIOCL_PASTESEL = 3,TIOCL_UNBLANKSCREEN = 4,TIOCL_SELLOADLUT = 5,TIOCL_GETSHIFTSTATE = 6,TIOCL_GETMOUSEREPORTING = 7,TIOCL_SETVESABLANK = 10,TIOCL_SETKMSGREDIRECT = 11,TIOCL_GETFGCONSOLE = 12,TIOCL_SCROLLCONSOLE = 13,TIOCL_BLANKSCREEN = 14,TIOCL_BLANKEDSCREEN = 15,TIOCL_GETKMSGREDIRECT = 17,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,TIOCM_RNG = 0x80,TIOCM_DSR = 0x100,TIOCM_CD = 0x40,TIOCM_RI = 0x80,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TRACE {TRACE_DISABLE = 0x0,TRACE_TIMES = 0x1,TRACE_TPUTS = 0x2,TRACE_UPDATE = 0x4,TRACE_MOVE = 0x8,TRACE_CHARPUT = 0x10,TRACE_ORDINARY = 0x1F,TRACE_CALLS = 0x20,TRACE_VIRTPUT = 0x40,TRACE_IEVENT = 0x80,TRACE_BITS = 0x100,TRACE_ICALLS = 0x200,TRACE_CCALLS = 0x400,TRACE_DATABASE = 0x800,TRACE_ATTRS = 0x1000,TRACE_SHIFT = 0xD,TRACE_MAXIMUM = 0x1FFF,};
enum MACRO_TSGID {TSGID = 0x400,};
enum MACRO_TSUID {TSUID = 0x800,};
enum MACRO_TSVTX {TSVTX = 0x200,};
enum MACRO_TUN_F {TUN_F_CSUM = 0x1,TUN_F_TSO4 = 0x2,TUN_F_TSO6 = 0x4,TUN_F_TSO_ECN = 0x8,TUN_F_UFO = 0x10,TUN_PKT_STRIP = 0x1,TUN_FLT_ALLMULTI = 0x1,};
enum MACRO_UDIAG {UDIAG_SHOW_NAME = 0x1,UDIAG_SHOW_VFS = 0x2,UDIAG_SHOW_PEER = 0x4,UDIAG_SHOW_ICONS = 0x8,UDIAG_SHOW_RQLEN = 0x10,UDIAG_SHOW_MEMINFO = 0x20,};
enum MACRO_UNDEF {UNDEF = 5,};
enum MACRO_UTIME {UTIME_NOW = 1073741823,UTIME_OMIT = 1073741822,};
enum MACRO_VHOST {VHOST_VRING_F_LOG = 0,VHOST_PAGE_SIZE = 4096,VHOST_VIRTIO = 175,VHOST_SET_OWNER = 44801,VHOST_RESET_OWNER = 44802,VHOST_F_LOG_ALL = 26,VHOST_NET_F_VIRTIO_NET_HDR = 27,VHOST_SCSI_ABI_VERSION = 1,};
enum MACRO_VIDEO {VIDEO_TYPE_MDA = 0x10,VIDEO_TYPE_CGA = 0x11,VIDEO_TYPE_EGAM = 0x20,VIDEO_TYPE_EGAC = 0x21,VIDEO_TYPE_VGAC = 0x22,VIDEO_TYPE_VLFB = 0x23,VIDEO_TYPE_PICA_S3 = 0x30,VIDEO_TYPE_MIPS_G364 = 0x31,VIDEO_TYPE_SGI = 0x33,VIDEO_TYPE_TGAC = 0x40,VIDEO_TYPE_SUN = 0x50,VIDEO_TYPE_SUNPCI = 0x51,VIDEO_TYPE_PMAC = 0x60,VIDEO_TYPE_EFI = 0x70,VIDEO_FLAGS_NOCURSOR = 0x1,VIDEO_CAPABILITY_SKIP_QUIRKS = 0x1,};
enum MACRO_VINTR {VINTR = 0,VQUIT = 1,VERASE = 2,};
enum MACRO_VKILL {VKILL = 3,VEOF = 4,};
enum MACRO_VRING {VRING_DESC_F_NEXT = 1,VRING_DESC_F_WRITE = 2,VRING_DESC_F_INDIRECT = 4,VRING_USED_F_NO_NOTIFY = 1,VRING_AVAIL_F_NO_INTERRUPT = 1,};
enum MACRO_VSTOP {VSTOP = 9,};
enum MACRO_VSUSP {VSUSP = 10,};
enum MACRO_VSWTC {VSWTC = 7,VSTART = 8,};
enum MACRO_VTDLY {VTDLY = 0x4000,};
enum MACRO_VTIME {VTIME = 5,};
enum MACRO_WCHAR {WCHAR_MIN = -2147483648,WCHAR_MAX = 2147483647,};
enum MACRO_WDIOF {WDIOF_UNKNOWN = -1,WDIOS_UNKNOWN = -1,};
enum MACRO_WDIOS {WDIOS_DISABLECARD = 0x1,WDIOS_ENABLECARD = 0x2,WDIOS_TEMPPANIC = 0x4,};
enum MACRO_WRITE {WRITE_6 = 0xA,};
enum MACRO_XATOM {XATOM_H = 1,};
enum MACRO_XATTR {XATTR_NAME_MAX = 255,XATTR_SIZE_MAX = 65536,XATTR_LIST_MAX = 65536,};
enum MACRO_XCONN {XCONN_CHECK_FREQ = 256,};
enum MACRO_XEVIE {XEVIE_MAJOR_VERSION = 1,XEVIE_MINOR_VERSION = 0,};
enum MACRO_XFRMA {XFRMA_REPLAY_ESN_MAX = 4096,};
enum MACRO_XTABS {XTABS = 0xC00,CBAUD = 0x100F,};
enum MACRO_X_TCP {X_TCP_PORT = 6000,};
enum MACRO_XkbAX {XkbAX_SKPressFBMask = 1,XkbAX_SKAcceptFBMask = 2,XkbAX_FeatureFBMask = 4,XkbAX_SlowWarnFBMask = 8,XkbAX_IndicatorFBMask = 16,XkbAX_StickyKeysFBMask = 32,XkbAX_TwoKeysMask = 64,XkbAX_LatchToLockMask = 128,XkbAX_SKReleaseFBMask = 256,XkbAX_SKRejectFBMask = 512,XkbAX_BKRejectFBMask = 1024,XkbAX_DumbBellFBMask = 2048,XkbAX_FBOptionsMask = 3903,XkbAX_SKOptionsMask = 192,XkbAX_AllOptionsMask = 4095,};
enum MACRO_XkbDF {XkbDF_DisableLocks = 1,};
enum MACRO_XkbIM {XkbIM_NoExplicit = 128,XkbIM_NoAutomatic = 64,XkbIM_LEDDrivesKB = 32,XkbIM_UseBase = 1,XkbIM_UseLatched = 2,XkbIM_UseLocked = 4,XkbIM_UseEffective = 8,XkbIM_UseCompat = 16,XkbIM_UseNone = 0,XkbIM_UseAnyGroup = 15,XkbIM_UseAnyMods = 31,};
enum MACRO_XkbKB {XkbKB_Permanent = 0x80,XkbKB_OpMask = 0x7F,XkbKB_Default = 0x0,XkbKB_Lock = 0x1,XkbKB_RadioGroup = 0x2,XkbKB_Overlay1 = 0x3,XkbKB_Overlay2 = 0x4,XkbKB_RGAllowNone = 0x80,};
enum MACRO_XkbLC {XkbLC_Hidden = 1,XkbLC_Default = 2,XkbLC_Partial = 4,XkbLC_AlphanumericKeys = 256,XkbLC_ModifierKeys = 512,XkbLC_KeypadKeys = 1024,XkbLC_FunctionKeys = 2048,XkbLC_AlternateGroup = 4096,};
enum MACRO_XkbOD {XkbOD_Success = 0,XkbOD_BadLibraryVersion = 1,XkbOD_ConnectionRefused = 2,XkbOD_NonXkbServer = 3,XkbOD_BadServerVersion = 4,};
enum MACRO_XkbSA {XkbSA_ClearLocks = 1,XkbSA_LatchToLock = 2,XkbSA_LockNoLock = 1,XkbSA_LockNoUnlock = 2,XkbSA_UseModMapMods = 4,XkbSA_GroupAbsolute = 4,XkbSA_UseDfltButton = 0,XkbSA_NoAcceleration = 1,XkbSA_MoveAbsoluteX = 2,XkbSA_MoveAbsoluteY = 4,XkbSA_ISODfltIsGroup = 128,XkbSA_ISONoAffectMods = 64,XkbSA_ISONoAffectGroup = 32,XkbSA_ISONoAffectPtr = 16,XkbSA_ISONoAffectCtrls = 8,XkbSA_ISOAffectMask = 120,XkbSA_MessageOnPress = 1,XkbSA_MessageOnRelease = 2,XkbSA_MessageGenKeyEvent = 4,XkbSA_AffectDfltBtn = 1,XkbSA_DfltBtnAbsolute = 4,XkbSA_SwitchApplication = 1,XkbSA_SwitchAbsolute = 4,XkbSA_IgnoreVal = 0,XkbSA_SetValMin = 16,XkbSA_SetValCenter = 32,XkbSA_SetValMax = 48,XkbSA_SetValRelative = 64,XkbSA_SetValAbsolute = 80,XkbSA_ValOpMask = 112,XkbSA_ValScaleMask = 7,XkbSA_NoAction = 0,XkbSA_SetMods = 1,XkbSA_LatchMods = 2,XkbSA_LockMods = 3,XkbSA_SetGroup = 4,XkbSA_LatchGroup = 5,XkbSA_LockGroup = 6,XkbSA_MovePtr = 7,XkbSA_PtrBtn = 8,XkbSA_LockPtrBtn = 9,XkbSA_SetPtrDflt = 10,XkbSA_ISOLock = 11,XkbSA_Terminate = 12,XkbSA_SwitchScreen = 13,XkbSA_SetControls = 14,XkbSA_LockControls = 15,XkbSA_ActionMessage = 16,XkbSA_RedirectKey = 17,XkbSA_DeviceBtn = 18,XkbSA_LockDeviceBtn = 19,XkbSA_DeviceValuator = 20,XkbSA_LastAction = 20,XkbSA_NumActions = 21,XkbSA_XFree86Private = 134,XkbSA_BreakLatch = 1045249,};
enum MACRO_XkbSI {XkbSI_AutoRepeat = 1,XkbSI_LockingKey = 2,XkbSI_LevelOneOnly = 128,XkbSI_OpMask = 127,XkbSI_NoneOf = 0,XkbSI_AnyOfOrNone = 1,XkbSI_AnyOf = 2,XkbSI_AllOf = 3,XkbSI_Exactly = 4,};
enum MACRO_XkbXI {XkbXI_KeyboardsMask = 1,XkbXI_ButtonActionsMask = 2,XkbXI_IndicatorNamesMask = 4,XkbXI_IndicatorMapsMask = 8,XkbXI_IndicatorStateMask = 16,XkbXI_UnsupportedFeatureMask = 32768,XkbXI_AllFeaturesMask = 31,XkbXI_AllDeviceFeaturesMask = 30,XkbXI_IndicatorsMask = 28,};
enum MACRO_XvRGB {XvRGB = 0,XvYUV = 1,};
enum MACRO_YPERR {YPERR_SUCCESS = 0,YPERR_BADARGS = 1,YPERR_RPC = 2,YPERR_DOMAIN = 3,YPERR_MAP = 4,YPERR_KEY = 5,YPERR_YPERR = 6,YPERR_RESRC = 7,YPERR_NOMORE = 8,YPERR_PMAP = 9,YPERR_YPBIND = 10,YPERR_YPSERV = 11,YPERR_NODOM = 12,YPERR_BADDB = 13,YPERR_VERS = 14,YPERR_ACCESS = 15,YPERR_BUSY = 16,};
enum MACRO_ZFIRM {ZFIRM_ID = 0x5557465A,ZFIRM_HLT = 0x59505B5C,ZFIRM_RST = 0x56040674,};
enum MACRO__ARGZ {_ARGZ_H = 1,_AR_H = 1,};
enum MACRO__ARPA {_ARPA_FTP_H = 1,};
enum MACRO__BITS {_BITS_BYTESWAP_H = 1,_BITS_TYPES_H = 1,_BITS_TYPESIZES_H = 1,};
enum MACRO__CPIO {_CPIO_H = 1,};
enum MACRO__EFER {_EFER_SCE = 0,_EFER_LME = 8,_EFER_LMA = 10,_EFER_NX = 11,_EFER_SVME = 12,_EFER_LMSLE = 13,_EFER_FFXSR = 14,};
enum MACRO__ENVZ {_ENVZ_H = 1,_ERR_H = 1,_ERROR_H = 1,};
enum MACRO__FENV {_FENV_H = 1,};
enum MACRO__FILE {_FILE_OFFSET_BITS = 64,};
enum MACRO__GLOB {_GLOB_H = 1,};
enum MACRO__HAVE {_HAVE_UT_TYPE = 1,_HAVE_UT_PID = 1,_HAVE_UT_ID = 1,_HAVE_UT_TV = 1,_HAVE_UT_HOST = 1,};
enum MACRO__LIBC {_LIBC_LIMITS_H_ = 1,};
enum MACRO__LINK {_LINK_H = 1,};
enum MACRO__MATH {_MATH_H = 1,_MATH_H_MATHDEF = 1,};
enum MACRO__SCSI {_SCSI_SCSI_H = 1,};
enum MACRO__SIOC {_SIOC_NONE = 0,_SIOC_READ = 2,_SIOC_WRITE = 1,};
enum MACRO__STAT {_STAT_VER_KERNEL = 0,_STAT_VER_LINUX = 1,};
enum MACRO__STDC {_STDC_PREDEF_H = 1,};
enum MACRO__TIME {_TIME_H = 1,};
enum MACRO__UTMP {_UTMP_H = 1,_SYS_TIME_H = 1,};
enum MACRO__XBS5 {_XBS5_LPBIG_OFFBIG = -1,};
enum MACRO___ATM {__ATM_LM_NONE = 0,__ATM_LM_AAL = 1,__ATM_LM_ATM = 2,__ATM_LM_PHY = 8,__ATM_LM_ANALOG = 16,};
enum MACRO___BIT {__BIT_TYPES_DEFINED__ = 1,};
enum MACRO___BSD {__BSD_VISIBLE = 1,};
enum MACRO___DES {__DES_CRYPT_H__ = 1,};
enum MACRO___ELF {__ELF_NATIVE_CLASS = 64,};
enum MACRO___GNU {__GNU_LIBRARY__ = 6,};
enum MACRO___LLC {__LLC_SOCK_SIZE__ = 16,};
enum MACRO___MAX {__MAX_BAUD = 4111,};
enum MACRO___NET {__NET_ETHERNET_H = 1,};
enum MACRO___RES {__RES = 19991006,};
enum MACRO___USE {__USE_ANSI = 1,};
enum MACRO_lbxsz {lbxsz_UnknownEvent = 32,};
enum MACRO_osfXK {osfXK_Copy = 0x1004FF02,osfXK_Cut = 0x1004FF03,osfXK_Paste = 0x1004FF04,osfXK_BackTab = 0x1004FF07,osfXK_BackSpace = 0x1004FF08,osfXK_Clear = 0x1004FF0B,osfXK_Escape = 0x1004FF1B,osfXK_AddMode = 0x1004FF31,osfXK_PrimaryPaste = 0x1004FF32,osfXK_QuickPaste = 0x1004FF33,osfXK_PageLeft = 0x1004FF40,osfXK_PageUp = 0x1004FF41,osfXK_PageDown = 0x1004FF42,osfXK_PageRight = 0x1004FF43,osfXK_Activate = 0x1004FF44,osfXK_MenuBar = 0x1004FF45,osfXK_Left = 0x1004FF51,osfXK_Up = 0x1004FF52,osfXK_Right = 0x1004FF53,osfXK_Down = 0x1004FF54,osfXK_EndLine = 0x1004FF57,osfXK_BeginLine = 0x1004FF58,osfXK_EndData = 0x1004FF59,osfXK_BeginData = 0x1004FF5A,osfXK_PrevMenu = 0x1004FF5B,osfXK_NextMenu = 0x1004FF5C,osfXK_PrevField = 0x1004FF5D,osfXK_NextField = 0x1004FF5E,osfXK_Select = 0x1004FF60,osfXK_Insert = 0x1004FF63,osfXK_Undo = 0x1004FF65,osfXK_Menu = 0x1004FF67,osfXK_Cancel = 0x1004FF69,osfXK_Help = 0x1004FF6A,osfXK_SelectAll = 0x1004FF71,osfXK_DeselectAll = 0x1004FF72,osfXK_Reselect = 0x1004FF73,osfXK_Extend = 0x1004FF74,osfXK_Restore = 0x1004FF78,osfXK_Delete = 0x1004FFFF,};
enum MACRO_xTrue {xTrue = 1,};
typedef struct _MGSL_PARAMS MGSL_PARAMS;
typedef struct _A94EB43F2838EBEBCA936AD6F7EBA6B5 RECORDRANGE;
typedef void (*SetPathFunc)(void);
typedef struct sg_req_info Sg_req_info;
typedef struct _53996C97E395EF20FC508697C3EEF92C XCharStruct;
typedef struct _139D55FE8C88418352B74C39DE937D4F XErrorEvent;
typedef unsigned __int64 XEventClass;
typedef struct _B36C03EE0DB03800CDBEDA1CF8CFFD5F XFontStruct;
typedef struct _8FAAC4C6A9B09454B312C1AFE3312BB1 XICCallback;
typedef struct _E1655291D14CE59495117F42FECB583D XIMCallback;
typedef unsigned __int64 XIMFeedback;
typedef struct _3E84D1386F10E26A4E3E4F22FDD3C8B8 XOMFontInfo;
typedef struct _648D5B97A5A1D2D2729A4C51B6643734 XTextItem16;
typedef struct _30B70AE4F294613C62268FE45513ED13 XUnmapEvent;
typedef struct _32138DB0B6D2C0E6C623C7DE1AD597BF XVisualInfo;
typedef struct _XkbAnyEvent XkbAnyEvent;
typedef struct _XkbBehavior XkbBehavior;
typedef struct _XkbColor *XkbColorPtr;
typedef struct _XkbColor XkbColorRec;
typedef struct _XkbNamesRec *XkbNamesPtr;
typedef struct _XkbNamesRec XkbNamesRec;
typedef struct _XkbPoint *XkbPointPtr;
typedef struct _XkbPoint XkbPointRec;
typedef struct _XkbShape *XkbShapePtr;
typedef struct _XkbShape XkbShapeRec;
typedef struct _XkbStateRec *XkbStatePtr;
typedef struct _XkbStateRec XkbStateRec;
typedef struct _9C224668B7E64BE6AE9499E6FD772938 XmbTextItem;
typedef struct _XrmHashBucketRec *XrmDatabase;
typedef struct _48974C792553FBFA318CEC22C625F222 *XrmValuePtr;
typedef struct _EE65B23A4559DB1BF795CF28121204EB XvMCContext;
typedef struct _XvMCQMatrix XvMCQMatrix;
typedef struct _34E3615AA1F5E404F43F7626305BA1D6 XvMCSurface;
typedef struct _4D69B6347F056FE268056727CEA155AA XwcTextItem;
typedef struct _15A7CADFA0C3B6AF2858DE2248F61F64 _G_fpos64_t;
typedef unsigned int _Unwind_Ptr;
typedef struct _XExten _XExtension;
struct _XSyncValue {int hi;unsigned int lo;};
typedef __int64 __blksize_t;
typedef int __clockid_t;
struct __dirstream;
typedef void (*__free_fn_t)(void *nodep);
typedef int __ipc_pid_t;
typedef struct _E9F5FE92D7DB981290475B0A784F5155 __mbstate_t;
typedef unsigned __int64 __mf_size_t;
enum __ns_opcode {ns_o_query = 0x0,ns_o_iquery = 0x1,ns_o_status = 0x2,ns_o_notify = 0x4,ns_o_update = 0x5,ns_o_max = 0x6,};
typedef unsigned int __socklen_t;
enum accept_stat {SUCCESS = 0x0,PROG_UNAVAIL = 0x1,PROG_MISMATCH = 0x2,PROC_UNAVAIL = 0x3,GARBAGE_ARGS = 0x4,SYSTEM_ERR = 0x5,};
typedef struct _agp_segment agp_segment;
typedef unsigned __int16 apm_event_t;
struct argp_option {const char *name;int key;const char *arg;int flags;const char *doc;int group;};
struct atm_cirange {signed __int8 vpi_bits;signed __int8 vci_bits;};
struct atm_trafprm {unsigned __int8 traffic_class;int max_pcr;int pcr;int min_pcr;int max_cdv;int max_sdu;unsigned int icr;unsigned int tbe;unsigned __int32 frtt : 24;unsigned __int32 rif : 4;unsigned __int32 rdf : 4;unsigned __int32 nrm_pres : 1;unsigned __int32 trm_pres : 1;unsigned __int32 adtf_pres : 1;unsigned __int32 cdf_pres : 1;unsigned __int32 nrm : 3;unsigned __int32 trm : 3;unsigned __int32 adtf : 10;unsigned __int32 cdf : 3;unsigned __int32 spare : 9;};
struct audio_mixer {unsigned int volume_left;unsigned int volume_right;};
typedef char *bp_fileid_t;
enum bp_type_idx {TYPE_INST = 0x0,TYPE_DATA = 0x1,TYPE_MAX = 0x2,};
struct bpq_ethaddr {unsigned __int8 destination[6];unsigned __int8 accept[6];};
typedef struct _DE2D2D600621BF6A9A3C6AB05D887D2A cisco_proto;
enum cld_command {Cld_Create = 0x0,Cld_Remove = 0x1,Cld_Check = 0x2,Cld_GraceDone = 0x3,};
struct compat_stat;
struct copr_buffer {int command;int flags;int len;int offs;unsigned __int8 data[4000];};
enum ctattr_help {CTA_HELP_UNSPEC = 0x0,CTA_HELP_NAME = 0x1,CTA_HELP_INFO = 0x2,__CTA_HELP_MAX = 0x3,};
enum ctattr_type {CTA_UNSPEC = 0x0,CTA_TUPLE_ORIG = 0x1,CTA_TUPLE_REPLY = 0x2,CTA_STATUS = 0x3,CTA_PROTOINFO = 0x4,CTA_HELP = 0x5,CTA_NAT_SRC = 0x6,CTA_TIMEOUT = 0x7,CTA_MARK = 0x8,CTA_COUNTERS_ORIG = 0x9,CTA_COUNTERS_REPLY = 0xA,CTA_USE = 0xB,CTA_ID = 0xC,CTA_NAT_DST = 0xD,CTA_TUPLE_MASTER = 0xE,CTA_NAT_SEQ_ADJ_ORIG = 0xF,CTA_NAT_SEQ_ADJ_REPLY = 0x10,CTA_SECMARK = 0x11,CTA_ZONE = 0x12,CTA_SECCTX = 0x13,CTA_TIMESTAMP = 0x14,CTA_MARK_MASK = 0x15,CTA_LABELS = 0x16,CTA_LABELS_MASK = 0x17,__CTA_MAX = 0x18,};
enum dcbnl_attrs {DCB_ATTR_UNDEFINED = 0x0,DCB_ATTR_IFNAME = 0x1,DCB_ATTR_STATE = 0x2,DCB_ATTR_PFC_STATE = 0x3,DCB_ATTR_PFC_CFG = 0x4,DCB_ATTR_NUM_TC = 0x5,DCB_ATTR_PG_CFG = 0x6,DCB_ATTR_SET_ALL = 0x7,DCB_ATTR_PERM_HWADDR = 0x8,DCB_ATTR_CAP = 0x9,DCB_ATTR_NUMTCS = 0xA,DCB_ATTR_BCN = 0xB,DCB_ATTR_APP = 0xC,DCB_ATTR_IEEE = 0xD,DCB_ATTR_DCBX = 0xE,DCB_ATTR_FEATCFG = 0xF,DCB_ATTR_CEE = 0x10,__DCB_ATTR_ENUM_MAX = 0x11,DCB_ATTR_MAX = 0x10,};
typedef struct _95F74D7453875C15752E25CB7F1BF0CB deviceFocus;
struct elf_siginfo {int si_signo;int si_code;int si_errno;};
struct exit_status {__int16 e_termination;__int16 e_exit;};
struct file_handle {unsigned int handle_bytes;int handle_type;unsigned __int8 f_handle[];};
typedef struct _875800A09C817D61F833D1479DE8ED86 fsConnSetup;
typedef struct _3BE679DC1FFA371624A790DBC1F4853A fsFontError;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsNameError;
typedef struct _CCAFB83A0FC0BF591DA5D736B6BAF8AE fsXCharInfo;
enum fuse_opcode {FUSE_LOOKUP = 0x1,FUSE_FORGET = 0x2,FUSE_GETATTR = 0x3,FUSE_SETATTR = 0x4,FUSE_READLINK = 0x5,FUSE_SYMLINK = 0x6,FUSE_MKNOD = 0x8,FUSE_MKDIR = 0x9,FUSE_UNLINK = 0xA,FUSE_RMDIR = 0xB,FUSE_RENAME = 0xC,FUSE_LINK = 0xD,FUSE_OPEN = 0xE,FUSE_READ = 0xF,FUSE_WRITE = 0x10,FUSE_STATFS = 0x11,FUSE_RELEASE = 0x12,FUSE_FSYNC = 0x14,FUSE_SETXATTR = 0x15,FUSE_GETXATTR = 0x16,FUSE_LISTXATTR = 0x17,FUSE_REMOVEXATTR = 0x18,FUSE_FLUSH = 0x19,FUSE_INIT = 0x1A,FUSE_OPENDIR = 0x1B,FUSE_READDIR = 0x1C,FUSE_RELEASEDIR = 0x1D,FUSE_FSYNCDIR = 0x1E,FUSE_GETLK = 0x1F,FUSE_SETLK = 0x20,FUSE_SETLKW = 0x21,FUSE_ACCESS = 0x22,FUSE_CREATE = 0x23,FUSE_INTERRUPT = 0x24,FUSE_BMAP = 0x25,FUSE_DESTROY = 0x26,FUSE_IOCTL = 0x27,FUSE_POLL = 0x28,FUSE_NOTIFY_REPLY = 0x29,FUSE_BATCH_FORGET = 0x2A,FUSE_FALLOCATE = 0x2B,FUSE_READDIRPLUS = 0x2C,CUSE_INIT = 0x1000,};
enum hdspm_speed {ss = 0x0,ds = 0x1,qs = 0x2,};
typedef struct _i2o_isa_bus i2o_isa_bus;
typedef struct _i2o_mca_bus i2o_mca_bus;
typedef struct _i2o_pci_bus i2o_pci_bus;
struct i2o_sw_xfer {unsigned int iop;unsigned __int8 flags;unsigned __int8 sw_type;unsigned int sw_id;void *buf;unsigned int *swlen;unsigned int *maxfrag;unsigned int *curfrag;};
struct if_irda_qos {unsigned __int64 baudrate;unsigned __int16 data_size;unsigned __int16 window_size;unsigned __int16 min_turn_time;unsigned __int16 max_turn_time;unsigned __int8 add_bofs;unsigned __int8 link_disc;};
typedef signed __int8 int_fast8_t;
enum ip_set_kopt {IPSET_INV_MATCH = 0x1,IPSET_DIM_ONE_SRC = 0x2,IPSET_DIM_TWO_SRC = 0x4,IPSET_DIM_THREE_SRC = 0x8,IPSET_RETURN_NOMATCH = 0x80,};
enum ipset_errno {IPSET_ERR_PRIVATE = 0x1000,IPSET_ERR_PROTOCOL = 0x1001,IPSET_ERR_FIND_TYPE = 0x1002,IPSET_ERR_MAX_SETS = 0x1003,IPSET_ERR_BUSY = 0x1004,IPSET_ERR_EXIST_SETNAME2 = 0x1005,IPSET_ERR_TYPE_MISMATCH = 0x1006,IPSET_ERR_EXIST = 0x1007,IPSET_ERR_INVALID_CIDR = 0x1008,IPSET_ERR_INVALID_NETMASK = 0x1009,IPSET_ERR_INVALID_FAMILY = 0x100A,IPSET_ERR_TIMEOUT = 0x100B,IPSET_ERR_REFERENCED = 0x100C,IPSET_ERR_IPADDR_IPV4 = 0x100D,IPSET_ERR_IPADDR_IPV6 = 0x100E,IPSET_ERR_COUNTER = 0x100F,IPSET_ERR_TYPE_SPECIFIC = 0x1100,};
enum l2tp_pwtype {L2TP_PWTYPE_NONE = 0x0,L2TP_PWTYPE_ETH_VLAN = 0x4,L2TP_PWTYPE_ETH = 0x5,L2TP_PWTYPE_PPP = 0x7,L2TP_PWTYPE_PPP_AC = 0x8,L2TP_PWTYPE_IP = 0xB,__L2TP_PWTYPE_MAX = 0xC,};
struct llc_pktinfo {int lpi_ifindex;unsigned __int8 lpi_sap;unsigned __int8 lpi_mac[6];};
enum log_entry_t {LOG_NOP = 0x0,ADD_NAME = 0x1,REM_NAME = 0x2,MOD_NAME_OLD = 0x3,MOD_NAME_NEW = 0x4,ADD_IBASE = 0x5,REM_IBASE = 0x6,MOD_IBASE = 0x7,UPD_STAMP = 0x8,};
typedef struct mdp_superblock_s mdp_super_t;
struct mdu_param_s {int personality;int chunk_size;int max_fault;};
typedef struct mdu_param_s mdu_param_t;
struct meye_params {unsigned __int8 subsample;unsigned __int8 quality;unsigned __int8 sharpness;unsigned __int8 agc;unsigned __int8 picture;unsigned __int8 framerate;};
typedef unsigned __int64 mifbitmap_t;
struct nf_dn_rtmsg {int nfdn_ifindex;};
struct nl_mmap_req {unsigned int nm_block_size;unsigned int nm_block_nr;unsigned int nm_frame_size;unsigned int nm_frame_nr;};
struct old_utsname {char sysname[65];char nodename[65];char release[65];char version[65];char machine[65];};
struct packet_mreq {int mr_ifindex;unsigned __int16 mr_type;unsigned __int16 mr_alen;unsigned __int8 mr_address[8];};
struct pg_read_hdr {char magic;char scsi;int dlen;int duration;char pad[12];};
struct pppcallinfo {int calltype;unsigned __int8 local_num[64];unsigned __int8 remote_num[64];int charge_units;};
typedef struct _70B44F1B75B46BEFA77A9E3E77B6A4A4 qnx4_xtnt_t;
enum reject_stat {RPC_MISMATCH = 0x0,AUTH_ERROR = 0x1,};
struct rex_ttysize {int ts_lines;int ts_cols;};
enum rfkill_type {RFKILL_TYPE_ALL = 0x0,RFKILL_TYPE_WLAN = 0x1,RFKILL_TYPE_BLUETOOTH = 0x2,RFKILL_TYPE_UWB = 0x3,RFKILL_TYPE_WIMAX = 0x4,RFKILL_TYPE_WWAN = 0x5,RFKILL_TYPE_GPS = 0x6,RFKILL_TYPE_FM = 0x7,RFKILL_TYPE_NFC = 0x8,NUM_RFKILL_TYPES = 0x9,};
struct robust_list {struct robust_list *next;};
typedef unsigned __int16 sa_family_t;
struct sched_param {int __sched_priority;};
typedef struct sg_io_hdr sg_io_hdr_t;
struct sg_req_info {char req_state;char orphan;char sg_io_owned;char problem;int pack_id;void *usr_ptr;unsigned int duration;int unused;};
struct snd_ctl_tlv {unsigned int numid;unsigned int length;unsigned int tlv[];};
struct sockaddr_ll {unsigned __int16 sll_family;unsigned __int16 sll_protocol;int sll_ifindex;unsigned __int16 sll_hatype;unsigned __int8 sll_pkttype;unsigned __int8 sll_halen;unsigned __int8 sll_addr[8];};
struct __attribute__((packed)) sonet_stats {int section_bip;int line_bip;int path_bip;int line_febe;int path_febe;int corr_hcs;int uncorr_hcs;int tx_cells;int rx_cells;};
struct task_struct;
struct tc_sizespec {unsigned __int8 cell_log;unsigned __int8 size_log;__int16 cell_align;int overhead;unsigned int linklayer;unsigned int mpu;unsigned int mtu;unsigned int tsize;};
typedef struct td_notify td_notify_t;
struct td_ta_stats {int nthreads;int r_concurrency;int nrunnable_num;int nrunnable_den;int a_concurrency_num;int a_concurrency_den;int nlwps_num;int nlwps_den;int nidle_num;int nidle_den;};
struct td_thragent;
struct user_msghdr;
struct utmpidlearr {struct utmpidle **uia_arr;int uia_cnt;};
enum v4l2_memory {V4L2_MEMORY_MMAP = 0x1,V4L2_MEMORY_USERPTR = 0x2,V4L2_MEMORY_OVERLAY = 0x3,V4L2_MEMORY_DMABUF = 0x4,};
typedef struct video_spu video_spu_t;
typedef unsigned __int64 vifbitmap_t;
struct x25_address {char x25_addr[16];};
struct x25_subaddr {unsigned int cudmatchlength;};
typedef struct _xButtonInfo xButtonInfo;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXSyncReq;
typedef struct _8F523C6F05AE02FCAAA5D62A1D3E087B xDRI2Buffer;
typedef struct _7227A9398068B3A0AEE87CBD043E51D6 xDbeVisInfo;
typedef struct _xDeviceInfo xDeviceInfo;
typedef struct _FEC8B8888F3B689040694BF1F630E941 xGrabKeyReq;
typedef struct _194914D9D4C0AE9A8FC55BCBB00ED166 xIndexValue;
typedef struct _xKeyInfo *xKeyInfoPtr;
typedef struct _FFDDF8AD41840F2444187795E69FE4AB xLbxSyncReq;
typedef struct _29CF6037BDB08BCCAAEBB0F049E81934 xPictScreen;
typedef struct _0CA5FB17303BD72ED823DD36CD7B7A7D xPictVisual;
typedef struct _0B4ED8A417FCECA210AD3881277BFA25 xPointFixed;
typedef struct _xRRModeInfo xRRModeInfo;
typedef struct _528C256D64E70EF258C44321FAFFDA35 xVisualType;
typedef struct _E0F65D5058ACC2BC5F9AF2EDFFAF29D1 xWindowRoot;
typedef struct _BBFFAC2C7D7C298A8C1E91F0BFE75A53 xXIRawEvent;
typedef struct _4C6601BAE3B7FB7226E40FC6ABCCD221 xXResClient;
enum xcb_allow_t {XCB_ALLOW_ASYNC_POINTER = 0x0,XCB_ALLOW_SYNC_POINTER = 0x1,XCB_ALLOW_REPLAY_POINTER = 0x2,XCB_ALLOW_ASYNC_KEYBOARD = 0x3,XCB_ALLOW_SYNC_KEYBOARD = 0x4,XCB_ALLOW_REPLAY_KEYBOARD = 0x5,XCB_ALLOW_ASYNC_BOTH = 0x6,XCB_ALLOW_SYNC_BOTH = 0x7,};
enum xcb_place_t {XCB_PLACE_ON_TOP = 0x0,XCB_PLACE_ON_BOTTOM = 0x1,};
typedef struct _xkbAnyEvent xkbAnyEvent;
struct xt_log_info {unsigned __int8 level;unsigned __int8 logflags;char prefix[30];};
struct xt_mac_info {unsigned __int8 srcaddr[6];int invert;};
struct COFF_reloc {char r_vaddr[4];char r_symndx[4];char r_type[2];};
typedef unsigned __int16 Connection;
typedef struct _A7FA0352B3D2D5994DC9E111A361682C Dl_serinfo;
typedef struct _6F2DCBF5C42D0C323967E7E74FBCE3A0 Dl_serpath;
typedef unsigned __int64 Dwarf_Addr;
typedef int Dwarf_Bool;
typedef struct Dwarf_Func_s *Dwarf_Func;
typedef unsigned __int16 Dwarf_Half;
typedef struct Dwarf_Line_s *Dwarf_Line;
typedef struct _BDD68B3DF04F37D9F686ADD9C1D78922 Dwarf_Sig8;
typedef struct Dwarf_Type_s *Dwarf_Type;
typedef struct Dwarf_Weak_s *Dwarf_Weak;
typedef struct elf32_hdr Elf32_Ehdr;
typedef struct _CE845F89F9878C873199BB4116C12DE5 Elf32_Move;
typedef struct elf32_note Elf32_Nhdr;
typedef struct elf32_phdr Elf32_Phdr;
typedef struct elf32_rela Elf32_Rela;
typedef struct elf32_shdr Elf32_Shdr;
typedef struct elf64_hdr Elf64_Ehdr;
typedef struct _4489EB38A238A95680D8722B994EE839 Elf64_Move;
typedef struct elf64_note Elf64_Nhdr;
typedef struct elf64_phdr Elf64_Phdr;
typedef struct elf64_rela Elf64_Rela;
typedef struct elf64_shdr Elf64_Shdr;
typedef void *FIELD_CELL;
enum Gpm_Margin {GPM_TOP = 0x1,GPM_BOT = 0x2,GPM_LFT = 0x4,GPM_RGT = 0x8,};
typedef struct _909A0603F1AED8DD09B6D1E58BF56A67 IXJ_FILTER;
typedef struct _D1AF0406CAF4CC1ABBF1AF1A913684DE IXJ_SIGDEF;
enum MACRO_ACCT {ACCT_COMM = 16,ACCT_BYTEORDER = 0,};
enum MACRO_ACL4 {ACL4_SUPPORT_ALLOW_ACL = 0x1,ACL4_SUPPORT_DENY_ACL = 0x2,ACL4_SUPPORT_AUDIT_ACL = 0x4,ACL4_SUPPORT_ALARM_ACL = 0x8,};
enum MACRO_ACSI {ACSI_MAJOR = 28,AZTECH_CDROM_MAJOR = 29,FB_MAJOR = 29,CM206_CDROM_MAJOR = 32,IDE2_MAJOR = 33,IDE3_MAJOR = 34,Z8530_MAJOR = 34,XPRAM_MAJOR = 35,NETLINK_MAJOR = 36,PS2ESDI_MAJOR = 36,IDETAPE_MAJOR = 37,Z2RAM_MAJOR = 37,APBLOCK_MAJOR = 38,DDV_MAJOR = 39,NBD_MAJOR = 43,RISCOM8_NORMAL_MAJOR = 48,DAC960_MAJOR = 48,RISCOM8_CALLOUT_MAJOR = 49,MKISS_MAJOR = 55,DSP56K_MAJOR = 55,IDE4_MAJOR = 56,IDE5_MAJOR = 57,SCSI_DISK1_MAJOR = 65,SCSI_DISK2_MAJOR = 66,SCSI_DISK3_MAJOR = 67,SCSI_DISK4_MAJOR = 68,SCSI_DISK5_MAJOR = 69,SCSI_DISK6_MAJOR = 70,SCSI_DISK7_MAJOR = 71,COMPAQ_SMART2_MAJOR = 72,};
enum MACRO_ADFS {ADFS_DISCRECORD = 0xC00,ADFS_DR_OFFSET = 0x1C0,ADFS_DR_SIZE = 0x3C,ADFS_DR_SIZE_BITS = 0x1E0,};
enum MACRO_AFMT {AFMT_QUERY = 0x0,AFMT_MU_LAW = 0x1,AFMT_A_LAW = 0x2,AFMT_IMA_ADPCM = 0x4,AFMT_U8 = 0x8,AFMT_S16_LE = 0x10,AFMT_S16_BE = 0x20,AFMT_S8 = 0x40,AFMT_U16_LE = 0x80,AFMT_U16_BE = 0x100,AFMT_MPEG = 0x200,AFMT_AC3 = 0x400,};
enum MACRO_AGX3 {AGX3_5DB = 0x8,};
enum MACRO_ANYP {ANYP = 0xC0,NLDELAY = 0x300,};
enum MACRO_ARCH {ARCH_SET_GS = 0x1001,ARCH_SET_FS = 0x1002,ARCH_GET_FS = 0x1003,ARCH_GET_GS = 0x1004,};
enum MACRO_ARGP {ARGP_ERR_UNKNOWN = 7,ARGP_KEY_ARG = 0,ARGP_KEY_ARGS = 16777222,ARGP_KEY_END = 16777217,ARGP_KEY_NO_ARGS = 16777218,ARGP_KEY_INIT = 16777219,ARGP_KEY_FINI = 16777223,ARGP_KEY_SUCCESS = 16777220,ARGP_KEY_ERROR = 16777221,ARGP_KEY_HELP_PRE_DOC = 33554433,ARGP_KEY_HELP_POST_DOC = 33554434,ARGP_KEY_HELP_HEADER = 33554435,ARGP_KEY_HELP_EXTRA = 33554436,ARGP_KEY_HELP_DUP_ARGS_NOTE = 33554437,ARGP_KEY_HELP_ARGS_DOC = 33554438,ARGP_PARSE_ARGV0 = 1,ARGP_NO_ERRS = 2,ARGP_NO_ARGS = 4,ARGP_IN_ORDER = 8,ARGP_NO_HELP = 16,ARGP_NO_EXIT = 32,ARGP_LONG_ONLY = 64,ARGP_SILENT = 50,ARGP_HELP_USAGE = 1,ARGP_HELP_SHORT_USAGE = 2,ARGP_HELP_SEE = 4,ARGP_HELP_LONG = 8,ARGP_HELP_PRE_DOC = 16,ARGP_HELP_POST_DOC = 32,ARGP_HELP_DOC = 48,ARGP_HELP_BUG_ADDR = 64,ARGP_HELP_LONG_ONLY = 128,ARGP_HELP_EXIT_ERR = 256,ARGP_HELP_EXIT_OK = 512,ARGP_HELP_STD_ERR = 260,ARGP_HELP_STD_USAGE = 262,ARGP_HELP_STD_HELP = 634,};
enum MACRO_ARPD {ARPD_UPDATE = 0x1,ARPD_LOOKUP = 0x2,ARPD_FLUSH = 0x3,};
enum MACRO_ARPT {ARPT_FUNCTION_MAXNAMELEN = 30,ARPT_TABLE_MAXNAMELEN = 32,ARPT_CONTINUE = -1,ARPT_RETURN = -5,ARPT_DEV_ADDR_LEN_MAX = 16,ARPT_F_MASK = 0,ARPT_INV_VIA_IN = 1,ARPT_INV_VIA_OUT = 2,ARPT_INV_SRCIP = 4,ARPT_INV_TGTIP = 8,ARPT_INV_SRCDEVADDR = 16,ARPT_INV_TGTDEVADDR = 32,ARPT_INV_ARPOP = 64,ARPT_INV_ARPHRD = 128,ARPT_INV_ARPPRO = 256,ARPT_INV_ARPHLN = 512,ARPT_INV_MASK = 1023,ARPT_BASE_CTL = 96,ARPT_SO_SET_REPLACE = 96,ARPT_SO_SET_ADD_COUNTERS = 97,ARPT_SO_SET_MAX = 97,ARPT_SO_GET_INFO = 96,ARPT_SO_GET_ENTRIES = 97,ARPT_SO_GET_REVISION_TARGET = 99,ARPT_SO_GET_MAX = 99,ARPT_MANGLE_SDEV = 1,ARPT_MANGLE_TDEV = 2,ARPT_MANGLE_SIP = 4,ARPT_MANGLE_TIP = 8,ARPT_MANGLE_MASK = 15,};
enum MACRO_ATTR {ATTR_UNTAGGED = 0x0,ATTR_SIMPLE = 0x4,ATTR_HEADOFQUEUE = 0x5,ATTR_ORDERED = 0x6,ATTR_ACA = 0x7,};
enum MACRO_AUTH {AUTH_WHO_CLIENT = 0,AUTH_WHO_SERVER = 1,AUTH_WHO_MASK = 1,AUTH_HOW_ONE_WAY = 0,AUTH_HOW_MUTUAL = 2,AUTH_HOW_MASK = 2,};
enum MACRO_AX25 {AX25_WINDOW = 1,AX25_T1 = 2,AX25_T2 = 5,AX25_T3 = 4,AX25_N2 = 3,AX25_BACKOFF = 6,AX25_EXTSEQ = 7,AX25_PIDINCL = 8,AX25_IDLE = 9,AX25_PACLEN = 10,AX25_IPMAXQUEUE = 11,AX25_IAMDIGI = 12,AX25_KILL = 99,};
enum MACRO_B110 {B110 = 0x3,B134 = 0x4,};
enum MACRO_B150 {B150 = 0x5,};
enum MACRO_B200 {B200 = 0x6,};
enum MACRO_B300 {B300 = 0x7,B600 = 0x8,};
enum MACRO_BASE {FS_BASE = 21,GS_BASE = 22,};
enum MACRO_BIOS {BIOS_BEGIN = 0xA0000,BIOS_END = 0x100000,BIOS_ROM_BASE = 0xFFE00000,BIOS_ROM_END = 0xFFFFFFFF,};
enum MACRO_BIT0 {BIT0 = 0x1,BIT1 = 0x2,BIT2 = 0x4,BIT3 = 0x8,BIT4 = 0x10,BIT5 = 0x20,BIT6 = 0x40,BIT7 = 0x80,BIT8 = 0x100,BIT9 = 0x200,BIT10 = 0x400,BIT11 = 0x800,BIT12 = 0x1000,BIT13 = 0x2000,BIT14 = 0x4000,BIT15 = 0x8000,BIT16 = 0x10000,BIT17 = 0x20000,BIT18 = 0x40000,BIT19 = 0x80000,BIT20 = 0x100000,BIT21 = 0x200000,BIT22 = 0x400000,BIT23 = 0x800000,BIT24 = 0x1000000,BIT25 = 0x2000000,BIT26 = 0x4000000,BIT27 = 0x8000000,BIT28 = 0x10000000,BIT29 = 0x20000000,BIT30 = 0x40000000,BIT31 = 0x80000000,};
enum MACRO_BMAP {BMAP_IOCTL = 1,};
enum MACRO_BMCR {BMCR_RESV = 0x3F,BMCR_SPEED1000 = 0x40,BMCR_CTST = 0x80,BMCR_FULLDPLX = 0x100,BMCR_ANRESTART = 0x200,BMCR_ISOLATE = 0x400,BMCR_PDOWN = 0x800,BMCR_ANENABLE = 0x1000,BMCR_SPEED100 = 0x2000,BMCR_LOOPBACK = 0x4000,BMCR_RESET = 0x8000,};
enum MACRO_BMSR {BMSR_ERCAP = 0x1,BMSR_JCD = 0x2,BMSR_LSTATUS = 0x4,BMSR_ANEGCAPABLE = 0x8,BMSR_RFAULT = 0x10,BMSR_ANEGCOMPLETE = 0x20,BMSR_RESV = 0xC0,BMSR_ESTATEN = 0x100,BMSR_100HALF2 = 0x200,BMSR_100FULL2 = 0x400,BMSR_10HALF = 0x800,BMSR_10FULL = 0x1000,BMSR_100HALF = 0x2000,BMSR_100FULL = 0x4000,BMSR_100BASE4 = 0x8000,};
enum MACRO_BOOL {TRUE = 1,FALSE = 0,};
enum MACRO_BOOT {BOOT_TIME = 2,NEW_TIME = 3,OLD_TIME = 4,};
enum MACRO_BUSY {BUSY = 0x4,};
enum MACRO_BYTE {BYTE_ORDER = 1234,};
enum MACRO_Bool {True = 1,False = 0,};
enum MACRO_CAPI {CAPI_MAXAPPL = 240,CAPI_MAXCONTR = 32,CAPI_MAXDATAWINDOW = 8,};
enum MACRO_CASE {CASE_LOWER_BASE = 8,CASE_LOWER_EXT = 16,};
enum MACRO_CBRK {CBRK = 0,CRPRNT = 18,};
enum MACRO_CDSL {CDSL_NONE = 2147483646,CDSL_CURRENT = 2147483647,};
enum MACRO_CEOF {CEOF = 4,};
enum MACRO_CEOL {CEOL = 0,CERASE = 127,};
enum MACRO_CEOT {CEOT = 4,};
enum MACRO_CFID {CFID_X25_2X = 5200,};
enum MACRO_CHET {CHET_MT = 0,CHET_ST = 1,CHET_IE = 2,CHET_DT = 3,CHET_V1 = 4,CHET_V2 = 5,CHET_V3 = 6,CHET_V4 = 7,};
enum MACRO_CISS {CISS_MAX_LUN = 1024,};
enum MACRO_CLIP {CLIP_DEFAULT_IDLETIMER = 1200,CLIP_CHECK_INTERVAL = 10,};
enum MACRO_CMAP {GIO_CMAP = 0x4B70,PIO_CMAP = 0x4B71,};
enum MACRO_CMIN {CMIN = 1,CQUIT = 28,};
enum MACRO_CODE {PADI_CODE = 0x9,PADO_CODE = 0x7,PADR_CODE = 0x19,PADS_CODE = 0x65,PADT_CODE = 0xA7,};
enum MACRO_COFF {COFF_F_RELFLG = 0x1,COFF_F_EXEC = 0x2,COFF_F_LNNO = 0x4,COFF_F_LSYMS = 0x8,COFF_F_MINMAL = 0x10,COFF_F_UPDATE = 0x20,COFF_F_SWABD = 0x40,COFF_F_AR16WR = 0x80,COFF_F_AR32WR = 0x100,COFF_F_AR32W = 0x200,COFF_F_PATCH = 0x400,COFF_F_NODF = 0x400,COFF_I386MAGIC = 0x14C,COFF_STMAGIC = 0x101,COFF_OMAGIC = 0x104,COFF_JMAGIC = 0x107,COFF_DMAGIC = 0x108,COFF_ZMAGIC = 0x10B,COFF_SHMAGIC = 0x123,COFF_SECT_TEXT = 0x0,COFF_SECT_DATA = 0x1,COFF_SECT_BSS = 0x2,COFF_SECT_REQD = 0x3,COFF_STYP_REG = 0x0,COFF_STYP_DSECT = 0x1,COFF_STYP_NOLOAD = 0x2,COFF_STYP_GROUP = 0x4,COFF_STYP_PAD = 0x8,COFF_STYP_COPY = 0x10,COFF_STYP_TEXT = 0x20,COFF_STYP_DATA = 0x40,COFF_STYP_BSS = 0x80,COFF_STYP_INFO = 0x200,COFF_STYP_OVER = 0x400,COFF_STYP_LIB = 0x800,COFF_LINESZ = 0x6,COFF_E_SYMNMLEN = 0x8,COFF_E_FILNMLEN = 0xE,COFF_E_DIMNUM = 0x4,COFF_N_BTMASK = 0xF,COFF_N_TMASK = 0x30,COFF_N_BTSHFT = 0x4,COFF_N_TSHIFT = 0x2,COFF_SYMESZ = 0x12,COFF_AUXESZ = 0x12,COFF_RELSZ = 0xA,COFF_DEF_DATA_SECTION_ALIGNMENT = 0x4,COFF_DEF_BSS_SECTION_ALIGNMENT = 0x4,COFF_DEF_TEXT_SECTION_ALIGNMENT = 0x4,COFF_DEF_SECTION_ALIGNMENT = 0x4,};
enum MACRO_COLL {COLL_WEIGHTS_MAX = 255,EXPR_NEST_MAX = 32,LINE_MAX = 2048,CHARCLASS_NAME_MAX = 2048,};
enum MACRO_COPY {COPY = 0x18,};
enum MACRO_CRT1 {CRT1_VGA = 0x0,CRT1_LCDA = 0x20000,};
enum MACRO_CRT2 {CRT2_DEFAULT = 0x1,CRT2_LCD = 0x2,CRT2_TV = 0x4,CRT2_VGA = 0x8,};
enum MACRO_CTNL {CTNL_TIMEOUT_NAME_MAX = 32,};
enum MACRO_CTRL {CTRL_PITCH_BENDER = 255,CTRL_PITCH_BENDER_RANGE = 254,CTRL_EXPRESSION = 253,CTRL_MAIN_VOLUME = 252,};
enum MACRO_CUDA {CUDA_PACKET = 1,ERROR_PACKET = 2,TIMER_PACKET = 3,POWER_PACKET = 4,MACIIC_PACKET = 5,PMU_PACKET = 6,};
enum MACRO_CUSE {CUSE_UNRESTRICTED_IOCTL = 1,};
enum MACRO_CX86 {CX86_PCR0 = 0x20,CX86_GCR = 0xB8,CX86_CCR0 = 0xC0,CX86_CCR1 = 0xC1,CX86_CCR2 = 0xC2,CX86_CCR3 = 0xC3,CX86_CCR4 = 0xE8,CX86_CCR5 = 0xE9,CX86_CCR6 = 0xEA,CX86_CCR7 = 0xEB,CX86_PCR1 = 0xF0,CX86_DIR0 = 0xFE,CX86_DIR1 = 0xFF,CX86_ARR_BASE = 0xC4,CX86_RCR_BASE = 0xDC,};
enum MACRO_CYCX {CYCX_2X = 2,CYCX_8X = 8,CYCX_16X = 16,};
enum MACRO_C_OS {C_OS_LINUX = 0x30,C_CH_DISABLE = 0x0,C_CH_TXENABLE = 0x1,C_CH_RXENABLE = 0x2,C_CH_ENABLE = 0x3,C_CH_LOOPBACK = 0x4,C_PR_NONE = 0x0,C_PR_ODD = 0x1,C_PR_EVEN = 0x2,C_PR_MARK = 0x4,C_PR_SPACE = 0x8,C_PR_PARITY = 0xFF,C_PR_DISCARD = 0x100,C_PR_IGNORE = 0x200,C_DL_CS5 = 0x1,C_DL_CS6 = 0x2,C_DL_CS7 = 0x4,C_DL_CS8 = 0x8,C_DL_CS = 0xF,C_DL_1STOP = 0x10,C_DL_15STOP = 0x20,C_DL_2STOP = 0x40,C_DL_STOP = 0xF0,C_IN_DISABLE = 0x0,C_IN_TXBEMPTY = 0x1,C_IN_TXLOWWM = 0x2,C_IN_RXHIWM = 0x10,C_IN_RXNNDT = 0x20,C_IN_MDCD = 0x100,C_IN_MDSR = 0x200,C_IN_MRI = 0x400,C_IN_MCTS = 0x800,C_IN_RXBRK = 0x1000,C_IN_PR_ERROR = 0x2000,C_IN_FR_ERROR = 0x4000,C_IN_OVR_ERROR = 0x8000,C_IN_RXOFL = 0x10000,C_IN_IOCTLW = 0x20000,C_IN_MRTS = 0x40000,C_IN_ICHAR = 0x80000,C_FL_OXX = 0x1,C_FL_IXX = 0x2,C_FL_OIXANY = 0x4,C_FL_SWFLOW = 0xF,C_FS_TXIDLE = 0x0,C_FS_SENDING = 0x1,C_FS_SWFLOW = 0x2,C_RS_PARAM = 0x80000000,C_RS_RTS = 0x1,C_RS_DTR = 0x4,C_RS_DCD = 0x100,C_RS_DSR = 0x200,C_RS_RI = 0x400,C_RS_CTS = 0x800,C_CM_RESET = 0x1,C_CM_IOCTL = 0x2,C_CM_IOCTLW = 0x3,C_CM_IOCTLM = 0x4,C_CM_SENDXOFF = 0x10,C_CM_SENDXON = 0x11,C_CM_CLFLOW = 0x12,C_CM_SENDBRK = 0x41,C_CM_INTBACK = 0x42,C_CM_SET_BREAK = 0x43,C_CM_CLR_BREAK = 0x44,C_CM_CMD_DONE = 0x45,C_CM_INTBACK2 = 0x46,C_CM_TINACT = 0x51,C_CM_IRQ_ENBL = 0x52,C_CM_IRQ_DSBL = 0x53,C_CM_ACK_ENBL = 0x54,C_CM_ACK_DSBL = 0x55,C_CM_FLUSH_RX = 0x56,C_CM_FLUSH_TX = 0x57,C_CM_Q_ENABLE = 0x58,C_CM_Q_DISABLE = 0x59,C_CM_TXBEMPTY = 0x60,C_CM_TXLOWWM = 0x61,C_CM_RXHIWM = 0x62,C_CM_RXNNDT = 0x63,C_CM_TXFEMPTY = 0x64,C_CM_ICHAR = 0x65,C_CM_MDCD = 0x70,C_CM_MDSR = 0x71,C_CM_MRI = 0x72,C_CM_MCTS = 0x73,C_CM_MRTS = 0x74,C_CM_RXBRK = 0x84,C_CM_PR_ERROR = 0x85,C_CM_FR_ERROR = 0x86,C_CM_OVR_ERROR = 0x87,C_CM_RXOFL = 0x88,C_CM_CMDERROR = 0x90,C_CM_FATAL = 0x91,C_CM_HW_RESET = 0x92,};
enum MACRO_DATA {DATA = 0x3,ACK = 0x4,};
enum MACRO_DCCP {DCCP_SINGLE_OPT_MAXLEN = 253,DCCP_SOCKOPT_PACKET_SIZE = 1,DCCP_SOCKOPT_SERVICE = 2,DCCP_SOCKOPT_CHANGE_L = 3,DCCP_SOCKOPT_CHANGE_R = 4,DCCP_SOCKOPT_GET_CUR_MPS = 5,DCCP_SOCKOPT_SERVER_TIMEWAIT = 6,DCCP_SOCKOPT_SEND_CSCOV = 10,DCCP_SOCKOPT_RECV_CSCOV = 11,DCCP_SOCKOPT_AVAILABLE_CCIDS = 12,DCCP_SOCKOPT_CCID = 13,DCCP_SOCKOPT_TX_CCID = 14,DCCP_SOCKOPT_RX_CCID = 15,DCCP_SOCKOPT_QPOLICY_ID = 16,DCCP_SOCKOPT_QPOLICY_TXQLEN = 17,DCCP_SOCKOPT_CCID_RX_INFO = 128,DCCP_SOCKOPT_CCID_TX_INFO = 192,DCCP_SERVICE_LIST_MAX_LEN = 32,};
enum MACRO_DONT {DONT = 254,};
enum MACRO_DRBD {DRBD_MAJOR = 147,RTF_MAJOR = 150,USB_ACM_MAJOR = 166,USB_ACM_AUX_MAJOR = 167,USB_CHAR_MAJOR = 180,MMC_BLOCK_MAJOR = 179,VXVM_MAJOR = 199,VXSPEC_MAJOR = 200,VXDMP_MAJOR = 201,XENVBD_MAJOR = 202,MSR_MAJOR = 202,CPUID_MAJOR = 203,OSST_MAJOR = 206,IBM_TTY3270_MAJOR = 227,IBM_FS3270_MAJOR = 228,VIOTAPE_MAJOR = 230,BLOCK_EXT_MAJOR = 259,SCSI_OSD_MAJOR = 260,};
enum MACRO_DRI2 {DRI2_MAJOR = 1,DRI2_MINOR = 4,};
enum MACRO_Dont {Dont_Check = 0,};
enum MACRO_E820 {E820_X_MAX = 128,};
enum MACRO_EFER {EFER_SCE = 1,EFER_LME = 256,EFER_LMA = 1024,EFER_NX = 2048,EFER_SVME = 4096,EFER_LMSLE = 8192,EFER_FFXSR = 16384,};
enum MACRO_EPOF {EPOF_BAD_MAGIC = 1001,};
enum MACRO_EXEC {EXEC_PAGESIZE = 4096,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXTA {EXTA = 14,};
enum MACRO_EXTB {EXTB = 15,CSIZE = 48,};
enum MACRO_E_OK {E_OK = 0,E_SYSTEM_ERROR = -1,E_BAD_ARGUMENT = -2,E_POSTED = -3,E_CONNECTED = -4,E_BAD_STATE = -5,E_NO_ROOM = -6,E_NOT_POSTED = -7,E_UNKNOWN_COMMAND = -8,E_NO_MATCH = -9,E_NOT_SELECTABLE = -10,E_NOT_CONNECTED = -11,E_REQUEST_DENIED = -12,E_INVALID_FIELD = -13,E_CURRENT = -14,};
enum MACRO_FBIO {FBIO_WAITEVENT = 0x4688,};
enum MACRO_FDDI {FDDI_K_ALEN = 6,FDDI_K_8022_HLEN = 16,FDDI_K_SNAP_HLEN = 21,FDDI_K_8022_ZLEN = 16,FDDI_K_SNAP_ZLEN = 21,FDDI_K_8022_DLEN = 4475,FDDI_K_SNAP_DLEN = 4470,FDDI_K_LLC_ZLEN = 13,FDDI_K_LLC_LEN = 4491,FDDI_FC_K_VOID = 0,FDDI_FC_K_NON_RESTRICTED_TOKEN = 128,FDDI_FC_K_RESTRICTED_TOKEN = 192,FDDI_FC_K_SMT_MIN = 65,FDDI_FC_K_SMT_MAX = 79,FDDI_FC_K_MAC_MIN = 193,FDDI_FC_K_MAC_MAX = 207,FDDI_FC_K_ASYNC_LLC_MIN = 80,FDDI_FC_K_ASYNC_LLC_DEF = 84,FDDI_FC_K_ASYNC_LLC_MAX = 95,FDDI_FC_K_SYNC_LLC_MIN = 208,FDDI_FC_K_SYNC_LLC_MAX = 215,FDDI_FC_K_IMPLEMENTOR_MIN = 96,FDDI_FC_K_IMPLEMENTOR_MAX = 111,FDDI_FC_K_RESERVED_MIN = 112,FDDI_FC_K_RESERVED_MAX = 127,FDDI_EXTENDED_SAP = 170,FDDI_UI_CMD = 3,FDDI_K_OUI_LEN = 3,};
enum MACRO_FLAT {FLAT_VERSION = 0x4,};
enum MACRO_FLOW {TCP_V4_FLOW = 0x1,UDP_V4_FLOW = 0x2,SCTP_V4_FLOW = 0x3,AH_ESP_V4_FLOW = 0x4,TCP_V6_FLOW = 0x5,UDP_V6_FLOW = 0x6,SCTP_V6_FLOW = 0x7,AH_ESP_V6_FLOW = 0x8,AH_V4_FLOW = 0x9,ESP_V4_FLOW = 0xA,AH_V6_FLOW = 0xB,ESP_V6_FLOW = 0xC,IP_USER_FLOW = 0xD,IPV4_FLOW = 0x10,IPV6_FLOW = 0x11,ETHER_FLOW = 0x12,};
enum MACRO_FOLD {FOLD_MARK_IN_PROGRESS = 0x5555,};
enum MACRO_FONT {GIO_FONT = 0x4B60,PIO_FONT = 0x4B61,};
enum MACRO_FORM {FORM_N = 1,FORM_T = 2,FORM_C = 3,};
enum MACRO_FUSE {FUSE_KERNEL_VERSION = 7,FUSE_KERNEL_MINOR_VERSION = 22,FUSE_ROOT_ID = 1,};
enum MACRO_GAIN {GAIN_02DB = 0x7,GAIN_04DB = 0x8,GAIN_06DB = 0x9,GAIN_08DB = 0xA,GAIN_10DB = 0xB,GAIN_12DB = 0xC,GAIN_14DB = 0xD,GAIN_16DB = 0xE,GAIN_18DB = 0xF,GAIN_20DB = 0x10,GAIN_22DB = 0x11,GAIN_24DB = 0x12,GAIN_26DB = 0x13,GAIN_28DB = 0x14,GAIN_30DB = 0x15,GAIN_32DB = 0x16,GAIN_34DB = 0x17,GAIN_36DB = 0x18,GAIN_38DB = 0x19,GAIN_40DB = 0x1A,GAIN_42DB = 0x1B,GAIN_44DB = 0x1C,GAIN_46DB = 0x1D,GAIN_48DB = 0x1E,GAIN_50DB = 0x1F,};
enum MACRO_GENL {GENL_NAMSIZ = 16,GENL_MIN_ID = 16,GENL_MAX_ID = 1023,GENL_ADMIN_PERM = 1,GENL_CMD_CAP_DO = 2,GENL_CMD_CAP_DUMP = 4,GENL_CMD_CAP_HASPOL = 8,GENL_ID_GENERATE = 0,GENL_ID_CTRL = 16,};
enum MACRO_GFS2 {GFS2_MAGIC = 0x1161970,GFS2_BASIC_BLOCK = 0x200,GFS2_BASIC_BLOCK_SHIFT = 0x9,GFS2_MOUNT_LOCK = 0x0,GFS2_LIVE_LOCK = 0x1,GFS2_TRANS_LOCK = 0x2,GFS2_RENAME_LOCK = 0x3,GFS2_CONTROL_LOCK = 0x4,GFS2_MOUNTED_LOCK = 0x5,GFS2_FORMAT_NONE = 0x0,GFS2_FORMAT_SB = 0x64,GFS2_FORMAT_RG = 0xC8,GFS2_FORMAT_RB = 0x12C,GFS2_FORMAT_DI = 0x190,GFS2_FORMAT_IN = 0x1F4,GFS2_FORMAT_LF = 0x258,GFS2_FORMAT_JD = 0x2BC,GFS2_FORMAT_LH = 0x320,GFS2_FORMAT_LD = 0x384,GFS2_FORMAT_LB = 0x3E8,GFS2_FORMAT_EA = 0x640,GFS2_FORMAT_ED = 0x6A4,GFS2_FORMAT_QC = 0x578,GFS2_FORMAT_RI = 0x44C,GFS2_FORMAT_DE = 0x4B0,GFS2_FORMAT_QU = 0x5DC,GFS2_FORMAT_FS = 0x709,GFS2_FORMAT_MULTI = 0x76C,GFS2_METATYPE_NONE = 0x0,GFS2_METATYPE_SB = 0x1,GFS2_METATYPE_RG = 0x2,GFS2_METATYPE_RB = 0x3,GFS2_METATYPE_DI = 0x4,GFS2_METATYPE_IN = 0x5,GFS2_METATYPE_LF = 0x6,GFS2_METATYPE_JD = 0x7,GFS2_METATYPE_LH = 0x8,GFS2_METATYPE_LD = 0x9,GFS2_METATYPE_LB = 0xC,GFS2_METATYPE_EA = 0xA,GFS2_METATYPE_ED = 0xB,GFS2_METATYPE_QC = 0xE,GFS2_SB_ADDR = 0x80,GFS2_SB_LOCK = 0x0,GFS2_LOCKNAME_LEN = 0x40,GFS2_HAS_UUID = 0x1,GFS2_NBBY = 0x4,GFS2_BIT_SIZE = 0x2,GFS2_BIT_MASK = 0x3,GFS2_BLKST_FREE = 0x0,GFS2_BLKST_USED = 0x1,GFS2_BLKST_UNLINKED = 0x2,GFS2_BLKST_DINODE = 0x3,GFS2_RGF_JOURNAL = 0x1,GFS2_RGF_METAONLY = 0x2,GFS2_RGF_DATAONLY = 0x4,GFS2_RGF_NOALLOC = 0x8,GFS2_RGF_TRIMMED = 0x10,GFS2_MAX_META_HEIGHT = 0xA,GFS2_DIR_MAX_DEPTH = 0x11,GFS2_DIF_JDATA = 0x1,GFS2_DIF_EXHASH = 0x2,GFS2_DIF_UNUSED = 0x4,GFS2_DIF_EA_INDIRECT = 0x8,GFS2_DIF_DIRECTIO = 0x10,GFS2_DIF_IMMUTABLE = 0x20,GFS2_DIF_APPENDONLY = 0x40,GFS2_DIF_NOATIME = 0x80,GFS2_DIF_SYNC = 0x100,GFS2_DIF_SYSTEM = 0x200,GFS2_DIF_TOPDIR = 0x400,GFS2_DIF_TRUNC_IN_PROG = 0x20000000,GFS2_DIF_INHERIT_DIRECTIO = 0x40000000,GFS2_DIF_INHERIT_JDATA = 0x80000000,GFS2_FNAMESIZE = 0xFF,GFS2_EA_MAX_NAME_LEN = 0xFF,GFS2_EA_MAX_DATA_LEN = 0x10000,GFS2_EATYPE_UNUSED = 0x0,GFS2_EATYPE_USR = 0x1,GFS2_EATYPE_SYS = 0x2,GFS2_EATYPE_SECURITY = 0x3,GFS2_EATYPE_LAST = 0x3,GFS2_EAFLAG_LAST = 0x1,GFS2_LOG_HEAD_UNMOUNT = 0x1,GFS2_LOG_DESC_METADATA = 0x12C,GFS2_LOG_DESC_REVOKE = 0x12D,GFS2_LOG_DESC_JDATA = 0x12E,GFS2_INUM_QUANTUM = 0x100000,GFS2_QCF_USER = 0x1,};
enum MACRO_GLOB {GLOB_ERR = 1,GLOB_MARK = 2,GLOB_NOSORT = 4,GLOB_DOOFFS = 8,GLOB_NOCHECK = 16,GLOB_APPEND = 32,GLOB_NOESCAPE = 64,GLOB_PERIOD = 128,GLOB_MAGCHAR = 256,GLOB_ALTDIRFUNC = 512,GLOB_BRACE = 1024,GLOB_NOMAGIC = 2048,GLOB_TILDE = 4096,GLOB_ONLYDIR = 8192,GLOB_TILDE_CHECK = 16384,};
enum MACRO_GMON {GMON_PROF_ON = 0,GMON_PROF_BUSY = 1,GMON_PROF_ERROR = 2,GMON_PROF_OFF = 3,};
enum MACRO_GOOD {GOOD = 0x0,};
enum MACRO_GXor {GXor = 0x7,GXnor = 0x8,};
enum MACRO_HARD {HARD_LOOKUP = 4,};
enum MACRO_HAVE {HAVE_ACOSH = 1,HAVE_ADDRINFO = 1,HAVE_ALARM = 1,HAVE_ASINH = 1,HAVE_ASM_TYPES_H = 1,HAVE_ATANH = 1,HAVE_BIND_TEXTDOMAIN_CODESET = 1,HAVE_BLUETOOTH_BLUETOOTH_H = 1,HAVE_C99_BOOL = 1,HAVE_CHOWN = 1,HAVE_CHROOT = 1,HAVE_CLOCK = 1,HAVE_CONFSTR = 1,HAVE_COPYSIGN = 1,HAVE_CTERMID = 1,HAVE_CURSES_H = 1,HAVE_CURSES_IS_TERM_RESIZED = 1,HAVE_CURSES_RESIZETERM = 1,HAVE_CURSES_RESIZE_TERM = 1,HAVE_DECL_ISFINITE = 1,HAVE_DECL_ISINF = 1,HAVE_DECL_ISNAN = 1,HAVE_DEVICE_MACROS = 1,HAVE_DEV_PTMX = 1,HAVE_DIRENT_H = 1,HAVE_DLFCN_H = 1,HAVE_DLOPEN = 1,HAVE_DUP2 = 1,HAVE_DYNAMIC_LOADING = 1,HAVE_EPOLL = 1,HAVE_ERF = 1,HAVE_ERFC = 1,HAVE_ERRNO_H = 1,HAVE_EXECV = 1,HAVE_EXPM1 = 1,HAVE_FCHDIR = 1,HAVE_FCHMOD = 1,HAVE_FCHOWN = 1,HAVE_FCNTL_H = 1,HAVE_FDATASYNC = 1,HAVE_FINITE = 1,HAVE_FLOCK = 1,HAVE_FORK = 1,HAVE_FORKPTY = 1,HAVE_FPATHCONF = 1,HAVE_FSEEKO = 1,HAVE_FSTATVFS = 1,HAVE_FSYNC = 1,HAVE_FTELLO = 1,HAVE_FTIME = 1,HAVE_FTRUNCATE = 1,HAVE_GAI_STRERROR = 1,HAVE_GAMMA = 1,HAVE_GCC_ASM_FOR_X87 = 1,HAVE_GETADDRINFO = 1,HAVE_GETCWD = 1,HAVE_GETC_UNLOCKED = 1,HAVE_GETGROUPS = 1,HAVE_GETHOSTBYNAME_R = 1,HAVE_GETHOSTBYNAME_R_6_ARG = 1,HAVE_GETITIMER = 1,HAVE_GETLOADAVG = 1,HAVE_GETLOGIN = 1,HAVE_GETNAMEINFO = 1,HAVE_GETPAGESIZE = 1,HAVE_GETPEERNAME = 1,HAVE_GETPGID = 1,HAVE_GETPGRP = 1,HAVE_GETPID = 1,HAVE_GETPRIORITY = 1,HAVE_GETPWENT = 1,HAVE_GETRESGID = 1,HAVE_GETRESUID = 1,HAVE_GETSID = 1,HAVE_GETSPENT = 1,HAVE_GETSPNAM = 1,HAVE_GETTIMEOFDAY = 1,HAVE_GETWD = 1,HAVE_GRP_H = 1,HAVE_HSTRERROR = 1,HAVE_HYPOT = 1,HAVE_INET_ATON = 1,HAVE_INET_PTON = 1,HAVE_INITGROUPS = 1,HAVE_INT32_T = 1,HAVE_INT64_T = 1,HAVE_INTTYPES_H = 1,HAVE_KILL = 1,HAVE_KILLPG = 1,HAVE_LANGINFO_H = 1,HAVE_LARGEFILE_SUPPORT = 1,HAVE_LCHOWN = 1,HAVE_LGAMMA = 1,HAVE_LIBDL = 1,HAVE_LIBINTL_H = 1,HAVE_LIBREADLINE = 1,HAVE_LINK = 1,HAVE_LINUX_NETLINK_H = 1,HAVE_LINUX_TIPC_H = 1,HAVE_LOG1P = 1,HAVE_LONG_DOUBLE = 1,HAVE_LONG_LONG = 1,HAVE_LSTAT = 1,HAVE_MAKEDEV = 1,HAVE_MEMMOVE = 1,HAVE_MEMORY_H = 1,HAVE_MKFIFO = 1,HAVE_MKNOD = 1,HAVE_MKTIME = 1,HAVE_MREMAP = 1,HAVE_NCURSES_H = 1,HAVE_NETPACKET_PACKET_H = 1,HAVE_NICE = 1,HAVE_OPENPTY = 1,HAVE_PATHCONF = 1,HAVE_PAUSE = 1,HAVE_POLL = 1,HAVE_POLL_H = 1,HAVE_PROTOTYPES = 1,HAVE_PTHREAD_H = 1,HAVE_PTHREAD_SIGMASK = 1,HAVE_PTY_H = 1,HAVE_PUTENV = 1,HAVE_READLINK = 1,HAVE_REALPATH = 1,HAVE_RL_CALLBACK = 1,HAVE_RL_CATCH_SIGNAL = 1,HAVE_RL_COMPLETION_APPEND_CHARACTER = 1,HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK = 1,HAVE_RL_COMPLETION_MATCHES = 1,HAVE_RL_COMPLETION_SUPPRESS_APPEND = 1,HAVE_RL_PRE_INPUT_HOOK = 1,HAVE_ROUND = 1,HAVE_SELECT = 1,HAVE_SEM_GETVALUE = 1,HAVE_SEM_OPEN = 1,HAVE_SEM_TIMEDWAIT = 1,HAVE_SEM_UNLINK = 1,HAVE_SETEGID = 1,HAVE_SETEUID = 1,HAVE_SETGID = 1,HAVE_SETGROUPS = 1,HAVE_SETITIMER = 1,HAVE_SETLOCALE = 1,HAVE_SETPGID = 1,HAVE_SETPGRP = 1,HAVE_SETREGID = 1,HAVE_SETRESGID = 1,HAVE_SETRESUID = 1,HAVE_SETREUID = 1,HAVE_SETSID = 1,HAVE_SETUID = 1,HAVE_SETVBUF = 1,HAVE_SHADOW_H = 1,HAVE_SIGACTION = 1,HAVE_SIGINTERRUPT = 1,HAVE_SIGNAL_H = 1,HAVE_SIGRELSE = 1,HAVE_SNPRINTF = 1,HAVE_SOCKADDR_STORAGE = 1,HAVE_SOCKETPAIR = 1,HAVE_SPAWN_H = 1,HAVE_SSIZE_T = 1,HAVE_STATVFS = 1,HAVE_STAT_TV_NSEC = 1,HAVE_STDARG_PROTOTYPES = 1,HAVE_STDINT_H = 1,HAVE_STDLIB_H = 1,HAVE_STRDUP = 1,HAVE_STRFTIME = 1,HAVE_STRINGS_H = 1,HAVE_STRING_H = 1,HAVE_STRUCT_STAT_ST_BLKSIZE = 1,HAVE_STRUCT_STAT_ST_BLOCKS = 1,HAVE_STRUCT_STAT_ST_RDEV = 1,HAVE_STRUCT_TM_TM_ZONE = 1,HAVE_ST_BLOCKS = 1,HAVE_SYMLINK = 1,HAVE_SYSCONF = 1,HAVE_SYSEXITS_H = 1,HAVE_SYS_EPOLL_H = 1,HAVE_SYS_FILE_H = 1,HAVE_SYS_PARAM_H = 1,HAVE_SYS_POLL_H = 1,HAVE_SYS_RESOURCE_H = 1,HAVE_SYS_SELECT_H = 1,HAVE_SYS_SOCKET_H = 1,HAVE_SYS_STATVFS_H = 1,HAVE_SYS_STAT_H = 1,HAVE_SYS_TIMES_H = 1,HAVE_SYS_TIME_H = 1,HAVE_SYS_TYPES_H = 1,HAVE_SYS_UN_H = 1,HAVE_SYS_UTSNAME_H = 1,HAVE_SYS_WAIT_H = 1,HAVE_TCGETPGRP = 1,HAVE_TCSETPGRP = 1,HAVE_TEMPNAM = 1,HAVE_TERMIOS_H = 1,HAVE_TERM_H = 1,HAVE_TGAMMA = 1,HAVE_TIMEGM = 1,HAVE_TIMES = 1,HAVE_TMPFILE = 1,HAVE_TMPNAM = 1,HAVE_TMPNAM_R = 1,HAVE_TM_ZONE = 1,HAVE_TRUNCATE = 1,HAVE_UINT32_T = 1,HAVE_UINT64_T = 1,HAVE_UINTPTR_T = 1,HAVE_UNAME = 1,HAVE_UNISTD_H = 1,HAVE_UNSETENV = 1,HAVE_UTIMES = 1,HAVE_UTIME_H = 1,HAVE_WAIT3 = 1,HAVE_WAIT4 = 1,HAVE_WAITPID = 1,HAVE_WCHAR_H = 1,HAVE_WCSCOLL = 1,HAVE_WORKING_TZSET = 1,HAVE_ZLIB_COPY = 1,};
enum MACRO_HDLC {HDLC_MAX_MTU = 1500,HDLC_MAX_MRU = 1600,};
enum MACRO_HDSP {HDSP_MATRIX_MIXER_SIZE = 2048,};
enum MACRO_HINT {HINT_PNP = 0x1,HINT_PDA = 0x2,HINT_COMPUTER = 0x4,HINT_PRINTER = 0x8,HINT_MODEM = 0x10,HINT_FAX = 0x20,HINT_LAN = 0x40,HINT_EXTENSION = 0x80,HINT_TELEPHONY = 0x1,HINT_FILE_SERVER = 0x2,HINT_COMM = 0x4,HINT_MESSAGE = 0x8,HINT_HTTP = 0x10,HINT_OBEX = 0x20,};
enum MACRO_HOST {HOST_NOT_FOUND = 1,};
enum MACRO_HPET {HPET_INFO_PERIODIC = 0x10,HPET_IE_ON = 0x6801,HPET_IE_OFF = 0x6802,HPET_EPI = 0x6804,HPET_DPI = 0x6805,};
enum MACRO_ICMP {ICMP_ECHOREPLY = 0,ICMP_DEST_UNREACH = 3,ICMP_SOURCE_QUENCH = 4,ICMP_REDIRECT = 5,ICMP_ECHO = 8,ICMP_TIME_EXCEEDED = 11,ICMP_PARAMETERPROB = 12,ICMP_TIMESTAMP = 13,ICMP_TIMESTAMPREPLY = 14,ICMP_INFO_REQUEST = 15,ICMP_INFO_REPLY = 16,ICMP_ADDRESS = 17,ICMP_ADDRESSREPLY = 18,};
enum MACRO_IEEE {IEEE_8021QAZ_MAX_TCS = 8,IEEE_8021QAZ_TSA_STRICT = 0,IEEE_8021QAZ_TSA_CB_SHAPER = 1,IEEE_8021QAZ_TSA_ETS = 2,IEEE_8021QAZ_TSA_VENDOR = 255,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_MEMBERSHIP_QUERY = 17,IGMP_V1_MEMBERSHIP_REPORT = 18,IGMP_V2_MEMBERSHIP_REPORT = 22,IGMP_V2_LEAVE_GROUP = 23,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_TRACE = 21,IGMP_MTRACE_RESP = 30,IGMP_MTRACE = 31,IGMP_MAX_HOST_REPORT_DELAY = 10,IGMP_TIMER_SCALE = 10,IGMP_DELAYING_MEMBER = 1,IGMP_IDLE_MEMBER = 2,IGMP_LAZY_MEMBER = 3,IGMP_SLEEPING_MEMBER = 4,IGMP_AWAKENING_MEMBER = 5,IGMP_v1_ROUTER = 1,IGMP_v2_ROUTER = 2,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_HOST_MEMBERSHIP_REPORT = 18,IGMP_HOST_NEW_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,};
enum MACRO_INET {INET_DIAG_GETSOCK_MAX = 24,INET_DIAG_NOCOOKIE = -1,};
enum MACRO_INFO {SET_DISK_INFO = 0x924,WRITE_RAID_INFO = 0x925,};
enum MACRO_INT8 {INT8_MAX = 127,INT16_MAX = 32767,INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,UINT8_MAX = 255,UINT16_MAX = 65535,UINT32_MAX = -1,UINT64_MAX = -1,};
enum MACRO_IOCB {IOCB_FLAG_RESFD = 1,};
enum MACRO_IP6F {IP6F_OFF_MASK = 0xF8FF,IP6F_RESERVED_MASK = 0x600,IP6F_MORE_FRAG = 0x100,};
enum MACRO_IP6T {IP6T_FUNCTION_MAXNAMELEN = 30,IP6T_TABLE_MAXNAMELEN = 32,IP6T_CONTINUE = -1,IP6T_RETURN = -5,IP6T_TCP_INV_SRCPT = 1,IP6T_TCP_INV_DSTPT = 2,IP6T_TCP_INV_FLAGS = 4,IP6T_TCP_INV_OPTION = 8,IP6T_TCP_INV_MASK = 15,IP6T_UDP_INV_SRCPT = 1,IP6T_UDP_INV_DSTPT = 2,IP6T_UDP_INV_MASK = 3,IP6T_F_PROTO = 1,IP6T_F_TOS = 2,IP6T_F_GOTO = 4,IP6T_F_MASK = 7,IP6T_INV_VIA_IN = 1,IP6T_INV_VIA_OUT = 2,IP6T_INV_TOS = 4,IP6T_INV_SRCIP = 8,IP6T_INV_DSTIP = 16,IP6T_INV_FRAG = 32,IP6T_INV_PROTO = 64,IP6T_INV_MASK = 127,IP6T_BASE_CTL = 64,IP6T_SO_SET_REPLACE = 64,IP6T_SO_SET_ADD_COUNTERS = 65,IP6T_SO_SET_MAX = 65,IP6T_SO_GET_INFO = 64,IP6T_SO_GET_ENTRIES = 65,IP6T_SO_GET_REVISION_MATCH = 68,IP6T_SO_GET_REVISION_TARGET = 69,IP6T_SO_GET_MAX = 69,IP6T_SO_ORIGINAL_DST = 80,IP6T_ICMP_INV = 1,IP6T_AH_SPI = 1,IP6T_AH_LEN = 2,IP6T_AH_RES = 4,IP6T_AH_INV_SPI = 1,IP6T_AH_INV_LEN = 2,IP6T_AH_INV_MASK = 3,IP6T_FRAG_IDS = 1,IP6T_FRAG_LEN = 2,IP6T_FRAG_RES = 4,IP6T_FRAG_FST = 8,IP6T_FRAG_MF = 16,IP6T_FRAG_NMF = 32,IP6T_FRAG_INV_IDS = 1,IP6T_FRAG_INV_LEN = 2,IP6T_FRAG_INV_MASK = 3,};
enum MACRO_IPMI {IPMI_NETFN_SENSOR_EVENT_REQUEST = 0x4,IPMI_NETFN_SENSOR_EVENT_RESPONSE = 0x5,IPMI_GET_EVENT_RECEIVER_CMD = 0x1,IPMI_NETFN_APP_REQUEST = 0x6,IPMI_NETFN_APP_RESPONSE = 0x7,IPMI_GET_DEVICE_ID_CMD = 0x1,IPMI_COLD_RESET_CMD = 0x2,IPMI_WARM_RESET_CMD = 0x3,IPMI_CLEAR_MSG_FLAGS_CMD = 0x30,IPMI_GET_DEVICE_GUID_CMD = 0x8,IPMI_GET_MSG_FLAGS_CMD = 0x31,IPMI_SEND_MSG_CMD = 0x34,IPMI_GET_MSG_CMD = 0x33,IPMI_SET_BMC_GLOBAL_ENABLES_CMD = 0x2E,IPMI_GET_BMC_GLOBAL_ENABLES_CMD = 0x2F,IPMI_READ_EVENT_MSG_BUFFER_CMD = 0x35,IPMI_GET_CHANNEL_INFO_CMD = 0x42,IPMI_BMC_RCV_MSG_INTR = 0x1,IPMI_BMC_EVT_MSG_INTR = 0x2,IPMI_BMC_EVT_MSG_BUFF = 0x4,IPMI_BMC_SYS_LOG = 0x8,IPMI_NETFN_STORAGE_REQUEST = 0xA,IPMI_NETFN_STORAGE_RESPONSE = 0xB,IPMI_ADD_SEL_ENTRY_CMD = 0x44,IPMI_NETFN_FIRMWARE_REQUEST = 0x8,IPMI_NETFN_FIRMWARE_RESPONSE = 0x9,IPMI_BMC_SLAVE_ADDR = 0x20,IPMI_MAX_MSG_LENGTH = 0x110,IPMI_CC_NO_ERROR = 0x0,IPMI_NODE_BUSY_ERR = 0xC0,IPMI_INVALID_COMMAND_ERR = 0xC1,IPMI_TIMEOUT_ERR = 0xC3,IPMI_ERR_MSG_TRUNCATED = 0xC6,IPMI_REQ_LEN_INVALID_ERR = 0xC7,IPMI_REQ_LEN_EXCEEDED_ERR = 0xC8,IPMI_NOT_IN_MY_STATE_ERR = 0xD5,IPMI_LOST_ARBITRATION_ERR = 0x81,IPMI_BUS_ERR = 0x82,IPMI_NAK_ON_WRITE_ERR = 0x83,IPMI_ERR_UNSPECIFIED = 0xFF,IPMI_CHANNEL_PROTOCOL_IPMB = 0x1,IPMI_CHANNEL_PROTOCOL_ICMB = 0x2,IPMI_CHANNEL_PROTOCOL_SMBUS = 0x4,IPMI_CHANNEL_PROTOCOL_KCS = 0x5,IPMI_CHANNEL_PROTOCOL_SMIC = 0x6,IPMI_CHANNEL_PROTOCOL_BT10 = 0x7,IPMI_CHANNEL_PROTOCOL_BT15 = 0x8,IPMI_CHANNEL_PROTOCOL_TMODE = 0x9,IPMI_CHANNEL_MEDIUM_IPMB = 0x1,IPMI_CHANNEL_MEDIUM_ICMB10 = 0x2,IPMI_CHANNEL_MEDIUM_ICMB09 = 0x3,IPMI_CHANNEL_MEDIUM_8023LAN = 0x4,IPMI_CHANNEL_MEDIUM_ASYNC = 0x5,IPMI_CHANNEL_MEDIUM_OTHER_LAN = 0x6,IPMI_CHANNEL_MEDIUM_PCI_SMBUS = 0x7,IPMI_CHANNEL_MEDIUM_SMBUS1 = 0x8,IPMI_CHANNEL_MEDIUM_SMBUS2 = 0x9,IPMI_CHANNEL_MEDIUM_USB1 = 0xA,IPMI_CHANNEL_MEDIUM_USB2 = 0xB,IPMI_CHANNEL_MEDIUM_SYSINTF = 0xC,IPMI_CHANNEL_MEDIUM_OEM_MIN = 0x60,IPMI_CHANNEL_MEDIUM_OEM_MAX = 0x7F,IPMI_MAX_ADDR_SIZE = 0x20,IPMI_SYSTEM_INTERFACE_ADDR_TYPE = 0xC,IPMI_IPMB_ADDR_TYPE = 0x1,IPMI_IPMB_BROADCAST_ADDR_TYPE = 0x41,IPMI_LAN_ADDR_TYPE = 0x4,IPMI_BMC_CHANNEL = 0xF,IPMI_NUM_CHANNELS = 0x10,IPMI_CHAN_ALL = 0xFFFFFFFF,IPMI_INVALID_CMD_COMPLETION_CODE = 0xC1,IPMI_TIMEOUT_COMPLETION_CODE = 0xC3,IPMI_UNKNOWN_ERR_COMPLETION_CODE = 0xFF,IPMI_RESPONSE_RECV_TYPE = 0x1,IPMI_ASYNC_EVENT_RECV_TYPE = 0x2,IPMI_CMD_RECV_TYPE = 0x3,IPMI_RESPONSE_RESPONSE_TYPE = 0x4,IPMI_OEM_RECV_TYPE = 0x5,IPMI_MAINTENANCE_MODE_AUTO = 0x0,IPMI_MAINTENANCE_MODE_OFF = 0x1,IPMI_MAINTENANCE_MODE_ON = 0x2,IPMI_IOC_MAGIC = 0x69,};
enum MACRO_IPPP {IPPP_COMP_FLAG_XMIT = 0x1,IPPP_COMP_FLAG_LINK = 0x2,};
enum MACRO_IPV6 {IPV6_ADDRFORM = 1,IPV6_2292PKTINFO = 2,IPV6_2292HOPOPTS = 3,IPV6_2292DSTOPTS = 4,IPV6_2292RTHDR = 5,IPV6_2292PKTOPTIONS = 6,IPV6_CHECKSUM = 7,IPV6_2292HOPLIMIT = 8,IPV6_NEXTHOP = 9,IPV6_AUTHHDR = 10,IPV6_UNICAST_HOPS = 16,IPV6_MULTICAST_IF = 17,IPV6_MULTICAST_HOPS = 18,IPV6_MULTICAST_LOOP = 19,IPV6_JOIN_GROUP = 20,IPV6_LEAVE_GROUP = 21,IPV6_ROUTER_ALERT = 22,IPV6_MTU_DISCOVER = 23,IPV6_MTU = 24,IPV6_RECVERR = 25,IPV6_V6ONLY = 26,IPV6_JOIN_ANYCAST = 27,IPV6_LEAVE_ANYCAST = 28,IPV6_IPSEC_POLICY = 34,IPV6_XFRM_POLICY = 35,IPV6_RECVPKTINFO = 49,IPV6_PKTINFO = 50,IPV6_RECVHOPLIMIT = 51,IPV6_HOPLIMIT = 52,IPV6_RECVHOPOPTS = 53,IPV6_HOPOPTS = 54,IPV6_RTHDRDSTOPTS = 55,IPV6_RECVRTHDR = 56,IPV6_RTHDR = 57,IPV6_RECVDSTOPTS = 58,IPV6_DSTOPTS = 59,IPV6_RECVTCLASS = 66,IPV6_TCLASS = 67,IPV6_ADD_MEMBERSHIP = 20,IPV6_DROP_MEMBERSHIP = 21,IPV6_RXHOPOPTS = 54,IPV6_RXDSTOPTS = 59,IPV6_PMTUDISC_DONT = 0,IPV6_PMTUDISC_WANT = 1,IPV6_PMTUDISC_DO = 2,IPV6_PMTUDISC_PROBE = 3,};
enum MACRO_IPVS {IPVS_GENL_VERSION = 0x1,};
enum MACRO_IP_0 {IP = 244,};
enum MACRO_IRDA {IRDA_NL_VERSION = 1,IRDA_MODE_PRIMARY = 1,IRDA_MODE_SECONDARY = 2,IRDA_MODE_MONITOR = 4,};
enum MACRO_ISDN {ISDN_MAX_DRIVERS = 32,ISDN_MAX_CHANNELS = 64,};
enum MACRO_ISIG {ISIG = 0x1,ICANON = 0x2,XCASE = 0x4,ECHO = 0x8,ECHOE = 0x10,ECHOK = 0x20,ECHONL = 0x40,NOFLSH = 0x80000000,};
enum MACRO_IVTV {IVTV_SLICED_TYPE_TELETEXT_B = 1,IVTV_SLICED_TYPE_CAPTION_525 = 4,IVTV_SLICED_TYPE_WSS_625 = 5,IVTV_SLICED_TYPE_VPS = 7,};
enum MACRO_KEEP {KEEP_SEGMENTS = 64,};
enum MACRO_K_F1 {K_F1 = 256,K_F2 = 257,K_F3 = 258,K_F4 = 259,K_F5 = 260,K_F6 = 261,K_F7 = 262,K_F8 = 263,K_F9 = 264,K_F10 = 265,K_F11 = 266,K_F12 = 267,K_F13 = 268,K_F14 = 269,K_F15 = 270,K_F16 = 271,K_F17 = 272,K_F18 = 273,K_F19 = 274,K_F20 = 275,K_FIND = 276,K_INSERT = 277,K_REMOVE = 278,K_SELECT = 279,K_PGUP = 280,K_PGDN = 281,K_MACRO = 282,K_HELP = 283,K_DO = 284,K_PAUSE = 285,K_F21 = 286,K_F22 = 287,K_F23 = 288,K_F24 = 289,K_F25 = 290,K_F26 = 291,K_F27 = 292,K_F28 = 293,K_F29 = 294,K_F30 = 295,K_F31 = 296,K_F32 = 297,K_F33 = 298,K_F34 = 299,K_F35 = 300,K_F36 = 301,K_F37 = 302,K_F38 = 303,K_F39 = 304,K_F40 = 305,K_F41 = 306,K_F42 = 307,K_F43 = 308,K_F44 = 309,K_F45 = 310,K_F46 = 311,K_F47 = 312,K_F48 = 313,K_F49 = 314,K_F50 = 315,K_F51 = 316,K_F52 = 317,K_F53 = 318,K_F54 = 319,K_F55 = 320,K_F56 = 321,K_F57 = 322,K_F58 = 323,K_F59 = 324,K_F60 = 325,K_F61 = 326,K_F62 = 327,K_F63 = 328,K_F64 = 329,K_F65 = 330,K_F66 = 331,K_F67 = 332,K_F68 = 333,K_F69 = 334,K_F70 = 335,K_F71 = 336,K_F72 = 337,K_F73 = 338,K_F74 = 339,K_F75 = 340,K_F76 = 341,K_F77 = 342,K_F78 = 343,K_F79 = 344,K_F80 = 345,K_F81 = 346,K_F82 = 347,K_F83 = 348,K_F84 = 349,K_F85 = 350,K_F86 = 351,K_F87 = 352,K_F88 = 353,K_F89 = 354,K_F90 = 355,K_F91 = 356,K_F92 = 357,K_F93 = 358,K_F94 = 359,K_F95 = 360,K_F96 = 361,K_F97 = 362,K_F98 = 363,K_F99 = 364,K_F100 = 365,K_F101 = 366,K_F102 = 367,K_F103 = 368,K_F104 = 369,K_F105 = 370,K_F106 = 371,K_F107 = 372,K_F108 = 373,K_F109 = 374,K_F110 = 375,K_F111 = 376,K_F112 = 377,K_F113 = 378,K_F114 = 379,K_F115 = 380,K_F116 = 381,K_F117 = 382,K_F118 = 383,K_F119 = 384,K_F120 = 385,K_F121 = 386,K_F122 = 387,K_F123 = 388,K_F124 = 389,K_F125 = 390,K_F126 = 391,K_F127 = 392,K_F128 = 393,K_F129 = 394,K_F130 = 395,K_F131 = 396,K_F132 = 397,K_F133 = 398,K_F134 = 399,K_F135 = 400,K_F136 = 401,K_F137 = 402,K_F138 = 403,K_F139 = 404,K_F140 = 405,K_F141 = 406,K_F142 = 407,K_F143 = 408,K_F144 = 409,K_F145 = 410,K_F146 = 411,K_F147 = 412,K_F148 = 413,K_F149 = 414,K_F150 = 415,K_F151 = 416,K_F152 = 417,K_F153 = 418,K_F154 = 419,K_F155 = 420,K_F156 = 421,K_F157 = 422,K_F158 = 423,K_F159 = 424,K_F160 = 425,K_F161 = 426,K_F162 = 427,K_F163 = 428,K_F164 = 429,K_F165 = 430,K_F166 = 431,K_F167 = 432,K_F168 = 433,K_F169 = 434,K_F170 = 435,K_F171 = 436,K_F172 = 437,K_F173 = 438,K_F174 = 439,K_F175 = 440,K_F176 = 441,K_F177 = 442,K_F178 = 443,K_F179 = 444,K_F180 = 445,K_F181 = 446,K_F182 = 447,K_F183 = 448,K_F184 = 449,K_F185 = 450,K_F186 = 451,K_F187 = 452,K_F188 = 453,K_F189 = 454,K_F190 = 455,K_F191 = 456,K_F192 = 457,K_F193 = 458,K_F194 = 459,K_F195 = 460,K_F196 = 461,K_F197 = 462,K_F198 = 463,K_F199 = 464,K_F200 = 465,K_F201 = 466,K_F202 = 467,K_F203 = 468,K_F204 = 469,K_F205 = 470,K_F206 = 471,K_F207 = 472,K_F208 = 473,K_F209 = 474,K_F210 = 475,K_F211 = 476,K_F212 = 477,K_F213 = 478,K_F214 = 479,K_F215 = 480,K_F216 = 481,K_F217 = 482,K_F218 = 483,K_F219 = 484,K_F220 = 485,K_F221 = 486,K_F222 = 487,K_F223 = 488,K_F224 = 489,K_F225 = 490,K_F226 = 491,K_F227 = 492,K_F228 = 493,K_F229 = 494,K_F230 = 495,K_F231 = 496,K_F232 = 497,K_F233 = 498,K_F234 = 499,K_F235 = 500,K_F236 = 501,K_F237 = 502,K_F238 = 503,K_F239 = 504,K_F240 = 505,K_F241 = 506,K_F242 = 507,K_F243 = 508,K_F244 = 509,K_F245 = 510,K_UNDO = 511,K_HOLE = 512,K_ENTER = 513,K_SH_REGS = 514,K_SH_MEM = 515,K_SH_STAT = 516,K_BREAK = 517,K_CONS = 518,K_CAPS = 519,K_NUM = 520,K_HOLD = 521,K_SCROLLFORW = 522,K_SCROLLBACK = 523,K_BOOT = 524,K_CAPSON = 525,K_COMPOSE = 526,K_SAK = 527,K_DECRCONSOLE = 528,K_INCRCONSOLE = 529,K_SPAWNCONSOLE = 530,K_BARENUMLOCK = 531,K_ALLOCATED = 638,K_NOSUCHMAP = 639,K_P0 = 768,K_P1 = 769,K_P2 = 770,K_P3 = 771,K_P4 = 772,K_P5 = 773,K_P6 = 774,K_P7 = 775,K_P8 = 776,K_P9 = 777,K_PPLUS = 778,K_PMINUS = 779,K_PSTAR = 780,K_PSLASH = 781,K_PENTER = 782,K_PCOMMA = 783,K_PDOT = 784,K_PPLUSMINUS = 785,K_PPARENL = 786,K_PPARENR = 787,};
enum MACRO_L2TP {L2TP_GENL_VERSION = 0x1,};
enum MACRO_LOCK {LOCK_SH = 1,LOCK_EX = 2,LOCK_NB = 4,LOCK_UN = 8,LOCK_MAND = 32,LOCK_READ = 64,LOCK_WRITE = 128,LOCK_RW = 192,};
enum MACRO_LOCL {LOCL_STARTAUDIO = 1,};
enum MACRO_LONG {READ_LONG = 0x3E,WRITE_LONG = 0x3F,};
enum MACRO_LOOK {LOOK_UP = 1,};
enum MACRO_LOOP {LOOP_SET_FD = 0x4C00,LOOP_CLR_FD = 0x4C01,LOOP_SET_STATUS = 0x4C02,LOOP_GET_STATUS = 0x4C03,LOOP_SET_STATUS64 = 0x4C04,LOOP_GET_STATUS64 = 0x4C05,LOOP_CHANGE_FD = 0x4C06,LOOP_SET_CAPACITY = 0x4C07,LOOP_CTL_ADD = 0x4C80,LOOP_CTL_REMOVE = 0x4C81,LOOP_CTL_GET_FREE = 0x4C82,};
enum MACRO_LSAP {LSAP_ANY = 0xFF,};
enum MACRO_MADV {MADV_NORMAL = 0,MADV_RANDOM = 1,MADV_SEQUENTIAL = 2,MADV_WILLNEED = 3,MADV_DONTNEED = 4,MADV_REMOVE = 9,MADV_DONTFORK = 10,MADV_DOFORK = 11,MADV_MERGEABLE = 12,MADV_UNMERGEABLE = 13,MADV_HUGEPAGE = 14,MADV_NOHUGEPAGE = 15,MADV_DONTDUMP = 16,MADV_DODUMP = 17,MADV_HWPOISON = 100,};
enum MACRO_MARK {MARK_SET_VALUE = 0xFFFFFFF0,MARK_OR_VALUE = 0xFFFFFFE0,MARK_AND_VALUE = 0xFFFFFFD0,MARK_XOR_VALUE = 0xFFFFFFC0,};
enum MACRO_MASK {XTestACTION_TYPE_MASK = 0x3,XTestKEY_STATE_MASK = 0x4,XTestX_SIGN_BIT_MASK = 0x4,XTestY_SIGN_BIT_MASK = 0x8,XTestDEVICE_ID_MASK = 0xF0,};
enum MACRO_MATH {MATH_ERRNO = 1,MATH_ERREXCEPT = 2,};
enum MACRO_MDIO {MDIO_MMD_PMAPMD = 1,MDIO_MMD_WIS = 2,MDIO_MMD_PCS = 3,MDIO_MMD_PHYXS = 4,MDIO_MMD_DTEXS = 5,MDIO_MMD_TC = 6,MDIO_MMD_AN = 7,MDIO_MMD_C22EXT = 29,MDIO_MMD_VEND1 = 30,MDIO_MMD_VEND2 = 31,MDIO_CTRL1 = 0,MDIO_STAT1 = 1,MDIO_DEVID1 = 2,MDIO_DEVID2 = 3,MDIO_SPEED = 4,MDIO_DEVS1 = 5,MDIO_DEVS2 = 6,MDIO_CTRL2 = 7,MDIO_STAT2 = 8,MDIO_PMA_TXDIS = 9,MDIO_PMA_RXDET = 10,MDIO_PMA_EXTABLE = 11,MDIO_PKGID1 = 14,MDIO_PKGID2 = 15,MDIO_AN_ADVERTISE = 16,MDIO_AN_LPA = 19,MDIO_PCS_EEE_ABLE = 20,MDIO_PCS_EEE_WK_ERR = 22,MDIO_PHYXS_LNSTAT = 24,MDIO_AN_EEE_ADV = 60,MDIO_AN_EEE_LPABLE = 61,MDIO_PMA_10GBT_SWAPPOL = 130,MDIO_PMA_10GBT_TXPWR = 131,MDIO_PMA_10GBT_SNR = 133,MDIO_PMA_10GBR_FECABLE = 170,MDIO_PCS_10GBX_STAT1 = 24,MDIO_PCS_10GBRT_STAT1 = 32,MDIO_PCS_10GBRT_STAT2 = 33,MDIO_AN_10GBT_CTRL = 32,MDIO_AN_10GBT_STAT = 33,MDIO_PMA_LASI_RXCTRL = 36864,MDIO_PMA_LASI_TXCTRL = 36865,MDIO_PMA_LASI_CTRL = 36866,MDIO_PMA_LASI_RXSTAT = 36867,MDIO_PMA_LASI_TXSTAT = 36868,MDIO_PMA_LASI_STAT = 36869,MDIO_CTRL1_SPEEDSELEXT = 8256,MDIO_CTRL1_SPEEDSEL = 8316,MDIO_CTRL1_FULLDPLX = 256,MDIO_CTRL1_LPOWER = 2048,MDIO_CTRL1_RESET = 32768,MDIO_PMA_CTRL1_LOOPBACK = 1,MDIO_PMA_CTRL1_SPEED1000 = 64,MDIO_PMA_CTRL1_SPEED100 = 8192,MDIO_PCS_CTRL1_LOOPBACK = 16384,MDIO_PHYXS_CTRL1_LOOPBACK = 16384,MDIO_AN_CTRL1_RESTART = 512,MDIO_AN_CTRL1_ENABLE = 4096,MDIO_AN_CTRL1_XNP = 8192,MDIO_PCS_CTRL1_CLKSTOP_EN = 1024,MDIO_CTRL1_SPEED10G = 8256,MDIO_CTRL1_SPEED10P2B = 8260,MDIO_STAT1_LPOWERABLE = 2,MDIO_STAT1_LSTATUS = 4,MDIO_STAT1_FAULT = 128,MDIO_AN_STAT1_LPABLE = 1,MDIO_AN_STAT1_ABLE = 8,MDIO_AN_STAT1_RFAULT = 16,MDIO_AN_STAT1_COMPLETE = 32,MDIO_AN_STAT1_PAGE = 64,MDIO_AN_STAT1_XNP = 128,MDIO_SPEED_10G = 1,MDIO_PMA_SPEED_2B = 2,MDIO_PMA_SPEED_10P = 4,MDIO_PMA_SPEED_1000 = 16,MDIO_PMA_SPEED_100 = 32,MDIO_PMA_SPEED_10 = 64,MDIO_PCS_SPEED_10P2B = 2,MDIO_DEVS_PMAPMD = 2,MDIO_DEVS_WIS = 4,MDIO_DEVS_PCS = 8,MDIO_DEVS_PHYXS = 16,MDIO_DEVS_DTEXS = 32,MDIO_DEVS_TC = 64,MDIO_DEVS_AN = 128,MDIO_DEVS_C22EXT = 536870912,MDIO_PMA_CTRL2_TYPE = 15,MDIO_PMA_CTRL2_10GBCX4 = 0,MDIO_PMA_CTRL2_10GBEW = 1,MDIO_PMA_CTRL2_10GBLW = 2,MDIO_PMA_CTRL2_10GBSW = 3,MDIO_PMA_CTRL2_10GBLX4 = 4,MDIO_PMA_CTRL2_10GBER = 5,MDIO_PMA_CTRL2_10GBLR = 6,MDIO_PMA_CTRL2_10GBSR = 7,MDIO_PMA_CTRL2_10GBLRM = 8,MDIO_PMA_CTRL2_10GBT = 9,MDIO_PMA_CTRL2_10GBKX4 = 10,MDIO_PMA_CTRL2_10GBKR = 11,MDIO_PMA_CTRL2_1000BT = 12,MDIO_PMA_CTRL2_1000BKX = 13,MDIO_PMA_CTRL2_100BTX = 14,MDIO_PMA_CTRL2_10BT = 15,MDIO_PCS_CTRL2_TYPE = 3,MDIO_PCS_CTRL2_10GBR = 0,MDIO_PCS_CTRL2_10GBX = 1,MDIO_PCS_CTRL2_10GBW = 2,MDIO_PCS_CTRL2_10GBT = 3,MDIO_STAT2_RXFAULT = 1024,MDIO_STAT2_TXFAULT = 2048,MDIO_STAT2_DEVPRST = 49152,MDIO_STAT2_DEVPRST_VAL = 32768,MDIO_PMA_STAT2_LBABLE = 1,MDIO_PMA_STAT2_10GBEW = 2,MDIO_PMA_STAT2_10GBLW = 4,MDIO_PMA_STAT2_10GBSW = 8,MDIO_PMA_STAT2_10GBLX4 = 16,MDIO_PMA_STAT2_10GBER = 32,MDIO_PMA_STAT2_10GBLR = 64,MDIO_PMA_STAT2_10GBSR = 128,MDIO_PMD_STAT2_TXDISAB = 256,MDIO_PMA_STAT2_EXTABLE = 512,MDIO_PMA_STAT2_RXFLTABLE = 4096,MDIO_PMA_STAT2_TXFLTABLE = 8192,MDIO_PCS_STAT2_10GBR = 1,MDIO_PCS_STAT2_10GBX = 2,MDIO_PCS_STAT2_10GBW = 4,MDIO_PCS_STAT2_RXFLTABLE = 4096,MDIO_PCS_STAT2_TXFLTABLE = 8192,MDIO_PMD_TXDIS_GLOBAL = 1,MDIO_PMD_TXDIS_0 = 2,MDIO_PMD_TXDIS_1 = 4,MDIO_PMD_TXDIS_2 = 8,MDIO_PMD_TXDIS_3 = 16,MDIO_PMD_RXDET_GLOBAL = 1,MDIO_PMD_RXDET_0 = 2,MDIO_PMD_RXDET_1 = 4,MDIO_PMD_RXDET_2 = 8,MDIO_PMD_RXDET_3 = 16,MDIO_PMA_EXTABLE_10GCX4 = 1,MDIO_PMA_EXTABLE_10GBLRM = 2,MDIO_PMA_EXTABLE_10GBT = 4,MDIO_PMA_EXTABLE_10GBKX4 = 8,MDIO_PMA_EXTABLE_10GBKR = 16,MDIO_PMA_EXTABLE_1000BT = 32,MDIO_PMA_EXTABLE_1000BKX = 64,MDIO_PMA_EXTABLE_100BTX = 128,MDIO_PMA_EXTABLE_10BT = 256,MDIO_PHYXS_LNSTAT_SYNC0 = 1,MDIO_PHYXS_LNSTAT_SYNC1 = 2,MDIO_PHYXS_LNSTAT_SYNC2 = 4,MDIO_PHYXS_LNSTAT_SYNC3 = 8,MDIO_PHYXS_LNSTAT_ALIGN = 4096,MDIO_PMA_10GBT_SWAPPOL_ABNX = 1,MDIO_PMA_10GBT_SWAPPOL_CDNX = 2,MDIO_PMA_10GBT_SWAPPOL_AREV = 256,MDIO_PMA_10GBT_SWAPPOL_BREV = 512,MDIO_PMA_10GBT_SWAPPOL_CREV = 1024,MDIO_PMA_10GBT_SWAPPOL_DREV = 2048,MDIO_PMA_10GBT_TXPWR_SHORT = 1,MDIO_PMA_10GBT_SNR_BIAS = 32768,MDIO_PMA_10GBT_SNR_MAX = 127,MDIO_PMA_10GBR_FECABLE_ABLE = 1,MDIO_PMA_10GBR_FECABLE_ERRABLE = 2,MDIO_PCS_10GBRT_STAT1_BLKLK = 1,MDIO_PCS_10GBRT_STAT2_ERR = 255,MDIO_PCS_10GBRT_STAT2_BER = 16128,MDIO_AN_10GBT_CTRL_ADV10G = 4096,MDIO_AN_10GBT_STAT_LPTRR = 512,MDIO_AN_10GBT_STAT_LPLTABLE = 1024,MDIO_AN_10GBT_STAT_LP10G = 2048,MDIO_AN_10GBT_STAT_REMOK = 4096,MDIO_AN_10GBT_STAT_LOCOK = 8192,MDIO_AN_10GBT_STAT_MS = 16384,MDIO_AN_10GBT_STAT_MSFLT = 32768,MDIO_AN_EEE_ADV_100TX = 2,MDIO_AN_EEE_ADV_1000T = 4,MDIO_EEE_100TX = 2,MDIO_EEE_1000T = 4,MDIO_EEE_10GT = 8,MDIO_EEE_1000KX = 16,MDIO_EEE_10GKX4 = 32,MDIO_EEE_10GKR = 64,MDIO_PMA_LASI_RX_PHYXSLFLT = 1,MDIO_PMA_LASI_RX_PCSLFLT = 8,MDIO_PMA_LASI_RX_PMALFLT = 16,MDIO_PMA_LASI_RX_OPTICPOWERFLT = 32,MDIO_PMA_LASI_RX_WISLFLT = 512,MDIO_PMA_LASI_TX_PHYXSLFLT = 1,MDIO_PMA_LASI_TX_PCSLFLT = 8,MDIO_PMA_LASI_TX_PMALFLT = 16,MDIO_PMA_LASI_TX_LASERPOWERFLT = 128,MDIO_PMA_LASI_TX_LASERTEMPFLT = 256,MDIO_PMA_LASI_TX_LASERBICURRFLT = 512,MDIO_PMA_LASI_LSALARM = 1,MDIO_PMA_LASI_TXALARM = 2,MDIO_PMA_LASI_RXALARM = 4,MDIO_PHY_ID_C45 = 32768,MDIO_PHY_ID_PRTAD = 992,MDIO_PHY_ID_DEVAD = 31,MDIO_PHY_ID_C45_MASK = 33791,};
enum MACRO_MGSL {MGSL_MODE_ASYNC = 1,MGSL_MODE_HDLC = 2,MGSL_MODE_MONOSYNC = 3,MGSL_MODE_BISYNC = 4,MGSL_MODE_RAW = 6,MGSL_MODE_BASE_CLOCK = 7,MGSL_MODE_XSYNC = 8,MGSL_BUS_TYPE_ISA = 1,MGSL_BUS_TYPE_EISA = 2,MGSL_BUS_TYPE_PCI = 5,MGSL_INTERFACE_MASK = 15,MGSL_INTERFACE_DISABLE = 0,MGSL_INTERFACE_RS232 = 1,MGSL_INTERFACE_V35 = 2,MGSL_INTERFACE_RS422 = 3,MGSL_INTERFACE_RTS_EN = 16,MGSL_INTERFACE_LL = 32,MGSL_INTERFACE_RL = 64,MGSL_INTERFACE_MSB_FIRST = 128,};
enum MACRO_MIDI {MIDI_TYPE_MPU401 = 0x401,};
enum MACRO_MIFF {MIFF_REGISTER = 0x1,};
enum MACRO_MODE {MODE_S = 1,MODE_B = 2,MODE_C = 3,};
enum MACRO_MORE {MORE_EVENTS = 0x80,};
enum MACRO_MOVE {MOVE_MEDIUM = 0xA5,};
enum MACRO_MPOA {MPOA_TRIGGER_RCVD = 101,MPOA_RES_REPLY_RCVD = 102,};
enum MACRO_MPOL {MPOL_F_STATIC_NODES = 32768,MPOL_F_RELATIVE_NODES = 16384,MPOL_MODE_FLAGS = 49152,MPOL_F_NODE = 1,MPOL_F_ADDR = 2,MPOL_F_MEMS_ALLOWED = 4,MPOL_MF_STRICT = 1,MPOL_MF_MOVE = 2,MPOL_MF_MOVE_ALL = 4,MPOL_MF_LAZY = 8,MPOL_MF_INTERNAL = 16,MPOL_MF_VALID = 7,MPOL_F_SHARED = 1,MPOL_F_LOCAL = 2,MPOL_F_REBINDING = 4,MPOL_F_MOF = 8,MPOL_F_MORON = 16,};
enum MACRO_MPPE {CI_MPPE = 18,CILEN_MPPE = 6,};
enum MACRO_MRT6 {MRT6_BASE = 200,MRT6_INIT = 200,MRT6_DONE = 201,MRT6_ADD_MIF = 202,MRT6_DEL_MIF = 203,MRT6_ADD_MFC = 204,MRT6_DEL_MFC = 205,MRT6_VERSION = 206,MRT6_ASSERT = 207,MRT6_PIM = 208,MRT6_TABLE = 209,MRT6_ADD_MFC_PROXY = 210,MRT6_DEL_MFC_PROXY = 211,MRT6_MAX = 211,};
enum MACRO_MTRR {MTRR_IOCTL_BASE = 77,MTRR_NUM_FIXED_RANGES = 88,MTRR_MAX_VAR_RANGES = 256,MTRR_TYPE_UNCACHABLE = 0,MTRR_TYPE_WRCOMB = 1,MTRR_TYPE_WRTHROUGH = 4,MTRR_TYPE_WRPROT = 5,MTRR_TYPE_WRBACK = 6,MTRR_NUM_TYPES = 7,};
enum MACRO_NAME {NAME_MAX = 255,PATH_MAX = 4096,};
enum MACRO_NBPG {NBPG = 4096,};
enum MACRO_NCCS {NCCS = 32,};
enum MACRO_NFNL {NFNL_NFA_NEST = 0x8000,};
enum MACRO_NFQA {NFQA_CFG_F_FAIL_OPEN = 1,NFQA_CFG_F_CONNTRACK = 2,NFQA_CFG_F_GSO = 4,NFQA_CFG_F_MAX = 8,NFQA_SKB_CSUMNOTREADY = 1,NFQA_SKB_GSO = 2,NFQA_SKB_CSUM_NOTVERIFIED = 4,};
enum MACRO_NFS2 {NFS2_PORT = 2049,NFS2_MAXDATA = 8192,NFS2_MAXPATHLEN = 1024,NFS2_MAXNAMLEN = 255,NFS2_MAXGROUPS = 16,NFS2_FHSIZE = 32,NFS2_COOKIESIZE = 4,NFS2_FIFO_DEV = -1,};
enum MACRO_NFS3 {NFS3_PORT = 2049,NFS3_MAXDATA = 32768,NFS3_MAXPATHLEN = 4096,NFS3_MAXNAMLEN = 255,NFS3_MAXGROUPS = 16,NFS3_FHSIZE = 64,NFS3_COOKIESIZE = 4,NFS3_CREATEVERFSIZE = 8,NFS3_COOKIEVERFSIZE = 8,NFS3_WRITEVERFSIZE = 8,NFS3_FIFO_DEV = -1,};
enum MACRO_NFS4 {NFS4_BITMAP_SIZE = 2,NFS4_VERIFIER_SIZE = 8,NFS4_STATEID_SEQID_SIZE = 4,NFS4_STATEID_OTHER_SIZE = 12,NFS4_STATEID_SIZE = 16,NFS4_FHSIZE = 128,NFS4_MAXPATHLEN = 4096,NFS4_MAXNAMLEN = 255,NFS4_OPAQUE_LIMIT = 1024,NFS4_MAX_SESSIONID_LEN = 16,NFS4_ACCESS_READ = 1,NFS4_ACCESS_LOOKUP = 2,NFS4_ACCESS_MODIFY = 4,NFS4_ACCESS_EXTEND = 8,NFS4_ACCESS_DELETE = 16,NFS4_ACCESS_EXECUTE = 32,NFS4_FH_PERSISTENT = 0,NFS4_FH_NOEXPIRE_WITH_OPEN = 1,NFS4_FH_VOLATILE_ANY = 2,NFS4_FH_VOL_MIGRATION = 4,NFS4_FH_VOL_RENAME = 8,NFS4_OPEN_RESULT_CONFIRM = 2,NFS4_OPEN_RESULT_LOCKTYPE_POSIX = 4,NFS4_SHARE_ACCESS_MASK = 15,NFS4_SHARE_ACCESS_READ = 1,NFS4_SHARE_ACCESS_WRITE = 2,NFS4_SHARE_ACCESS_BOTH = 3,NFS4_SHARE_DENY_READ = 1,NFS4_SHARE_DENY_WRITE = 2,NFS4_SHARE_DENY_BOTH = 3,NFS4_SHARE_WANT_MASK = 65280,NFS4_SHARE_WANT_NO_PREFERENCE = 0,NFS4_SHARE_WANT_READ_DELEG = 256,NFS4_SHARE_WANT_WRITE_DELEG = 512,NFS4_SHARE_WANT_ANY_DELEG = 768,NFS4_SHARE_WANT_NO_DELEG = 1024,NFS4_SHARE_WANT_CANCEL = 1280,NFS4_SHARE_WHEN_MASK = 983040,NFS4_SHARE_SIGNAL_DELEG_WHEN_RESRC_AVAIL = 65536,NFS4_SHARE_PUSH_DELEG_WHEN_UNCONTENDED = 131072,NFS4_CDFC4_FORE = 1,NFS4_CDFC4_BACK = 2,NFS4_CDFC4_BOTH = 3,NFS4_CDFC4_FORE_OR_BOTH = 3,NFS4_CDFC4_BACK_OR_BOTH = 7,NFS4_CDFS4_FORE = 1,NFS4_CDFS4_BACK = 2,NFS4_CDFS4_BOTH = 3,NFS4_SET_TO_SERVER_TIME = 0,NFS4_SET_TO_CLIENT_TIME = 1,NFS4_ACE_ACCESS_ALLOWED_ACE_TYPE = 0,NFS4_ACE_ACCESS_DENIED_ACE_TYPE = 1,NFS4_ACE_SYSTEM_AUDIT_ACE_TYPE = 2,NFS4_ACE_SYSTEM_ALARM_ACE_TYPE = 3,};
enum MACRO_NFSD {NFSD_USAGE_WRAP = 100000000,};
enum MACRO_NSIG {NSIG = 65,};
enum MACRO_NSLC {NSLC = 18,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_None {None = 0,};
enum MACRO_OK_0 {OK = 0,_SUBWIN = 1,_ENDLINE = 2,_FULLWIN = 4,_SCROLLWIN = 8,_ISPAD = 16,_HASMOVED = 32,_WRAPPED = 64,};
enum MACRO_OPAD {OPAD_PREFIX = 0x1,OPAD_POSTFIX = 0x2,OPAD_SYMBOL = 0x4,};
enum MACRO_OPEN {OPEN_INGRESS_SVC = 209,};
enum MACRO_ORIG {ORIG_RAX = 15,};
enum MACRO_OSAK {OSAK_VERSION = 0x5120,};
enum MACRO_OVSP {OVSP_LOCAL = 0,};
enum MACRO_PAGE {PAGE_SHIFT = 12,PAGE_SIZE = 4096,PAGE_MASK = -4096,};
enum MACRO_PF_X {PF_X = 1,PF_W = 2,PF_R = 4,PF_MASKOS = 267386880,PF_MASKPROC = -268435456,};
enum MACRO_PIPE {PIPE_BUF = 4096,};
enum MACRO_PLIP {PLIP_GET_TIMEOUT = 0x1,PLIP_SET_TIMEOUT = 0x2,};
enum MACRO_POLL {POLL_BUSY_LOOP = 0x8000,};
enum MACRO_PORT {PORT_TP = 0x0,PORT_AUI = 0x1,PORT_MII = 0x2,PORT_FIBRE = 0x3,PORT_BNC = 0x4,PORT_DA = 0x5,PORT_NONE = 0xEF,PORT_OTHER = 0xFF,};
enum MACRO_POTS {POTS_ATT_00DB = 0x0,POTS_ATT_04DB = 0x1,POTS_ATT_08DB = 0x2,POTS_ATT_12DB = 0x3,POTS_ATT_16DB = 0x4,POTS_ATT_20DB = 0x5,POTS_ATT_24DB = 0x6,POTS_ATT_28DB = 0x7,POTS_MUTE = 0x80,};
enum MACRO_PRIO {PRIO_MIN = -20,PRIO_MAX = 20,};
enum MACRO_PROG {CLGET_PROG = 14,CLSET_PROG = 15,};
enum MACRO_PROT {PROT_READ = 0x1,PROT_WRITE = 0x2,PROT_EXEC = 0x4,PROT_NONE = 0x0,PROT_GROWSDOWN = 0x1000000,PROT_GROWSUP = 0x2000000,};
enum MACRO_PSTN {PSTN_ON_HOOK = 0,PSTN_RINGING = 1,PSTN_OFF_HOOK = 2,PSTN_PULSE_DIAL = 3,};
enum MACRO_QFMT {QFMT_VFS_OLD = 1,QFMT_VFS_V0 = 2,QFMT_OCFS2 = 3,QFMT_VFS_V1 = 4,};
enum MACRO_QNX4 {QNX4_ROOT_INO = 1,QNX4_MAX_XTNTS_PER_XBLK = 60,QNX4_FILE_USED = 1,QNX4_FILE_MODIFIED = 2,QNX4_FILE_BUSY = 4,QNX4_FILE_LINK = 8,QNX4_FILE_INODE = 16,QNX4_FILE_FSYSCLEAN = 32,QNX4_I_MAP_SLOTS = 8,QNX4_Z_MAP_SLOTS = 64,QNX4_VALID_FS = 1,QNX4_ERROR_FS = 2,QNX4_BLOCK_SIZE = 512,QNX4_BLOCK_SIZE_BITS = 9,QNX4_DIR_ENTRY_SIZE = 64,QNX4_DIR_ENTRY_SIZE_BITS = 6,QNX4_XBLK_ENTRY_SIZE = 512,QNX4_INODES_PER_BLOCK = 8,QNX4_SHORT_NAME_MAX = 16,QNX4_NAME_MAX = 48,};
enum MACRO_RAID {RAID_AUTORUN = 0x914,};
enum MACRO_RAND {RAND_MAX = 2147483647,};
enum MACRO_READ {READ_BLOCK_LIMITS = 0x5,};
enum MACRO_REGS {REGS_UNALLOCATED = 0,REGS_REALLOCATE = 1,REGS_FIXED = 2,};
enum MACRO_RING {RING_WAIT = 30,};
enum MACRO_RLIM {RLIM_SAVED_MAX = -1,RLIM_SAVED_CUR = -1,};
enum MACRO_ROSE {ROSE_MTU = 251,ROSE_MAX_DIGIS = 6,ROSE_DEFER = 1,ROSE_T1 = 2,ROSE_T2 = 3,ROSE_T3 = 4,ROSE_IDLE = 5,ROSE_QBITINCL = 6,ROSE_HOLDBACK = 7,};
enum MACRO_RTAX {RTAX_FEATURE_ECN = 0x1,RTAX_FEATURE_SACK = 0x2,RTAX_FEATURE_TIMESTAMP = 0x4,RTAX_FEATURE_ALLFRAG = 0x8,};
enum MACRO_RTCF {RTCF_VALVE = 0x200000,RTCF_MASQ = 0x400000,RTCF_NAT = 0x8800000,RTCF_DOREDIRECT = 0x1000000,RTCF_LOG = 0x2000000,RTCF_DIRECTSRC = 0x4000000,};
enum MACRO_RTLD {RTLD_LAZY = 0x1,RTLD_NOW = 0x2,RTLD_BINDING_MASK = 0x3,RTLD_NOLOAD = 0x4,RTLD_DEEPBIND = 0x8,RTLD_GLOBAL = 0x100,RTLD_LOCAL = 0x0,RTLD_NODELETE = 0x1000,RTLD_NEXT = 0xFFFFFFFF,RTLD_DEFAULT = 0x0,};
enum MACRO_RTNH {RTNH_F_DEAD = 1,RTNH_F_PERVASIVE = 2,RTNH_F_ONLINK = 4,RTNH_ALIGNTO = 4,};
enum MACRO_RTNL {RTNL_FAMILY_IPMR = 128,RTNL_FAMILY_IP6MR = 129,RTNL_FAMILY_MAX = 129,};
enum MACRO_R_SH {R_SH_NONE = 0,R_SH_DIR32 = 1,R_SH_REL32 = 2,R_SH_DIR8WPN = 3,R_SH_IND12W = 4,R_SH_DIR8WPL = 5,R_SH_DIR8WPZ = 6,R_SH_DIR8BP = 7,R_SH_DIR8W = 8,R_SH_DIR8L = 9,R_SH_SWITCH16 = 25,R_SH_SWITCH32 = 26,R_SH_USES = 27,R_SH_COUNT = 28,R_SH_ALIGN = 29,R_SH_CODE = 30,R_SH_DATA = 31,R_SH_LABEL = 32,R_SH_SWITCH8 = 33,R_SH_GNU_VTINHERIT = 34,R_SH_GNU_VTENTRY = 35,R_SH_TLS_GD_32 = 144,R_SH_TLS_LD_32 = 145,R_SH_TLS_LDO_32 = 146,R_SH_TLS_IE_32 = 147,R_SH_TLS_LE_32 = 148,R_SH_TLS_DTPMOD32 = 149,R_SH_TLS_DTPOFF32 = 150,R_SH_TLS_TPOFF32 = 151,R_SH_GOT32 = 160,R_SH_PLT32 = 161,R_SH_COPY = 162,R_SH_GLOB_DAT = 163,R_SH_JMP_SLOT = 164,R_SH_RELATIVE = 165,R_SH_GOTOFF = 166,R_SH_GOTPC = 167,R_SH_NUM = 256,};
enum MACRO_SADB {SADB_RESERVED = 0,SADB_GETSPI = 1,SADB_UPDATE = 2,SADB_ADD = 3,SADB_DELETE = 4,SADB_GET = 5,SADB_ACQUIRE = 6,SADB_REGISTER = 7,SADB_EXPIRE = 8,SADB_FLUSH = 9,SADB_DUMP = 10,SADB_X_PROMISC = 11,SADB_X_PCHANGE = 12,SADB_X_SPDUPDATE = 13,SADB_X_SPDADD = 14,SADB_X_SPDDELETE = 15,SADB_X_SPDGET = 16,SADB_X_SPDACQUIRE = 17,SADB_X_SPDDUMP = 18,SADB_X_SPDFLUSH = 19,SADB_X_SPDSETIDX = 20,SADB_X_SPDEXPIRE = 21,SADB_X_SPDDELETE2 = 22,SADB_X_NAT_T_NEW_MAPPING = 23,SADB_X_MIGRATE = 24,SADB_MAX = 24,SADB_SAFLAGS_PFS = 1,SADB_SAFLAGS_NOPMTUDISC = 536870912,SADB_SAFLAGS_DECAP_DSCP = 1073741824,SADB_SAFLAGS_NOECN = -2147483648,SADB_SASTATE_LARVAL = 0,SADB_SASTATE_MATURE = 1,SADB_SASTATE_DYING = 2,SADB_SASTATE_DEAD = 3,SADB_SASTATE_MAX = 3,SADB_SATYPE_UNSPEC = 0,SADB_SATYPE_AH = 2,SADB_SATYPE_ESP = 3,SADB_SATYPE_RSVP = 5,SADB_SATYPE_OSPFV2 = 6,SADB_SATYPE_RIPV2 = 7,SADB_SATYPE_MIP = 8,SADB_X_SATYPE_IPCOMP = 9,SADB_SATYPE_MAX = 9,SADB_AALG_NONE = 0,SADB_AALG_MD5HMAC = 2,SADB_AALG_SHA1HMAC = 3,SADB_X_AALG_SHA2_256HMAC = 5,SADB_X_AALG_SHA2_384HMAC = 6,SADB_X_AALG_SHA2_512HMAC = 7,SADB_X_AALG_RIPEMD160HMAC = 8,SADB_X_AALG_AES_XCBC_MAC = 9,SADB_X_AALG_NULL = 251,SADB_AALG_MAX = 251,SADB_EALG_NONE = 0,SADB_EALG_DESCBC = 2,SADB_EALG_3DESCBC = 3,SADB_X_EALG_CASTCBC = 6,SADB_X_EALG_BLOWFISHCBC = 7,SADB_EALG_NULL = 11,SADB_X_EALG_AESCBC = 12,SADB_X_EALG_AESCTR = 13,SADB_X_EALG_AES_CCM_ICV8 = 14,SADB_X_EALG_AES_CCM_ICV12 = 15,SADB_X_EALG_AES_CCM_ICV16 = 16,SADB_X_EALG_AES_GCM_ICV8 = 18,SADB_X_EALG_AES_GCM_ICV12 = 19,SADB_X_EALG_AES_GCM_ICV16 = 20,SADB_X_EALG_CAMELLIACBC = 22,SADB_X_EALG_NULL_AES_GMAC = 23,SADB_EALG_MAX = 253,SADB_X_EALG_SERPENTCBC = 252,SADB_X_EALG_TWOFISHCBC = 253,SADB_X_CALG_NONE = 0,SADB_X_CALG_OUI = 1,SADB_X_CALG_DEFLATE = 2,SADB_X_CALG_LZS = 3,SADB_X_CALG_LZJH = 4,SADB_X_CALG_MAX = 4,SADB_EXT_RESERVED = 0,SADB_EXT_SA = 1,SADB_EXT_LIFETIME_CURRENT = 2,SADB_EXT_LIFETIME_HARD = 3,SADB_EXT_LIFETIME_SOFT = 4,SADB_EXT_ADDRESS_SRC = 5,SADB_EXT_ADDRESS_DST = 6,SADB_EXT_ADDRESS_PROXY = 7,SADB_EXT_KEY_AUTH = 8,SADB_EXT_KEY_ENCRYPT = 9,SADB_EXT_IDENTITY_SRC = 10,SADB_EXT_IDENTITY_DST = 11,SADB_EXT_SENSITIVITY = 12,SADB_EXT_PROPOSAL = 13,SADB_EXT_SUPPORTED_AUTH = 14,SADB_EXT_SUPPORTED_ENCRYPT = 15,SADB_EXT_SPIRANGE = 16,SADB_X_EXT_KMPRIVATE = 17,SADB_X_EXT_POLICY = 18,SADB_X_EXT_SA2 = 19,SADB_X_EXT_NAT_T_TYPE = 20,SADB_X_EXT_NAT_T_SPORT = 21,SADB_X_EXT_NAT_T_DPORT = 22,SADB_X_EXT_NAT_T_OA = 23,SADB_X_EXT_SEC_CTX = 24,SADB_X_EXT_KMADDRESS = 25,SADB_EXT_MAX = 25,SADB_IDENTTYPE_RESERVED = 0,SADB_IDENTTYPE_PREFIX = 1,SADB_IDENTTYPE_FQDN = 2,SADB_IDENTTYPE_USERFQDN = 3,SADB_IDENTTYPE_MAX = 3,};
enum MACRO_SCSI {SCSI_IOCTL_GET_IDLUN = 0x5382,SCSI_IOCTL_TAGGED_ENABLE = 0x5383,SCSI_IOCTL_TAGGED_DISABLE = 0x5384,SCSI_IOCTL_PROBE_HOST = 0x5385,SCSI_IOCTL_GET_BUS_NUMBER = 0x5386,SCSI_IOCTL_SEND_COMMAND = 0x1,SCSI_IOCTL_TEST_UNIT_READY = 0x2,SCSI_IOCTL_BENCHMARK_COMMAND = 0x3,SCSI_IOCTL_SYNC = 0x4,SCSI_IOCTL_START_UNIT = 0x5,SCSI_IOCTL_STOP_UNIT = 0x6,SCSI_IOCTL_DOORLOCK = 0x5380,SCSI_IOCTL_DOORUNLOCK = 0x5381,};
enum MACRO_SCTP {SCTP_CHUNK_MATCH_ANY = 0x1,SCTP_CHUNK_MATCH_ALL = 0x2,SCTP_CHUNK_MATCH_ONLY = 0x4,};
enum MACRO_SDLA {SDLA_S502A = 5020,SDLA_S502E = 5021,SDLA_S503 = 5030,SDLA_S507 = 5070,SDLA_S508 = 5080,SDLA_S509 = 5090,SDLA_UNKNOWN = -1,SDLA_S508_PORT_V35 = 0,SDLA_S508_PORT_RS232 = 2,SDLA_CPU_3M = 0,SDLA_CPU_5M = 1,SDLA_CPU_7M = 2,SDLA_CPU_8M = 3,SDLA_CPU_10M = 4,SDLA_CPU_16M = 5,SDLA_CPU_12M = 6,SDLA_NMIADDR = 0,SDLA_CONF_ADDR = 16,SDLA_S502A_NMIADDR = 102,SDLA_CODE_BASEADDR = 256,SDLA_WINDOW_SIZE = 8192,SDLA_ADDR_MASK = 8191,SDLA_MAX_DATA = 4080,SDLA_MAX_MTU = 4072,SDLA_MAX_DLCI = 24,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,SEEK_DATA = 3,SEEK_HOLE = 4,};
enum MACRO_SEND {SEND_VOLUME_TAG = 0xB6,};
enum MACRO_SEQ4 {SEQ4_STATUS_CB_PATH_DOWN = 0x1,SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRING = 0x2,SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRED = 0x4,SEQ4_STATUS_EXPIRED_ALL_STATE_REVOKED = 0x8,SEQ4_STATUS_EXPIRED_SOME_STATE_REVOKED = 0x10,SEQ4_STATUS_ADMIN_STATE_REVOKED = 0x20,SEQ4_STATUS_RECALLABLE_STATE_REVOKED = 0x40,SEQ4_STATUS_LEASE_MOVED = 0x80,SEQ4_STATUS_RESTART_RECLAIM_NEEDED = 0x100,SEQ4_STATUS_CB_PATH_DOWN_SESSION = 0x200,SEQ4_STATUS_BACKCHANNEL_FAULT = 0x400,};
enum MACRO_SIOC {SIOC_OUT = 2147483648,SIOC_IN = 1073741824,SIOC_INOUT = 3221225472,};
enum MACRO_SIZE {SIZE_MAX = -1,};
enum MACRO_SOCK {SOCK_DIAG_BY_FAMILY = 20,};
enum MACRO_SOFT {SOFT_LOOKUP = 16384,};
enum MACRO_STDC {STDC_HEADERS = 1,};
enum MACRO_STOP {STOP_KEEP_ALIVE_SM = 204,};
enum MACRO_STRU {STRU_F = 1,STRU_R = 2,STRU_P = 3,};
enum MACRO_SUSP {SUSP = 237,};
enum MACRO_SWAP {SWAP_FLAG_PREFER = 0x8000,SWAP_FLAG_PRIO_MASK = 0x7FFF,SWAP_FLAG_PRIO_SHIFT = 0x0,SWAP_FLAG_DISCARD = 0x10000,};
enum MACRO_SYNC {SYNC_FILE_RANGE_WAIT_BEFORE = 1,SYNC_FILE_RANGE_WRITE = 2,SYNC_FILE_RANGE_WAIT_AFTER = 4,};
enum MACRO_S_TC {S_TC_VERD = 2,S_TC_FROM = 6,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x400,TAB2 = 0x800,};
enum MACRO_TAB3 {TAB3 = 0x1800,BSDLY = 0x2000,};
enum MACRO_TALK {TALK_VERSION = 1,};
enum MACRO_TANH {TANH_PRESERVES_ZERO_SIGN = 1,};
enum MACRO_TCAA {TCAA_MAX = 1,};
enum MACRO_TCPI {TCPI_OPT_TIMESTAMPS = 1,TCPI_OPT_SACK = 2,TCPI_OPT_WSCALE = 4,TCPI_OPT_ECN = 8,};
enum MACRO_TEAM {TEAM_STRING_MAX_LEN = 32,TEAM_GENL_VERSION = 1,};
enum MACRO_TEST {TEST_UNIT_READY = 0x0,};
enum MACRO_TIME {TIME_UTC = 1,};
enum MACRO_TIPC {TIPC_CMD_NOOP = 0x0,TIPC_CMD_GET_NODES = 0x1,TIPC_CMD_GET_MEDIA_NAMES = 0x2,TIPC_CMD_GET_BEARER_NAMES = 0x3,TIPC_CMD_GET_LINKS = 0x4,TIPC_CMD_SHOW_NAME_TABLE = 0x5,TIPC_CMD_SHOW_PORTS = 0x6,TIPC_CMD_SHOW_LINK_STATS = 0xB,TIPC_CMD_SHOW_STATS = 0xF,TIPC_CMD_GET_REMOTE_MNG = 0x4003,TIPC_CMD_GET_MAX_PORTS = 0x4004,TIPC_CMD_GET_MAX_PUBL = 0x4005,TIPC_CMD_GET_MAX_SUBSCR = 0x4006,TIPC_CMD_GET_MAX_ZONES = 0x4007,TIPC_CMD_GET_MAX_CLUSTERS = 0x4008,TIPC_CMD_GET_MAX_NODES = 0x4009,TIPC_CMD_GET_MAX_SLAVES = 0x400A,TIPC_CMD_GET_NETID = 0x400B,TIPC_CMD_ENABLE_BEARER = 0x4101,TIPC_CMD_DISABLE_BEARER = 0x4102,TIPC_CMD_SET_LINK_TOL = 0x4107,TIPC_CMD_SET_LINK_PRI = 0x4108,TIPC_CMD_SET_LINK_WINDOW = 0x4109,TIPC_CMD_SET_LOG_SIZE = 0x410A,TIPC_CMD_DUMP_LOG = 0x410B,TIPC_CMD_RESET_LINK_STATS = 0x410C,TIPC_CMD_SET_NODE_ADDR = 0x8001,TIPC_CMD_SET_REMOTE_MNG = 0x8003,TIPC_CMD_SET_MAX_PORTS = 0x8004,TIPC_CMD_SET_MAX_PUBL = 0x8005,TIPC_CMD_SET_MAX_SUBSCR = 0x8006,TIPC_CMD_SET_MAX_ZONES = 0x8007,TIPC_CMD_SET_MAX_CLUSTERS = 0x8008,TIPC_CMD_SET_MAX_NODES = 0x8009,TIPC_CMD_SET_MAX_SLAVES = 0x800A,TIPC_CMD_SET_NETID = 0x800B,TIPC_CMD_NOT_NET_ADMIN = 0xC001,TIPC_TLV_NONE = 0x0,TIPC_TLV_VOID = 0x1,TIPC_TLV_UNSIGNED = 0x2,TIPC_TLV_STRING = 0x3,TIPC_TLV_LARGE_STRING = 0x4,TIPC_TLV_ULTRA_STRING = 0x5,TIPC_TLV_ERROR_STRING = 0x10,TIPC_TLV_NET_ADDR = 0x11,TIPC_TLV_MEDIA_NAME = 0x12,TIPC_TLV_BEARER_NAME = 0x13,TIPC_TLV_LINK_NAME = 0x14,TIPC_TLV_NODE_INFO = 0x15,TIPC_TLV_LINK_INFO = 0x16,TIPC_TLV_BEARER_CONFIG = 0x17,TIPC_TLV_LINK_CONFIG = 0x18,TIPC_TLV_NAME_TBL_QUERY = 0x19,TIPC_TLV_PORT_REF = 0x1A,TIPC_MAX_MEDIA_NAME = 0x10,TIPC_MAX_IF_NAME = 0x10,TIPC_MAX_BEARER_NAME = 0x20,TIPC_MAX_LINK_NAME = 0x3C,TIPC_MIN_LINK_PRI = 0x0,TIPC_DEF_LINK_PRI = 0xA,TIPC_MAX_LINK_PRI = 0x1F,TIPC_MEDIA_LINK_PRI = 0x20,TIPC_MIN_LINK_TOL = 0x32,TIPC_DEF_LINK_TOL = 0x5DC,TIPC_MAX_LINK_TOL = 0x7530,TIPC_MIN_LINK_WIN = 0x10,TIPC_DEF_LINK_WIN = 0x32,TIPC_MAX_LINK_WIN = 0x96,TIPC_NTQ_ALLTYPES = 0x80000000,};
enum MACRO_TYPE {TYPE_A = 1,TYPE_E = 2,TYPE_I = 3,TYPE_L = 4,};
enum MACRO_UAC1 {UAC1_PROCESSING_UNIT = 0x7,UAC1_EXTENSION_UNIT = 0x8,};
enum MACRO_UART {UART_CLEAR_FIFO = 0x1,UART_USE_FIFO = 0x2,UART_STARTECH = 0x4,UART_NATSEMI = 0x8,};
enum MACRO_UINT {UINT_LEAST8_MAX = 255,UINT_LEAST16_MAX = 65535,UINT_LEAST32_MAX = -1,UINT_LEAST64_MAX = -1,};
enum MACRO_ULOG {ULOG_DEFAULT_NLGROUP = 1,ULOG_DEFAULT_QTHRESHOLD = 1,ULOG_MAC_LEN = 80,ULOG_PREFIX_LEN = 32,ULOG_MAX_QLEN = 50,};
enum MACRO_UNIT {UNIT_ATTENTION = 0x6,};
enum MACRO_USB3 {USB3_LPM_DISABLED = 0x0,USB3_LPM_U1_MAX_TIMEOUT = 0x7F,USB3_LPM_U2_MAX_TIMEOUT = 0xFE,USB3_LPM_DEVICE_INITIATED = 0xFF,USB3_LPM_MAX_U1_SEL_PEL = 0xFF,USB3_LPM_MAX_U2_SEL_PEL = 0xFFFF,};
enum MACRO_V4L2 {V4L2_SEL_TGT_CROP = 0x0,V4L2_SEL_TGT_CROP_DEFAULT = 0x1,V4L2_SEL_TGT_CROP_BOUNDS = 0x2,V4L2_SEL_TGT_COMPOSE = 0x100,V4L2_SEL_TGT_COMPOSE_DEFAULT = 0x101,V4L2_SEL_TGT_COMPOSE_BOUNDS = 0x102,V4L2_SEL_TGT_COMPOSE_PADDED = 0x103,V4L2_SEL_TGT_CROP_ACTIVE = 0x0,V4L2_SEL_TGT_COMPOSE_ACTIVE = 0x100,V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL = 0x0,V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL = 0x100,V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS = 0x2,V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS = 0x102,V4L2_SEL_FLAG_GE = 0x1,V4L2_SEL_FLAG_LE = 0x2,V4L2_SEL_FLAG_KEEP_CONFIG = 0x4,V4L2_SUBDEV_SEL_FLAG_SIZE_GE = 0x1,V4L2_SUBDEV_SEL_FLAG_SIZE_LE = 0x2,V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG = 0x4,V4L2_CTRL_CLASS_USER = 0x980000,V4L2_CTRL_CLASS_MPEG = 0x990000,V4L2_CTRL_CLASS_CAMERA = 0x9A0000,V4L2_CTRL_CLASS_FM_TX = 0x9B0000,V4L2_CTRL_CLASS_FLASH = 0x9C0000,V4L2_CTRL_CLASS_JPEG = 0x9D0000,V4L2_CTRL_CLASS_IMAGE_SOURCE = 0x9E0000,V4L2_CTRL_CLASS_IMAGE_PROC = 0x9F0000,V4L2_CTRL_CLASS_DV = 0xA00000,V4L2_CTRL_CLASS_FM_RX = 0xA10000,V4L2_CID_BASE = 0x980900,V4L2_CID_USER_BASE = 0x980900,V4L2_CID_USER_CLASS = 0x980001,V4L2_CID_BRIGHTNESS = 0x980900,V4L2_CID_CONTRAST = 0x980901,V4L2_CID_SATURATION = 0x980902,V4L2_CID_HUE = 0x980903,V4L2_CID_AUDIO_VOLUME = 0x980905,V4L2_CID_AUDIO_BALANCE = 0x980906,V4L2_CID_AUDIO_BASS = 0x980907,V4L2_CID_AUDIO_TREBLE = 0x980908,V4L2_CID_AUDIO_MUTE = 0x980909,V4L2_CID_AUDIO_LOUDNESS = 0x98090A,V4L2_CID_BLACK_LEVEL = 0x98090B,V4L2_CID_AUTO_WHITE_BALANCE = 0x98090C,V4L2_CID_DO_WHITE_BALANCE = 0x98090D,V4L2_CID_RED_BALANCE = 0x98090E,V4L2_CID_BLUE_BALANCE = 0x98090F,V4L2_CID_GAMMA = 0x980910,V4L2_CID_WHITENESS = 0x980910,V4L2_CID_EXPOSURE = 0x980911,V4L2_CID_AUTOGAIN = 0x980912,V4L2_CID_GAIN = 0x980913,V4L2_CID_HFLIP = 0x980914,V4L2_CID_VFLIP = 0x980915,V4L2_CID_POWER_LINE_FREQUENCY = 0x980918,V4L2_CID_HUE_AUTO = 0x980919,V4L2_CID_WHITE_BALANCE_TEMPERATURE = 0x98091A,V4L2_CID_SHARPNESS = 0x98091B,V4L2_CID_BACKLIGHT_COMPENSATION = 0x98091C,V4L2_CID_CHROMA_AGC = 0x98091D,V4L2_CID_COLOR_KILLER = 0x98091E,V4L2_CID_COLORFX = 0x98091F,V4L2_CID_AUTOBRIGHTNESS = 0x980920,V4L2_CID_BAND_STOP_FILTER = 0x980921,V4L2_CID_ROTATE = 0x980922,V4L2_CID_BG_COLOR = 0x980923,V4L2_CID_CHROMA_GAIN = 0x980924,V4L2_CID_ILLUMINATORS_1 = 0x980925,V4L2_CID_ILLUMINATORS_2 = 0x980926,V4L2_CID_MIN_BUFFERS_FOR_CAPTURE = 0x980927,V4L2_CID_MIN_BUFFERS_FOR_OUTPUT = 0x980928,V4L2_CID_ALPHA_COMPONENT = 0x980929,V4L2_CID_COLORFX_CBCR = 0x98092A,V4L2_CID_LASTP1 = 0x98092B,V4L2_CID_USER_MEYE_BASE = 0x981900,V4L2_CID_USER_BTTV_BASE = 0x981910,V4L2_CID_USER_S2255_BASE = 0x981930,V4L2_CID_USER_SI476X_BASE = 0x981940,V4L2_CID_MPEG_BASE = 0x990900,V4L2_CID_MPEG_CLASS = 0x990001,V4L2_CID_MPEG_STREAM_TYPE = 0x990900,V4L2_CID_MPEG_STREAM_PID_PMT = 0x990901,V4L2_CID_MPEG_STREAM_PID_AUDIO = 0x990902,V4L2_CID_MPEG_STREAM_PID_VIDEO = 0x990903,V4L2_CID_MPEG_STREAM_PID_PCR = 0x990904,V4L2_CID_MPEG_STREAM_PES_ID_AUDIO = 0x990905,V4L2_CID_MPEG_STREAM_PES_ID_VIDEO = 0x990906,V4L2_CID_MPEG_STREAM_VBI_FMT = 0x990907,V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ = 0x990964,V4L2_CID_MPEG_AUDIO_ENCODING = 0x990965,V4L2_CID_MPEG_AUDIO_L1_BITRATE = 0x990966,V4L2_CID_MPEG_AUDIO_L2_BITRATE = 0x990967,V4L2_CID_MPEG_AUDIO_L3_BITRATE = 0x990968,V4L2_CID_MPEG_AUDIO_MODE = 0x990969,V4L2_CID_MPEG_AUDIO_MODE_EXTENSION = 0x99096A,V4L2_CID_MPEG_AUDIO_EMPHASIS = 0x99096B,V4L2_CID_MPEG_AUDIO_CRC = 0x99096C,V4L2_CID_MPEG_AUDIO_MUTE = 0x99096D,V4L2_CID_MPEG_AUDIO_AAC_BITRATE = 0x99096E,V4L2_CID_MPEG_AUDIO_AC3_BITRATE = 0x99096F,V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK = 0x990970,V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK = 0x990971,V4L2_CID_MPEG_VIDEO_ENCODING = 0x9909C8,V4L2_CID_MPEG_VIDEO_ASPECT = 0x9909C9,V4L2_CID_MPEG_VIDEO_B_FRAMES = 0x9909CA,V4L2_CID_MPEG_VIDEO_GOP_SIZE = 0x9909CB,V4L2_CID_MPEG_VIDEO_GOP_CLOSURE = 0x9909CC,V4L2_CID_MPEG_VIDEO_PULLDOWN = 0x9909CD,V4L2_CID_MPEG_VIDEO_BITRATE_MODE = 0x9909CE,V4L2_CID_MPEG_VIDEO_BITRATE = 0x9909CF,V4L2_CID_MPEG_VIDEO_BITRATE_PEAK = 0x9909D0,V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION = 0x9909D1,V4L2_CID_MPEG_VIDEO_MUTE = 0x9909D2,V4L2_CID_MPEG_VIDEO_MUTE_YUV = 0x9909D3,V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE = 0x9909D4,V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER = 0x9909D5,V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB = 0x9909D6,V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE = 0x9909D7,V4L2_CID_MPEG_VIDEO_HEADER_MODE = 0x9909D8,V4L2_CID_MPEG_VIDEO_MAX_REF_PIC = 0x9909D9,V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE = 0x9909DA,V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES = 0x9909DB,V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB = 0x9909DC,V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE = 0x9909DD,V4L2_CID_MPEG_VIDEO_VBV_SIZE = 0x9909DE,V4L2_CID_MPEG_VIDEO_DEC_PTS = 0x9909DF,V4L2_CID_MPEG_VIDEO_DEC_FRAME = 0x9909E0,V4L2_CID_MPEG_VIDEO_VBV_DELAY = 0x9909E1,V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER = 0x9909E2,V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP = 0x990A2C,V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP = 0x990A2D,V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP = 0x990A2E,V4L2_CID_MPEG_VIDEO_H263_MIN_QP = 0x990A2F,V4L2_CID_MPEG_VIDEO_H263_MAX_QP = 0x990A30,V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP = 0x990A5E,V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP = 0x990A5F,V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP = 0x990A60,V4L2_CID_MPEG_VIDEO_H264_MIN_QP = 0x990A61,V4L2_CID_MPEG_VIDEO_H264_MAX_QP = 0x990A62,V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM = 0x990A63,V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE = 0x990A64,V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE = 0x990A65,V4L2_CID_MPEG_VIDEO_H264_I_PERIOD = 0x990A66,V4L2_CID_MPEG_VIDEO_H264_LEVEL = 0x990A67,V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA = 0x990A68,V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA = 0x990A69,V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE = 0x990A6A,V4L2_CID_MPEG_VIDEO_H264_PROFILE = 0x990A6B,V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT = 0x990A6C,V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH = 0x990A6D,V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE = 0x990A6E,V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC = 0x990A6F,V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING = 0x990A70,V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0 = 0x990A71,V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE = 0x990A72,V4L2_CID_MPEG_VIDEO_H264_FMO = 0x990A73,V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE = 0x990A74,V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP = 0x990A75,V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION = 0x990A76,V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE = 0x990A77,V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH = 0x990A78,V4L2_CID_MPEG_VIDEO_H264_ASO = 0x990A79,V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER = 0x990A7A,V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING = 0x990A7B,V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE = 0x990A7C,V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER = 0x990A7D,V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP = 0x990A7E,V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP = 0x990A90,V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP = 0x990A91,V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP = 0x990A92,V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP = 0x990A93,V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP = 0x990A94,V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL = 0x990A95,V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE = 0x990A96,V4L2_CID_MPEG_VIDEO_MPEG4_QPEL = 0x990A97,V4L2_CID_MPEG_CX2341X_BASE = 0x991000,V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE = 0x991000,V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER = 0x991001,V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE = 0x991002,V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE = 0x991003,V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE = 0x991004,V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER = 0x991005,V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE = 0x991006,V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM = 0x991007,V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP = 0x991008,V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM = 0x991009,V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP = 0x99100A,V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS = 0x99100B,V4L2_CID_MPEG_MFC51_BASE = 0x991100,V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY = 0x991100,V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE = 0x991101,V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE = 0x991102,V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE = 0x991103,V4L2_CID_MPEG_MFC51_VIDEO_PADDING = 0x991104,V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV = 0x991105,V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT = 0x991106,V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF = 0x991107,V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY = 0x991132,V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK = 0x991133,V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH = 0x991134,V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC = 0x991135,V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P = 0x991136,V4L2_CID_CAMERA_CLASS_BASE = 0x9A0900,V4L2_CID_CAMERA_CLASS = 0x9A0001,V4L2_CID_EXPOSURE_AUTO = 0x9A0901,V4L2_CID_EXPOSURE_ABSOLUTE = 0x9A0902,V4L2_CID_EXPOSURE_AUTO_PRIORITY = 0x9A0903,V4L2_CID_PAN_RELATIVE = 0x9A0904,V4L2_CID_TILT_RELATIVE = 0x9A0905,V4L2_CID_PAN_RESET = 0x9A0906,V4L2_CID_TILT_RESET = 0x9A0907,V4L2_CID_PAN_ABSOLUTE = 0x9A0908,V4L2_CID_TILT_ABSOLUTE = 0x9A0909,V4L2_CID_FOCUS_ABSOLUTE = 0x9A090A,V4L2_CID_FOCUS_RELATIVE = 0x9A090B,V4L2_CID_FOCUS_AUTO = 0x9A090C,V4L2_CID_ZOOM_ABSOLUTE = 0x9A090D,V4L2_CID_ZOOM_RELATIVE = 0x9A090E,V4L2_CID_ZOOM_CONTINUOUS = 0x9A090F,V4L2_CID_PRIVACY = 0x9A0910,V4L2_CID_IRIS_ABSOLUTE = 0x9A0911,V4L2_CID_IRIS_RELATIVE = 0x9A0912,V4L2_CID_AUTO_EXPOSURE_BIAS = 0x9A0913,V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE = 0x9A0914,V4L2_CID_WIDE_DYNAMIC_RANGE = 0x9A0915,V4L2_CID_IMAGE_STABILIZATION = 0x9A0916,V4L2_CID_ISO_SENSITIVITY = 0x9A0917,V4L2_CID_ISO_SENSITIVITY_AUTO = 0x9A0918,V4L2_CID_EXPOSURE_METERING = 0x9A0919,V4L2_CID_SCENE_MODE = 0x9A091A,V4L2_CID_3A_LOCK = 0x9A091B,V4L2_LOCK_EXPOSURE = 0x1,V4L2_LOCK_WHITE_BALANCE = 0x2,V4L2_LOCK_FOCUS = 0x4,V4L2_CID_AUTO_FOCUS_START = 0x9A091C,V4L2_CID_AUTO_FOCUS_STOP = 0x9A091D,V4L2_CID_AUTO_FOCUS_STATUS = 0x9A091E,V4L2_AUTO_FOCUS_STATUS_IDLE = 0x0,V4L2_AUTO_FOCUS_STATUS_BUSY = 0x1,V4L2_AUTO_FOCUS_STATUS_REACHED = 0x2,V4L2_AUTO_FOCUS_STATUS_FAILED = 0x4,V4L2_CID_AUTO_FOCUS_RANGE = 0x9A091F,V4L2_CID_FM_TX_CLASS_BASE = 0x9B0900,V4L2_CID_FM_TX_CLASS = 0x9B0001,V4L2_CID_RDS_TX_DEVIATION = 0x9B0901,V4L2_CID_RDS_TX_PI = 0x9B0902,V4L2_CID_RDS_TX_PTY = 0x9B0903,V4L2_CID_RDS_TX_PS_NAME = 0x9B0905,V4L2_CID_RDS_TX_RADIO_TEXT = 0x9B0906,V4L2_CID_AUDIO_LIMITER_ENABLED = 0x9B0940,V4L2_CID_AUDIO_LIMITER_RELEASE_TIME = 0x9B0941,V4L2_CID_AUDIO_LIMITER_DEVIATION = 0x9B0942,V4L2_CID_AUDIO_COMPRESSION_ENABLED = 0x9B0950,V4L2_CID_AUDIO_COMPRESSION_GAIN = 0x9B0951,V4L2_CID_AUDIO_COMPRESSION_THRESHOLD = 0x9B0952,V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME = 0x9B0953,V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME = 0x9B0954,V4L2_CID_PILOT_TONE_ENABLED = 0x9B0960,V4L2_CID_PILOT_TONE_DEVIATION = 0x9B0961,V4L2_CID_PILOT_TONE_FREQUENCY = 0x9B0962,V4L2_CID_TUNE_PREEMPHASIS = 0x9B0970,V4L2_CID_TUNE_POWER_LEVEL = 0x9B0971,V4L2_CID_TUNE_ANTENNA_CAPACITOR = 0x9B0972,V4L2_CID_FLASH_CLASS_BASE = 0x9C0900,V4L2_CID_FLASH_CLASS = 0x9C0001,V4L2_CID_FLASH_LED_MODE = 0x9C0901,V4L2_CID_FLASH_STROBE_SOURCE = 0x9C0902,V4L2_CID_FLASH_STROBE = 0x9C0903,V4L2_CID_FLASH_STROBE_STOP = 0x9C0904,V4L2_CID_FLASH_STROBE_STATUS = 0x9C0905,V4L2_CID_FLASH_TIMEOUT = 0x9C0906,V4L2_CID_FLASH_INTENSITY = 0x9C0907,V4L2_CID_FLASH_TORCH_INTENSITY = 0x9C0908,V4L2_CID_FLASH_INDICATOR_INTENSITY = 0x9C0909,V4L2_CID_FLASH_FAULT = 0x9C090A,V4L2_FLASH_FAULT_OVER_VOLTAGE = 0x1,V4L2_FLASH_FAULT_TIMEOUT = 0x2,V4L2_FLASH_FAULT_OVER_TEMPERATURE = 0x4,V4L2_FLASH_FAULT_SHORT_CIRCUIT = 0x8,V4L2_FLASH_FAULT_OVER_CURRENT = 0x10,V4L2_FLASH_FAULT_INDICATOR = 0x20,V4L2_CID_FLASH_CHARGE = 0x9C090B,V4L2_CID_FLASH_READY = 0x9C090C,V4L2_CID_JPEG_CLASS_BASE = 0x9D0900,V4L2_CID_JPEG_CLASS = 0x9D0001,V4L2_CID_JPEG_CHROMA_SUBSAMPLING = 0x9D0901,V4L2_CID_JPEG_RESTART_INTERVAL = 0x9D0902,V4L2_CID_JPEG_COMPRESSION_QUALITY = 0x9D0903,V4L2_CID_JPEG_ACTIVE_MARKER = 0x9D0904,V4L2_JPEG_ACTIVE_MARKER_APP0 = 0x1,V4L2_JPEG_ACTIVE_MARKER_APP1 = 0x2,V4L2_JPEG_ACTIVE_MARKER_COM = 0x10000,V4L2_JPEG_ACTIVE_MARKER_DQT = 0x20000,V4L2_JPEG_ACTIVE_MARKER_DHT = 0x40000,V4L2_CID_IMAGE_SOURCE_CLASS_BASE = 0x9E0900,V4L2_CID_IMAGE_SOURCE_CLASS = 0x9E0001,V4L2_CID_VBLANK = 0x9E0901,V4L2_CID_HBLANK = 0x9E0902,V4L2_CID_ANALOGUE_GAIN = 0x9E0903,V4L2_CID_IMAGE_PROC_CLASS_BASE = 0x9F0900,V4L2_CID_IMAGE_PROC_CLASS = 0x9F0001,V4L2_CID_LINK_FREQ = 0x9F0901,V4L2_CID_PIXEL_RATE = 0x9F0902,V4L2_CID_TEST_PATTERN = 0x9F0903,V4L2_CID_DV_CLASS_BASE = 0xA00900,V4L2_CID_DV_CLASS = 0xA00001,V4L2_CID_DV_TX_HOTPLUG = 0xA00901,V4L2_CID_DV_TX_RXSENSE = 0xA00902,V4L2_CID_DV_TX_EDID_PRESENT = 0xA00903,V4L2_CID_DV_TX_MODE = 0xA00904,V4L2_CID_DV_TX_RGB_RANGE = 0xA00905,V4L2_CID_DV_RX_POWER_PRESENT = 0xA00964,V4L2_CID_DV_RX_RGB_RANGE = 0xA00965,V4L2_CID_FM_RX_CLASS_BASE = 0xA10900,V4L2_CID_FM_RX_CLASS = 0xA10001,V4L2_CID_TUNE_DEEMPHASIS = 0xA10901,V4L2_CID_RDS_RECEPTION = 0xA10902,};
enum MACRO_VEOL {VEOL = 11,};
enum MACRO_VERS {CLGET_VERS = 12,CLSET_VERS = 13,};
enum MACRO_VESA {VESA_NO_BLANKING = 0,VESA_VSYNC_SUSPEND = 1,VESA_HSYNC_SUSPEND = 2,VESA_POWERDOWN = 3,};
enum MACRO_VFIO {VFIO_API_VERSION = 0,VFIO_TYPE1_IOMMU = 1,VFIO_SPAPR_TCE_IOMMU = 2,VFIO_TYPE = 59,VFIO_BASE = 100,VFIO_GET_API_VERSION = 15204,VFIO_CHECK_EXTENSION = 15205,VFIO_SET_IOMMU = 15206,VFIO_GROUP_FLAGS_VIABLE = 1,VFIO_GROUP_FLAGS_CONTAINER_SET = 2,VFIO_GROUP_GET_STATUS = 15207,VFIO_GROUP_SET_CONTAINER = 15208,VFIO_GROUP_UNSET_CONTAINER = 15209,VFIO_GROUP_GET_DEVICE_FD = 15210,VFIO_DEVICE_FLAGS_RESET = 1,VFIO_DEVICE_FLAGS_PCI = 2,VFIO_DEVICE_GET_INFO = 15211,VFIO_REGION_INFO_FLAG_READ = 1,VFIO_REGION_INFO_FLAG_WRITE = 2,VFIO_REGION_INFO_FLAG_MMAP = 4,VFIO_DEVICE_GET_REGION_INFO = 15212,VFIO_IRQ_INFO_EVENTFD = 1,VFIO_IRQ_INFO_MASKABLE = 2,VFIO_IRQ_INFO_AUTOMASKED = 4,VFIO_IRQ_INFO_NORESIZE = 8,VFIO_DEVICE_GET_IRQ_INFO = 15213,VFIO_IRQ_SET_DATA_NONE = 1,VFIO_IRQ_SET_DATA_BOOL = 2,VFIO_IRQ_SET_DATA_EVENTFD = 4,VFIO_IRQ_SET_ACTION_MASK = 8,VFIO_IRQ_SET_ACTION_UNMASK = 16,VFIO_IRQ_SET_ACTION_TRIGGER = 32,VFIO_DEVICE_SET_IRQS = 15214,VFIO_IRQ_SET_DATA_TYPE_MASK = 7,VFIO_IRQ_SET_ACTION_TYPE_MASK = 56,VFIO_DEVICE_RESET = 15215,VFIO_IOMMU_INFO_PGSIZES = 1,VFIO_IOMMU_GET_INFO = 15216,VFIO_DMA_MAP_FLAG_READ = 1,VFIO_DMA_MAP_FLAG_WRITE = 2,VFIO_IOMMU_MAP_DMA = 15217,VFIO_IOMMU_UNMAP_DMA = 15218,VFIO_IOMMU_ENABLE = 15219,VFIO_IOMMU_DISABLE = 15220,VFIO_IOMMU_SPAPR_TCE_GET_INFO = 15216,};
enum MACRO_VGA2 {VGA2_CONNECTED = 0x40000,};
enum MACRO_VIFF {VIFF_TUNNEL = 0x1,VIFF_SRCRT = 0x2,VIFF_REGISTER = 0x4,VIFF_USE_IFINDEX = 0x8,};
enum MACRO_VM86 {VM86_SIGNAL = 0,VM86_UNKNOWN = 1,VM86_INTx = 2,VM86_STI = 3,VM86_PICRETURN = 4,VM86_TRAP = 6,VM86_PLUS_INSTALL_CHECK = 0,VM86_ENTER = 1,VM86_ENTER_NO_BYPASS = 2,VM86_REQUEST_IRQ = 3,VM86_FREE_IRQ = 4,VM86_GET_IRQ_BITS = 5,VM86_GET_AND_RESET_IRQ = 6,VM86_SCREEN_BITMAP = 1,};
enum MACRO_VMIN {VMIN = 6,};
enum MACRO_WAIT {WAIT_ANY = -1,WAIT_MYPGRP = 0,};
enum MACRO_WAKE {WAKE_PHY = 1,WAKE_UCAST = 2,WAKE_MCAST = 4,WAKE_BCAST = 8,WAKE_ARP = 16,WAKE_MAGIC = 32,WAKE_MAGICSECURE = 64,};
enum MACRO_WAVE {WAVE_16_BITS = 0x1,WAVE_UNSIGNED = 0x2,WAVE_LOOPING = 0x4,WAVE_BIDIR_LOOP = 0x8,WAVE_LOOP_BACK = 0x10,WAVE_SUSTAIN_ON = 0x20,WAVE_ENVELOPES = 0x40,WAVE_FAST_RELEASE = 0x80,WAVE_VIBRATO = 0x10000,WAVE_TREMOLO = 0x20000,WAVE_SCALE = 0x40000,WAVE_FRACTIONS = 0x80000,WAVE_ROM = 0x40000000,WAVE_MULAW = 0x20000000,};
enum MACRO_WEOF {WEOF = 0xFFFFFFFF,};
enum MACRO_WILL {WILL = 251,};
enum MACRO_WINT {WINT_MIN = 0,WINT_MAX = -1,};
enum MACRO_WITH {WITH_DOC_STRINGS = 1,WITH_DTRACE = 1,WITH_PYMALLOC = 1,WITH_THREAD = 1,WITH_VALGRIND = 1,};
enum MACRO_WONT {WONT = 252,};
enum MACRO_XCUP {XCUP_MAJOR_VERSION = 1,XCUP_MINOR_VERSION = 0,};
enum MACRO_XCVR {XCVR_INTERNAL = 0x0,XCVR_EXTERNAL = 0x1,XCVR_DUMMY1 = 0x2,XCVR_DUMMY2 = 0x3,XCVR_DUMMY3 = 0x4,};
enum MACRO_XDGA {XDGA_MAJOR_VERSION = 2,XDGA_MINOR_VERSION = 0,};
enum MACRO_XEVI {XEVI_TRANSPARENCY_NONE = 0,XEVI_TRANSPARENCY_PIXEL = 1,XEVI_TRANSPARENCY_MASK = 2,XEVI_MAJOR_VERSION = 1,XEVI_MINOR_VERSION = 0,};
enum MACRO_XFER {XFER_NONE = 0x0,XFER_WRITE = 0x1,XFER_READ = 0x2,XFER_RSVD = 0x3,};
enum MACRO_XFRM {XFRM_SC_DOI_RESERVED = 0,XFRM_SC_DOI_LSM = 1,XFRM_SC_ALG_RESERVED = 0,XFRM_SC_ALG_SELINUX = 1,XFRM_INF = -1,};
enum MACRO_XRES {XRES_MAJOR_VERSION = 1,XRES_MINOR_VERSION = 2,};
enum MACRO_XUSE {XUSE_MTSAFE_API = 1,};
enum MACRO_XVMC {XVMC_CHROMA_FORMAT_420 = 0x1,XVMC_CHROMA_FORMAT_422 = 0x2,XVMC_CHROMA_FORMAT_444 = 0x3,XVMC_OVERLAID_SURFACE = 0x1,XVMC_BACKEND_SUBPICTURE = 0x2,XVMC_SUBPICTURE_INDEPENDENT_SCALING = 0x4,XVMC_INTRA_UNSIGNED = 0x8,XVMC_MOCOMP = 0x0,XVMC_IDCT = 0x10000,XVMC_MPEG_1 = 0x1,XVMC_MPEG_2 = 0x2,XVMC_H263 = 0x3,XVMC_MPEG_4 = 0x4,XVMC_MB_TYPE_MOTION_FORWARD = 0x2,XVMC_MB_TYPE_MOTION_BACKWARD = 0x4,XVMC_MB_TYPE_PATTERN = 0x8,XVMC_MB_TYPE_INTRA = 0x10,XVMC_PREDICTION_FIELD = 0x1,XVMC_PREDICTION_FRAME = 0x2,XVMC_PREDICTION_DUAL_PRIME = 0x3,XVMC_PREDICTION_16x8 = 0x2,XVMC_PREDICTION_4MV = 0x4,XVMC_SELECT_FIRST_FORWARD = 0x1,XVMC_SELECT_FIRST_BACKWARD = 0x2,XVMC_SELECT_SECOND_FORWARD = 0x4,XVMC_SELECT_SECOND_BACKWARD = 0x8,XVMC_DCT_TYPE_FRAME = 0x0,XVMC_DCT_TYPE_FIELD = 0x1,XVMC_TOP_FIELD = 0x1,XVMC_BOTTOM_FIELD = 0x2,XVMC_FRAME_PICTURE = 0x3,XVMC_SECOND_FIELD = 0x4,XVMC_DIRECT = 0x1,XVMC_RENDERING = 0x1,XVMC_DISPLAYING = 0x2,XVMC_VLD = 0x20000,XVMC_PROGRESSIVE_SEQUENCE = 0x10,XVMC_ZIG_ZAG_SCAN = 0x0,XVMC_ALTERNATE_SCAN = 0x100,XVMC_PRED_DCT_FRAME = 0x40,XVMC_PRED_DCT_FIELD = 0x0,XVMC_TOP_FIELD_FIRST = 0x80,XVMC_BOTTOM_FIELD_FIRST = 0x0,XVMC_CONCEALMENT_MOTION_VECTORS = 0x200,XVMC_Q_SCALE_TYPE = 0x400,XVMC_INTRA_VLC_FORMAT = 0x800,XVMC_I_PICTURE = 0x1,XVMC_P_PICTURE = 0x2,XVMC_B_PICTURE = 0x3,};
enum MACRO_YPOP {YPOP_CHANGE = 1,YPOP_INSERT = 2,YPOP_DELETE = 3,YPOP_STORE = 4,};
enum MACRO_ZATM {ZATM_OAM_POOL = 0,ZATM_AAL0_POOL = 1,ZATM_AAL5_POOL_BASE = 2,ZATM_LAST_POOL = 12,ZATM_TIMER_HISTORY_SIZE = 16,};
enum MACRO_ZONE {ZONE_GOOD = 0xFF,ZONE_BAD_ORIGINAL = 0x0,ZONE_BAD_MARKED = 0x7,};
enum MACRO__ALL {_ALL_SOURCE = 1,};
enum MACRO__BSD {_BSD_TYPES = 1,};
enum MACRO__ELF {_ELF_H = 1,};
enum MACRO__FPU {_FPU_CONTROL_H = 1,_FPU_MASK_IM = 1,_FPU_MASK_DM = 2,_FPU_MASK_ZM = 4,_FPU_MASK_OM = 8,_FPU_MASK_UM = 16,_FPU_MASK_PM = 32,_FPU_EXTENDED = 768,_FPU_DOUBLE = 512,_FPU_SINGLE = 0,_FPU_RC_NEAREST = 0,_FPU_RC_DOWN = 1024,_FPU_RC_UP = 2048,_FPU_RC_ZERO = 3072,_FPU_RESERVED = 61632,_FPU_DEFAULT = 895,_FPU_IEEE = 895,};
enum MACRO__FTW {_FTW_H = 1,_SYS_STAT_H = 1,};
enum MACRO__GNU {_GNU_LIBC_VERSION_H = 1,__GNU_LIB_NAMES_H = 1,_GNU_VERSIONS_H = 1,};
enum MACRO__GRP {_GRP_H = 1,};
enum MACRO__GUS {_GUS_NUMVOICES = 0x0,_GUS_VOICESAMPLE = 0x1,_GUS_VOICEON = 0x2,_GUS_VOICEOFF = 0x3,_GUS_VOICEMODE = 0x4,_GUS_VOICEBALA = 0x5,_GUS_VOICEFREQ = 0x6,_GUS_VOICEVOL = 0x7,_GUS_RAMPRANGE = 0x8,_GUS_RAMPRATE = 0x9,_GUS_RAMPMODE = 0xA,_GUS_RAMPON = 0xB,_GUS_RAMPOFF = 0xC,_GUS_VOICEFADE = 0xD,_GUS_VOLUME_SCALE = 0xE,_GUS_VOICEVOL2 = 0xF,_GUS_VOICE_POS = 0x10,};
enum MACRO__IOC {_IOC_NRBITS = 8,_IOC_TYPEBITS = 8,_IOC_SIZEBITS = 14,_IOC_DIRBITS = 2,_IOC_NRMASK = 255,_IOC_TYPEMASK = 255,_IOC_SIZEMASK = 16383,_IOC_DIRMASK = 3,_IOC_NRSHIFT = 0,_IOC_TYPESHIFT = 8,_IOC_SIZESHIFT = 16,_IOC_DIRSHIFT = 30,_IOC_NONE = 0,_IOC_WRITE = 1,_IOC_READ = 2,};
enum MACRO__IOS {_IOS_INPUT = 1,_IOS_OUTPUT = 2,_IOS_ATEND = 4,_IOS_APPEND = 8,_IOS_TRUNC = 16,_IOS_NOCREATE = 32,_IOS_NOREPLACE = 64,_IOS_BIN = 128,};
enum MACRO__NET {_NET_IF_ARP_H = 1,};
enum MACRO__NSS {_NSS_H = 1,_OBSTACK_H = 1,};
enum MACRO__PTY {_PTY_H = 1,_TERMIOS_H = 1,};
enum MACRO__PWD {_PWD_H = 1,};
enum MACRO__RPC {_RPC_AUTH_DES_H = 1,_RPC_AUTH_H = 1,_RPC_XDR_H = 1,_RPC_TYPES_H = 1,};
enum MACRO__SDT {_SDT_ASM_SECTION_AUTOGROUP_SUPPORT = 1,};
enum MACRO__SEM {_SEM_SEMUN_UNDEFINED = 1,};
enum MACRO__STK {_STK_LIM_MAX = -1,};
enum MACRO__SYS {_SYS_CDEFS_H = 1,};
enum MACRO__UDF {_UDF_FS_I_H = 1,};
enum MACRO__X11 {_X11_XLIBINT_H_ = 1,};
enum MACRO___FD {__FD_SETSIZE = 1024,};
enum MACRO___LC {__LC_CTYPE = 0,__LC_NUMERIC = 1,__LC_TIME = 2,__LC_COLLATE = 3,__LC_MONETARY = 4,__LC_MESSAGES = 5,__LC_ALL = 6,__LC_PAPER = 7,__LC_NAME = 8,__LC_ADDRESS = 9,__LC_TELEPHONE = 10,__LC_MEASUREMENT = 11,__LC_IDENTIFICATION = 12,};
enum MACRO___MF {__MF_CHECK_READ = 0,__MF_CHECK_WRITE = 1,__MF_TYPE_NOACCESS = 0,__MF_TYPE_HEAP = 1,__MF_TYPE_HEAP_I = 2,__MF_TYPE_STACK = 3,__MF_TYPE_STATIC = 4,__MF_TYPE_GUESS = 5,};
enum MACRO___NO {__NO_A_OUT_SUPPORT = 1,};
enum MACRO___NR {__NR_restart_syscall = 0xDB,__NR_exit = 0x3C,__NR_fork = 0x39,__NR_read = 0x0,__NR_write = 0x1,__NR_open = 0x2,__NR_close = 0x3,__NR_waitpid = 0x7,__NR_creat = 0x55,__NR_link = 0x56,__NR_unlink = 0x57,__NR_execve = 0x3B,__NR_chdir = 0x50,__NR_time = 0xC9,__NR_mknod = 0x85,__NR_chmod = 0x5A,__NR_lchown = 0x5E,__NR_break = 0x11,__NR_oldstat = 0x12,__NR_lseek = 0x8,__NR_getpid = 0x27,__NR_mount = 0xA5,__NR_umount = 0x16,__NR_setuid = 0x69,__NR_getuid = 0x66,__NR_stime = 0x19,__NR_ptrace = 0x65,__NR_alarm = 0x25,__NR_oldfstat = 0x1C,__NR_pause = 0x22,__NR_utime = 0x84,__NR_stty = 0x1F,__NR_gtty = 0x20,__NR_access = 0x15,__NR_nice = 0x22,__NR_ftime = 0x23,__NR_sync = 0xA2,__NR_kill = 0x3E,__NR_rename = 0x52,__NR_mkdir = 0x53,__NR_rmdir = 0x54,__NR_dup = 0x20,__NR_pipe = 0x16,__NR_times = 0x64,__NR_prof = 0x2C,__NR_brk = 0xC,__NR_setgid = 0x6A,__NR_getgid = 0x68,__NR_signal = 0x30,__NR_geteuid = 0x6B,__NR_getegid = 0x6C,__NR_acct = 0xA3,__NR_umount2 = 0xA6,__NR_lock = 0x35,__NR_ioctl = 0x10,__NR_fcntl = 0x48,__NR_mpx = 0x38,__NR_setpgid = 0x6D,__NR_ulimit = 0x3A,__NR_oldolduname = 0x3B,__NR_umask = 0x5F,__NR_chroot = 0xA1,__NR_ustat = 0x88,__NR_dup2 = 0x21,__NR_getppid = 0x6E,__NR_getpgrp = 0x6F,__NR_setsid = 0x70,__NR_sigaction = 0x43,__NR_sgetmask = 0x44,__NR_ssetmask = 0x45,__NR_setreuid = 0x71,__NR_setregid = 0x72,__NR_sigsuspend = 0x48,__NR_sigpending = 0x49,__NR_sethostname = 0xAA,__NR_setrlimit = 0xA0,__NR_getrlimit = 0x61,__NR_getrusage = 0x62,__NR_gettimeofday = 0x60,__NR_settimeofday = 0xA4,__NR_getgroups = 0x73,__NR_setgroups = 0x74,__NR_select = 0x17,__NR_symlink = 0x58,__NR_oldlstat = 0x54,__NR_readlink = 0x59,__NR_uselib = 0x86,__NR_swapon = 0xA7,__NR_reboot = 0xA9,__NR_readdir = 0x59,__NR_mmap = 0x9,__NR_munmap = 0xB,__NR_truncate = 0x4C,__NR_ftruncate = 0x4D,__NR_fchmod = 0x5B,__NR_fchown = 0x5D,__NR_getpriority = 0x8C,__NR_setpriority = 0x8D,__NR_profil = 0x62,__NR_statfs = 0x89,__NR_fstatfs = 0x8A,__NR_ioperm = 0xAD,__NR_socketcall = 0x66,__NR_syslog = 0x67,__NR_setitimer = 0x26,__NR_getitimer = 0x24,__NR_stat = 0x4,__NR_lstat = 0x6,__NR_fstat = 0x5,__NR_olduname = 0x6D,__NR_iopl = 0xAC,__NR_vhangup = 0x99,__NR_idle = 0x70,__NR_vm86 = 0x71,__NR_wait4 = 0x3D,__NR_swapoff = 0xA8,__NR_sysinfo = 0x63,__NR_ipc = 0x75,__NR_fsync = 0x4A,__NR_sigreturn = 0x77,__NR_clone = 0x38,__NR_setdomainname = 0xAB,__NR_uname = 0x3F,__NR_modify_ldt = 0x9A,__NR_adjtimex = 0x9F,__NR_mprotect = 0xA,__NR_sigprocmask = 0x7E,__NR_create_module = 0xAE,__NR_init_module = 0xAF,__NR_delete_module = 0xB0,__NR_get_kernel_syms = 0xB1,__NR_quotactl = 0xB3,__NR_getpgid = 0x79,__NR_fchdir = 0x51,__NR_bdflush = 0x86,__NR_sysfs = 0x8B,__NR_personality = 0x87,__NR_afs_syscall = 0xB7,__NR_setfsuid = 0x7A,__NR_setfsgid = 0x7B,__NR__llseek = 0x8C,__NR_getdents = 0x4E,__NR__newselect = 0x8E,__NR_flock = 0x49,__NR_msync = 0x1A,__NR_readv = 0x13,__NR_writev = 0x14,__NR_getsid = 0x7C,__NR_fdatasync = 0x4B,__NR__sysctl = 0x9C,__NR_mlock = 0x95,__NR_munlock = 0x96,__NR_mlockall = 0x97,__NR_munlockall = 0x98,__NR_sched_setparam = 0x8E,__NR_sched_getparam = 0x8F,__NR_sched_setscheduler = 0x90,__NR_sched_getscheduler = 0x91,__NR_sched_yield = 0x18,__NR_sched_get_priority_max = 0x92,__NR_sched_get_priority_min = 0x93,__NR_sched_rr_get_interval = 0x94,__NR_nanosleep = 0x23,__NR_mremap = 0x19,__NR_setresuid = 0x75,__NR_getresuid = 0x76,__NR_query_module = 0xB2,__NR_poll = 0x7,__NR_nfsservctl = 0xB4,__NR_setresgid = 0x77,__NR_getresgid = 0x78,__NR_prctl = 0x9D,__NR_rt_sigreturn = 0xF,__NR_rt_sigaction = 0xD,__NR_rt_sigprocmask = 0xE,__NR_rt_sigpending = 0x7F,__NR_rt_sigtimedwait = 0x80,__NR_rt_sigqueueinfo = 0x81,__NR_rt_sigsuspend = 0x82,__NR_pread64 = 0x11,__NR_pwrite64 = 0x12,__NR_chown = 0x5C,__NR_getcwd = 0x4F,__NR_capget = 0x7D,__NR_capset = 0x7E,__NR_sigaltstack = 0x83,__NR_sendfile = 0x28,__NR_getpmsg = 0xB5,__NR_putpmsg = 0xB6,__NR_vfork = 0x3A,__NR_ugetrlimit = 0xBE,__NR_readahead = 0xBB,__NR_pciconfig_read = 0xC6,__NR_pciconfig_write = 0xC7,__NR_pciconfig_iobase = 0xC8,__NR_multiplexer = 0xC9,__NR_getdents64 = 0xD9,__NR_pivot_root = 0x9B,__NR_madvise = 0x1C,__NR_mincore = 0x1B,__NR_gettid = 0xBA,__NR_tkill = 0xC8,__NR_setxattr = 0xBC,__NR_lsetxattr = 0xBD,__NR_fsetxattr = 0xBE,__NR_getxattr = 0xBF,__NR_lgetxattr = 0xC0,__NR_fgetxattr = 0xC1,__NR_listxattr = 0xC2,__NR_llistxattr = 0xC3,__NR_flistxattr = 0xC4,__NR_removexattr = 0xC5,__NR_lremovexattr = 0xC6,__NR_fremovexattr = 0xC7,__NR_futex = 0xCA,__NR_sched_setaffinity = 0xCB,__NR_sched_getaffinity = 0xCC,__NR_tuxcall = 0xB8,__NR_io_setup = 0xCE,__NR_io_destroy = 0xCF,__NR_io_getevents = 0xD0,__NR_io_submit = 0xD1,__NR_io_cancel = 0xD2,__NR_set_tid_address = 0xDA,__NR_fadvise64 = 0xDD,__NR_exit_group = 0xE7,__NR_lookup_dcookie = 0xD4,__NR_epoll_create = 0xD5,__NR_epoll_ctl = 0xE9,__NR_epoll_wait = 0xE8,__NR_remap_file_pages = 0xD8,__NR_timer_create = 0xDE,__NR_timer_settime = 0xDF,__NR_timer_gettime = 0xE0,__NR_timer_getoverrun = 0xE1,__NR_timer_delete = 0xE2,__NR_clock_settime = 0xE3,__NR_clock_gettime = 0xE4,__NR_clock_getres = 0xE5,__NR_clock_nanosleep = 0xE6,__NR_swapcontext = 0xF9,__NR_tgkill = 0xEA,__NR_utimes = 0xEB,__NR_statfs64 = 0xFC,__NR_fstatfs64 = 0xFD,__NR_rtas = 0xFF,__NR_sys_debug_setcontext = 0x100,__NR_migrate_pages = 0x100,__NR_mbind = 0xED,__NR_get_mempolicy = 0xEF,__NR_set_mempolicy = 0xEE,__NR_mq_open = 0xF0,__NR_mq_unlink = 0xF1,__NR_mq_timedsend = 0xF2,__NR_mq_timedreceive = 0xF3,__NR_mq_notify = 0xF4,__NR_mq_getsetattr = 0xF5,__NR_kexec_load = 0xF6,__NR_add_key = 0xF8,__NR_request_key = 0xF9,__NR_keyctl = 0xFA,__NR_waitid = 0xF7,__NR_ioprio_set = 0xFB,__NR_ioprio_get = 0xFC,__NR_inotify_init = 0xFD,__NR_inotify_add_watch = 0xFE,__NR_inotify_rm_watch = 0xFF,__NR_spu_run = 0x116,__NR_spu_create = 0x117,__NR_pselect6 = 0x10E,__NR_ppoll = 0x10F,__NR_unshare = 0x110,__NR_splice = 0x113,__NR_tee = 0x114,__NR_vmsplice = 0x116,__NR_openat = 0x101,__NR_mkdirat = 0x102,__NR_mknodat = 0x103,__NR_fchownat = 0x104,__NR_futimesat = 0x105,__NR_newfstatat = 0x106,__NR_unlinkat = 0x107,__NR_renameat = 0x108,__NR_linkat = 0x109,__NR_symlinkat = 0x10A,__NR_readlinkat = 0x10B,__NR_fchmodat = 0x10C,__NR_faccessat = 0x10D,__NR_get_robust_list = 0x112,__NR_set_robust_list = 0x111,__NR_move_pages = 0x117,__NR_getcpu = 0x135,__NR_epoll_pwait = 0x119,__NR_utimensat = 0x118,__NR_signalfd = 0x11A,__NR_timerfd_create = 0x11B,__NR_eventfd = 0x11C,__NR_sync_file_range2 = 0x134,__NR_fallocate = 0x11D,__NR_subpage_prot = 0x136,__NR_timerfd_settime = 0x11E,__NR_timerfd_gettime = 0x11F,__NR_signalfd4 = 0x121,__NR_eventfd2 = 0x122,__NR_epoll_create1 = 0x123,__NR_dup3 = 0x124,__NR_pipe2 = 0x125,__NR_inotify_init1 = 0x126,__NR_perf_event_open = 0x12A,__NR_preadv = 0x127,__NR_pwritev = 0x128,__NR_rt_tgsigqueueinfo = 0x129,__NR_fanotify_init = 0x12C,__NR_fanotify_mark = 0x12D,__NR_prlimit64 = 0x12E,__NR_socket = 0x29,__NR_bind = 0x31,__NR_connect = 0x2A,__NR_listen = 0x32,__NR_accept = 0x2B,__NR_getsockname = 0x33,__NR_getpeername = 0x34,__NR_socketpair = 0x35,__NR_send = 0x14E,__NR_sendto = 0x2C,__NR_recv = 0x150,__NR_recvfrom = 0x2D,__NR_shutdown = 0x30,__NR_setsockopt = 0x36,__NR_getsockopt = 0x37,__NR_sendmsg = 0x2E,__NR_recvmsg = 0x2F,__NR_recvmmsg = 0x12B,__NR_accept4 = 0x120,__NR_name_to_handle_at = 0x12F,__NR_open_by_handle_at = 0x130,__NR_clock_adjtime = 0x131,__NR_syncfs = 0x132,__NR_sendmmsg = 0x133,__NR_setns = 0x134,__NR_process_vm_readv = 0x136,__NR_process_vm_writev = 0x137,__NR_finit_module = 0x139,__NR_kcmp = 0x138,__NR_sched_setattr = 0x163,__NR_sched_getattr = 0x164,__NR_renameat2 = 0x165,__NR_seccomp = 0x166,__NR_getrandom = 0x167,__NR_memfd_create = 0x168,__NR_bpf = 0x169,__NR_execveat = 0x16A,__NR_switch_endian = 0x16B,__NR_userfaultfd = 0x16C,__NR_membarrier = 0x16D,__NR_mlock2 = 0x17A,__NR_copy_file_range = 0x17B,__NR_preadv2 = 0x17C,__NR_pwritev2 = 0x17D,};
enum MACRO___SI {__SI_MAX_SIZE = 128,};
enum MACRO___SO {__SO_ACCEPTCON = 65536,};
enum MACRO___UT {__UT_LINESIZE = 32,__UT_NAMESIZE = 32,__UT_HOSTSIZE = 256,};
enum MACRO_apXK {apXK_LineDel = 0x1000FF00,apXK_CharDel = 0x1000FF01,apXK_Copy = 0x1000FF02,apXK_Cut = 0x1000FF03,apXK_Paste = 0x1000FF04,apXK_Move = 0x1000FF05,apXK_Grow = 0x1000FF06,apXK_Cmd = 0x1000FF07,apXK_Shell = 0x1000FF08,apXK_LeftBar = 0x1000FF09,apXK_RightBar = 0x1000FF0A,apXK_LeftBox = 0x1000FF0B,apXK_RightBox = 0x1000FF0C,apXK_UpBox = 0x1000FF0D,apXK_DownBox = 0x1000FF0E,apXK_Pop = 0x1000FF0F,apXK_Read = 0x1000FF10,apXK_Edit = 0x1000FF11,apXK_Save = 0x1000FF12,apXK_Exit = 0x1000FF13,apXK_Repeat = 0x1000FF14,apXK_KP_parenleft = 0x1000FFA8,apXK_KP_parenright = 0x1000FFA9,};
enum MACRO_bool {true = 1,false = 0,};
enum MACRO_hpXK {hpXK_ClearLine = 0x1000FF6F,hpXK_InsertLine = 0x1000FF70,hpXK_DeleteLine = 0x1000FF71,hpXK_InsertChar = 0x1000FF72,hpXK_DeleteChar = 0x1000FF73,hpXK_BackTab = 0x1000FF74,hpXK_KP_BackTab = 0x1000FF75,hpXK_Modelock1 = 0x1000FF48,hpXK_Modelock2 = 0x1000FF49,hpXK_Reset = 0x1000FF6C,hpXK_System = 0x1000FF6D,hpXK_User = 0x1000FF6E,hpXK_mute_acute = 0x100000A8,hpXK_mute_grave = 0x100000A9,hpXK_mute_asciicircum = 0x100000AA,hpXK_mute_diaeresis = 0x100000AB,hpXK_mute_asciitilde = 0x100000AC,hpXK_lira = 0x100000AF,hpXK_guilder = 0x100000BE,hpXK_Ydiaeresis = 0x100000EE,hpXK_IO = 0x100000EE,hpXK_longminus = 0x100000F6,hpXK_block = 0x100000FC,};
enum MACRO_math {math_errhandling = 3,};
enum MACRO_xEOF {xEOF = 236,};
enum MACRO_xvmc {xvmc_QueryVersion = 0,xvmc_ListSurfaceTypes = 1,xvmc_CreateContext = 2,xvmc_DestroyContext = 3,xvmc_CreateSurface = 4,xvmc_DestroySurface = 5,xvmc_CreateSubpicture = 6,xvmc_DestroySubpicture = 7,xvmc_ListSubpictureTypes = 8,xvmc_GetDRInfo = 9,xvmc_LastRequest = 9,};
typedef struct _POINTBLOCK POINTBLOCK;
typedef struct sg_scsi_id Sg_scsi_id;
typedef struct _23D39CEB96D177F7D0B7BFAD0D72AB23 XClassHint;
typedef struct _3A8E116D72DF0C8D49D51593D925AF55 XDGADevice;
typedef struct _CA1CD5B08005403884A7641019451813 XRectangle;
typedef struct _095E04B97CE84C59083222C7D172F70D XSizeHints;
typedef struct _XSyncValue XSyncValue;
typedef struct _58058F4C4926147A1BF935BBE1E04307 XTimeCoord;
typedef struct _XcmsCCC XcmsCCCRec;
typedef struct _CCAEDA52B750854C25441FD25B4DA915 XcmsCIELab;
typedef struct _F2C3184CEEDD49A7FB665043E59AF1F0 XcmsCIELuv;
typedef struct _6CDBBC56673808DBC2DA2091B1C251E0 XcmsCIEXYZ;
typedef struct _1C989109A1E2AFEC30347169F1D74F63 XcmsCIEuvY;
typedef struct _3DDB46D984C469553E00D9B3BEA3349C XcmsCIExyY;
typedef struct _D484A87E94E3DD0BB42E942E2185E2EE XcmsTekHVC;
typedef struct _XkbDesc *XkbDescPtr;
typedef struct _XkbDesc XkbDescRec;
typedef struct _XkbMods *XkbModsPtr;
typedef struct _XkbMods XkbModsRec;
struct _FontNames {int nnames;int size;int *length;char **names;};
struct _IO_jump_t;
typedef void _IO_lock_t;
struct _IO_marker {struct _IO_marker *_next;struct _IO_FILE *_sbuf;int _pos;};
struct _XkbBounds {__int16 x1;__int16 y1;__int16 x2;__int16 y2;};
typedef __int64 __blkcnt_t;
typedef unsigned __int64 __cpu_mask;
typedef __int64 __fsword_t;
typedef int __gwchar_t;
typedef __int64 __intptr_t;
typedef struct __locale_struct *__locale_t;
typedef void *__mf_ptr_t;
enum __ns_class {ns_c_invalid = 0x0,ns_c_in = 0x1,ns_c_2 = 0x2,ns_c_chaos = 0x3,ns_c_hs = 0x4,ns_c_none = 0xFE,ns_c_any = 0xFF,ns_c_max = 0x10000,};
enum __ns_rcode {ns_r_noerror = 0x0,ns_r_formerr = 0x1,ns_r_servfail = 0x2,ns_r_nxdomain = 0x3,ns_r_notimpl = 0x4,ns_r_refused = 0x5,ns_r_yxdomain = 0x6,ns_r_yxrrset = 0x7,ns_r_nxrrset = 0x8,ns_r_notauth = 0x9,ns_r_notzone = 0xA,ns_r_max = 0xB,ns_r_badvers = 0x10,ns_r_badsig = 0x10,ns_r_badkey = 0x11,ns_r_badtime = 0x12,};
enum __pid_type {F_OWNER_TID = 0x0,F_OWNER_PID = 0x1,F_OWNER_PGRP = 0x2,F_OWNER_GID = 0x2,};
typedef unsigned __int64 __rlim64_t;
typedef struct _17E8534BCB72EE42B6B6995F8B90F203 __sigset_t;
typedef unsigned __int64 __u_quad_t;
typedef unsigned __int16 __uint16_t;
typedef unsigned int __uint32_t;
typedef unsigned __int64 __uint64_t;
typedef struct _agp_region agp_region;
typedef struct _agp_unbind agp_unbind;
typedef struct _00C45C682C101D7F0C6E69C609547065 atm_kptr_t;
struct atmif_sioc {int number;int length;void *arg;};
struct atmlec_ioc {int dev_num;unsigned __int8 atm_addr[20];unsigned __int8 receive;};
typedef struct ca_descr ca_descr_t;
struct cdrom_read {int cdread_lba;char *cdread_bufaddr;int cdread_buflen;};
struct completion;
struct count_info {int bytes;int blocks;int ptr;};
struct crypt_data {char keysched[128];char sb0[32768];char sb1[32768];char sb2[32768];char sb3[32768];char crypt_3_buf[14];char current_salt[2];__int64 current_saltbits;int direction;int initialized;};
enum ctattr_nat {CTA_NAT_UNSPEC = 0x0,CTA_NAT_V4_MINIP = 0x1,CTA_NAT_V4_MAXIP = 0x2,CTA_NAT_PROTO = 0x3,CTA_NAT_V6_MINIP = 0x4,CTA_NAT_V6_MAXIP = 0x5,__CTA_NAT_MAX = 0x6,};
typedef struct dmx_caps dmx_caps_t;
enum dmx_ts_pes {DMX_PES_AUDIO0 = 0x0,DMX_PES_VIDEO0 = 0x1,DMX_PES_TELETEXT0 = 0x2,DMX_PES_SUBTITLE0 = 0x3,DMX_PES_PCR0 = 0x4,DMX_PES_AUDIO1 = 0x5,DMX_PES_VIDEO1 = 0x6,DMX_PES_TELETEXT1 = 0x7,DMX_PES_SUBTITLE1 = 0x8,DMX_PES_PCR1 = 0x9,DMX_PES_AUDIO2 = 0xA,DMX_PES_VIDEO2 = 0xB,DMX_PES_TELETEXT2 = 0xC,DMX_PES_SUBTITLE2 = 0xD,DMX_PES_PCR2 = 0xE,DMX_PES_AUDIO3 = 0xF,DMX_PES_VIDEO3 = 0x10,DMX_PES_TELETEXT3 = 0x11,DMX_PES_SUBTITLE3 = 0x12,DMX_PES_PCR3 = 0x13,DMX_PES_OTHER = 0x14,};
typedef char *domainname;
typedef union _CF90EBC219EB1F519A4BDB6194EF3B11 dvd_struct;
typedef unsigned __int64 elf_greg_t;
enum fc_els_cmd {ELS_LS_RJT = 0x1,ELS_LS_ACC = 0x2,ELS_PLOGI = 0x3,ELS_FLOGI = 0x4,ELS_LOGO = 0x5,ELS_ABTX = 0x6,ELS_RCS = 0x7,ELS_RES = 0x8,ELS_RSS = 0x9,ELS_RSI = 0xA,ELS_ESTS = 0xB,ELS_ESTC = 0xC,ELS_ADVC = 0xD,ELS_RTV = 0xE,ELS_RLS = 0xF,ELS_ECHO = 0x10,ELS_TEST = 0x11,ELS_RRQ = 0x12,ELS_REC = 0x13,ELS_SRR = 0x14,ELS_PRLI = 0x20,ELS_PRLO = 0x21,ELS_SCN = 0x22,ELS_TPLS = 0x23,ELS_TPRLO = 0x24,ELS_LCLM = 0x25,ELS_GAID = 0x30,ELS_FACT = 0x31,ELS_FDACDT = 0x32,ELS_NACT = 0x33,ELS_NDACT = 0x34,ELS_QOSR = 0x40,ELS_RVCS = 0x41,ELS_PDISC = 0x50,ELS_FDISC = 0x51,ELS_ADISC = 0x52,ELS_RNC = 0x53,ELS_FARP_REQ = 0x54,ELS_FARP_REPL = 0x55,ELS_RPS = 0x56,ELS_RPL = 0x57,ELS_RPBC = 0x58,ELS_FAN = 0x60,ELS_RSCN = 0x61,ELS_SCR = 0x62,ELS_RNFT = 0x63,ELS_CSR = 0x68,ELS_CSU = 0x69,ELS_LINIT = 0x70,ELS_LSTS = 0x72,ELS_RNID = 0x78,ELS_RLIR = 0x79,ELS_LIRR = 0x7A,ELS_SRL = 0x7B,ELS_SBRP = 0x7C,ELS_RPSC = 0x7D,ELS_QSA = 0x7E,ELS_EVFP = 0x7F,ELS_LKA = 0x80,ELS_AUTH_ELS = 0x90,};
enum fc_fh_type {FC_TYPE_BLS = 0x0,FC_TYPE_ELS = 0x1,FC_TYPE_IP = 0x5,FC_TYPE_FCP = 0x8,FC_TYPE_CT = 0x20,FC_TYPE_ILS = 0x22,};
enum fe_rolloff {ROLLOFF_35 = 0x0,ROLLOFF_20 = 0x1,ROLLOFF_25 = 0x2,ROLLOFF_AUTO = 0x3,};
typedef struct _libc_fpstate *fpregset_t;
typedef struct _ECC0E2C5AD5080F3204655729300624A fsOffset32;
typedef struct _4543C93AEA47F6ED8C90F8F964657E96 fsPropInfo;
enum fsh_access {fsa_NONE = 0x0,fsa_R = 0x1,fsa_W = 0x2,fsa_RW = 0x3,};
struct hdsp_mixer {unsigned __int16 matrix[2048];};
enum hdspm_sync {hdspm_sync_no_lock = 0x0,hdspm_sync_lock = 0x1,hdspm_sync_sync = 0x2,};
enum i2400m_brh {I2400M_BRH_SIGNATURE = 0xCBBC0000,I2400M_BRH_SIGNATURE_MASK = 0xFFFF0000,I2400M_BRH_SIGNATURE_SHIFT = 0x10,I2400M_BRH_OPCODE_MASK = 0xF,I2400M_BRH_RESPONSE_MASK = 0xF0,I2400M_BRH_RESPONSE_SHIFT = 0x4,I2400M_BRH_DIRECT_ACCESS = 0x400,I2400M_BRH_RESPONSE_REQUIRED = 0x200,I2400M_BRH_USE_CHECKSUM = 0x100,};
enum i2400m_tlv {I2400M_TLV_L4_MESSAGE_VERSIONS = 0x81,I2400M_TLV_SYSTEM_STATE = 0x8D,I2400M_TLV_MEDIA_STATUS = 0xA1,I2400M_TLV_RF_OPERATION = 0xA2,I2400M_TLV_RF_STATUS = 0xA3,I2400M_TLV_DEVICE_RESET_TYPE = 0x84,I2400M_TLV_CONFIG_IDLE_PARAMETERS = 0x259,I2400M_TLV_CONFIG_IDLE_TIMEOUT = 0x263,I2400M_TLV_CONFIG_D2H_DATA_FORMAT = 0x266,I2400M_TLV_CONFIG_DL_HOST_REORDER = 0x267,};
struct i2o_evt_id {unsigned int iop;unsigned int tid;unsigned int evt_mask;};
enum ieee_attrs {DCB_ATTR_IEEE_UNSPEC = 0x0,DCB_ATTR_IEEE_ETS = 0x1,DCB_ATTR_IEEE_PFC = 0x2,DCB_ATTR_IEEE_APP_TABLE = 0x3,DCB_ATTR_IEEE_PEER_ETS = 0x4,DCB_ATTR_IEEE_PEER_PFC = 0x5,DCB_ATTR_IEEE_PEER_APP = 0x6,DCB_ATTR_IEEE_MAXRATE = 0x7,__DCB_ATTR_IEEE_MAX = 0x8,};
enum ip_set_dim {IPSET_DIM_ZERO = 0x0,IPSET_DIM_ONE = 0x1,IPSET_DIM_TWO = 0x2,IPSET_DIM_THREE = 0x3,IPSET_DIM_MAX = 0x6,IPSET_BIT_RETURN_NOMATCH = 0x7,};
struct kbd_repeat {int delay;int period;};
typedef struct _E2CD2B01FA038266E5DB6C7E58157C2E mcontext_t;
typedef struct mdp_device_descriptor_s mdp_disk_t;
typedef struct mtd_info_user mtd_info_t;
typedef char *netnamestr;
enum nfs2_ftype {NF2NON = 0x0,NF2REG = 0x1,NF2DIR = 0x2,NF2BLK = 0x3,NF2CHR = 0x4,NF2LNK = 0x5,NF2SOCK = 0x6,NF2BAD = 0x7,NF2FIFO = 0x8,};
enum nfs3_ftype {NF3NON = 0x0,NF3REG = 0x1,NF3DIR = 0x2,NF3BLK = 0x3,NF3CHR = 0x4,NF3LNK = 0x5,NF3SOCK = 0x6,NF3FIFO = 0x7,NF3BAD = 0x8,};
struct nfs_string {unsigned int len;const char *data;};
struct nfsctl_arg;
struct nlm_notify {char *name;__int64 state;};
enum nss_status {NSS_STATUS_TRYAGAIN = 0xFFFFFFFE,NSS_STATUS_UNAVAIL = 0xFFFFFFFF,NSS_STATUS_NOTFOUND = 0x0,NSS_STATUS_SUCCESS = 0x1,NSS_STATUS_RETURN = 0x2,};
enum nubus_drhw {NUBUS_DRHW_APPLE_TFB = 0x1,NUBUS_DRHW_APPLE_WVC = 0x6,NUBUS_DRHW_SIGMA_CLRMAX = 0x7,NUBUS_DRHW_APPLE_SE30 = 0x9,NUBUS_DRHW_APPLE_HRVC = 0x13,NUBUS_DRHW_APPLE_PVC = 0x17,NUBUS_DRHW_APPLE_RBV1 = 0x18,NUBUS_DRHW_APPLE_MDC = 0x19,NUBUS_DRHW_APPLE_SONORA = 0x22,NUBUS_DRHW_APPLE_24AC = 0x2B,NUBUS_DRHW_APPLE_VALKYRIE = 0x2E,NUBUS_DRHW_APPLE_JET = 0x29,NUBUS_DRHW_SMAC_GFX = 0x105,NUBUS_DRHW_RASTER_CB264 = 0x13B,NUBUS_DRHW_MICRON_XCEED = 0x146,NUBUS_DRHW_RDIUS_GSC = 0x153,NUBUS_DRHW_SMAC_SPEC8 = 0x17B,NUBUS_DRHW_SMAC_SPEC24 = 0x17C,NUBUS_DRHW_RASTER_CB364 = 0x26F,NUBUS_DRHW_RDIUS_DCGX = 0x27C,NUBUS_DRHW_RDIUS_PC8 = 0x291,NUBUS_DRHW_LAPIS_PCS8 = 0x292,NUBUS_DRHW_RASTER_24XLI = 0x2A0,NUBUS_DRHW_RASTER_PBPGT = 0x2A5,NUBUS_DRHW_EMACH_FSX = 0x2AE,NUBUS_DRHW_RASTER_24XLTV = 0x2B7,NUBUS_DRHW_SMAC_THUND24 = 0x2CB,NUBUS_DRHW_SMAC_THUNDLGHT = 0x3D9,NUBUS_DRHW_RDIUS_PC24XP = 0x406,NUBUS_DRHW_RDIUS_PC24X = 0x40A,NUBUS_DRHW_RDIUS_PC8XJ = 0x40B,NUBUS_DRHW_INTERLAN = 0x100,NUBUS_DRHW_SMC9194 = 0x101,NUBUS_DRHW_KINETICS = 0x106,NUBUS_DRHW_CABLETRON = 0x109,NUBUS_DRHW_ASANTE_LC = 0x10F,NUBUS_DRHW_SONIC = 0x110,NUBUS_DRHW_TECHWORKS = 0x112,NUBUS_DRHW_APPLE_SONIC_NB = 0x118,NUBUS_DRHW_APPLE_SONIC_LC = 0x119,NUBUS_DRHW_FOCUS = 0x11C,NUBUS_DRHW_SONNET = 0x11D,};
enum nubus_drsw {NUBUS_DRSW_APPLE = 0x1,NUBUS_DRSW_APPLE_HIRES = 0x13,NUBUS_DRSW_3COM = 0x0,NUBUS_DRSW_CABLETRON = 0x1,NUBUS_DRSW_SONIC_LC = 0x1,NUBUS_DRSW_KINETICS = 0x103,NUBUS_DRSW_ASANTE = 0x104,NUBUS_DRSW_TECHWORKS = 0x109,NUBUS_DRSW_DAYNA = 0x10B,NUBUS_DRSW_FARALLON = 0x10C,NUBUS_DRSW_APPLE_SN = 0x10F,NUBUS_DRSW_DAYNA2 = 0x115,NUBUS_DRSW_FOCUS = 0x11A,NUBUS_DRSW_ASANTE_CS = 0x11D,NUBUS_DRSW_DAYNA_LC = 0x11E,NUBUS_DRSW_NONE = 0x0,};
struct ovs_header {int dp_ifindex;};
struct patch_info {unsigned __int16 key;__int16 device_no;__int16 instr_no;unsigned int mode;int len;int loop_start;int loop_end;unsigned int base_freq;unsigned int base_note;unsigned int high_note;unsigned int low_note;int panning;int detuning;unsigned __int8 env_rate[6];unsigned __int8 env_offset[6];unsigned __int8 tremolo_sweep;unsigned __int8 tremolo_rate;unsigned __int8 tremolo_depth;unsigned __int8 vibrato_sweep;unsigned __int8 vibrato_rate;unsigned __int8 vibrato_depth;int scale_frequency;unsigned int scale_factor;int volume;int fractions;int reserved1;int spare[2];char data[1];};
typedef struct elf_prpsinfo prpsinfo_t;
typedef struct elf_prstatus prstatus_t;
typedef int register_t;
typedef struct _BD619B2F7AFF7BA6F06506AA27210664 regmatch_t;
enum reply_stat {MSG_ACCEPTED = 0x0,MSG_DENIED = 0x1,};
enum reset_mode {FD_RESET_IF_NEEDED = 0x0,FD_RESET_IF_RAWCMD = 0x1,FD_RESET_ALWAYS = 0x2,};
enum rt_class_t {RT_TABLE_UNSPEC = 0x0,RT_TABLE_COMPAT = 0xFC,RT_TABLE_DEFAULT = 0xFD,RT_TABLE_MAIN = 0xFE,RT_TABLE_LOCAL = 0xFF,RT_TABLE_MAX = 0xFFFFFFFF,};
enum rt_scope_t {RT_SCOPE_UNIVERSE = 0x0,RT_SCOPE_SITE = 0xC8,RT_SCOPE_LINK = 0xFD,RT_SCOPE_HOST = 0xFE,RT_SCOPE_NOWHERE = 0xFF,};
struct sched_attr;
typedef struct sg_iovec sg_iovec_t;
struct sg_scsi_id {int host_no;int channel;int scsi_id;int lun;int scsi_type;__int16 h_cmd_per_lun;__int16 d_queue_depth;int unused[2];};
typedef struct sigevent sigevent_t;
typedef struct __jmp_buf_tag sigjmp_buf[1];
struct sock_fprog {unsigned __int16 len;struct sock_filter *filter;};
struct sysex_info {__int16 key;__int16 device_no;int len;unsigned __int8 data[1];};
typedef struct ucontext ucontext_t;
struct unimapdesc {unsigned __int16 entry_ct;struct unipair *entries;};
struct unimapinit {unsigned __int16 advised_hashsize;unsigned __int16 advised_hashstep;unsigned __int16 advised_hashlevel;};
typedef struct _19DEE1C64F7EC3DDB040A3404BEC0D9F utmp_array;
enum v4l2_field {V4L2_FIELD_ANY = 0x0,V4L2_FIELD_NONE = 0x1,V4L2_FIELD_TOP = 0x2,V4L2_FIELD_BOTTOM = 0x3,V4L2_FIELD_INTERLACED = 0x4,V4L2_FIELD_SEQ_TB = 0x5,V4L2_FIELD_SEQ_BT = 0x6,V4L2_FIELD_ALTERNATE = 0x7,V4L2_FIELD_INTERLACED_TB = 0x8,V4L2_FIELD_INTERLACED_BT = 0x9,};
enum vlan_flags {VLAN_FLAG_REORDER_HDR = 0x1,VLAN_FLAG_GVRP = 0x2,VLAN_FLAG_LOOSE_BINDING = 0x4,VLAN_FLAG_MVRP = 0x8,};
struct vt_consize {unsigned __int16 v_rows;unsigned __int16 v_cols;unsigned __int16 v_vlin;unsigned __int16 v_clin;unsigned __int16 v_vcol;unsigned __int16 v_ccol;};
enum wan_states {WAN_UNCONFIGURED = 0x0,WAN_DISCONNECTED = 0x1,WAN_CONNECTING = 0x2,WAN_CONNECTED = 0x3,};
typedef struct _48A6A373861130075F8524D5C353FEE6 xColorItem;
typedef struct _F19CD3A20937CEF33F3E2EF5E2D906EF xConnSetup;
typedef struct _D4B7CCBA990A156E447947BB060E0786 xCopyGCReq;
typedef struct _256B6D485D886C7434E6D059DF9BE864 xDamageReq;
typedef struct _DB64A8459715AF3CEFE23597C08B5967 xDeviceCtl;
typedef struct _CC7B73821EC10F3655DDE5DAA21E5635 xGlyphInfo;
typedef struct _9B4395DE66E8574EC0897BBFC5E468E1 xHostEntry;
typedef struct _B4DBE4004D983CDD99352ECA92D175EF xLineFixed;
typedef struct _FD9EA5F23BD8EC0F64EDF9068C14C969 xPictDepth;
typedef struct _xRectangle xRectangle;
typedef struct _83A9560127C5CA1AF601DD4E7C3B278F xTimecoord;
typedef struct _0E70E9A2AD7D0637C6C018491CDB8CD9 xTrapezoid;
typedef struct _3DD3CD96FAD56E1211E0F63114C705EF xXFixesReq;
typedef struct _FED2578BDF2A9AA68C400E8DB47E2B4E xXIAnyInfo;
typedef struct _2F57F65BEC0740F2386441D498F16321 xXIKeyInfo;
enum xcb_grab_t {XCB_GRAB_ANY = 0x0,};
enum xcb_kill_t {XCB_KILL_ALL_TEMPORARY = 0x0,};
enum xcb_time_t {XCB_TIME_CURRENT_TIME = 0x0,};
typedef struct _xkbBell xkbBellReq;
enum xt_u32_ops {XT_U32_AND = 0x0,XT_U32_LEFTSH = 0x1,XT_U32_RIGHTSH = 0x2,XT_U32_AT = 0x3,};
typedef struct _7F79EDEFC3CE5D4824B190E83A46D022 xvRational;
struct COFF_slib {char sl_entsz[4];char sl_pathndx[4];};
typedef struct _Client *ClientPtr;
typedef struct Dwarf_Cie_s *Dwarf_Cie;
typedef struct Dwarf_Die_s *Dwarf_Die;
typedef struct Dwarf_Fde_s *Dwarf_Fde;
typedef struct _0A00068ABA4408D4F92644683EE31C51 Dwarf_Loc;
typedef unsigned __int64 Dwarf_Off;
typedef void *Dwarf_Ptr;
typedef struct Dwarf_Var_s *Dwarf_Var;
typedef struct dynamic Elf32_Dyn;
typedef struct _45BD469DC424D3F368EE6E10DDB8D8EE Elf32_Lib;
typedef struct elf32_rel Elf32_Rel;
typedef struct elf32_sym Elf32_Sym;
typedef struct _8E3F17DF06268256B33C950219C36638 Elf64_Dyn;
typedef struct _00580D67DBBDE0DF5EC3B468D69A2E22 Elf64_Lib;
typedef struct elf64_rel Elf64_Rel;
typedef struct elf64_sym Elf64_Sym;
typedef struct typenode FIELDTYPE;
enum Gpm_Etype {GPM_MOVE = 0x1,GPM_DRAG = 0x2,GPM_DOWN = 0x4,GPM_UP = 0x8,GPM_SINGLE = 0x10,GPM_DOUBLE = 0x20,GPM_TRIPLE = 0x40,GPM_MFLAG = 0x80,GPM_HARD = 0x100,GPM_ENTER = 0x200,GPM_LEAVE = 0x400,};
typedef __int16 HashValue;
struct INT_QUEUE {unsigned __int8 intr_code[640];unsigned __int64 channel[640];unsigned __int64 param[640];unsigned __int64 put;unsigned __int64 get;};
enum L1_params {PARAM_DATA = 0x0,PARAM_TXDELAY = 0x1,PARAM_PERSIST = 0x2,PARAM_SLOTTIME = 0x3,PARAM_TXTAIL = 0x4,PARAM_FULLDUP = 0x5,PARAM_SOFTDCD = 0x6,PARAM_MUTE = 0x7,PARAM_DTR = 0x8,PARAM_RTS = 0x9,PARAM_SPEED = 0xA,PARAM_ENDDELAY = 0xB,PARAM_GROUP = 0xC,PARAM_IDLE = 0xD,PARAM_MIN = 0xE,PARAM_MAXKEY = 0xF,PARAM_WAIT = 0x10,PARAM_MAXDEFER = 0x11,PARAM_TX = 0x12,PARAM_HWEVENT = 0x1F,PARAM_RETURN = 0xFF,};
enum MACRO_ACC {ACC_IMMED = 0,ACC_DEFER = 1,};
enum MACRO_ACK {ACK_COMPLETE = 0x1,ACK_PENDING = 0x2,ACK_BUSY_X = 0x4,ACK_BUSY_A = 0x5,ACK_BUSY_B = 0x6,ACK_DATA_ERROR = 0xD,ACK_TYPE_ERROR = 0xE,};
enum MACRO_ADB {ADB_BUSRESET = 0,ADB_DONGLE = 1,ADB_KEYBOARD = 2,ADB_MOUSE = 3,ADB_TABLET = 4,ADB_MODEM = 5,ADB_MISC = 7,ADB_RET_OK = 0,ADB_RET_TIMEOUT = 3,ADB_PACKET = 0,};
enum MACRO_ADD {ADD_OVERWRITE = 256,};
enum MACRO_ADJ {ADJ_OFFSET = 0x1,ADJ_FREQUENCY = 0x2,ADJ_MAXERROR = 0x4,ADJ_ESTERROR = 0x8,ADJ_STATUS = 0x10,ADJ_TIMECONST = 0x20,ADJ_TAI = 0x80,ADJ_MICRO = 0x1000,ADJ_NANO = 0x2000,ADJ_TICK = 0x4000,ADJ_OFFSET_SINGLESHOT = 0x8001,ADJ_OFFSET_SS_READ = 0xA001,};
enum MACRO_AEC {AEC_OFF = 0,AEC_LOW = 1,AEC_MED = 2,AEC_HIGH = 3,AEC_AUTO = 4,AEC_AGC = 5,};
enum MACRO_AGX {AGX_6DB = 0x4,};
enum MACRO_AHZ {AHZ = 100,};
enum MACRO_ALG {ALG_SET_KEY = 1,ALG_SET_IV = 2,ALG_SET_OP = 3,ALG_OP_DECRYPT = 0,ALG_OP_ENCRYPT = 1,};
enum MACRO_ALL {ALL_MOUSE_EVENTS = 134217727,};
enum MACRO_APF {APF_NORMAL = 0,APF_NETWORK = 1,APF_CPUINTENS = 2,};
enum MACRO_APM {APM_STATE_READY = 0x0,APM_STATE_STANDBY = 0x1,APM_STATE_SUSPEND = 0x2,APM_STATE_OFF = 0x3,APM_STATE_BUSY = 0x4,APM_STATE_REJECT = 0x5,APM_STATE_OEM_SYS = 0x20,APM_STATE_OEM_DEV = 0x40,APM_STATE_DISABLE = 0x0,APM_STATE_ENABLE = 0x1,APM_STATE_DISENGAGE = 0x0,APM_STATE_ENGAGE = 0x1,APM_SYS_STANDBY = 0x1,APM_SYS_SUSPEND = 0x2,APM_NORMAL_RESUME = 0x3,APM_CRITICAL_RESUME = 0x4,APM_LOW_BATTERY = 0x5,APM_POWER_STATUS_CHANGE = 0x6,APM_UPDATE_TIME = 0x7,APM_CRITICAL_SUSPEND = 0x8,APM_USER_STANDBY = 0x9,APM_USER_SUSPEND = 0xA,APM_STANDBY_RESUME = 0xB,APM_CAPABILITY_CHANGE = 0xC,APM_SUCCESS = 0x0,APM_DISABLED = 0x1,APM_CONNECTED = 0x2,APM_NOT_CONNECTED = 0x3,APM_16_CONNECTED = 0x5,APM_16_UNSUPPORTED = 0x6,APM_32_CONNECTED = 0x7,APM_32_UNSUPPORTED = 0x8,APM_BAD_DEVICE = 0x9,APM_BAD_PARAM = 0xA,APM_NOT_ENGAGED = 0xB,APM_BAD_FUNCTION = 0xC,APM_RESUME_DISABLED = 0xD,APM_NO_ERROR = 0x53,APM_BAD_STATE = 0x60,APM_NO_EVENTS = 0x80,APM_NOT_PRESENT = 0x86,APM_DEVICE_BIOS = 0x0,APM_DEVICE_ALL = 0x1,APM_DEVICE_DISPLAY = 0x100,APM_DEVICE_STORAGE = 0x200,APM_DEVICE_PARALLEL = 0x300,APM_DEVICE_SERIAL = 0x400,APM_DEVICE_NETWORK = 0x500,APM_DEVICE_PCMCIA = 0x600,APM_DEVICE_BATTERY = 0x8000,APM_DEVICE_OEM = 0xE000,APM_DEVICE_OLD_ALL = 0xFFFF,APM_DEVICE_CLASS = 0xFF,APM_DEVICE_MASK = 0xFF00,APM_MAX_BATTERIES = 0x2,APM_CAP_GLOBAL_STANDBY = 0x1,APM_CAP_GLOBAL_SUSPEND = 0x2,APM_CAP_RESUME_STANDBY_TIMER = 0x4,APM_CAP_RESUME_SUSPEND_TIMER = 0x8,APM_CAP_RESUME_STANDBY_RING = 0x10,APM_CAP_RESUME_SUSPEND_RING = 0x20,APM_CAP_RESUME_STANDBY_PCMCIA = 0x40,APM_CAP_RESUME_SUSPEND_PCMCIA = 0x80,APM_IOC_STANDBY = 0x4101,APM_IOC_SUSPEND = 0x4102,};
enum MACRO_ARC {ARC_P_IP = 212,ARC_P_IPV6 = 196,ARC_P_ARP = 213,ARC_P_RARP = 214,ARC_P_IPX = 250,ARC_P_NOVELL_EC = 236,ARC_P_IP_RFC1051 = 240,ARC_P_ARP_RFC1051 = 241,ARC_P_ETHER = 232,ARC_P_DATAPOINT_BOOT = 0,ARC_P_DATAPOINT_MOUNT = 1,ARC_P_POWERLAN_BEACON = 8,ARC_P_POWERLAN_BEACON2 = 243,ARC_P_LANSOFT = 251,ARC_P_ATALK = 221,};
enum MACRO_ASH {ASH_CHANNEL_ANY = 0,ASH_CHANNEL_CONTROL = 1,ASH_CHANNEL_REALTIME = 2,};
enum MACRO_ATF {ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,ATF_NETMASK = 0x20,ATF_DONTPUB = 0x40,ATF_MAGIC = 0x80,};
enum MACRO_ATM {ATM_LNC_C6_AUTO_DEMOTE = 33554432,};
enum MACRO_ATY {ATY_RADEON_LCD_ON = 0x1,ATY_RADEON_CRT_ON = 0x2,};
enum MACRO_AVM {AVM_CARDTYPE_B1 = 0,AVM_CARDTYPE_T1 = 1,AVM_CARDTYPE_M1 = 2,AVM_CARDTYPE_M2 = 3,};
enum MACRO_AYT {AYT = 246,};
enum MACRO_BAD {BAD_FAT12 = 0xFF7,BAD_FAT16 = 0xFFF7,BAD_FAT32 = 0xFFFFFF7,};
enum MACRO_BFS {BFS_BSIZE_BITS = 9,BFS_BSIZE = 512,BFS_MAGIC = 464386766,BFS_ROOT_INO = 2,BFS_INODES_PER_BLOCK = 8,BFS_VDIR = 2,BFS_VREG = 1,BFS_NAMELEN = 14,BFS_DIRENT_SIZE = 16,BFS_DIRS_PER_BLOCK = 32,};
enum MACRO_BIT {WORD_BIT = 32,LONG_BIT = 64,};
enum MACRO_BLK {BLK_EOR = 0x80,BLK_EOF = 0x40,BLK_ERRORS = 0x20,BLK_RESTART = 0x10,BLK_BYTECOUNT = 0x2,};
enum MACRO_BPF {BPF_MAJOR_VERSION = 1,BPF_MINOR_VERSION = 1,BPF_LD = 0,BPF_LDX = 1,BPF_ST = 2,BPF_STX = 3,BPF_ALU = 4,BPF_JMP = 5,BPF_RET = 6,BPF_MISC = 7,BPF_W = 0,BPF_H = 8,BPF_B = 16,BPF_IMM = 0,BPF_ABS = 32,BPF_IND = 64,BPF_MEM = 96,BPF_LEN = 128,BPF_MSH = 160,BPF_ADD = 0,BPF_SUB = 16,BPF_MUL = 32,BPF_DIV = 48,BPF_OR = 64,BPF_AND = 80,BPF_LSH = 96,BPF_RSH = 112,BPF_NEG = 128,BPF_MOD = 144,BPF_XOR = 160,BPF_JA = 0,BPF_JEQ = 16,BPF_JGT = 32,BPF_JGE = 48,BPF_JSET = 64,BPF_K = 0,BPF_X = 8,BPF_A = 16,BPF_TAX = 0,BPF_TXA = 128,BPF_MAXINSNS = 4096,BPF_MEMWORDS = 16,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x8000,};
enum MACRO_BSD {BSD_CURRENT_VERSION = 1,BSD_MIN_BITS = 9,BSD_MAX_BITS = 15,};
enum MACRO_BSG {BSG_PROTOCOL_SCSI = 0,BSG_SUB_PROTOCOL_SCSI_CMD = 0,BSG_SUB_PROTOCOL_SCSI_TMF = 1,BSG_SUB_PROTOCOL_SCSI_TRANSPORT = 2,BSG_FLAG_Q_AT_TAIL = 16,};
enum MACRO_BUS {BUS_DEVICE_RESET = 0xC,};
enum MACRO_CAN {CAN_USE_HEAP = 128,};
enum MACRO_CAP {CAP_CHOWN = 0,CAP_DAC_OVERRIDE = 1,CAP_DAC_READ_SEARCH = 2,CAP_FOWNER = 3,CAP_FSETID = 4,CAP_KILL = 5,CAP_SETGID = 6,CAP_SETUID = 7,CAP_SETPCAP = 8,CAP_LINUX_IMMUTABLE = 9,CAP_NET_BIND_SERVICE = 10,CAP_NET_BROADCAST = 11,CAP_NET_ADMIN = 12,CAP_NET_RAW = 13,CAP_IPC_LOCK = 14,CAP_IPC_OWNER = 15,CAP_SYS_MODULE = 16,CAP_SYS_RAWIO = 17,CAP_SYS_CHROOT = 18,CAP_SYS_PTRACE = 19,CAP_SYS_PACCT = 20,CAP_SYS_ADMIN = 21,CAP_SYS_BOOT = 22,CAP_SYS_NICE = 23,CAP_SYS_RESOURCE = 24,CAP_SYS_TIME = 25,CAP_SYS_TTY_CONFIG = 26,CAP_MKNOD = 27,CAP_LEASE = 28,CAP_AUDIT_WRITE = 29,CAP_AUDIT_CONTROL = 30,CAP_SETFCAP = 31,CAP_MAC_OVERRIDE = 32,CAP_MAC_ADMIN = 33,CAP_SYSLOG = 34,CAP_WAKE_ALARM = 35,CAP_BLOCK_SUSPEND = 36,CAP_COMPROMISE_KERNEL = 37,CAP_LAST_CAP = 37,};
enum MACRO_CCP {CCP_CONFREQ = 1,CCP_CONFACK = 2,CCP_TERMREQ = 5,CCP_TERMACK = 6,CCP_RESETREQ = 14,CCP_RESETACK = 15,CCP_MAX_OPTION_LENGTH = 32,CCP_HDRLEN = 4,CCP_OPT_MINLEN = 2,};
enum MACRO_CDC {CDC_CLOSE_TRAY = 0x1,CDC_OPEN_TRAY = 0x2,CDC_LOCK = 0x4,CDC_SELECT_SPEED = 0x8,CDC_SELECT_DISC = 0x10,CDC_MULTI_SESSION = 0x20,CDC_MCN = 0x40,CDC_MEDIA_CHANGED = 0x80,CDC_PLAY_AUDIO = 0x100,CDC_RESET = 0x200,CDC_DRIVE_STATUS = 0x800,CDC_GENERIC_PACKET = 0x1000,CDC_CD_R = 0x2000,CDC_CD_RW = 0x4000,CDC_DVD = 0x8000,CDC_DVD_R = 0x10000,CDC_DVD_RAM = 0x20000,CDC_MO_DRIVE = 0x40000,CDC_MRW = 0x80000,CDC_MRW_W = 0x100000,CDC_RAM = 0x200000,};
enum MACRO_CDF {CDF_RWRT = 0x20,CDF_HWDM = 0x24,CDF_MRW = 0x28,};
enum MACRO_CDM {CDM_MRW_NOTMRW = 0,CDM_MRW_BGFORMAT_INACTIVE = 1,CDM_MRW_BGFORMAT_ACTIVE = 2,CDM_MRW_BGFORMAT_COMPLETE = 3,};
enum MACRO_CDO {CDO_AUTO_CLOSE = 0x1,CDO_AUTO_EJECT = 0x2,CDO_USE_FFLAGS = 0x4,CDO_LOCK = 0x8,CDO_CHECK_TYPE = 0x10,};
enum MACRO_CDS {CDS_NO_INFO = 0,CDS_NO_DISC = 1,CDS_TRAY_OPEN = 2,CDS_DRIVE_NOT_READY = 3,CDS_DISC_OK = 4,CDS_AUDIO = 100,CDS_DATA_1 = 101,CDS_DATA_2 = 102,CDS_XA_2_1 = 103,CDS_XA_2_2 = 104,CDS_MIXED = 105,};
enum MACRO_CEE {CEE_DCBX_MAX_PGS = 8,CEE_DCBX_MAX_PRIO = 8,};
enum MACRO_CFM {CFM_VERSION = 2,CFM_IMAGE_SIZE = 131072,CFM_DESCR_LEN = 256,CFM_MAX_CYCX = 1,CFM_LOAD_BUFSZ = 1024,};
enum MACRO_CGC {CGC_DATA_UNKNOWN = 0,CGC_DATA_WRITE = 1,CGC_DATA_READ = 2,CGC_DATA_NONE = 3,};
enum MACRO_CGE {CGE_ERRNO = 0x1,CGE_INVERT = 0x2,CGE_SRC = 0x4,CGE_IDLUN = 0x8,CGE_PVOLTAG = 0x10,CGE_AVOLTAG = 0x20,};
enum MACRO_CGW {CGW_FLAGS_CAN_ECHO = 0x1,CGW_FLAGS_CAN_SRC_TSTAMP = 0x2,CGW_FLAGS_CAN_IIF_TX_OK = 0x4,CGW_MOD_FUNCS = 0x4,CGW_MOD_ID = 0x1,CGW_MOD_DLC = 0x2,CGW_MOD_DATA = 0x4,CGW_FRAME_MODS = 0x3,};
enum MACRO_CLD {CLD_UPCALL_VERSION = 1,};
enum MACRO_CMD {CMD_SUCCESS = 0x0,CMD_TARGET_STATUS = 0x1,CMD_DATA_UNDERRUN = 0x2,CMD_DATA_OVERRUN = 0x3,CMD_INVALID = 0x4,CMD_PROTOCOL_ERR = 0x5,CMD_HARDWARE_ERR = 0x6,CMD_CONNECTION_LOST = 0x7,CMD_ABORTED = 0x8,CMD_ABORT_FAILED = 0x9,CMD_UNSOLICITED_ABORT = 0xA,CMD_TIMEOUT = 0xB,CMD_UNABORTABLE = 0xC,};
enum MACRO_CPF {CPF_NONE = 0x0,CPF_FIRST = 0x1,CPF_LAST = 0x2,};
enum MACRO_CPU {CPU_086 = 0,CPU_186 = 1,CPU_286 = 2,CPU_386 = 3,CPU_486 = 4,CPU_586 = 5,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x1000,CR2 = 0x2000,};
enum MACRO_CR3 {CR3 = 0x3000,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x10,CS7 = 0x20,};
enum MACRO_CS8 {CS8 = 0x30,CSTOPB = 0x40,CREAD = 0x80,PARENB = 0x100,PARODD = 0x200,HUPCL = 0x400,CLOCAL = 0x800,CBAUDEX = 0x1000,};
enum MACRO_CSV {CSV_PVOLTAG = 0x1,CSV_AVOLTAG = 0x2,CSV_CLEARTAG = 0x4,};
enum MACRO_CTL {CTL_BANK_SELECT = 0x0,CTL_MODWHEEL = 0x1,CTL_BREATH = 0x2,CTL_FOOT = 0x4,CTL_PORTAMENTO_TIME = 0x5,CTL_DATA_ENTRY = 0x6,CTL_MAIN_VOLUME = 0x7,CTL_BALANCE = 0x8,CTL_PAN = 0xA,CTL_EXPRESSION = 0xB,CTL_GENERAL_PURPOSE1 = 0x10,CTL_GENERAL_PURPOSE2 = 0x11,CTL_GENERAL_PURPOSE3 = 0x12,CTL_GENERAL_PURPOSE4 = 0x13,CTL_DAMPER_PEDAL = 0x40,CTL_SUSTAIN = 0x40,CTL_HOLD = 0x40,CTL_PORTAMENTO = 0x41,CTL_SOSTENUTO = 0x42,CTL_SOFT_PEDAL = 0x43,CTL_HOLD2 = 0x45,CTL_GENERAL_PURPOSE5 = 0x50,CTL_GENERAL_PURPOSE6 = 0x51,CTL_GENERAL_PURPOSE7 = 0x52,CTL_GENERAL_PURPOSE8 = 0x53,CTL_EXT_EFF_DEPTH = 0x5B,CTL_TREMOLO_DEPTH = 0x5C,CTL_CHORUS_DEPTH = 0x5D,CTL_DETUNE_DEPTH = 0x5E,CTL_CELESTE_DEPTH = 0x5E,CTL_PHASER_DEPTH = 0x5F,CTL_DATA_INCREMENT = 0x60,CTL_DATA_DECREMENT = 0x61,CTL_NONREG_PARM_NUM_LSB = 0x62,CTL_NONREG_PARM_NUM_MSB = 0x63,CTL_REGIST_PARM_NUM_LSB = 0x64,CTL_REGIST_PARM_NUM_MSB = 0x65,};
enum MACRO_CWX {CWX = 1,CWY = 2,CWWidth = 4,CWHeight = 8,CWBorderWidth = 16,CWSibling = 32,CWStackMode = 64,};
enum MACRO_CYZ {CYZ_MAX_SPEED = 921600,CYZ_FIFO_SIZE = 16,CYZ_BOOT_NWORDS = 256,};
enum MACRO_DAA {DAA_US = 1,DAA_UK = 2,DAA_FRANCE = 3,DAA_GERMANY = 4,DAA_AUSTRALIA = 5,DAA_JAPAN = 6,};
enum MACRO_DBE {DBE_MAJOR_VERSION = 1,DBE_MINOR_VERSION = 0,};
enum MACRO_DBG {DBG_SWITCH = 0x1,DBG_CLOSE = 0x2,DBG_IO = 0x4,DBG_READ_REQ = 0x8,DBG_LEN = 0x10,DBG_BLOCK = 0x20,DBG_CLIENT = 0x40,DBG_DELTA = 0x80,};
enum MACRO_DCB {DCB_CAP_DCBX_HOST = 0x1,DCB_CAP_DCBX_LLD_MANAGED = 0x2,DCB_CAP_DCBX_VER_CEE = 0x4,DCB_CAP_DCBX_VER_IEEE = 0x8,DCB_CAP_DCBX_STATIC = 0x10,DCB_APP_IDTYPE_ETHTYPE = 0x0,DCB_APP_IDTYPE_PORTNUM = 0x1,DCB_FEATCFG_ERROR = 0x1,DCB_FEATCFG_ENABLE = 0x2,DCB_FEATCFG_WILLING = 0x4,DCB_FEATCFG_ADVERTISE = 0x8,};
enum MACRO_DDP {DDP_MAXSZ = 587,DDP_MAXHOPS = 15,};
enum MACRO_DES {DES_MAXDATA = 8192,DES_DIRMASK = 1,DES_ENCRYPT = 0,DES_DECRYPT = 1,DES_DEVMASK = 2,DES_HW = 0,DES_SW = 2,};
enum MACRO_DEV {DEV_BSIZE = 512,};
enum MACRO_DIE {DIE = 207,};
enum MACRO_DLM {DLM_LOCKSPACE_LEN = 64,DLM_RESNAME_MAXLEN = 64,DLM_LOCK_IV = -1,DLM_LOCK_NL = 0,DLM_LOCK_CR = 1,DLM_LOCK_CW = 2,DLM_LOCK_PR = 3,DLM_LOCK_PW = 4,DLM_LOCK_EX = 5,DLM_LKF_NOQUEUE = 1,DLM_LKF_CANCEL = 2,DLM_LKF_CONVERT = 4,DLM_LKF_VALBLK = 8,DLM_LKF_QUECVT = 16,DLM_LKF_IVVALBLK = 32,DLM_LKF_CONVDEADLK = 64,DLM_LKF_PERSISTENT = 128,DLM_LKF_NODLCKWT = 256,DLM_LKF_NODLCKBLK = 512,DLM_LKF_EXPEDITE = 1024,DLM_LKF_NOQUEUEBAST = 2048,DLM_LKF_HEADQUE = 4096,DLM_LKF_NOORDER = 8192,DLM_LKF_ORPHAN = 16384,DLM_LKF_ALTPR = 32768,DLM_LKF_ALTCW = 65536,DLM_LKF_FORCEUNLOCK = 131072,DLM_LKF_TIMEOUT = 262144,DLM_ECANCEL = 65537,DLM_EUNLOCK = 65538,DLM_SBF_DEMOTED = 1,DLM_SBF_VALNOTVALID = 2,DLM_SBF_ALTMODE = 4,DLM_LSFL_TIMEWARN = 2,DLM_LSFL_FS = 4,DLM_LSFL_NEWEXCL = 8,DLM_USER_LVB_LEN = 32,DLM_DEVICE_VERSION_MAJOR = 6,DLM_DEVICE_VERSION_MINOR = 0,DLM_DEVICE_VERSION_PATCH = 1,DLM_USER_LOCK = 1,DLM_USER_UNLOCK = 2,DLM_USER_QUERY = 3,DLM_USER_CREATE_LOCKSPACE = 4,DLM_USER_REMOVE_LOCKSPACE = 5,DLM_USER_PURGE = 6,DLM_USER_DEADLOCK = 7,DLM_USER_LSFLG_AUTOFREE = 1,DLM_USER_LSFLG_FORCEFREE = 2,DLM_LOCK_DATA_VERSION = 1,DLM_GENL_VERSION = 1,DLM_PLOCK_VERSION_MAJOR = 1,DLM_PLOCK_VERSION_MINOR = 2,DLM_PLOCK_VERSION_PATCH = 0,DLM_PLOCK_FL_CLOSE = 1,};
enum MACRO_DMA {DMA_READ = 0x46,DMA_WRITE = 0x4A,};
enum MACRO_DMX {DMX_EXTENSION_MAJOR = 2,DMX_EXTENSION_MINOR = 2,DMX_EXTENSION_PATCH = 20040604,DMX_BAD_XINERAMA = 1001,DMX_BAD_VALUE = 1002,};
enum MACRO_DR6 {DR6_RESERVED = 0xFFFF0FF0,};
enum MACRO_DSO {DSO_CONDATA = 1,DSO_DISDATA = 10,DSO_CONACCESS = 2,DSO_ACCEPTMODE = 4,DSO_CONACCEPT = 5,DSO_CONREJECT = 6,DSO_LINKINFO = 7,DSO_STREAM = 8,DSO_SEQPACKET = 9,DSO_MAXWINDOW = 11,DSO_NODELAY = 12,DSO_CORK = 13,DSO_SERVICES = 14,DSO_INFO = 15,DSO_MAX = 15,};
enum MACRO_DSP {DSP_CAP_REVISION = 0xFF,DSP_CAP_DUPLEX = 0x100,DSP_CAP_REALTIME = 0x200,DSP_CAP_BATCH = 0x400,DSP_CAP_COPROC = 0x800,DSP_CAP_TRIGGER = 0x1000,DSP_CAP_MMAP = 0x2000,DSP_CAP_MULTI = 0x4000,DSP_CAP_BIND = 0x8000,};
enum MACRO_DTF {DTF_1_PARINIT = 0x1,DTF_1_CONFEXP = 0x2,};
enum MACRO_DTV {DTV_UNDEFINED = 0,DTV_TUNE = 1,DTV_CLEAR = 2,DTV_FREQUENCY = 3,DTV_MODULATION = 4,DTV_BANDWIDTH_HZ = 5,DTV_INVERSION = 6,DTV_DISEQC_MASTER = 7,DTV_SYMBOL_RATE = 8,DTV_INNER_FEC = 9,DTV_VOLTAGE = 10,DTV_TONE = 11,DTV_PILOT = 12,DTV_ROLLOFF = 13,DTV_DISEQC_SLAVE_REPLY = 14,DTV_FE_CAPABILITY_COUNT = 15,DTV_FE_CAPABILITY = 16,DTV_DELIVERY_SYSTEM = 17,DTV_ISDBT_PARTIAL_RECEPTION = 18,DTV_ISDBT_SOUND_BROADCASTING = 19,DTV_ISDBT_SB_SUBCHANNEL_ID = 20,DTV_ISDBT_SB_SEGMENT_IDX = 21,DTV_ISDBT_SB_SEGMENT_COUNT = 22,DTV_ISDBT_LAYERA_FEC = 23,DTV_ISDBT_LAYERA_MODULATION = 24,DTV_ISDBT_LAYERA_SEGMENT_COUNT = 25,DTV_ISDBT_LAYERA_TIME_INTERLEAVING = 26,DTV_ISDBT_LAYERB_FEC = 27,DTV_ISDBT_LAYERB_MODULATION = 28,DTV_ISDBT_LAYERB_SEGMENT_COUNT = 29,DTV_ISDBT_LAYERB_TIME_INTERLEAVING = 30,DTV_ISDBT_LAYERC_FEC = 31,DTV_ISDBT_LAYERC_MODULATION = 32,DTV_ISDBT_LAYERC_SEGMENT_COUNT = 33,DTV_ISDBT_LAYERC_TIME_INTERLEAVING = 34,DTV_API_VERSION = 35,DTV_CODE_RATE_HP = 36,DTV_CODE_RATE_LP = 37,DTV_GUARD_INTERVAL = 38,DTV_TRANSMISSION_MODE = 39,DTV_HIERARCHY = 40,DTV_ISDBT_LAYER_ENABLED = 41,DTV_STREAM_ID = 42,DTV_ISDBS_TS_ID_LEGACY = 42,DTV_DVBT2_PLP_ID_LEGACY = 43,DTV_ENUM_DELSYS = 44,DTV_ATSCMH_FIC_VER = 45,DTV_ATSCMH_PARADE_ID = 46,DTV_ATSCMH_NOG = 47,DTV_ATSCMH_TNOG = 48,DTV_ATSCMH_SGN = 49,DTV_ATSCMH_PRC = 50,DTV_ATSCMH_RS_FRAME_MODE = 51,DTV_ATSCMH_RS_FRAME_ENSEMBLE = 52,DTV_ATSCMH_RS_CODE_MODE_PRI = 53,DTV_ATSCMH_RS_CODE_MODE_SEC = 54,DTV_ATSCMH_SCCC_BLOCK_MODE = 55,DTV_ATSCMH_SCCC_CODE_MODE_A = 56,DTV_ATSCMH_SCCC_CODE_MODE_B = 57,DTV_ATSCMH_SCCC_CODE_MODE_C = 58,DTV_ATSCMH_SCCC_CODE_MODE_D = 59,DTV_INTERLEAVING = 60,DTV_LNA = 61,DTV_STAT_SIGNAL_STRENGTH = 62,DTV_STAT_CNR = 63,DTV_STAT_PRE_ERROR_BIT_COUNT = 64,DTV_STAT_PRE_TOTAL_BIT_COUNT = 65,DTV_STAT_POST_ERROR_BIT_COUNT = 66,DTV_STAT_POST_TOTAL_BIT_COUNT = 67,DTV_STAT_ERROR_BLOCK_COUNT = 68,DTV_STAT_TOTAL_BLOCK_COUNT = 69,DTV_MAX_COMMAND = 69,};
enum MACRO_DVB {DVB_NET_FEEDTYPE_MPE = 0,DVB_NET_FEEDTYPE_ULE = 1,};
enum MACRO_DVD {DVD_READ_STRUCT = 0x5390,DVD_WRITE_STRUCT = 0x5391,DVD_AUTH = 0x5392,};
enum MACRO_DXK {DXK_ring_accent = 0x1000FEB0,DXK_circumflex_accent = 0x1000FE5E,DXK_cedilla_accent = 0x1000FE2C,DXK_acute_accent = 0x1000FE27,DXK_grave_accent = 0x1000FE60,DXK_tilde = 0x1000FE7E,DXK_diaeresis = 0x1000FE22,DXK_Remove = 0x1000FF00,};
enum MACRO_EAI {EAI_BADFLAGS = -1,EAI_NONAME = -2,EAI_AGAIN = -3,EAI_FAIL = -4,EAI_FAMILY = -6,EAI_SOCKTYPE = -7,EAI_SERVICE = -8,EAI_MEMORY = -10,EAI_SYSTEM = -11,EAI_OVERFLOW = -12,EAI_NODATA = -5,EAI_ADDRFAMILY = -9,EAI_INPROGRESS = -100,EAI_CANCELED = -101,EAI_NOTCANCELED = -102,EAI_ALLDONE = -103,EAI_INTR = -104,EAI_IDN_ENCODE = -105,};
enum MACRO_EBT {EBT_802_3_SAP = 0x1,EBT_802_3_TYPE = 0x2,};
enum MACRO_EDD {EDD_MBR_SIG_OFFSET = 0x1B8,EDD_MBR_SIG_BUF = 0x290,EDD_MBR_SIG_MAX = 0x10,EDD_MBR_SIG_NR_BUF = 0x1EA,EDD_EXT_FIXED_DISK_ACCESS = 0x1,EDD_EXT_DEVICE_LOCKING_AND_EJECTING = 0x2,EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT = 0x4,EDD_EXT_64BIT_EXTENSIONS = 0x8,EDD_INFO_DMA_BOUNDARY_ERROR_TRANSPARENT = 0x1,EDD_INFO_GEOMETRY_VALID = 0x2,EDD_INFO_REMOVABLE = 0x4,EDD_INFO_WRITE_VERIFY = 0x8,EDD_INFO_MEDIA_CHANGE_NOTIFICATION = 0x10,EDD_INFO_LOCKABLE = 0x20,EDD_INFO_NO_MEDIA_PRESENT = 0x40,EDD_INFO_USE_INT13_FN50 = 0x80,};
enum MACRO_EFA {EFA_PARISC_1_0 = 0x20B,EFA_PARISC_1_1 = 0x210,EFA_PARISC_2_0 = 0x214,};
enum MACRO_EFS {EFS_MAGIC = 0x72959,EFS_NEWMAGIC = 0x7295A,EFS_SUPER = 0x1,EFS_ROOTINODE = 0x2,};
enum MACRO_ELF {ELF_NOTE_PAGESIZE_HINT = 1,};
enum MACRO_ELS {ELS_RSCN_EV_QUAL_BIT = 2,ELS_RSCN_EV_QUAL_MASK = 15,ELS_RSCN_ADDR_FMT_BIT = 0,ELS_RSCN_ADDR_FMT_MASK = 3,};
enum MACRO_ENV {ENV_ESC = 2,ENV_USERVAR = 3,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EOR {EOR = 239,};
enum MACRO_EQL {EQL_DEFAULT_SLAVE_PRIORITY = 28800,EQL_DEFAULT_MAX_SLAVES = 4,EQL_DEFAULT_MTU = 576,EQL_DEFAULT_RESCHED_IVAL = 100,EQL_ENSLAVE = 35312,EQL_EMANCIPATE = 35313,EQL_GETSLAVECFG = 35314,EQL_SETSLAVECFG = 35315,EQL_GETMASTRCFG = 35316,EQL_SETMASTRCFG = 35317,};
enum MACRO_ERR {ERR = -1,};
enum MACRO_ESI {ESI_LEN = 6,};
enum MACRO_ETH {ETH_ALEN = 6,ETH_HLEN = 14,ETH_ZLEN = 60,ETH_DATA_LEN = 1500,ETH_FRAME_LEN = 1514,ETH_FCS_LEN = 4,ETH_P_LOOP = 96,ETH_P_PUP = 512,ETH_P_PUPAT = 513,ETH_P_IP = 2048,ETH_P_X25 = 2053,ETH_P_ARP = 2054,ETH_P_BPQ = 2303,ETH_P_IEEEPUP = 2560,ETH_P_IEEEPUPAT = 2561,ETH_P_BATMAN = 17157,ETH_P_DEC = 24576,ETH_P_DNA_DL = 24577,ETH_P_DNA_RC = 24578,ETH_P_DNA_RT = 24579,ETH_P_LAT = 24580,ETH_P_DIAG = 24581,ETH_P_CUST = 24582,ETH_P_SCA = 24583,ETH_P_TEB = 25944,ETH_P_RARP = 32821,ETH_P_ATALK = 32923,ETH_P_AARP = 33011,ETH_P_8021Q = 33024,ETH_P_IPX = 33079,ETH_P_IPV6 = 34525,ETH_P_PAUSE = 34824,ETH_P_SLOW = 34825,ETH_P_WCCP = 34878,ETH_P_PPP_DISC = 34915,ETH_P_PPP_SES = 34916,ETH_P_MPLS_UC = 34887,ETH_P_MPLS_MC = 34888,ETH_P_ATMMPOA = 34892,ETH_P_LINK_CTL = 34924,ETH_P_ATMFATE = 34948,ETH_P_PAE = 34958,ETH_P_AOE = 34978,ETH_P_8021AD = 34984,ETH_P_802_EX1 = 34997,ETH_P_TIPC = 35018,ETH_P_8021AH = 35047,ETH_P_MVRP = 35061,ETH_P_1588 = 35063,ETH_P_FCOE = 35078,ETH_P_TDLS = 35085,ETH_P_FIP = 35092,ETH_P_QINQ1 = 37120,ETH_P_QINQ2 = 37376,ETH_P_QINQ3 = 37632,ETH_P_EDSA = 56026,ETH_P_AF_IUCV = 64507,ETH_P_802_3_MIN = 1536,ETH_P_802_3 = 1,ETH_P_AX25 = 2,ETH_P_ALL = 3,ETH_P_802_2 = 4,ETH_P_SNAP = 5,ETH_P_DDCMP = 6,ETH_P_WAN_PPP = 7,ETH_P_PPP_MP = 8,ETH_P_LOCALTALK = 9,ETH_P_CAN = 12,ETH_P_CANFD = 13,ETH_P_PPPTALK = 16,ETH_P_TR_802_2 = 17,ETH_P_MOBITEX = 21,ETH_P_CONTROL = 22,ETH_P_IRDA = 23,ETH_P_ECONET = 24,ETH_P_HDLC = 25,ETH_P_ARCNET = 26,ETH_P_DSA = 27,ETH_P_TRAILER = 28,ETH_P_PHONET = 245,ETH_P_IEEE802154 = 246,ETH_P_CAIF = 247,};
enum MACRO_FAN {FAN_ACCESS = 0x1,FAN_MODIFY = 0x2,FAN_CLOSE_WRITE = 0x8,FAN_CLOSE_NOWRITE = 0x10,FAN_OPEN = 0x20,FAN_Q_OVERFLOW = 0x4000,FAN_OPEN_PERM = 0x10000,FAN_ACCESS_PERM = 0x20000,FAN_ONDIR = 0x40000000,FAN_EVENT_ON_CHILD = 0x8000000,FAN_CLOSE = 0x18,FAN_CLOEXEC = 0x1,FAN_NONBLOCK = 0x2,FAN_CLASS_NOTIF = 0x0,FAN_CLASS_CONTENT = 0x4,FAN_CLASS_PRE_CONTENT = 0x8,FAN_ALL_CLASS_BITS = 0xC,FAN_UNLIMITED_QUEUE = 0x10,FAN_UNLIMITED_MARKS = 0x20,FAN_ALL_INIT_FLAGS = 0x3F,FAN_MARK_ADD = 0x1,FAN_MARK_REMOVE = 0x2,FAN_MARK_DONT_FOLLOW = 0x4,FAN_MARK_ONLYDIR = 0x8,FAN_MARK_MOUNT = 0x10,FAN_MARK_IGNORED_MASK = 0x20,FAN_MARK_IGNORED_SURV_MODIFY = 0x40,FAN_MARK_FLUSH = 0x80,FAN_ALL_MARK_FLAGS = 0xFF,FAN_ALL_EVENTS = 0x3B,FAN_ALL_PERM_EVENTS = 0x30000,FAN_ALL_OUTGOING_EVENTS = 0x3403B,};
enum MACRO_FAT {FAT_MAX_DIR_ENTRIES = 65536,FAT_MAX_DIR_SIZE = 2097152,};
enum MACRO_FDC {FDC_NONE = 0x0,FDC_UNKNOWN = 0x10,FDC_8272A = 0x20,FDC_765ED = 0x30,FDC_82072 = 0x40,FDC_82072A = 0x45,FDC_82077_ORIG = 0x51,FDC_82077 = 0x52,FDC_82078_UNKN = 0x5F,FDC_82078 = 0x60,FDC_82078_1 = 0x61,FDC_S82078B = 0x62,FDC_87306 = 0x63,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,};
enum MACRO_FIB {FIB_RULE_PERMANENT = 0x1,FIB_RULE_INVERT = 0x2,FIB_RULE_UNRESOLVED = 0x4,FIB_RULE_IIF_DETACHED = 0x8,FIB_RULE_DEV_DETACHED = 0x8,FIB_RULE_OIF_DETACHED = 0x10,FIB_RULE_FIND_SADDR = 0x10000,};
enum MACRO_FLT {FLT_ROUNDS = 1,};
enum MACRO_FNM {FNM_PATHNAME = 1,FNM_NOESCAPE = 2,FNM_PERIOD = 4,FNM_FILE_NAME = 1,FNM_LEADING_DIR = 8,FNM_CASEFOLD = 16,FNM_EXTMATCH = 32,FNM_NOMATCH = 1,FNM_NOSYS = -1,};
enum MACRO_FSL {FSL_HV_IOCTL_TYPE = 0xAF,};
enum MACRO_FTD {FTD_MSG = 0x10,};
enum MACRO_FTS {FTS_COMFOLLOW = 0x1,FTS_LOGICAL = 0x2,FTS_NOCHDIR = 0x4,FTS_NOSTAT = 0x8,FTS_PHYSICAL = 0x10,FTS_SEEDOT = 0x20,FTS_XDEV = 0x40,FTS_WHITEOUT = 0x80,FTS_OPTIONMASK = 0xFF,FTS_NAMEONLY = 0x100,FTS_STOP = 0x200,FTS_ROOTPARENTLEVEL = 0xFFFFFFFF,FTS_ROOTLEVEL = 0x0,FTS_D = 0x1,FTS_DC = 0x2,FTS_DEFAULT = 0x3,FTS_DNR = 0x4,FTS_DOT = 0x5,FTS_DP = 0x6,FTS_ERR = 0x7,FTS_F = 0x8,FTS_INIT = 0x9,FTS_NS = 0xA,FTS_NSOK = 0xB,FTS_SL = 0xC,FTS_SLNONE = 0xD,FTS_W = 0xE,FTS_DONTCHDIR = 0x1,FTS_SYMFOLLOW = 0x2,FTS_AGAIN = 0x1,FTS_FOLLOW = 0x2,FTS_NOINSTR = 0x3,FTS_SKIP = 0x4,};
enum MACRO_GAI {GAI_WAIT = 0,GAI_NOWAIT = 1,};
enum MACRO_GEN {GEN_POWER_ON = 0x1280,GEN_SET_SEG = 0x1401,GEN_BOOT_DAT = 0x1402,GEN_START = 0x1403,GEN_DEFPAR = 0x1404,};
enum MACRO_GFX {GFX_CACHE_SIZE = 15,};
enum MACRO_GPM {GPM_NODE_DIR_MODE = 0x1FD,GPM_B_DOWN = 0x20,GPM_B_UP = 0x10,GPM_B_FOURTH = 0x8,GPM_B_LEFT = 0x4,GPM_B_MIDDLE = 0x2,GPM_B_RIGHT = 0x1,GPM_B_NONE = 0x0,GPM_REQ_SNAPSHOT = 0x0,GPM_REQ_BUTTONS = 0x1,GPM_REQ_CONFIG = 0x2,GPM_REQ_NOPASTE = 0x3,GPM_MAGIC = 0x47706D4C,};
enum MACRO_GRP {GRP_COMDAT = 0x1,};
enum MACRO_HID {HID_STRING_SIZE = 256,HID_REPORT_ID_UNKNOWN = -1,HID_REPORT_ID_FIRST = 256,HID_REPORT_ID_NEXT = 512,HID_REPORT_ID_MASK = 255,HID_REPORT_ID_MAX = 255,HID_REPORT_TYPE_INPUT = 1,HID_REPORT_TYPE_OUTPUT = 2,HID_REPORT_TYPE_FEATURE = 3,HID_REPORT_TYPE_MIN = 1,HID_REPORT_TYPE_MAX = 3,HID_FIELD_CONSTANT = 1,HID_FIELD_VARIABLE = 2,HID_FIELD_RELATIVE = 4,HID_FIELD_WRAP = 8,HID_FIELD_NONLINEAR = 16,HID_FIELD_NO_PREFERRED = 32,HID_FIELD_NULL_STATE = 64,HID_FIELD_VOLATILE = 128,HID_FIELD_BUFFERED_BYTE = 256,HID_MAX_MULTI_USAGES = 1024,HID_FIELD_INDEX_NONE = -1,HID_VERSION = 65540,};
enum MACRO_HOT {HOT_REMOVE_DISK = 0x922,};
enum MACRO_HSC {HSC_RESET = 27408,HSC_SET_PM = 27409,HSC_SEND_BREAK = 27410,HSC_PM_DISABLE = 0,HSC_PM_ENABLE = 1,HSC_MODE_STREAM = 1,HSC_MODE_FRAME = 2,HSC_FLOW_SYNC = 0,HSC_ARB_RR = 0,HSC_ARB_PRIO = 1,};
enum MACRO_HSI {HSI_CHAR_MAGIC = 107,};
enum MACRO_HUB {HUB_CLEAR_TT_BUFFER = 8,HUB_RESET_TT = 9,HUB_GET_TT_STATE = 10,HUB_STOP_TT = 11,HUB_SET_DEPTH = 12,HUB_GET_PORT_ERR_COUNT = 13,};
enum MACRO_I2C {I2C_M_TEN = 0x10,I2C_M_RD = 0x1,I2C_M_STOP = 0x8000,I2C_M_NOSTART = 0x4000,I2C_M_REV_DIR_ADDR = 0x2000,I2C_M_IGNORE_NAK = 0x1000,I2C_M_NO_RD_ACK = 0x800,I2C_M_RECV_LEN = 0x400,I2C_FUNC_I2C = 0x1,I2C_FUNC_10BIT_ADDR = 0x2,I2C_FUNC_PROTOCOL_MANGLING = 0x4,I2C_FUNC_SMBUS_PEC = 0x8,I2C_FUNC_NOSTART = 0x10,I2C_FUNC_SMBUS_BLOCK_PROC_CALL = 0x8000,I2C_FUNC_SMBUS_QUICK = 0x10000,I2C_FUNC_SMBUS_READ_BYTE = 0x20000,I2C_FUNC_SMBUS_WRITE_BYTE = 0x40000,I2C_FUNC_SMBUS_READ_BYTE_DATA = 0x80000,I2C_FUNC_SMBUS_WRITE_BYTE_DATA = 0x100000,I2C_FUNC_SMBUS_READ_WORD_DATA = 0x200000,I2C_FUNC_SMBUS_WRITE_WORD_DATA = 0x400000,I2C_FUNC_SMBUS_PROC_CALL = 0x800000,I2C_FUNC_SMBUS_READ_BLOCK_DATA = 0x1000000,I2C_FUNC_SMBUS_WRITE_BLOCK_DATA = 0x2000000,I2C_FUNC_SMBUS_READ_I2C_BLOCK = 0x4000000,I2C_FUNC_SMBUS_WRITE_I2C_BLOCK = 0x8000000,I2C_FUNC_SMBUS_BYTE = 0x60000,I2C_FUNC_SMBUS_BYTE_DATA = 0x180000,I2C_FUNC_SMBUS_WORD_DATA = 0x600000,I2C_FUNC_SMBUS_BLOCK_DATA = 0x3000000,I2C_FUNC_SMBUS_I2C_BLOCK = 0xC000000,I2C_FUNC_SMBUS_EMUL = 0xEFF0008,I2C_SMBUS_BLOCK_MAX = 0x20,I2C_SMBUS_READ = 0x1,I2C_SMBUS_WRITE = 0x0,I2C_SMBUS_QUICK = 0x0,I2C_SMBUS_BYTE = 0x1,I2C_SMBUS_BYTE_DATA = 0x2,I2C_SMBUS_WORD_DATA = 0x3,I2C_SMBUS_PROC_CALL = 0x4,I2C_SMBUS_BLOCK_DATA = 0x5,I2C_SMBUS_I2C_BLOCK_BROKEN = 0x6,I2C_SMBUS_BLOCK_PROC_CALL = 0x7,I2C_SMBUS_I2C_BLOCK_DATA = 0x8,};
enum MACRO_I2O {I2O_MAGIC_NUMBER = 105,I2O_EVT_Q_LEN = 32,I2O_EVT_DATA_SIZE = 88,I2O_BUS_LOCAL = 0,I2O_BUS_ISA = 1,I2O_BUS_EISA = 2,I2O_BUS_PCI = 4,I2O_BUS_PCMCIA = 5,I2O_BUS_NUBUS = 6,I2O_BUS_CARDBUS = 7,I2O_BUS_UNKNOWN = 128,I2O_EVT_IND_STATE_CHANGE = -2147483648,I2O_EVT_IND_GENERAL_WARNING = 1073741824,I2O_EVT_IND_CONFIGURATION_FLAG = 536870912,I2O_EVT_IND_LOCK_RELEASE = 268435456,I2O_EVT_IND_CAPABILITY_CHANGE = 134217728,I2O_EVT_IND_DEVICE_RESET = 67108864,I2O_EVT_IND_EVT_MASK_MODIFIED = 33554432,I2O_EVT_IND_FIELD_MODIFIED = 16777216,I2O_EVT_IND_VENDOR_EVT = 8388608,I2O_EVT_IND_DEVICE_STATE = 4194304,I2O_EVT_IND_EXEC_RESOURCE_LIMITS = 1,I2O_EVT_IND_EXEC_CONNECTION_FAIL = 2,I2O_EVT_IND_EXEC_ADAPTER_FAULT = 4,I2O_EVT_IND_EXEC_POWER_FAIL = 8,I2O_EVT_IND_EXEC_RESET_PENDING = 16,I2O_EVT_IND_EXEC_RESET_IMMINENT = 32,I2O_EVT_IND_EXEC_HW_FAIL = 64,I2O_EVT_IND_EXEC_XCT_CHANGE = 128,I2O_EVT_IND_EXEC_NEW_LCT_ENTRY = 256,I2O_EVT_IND_EXEC_MODIFIED_LCT = 512,I2O_EVT_IND_EXEC_DDM_AVAILABILITY = 1024,I2O_EVT_IND_BSA_VOLUME_LOAD = 1,I2O_EVT_IND_BSA_VOLUME_UNLOAD = 2,I2O_EVT_IND_BSA_VOLUME_UNLOAD_REQ = 4,I2O_EVT_IND_BSA_CAPACITY_CHANGE = 8,I2O_EVT_IND_BSA_SCSI_SMART = 16,I2O_EVT_STATE_CHANGE_NORMAL = 0,I2O_EVT_STATE_CHANGE_SUSPENDED = 1,I2O_EVT_STATE_CHANGE_RESTART = 2,I2O_EVT_STATE_CHANGE_NA_RECOVER = 3,I2O_EVT_STATE_CHANGE_NA_NO_RECOVER = 4,I2O_EVT_STATE_CHANGE_QUIESCE_REQUEST = 5,I2O_EVT_STATE_CHANGE_FAILED = 16,I2O_EVT_STATE_CHANGE_FAULTED = 17,I2O_EVT_GEN_WARNING_NORMAL = 0,I2O_EVT_GEN_WARNING_ERROR_THRESHOLD = 1,I2O_EVT_GEN_WARNING_MEDIA_FAULT = 2,I2O_EVT_CAPABILITY_OTHER = 1,I2O_EVT_CAPABILITY_CHANGED = 2,I2O_EVT_SENSOR_STATE_CHANGED = 1,I2O_CLASS_VERSION_10 = 0,I2O_CLASS_VERSION_11 = 1,I2O_CLASS_EXECUTIVE = 0,I2O_CLASS_DDM = 1,I2O_CLASS_RANDOM_BLOCK_STORAGE = 16,I2O_CLASS_SEQUENTIAL_STORAGE = 17,I2O_CLASS_LAN = 32,I2O_CLASS_WAN = 48,I2O_CLASS_FIBRE_CHANNEL_PORT = 64,I2O_CLASS_FIBRE_CHANNEL_PERIPHERAL = 65,I2O_CLASS_SCSI_PERIPHERAL = 81,I2O_CLASS_ATE_PORT = 96,I2O_CLASS_ATE_PERIPHERAL = 97,I2O_CLASS_FLOPPY_CONTROLLER = 112,I2O_CLASS_FLOPPY_DEVICE = 113,I2O_CLASS_BUS_ADAPTER = 128,I2O_CLASS_PEER_TRANSPORT_AGENT = 144,I2O_CLASS_PEER_TRANSPORT = 145,I2O_CLASS_END = 4095,I2O_CLASS_MATCH_ANYCLASS = -1,I2O_SUBCLASS_i960 = 1,I2O_SUBCLASS_HDM = 32,I2O_SUBCLASS_ISM = 33,I2O_PARAMS_FIELD_GET = 1,I2O_PARAMS_LIST_GET = 2,I2O_PARAMS_MORE_GET = 3,I2O_PARAMS_SIZE_GET = 4,I2O_PARAMS_TABLE_GET = 5,I2O_PARAMS_FIELD_SET = 6,I2O_PARAMS_LIST_SET = 7,I2O_PARAMS_ROW_ADD = 8,I2O_PARAMS_ROW_DELETE = 9,I2O_PARAMS_TABLE_CLEAR = 10,I2O_SNFORMAT_UNKNOWN = 0,I2O_SNFORMAT_BINARY = 1,I2O_SNFORMAT_ASCII = 2,I2O_SNFORMAT_UNICODE = 3,I2O_SNFORMAT_LAN48_MAC = 4,I2O_SNFORMAT_WAN = 5,I2O_SNFORMAT_LAN64_MAC = 6,I2O_SNFORMAT_DDM = 7,I2O_SNFORMAT_IEEE_REG64 = 8,I2O_SNFORMAT_IEEE_REG128 = 9,I2O_SNFORMAT_UNKNOWN2 = 255,};
enum MACRO_I8K {I8K_FAN_LEFT = 1,I8K_FAN_RIGHT = 0,I8K_FAN_OFF = 0,I8K_FAN_LOW = 1,I8K_FAN_HIGH = 2,I8K_FAN_MAX = 2,I8K_VOL_UP = 1,I8K_VOL_DOWN = 2,I8K_VOL_MUTE = 4,I8K_AC = 1,I8K_BATTERY = 0,};
enum MACRO_IAC {IAC = 255,};
enum MACRO_IAS {IAS_MAX_STRING = 256,IAS_MAX_OCTET_STRING = 1024,IAS_MAX_CLASSNAME = 60,IAS_MAX_ATTRIBNAME = 60,IAS_MAX_ATTRIBNUMBER = 256,IAS_EXPORT_CLASSNAME = 64,IAS_EXPORT_ATTRIBNAME = 256,IAS_MISSING = 0,IAS_INTEGER = 1,IAS_OCT_SEQ = 2,IAS_STRING = 3,};
enum MACRO_IFA {IFA_F_SECONDARY = 0x1,IFA_F_TEMPORARY = 0x1,IFA_F_NODAD = 0x2,IFA_F_OPTIMISTIC = 0x4,IFA_F_DADFAILED = 0x8,IFA_F_HOMEADDRESS = 0x10,IFA_F_DEPRECATED = 0x20,IFA_F_TENTATIVE = 0x40,IFA_F_PERMANENT = 0x80,};
enum MACRO_IFF {IFF_TUN = 0x1,IFF_TAP = 0x2,IFF_NO_PI = 0x1000,IFF_ONE_QUEUE = 0x2000,IFF_VNET_HDR = 0x4000,IFF_TUN_EXCL = 0x8000,IFF_MULTI_QUEUE = 0x100,IFF_ATTACH_QUEUE = 0x200,IFF_DETACH_QUEUE = 0x400,IFF_PERSIST = 0x800,};
enum MACRO_IIF {IIF_BGRACE = 1,IIF_IGRACE = 2,IIF_FLAGS = 4,IIF_ALL = 7,};
enum MACRO_IN6 {SIOCGETMIFCNT_IN6 = 35296,SIOCGETSGCNT_IN6 = 35297,};
enum MACRO_INR {INR_OPEN_CUR = 1024,INR_OPEN_MAX = 4096,};
enum MACRO_INT {INT_LEAST8_MIN = -128,INT_LEAST16_MIN = -32768,INT_LEAST32_MIN = -2147483648,INT_LEAST64_MIN = -9223372036854775808,INT_LEAST8_MAX = 127,INT_LEAST16_MAX = 32767,INT_LEAST32_MAX = 2147483647,INT_LEAST64_MAX = 9223372036854775807,};
enum MACRO_INV {CYSETRTSDTR_INV = 0x43590C,CYGETRTSDTR_INV = 0x43590D,};
enum MACRO_IOC {IOC_IN = 1073741824,IOC_OUT = 2147483648,IOC_INOUT = 3221225472,};
enum MACRO_IP6 {IP6_ALERT_MLD = 0x0,IP6_ALERT_RSVP = 0x100,IP6_ALERT_AN = 0x200,};
enum MACRO_IPC {IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,IPC_RMID = 0x0,IPC_SET = 0x1,IPC_STAT = 0x2,IPC_INFO = 0x3,IPC_PRIVATE = 0x0,};
enum MACRO_IPT {IPT_FUNCTION_MAXNAMELEN = 30,IPT_TABLE_MAXNAMELEN = 32,IPT_CONTINUE = -1,IPT_RETURN = -5,};
enum MACRO_IPX {IPX_TYPE = 1,IPX_NODE_LEN = 6,IPX_MTU = 576,IPX_DLTITF = 0,IPX_CRTITF = 1,IPX_FRAME_NONE = 0,IPX_FRAME_SNAP = 1,IPX_FRAME_8022 = 2,IPX_FRAME_ETHERII = 3,IPX_FRAME_8023 = 4,IPX_FRAME_TR_8022 = 5,IPX_SPECIAL_NONE = 0,IPX_PRIMARY = 1,IPX_INTERNAL = 2,IPX_ROUTE_NO_ROUTER = 0,IPX_RT_SNAP = 8,IPX_RT_8022 = 4,IPX_RT_BLUEBOOK = 2,IPX_RT_ROUTED = 1,};
enum MACRO_ISA {ISA_START_ADDRESS = 0xA0000,ISA_END_ADDRESS = 0x100000,};
enum MACRO_ISO {ISO_VD_PRIMARY = 1,ISO_VD_SUPPLEMENTARY = 2,ISO_VD_END = 255,};
enum MACRO_KEY {KEY_CODE_YES = 0x100,KEY_MIN = 0x101,KEY_BREAK = 0x101,KEY_SRESET = 0x158,KEY_RESET = 0x159,KEY_DOWN = 0x102,KEY_UP = 0x103,KEY_LEFT = 0x104,KEY_RIGHT = 0x105,KEY_HOME = 0x106,KEY_BACKSPACE = 0x107,KEY_F0 = 0x108,KEY_DL = 0x148,KEY_IL = 0x149,KEY_DC = 0x14A,KEY_IC = 0x14B,KEY_EIC = 0x14C,KEY_CLEAR = 0x14D,KEY_EOS = 0x14E,KEY_EOL = 0x14F,KEY_SF = 0x150,KEY_SR = 0x151,KEY_NPAGE = 0x152,KEY_PPAGE = 0x153,KEY_STAB = 0x154,KEY_CTAB = 0x155,KEY_CATAB = 0x156,KEY_ENTER = 0x157,KEY_PRINT = 0x15A,KEY_LL = 0x15B,KEY_A1 = 0x15C,KEY_A3 = 0x15D,KEY_B2 = 0x15E,KEY_C1 = 0x15F,KEY_C3 = 0x160,KEY_BTAB = 0x161,KEY_BEG = 0x162,KEY_CANCEL = 0x163,KEY_CLOSE = 0x164,KEY_COMMAND = 0x165,KEY_COPY = 0x166,KEY_CREATE = 0x167,KEY_END = 0x168,KEY_EXIT = 0x169,KEY_FIND = 0x16A,KEY_HELP = 0x16B,KEY_MARK = 0x16C,KEY_MESSAGE = 0x16D,KEY_MOVE = 0x16E,KEY_NEXT = 0x16F,KEY_OPEN = 0x170,KEY_OPTIONS = 0x171,KEY_PREVIOUS = 0x172,KEY_REDO = 0x173,KEY_REFERENCE = 0x174,KEY_REFRESH = 0x175,KEY_REPLACE = 0x176,KEY_RESTART = 0x177,KEY_RESUME = 0x178,KEY_SAVE = 0x179,KEY_SBEG = 0x17A,KEY_SCANCEL = 0x17B,KEY_SCOMMAND = 0x17C,KEY_SCOPY = 0x17D,KEY_SCREATE = 0x17E,KEY_SDC = 0x17F,KEY_SDL = 0x180,KEY_SELECT = 0x181,KEY_SEND = 0x182,KEY_SEOL = 0x183,KEY_SEXIT = 0x184,KEY_SFIND = 0x185,KEY_SHELP = 0x186,KEY_SHOME = 0x187,KEY_SIC = 0x188,KEY_SLEFT = 0x189,KEY_SMESSAGE = 0x18A,KEY_SMOVE = 0x18B,KEY_SNEXT = 0x18C,KEY_SOPTIONS = 0x18D,KEY_SPREVIOUS = 0x18E,KEY_SPRINT = 0x18F,KEY_SREDO = 0x190,KEY_SREPLACE = 0x191,KEY_SRIGHT = 0x192,KEY_SRSUME = 0x193,KEY_SSAVE = 0x194,KEY_SSUSPEND = 0x195,KEY_SUNDO = 0x196,KEY_SUSPEND = 0x197,KEY_UNDO = 0x198,KEY_MOUSE = 0x199,KEY_RESIZE = 0x19A,KEY_EVENT = 0x19B,KEY_MAX = 0x1FF,};
enum MACRO_KLM {KLM_PROG = 100020,KLM_VERS = 1,KLM_TEST = 1,KLM_LOCK = 2,KLM_CANCEL = 3,KLM_UNLOCK = 4,};
enum MACRO_KPF {KPF_LOCKED = 0,KPF_ERROR = 1,KPF_REFERENCED = 2,KPF_UPTODATE = 3,KPF_DIRTY = 4,KPF_LRU = 5,KPF_ACTIVE = 6,KPF_SLAB = 7,KPF_WRITEBACK = 8,KPF_RECLAIM = 9,KPF_BUDDY = 10,KPF_MMAP = 11,KPF_ANON = 12,KPF_SWAPCACHE = 13,KPF_SWAPBACKED = 14,KPF_COMPOUND_HEAD = 15,KPF_COMPOUND_TAIL = 16,KPF_HUGE = 17,KPF_UNEVICTABLE = 18,KPF_HWPOISON = 19,KPF_NOPAGE = 20,KPF_KSM = 21,KPF_THP = 22,};
enum MACRO_KVM {KVM_NR_INTERRUPTS = 256,KVM_IOAPIC_NUM_PINS = 24,KVM_IRQCHIP_PIC_MASTER = 0,KVM_IRQCHIP_PIC_SLAVE = 1,KVM_IRQCHIP_IOAPIC = 2,KVM_NR_IRQCHIPS = 3,KVM_APIC_REG_SIZE = 1024,KVM_CPUID_FLAG_SIGNIFCANT_INDEX = 1,KVM_CPUID_FLAG_STATEFUL_FUNC = 2,KVM_CPUID_FLAG_STATE_READ_NEXT = 4,KVM_GUESTDBG_USE_SW_BP = 65536,KVM_GUESTDBG_USE_HW_BP = 131072,KVM_GUESTDBG_INJECT_DB = 262144,KVM_GUESTDBG_INJECT_BP = 524288,KVM_PIT_FLAGS_HPET_LEGACY = 1,KVM_VCPUEVENT_VALID_NMI_PENDING = 1,KVM_VCPUEVENT_VALID_SIPI_VECTOR = 2,KVM_VCPUEVENT_VALID_SHADOW = 4,KVM_X86_SHADOW_INT_MOV_SS = 1,KVM_X86_SHADOW_INT_STI = 2,KVM_MAX_XCRS = 16,KVM_CPUID_SIGNATURE = 1073741824,KVM_CPUID_FEATURES = 1073741825,KVM_FEATURE_CLOCKSOURCE = 0,KVM_FEATURE_NOP_IO_DELAY = 1,KVM_FEATURE_MMU_OP = 2,KVM_FEATURE_CLOCKSOURCE2 = 3,KVM_FEATURE_ASYNC_PF = 4,KVM_FEATURE_STEAL_TIME = 5,KVM_FEATURE_PV_EOI = 6,KVM_FEATURE_CLOCKSOURCE_STABLE_BIT = 24,};
enum MACRO_LAV {LAV_CURRENT = 1,};
enum MACRO_LBX {LBX_MAJOR_VERSION = 1,LBX_MINOR_VERSION = 0,};
enum MACRO_LDT {LDT_ENTRIES = 8192,LDT_ENTRY_SIZE = 8,};
enum MACRO_LED {LED_SCR = 0x1,LED_NUM = 0x2,LED_CAP = 0x4,};
enum MACRO_LLC {LLC_FRAME = 0x40,};
enum MACRO_LMI {LMI_DEFAULT = 0,LMI_NONE = 1,LMI_ANSI = 2,LMI_CCITT = 3,LMI_CISCO = 4,};
enum MACRO_LNA {LNA_AUTO = -1,};
enum MACRO_LOG {LOG_SELECT = 0x4C,LOG_SENSE = 0x4D,};
enum MACRO_LPA {LPA_SLCT = 0x1F,LPA_10HALF = 0x20,LPA_1000XFULL = 0x20,LPA_10FULL = 0x40,LPA_1000XHALF = 0x40,LPA_100HALF = 0x80,LPA_1000XPAUSE = 0x80,LPA_100FULL = 0x100,LPA_1000XPAUSE_ASYM = 0x100,LPA_100BASE4 = 0x200,LPA_PAUSE_CAP = 0x400,LPA_PAUSE_ASYM = 0x800,LPA_RESV = 0x1000,LPA_RFAULT = 0x2000,LPA_LPACK = 0x4000,LPA_NPAGE = 0x8000,LPA_DUPLEX = 0x140,LPA_100 = 0x380,};
enum MACRO_MAP {MAP_SHARED = 0x1,MAP_PRIVATE = 0x2,MAP_TYPE = 0xF,MAP_FIXED = 0x10,MAP_FILE = 0x0,MAP_ANONYMOUS = 0x20,MAP_ANON = 0x20,MAP_32BIT = 0x40,MAP_GROWSDOWN = 0x100,MAP_DENYWRITE = 0x800,MAP_EXECUTABLE = 0x1000,MAP_LOCKED = 0x2000,MAP_NORESERVE = 0x4000,MAP_POPULATE = 0x8000,MAP_NONBLOCK = 0x10000,MAP_STACK = 0x20000,MAP_HUGETLB = 0x40000,};
enum MACRO_MAX {TMP_MAX = 238328,FILENAME_MAX = 4096,};
enum MACRO_MCL {MCL_CURRENT = 1,MCL_FUTURE = 2,};
enum MACRO_MDB {MDB_TEMPORARY = 0,MDB_PERMANENT = 1,};
enum MACRO_MFC {MFC_ASSERT_THRESH = 300,};
enum MACRO_MII {MII_BMCR = 0x0,MII_BMSR = 0x1,MII_PHYSID1 = 0x2,MII_PHYSID2 = 0x3,MII_ADVERTISE = 0x4,MII_LPA = 0x5,MII_EXPANSION = 0x6,MII_CTRL1000 = 0x9,MII_STAT1000 = 0xA,MII_MMD_CTRL = 0xD,MII_MMD_DATA = 0xE,MII_ESTATUS = 0xF,MII_DCOUNTER = 0x12,MII_FCSCOUNTER = 0x13,MII_NWAYTEST = 0x14,MII_RERRCOUNTER = 0x15,MII_SREVISION = 0x16,MII_RESV1 = 0x17,MII_LBRERROR = 0x18,MII_PHYADDR = 0x19,MII_RESV2 = 0x1A,MII_TPISTATUS = 0x1B,MII_NCONFIG = 0x1C,};
enum MACRO_MIN {INT8_MIN = -128,INT16_MIN = -32768,INT32_MIN = -2147483648,INT64_MIN = -9223372036854775808,};
enum MACRO_MLD {MLD_LISTENER_QUERY = 130,MLD_LISTENER_REPORT = 131,MLD_LISTENER_REDUCTION = 132,};
enum MACRO_MMC {MMC_IOC_MAX_BYTES = 131072,};
enum MACRO_MOD {MOD_OFFSET = 1,MOD_FREQUENCY = 2,MOD_MAXERROR = 4,MOD_ESTERROR = 8,MOD_STATUS = 16,MOD_TIMECONST = 32,MOD_CLKB = 16384,MOD_CLKA = 32769,MOD_TAI = 128,MOD_MICRO = 4096,MOD_NANO = 8192,};
enum MACRO_MPC {MPC_SOCKET_INGRESS = 1,MPC_SOCKET_EGRESS = 2,};
enum MACRO_MPS {MPS = 1,MPC = 2,};
enum MACRO_MRT {MRT_BASE = 200,MRT_INIT = 200,MRT_DONE = 201,MRT_ADD_VIF = 202,MRT_DEL_VIF = 203,MRT_ADD_MFC = 204,MRT_DEL_MFC = 205,MRT_VERSION = 206,MRT_ASSERT = 207,MRT_PIM = 208,MRT_TABLE = 209,MRT_ADD_MFC_PROXY = 210,MRT_DEL_MFC_PROXY = 211,MRT_MAX = 211,};
enum MACRO_MRW {MRW_LBA_DMA = 0,MRW_LBA_GAA = 1,MRW_MODE_PC_PRE1 = 44,MRW_MODE_PC = 3,};
enum MACRO_MSG {MSG_PARITY_ERROR = 0x9,};
enum MACRO_MSR {MSR_KVM_WALL_CLOCK = 0x11,MSR_KVM_SYSTEM_TIME = 0x12,};
enum MACRO_MTD {MTD_ABSENT = 0,MTD_RAM = 1,MTD_ROM = 2,MTD_NORFLASH = 3,MTD_NANDFLASH = 4,MTD_DATAFLASH = 6,MTD_UBIVOLUME = 7,MTD_MLCNANDFLASH = 8,MTD_WRITEABLE = 1024,MTD_BIT_WRITEABLE = 2048,MTD_NO_ERASE = 4096,MTD_POWERUP_LOCK = 8192,MTD_CAP_ROM = 0,MTD_CAP_RAM = 7168,MTD_CAP_NORFLASH = 3072,MTD_CAP_NANDFLASH = 1024,MTD_NANDECC_OFF = 0,MTD_NANDECC_PLACE = 1,MTD_NANDECC_AUTOPLACE = 2,MTD_NANDECC_PLACEONLY = 3,MTD_NANDECC_AUTOPL_USR = 4,MTD_OTP_OFF = 0,MTD_OTP_FACTORY = 1,MTD_OTP_USER = 2,};
enum MACRO_NAT {NAT_ARP_BIT = 0x10,};
enum MACRO_NBD {NBD_SET_SOCK = 0xAB00,NBD_SET_BLKSIZE = 0xAB01,NBD_SET_SIZE = 0xAB02,NBD_DO_IT = 0xAB03,NBD_CLEAR_SOCK = 0xAB04,NBD_CLEAR_QUE = 0xAB05,NBD_PRINT_DEBUG = 0xAB06,NBD_SET_SIZE_BLOCKS = 0xAB07,NBD_DISCONNECT = 0xAB08,NBD_SET_TIMEOUT = 0xAB09,NBD_SET_FLAGS = 0xAB0A,NBD_FLAG_HAS_FLAGS = 0x1,NBD_FLAG_READ_ONLY = 0x2,NBD_FLAG_SEND_FLUSH = 0x4,NBD_FLAG_SEND_TRIM = 0x20,NBD_REQUEST_MAGIC = 0x25609513,NBD_REPLY_MAGIC = 0x67446698,};
enum MACRO_NCC {NCC = 8,};
enum MACRO_NCP {NCP_PTYPE = 0x11,NCP_PORT = 0x451,NCP_ALLOC_SLOT_REQUEST = 0x1111,NCP_REQUEST = 0x2222,NCP_DEALLOC_SLOT_REQUEST = 0x5555,NCP_REPLY = 0x3333,NCP_WATCHDOG = 0x3E3E,NCP_POSITIVE_ACK = 0x9999,NCP_VOLNAME_LEN = 0x10,NCP_NUMBER_OF_VOLUMES = 0x100,NCP_FILE_ID_LEN = 0x6,};
enum MACRO_NET {NET_REMOVE_IF = 28469,};
enum MACRO_NEW {NEW_ENV_VAR = 0,NEW_ENV_VALUE = 1,};
enum MACRO_NFA {NFA_ALIGNTO = 4,};
enum MACRO_NFC {NFC_UNKNOWN = 0x4000,NFC_ALTERED = 0x8000,};
enum MACRO_NFQ {NFQ_FLAG_BYPASS = 0x1,NFQ_FLAG_CPU_FANOUT = 0x2,NFQ_FLAG_MASK = 0x3,};
enum MACRO_NFS {NFS_PROGRAM = 100003,NFS_PORT = 2049,NFS_MAXDATA = 8192,NFS_MAXPATHLEN = 1024,NFS_MAXNAMLEN = 255,NFS_MAXGROUPS = 16,NFS_FHSIZE = 32,NFS_COOKIESIZE = 4,NFS_FIFO_DEV = -1,};
enum MACRO_NHM {NHM_C3_AUTO_DEMOTE = 33554432,NHM_C1_AUTO_DEMOTE = 67108864,};
enum MACRO_NIS {NIS_MAXSTRINGLEN = 255,NIS_MAXNAMELEN = 1024,NIS_MAXATTRNAME = 32,NIS_MAXATTRVAL = 2048,NIS_MAXCOLUMNS = 64,NIS_MAXATTR = 16,NIS_MAXPATH = 1024,NIS_MAXREPLICAS = 128,NIS_MAXLINKS = 16,NIS_PK_NONE = 0,NIS_PK_DH = 1,NIS_PK_RSA = 2,NIS_PK_KERB = 3,NIS_PK_DHEXT = 4,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x100,CRDLY = 0x600,};
enum MACRO_NL2 {NL2 = 0x200,};
enum MACRO_NL3 {NL3 = 0x300,TBDELAY = 0xC00,CRDELAY = 0x3000,VTDELAY = 0x4000,BSDELAY = 0x8000,CRTBS = 0x10000,PRTERA = 0x20000,CRTERA = 0x40000,TILDE = 0x80000,MDMBUF = 0x100000,LITOUT = 0x200000,NOHANG = 0x1000000,L001000 = 0x2000000,CRTKIL = 0x4000000,PASS8 = 0x8000000,CTLECH = 0x10000000,DECCTQ = 0x40000000,};
enum MACRO_NLA {NLA_F_NESTED = 32768,NLA_F_NET_BYTEORDER = 16384,NLA_TYPE_MASK = -49153,NLA_ALIGNTO = 4,};
enum MACRO_NLM {NLM_PROG = 100021,NLM_VERS = 1,NLM_TEST = 1,NLM_LOCK = 2,NLM_CANCEL = 3,NLM_UNLOCK = 4,NLM_GRANTED = 5,NLM_TEST_MSG = 6,NLM_LOCK_MSG = 7,NLM_CANCEL_MSG = 8,NLM_UNLOCK_MSG = 9,NLM_GRANTED_MSG = 10,NLM_TEST_RES = 11,NLM_LOCK_RES = 12,NLM_CANCEL_RES = 13,NLM_UNLOCK_RES = 14,NLM_GRANTED_RES = 15,NLM_VERSX = 3,NLM_SHARE = 20,NLM_UNSHARE = 21,NLM_NM_LOCK = 22,NLM_FREE_ALL = 23,};
enum MACRO_NON {NON_MPOA = 0,};
enum MACRO_NOP {NOP = 0x8,SE = 0xF0,};
enum MACRO_NOT {NOT_HERE = 1,};
enum MACRO_NSS {NSS_BUFLEN_GROUP = 1024,};
enum MACRO_NTF {NTF_USE = 0x1,NTF_PROXY = 0x8,NTF_ROUTER = 0x80,NTF_SELF = 0x2,NTF_MASTER = 0x4,};
enum MACRO_NTP {NTP_API = 4,};
enum MACRO_NUD {NUD_INCOMPLETE = 0x1,NUD_REACHABLE = 0x2,NUD_STALE = 0x4,NUD_DELAY = 0x8,NUD_PROBE = 0x10,NUD_FAILED = 0x20,NUD_NOARP = 0x40,NUD_PERMANENT = 0x80,NUD_NONE = 0x0,};
enum MACRO_ODK {ODK_NULL = 0,ODK_REGINFO = 1,ODK_EXCEPTIONS = 2,ODK_PAD = 3,ODK_HWPATCH = 4,ODK_FILL = 5,ODK_TAGS = 6,ODK_HWAND = 7,ODK_HWOR = 8,};
enum MACRO_OEX {OEX_FPU_MIN = 0x1F,OEX_FPU_MAX = 0x1F00,OEX_PAGE0 = 0x10000,OEX_SMM = 0x20000,OEX_FPDBUG = 0x40000,OEX_PRECISEFP = 0x40000,OEX_DISMISS = 0x80000,OEX_FPU_INVAL = 0x10,OEX_FPU_DIV0 = 0x8,OEX_FPU_OFLO = 0x4,OEX_FPU_UFLO = 0x2,OEX_FPU_INEX = 0x1,};
enum MACRO_OHW {OHW_R4KEOP = 0x1,OHW_R8KPFETCH = 0x2,OHW_R5KEOP = 0x4,OHW_R5KCVTL = 0x8,};
enum MACRO_OLD {OLD_ENV_VAR = 1,OLD_ENV_VALUE = 0,};
enum MACRO_OOM {OOM_SCORE_ADJ_MIN = -1000,OOM_SCORE_ADJ_MAX = 1000,OOM_DISABLE = -17,OOM_ADJUST_MIN = -16,OOM_ADJUST_MAX = 15,};
enum MACRO_OSD {OSD_CAP_MEMSIZE = 1,};
enum MACRO_OVS {OVS_DATAPATH_VERSION = 0x1,};
enum MACRO_PCI {PCI_STD_HEADER_SIZEOF = 64,PCI_VENDOR_ID = 0,PCI_DEVICE_ID = 2,PCI_COMMAND = 4,PCI_COMMAND_IO = 1,PCI_COMMAND_MEMORY = 2,PCI_COMMAND_MASTER = 4,PCI_COMMAND_SPECIAL = 8,PCI_COMMAND_INVALIDATE = 16,PCI_COMMAND_VGA_PALETTE = 32,PCI_COMMAND_PARITY = 64,PCI_COMMAND_WAIT = 128,PCI_COMMAND_SERR = 256,PCI_COMMAND_FAST_BACK = 512,PCI_COMMAND_INTX_DISABLE = 1024,PCI_STATUS = 6,PCI_STATUS_INTERRUPT = 8,PCI_STATUS_CAP_LIST = 16,PCI_STATUS_66MHZ = 32,PCI_STATUS_UDF = 64,PCI_STATUS_FAST_BACK = 128,PCI_STATUS_PARITY = 256,PCI_STATUS_DEVSEL_MASK = 1536,PCI_STATUS_DEVSEL_FAST = 0,PCI_STATUS_DEVSEL_MEDIUM = 512,PCI_STATUS_DEVSEL_SLOW = 1024,PCI_STATUS_SIG_TARGET_ABORT = 2048,PCI_STATUS_REC_TARGET_ABORT = 4096,PCI_STATUS_REC_MASTER_ABORT = 8192,PCI_STATUS_SIG_SYSTEM_ERROR = 16384,PCI_STATUS_DETECTED_PARITY = 32768,PCI_CLASS_REVISION = 8,PCI_REVISION_ID = 8,PCI_CLASS_PROG = 9,PCI_CLASS_DEVICE = 10,PCI_CACHE_LINE_SIZE = 12,PCI_LATENCY_TIMER = 13,PCI_HEADER_TYPE = 14,PCI_HEADER_TYPE_NORMAL = 0,PCI_HEADER_TYPE_BRIDGE = 1,PCI_HEADER_TYPE_CARDBUS = 2,PCI_BIST = 15,PCI_BIST_CODE_MASK = 15,PCI_BIST_START = 64,PCI_BIST_CAPABLE = 128,PCI_BASE_ADDRESS_0 = 16,PCI_BASE_ADDRESS_1 = 20,PCI_BASE_ADDRESS_2 = 24,PCI_BASE_ADDRESS_3 = 28,PCI_BASE_ADDRESS_4 = 32,PCI_BASE_ADDRESS_5 = 36,PCI_BASE_ADDRESS_SPACE = 1,PCI_BASE_ADDRESS_SPACE_IO = 1,PCI_BASE_ADDRESS_SPACE_MEMORY = 0,PCI_BASE_ADDRESS_MEM_TYPE_MASK = 6,PCI_BASE_ADDRESS_MEM_TYPE_32 = 0,PCI_BASE_ADDRESS_MEM_TYPE_1M = 2,PCI_BASE_ADDRESS_MEM_TYPE_64 = 4,PCI_BASE_ADDRESS_MEM_PREFETCH = 8,PCI_BASE_ADDRESS_MEM_MASK = -16,PCI_BASE_ADDRESS_IO_MASK = -4,PCI_CARDBUS_CIS = 40,PCI_SUBSYSTEM_VENDOR_ID = 44,PCI_SUBSYSTEM_ID = 46,PCI_ROM_ADDRESS = 48,PCI_ROM_ADDRESS_ENABLE = 1,PCI_ROM_ADDRESS_MASK = -2048,PCI_CAPABILITY_LIST = 52,PCI_INTERRUPT_LINE = 60,PCI_INTERRUPT_PIN = 61,PCI_MIN_GNT = 62,PCI_MAX_LAT = 63,PCI_PRIMARY_BUS = 24,PCI_SECONDARY_BUS = 25,PCI_SUBORDINATE_BUS = 26,PCI_SEC_LATENCY_TIMER = 27,PCI_IO_BASE = 28,PCI_IO_LIMIT = 29,PCI_IO_RANGE_TYPE_MASK = 15,PCI_IO_RANGE_TYPE_16 = 0,PCI_IO_RANGE_TYPE_32 = 1,PCI_IO_RANGE_MASK = -16,PCI_IO_1K_RANGE_MASK = -4,PCI_SEC_STATUS = 30,PCI_MEMORY_BASE = 32,PCI_MEMORY_LIMIT = 34,PCI_MEMORY_RANGE_TYPE_MASK = 15,PCI_MEMORY_RANGE_MASK = -16,PCI_PREF_MEMORY_BASE = 36,PCI_PREF_MEMORY_LIMIT = 38,PCI_PREF_RANGE_TYPE_MASK = 15,PCI_PREF_RANGE_TYPE_32 = 0,PCI_PREF_RANGE_TYPE_64 = 1,PCI_PREF_RANGE_MASK = -16,PCI_PREF_BASE_UPPER32 = 40,PCI_PREF_LIMIT_UPPER32 = 44,PCI_IO_BASE_UPPER16 = 48,PCI_IO_LIMIT_UPPER16 = 50,PCI_ROM_ADDRESS1 = 56,PCI_BRIDGE_CONTROL = 62,PCI_BRIDGE_CTL_PARITY = 1,PCI_BRIDGE_CTL_SERR = 2,PCI_BRIDGE_CTL_ISA = 4,PCI_BRIDGE_CTL_VGA = 8,PCI_BRIDGE_CTL_MASTER_ABORT = 32,PCI_BRIDGE_CTL_BUS_RESET = 64,PCI_BRIDGE_CTL_FAST_BACK = 128,PCI_CB_CAPABILITY_LIST = 20,PCI_CB_SEC_STATUS = 22,PCI_CB_PRIMARY_BUS = 24,PCI_CB_CARD_BUS = 25,PCI_CB_SUBORDINATE_BUS = 26,PCI_CB_LATENCY_TIMER = 27,PCI_CB_MEMORY_BASE_0 = 28,PCI_CB_MEMORY_LIMIT_0 = 32,PCI_CB_MEMORY_BASE_1 = 36,PCI_CB_MEMORY_LIMIT_1 = 40,PCI_CB_IO_BASE_0 = 44,PCI_CB_IO_BASE_0_HI = 46,PCI_CB_IO_LIMIT_0 = 48,PCI_CB_IO_LIMIT_0_HI = 50,PCI_CB_IO_BASE_1 = 52,PCI_CB_IO_BASE_1_HI = 54,PCI_CB_IO_LIMIT_1 = 56,PCI_CB_IO_LIMIT_1_HI = 58,PCI_CB_IO_RANGE_MASK = -4,PCI_CB_BRIDGE_CONTROL = 62,PCI_CB_BRIDGE_CTL_PARITY = 1,PCI_CB_BRIDGE_CTL_SERR = 2,PCI_CB_BRIDGE_CTL_ISA = 4,PCI_CB_BRIDGE_CTL_VGA = 8,PCI_CB_BRIDGE_CTL_MASTER_ABORT = 32,PCI_CB_BRIDGE_CTL_CB_RESET = 64,PCI_CB_BRIDGE_CTL_16BIT_INT = 128,PCI_CB_BRIDGE_CTL_PREFETCH_MEM0 = 256,PCI_CB_BRIDGE_CTL_PREFETCH_MEM1 = 512,PCI_CB_BRIDGE_CTL_POST_WRITES = 1024,PCI_CB_SUBSYSTEM_VENDOR_ID = 64,PCI_CB_SUBSYSTEM_ID = 66,PCI_CB_LEGACY_MODE_BASE = 68,PCI_CAP_LIST_ID = 0,PCI_CAP_ID_PM = 1,PCI_CAP_ID_AGP = 2,PCI_CAP_ID_VPD = 3,PCI_CAP_ID_SLOTID = 4,PCI_CAP_ID_MSI = 5,PCI_CAP_ID_CHSWP = 6,PCI_CAP_ID_PCIX = 7,PCI_CAP_ID_HT = 8,PCI_CAP_ID_VNDR = 9,PCI_CAP_ID_DBG = 10,PCI_CAP_ID_CCRC = 11,PCI_CAP_ID_SHPC = 12,PCI_CAP_ID_SSVID = 13,PCI_CAP_ID_AGP3 = 14,PCI_CAP_ID_SECDEV = 15,PCI_CAP_ID_EXP = 16,PCI_CAP_ID_MSIX = 17,PCI_CAP_ID_SATA = 18,PCI_CAP_ID_AF = 19,PCI_CAP_ID_MAX = 19,PCI_CAP_LIST_NEXT = 1,PCI_CAP_FLAGS = 2,PCI_CAP_SIZEOF = 4,PCI_PM_PMC = 2,PCI_PM_CAP_VER_MASK = 7,PCI_PM_CAP_PME_CLOCK = 8,PCI_PM_CAP_RESERVED = 16,PCI_PM_CAP_DSI = 32,PCI_PM_CAP_AUX_POWER = 448,PCI_PM_CAP_D1 = 512,PCI_PM_CAP_D2 = 1024,PCI_PM_CAP_PME = 2048,PCI_PM_CAP_PME_MASK = 63488,PCI_PM_CAP_PME_D0 = 2048,PCI_PM_CAP_PME_D1 = 4096,PCI_PM_CAP_PME_D2 = 8192,PCI_PM_CAP_PME_D3 = 16384,PCI_PM_CAP_PME_D3cold = 32768,PCI_PM_CAP_PME_SHIFT = 11,PCI_PM_CTRL = 4,PCI_PM_CTRL_STATE_MASK = 3,PCI_PM_CTRL_NO_SOFT_RESET = 8,PCI_PM_CTRL_PME_ENABLE = 256,PCI_PM_CTRL_DATA_SEL_MASK = 7680,PCI_PM_CTRL_DATA_SCALE_MASK = 24576,PCI_PM_CTRL_PME_STATUS = 32768,PCI_PM_PPB_EXTENSIONS = 6,PCI_PM_PPB_B2_B3 = 64,PCI_PM_BPCC_ENABLE = 128,PCI_PM_DATA_REGISTER = 7,PCI_PM_SIZEOF = 8,PCI_AGP_VERSION = 2,PCI_AGP_RFU = 3,PCI_AGP_STATUS = 4,PCI_AGP_STATUS_RQ_MASK = -16777216,PCI_AGP_STATUS_SBA = 512,PCI_AGP_STATUS_64BIT = 32,PCI_AGP_STATUS_FW = 16,PCI_AGP_STATUS_RATE4 = 4,PCI_AGP_STATUS_RATE2 = 2,PCI_AGP_STATUS_RATE1 = 1,PCI_AGP_COMMAND = 8,PCI_AGP_COMMAND_RQ_MASK = -16777216,PCI_AGP_COMMAND_SBA = 512,PCI_AGP_COMMAND_AGP = 256,PCI_AGP_COMMAND_64BIT = 32,PCI_AGP_COMMAND_FW = 16,PCI_AGP_COMMAND_RATE4 = 4,PCI_AGP_COMMAND_RATE2 = 2,PCI_AGP_COMMAND_RATE1 = 1,PCI_AGP_SIZEOF = 12,PCI_VPD_ADDR = 2,PCI_VPD_ADDR_MASK = 32767,PCI_VPD_ADDR_F = 32768,PCI_VPD_DATA = 4,PCI_CAP_VPD_SIZEOF = 8,PCI_SID_ESR = 2,PCI_SID_ESR_NSLOTS = 31,PCI_SID_ESR_FIC = 32,PCI_SID_CHASSIS_NR = 3,PCI_MSI_FLAGS = 2,PCI_MSI_FLAGS_ENABLE = 1,PCI_MSI_FLAGS_QMASK = 14,PCI_MSI_FLAGS_QSIZE = 112,PCI_MSI_FLAGS_64BIT = 128,PCI_MSI_FLAGS_MASKBIT = 256,PCI_MSI_RFU = 3,PCI_MSI_ADDRESS_LO = 4,PCI_MSI_ADDRESS_HI = 8,PCI_MSI_DATA_32 = 8,PCI_MSI_MASK_32 = 12,PCI_MSI_PENDING_32 = 16,PCI_MSI_DATA_64 = 12,PCI_MSI_MASK_64 = 16,PCI_MSI_PENDING_64 = 20,PCI_MSIX_FLAGS = 2,PCI_MSIX_FLAGS_QSIZE = 2047,PCI_MSIX_FLAGS_MASKALL = 16384,PCI_MSIX_FLAGS_ENABLE = 32768,PCI_MSIX_TABLE = 4,PCI_MSIX_TABLE_BIR = 7,PCI_MSIX_TABLE_OFFSET = -8,PCI_MSIX_PBA = 8,PCI_MSIX_PBA_BIR = 7,PCI_MSIX_PBA_OFFSET = -8,PCI_MSIX_FLAGS_BIRMASK = 7,PCI_CAP_MSIX_SIZEOF = 12,PCI_MSIX_ENTRY_SIZE = 16,PCI_MSIX_ENTRY_LOWER_ADDR = 0,PCI_MSIX_ENTRY_UPPER_ADDR = 4,PCI_MSIX_ENTRY_DATA = 8,PCI_MSIX_ENTRY_VECTOR_CTRL = 12,PCI_MSIX_ENTRY_CTRL_MASKBIT = 1,PCI_CHSWP_CSR = 2,PCI_CHSWP_DHA = 1,PCI_CHSWP_EIM = 2,PCI_CHSWP_PIE = 4,PCI_CHSWP_LOO = 8,PCI_CHSWP_PI = 48,PCI_CHSWP_EXT = 64,PCI_CHSWP_INS = 128,PCI_AF_LENGTH = 2,PCI_AF_CAP = 3,PCI_AF_CAP_TP = 1,PCI_AF_CAP_FLR = 2,PCI_AF_CTRL = 4,PCI_AF_CTRL_FLR = 1,PCI_AF_STATUS = 5,PCI_AF_STATUS_TP = 1,PCI_CAP_AF_SIZEOF = 6,PCI_X_CMD = 2,PCI_X_CMD_DPERR_E = 1,PCI_X_CMD_ERO = 2,PCI_X_CMD_READ_512 = 0,PCI_X_CMD_READ_1K = 4,PCI_X_CMD_READ_2K = 8,PCI_X_CMD_READ_4K = 12,PCI_X_CMD_MAX_READ = 12,PCI_X_CMD_SPLIT_1 = 0,PCI_X_CMD_SPLIT_2 = 16,PCI_X_CMD_SPLIT_3 = 32,PCI_X_CMD_SPLIT_4 = 48,PCI_X_CMD_SPLIT_8 = 64,PCI_X_CMD_SPLIT_12 = 80,PCI_X_CMD_SPLIT_16 = 96,PCI_X_CMD_SPLIT_32 = 112,PCI_X_CMD_MAX_SPLIT = 112,PCI_X_STATUS = 4,PCI_X_STATUS_DEVFN = 255,PCI_X_STATUS_BUS = 65280,PCI_X_STATUS_64BIT = 65536,PCI_X_STATUS_133MHZ = 131072,PCI_X_STATUS_SPL_DISC = 262144,PCI_X_STATUS_UNX_SPL = 524288,PCI_X_STATUS_COMPLEX = 1048576,PCI_X_STATUS_MAX_READ = 6291456,PCI_X_STATUS_MAX_SPLIT = 58720256,PCI_X_STATUS_MAX_CUM = 469762048,PCI_X_STATUS_SPL_ERR = 536870912,PCI_X_STATUS_266MHZ = 1073741824,PCI_X_STATUS_533MHZ = -2147483648,PCI_X_ECC_CSR = 8,PCI_CAP_PCIX_SIZEOF_V0 = 8,PCI_CAP_PCIX_SIZEOF_V1 = 24,PCI_CAP_PCIX_SIZEOF_V2 = 24,PCI_X_BRIDGE_SSTATUS = 2,PCI_X_SSTATUS_64BIT = 1,PCI_X_SSTATUS_133MHZ = 2,PCI_X_SSTATUS_FREQ = 960,PCI_X_SSTATUS_VERS = 12288,PCI_X_SSTATUS_V1 = 4096,PCI_X_SSTATUS_V2 = 8192,PCI_X_SSTATUS_266MHZ = 16384,PCI_X_SSTATUS_533MHZ = 32768,PCI_X_BRIDGE_STATUS = 4,PCI_SSVID_VENDOR_ID = 4,PCI_SSVID_DEVICE_ID = 6,PCI_EXP_FLAGS = 2,PCI_EXP_FLAGS_VERS = 15,PCI_EXP_FLAGS_TYPE = 240,PCI_EXP_TYPE_ENDPOINT = 0,PCI_EXP_TYPE_LEG_END = 1,PCI_EXP_TYPE_ROOT_PORT = 4,PCI_EXP_TYPE_UPSTREAM = 5,PCI_EXP_TYPE_DOWNSTREAM = 6,PCI_EXP_TYPE_PCI_BRIDGE = 7,PCI_EXP_TYPE_PCIE_BRIDGE = 8,PCI_EXP_TYPE_RC_END = 9,PCI_EXP_TYPE_RC_EC = 10,PCI_EXP_FLAGS_SLOT = 256,PCI_EXP_FLAGS_IRQ = 15872,PCI_EXP_DEVCAP = 4,PCI_EXP_DEVCAP_PAYLOAD = 7,PCI_EXP_DEVCAP_PHANTOM = 24,PCI_EXP_DEVCAP_EXT_TAG = 32,PCI_EXP_DEVCAP_L0S = 448,PCI_EXP_DEVCAP_L1 = 3584,PCI_EXP_DEVCAP_ATN_BUT = 4096,PCI_EXP_DEVCAP_ATN_IND = 8192,PCI_EXP_DEVCAP_PWR_IND = 16384,PCI_EXP_DEVCAP_RBER = 32768,PCI_EXP_DEVCAP_PWR_VAL = 66846720,PCI_EXP_DEVCAP_PWR_SCL = 201326592,PCI_EXP_DEVCAP_FLR = 268435456,PCI_EXP_DEVCTL = 8,PCI_EXP_DEVCTL_CERE = 1,PCI_EXP_DEVCTL_NFERE = 2,PCI_EXP_DEVCTL_FERE = 4,PCI_EXP_DEVCTL_URRE = 8,PCI_EXP_DEVCTL_RELAX_EN = 16,PCI_EXP_DEVCTL_PAYLOAD = 224,PCI_EXP_DEVCTL_EXT_TAG = 256,PCI_EXP_DEVCTL_PHANTOM = 512,PCI_EXP_DEVCTL_AUX_PME = 1024,PCI_EXP_DEVCTL_NOSNOOP_EN = 2048,PCI_EXP_DEVCTL_READRQ = 28672,PCI_EXP_DEVCTL_BCR_FLR = 32768,PCI_EXP_DEVSTA = 10,PCI_EXP_DEVSTA_CED = 1,PCI_EXP_DEVSTA_NFED = 2,PCI_EXP_DEVSTA_FED = 4,PCI_EXP_DEVSTA_URD = 8,PCI_EXP_DEVSTA_AUXPD = 16,PCI_EXP_DEVSTA_TRPND = 32,PCI_EXP_LNKCAP = 12,PCI_EXP_LNKCAP_SLS = 15,PCI_EXP_LNKCAP_SLS_2_5GB = 1,PCI_EXP_LNKCAP_SLS_5_0GB = 2,PCI_EXP_LNKCAP_MLW = 1008,PCI_EXP_LNKCAP_ASPMS = 3072,PCI_EXP_LNKCAP_L0SEL = 28672,PCI_EXP_LNKCAP_L1EL = 229376,PCI_EXP_LNKCAP_CLKPM = 262144,PCI_EXP_LNKCAP_SDERC = 524288,PCI_EXP_LNKCAP_DLLLARC = 1048576,PCI_EXP_LNKCAP_LBNC = 2097152,PCI_EXP_LNKCAP_PN = -16777216,PCI_EXP_LNKCTL = 16,PCI_EXP_LNKCTL_ASPMC = 3,PCI_EXP_LNKCTL_ASPM_L0S = 1,PCI_EXP_LNKCTL_ASPM_L1 = 2,PCI_EXP_LNKCTL_RCB = 8,PCI_EXP_LNKCTL_LD = 16,PCI_EXP_LNKCTL_RL = 32,PCI_EXP_LNKCTL_CCC = 64,PCI_EXP_LNKCTL_ES = 128,PCI_EXP_LNKCTL_CLKREQ_EN = 256,PCI_EXP_LNKCTL_HAWD = 512,PCI_EXP_LNKCTL_LBMIE = 1024,PCI_EXP_LNKCTL_LABIE = 2048,PCI_EXP_LNKSTA = 18,PCI_EXP_LNKSTA_CLS = 15,PCI_EXP_LNKSTA_CLS_2_5GB = 1,PCI_EXP_LNKSTA_CLS_5_0GB = 2,PCI_EXP_LNKSTA_NLW = 1008,PCI_EXP_LNKSTA_NLW_SHIFT = 4,PCI_EXP_LNKSTA_LT = 2048,PCI_EXP_LNKSTA_SLC = 4096,PCI_EXP_LNKSTA_DLLLA = 8192,PCI_EXP_LNKSTA_LBMS = 16384,PCI_EXP_LNKSTA_LABS = 32768,PCI_CAP_EXP_ENDPOINT_SIZEOF_V1 = 20,PCI_EXP_SLTCAP = 20,PCI_EXP_SLTCAP_ABP = 1,PCI_EXP_SLTCAP_PCP = 2,PCI_EXP_SLTCAP_MRLSP = 4,PCI_EXP_SLTCAP_AIP = 8,PCI_EXP_SLTCAP_PIP = 16,PCI_EXP_SLTCAP_HPS = 32,PCI_EXP_SLTCAP_HPC = 64,PCI_EXP_SLTCAP_SPLV = 32640,PCI_EXP_SLTCAP_SPLS = 98304,PCI_EXP_SLTCAP_EIP = 131072,PCI_EXP_SLTCAP_NCCS = 262144,PCI_EXP_SLTCAP_PSN = -524288,PCI_EXP_SLTCTL = 24,PCI_EXP_SLTCTL_ABPE = 1,PCI_EXP_SLTCTL_PFDE = 2,PCI_EXP_SLTCTL_MRLSCE = 4,PCI_EXP_SLTCTL_PDCE = 8,PCI_EXP_SLTCTL_CCIE = 16,PCI_EXP_SLTCTL_HPIE = 32,PCI_EXP_SLTCTL_AIC = 192,PCI_EXP_SLTCTL_PIC = 768,PCI_EXP_SLTCTL_PCC = 1024,PCI_EXP_SLTCTL_EIC = 2048,PCI_EXP_SLTCTL_DLLSCE = 4096,PCI_EXP_SLTSTA = 26,PCI_EXP_SLTSTA_ABP = 1,PCI_EXP_SLTSTA_PFD = 2,PCI_EXP_SLTSTA_MRLSC = 4,PCI_EXP_SLTSTA_PDC = 8,PCI_EXP_SLTSTA_CC = 16,PCI_EXP_SLTSTA_MRLSS = 32,PCI_EXP_SLTSTA_PDS = 64,PCI_EXP_SLTSTA_EIS = 128,PCI_EXP_SLTSTA_DLLSC = 256,PCI_EXP_RTCTL = 28,PCI_EXP_RTCTL_SECEE = 1,PCI_EXP_RTCTL_SENFEE = 2,PCI_EXP_RTCTL_SEFEE = 4,PCI_EXP_RTCTL_PMEIE = 8,PCI_EXP_RTCTL_CRSSVE = 16,PCI_EXP_RTCAP = 30,PCI_EXP_RTSTA = 32,PCI_EXP_RTSTA_PME = 65536,PCI_EXP_RTSTA_PENDING = 131072,PCI_EXP_DEVCAP2 = 36,PCI_EXP_DEVCAP2_ARI = 32,PCI_EXP_DEVCAP2_LTR = 2048,PCI_EXP_OBFF_MASK = 786432,PCI_EXP_OBFF_MSG = 262144,PCI_EXP_OBFF_WAKE = 524288,PCI_EXP_DEVCTL2 = 40,PCI_EXP_DEVCTL2_ARI = 32,PCI_EXP_IDO_REQ_EN = 256,PCI_EXP_IDO_CMP_EN = 512,PCI_EXP_LTR_EN = 1024,PCI_EXP_OBFF_MSGA_EN = 8192,PCI_EXP_OBFF_MSGB_EN = 16384,PCI_EXP_OBFF_WAKE_EN = 24576,PCI_CAP_EXP_ENDPOINT_SIZEOF_V2 = 44,PCI_EXP_LNKCAP2 = 44,PCI_EXP_LNKCAP2_SLS_2_5GB = 2,PCI_EXP_LNKCAP2_SLS_5_0GB = 4,PCI_EXP_LNKCAP2_SLS_8_0GB = 8,PCI_EXP_LNKCAP2_CROSSLINK = 256,PCI_EXP_LNKCTL2 = 48,PCI_EXP_LNKSTA2 = 50,PCI_EXP_SLTCTL2 = 56,PCI_EXT_CAP_ID_ERR = 1,PCI_EXT_CAP_ID_VC = 2,PCI_EXT_CAP_ID_DSN = 3,PCI_EXT_CAP_ID_PWR = 4,PCI_EXT_CAP_ID_RCLD = 5,PCI_EXT_CAP_ID_RCILC = 6,PCI_EXT_CAP_ID_RCEC = 7,PCI_EXT_CAP_ID_MFVC = 8,PCI_EXT_CAP_ID_VC9 = 9,PCI_EXT_CAP_ID_RCRB = 10,PCI_EXT_CAP_ID_VNDR = 11,PCI_EXT_CAP_ID_CAC = 12,PCI_EXT_CAP_ID_ACS = 13,PCI_EXT_CAP_ID_ARI = 14,PCI_EXT_CAP_ID_ATS = 15,PCI_EXT_CAP_ID_SRIOV = 16,PCI_EXT_CAP_ID_MRIOV = 17,PCI_EXT_CAP_ID_MCAST = 18,PCI_EXT_CAP_ID_PRI = 19,PCI_EXT_CAP_ID_AMD_XXX = 20,PCI_EXT_CAP_ID_REBAR = 21,PCI_EXT_CAP_ID_DPA = 22,PCI_EXT_CAP_ID_TPH = 23,PCI_EXT_CAP_ID_LTR = 24,PCI_EXT_CAP_ID_SECPCI = 25,PCI_EXT_CAP_ID_PMUX = 26,PCI_EXT_CAP_ID_PASID = 27,PCI_EXT_CAP_ID_MAX = 27,PCI_EXT_CAP_DSN_SIZEOF = 12,PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF = 40,PCI_ERR_UNCOR_STATUS = 4,PCI_ERR_UNC_TRAIN = 1,PCI_ERR_UNC_DLP = 16,PCI_ERR_UNC_SURPDN = 32,PCI_ERR_UNC_POISON_TLP = 4096,PCI_ERR_UNC_FCP = 8192,PCI_ERR_UNC_COMP_TIME = 16384,PCI_ERR_UNC_COMP_ABORT = 32768,PCI_ERR_UNC_UNX_COMP = 65536,PCI_ERR_UNC_RX_OVER = 131072,PCI_ERR_UNC_MALF_TLP = 262144,PCI_ERR_UNC_ECRC = 524288,PCI_ERR_UNC_UNSUP = 1048576,PCI_ERR_UNC_ACSV = 2097152,PCI_ERR_UNC_INTN = 4194304,PCI_ERR_UNC_MCBTLP = 8388608,PCI_ERR_UNC_ATOMEG = 16777216,PCI_ERR_UNC_TLPPRE = 33554432,PCI_ERR_UNCOR_MASK = 8,PCI_ERR_UNCOR_SEVER = 12,PCI_ERR_COR_STATUS = 16,PCI_ERR_COR_RCVR = 1,PCI_ERR_COR_BAD_TLP = 64,PCI_ERR_COR_BAD_DLLP = 128,PCI_ERR_COR_REP_ROLL = 256,PCI_ERR_COR_REP_TIMER = 4096,PCI_ERR_COR_ADV_NFAT = 8192,PCI_ERR_COR_INTERNAL = 16384,PCI_ERR_COR_LOG_OVER = 32768,PCI_ERR_COR_MASK = 20,PCI_ERR_CAP = 24,PCI_ERR_CAP_ECRC_GENC = 32,PCI_ERR_CAP_ECRC_GENE = 64,PCI_ERR_CAP_ECRC_CHKC = 128,PCI_ERR_CAP_ECRC_CHKE = 256,PCI_ERR_HEADER_LOG = 28,PCI_ERR_ROOT_COMMAND = 44,PCI_ERR_ROOT_CMD_COR_EN = 1,PCI_ERR_ROOT_CMD_NONFATAL_EN = 2,PCI_ERR_ROOT_CMD_FATAL_EN = 4,PCI_ERR_ROOT_STATUS = 48,PCI_ERR_ROOT_COR_RCV = 1,PCI_ERR_ROOT_MULTI_COR_RCV = 2,PCI_ERR_ROOT_UNCOR_RCV = 4,PCI_ERR_ROOT_MULTI_UNCOR_RCV = 8,PCI_ERR_ROOT_FIRST_FATAL = 16,PCI_ERR_ROOT_NONFATAL_RCV = 32,PCI_ERR_ROOT_FATAL_RCV = 64,PCI_ERR_ROOT_ERR_SRC = 52,PCI_VC_PORT_REG1 = 4,PCI_VC_REG1_EVCC = 7,PCI_VC_PORT_REG2 = 8,PCI_VC_REG2_32_PHASE = 2,PCI_VC_REG2_64_PHASE = 4,PCI_VC_REG2_128_PHASE = 8,PCI_VC_PORT_CTRL = 12,PCI_VC_PORT_STATUS = 14,PCI_VC_RES_CAP = 16,PCI_VC_RES_CTRL = 20,PCI_VC_RES_STATUS = 26,PCI_CAP_VC_BASE_SIZEOF = 16,PCI_CAP_VC_PER_VC_SIZEOF = 12,PCI_PWR_DSR = 4,PCI_PWR_DATA = 8,PCI_PWR_CAP = 12,PCI_EXT_CAP_PWR_SIZEOF = 16,PCI_VNDR_HEADER = 4,};
enum MACRO_PCM {PCM_ENABLE_INPUT = 0x1,PCM_ENABLE_OUTPUT = 0x2,};
enum MACRO_PDI {PDI_RUNNING = 0x1,PDI_AUXDATA = 0x2,PDI_ORIGDEV = 0x4,PDI_VNETHDR = 0x8,PDI_LOSS = 0x10,};
enum MACRO_PHN {PHN_NOT_OH = 28676,PHN_CONTROL = 6,PHN_CTL_AMP = 1,PHN_CTL_BUT = 2,PHN_CTL_IRQ = 16,PHN_ZERO_FORCE = 2048,};
enum MACRO_PIO {PIO_FONTRESET = 0x4B6D,};
enum MACRO_PKT {PKT_RB_POOL_SIZE = 512,};
enum MACRO_PMU {PMU_DRIVER_VERSION = 2,PMU_POWER_CTRL0 = 16,PMU_POWER_CTRL = 17,PMU_ADB_CMD = 32,PMU_ADB_POLL_OFF = 33,PMU_WRITE_NVRAM = 51,PMU_READ_NVRAM = 59,PMU_SET_RTC = 48,PMU_READ_RTC = 56,PMU_SET_VOLBUTTON = 64,PMU_BACKLIGHT_BRIGHT = 65,PMU_GET_VOLBUTTON = 72,PMU_PCEJECT = 76,PMU_BATTERY_STATE = 107,PMU_SMART_BATTERY_STATE = 111,PMU_SET_INTR_MASK = 112,PMU_INT_ACK = 120,PMU_SHUTDOWN = 126,PMU_CPU_SPEED = 125,PMU_SLEEP = 127,PMU_POWER_EVENTS = 143,PMU_I2C_CMD = 154,PMU_RESET = 208,PMU_GET_BRIGHTBUTTON = 217,PMU_GET_COVER = 220,PMU_SYSTEM_READY = 223,PMU_GET_VERSION = 234,PMU_POW0_ON = 128,PMU_POW0_OFF = 0,PMU_POW0_HARD_DRIVE = 4,PMU_POW_ON = 128,PMU_POW_OFF = 0,PMU_POW_BACKLIGHT = 1,PMU_POW_CHARGER = 2,PMU_POW_IRLED = 4,PMU_POW_MEDIABAY = 8,PMU_INT_PCEJECT = 4,PMU_INT_SNDBRT = 8,PMU_INT_ADB = 16,PMU_INT_BATTERY = 32,PMU_INT_ENVIRONMENT = 64,PMU_INT_TICK = 128,PMU_INT_ADB_AUTO = 4,PMU_INT_WAITING_CHARGER = 1,PMU_INT_AUTO_SRQ_POLL = 2,PMU_ENV_LID_CLOSED = 1,PMU_I2C_MODE_SIMPLE = 0,PMU_I2C_MODE_STDSUB = 1,PMU_I2C_MODE_COMBINED = 2,PMU_I2C_BUS_STATUS = 0,PMU_I2C_BUS_SYSCLK = 1,PMU_I2C_BUS_POWER = 2,PMU_I2C_STATUS_OK = 0,PMU_I2C_STATUS_DATAREAD = 1,PMU_I2C_STATUS_BUSY = 254,PMU_IOC_SLEEP = 16896,};
enum MACRO_PPP {PPP_HDRLEN = 4,PPP_FCSLEN = 2,PPP_MRU = 1500,PPP_ALLSTATIONS = 255,PPP_UI = 3,PPP_FLAG = 126,PPP_ESCAPE = 125,PPP_TRANS = 32,PPP_IP = 33,PPP_AT = 41,PPP_IPX = 43,PPP_VJC_COMP = 45,PPP_VJC_UNCOMP = 47,PPP_MP = 61,PPP_IPV6 = 87,PPP_COMPFRAG = 251,PPP_COMP = 253,PPP_MPLS_UC = 641,PPP_MPLS_MC = 643,PPP_IPCP = 32801,PPP_ATCP = 32809,PPP_IPXCP = 32811,PPP_IPV6CP = 32855,PPP_CCPFRAG = 33019,PPP_CCP = 33021,PPP_MPLSCP = 33021,PPP_LCP = 49185,PPP_PAP = 49187,PPP_LQR = 49189,PPP_CHAP = 49699,PPP_CBCP = 49193,PPP_INITFCS = 65535,PPP_GOODFCS = 61624,PPP_MTU = 1500,PPP_MAXMRU = 65000,PPP_MAGIC = 20482,};
enum MACRO_PPS {PPS_MAX_SOURCES = 16,PPS_API_VERS_1 = 1,PPS_API_VERS = 1,PPS_MAX_NAME_LEN = 32,PPS_TIME_INVALID = 1,PPS_CAPTUREASSERT = 1,PPS_CAPTURECLEAR = 2,PPS_CAPTUREBOTH = 3,PPS_OFFSETASSERT = 16,PPS_OFFSETCLEAR = 32,PPS_CANWAIT = 256,PPS_CANPOLL = 512,PPS_ECHOASSERT = 64,PPS_ECHOCLEAR = 128,PPS_TSFMT_TSPEC = 4096,PPS_TSFMT_NTPFP = 8192,PPS_KC_HARDPPS = 0,PPS_KC_HARDPPS_PLL = 1,PPS_KC_HARDPPS_FLL = 2,};
enum MACRO_PRE {PRE_FETCH = 0x34,};
enum MACRO_PTP {PTP_ENABLE_FEATURE = 1,PTP_RISING_EDGE = 2,PTP_FALLING_EDGE = 4,PTP_MAX_SAMPLES = 25,PTP_CLK_MAGIC = 61,};
enum MACRO_PTT {PTT_EOL = 0,PTT_SRV_NAME = 257,PTT_AC_NAME = 258,PTT_HOST_UNIQ = 259,PTT_AC_COOKIE = 260,PTT_VENDOR = 261,PTT_RELAY_SID = 272,PTT_SRV_ERR = 513,PTT_SYS_ERR = 514,PTT_GEN_ERR = 515,};
enum MACRO_QIF {QIF_BLIMITS = 1,QIF_SPACE = 2,QIF_ILIMITS = 4,QIF_INODES = 8,QIF_BTIME = 16,QIF_ITIME = 32,QIF_LIMITS = 5,QIF_USAGE = 10,QIF_TIMES = 48,QIF_ALL = 63,};
enum MACRO_QTI {QTI_PHONEJACK = 100,QTI_LINEJACK = 300,QTI_PHONEJACK_LITE = 400,QTI_PHONEJACK_PCI = 500,QTI_PHONECARD = 600,};
enum MACRO_R10 {R10 = 7,R9 = 8,};
enum MACRO_R11 {R11 = 6,};
enum MACRO_R12 {R12 = 3,RBP = 4,};
enum MACRO_R15 {R15 = 0,R14 = 1,R13 = 2,};
enum MACRO_RAW {RAW_MAJOR = 162,RAW_SETBIND = 44032,RAW_GETBIND = 44033,};
enum MACRO_RAX {RAX = 10,};
enum MACRO_RBX {RBX = 5,};
enum MACRO_RCX {RCX = 11,};
enum MACRO_RDB {RDB_ALLOCATION_LIMIT = 16,};
enum MACRO_RDI {RDI = 14,};
enum MACRO_RDS {RDS_IB_ABI_VERSION = 0x301,RDS_CANCEL_SENT_TO = 0x1,RDS_GET_MR = 0x2,RDS_FREE_MR = 0x3,RDS_RECVERR = 0x5,RDS_CONG_MONITOR = 0x6,RDS_GET_MR_FOR_DEST = 0x7,RDS_CMSG_RDMA_ARGS = 0x1,RDS_CMSG_RDMA_DEST = 0x2,RDS_CMSG_RDMA_MAP = 0x3,RDS_CMSG_RDMA_STATUS = 0x4,RDS_CMSG_CONG_UPDATE = 0x5,RDS_CMSG_ATOMIC_FADD = 0x6,RDS_CMSG_ATOMIC_CSWP = 0x7,RDS_CMSG_MASKED_ATOMIC_FADD = 0x8,RDS_CMSG_MASKED_ATOMIC_CSWP = 0x9,RDS_INFO_FIRST = 0x2710,RDS_INFO_COUNTERS = 0x2710,RDS_INFO_CONNECTIONS = 0x2711,RDS_INFO_SEND_MESSAGES = 0x2713,RDS_INFO_RETRANS_MESSAGES = 0x2714,RDS_INFO_RECV_MESSAGES = 0x2715,RDS_INFO_SOCKETS = 0x2716,RDS_INFO_TCP_SOCKETS = 0x2717,RDS_INFO_IB_CONNECTIONS = 0x2718,RDS_INFO_CONNECTION_STATS = 0x2719,RDS_INFO_IWARP_CONNECTIONS = 0x271A,RDS_INFO_LAST = 0x271A,RDS_INFO_CONNECTION_FLAG_SENDING = 0x1,RDS_INFO_CONNECTION_FLAG_CONNECTING = 0x2,RDS_INFO_CONNECTION_FLAG_CONNECTED = 0x4,};
enum MACRO_RDX {RDX = 12,};
enum MACRO_REC {REC_ESC = -1,REC_EOR = 1,REC_EOF = 2,};
enum MACRO_REG {REG_EXTENDED = 1,REG_ICASE = 2,REG_NEWLINE = 4,REG_NOSUB = 8,REG_NOTBOL = 1,REG_NOTEOL = 2,REG_STARTEND = 4,};
enum MACRO_REM {REM_MULTIPLE = 512,};
enum MACRO_REQ {REQ_NEXT_PAGE = 512,REQ_PREV_PAGE = 513,REQ_FIRST_PAGE = 514,REQ_LAST_PAGE = 515,REQ_NEXT_FIELD = 516,REQ_PREV_FIELD = 517,REQ_FIRST_FIELD = 518,REQ_LAST_FIELD = 519,REQ_SNEXT_FIELD = 520,REQ_SPREV_FIELD = 521,REQ_SFIRST_FIELD = 522,REQ_SLAST_FIELD = 523,REQ_LEFT_FIELD = 524,REQ_RIGHT_FIELD = 525,REQ_UP_FIELD = 526,REQ_DOWN_FIELD = 527,REQ_NEXT_CHAR = 528,REQ_PREV_CHAR = 529,REQ_NEXT_LINE = 530,REQ_PREV_LINE = 531,REQ_NEXT_WORD = 532,REQ_PREV_WORD = 533,REQ_BEG_FIELD = 534,REQ_END_FIELD = 535,REQ_BEG_LINE = 536,REQ_END_LINE = 537,REQ_LEFT_CHAR = 538,REQ_RIGHT_CHAR = 539,REQ_UP_CHAR = 540,REQ_DOWN_CHAR = 541,REQ_NEW_LINE = 542,REQ_INS_CHAR = 543,REQ_INS_LINE = 544,REQ_DEL_CHAR = 545,REQ_DEL_PREV = 546,REQ_DEL_LINE = 547,REQ_DEL_WORD = 548,REQ_CLR_EOL = 549,REQ_CLR_EOF = 550,REQ_CLR_FIELD = 551,REQ_OVL_MODE = 552,REQ_INS_MODE = 553,REQ_SCR_FLINE = 554,REQ_SCR_BLINE = 555,REQ_SCR_FPAGE = 556,REQ_SCR_BPAGE = 557,REQ_SCR_FHPAGE = 558,REQ_SCR_BHPAGE = 559,REQ_SCR_FCHAR = 560,REQ_SCR_BCHAR = 561,REQ_SCR_HFLINE = 562,REQ_SCR_HBLINE = 563,REQ_SCR_HFHALF = 564,REQ_SCR_HBHALF = 565,REQ_VALIDATION = 566,REQ_NEXT_CHOICE = 567,REQ_PREV_CHOICE = 568,};
enum MACRO_RES {RES_TIMEOUT = 5,};
enum MACRO_REX {REX_INTERACTIVE = 1,};
enum MACRO_RHF {RHF_NONE = 0,RHF_QUICKSTART = 1,RHF_NOTPOT = 2,RHF_NO_LIBRARY_REPLACEMENT = 4,RHF_NO_MOVE = 8,RHF_SGI_ONLY = 16,RHF_GUARANTEE_INIT = 32,RHF_DELTA_C_PLUS_PLUS = 64,RHF_GUARANTEE_START_INIT = 128,RHF_PIXIE = 256,RHF_DEFAULT_DELAY_LOAD = 512,RHF_REQUICKSTART = 1024,RHF_REQUICKSTARTED = 2048,RHF_CORD = 4096,RHF_NO_UNRES_UNDEF = 8192,RHF_RLD_ORDER_SAFE = 16384,};
enum MACRO_RIP {RIP = 16,};
enum MACRO_ROP {ROP_COPY = 0,ROP_XOR = 1,};
enum MACRO_RPC {RPC_MSG_VERSION = 2,RPC_SERVICE_PORT = 2048,};
enum MACRO_RPM {RPM_PCO_ADD = 1,RPM_PCO_CHANGE = 2,RPM_PCO_SETGLOBAL = 3,};
enum MACRO_RRQ {RRQ = 0x1,WRQ = 0x2,};
enum MACRO_RSI {RSI = 13,};
enum MACRO_RSP {RSP = 19,};
enum MACRO_RTA {RTA_ALIGNTO = 4,};
enum MACRO_RTC {RTC_AIE_ON = 0x7001,RTC_AIE_OFF = 0x7002,RTC_UIE_ON = 0x7003,RTC_UIE_OFF = 0x7004,RTC_PIE_ON = 0x7005,RTC_PIE_OFF = 0x7006,RTC_WIE_ON = 0x700F,RTC_WIE_OFF = 0x7010,RTC_VL_CLR = 0x7014,RTC_IRQF = 0x80,RTC_PF = 0x40,RTC_AF = 0x20,RTC_UF = 0x10,RTC_MAX_FREQ = 0x2000,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REINSTATE = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_MTU = 0x40,RTF_MSS = 0x40,RTF_WINDOW = 0x80,RTF_IRTT = 0x100,RTF_REJECT = 0x200,RTF_STATIC = 0x400,RTF_XRESOLVE = 0x800,RTF_NOFORWARD = 0x1000,RTF_THROW = 0x2000,RTF_NOPMTUDISC = 0x4000,RTF_DEFAULT = 0x10000,RTF_ALLONLINK = 0x20000,RTF_ADDRCONF = 0x40000,RTF_LINKRT = 0x100000,RTF_NONEXTHOP = 0x200000,RTF_CACHE = 0x1000000,RTF_FLOW = 0x2000000,RTF_POLICY = 0x4000000,};
enum MACRO_RTM {RTM_F_NOTIFY = 0x100,RTM_F_CLONED = 0x200,RTM_F_EQUALIZE = 0x400,RTM_F_PREFIX = 0x800,};
enum MACRO_RUN {RUN_LVL = 1,};
enum MACRO_RXH {RXH_L2DA = 2,RXH_VLAN = 4,RXH_L3_PROTO = 8,RXH_IP_SRC = 16,RXH_IP_DST = 32,RXH_L4_B_0_1 = 64,RXH_L4_B_2_3 = 128,RXH_DISCARD = 2147483648,};
enum MACRO_SCM {SCM_TIMESTAMP = 29,};
enum MACRO_SDF {SDF_WILD = 1,SDF_PROXY = 2,SDF_UICPROXY = 4,};
enum MACRO_SEM {SEM_UNDO = 0x1000,};
enum MACRO_SEQ {SEQ_NOTEOFF = 0,SEQ_FMNOTEOFF = 0,SEQ_NOTEON = 1,SEQ_FMNOTEON = 1,SEQ_PGMCHANGE = 3,SEQ_FMPGMCHANGE = 3,SEQ_MIDIPUTC = 5,SEQ_DRUMON = 6,SEQ_DRUMOFF = 7,SEQ_AFTERTOUCH = 9,SEQ_CONTROLLER = 10,};
enum MACRO_SER {SER_RS485_ENABLED = 1,SER_RS485_RTS_ON_SEND = 2,SER_RS485_RTS_AFTER_SEND = 4,SER_RS485_RX_DURING_TX = 16,};
enum MACRO_SET {SET_WINDOW = 0x24,};
enum MACRO_SFB {SFB_MAX_PROB = 0xFFFF,};
enum MACRO_SHF {SHF_WRITE = 1,SHF_ALLOC = 2,SHF_EXECINSTR = 4,SHF_MERGE = 16,SHF_STRINGS = 32,SHF_INFO_LINK = 64,SHF_LINK_ORDER = 128,SHF_OS_NONCONFORMING = 256,SHF_GROUP = 512,SHF_TLS = 1024,SHF_MASKOS = 267386880,SHF_MASKPROC = -268435456,SHF_ORDERED = 1073741824,SHF_EXCLUDE = 2147483648,};
enum MACRO_SHM {SHM_R = 0x100,SHM_W = 0x80,SHM_RDONLY = 0x1000,SHM_RND = 0x2000,SHM_REMAP = 0x4000,SHM_EXEC = 0x8000,SHM_LOCK = 0xB,SHM_UNLOCK = 0xC,SHM_STAT = 0xD,SHM_INFO = 0xE,SHM_DEST = 0x200,SHM_LOCKED = 0x400,SHM_HUGETLB = 0x800,SHM_NORESERVE = 0x1000,};
enum MACRO_SHN {SHN_UNDEF = 0,SHN_LORESERVE = 65280,SHN_LOPROC = 65280,SHN_BEFORE = 65280,SHN_AFTER = 65281,SHN_HIPROC = 65311,SHN_LOOS = 65312,SHN_HIOS = 65343,SHN_ABS = 65521,SHN_COMMON = 65522,SHN_XINDEX = 65535,SHN_HIRESERVE = 65535,};
enum MACRO_SHT {SHT_NULL = 0,SHT_PROGBITS = 1,SHT_SYMTAB = 2,SHT_STRTAB = 3,SHT_RELA = 4,SHT_HASH = 5,SHT_DYNAMIC = 6,SHT_NOTE = 7,SHT_NOBITS = 8,SHT_REL = 9,SHT_SHLIB = 10,SHT_DYNSYM = 11,SHT_INIT_ARRAY = 14,SHT_FINI_ARRAY = 15,SHT_PREINIT_ARRAY = 16,SHT_GROUP = 17,SHT_SYMTAB_SHNDX = 18,SHT_NUM = 12,SHT_LOOS = 1610612736,SHT_GNU_ATTRIBUTES = 1879048181,SHT_GNU_HASH = 1879048182,SHT_GNU_LIBLIST = 1879048183,SHT_CHECKSUM = 1879048184,SHT_LOSUNW = 1879048186,SHT_SUNW_move = 1879048186,SHT_SUNW_COMDAT = 1879048187,SHT_SUNW_syminfo = 1879048188,SHT_GNU_verdef = 1879048189,SHT_GNU_verneed = 1879048190,SHT_GNU_versym = 1879048191,SHT_HISUNW = 1879048191,SHT_HIOS = 1879048191,SHT_LOPROC = 1879048192,SHT_HIPROC = 2147483647,SHT_LOUSER = -2147483648,SHT_HIUSER = -1,};
enum MACRO_SIG {SIG_ATOMIC_MIN = -2147483648,SIG_ATOMIC_MAX = 2147483647,};
enum MACRO_SKF {SKF_AD_OFF = 0xFFFFF000,SKF_AD_PROTOCOL = 0x0,SKF_AD_PKTTYPE = 0x4,SKF_AD_IFINDEX = 0x8,SKF_AD_NLATTR = 0xC,SKF_AD_NLATTR_NEST = 0x10,SKF_AD_MARK = 0x14,SKF_AD_QUEUE = 0x18,SKF_AD_HATYPE = 0x1C,SKF_AD_RXHASH = 0x20,SKF_AD_CPU = 0x24,SKF_AD_ALU_XOR_X = 0x28,SKF_AD_VLAN_TAG = 0x2C,SKF_AD_VLAN_TAG_PRESENT = 0x30,SKF_AD_PAY_OFFSET = 0x34,SKF_AD_MAX = 0x38,SKF_NET_OFF = 0xFFF00000,SKF_LL_OFF = 0xFFE00000,};
enum MACRO_SLC {SLC_SYNCH = 1,SLC_BRK = 2,SLC_IP = 3,SLC_AO = 4,SLC_AYT = 5,SLC_EOR = 6,SLC_ABORT = 7,SLC_EOF = 8,SLC_SUSP = 9,SLC_EC = 10,SLC_EL = 11,SLC_EW = 12,SLC_RP = 13,SLC_LNEXT = 14,SLC_XON = 15,SLC_XOFF = 16,SLC_FORW1 = 17,SLC_FORW2 = 18,};
enum MACRO_SNB {SNB_C1_AUTO_UNDEMOTE = 134217728,SNB_C3_AUTO_UNDEMOTE = 268435456,};
enum MACRO_SND {SND_AUDIOCODEC_PCM = 1,SND_AUDIOCODEC_MP3 = 2,SND_AUDIOCODEC_AMR = 3,SND_AUDIOCODEC_AMRWB = 4,SND_AUDIOCODEC_AMRWBPLUS = 5,SND_AUDIOCODEC_AAC = 6,SND_AUDIOCODEC_WMA = 7,SND_AUDIOCODEC_REAL = 8,SND_AUDIOCODEC_VORBIS = 9,SND_AUDIOCODEC_FLAC = 10,SND_AUDIOCODEC_IEC61937 = 11,SND_AUDIOCODEC_G723_1 = 12,SND_AUDIOCODEC_G729 = 13,SND_AUDIOCODEC_MAX = 13,SND_AUDIOPROFILE_PCM = 1,SND_AUDIOCHANMODE_MP3_MONO = 1,SND_AUDIOCHANMODE_MP3_STEREO = 2,SND_AUDIOCHANMODE_MP3_JOINTSTEREO = 4,SND_AUDIOCHANMODE_MP3_DUAL = 8,SND_AUDIOPROFILE_AMR = 1,SND_AUDIOMODE_AMR_DTX_OFF = 1,SND_AUDIOMODE_AMR_VAD1 = 2,SND_AUDIOMODE_AMR_VAD2 = 4,SND_AUDIOSTREAMFORMAT_UNDEFINED = 0,SND_AUDIOSTREAMFORMAT_CONFORMANCE = 1,SND_AUDIOSTREAMFORMAT_IF1 = 2,SND_AUDIOSTREAMFORMAT_IF2 = 4,SND_AUDIOSTREAMFORMAT_FSF = 8,SND_AUDIOSTREAMFORMAT_RTPPAYLOAD = 16,SND_AUDIOSTREAMFORMAT_ITU = 32,SND_AUDIOPROFILE_AMRWB = 1,SND_AUDIOMODE_AMRWB_DTX_OFF = 1,SND_AUDIOMODE_AMRWB_VAD1 = 2,SND_AUDIOMODE_AMRWB_VAD2 = 4,SND_AUDIOPROFILE_AMRWBPLUS = 1,SND_AUDIOPROFILE_AAC = 1,SND_AUDIOMODE_AAC_MAIN = 1,SND_AUDIOMODE_AAC_LC = 2,SND_AUDIOMODE_AAC_SSR = 4,SND_AUDIOMODE_AAC_LTP = 8,SND_AUDIOMODE_AAC_HE = 16,SND_AUDIOMODE_AAC_SCALABLE = 32,SND_AUDIOMODE_AAC_ERLC = 64,SND_AUDIOMODE_AAC_LD = 128,SND_AUDIOMODE_AAC_HE_PS = 256,SND_AUDIOMODE_AAC_HE_MPS = 512,SND_AUDIOSTREAMFORMAT_MP2ADTS = 1,SND_AUDIOSTREAMFORMAT_MP4ADTS = 2,SND_AUDIOSTREAMFORMAT_MP4LOAS = 4,SND_AUDIOSTREAMFORMAT_MP4LATM = 8,SND_AUDIOSTREAMFORMAT_ADIF = 16,SND_AUDIOSTREAMFORMAT_MP4FF = 32,SND_AUDIOSTREAMFORMAT_RAW = 64,SND_AUDIOPROFILE_WMA7 = 1,SND_AUDIOPROFILE_WMA8 = 2,SND_AUDIOPROFILE_WMA9 = 4,SND_AUDIOPROFILE_WMA10 = 8,SND_AUDIOMODE_WMA_LEVEL1 = 1,SND_AUDIOMODE_WMA_LEVEL2 = 2,SND_AUDIOMODE_WMA_LEVEL3 = 4,SND_AUDIOMODE_WMA_LEVEL4 = 8,SND_AUDIOMODE_WMAPRO_LEVELM0 = 16,SND_AUDIOMODE_WMAPRO_LEVELM1 = 32,SND_AUDIOMODE_WMAPRO_LEVELM2 = 64,SND_AUDIOMODE_WMAPRO_LEVELM3 = 128,SND_AUDIOSTREAMFORMAT_WMA_ASF = 1,SND_AUDIOSTREAMFORMAT_WMA_NOASF_HDR = 2,SND_AUDIOPROFILE_REALAUDIO = 1,SND_AUDIOMODE_REALAUDIO_G2 = 1,SND_AUDIOMODE_REALAUDIO_8 = 2,SND_AUDIOMODE_REALAUDIO_10 = 4,SND_AUDIOMODE_REALAUDIO_SURROUND = 8,SND_AUDIOPROFILE_VORBIS = 1,SND_AUDIOMODE_VORBIS = 1,SND_AUDIOPROFILE_FLAC = 1,SND_AUDIOMODE_FLAC_LEVEL0 = 1,SND_AUDIOMODE_FLAC_LEVEL1 = 2,SND_AUDIOMODE_FLAC_LEVEL2 = 4,SND_AUDIOMODE_FLAC_LEVEL3 = 8,SND_AUDIOMODE_FLAC_LEVEL4 = 16,SND_AUDIOMODE_FLAC_LEVEL5 = 32,SND_AUDIOMODE_FLAC_LEVEL6 = 64,SND_AUDIOMODE_FLAC_LEVEL7 = 128,SND_AUDIOMODE_FLAC_LEVEL8 = 256,SND_AUDIOSTREAMFORMAT_FLAC = 1,SND_AUDIOSTREAMFORMAT_FLAC_OGG = 2,SND_AUDIOPROFILE_IEC61937 = 1,SND_AUDIOPROFILE_IEC61937_SPDIF = 2,SND_AUDIOMODE_IEC_REF_STREAM_HEADER = 0,SND_AUDIOMODE_IEC_LPCM = 1,SND_AUDIOMODE_IEC_AC3 = 2,SND_AUDIOMODE_IEC_MPEG1 = 4,SND_AUDIOMODE_IEC_MP3 = 8,SND_AUDIOMODE_IEC_MPEG2 = 16,SND_AUDIOMODE_IEC_AACLC = 32,SND_AUDIOMODE_IEC_DTS = 64,SND_AUDIOMODE_IEC_ATRAC = 128,SND_AUDIOMODE_IEC_SACD = 256,SND_AUDIOMODE_IEC_EAC3 = 512,SND_AUDIOMODE_IEC_DTS_HD = 1024,SND_AUDIOMODE_IEC_MLP = 2048,SND_AUDIOMODE_IEC_DST = 4096,SND_AUDIOMODE_IEC_WMAPRO = 8192,SND_AUDIOMODE_IEC_REF_CXT = 16384,SND_AUDIOMODE_IEC_HE_AAC = 32768,SND_AUDIOMODE_IEC_HE_AAC2 = 65536,SND_AUDIOMODE_IEC_MPEG_SURROUND = 131072,SND_AUDIOPROFILE_G723_1 = 1,SND_AUDIOMODE_G723_1_ANNEX_A = 1,SND_AUDIOMODE_G723_1_ANNEX_B = 2,SND_AUDIOMODE_G723_1_ANNEX_C = 4,SND_AUDIOPROFILE_G729 = 1,SND_AUDIOMODE_G729_ANNEX_A = 1,SND_AUDIOMODE_G729_ANNEX_B = 2,SND_RATECONTROLMODE_CONSTANTBITRATE = 1,SND_RATECONTROLMODE_VARIABLEBITRATE = 2,};
enum MACRO_SOL {SOL_RAW = 255,SOL_DECNET = 261,SOL_X25 = 262,SOL_PACKET = 263,SOL_ATM = 264,SOL_AAL = 265,SOL_IRDA = 266,};
enum MACRO_SPI {SPI_CPHA = 0x1,SPI_CPOL = 0x2,SPI_MODE_0 = 0x0,SPI_MODE_1 = 0x1,SPI_MODE_2 = 0x2,SPI_MODE_3 = 0x3,SPI_CS_HIGH = 0x4,SPI_LSB_FIRST = 0x8,SPI_3WIRE = 0x10,SPI_LOOP = 0x20,SPI_NO_CS = 0x40,SPI_READY = 0x80,SPI_IOC_MAGIC = 0x6B,};
enum MACRO_ST0 {ST0_DS = 0x3,ST0_HA = 0x4,ST0_NR = 0x8,ST0_ECE = 0x10,ST0_SE = 0x20,ST0_INTR = 0xC0,};
enum MACRO_ST1 {ST1_MAM = 0x1,ST1_WP = 0x2,ST1_ND = 0x4,ST1_OR = 0x10,ST1_CRC = 0x20,ST1_EOC = 0x80,};
enum MACRO_ST2 {ST2_MAM = 0x1,ST2_BC = 0x2,ST2_SNS = 0x4,ST2_SEH = 0x8,ST2_WC = 0x10,ST2_CRC = 0x20,ST2_CM = 0x40,};
enum MACRO_ST3 {ST3_HA = 0x4,ST3_DS = 0x8,ST3_TZ = 0x10,ST3_RY = 0x20,ST3_WP = 0x40,ST3_FT = 0x80,};
enum MACRO_STA {STA_PLL = 0x1,STA_PPSFREQ = 0x2,STA_PPSTIME = 0x4,STA_FLL = 0x8,STA_INS = 0x10,STA_DEL = 0x20,STA_UNSYNC = 0x40,STA_FREQHOLD = 0x80,STA_PPSSIGNAL = 0x100,STA_PPSJITTER = 0x200,STA_PPSWANDER = 0x400,STA_PPSERROR = 0x800,STA_CLOCKERR = 0x1000,STA_NANO = 0x2000,STA_MODE = 0x4000,STA_CLK = 0x8000,STA_RONLY = 0xFF00,};
enum MACRO_STB {STB_LOCAL = 0,STB_GLOBAL = 1,STB_WEAK = 2,STB_NUM = 3,STB_LOOS = 10,STB_GNU_UNIQUE = 10,STB_HIOS = 12,STB_LOPROC = 13,STB_HIPROC = 15,};
enum MACRO_STL {STL_SERIALMAJOR = 24,};
enum MACRO_STN {STN_UNDEF = 0,};
enum MACRO_STO {STO_MIPS_DEFAULT = 0x0,STO_MIPS_INTERNAL = 0x1,STO_MIPS_HIDDEN = 0x2,STO_MIPS_PROTECTED = 0x3,STO_MIPS_PLT = 0x8,STO_MIPS_SC_ALIGN_UNUSED = 0xFF,};
enum MACRO_STT {STT_NOTYPE = 0,STT_OBJECT = 1,STT_FUNC = 2,STT_SECTION = 3,STT_FILE = 4,STT_COMMON = 5,STT_TLS = 6,STT_NUM = 7,STT_LOOS = 10,STT_GNU_IFUNC = 10,STT_HIOS = 12,STT_LOPROC = 13,STT_HIPROC = 15,};
enum MACRO_STV {STV_DEFAULT = 0,STV_INTERNAL = 1,STV_HIDDEN = 2,STV_PROTECTED = 3,};
enum MACRO_SVM {SVM_EXIT_READ_CR0 = 0x0,SVM_EXIT_READ_CR3 = 0x3,SVM_EXIT_READ_CR4 = 0x4,SVM_EXIT_READ_CR8 = 0x8,SVM_EXIT_WRITE_CR0 = 0x10,SVM_EXIT_WRITE_CR3 = 0x13,SVM_EXIT_WRITE_CR4 = 0x14,SVM_EXIT_WRITE_CR8 = 0x18,SVM_EXIT_READ_DR0 = 0x20,SVM_EXIT_READ_DR1 = 0x21,SVM_EXIT_READ_DR2 = 0x22,SVM_EXIT_READ_DR3 = 0x23,SVM_EXIT_READ_DR4 = 0x24,SVM_EXIT_READ_DR5 = 0x25,SVM_EXIT_READ_DR6 = 0x26,SVM_EXIT_READ_DR7 = 0x27,SVM_EXIT_WRITE_DR0 = 0x30,SVM_EXIT_WRITE_DR1 = 0x31,SVM_EXIT_WRITE_DR2 = 0x32,SVM_EXIT_WRITE_DR3 = 0x33,SVM_EXIT_WRITE_DR4 = 0x34,SVM_EXIT_WRITE_DR5 = 0x35,SVM_EXIT_WRITE_DR6 = 0x36,SVM_EXIT_WRITE_DR7 = 0x37,SVM_EXIT_EXCP_BASE = 0x40,SVM_EXIT_INTR = 0x60,SVM_EXIT_NMI = 0x61,SVM_EXIT_SMI = 0x62,SVM_EXIT_INIT = 0x63,SVM_EXIT_VINTR = 0x64,SVM_EXIT_CR0_SEL_WRITE = 0x65,SVM_EXIT_IDTR_READ = 0x66,SVM_EXIT_GDTR_READ = 0x67,SVM_EXIT_LDTR_READ = 0x68,SVM_EXIT_TR_READ = 0x69,SVM_EXIT_IDTR_WRITE = 0x6A,SVM_EXIT_GDTR_WRITE = 0x6B,SVM_EXIT_LDTR_WRITE = 0x6C,SVM_EXIT_TR_WRITE = 0x6D,SVM_EXIT_RDTSC = 0x6E,SVM_EXIT_RDPMC = 0x6F,SVM_EXIT_PUSHF = 0x70,SVM_EXIT_POPF = 0x71,SVM_EXIT_CPUID = 0x72,SVM_EXIT_RSM = 0x73,SVM_EXIT_IRET = 0x74,SVM_EXIT_SWINT = 0x75,SVM_EXIT_INVD = 0x76,SVM_EXIT_PAUSE = 0x77,SVM_EXIT_HLT = 0x78,SVM_EXIT_INVLPG = 0x79,SVM_EXIT_INVLPGA = 0x7A,SVM_EXIT_IOIO = 0x7B,SVM_EXIT_MSR = 0x7C,SVM_EXIT_TASK_SWITCH = 0x7D,SVM_EXIT_FERR_FREEZE = 0x7E,SVM_EXIT_SHUTDOWN = 0x7F,SVM_EXIT_VMRUN = 0x80,SVM_EXIT_VMMCALL = 0x81,SVM_EXIT_VMLOAD = 0x82,SVM_EXIT_VMSAVE = 0x83,SVM_EXIT_STGI = 0x84,SVM_EXIT_CLGI = 0x85,SVM_EXIT_SKINIT = 0x86,SVM_EXIT_RDTSCP = 0x87,SVM_EXIT_ICEBP = 0x88,SVM_EXIT_WBINVD = 0x89,SVM_EXIT_MONITOR = 0x8A,SVM_EXIT_MWAIT = 0x8B,SVM_EXIT_MWAIT_COND = 0x8C,SVM_EXIT_XSETBV = 0x8D,SVM_EXIT_NPF = 0x400,SVM_EXIT_ERR = 0xFFFFFFFF,};
enum MACRO_SYS {SYS_SELECT_WITH_SYS_TIME = 1,};
enum MACRO_TAG {TAG_DEBUG = 1,TAG_STATS = 2,TAG_GCACHE = 3,TAG_GCACHE_ALL = 3,TAG_DCACHE = 4,TAG_DCACHE_ONE = 4,TAG_OCACHE = 5,TAG_SECURE = 6,TAG_TCACHE_ONE = 7,TAG_DCACHE_ALL = 8,TAG_TCACHE_ALL = 9,TAG_GCACHE_ONE = 10,TAG_DCACHE_ONE_REFRESH = 11,TAG_READONLY = 12,TAG_READWRITE = 14,TAG_OPSTATS = 2048,TAG_THREADS = 2049,TAG_HEAP = 2050,TAG_UPDATES = 2051,TAG_VISIBLE = 2052,TAG_S_DCACHE = 2053,TAG_S_OCACHE = 2054,TAG_S_GCACHE = 2055,TAG_S_STORAGE = 2056,TAG_UPTIME = 2057,TAG_DIRLIST = 2058,TAG_NISCOMPAT = 2059,TAG_DNSFORWARDING = 2060,TAG_SECURITY_LEVEL = 2061,TAG_ROOTSERVER = 2062,};
enum MACRO_TCA {TCA_ACT_TAB = 1,};
enum MACRO_TCF {TCF_CBQ_LSS_BOUNDED = 1,TCF_CBQ_LSS_ISOLATED = 2,TCF_CBQ_LSS_FLAGS = 1,TCF_CBQ_LSS_EWMA = 2,TCF_CBQ_LSS_MAXIDLE = 4,TCF_CBQ_LSS_MINIDLE = 8,TCF_CBQ_LSS_OFFTIME = 16,TCF_CBQ_LSS_AVPKT = 32,};
enum MACRO_TCM {TCM_F_REQUEST = 0x1,TCM_F_MORE = 0x2,};
enum MACRO_TCP {TCP_NODELAY = 1,TCP_MAXSEG = 2,TCP_CORK = 3,TCP_KEEPIDLE = 4,TCP_KEEPINTVL = 5,TCP_KEEPCNT = 6,TCP_SYNCNT = 7,TCP_LINGER2 = 8,TCP_DEFER_ACCEPT = 9,TCP_WINDOW_CLAMP = 10,TCP_INFO = 11,TCP_QUICKACK = 12,TCP_CONGESTION = 13,TCP_MD5SIG = 14,};
enum MACRO_TCQ {TCQ_PRIO_BANDS = 16,TCQ_MIN_PRIO_BANDS = 2,TCQ_PLUG_BUFFER = 0,TCQ_PLUG_RELEASE_ONE = 1,TCQ_PLUG_RELEASE_INDEFINITE = 2,TCQ_PLUG_LIMIT = 3,};
enum MACRO_TLV {TLV_MPOA_DEVICE_TYPE = 0xA03E2A,};
enum MACRO_TMR {TMR_INTERNAL = 0x1,TMR_EXTERNAL = 0x2,TMR_MODE_MIDI = 0x10,TMR_MODE_FSK = 0x20,TMR_MODE_CLS = 0x40,TMR_MODE_SMPTE = 0x80,};
enum MACRO_TRY {TRY_AGAIN = 2,};
enum MACRO_TSP {TSP_ANY = 0,TSP_ADJTIME = 1,TSP_ACK = 2,TSP_MASTERREQ = 3,TSP_MASTERACK = 4,TSP_SETTIME = 5,TSP_MASTERUP = 6,TSP_SLAVEUP = 7,TSP_ELECTION = 8,TSP_ACCEPT = 9,TSP_REFUSE = 10,TSP_CONFLICT = 11,TSP_RESOLVE = 12,TSP_QUIT = 13,TSP_DATE = 14,TSP_DATEREQ = 15,TSP_DATEACK = 16,TSP_TRACEON = 17,TSP_TRACEOFF = 18,TSP_MSITE = 19,TSP_MSITEREQ = 20,TSP_TEST = 21,TSP_SETDATE = 22,TSP_SETDATEREQ = 23,TSP_LOOP = 24,};
enum MACRO_TTY {TTY_ON = 0x1,TTY_SECURE = 0x2,};
enum MACRO_TUN {TUN_READQ_SIZE = 500,TUN_TUN_DEV = 1,TUN_TAP_DEV = 2,TUN_TYPE_MASK = 15,TUN_FASYNC = 16,TUN_NOCHECKSUM = 32,TUN_NO_PI = 64,TUN_ONE_QUEUE = 128,TUN_PERSIST = 256,TUN_VNET_HDR = 512,TUN_TAP_MQ = 1024,};
enum MACRO_UAC {UAC_VERSION_1 = 0x0,UAC_VERSION_2 = 0x20,};
enum MACRO_UBI {UBI_VOL_NUM_AUTO = -1,UBI_DEV_NUM_AUTO = -1,UBI_MAX_VOLUME_NAME = 127,UBI_IOC_MAGIC = 111,UBI_CTRL_IOC_MAGIC = 111,UBI_VOL_IOC_MAGIC = 79,};
enum MACRO_UDP {UDP_CORK = 1,UDP_ENCAP = 100,UDP_ENCAP_ESPINUDP_NON_IKE = 1,UDP_ENCAP_ESPINUDP = 2,UDP_ENCAP_L2TPINUDP = 3,};
enum MACRO_UIO {UIO_MAXIOV = 1024,};
enum MACRO_UNI {UNI_DIRECT_BASE = 0xF000,UNI_DIRECT_MASK = 0x1FF,};
enum MACRO_USA {USA_RING_CADENCE = 0xC0C0,};
enum MACRO_USB {USB_INTERFACE_CLASS_HID = 3,USB_INTERFACE_SUBCLASS_BOOT = 1,USB_INTERFACE_PROTOCOL_KEYBOARD = 1,USB_INTERFACE_PROTOCOL_MOUSE = 2,};
enum MACRO_USE {USE_DGRAM = 65536,};
enum MACRO_UVC {UVC_SC_UNDEFINED = 0x0,UVC_SC_VIDEOCONTROL = 0x1,UVC_SC_VIDEOSTREAMING = 0x2,UVC_SC_VIDEO_INTERFACE_COLLECTION = 0x3,UVC_PC_PROTOCOL_UNDEFINED = 0x0,UVC_VC_DESCRIPTOR_UNDEFINED = 0x0,UVC_VC_HEADER = 0x1,UVC_VC_INPUT_TERMINAL = 0x2,UVC_VC_OUTPUT_TERMINAL = 0x3,UVC_VC_SELECTOR_UNIT = 0x4,UVC_VC_PROCESSING_UNIT = 0x5,UVC_VC_EXTENSION_UNIT = 0x6,UVC_VS_UNDEFINED = 0x0,UVC_VS_INPUT_HEADER = 0x1,UVC_VS_OUTPUT_HEADER = 0x2,UVC_VS_STILL_IMAGE_FRAME = 0x3,UVC_VS_FORMAT_UNCOMPRESSED = 0x4,UVC_VS_FRAME_UNCOMPRESSED = 0x5,UVC_VS_FORMAT_MJPEG = 0x6,UVC_VS_FRAME_MJPEG = 0x7,UVC_VS_FORMAT_MPEG2TS = 0xA,UVC_VS_FORMAT_DV = 0xC,UVC_VS_COLORFORMAT = 0xD,UVC_VS_FORMAT_FRAME_BASED = 0x10,UVC_VS_FRAME_FRAME_BASED = 0x11,UVC_VS_FORMAT_STREAM_BASED = 0x12,UVC_EP_UNDEFINED = 0x0,UVC_EP_GENERAL = 0x1,UVC_EP_ENDPOINT = 0x2,UVC_EP_INTERRUPT = 0x3,UVC_RC_UNDEFINED = 0x0,UVC_SET_CUR = 0x1,UVC_GET_CUR = 0x81,UVC_GET_MIN = 0x82,UVC_GET_MAX = 0x83,UVC_GET_RES = 0x84,UVC_GET_LEN = 0x85,UVC_GET_INFO = 0x86,UVC_GET_DEF = 0x87,UVC_VC_CONTROL_UNDEFINED = 0x0,UVC_VC_VIDEO_POWER_MODE_CONTROL = 0x1,UVC_VC_REQUEST_ERROR_CODE_CONTROL = 0x2,UVC_TE_CONTROL_UNDEFINED = 0x0,UVC_SU_CONTROL_UNDEFINED = 0x0,UVC_SU_INPUT_SELECT_CONTROL = 0x1,UVC_CT_CONTROL_UNDEFINED = 0x0,UVC_CT_SCANNING_MODE_CONTROL = 0x1,UVC_CT_AE_MODE_CONTROL = 0x2,UVC_CT_AE_PRIORITY_CONTROL = 0x3,UVC_CT_EXPOSURE_TIME_ABSOLUTE_CONTROL = 0x4,UVC_CT_EXPOSURE_TIME_RELATIVE_CONTROL = 0x5,UVC_CT_FOCUS_ABSOLUTE_CONTROL = 0x6,UVC_CT_FOCUS_RELATIVE_CONTROL = 0x7,UVC_CT_FOCUS_AUTO_CONTROL = 0x8,UVC_CT_IRIS_ABSOLUTE_CONTROL = 0x9,UVC_CT_IRIS_RELATIVE_CONTROL = 0xA,UVC_CT_ZOOM_ABSOLUTE_CONTROL = 0xB,UVC_CT_ZOOM_RELATIVE_CONTROL = 0xC,UVC_CT_PANTILT_ABSOLUTE_CONTROL = 0xD,UVC_CT_PANTILT_RELATIVE_CONTROL = 0xE,UVC_CT_ROLL_ABSOLUTE_CONTROL = 0xF,UVC_CT_ROLL_RELATIVE_CONTROL = 0x10,UVC_CT_PRIVACY_CONTROL = 0x11,UVC_PU_CONTROL_UNDEFINED = 0x0,UVC_PU_BACKLIGHT_COMPENSATION_CONTROL = 0x1,UVC_PU_BRIGHTNESS_CONTROL = 0x2,UVC_PU_CONTRAST_CONTROL = 0x3,UVC_PU_GAIN_CONTROL = 0x4,UVC_PU_POWER_LINE_FREQUENCY_CONTROL = 0x5,UVC_PU_HUE_CONTROL = 0x6,UVC_PU_SATURATION_CONTROL = 0x7,UVC_PU_SHARPNESS_CONTROL = 0x8,UVC_PU_GAMMA_CONTROL = 0x9,UVC_PU_WHITE_BALANCE_TEMPERATURE_CONTROL = 0xA,UVC_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL = 0xB,UVC_PU_WHITE_BALANCE_COMPONENT_CONTROL = 0xC,UVC_PU_WHITE_BALANCE_COMPONENT_AUTO_CONTROL = 0xD,UVC_PU_DIGITAL_MULTIPLIER_CONTROL = 0xE,UVC_PU_DIGITAL_MULTIPLIER_LIMIT_CONTROL = 0xF,UVC_PU_HUE_AUTO_CONTROL = 0x10,UVC_PU_ANALOG_VIDEO_STANDARD_CONTROL = 0x11,UVC_PU_ANALOG_LOCK_STATUS_CONTROL = 0x12,UVC_VS_CONTROL_UNDEFINED = 0x0,UVC_VS_PROBE_CONTROL = 0x1,UVC_VS_COMMIT_CONTROL = 0x2,UVC_VS_STILL_PROBE_CONTROL = 0x3,UVC_VS_STILL_COMMIT_CONTROL = 0x4,UVC_VS_STILL_IMAGE_TRIGGER_CONTROL = 0x5,UVC_VS_STREAM_ERROR_CODE_CONTROL = 0x6,UVC_VS_GENERATE_KEY_FRAME_CONTROL = 0x7,UVC_VS_UPDATE_FRAME_SEGMENT_CONTROL = 0x8,UVC_VS_SYNC_DELAY_CONTROL = 0x9,UVC_TT_VENDOR_SPECIFIC = 0x100,UVC_TT_STREAMING = 0x101,UVC_ITT_VENDOR_SPECIFIC = 0x200,UVC_ITT_CAMERA = 0x201,UVC_ITT_MEDIA_TRANSPORT_INPUT = 0x202,UVC_OTT_VENDOR_SPECIFIC = 0x300,UVC_OTT_DISPLAY = 0x301,UVC_OTT_MEDIA_TRANSPORT_OUTPUT = 0x302,UVC_EXTERNAL_VENDOR_SPECIFIC = 0x400,UVC_COMPOSITE_CONNECTOR = 0x401,UVC_SVIDEO_CONNECTOR = 0x402,UVC_COMPONENT_CONNECTOR = 0x403,UVC_STATUS_TYPE_CONTROL = 0x1,UVC_STATUS_TYPE_STREAMING = 0x2,UVC_STREAM_EOH = 0x80,UVC_STREAM_ERR = 0x40,UVC_STREAM_STI = 0x20,UVC_STREAM_RES = 0x10,UVC_STREAM_SCR = 0x8,UVC_STREAM_PTS = 0x4,UVC_STREAM_EOF = 0x2,UVC_STREAM_FID = 0x1,UVC_CONTROL_CAP_GET = 0x1,UVC_CONTROL_CAP_SET = 0x2,UVC_CONTROL_CAP_DISABLED = 0x4,UVC_CONTROL_CAP_AUTOUPDATE = 0x8,UVC_CONTROL_CAP_ASYNCHRONOUS = 0x10,UVC_DT_INPUT_TERMINAL_SIZE = 0x8,UVC_DT_OUTPUT_TERMINAL_SIZE = 0x9,UVC_DT_CONTROL_ENDPOINT_SIZE = 0x5,UVC_DT_COLOR_MATCHING_SIZE = 0x6,UVC_DT_FORMAT_UNCOMPRESSED_SIZE = 0x1B,UVC_DT_FORMAT_MJPEG_SIZE = 0xB,};
enum MACRO_VBE {VBE_CAP_CAN_SWITCH_DAC = 0x1,VBE_CAP_VGACOMPAT = 0x2,};
enum MACRO_VER {VER_DEF_NONE = 0,VER_DEF_CURRENT = 1,VER_DEF_NUM = 2,VER_FLG_BASE = 1,VER_FLG_WEAK = 2,VER_NDX_LOCAL = 0,VER_NDX_GLOBAL = 1,VER_NDX_LORESERVE = 65280,VER_NDX_ELIMINATE = 65281,VER_NEED_NONE = 0,VER_NEED_CURRENT = 1,VER_NEED_NUM = 2,};
enum MACRO_VFS {VFS_CAP_REVISION_MASK = 0xFF000000,VFS_CAP_REVISION_SHIFT = 0x18,VFS_CAP_FLAGS_MASK = 0xFFFFFF,VFS_CAP_FLAGS_EFFECTIVE = 0x1,VFS_CAP_REVISION_1 = 0x1000000,VFS_CAP_U32_1 = 0x1,VFS_CAP_REVISION_2 = 0x2000000,VFS_CAP_U32_2 = 0x2,VFS_CAP_U32 = 0x2,VFS_CAP_REVISION = 0x2000000,};
enum MACRO_VGA {NORMAL_VGA = 0xFFFF,EXTENDED_VGA = 0xFFFE,ASK_VGA = 0xFFFD,};
enum MACRO_VMX {VMX_BASIC_VMCS_SIZE_SHIFT = 32,VMX_BASIC_64 = 281474976710656,VMX_BASIC_MEM_TYPE_SHIFT = 50,VMX_BASIC_MEM_TYPE_MASK = 16888498602639360,VMX_BASIC_MEM_TYPE_WB = 6,VMX_BASIC_INOUT = 18014398509481984,};
enum MACRO_VOL {VOL_METHOD_ADAGIO = 1,VOL_METHOD_LINEAR = 2,};
enum MACRO_VT0 {VT0 = 0x0,VT1 = 0x4000,};
enum MACRO_WIN {WIN_RAM = 0x1,WIN_CREG = 0x14000001,};
enum MACRO_X25 {X25_IFACE_DATA = 0x0,X25_IFACE_CONNECT = 0x1,X25_IFACE_DISCONNECT = 0x2,X25_IFACE_PARAMS = 0x3,};
enum MACRO_X86 {X86_EFLAGS_CF_BIT = 0,X86_EFLAGS_CF = 1,X86_EFLAGS_FIXED_BIT = 1,X86_EFLAGS_FIXED = 2,X86_EFLAGS_PF_BIT = 2,X86_EFLAGS_PF = 4,X86_EFLAGS_AF_BIT = 4,X86_EFLAGS_AF = 16,X86_EFLAGS_ZF_BIT = 6,X86_EFLAGS_ZF = 64,X86_EFLAGS_SF_BIT = 7,X86_EFLAGS_SF = 128,X86_EFLAGS_TF_BIT = 8,X86_EFLAGS_TF = 256,X86_EFLAGS_IF_BIT = 9,X86_EFLAGS_IF = 512,X86_EFLAGS_DF_BIT = 10,X86_EFLAGS_DF = 1024,X86_EFLAGS_OF_BIT = 11,X86_EFLAGS_OF = 2048,X86_EFLAGS_IOPL_BIT = 12,X86_EFLAGS_IOPL = 12288,X86_EFLAGS_NT_BIT = 14,X86_EFLAGS_NT = 16384,X86_EFLAGS_RF_BIT = 16,X86_EFLAGS_RF = 65536,X86_EFLAGS_VM_BIT = 17,X86_EFLAGS_VM = 131072,X86_EFLAGS_AC_BIT = 18,X86_EFLAGS_AC = 262144,X86_EFLAGS_VIF_BIT = 19,X86_EFLAGS_VIF = 524288,X86_EFLAGS_VIP_BIT = 20,X86_EFLAGS_VIP = 1048576,X86_EFLAGS_ID_BIT = 21,X86_EFLAGS_ID = 2097152,X86_CR0_PE_BIT = 0,X86_CR0_PE = 1,X86_CR0_MP_BIT = 1,X86_CR0_MP = 2,X86_CR0_EM_BIT = 2,X86_CR0_EM = 4,X86_CR0_TS_BIT = 3,X86_CR0_TS = 8,X86_CR0_ET_BIT = 4,X86_CR0_ET = 16,X86_CR0_NE_BIT = 5,X86_CR0_NE = 32,X86_CR0_WP_BIT = 16,X86_CR0_WP = 65536,X86_CR0_AM_BIT = 18,X86_CR0_AM = 262144,X86_CR0_NW_BIT = 29,X86_CR0_NW = 536870912,X86_CR0_CD_BIT = 30,X86_CR0_CD = 1073741824,X86_CR0_PG_BIT = 31,X86_CR0_PG = 2147483648,X86_CR3_PWT_BIT = 3,X86_CR3_PWT = 8,X86_CR3_PCD_BIT = 4,X86_CR3_PCD = 16,X86_CR3_PCID_MASK = 4095,X86_CR4_VME_BIT = 0,X86_CR4_VME = 1,X86_CR4_PVI_BIT = 1,X86_CR4_PVI = 2,X86_CR4_TSD_BIT = 2,X86_CR4_TSD = 4,X86_CR4_DE_BIT = 3,X86_CR4_DE = 8,X86_CR4_PSE_BIT = 4,X86_CR4_PSE = 16,X86_CR4_PAE_BIT = 5,X86_CR4_PAE = 32,X86_CR4_MCE_BIT = 6,X86_CR4_MCE = 64,X86_CR4_PGE_BIT = 7,X86_CR4_PGE = 128,X86_CR4_PCE_BIT = 8,X86_CR4_PCE = 256,X86_CR4_OSFXSR_BIT = 9,X86_CR4_OSFXSR = 512,X86_CR4_OSXMMEXCPT_BIT = 10,X86_CR4_OSXMMEXCPT = 1024,X86_CR4_VMXE_BIT = 13,X86_CR4_VMXE = 8192,X86_CR4_SMXE_BIT = 14,X86_CR4_SMXE = 16384,X86_CR4_FSGSBASE_BIT = 16,X86_CR4_FSGSBASE = 65536,X86_CR4_PCIDE_BIT = 17,X86_CR4_PCIDE = 131072,X86_CR4_OSXSAVE_BIT = 18,X86_CR4_OSXSAVE = 262144,X86_CR4_SMEP_BIT = 20,X86_CR4_SMEP = 1048576,X86_CR4_SMAP_BIT = 21,X86_CR4_SMAP = 2097152,X86_CR8_TPR = 15,};
enum MACRO_X87 {X87_DOUBLE_ROUNDING = 1,};
enum MACRO_XAG {XAG_MAJOR_VERSION = 1,XAG_MINOR_VERSION = 0,};
enum MACRO_XCB {XCB_CONN_ERROR = 1,XCB_CONN_CLOSED_EXT_NOTSUPPORTED = 2,XCB_CONN_CLOSED_MEM_INSUFFICIENT = 3,XCB_CONN_CLOSED_REQ_LEN_EXCEED = 4,XCB_CONN_CLOSED_PARSE_ERR = 5,XCB_CONN_CLOSED_INVALID_SCREEN = 6,XCB_KEY_PRESS = 2,XCB_KEY_RELEASE = 3,XCB_BUTTON_PRESS = 4,XCB_BUTTON_RELEASE = 5,XCB_MOTION_NOTIFY = 6,XCB_ENTER_NOTIFY = 7,XCB_LEAVE_NOTIFY = 8,XCB_FOCUS_IN = 9,XCB_FOCUS_OUT = 10,XCB_KEYMAP_NOTIFY = 11,XCB_EXPOSE = 12,XCB_GRAPHICS_EXPOSURE = 13,XCB_NO_EXPOSURE = 14,XCB_VISIBILITY_NOTIFY = 15,XCB_CREATE_NOTIFY = 16,XCB_DESTROY_NOTIFY = 17,XCB_UNMAP_NOTIFY = 18,XCB_MAP_NOTIFY = 19,XCB_MAP_REQUEST = 20,XCB_REPARENT_NOTIFY = 21,XCB_CONFIGURE_NOTIFY = 22,XCB_CONFIGURE_REQUEST = 23,XCB_GRAVITY_NOTIFY = 24,XCB_RESIZE_REQUEST = 25,XCB_CIRCULATE_NOTIFY = 26,XCB_CIRCULATE_REQUEST = 27,XCB_PROPERTY_NOTIFY = 28,XCB_SELECTION_CLEAR = 29,XCB_SELECTION_REQUEST = 30,XCB_SELECTION_NOTIFY = 31,XCB_COLORMAP_NOTIFY = 32,XCB_CLIENT_MESSAGE = 33,XCB_MAPPING_NOTIFY = 34,XCB_REQUEST = 1,XCB_VALUE = 2,XCB_WINDOW = 3,XCB_PIXMAP = 4,XCB_ATOM = 5,XCB_CURSOR = 6,XCB_FONT = 7,XCB_MATCH = 8,XCB_DRAWABLE = 9,XCB_ACCESS = 10,XCB_ALLOC = 11,XCB_COLORMAP = 12,XCB_G_CONTEXT = 13,XCB_ID_CHOICE = 14,XCB_NAME = 15,XCB_LENGTH = 16,XCB_IMPLEMENTATION = 17,XCB_CREATE_WINDOW = 1,XCB_CHANGE_WINDOW_ATTRIBUTES = 2,XCB_GET_WINDOW_ATTRIBUTES = 3,XCB_DESTROY_WINDOW = 4,XCB_DESTROY_SUBWINDOWS = 5,XCB_CHANGE_SAVE_SET = 6,XCB_REPARENT_WINDOW = 7,XCB_MAP_WINDOW = 8,XCB_MAP_SUBWINDOWS = 9,XCB_UNMAP_WINDOW = 10,XCB_UNMAP_SUBWINDOWS = 11,XCB_CONFIGURE_WINDOW = 12,XCB_CIRCULATE_WINDOW = 13,XCB_GET_GEOMETRY = 14,XCB_QUERY_TREE = 15,XCB_INTERN_ATOM = 16,XCB_GET_ATOM_NAME = 17,XCB_CHANGE_PROPERTY = 18,XCB_DELETE_PROPERTY = 19,XCB_GET_PROPERTY = 20,XCB_LIST_PROPERTIES = 21,XCB_SET_SELECTION_OWNER = 22,XCB_GET_SELECTION_OWNER = 23,XCB_CONVERT_SELECTION = 24,XCB_SEND_EVENT = 25,XCB_GRAB_POINTER = 26,XCB_UNGRAB_POINTER = 27,XCB_GRAB_BUTTON = 28,XCB_UNGRAB_BUTTON = 29,XCB_CHANGE_ACTIVE_POINTER_GRAB = 30,XCB_GRAB_KEYBOARD = 31,XCB_UNGRAB_KEYBOARD = 32,XCB_GRAB_KEY = 33,XCB_UNGRAB_KEY = 34,XCB_ALLOW_EVENTS = 35,XCB_GRAB_SERVER = 36,XCB_UNGRAB_SERVER = 37,XCB_QUERY_POINTER = 38,XCB_GET_MOTION_EVENTS = 39,XCB_TRANSLATE_COORDINATES = 40,XCB_WARP_POINTER = 41,XCB_SET_INPUT_FOCUS = 42,XCB_GET_INPUT_FOCUS = 43,XCB_QUERY_KEYMAP = 44,XCB_OPEN_FONT = 45,XCB_CLOSE_FONT = 46,XCB_QUERY_FONT = 47,XCB_QUERY_TEXT_EXTENTS = 48,XCB_LIST_FONTS = 49,XCB_LIST_FONTS_WITH_INFO = 50,XCB_SET_FONT_PATH = 51,XCB_GET_FONT_PATH = 52,XCB_CREATE_PIXMAP = 53,XCB_FREE_PIXMAP = 54,XCB_CREATE_GC = 55,XCB_CHANGE_GC = 56,XCB_COPY_GC = 57,XCB_SET_DASHES = 58,XCB_SET_CLIP_RECTANGLES = 59,XCB_FREE_GC = 60,XCB_CLEAR_AREA = 61,XCB_COPY_AREA = 62,XCB_COPY_PLANE = 63,XCB_POLY_POINT = 64,XCB_POLY_LINE = 65,XCB_POLY_SEGMENT = 66,XCB_POLY_RECTANGLE = 67,XCB_POLY_ARC = 68,XCB_FILL_POLY = 69,XCB_POLY_FILL_RECTANGLE = 70,XCB_POLY_FILL_ARC = 71,XCB_PUT_IMAGE = 72,XCB_GET_IMAGE = 73,XCB_POLY_TEXT_8 = 74,XCB_POLY_TEXT_16 = 75,XCB_IMAGE_TEXT_8 = 76,XCB_IMAGE_TEXT_16 = 77,XCB_CREATE_COLORMAP = 78,XCB_FREE_COLORMAP = 79,XCB_COPY_COLORMAP_AND_FREE = 80,XCB_INSTALL_COLORMAP = 81,XCB_UNINSTALL_COLORMAP = 82,XCB_LIST_INSTALLED_COLORMAPS = 83,XCB_ALLOC_COLOR = 84,XCB_ALLOC_NAMED_COLOR = 85,XCB_ALLOC_COLOR_CELLS = 86,XCB_ALLOC_COLOR_PLANES = 87,XCB_FREE_COLORS = 88,XCB_STORE_COLORS = 89,XCB_STORE_NAMED_COLOR = 90,XCB_QUERY_COLORS = 91,XCB_LOOKUP_COLOR = 92,XCB_CREATE_CURSOR = 93,XCB_CREATE_GLYPH_CURSOR = 94,XCB_FREE_CURSOR = 95,XCB_RECOLOR_CURSOR = 96,XCB_QUERY_BEST_SIZE = 97,XCB_QUERY_EXTENSION = 98,XCB_LIST_EXTENSIONS = 99,XCB_CHANGE_KEYBOARD_MAPPING = 100,XCB_GET_KEYBOARD_MAPPING = 101,XCB_CHANGE_KEYBOARD_CONTROL = 102,XCB_GET_KEYBOARD_CONTROL = 103,XCB_BELL = 104,XCB_CHANGE_POINTER_CONTROL = 105,XCB_GET_POINTER_CONTROL = 106,XCB_SET_SCREEN_SAVER = 107,XCB_GET_SCREEN_SAVER = 108,XCB_CHANGE_HOSTS = 109,XCB_LIST_HOSTS = 110,XCB_SET_ACCESS_CONTROL = 111,XCB_SET_CLOSE_DOWN_MODE = 112,XCB_KILL_CLIENT = 113,XCB_ROTATE_PROPERTIES = 114,XCB_FORCE_SCREEN_SAVER = 115,XCB_SET_POINTER_MAPPING = 116,XCB_GET_POINTER_MAPPING = 117,XCB_SET_MODIFIER_MAPPING = 118,XCB_GET_MODIFIER_MAPPING = 119,XCB_NO_OPERATION = 127,XCB_NONE = 0,XCB_COPY_FROM_PARENT = 0,XCB_CURRENT_TIME = 0,XCB_NO_SYMBOL = 0,};
enum MACRO_XFD {XFD_SETSIZE = 256,};
enum MACRO_XID {CLGET_XID = 10,CLSET_XID = 11,};
enum MACRO_XLF {XLF_KERNEL_64 = 1,XLF_CAN_BE_LOADED_ABOVE_4G = 2,XLF_EFI_HANDOVER_32 = 4,XLF_EFI_HANDOVER_64 = 8,};
enum MACRO_XMD {XMD_H = 1,};
enum MACRO_XQM {XQM_USRQUOTA = 0,XQM_GRPQUOTA = 1,XQM_PRJQUOTA = 2,XQM_MAXQUOTAS = 3,};
enum MACRO_XWD {XWD_FILE_VERSION = 7,};
enum MACRO_YPU {YPU_PROG = 100028,YPU_VERS = 1,YPU_CHANGE = 1,YPU_INSERT = 2,YPU_DELETE = 3,YPU_STORE = 4,};
enum MACRO_ZMH {ZMH_VC = 1,ZMH_DG = 2,ZMH_AUTH = 4,};
enum MACRO__FE {_FE_INVALID = 0x1,_FE_DIVBYZERO = 0x4,_FE_OVERFLOW = 0x8,_FE_UNDERFLOW = 0x10,_FE_INEXACT = 0x20,_FE_TONEAREST = 0x0,_FE_DOWNWARD = 0x400,_FE_UPWARD = 0x800,_FE_TOWARDZERO = 0xC00,};
enum MACRO__FP {_FP_NAN = 0,_FP_INFINITE = 1,_FP_ZERO = 2,_FP_SUBNORMAL = 3,_FP_NORMAL = 4,};
enum MACRO__IO {_IO_HAVE_ST_BLKSIZE = 0,_IO_BUFSIZ = 8192,_IO_UNIFIED_JUMPTABLES = 1,};
enum MACRO__RE {_RE_COMP_H = 1,_REGEX_H = 1,};
enum MACRO__SS {_SS_SIZE = 128,};
enum MACRO__UA {_UA_SEARCH_PHASE = 1,_UA_CLEANUP_PHASE = 2,_UA_HANDLER_FRAME = 4,_UA_FORCE_UNWIND = 8,_UA_END_OF_STACK = 16,};
enum MACRO__XT {_XT_TIME_H = 1,_XT_U32_H = 1,};
enum MACRO___F {__F_SETOWN = 8,__F_GETOWN = 9,};
enum MACRO___O {__O_LARGEFILE = 0,};
enum MACRO___S {__S_IFMT = 0xF000,__S_IFDIR = 0x4000,__S_IFCHR = 0x2000,__S_IFBLK = 0x6000,__S_IFREG = 0x8000,__S_IFIFO = 0x1000,__S_IFLNK = 0xA000,__S_IFSOCK = 0xC000,__S_ISUID = 0x800,__S_ISGID = 0x400,__S_ISVTX = 0x200,__S_IREAD = 0x100,__S_IWRITE = 0x80,__S_IEXEC = 0x40,};
enum MACRO___W {__W_CONTINUED = 0xFFFF,};
enum MACRO_acs {acs_chars_index = 146,};
typedef void (*Menu_Hook)(struct tagMENU *);
typedef struct timeval **OSTimePtr;
typedef struct _ED8D04F85EE8AAEAC5043F9A38E051F9 PHONE_CID;
typedef struct _19819260117A2122793EF6A7F838A8D8 RECTANGLE;
typedef struct sg_io_hdr Sg_io_hdr;
typedef struct sg_io_vec Sg_io_vec;
typedef struct _28DBCFF2F5EB26695C388B23D6931809 XAnyEvent;
typedef struct _BEA3E970906BDE5578391186783FC521 XExtCodes;
typedef struct _E38CC4C8385B7649E275253761B49FA9 XFontProp;
typedef struct _B584FC37E760C222478B879BC253DCF4 XGCValues;
typedef struct _DD1A60F664AD301361B26C5800787B5E XIMStyles;
typedef struct _A386896A7A6A8667CB6DAB8066B01EA8 XIconSize;
typedef struct _3C57A176DA13593CE98DBC4E12CE23DD XKeyEvent;
typedef struct _4E034CF603E977B1C171CF8061167D87 XMapEvent;
typedef struct _636E06EF14FC653C9FA755BCE21D4A3F XTextItem;
typedef struct _CC029EE2801424412B933EF9795F5046 XcmsColor;
typedef double XcmsFloat;
typedef union _XkbAction XkbAction;
typedef struct _XkbKey *XkbKeyPtr;
typedef struct _XkbKey XkbKeyRec;
typedef struct _XkbRow *XkbRowPtr;
typedef struct _XkbRow XkbRowRec;
typedef char *XrmString;
struct _FontProp {__int64 name;__int64 value;};
typedef struct _9E637E3D30D4EE6DC2F7DCF094554036 _G_fpos_t;
struct _XPrivate;
struct _XkbColor {unsigned int pixel;char *spec;};
struct _XkbPoint {__int16 x;__int16 y;};
typedef char *__caddr_t;
typedef __int64 __clock_t;
typedef int __daddr_t;
typedef __int64 __fd_mask;
typedef struct __gconv_info *__gconv_t;
typedef unsigned __int64 __ino64_t;
typedef signed __int16 __int16_t;
typedef signed int __int32_t;
typedef signed __int64 __int64_t;
typedef __int64 __jmp_buf[8];
typedef unsigned __int64 __nlink_t;
enum __ns_flag {ns_f_qr = 0x0,ns_f_opcode = 0x1,ns_f_aa = 0x2,ns_f_tc = 0x3,ns_f_rd = 0x4,ns_f_ra = 0x5,ns_f_z = 0x6,ns_f_ad = 0x7,ns_f_cd = 0x8,ns_f_rcode = 0x9,ns_f_max = 0xA,};
enum __ns_sect {ns_s_qd = 0x0,ns_s_zn = 0x0,ns_s_an = 0x1,ns_s_pr = 0x1,ns_s_ns = 0x2,ns_s_ud = 0x2,ns_s_ar = 0x3,ns_s_max = 0x4,};
enum __ns_type {ns_t_invalid = 0x0,ns_t_a = 0x1,ns_t_ns = 0x2,ns_t_md = 0x3,ns_t_mf = 0x4,ns_t_cname = 0x5,ns_t_soa = 0x6,ns_t_mb = 0x7,ns_t_mg = 0x8,ns_t_mr = 0x9,ns_t_null = 0xA,ns_t_wks = 0xB,ns_t_ptr = 0xC,ns_t_hinfo = 0xD,ns_t_minfo = 0xE,ns_t_mx = 0xF,ns_t_txt = 0x10,ns_t_rp = 0x11,ns_t_afsdb = 0x12,ns_t_x25 = 0x13,ns_t_isdn = 0x14,ns_t_rt = 0x15,ns_t_nsap = 0x16,ns_t_nsap_ptr = 0x17,ns_t_sig = 0x18,ns_t_key = 0x19,ns_t_px = 0x1A,ns_t_gpos = 0x1B,ns_t_aaaa = 0x1C,ns_t_loc = 0x1D,ns_t_nxt = 0x1E,ns_t_eid = 0x1F,ns_t_nimloc = 0x20,ns_t_srv = 0x21,ns_t_atma = 0x22,ns_t_naptr = 0x23,ns_t_kx = 0x24,ns_t_cert = 0x25,ns_t_a6 = 0x26,ns_t_dname = 0x27,ns_t_sink = 0x28,ns_t_opt = 0x29,ns_t_apl = 0x2A,ns_t_tkey = 0xF9,ns_t_tsig = 0xFA,ns_t_ixfr = 0xFB,ns_t_axfr = 0xFC,ns_t_mailb = 0xFD,ns_t_maila = 0xFE,ns_t_any = 0xFF,ns_t_zxfr = 0x100,ns_t_max = 0x10000,};
typedef __int64 __off64_t;
typedef __int64 __ssize_t;
typedef void *__timer_t;
typedef unsigned __int16 __u_short;
typedef unsigned __int8 __uint8_t;
typedef struct _agp_setup agp_setup;
struct atm_iobuf {int length;void *buffer;};
enum auth_stat {AUTH_OK = 0x0,AUTH_BADCRED = 0x1,AUTH_REJECTEDCRED = 0x2,AUTH_BADVERF = 0x3,AUTH_REJECTEDVERF = 0x4,AUTH_TOOWEAK = 0x5,AUTH_INVALIDRESP = 0x6,AUTH_FAILED = 0x7,};
typedef char *bp_path_t;
typedef struct ca_caps ca_caps_t;
enum can_state {CAN_STATE_ERROR_ACTIVE = 0x0,CAN_STATE_ERROR_WARNING = 0x1,CAN_STATE_ERROR_PASSIVE = 0x2,CAN_STATE_BUS_OFF = 0x3,CAN_STATE_STOPPED = 0x4,CAN_STATE_SLEEPING = 0x5,CAN_STATE_MAX = 0x6,};
struct cdrom_blk {unsigned int from;unsigned __int16 len;};
enum cee_attrs {DCB_ATTR_CEE_UNSPEC = 0x0,DCB_ATTR_CEE_PEER_PG = 0x1,DCB_ATTR_CEE_PEER_PFC = 0x2,DCB_ATTR_CEE_PEER_APP_TABLE = 0x3,DCB_ATTR_CEE_TX_PG = 0x4,DCB_ATTR_CEE_RX_PG = 0x5,DCB_ATTR_CEE_PFC = 0x6,DCB_ATTR_CEE_APP_TABLE = 0x7,DCB_ATTR_CEE_FEAT = 0x8,__DCB_ATTR_CEE_MAX = 0x9,};
enum clnt_stat {RPC_SUCCESS = 0x0,RPC_CANTENCODEARGS = 0x1,RPC_CANTDECODERES = 0x2,RPC_CANTSEND = 0x3,RPC_CANTRECV = 0x4,RPC_TIMEDOUT = 0x5,RPC_VERSMISMATCH = 0x6,RPC_AUTHERROR = 0x7,RPC_PROGUNAVAIL = 0x8,RPC_PROGVERSMISMATCH = 0x9,RPC_PROCUNAVAIL = 0xA,RPC_CANTDECODEARGS = 0xB,RPC_SYSTEMERROR = 0xC,RPC_NOBROADCAST = 0x15,RPC_UNKNOWNHOST = 0xD,RPC_UNKNOWNPROTO = 0x11,RPC_UNKNOWNADDR = 0x13,RPC_RPCBFAILURE = 0xE,RPC_PROGNOTREGISTERED = 0xF,RPC_N2AXLATEFAILURE = 0x16,RPC_FAILED = 0x10,RPC_INTR = 0x12,RPC_TLIERROR = 0x14,RPC_UDERROR = 0x17,RPC_INPROGRESS = 0x18,RPC_STALERACHANDLE = 0x19,};
typedef struct _18A7FF309BE85B010DF59BF700116658 cpu_set_t;
enum ctattr_ip {CTA_IP_UNSPEC = 0x0,CTA_IP_V4_SRC = 0x1,CTA_IP_V4_DST = 0x2,CTA_IP_V6_SRC = 0x3,CTA_IP_V6_DST = 0x4,__CTA_IP_MAX = 0x5,};
struct edid_info {unsigned __int8 dummy[128];};
struct exception {int type;char *name;double arg1;double arg2;double retval;};
enum fc_ct_cmd {FC_FS_RJT = 0x8001,FC_FS_ACC = 0x8002,};
enum fc_ct_rev {FC_CT_REV = 0x1,};
enum fc_ns_req {FC_NS_GA_NXT = 0x100,FC_NS_GI_A = 0x101,FC_NS_GPN_ID = 0x112,FC_NS_GNN_ID = 0x113,FC_NS_GSPN_ID = 0x118,FC_NS_GID_PN = 0x121,FC_NS_GID_NN = 0x131,FC_NS_GID_FT = 0x171,FC_NS_GPN_FT = 0x172,FC_NS_GID_PT = 0x1A1,FC_NS_RPN_ID = 0x212,FC_NS_RNN_ID = 0x213,FC_NS_RFT_ID = 0x217,FC_NS_RSPN_ID = 0x218,FC_NS_RFF_ID = 0x21F,FC_NS_RSNN_NN = 0x239,};
enum fe_status {FE_HAS_SIGNAL = 0x1,FE_HAS_CARRIER = 0x2,FE_HAS_VITERBI = 0x4,FE_HAS_SYNC = 0x8,FE_HAS_LOCK = 0x10,FE_TIMEDOUT = 0x20,FE_REINIT = 0x40,};
typedef unsigned __int16 fexcept_t;
typedef struct _FDFBD601B4BD2833D8A740F2A9550A80 fsFakeReq;
struct hpet_info {unsigned __int64 hi_ireqfreq;unsigned __int64 hi_flags;unsigned __int16 hi_hpet;unsigned __int16 hi_timer;};
enum i2400m_cs {I2400M_CS_IPV4_0 = 0x0,I2400M_CS_IPV4 = 0x2,};
enum i2400m_ms {I2400M_MS_DONE_OK = 0x0,I2400M_MS_DONE_IN_PROGRESS = 0x1,I2400M_MS_INVALID_OP = 0x2,I2400M_MS_BAD_STATE = 0x3,I2400M_MS_ILLEGAL_VALUE = 0x4,I2400M_MS_MISSING_PARAMS = 0x5,I2400M_MS_VERSION_ERROR = 0x6,I2400M_MS_ACCESSIBILITY_ERROR = 0x7,I2400M_MS_BUSY = 0x8,I2400M_MS_CORRUPTED_TLV = 0x9,I2400M_MS_UNINITIALIZED = 0xA,I2400M_MS_UNKNOWN_ERROR = 0xB,I2400M_MS_PRODUCTION_ERROR = 0xC,I2400M_MS_NO_RF = 0xD,I2400M_MS_NOT_READY_FOR_POWERSAVE = 0xE,I2400M_MS_THERMAL_CRITICAL = 0xF,I2400M_MS_MAX = 0x10,};
enum i2400m_mt {I2400M_MT_RESERVED = 0x0,I2400M_MT_INVALID = 0xFFFF,I2400M_MT_REPORT_MASK = 0x8000,I2400M_MT_GET_SCAN_RESULT = 0x4202,I2400M_MT_SET_SCAN_PARAM = 0x4402,I2400M_MT_CMD_RF_CONTROL = 0x4602,I2400M_MT_CMD_SCAN = 0x4603,I2400M_MT_CMD_CONNECT = 0x4604,I2400M_MT_CMD_DISCONNECT = 0x4605,I2400M_MT_CMD_EXIT_IDLE = 0x4606,I2400M_MT_GET_LM_VERSION = 0x5201,I2400M_MT_GET_DEVICE_INFO = 0x5202,I2400M_MT_GET_LINK_STATUS = 0x5203,I2400M_MT_GET_STATISTICS = 0x5204,I2400M_MT_GET_STATE = 0x5205,I2400M_MT_GET_MEDIA_STATUS = 0x5206,I2400M_MT_SET_INIT_CONFIG = 0x5404,I2400M_MT_CMD_INIT = 0x5601,I2400M_MT_CMD_TERMINATE = 0x5602,I2400M_MT_CMD_MODE_OF_OP = 0x5603,I2400M_MT_CMD_RESET_DEVICE = 0x5604,I2400M_MT_CMD_MONITOR_CONTROL = 0x5605,I2400M_MT_CMD_ENTER_POWERSAVE = 0x5606,I2400M_MT_GET_TLS_OPERATION_RESULT = 0x6201,I2400M_MT_SET_EAP_SUCCESS = 0x6402,I2400M_MT_SET_EAP_FAIL = 0x6403,I2400M_MT_SET_EAP_KEY = 0x6404,I2400M_MT_CMD_SEND_EAP_RESPONSE = 0x6602,I2400M_MT_REPORT_SCAN_RESULT = 0xC002,I2400M_MT_REPORT_STATE = 0xD002,I2400M_MT_REPORT_POWERSAVE_READY = 0xD005,I2400M_MT_REPORT_EAP_REQUEST = 0xE002,I2400M_MT_REPORT_EAP_RESTART = 0xE003,I2400M_MT_REPORT_ALT_ACCEPT = 0xE004,I2400M_MT_REPORT_KEY_REQUEST = 0xE005,};
enum i2400m_pt {I2400M_PT_DATA = 0x0,I2400M_PT_CTRL = 0x1,I2400M_PT_TRACE = 0x2,I2400M_PT_RESET_WARM = 0x3,I2400M_PT_RESET_COLD = 0x4,I2400M_PT_EDATA = 0x5,I2400M_PT_ILLEGAL = 0x6,};
enum i2400m_ro {I2400M_RO_NEEDED = 0x1,I2400M_RO_TYPE = 0x3,I2400M_RO_TYPE_SHIFT = 0x1,I2400M_RO_CIN = 0xF,I2400M_RO_CIN_SHIFT = 0x4,I2400M_RO_FBN = 0x7FF,I2400M_RO_FBN_SHIFT = 0x8,I2400M_RO_SN = 0x7FF,I2400M_RO_SN_SHIFT = 0x15,};
struct ifinfomsg {unsigned __int8 ifi_family;unsigned __int8 __ifi_pad;unsigned __int16 ifi_type;int ifi_index;unsigned int ifi_flags;unsigned int ifi_change;};
enum ifla_caif {__IFLA_CAIF_UNSPEC = 0x0,IFLA_CAIF_IPV4_CONNID = 0x1,IFLA_CAIF_IPV6_CONNID = 0x2,IFLA_CAIF_LOOPBACK = 0x3,__IFLA_CAIF_MAX = 0x4,};
typedef struct _AC1F0727205AA235F31FA7E4FBAB6931 imaxdiv_t;
struct ip_addr_t {char net;char host;char lh;char impno;};
struct ipmi_addr {int addr_type;__int16 channel;char data[32];};
enum ipset_adt {IPSET_ADD = 0x0,IPSET_DEL = 0x1,IPSET_TEST = 0x2,IPSET_ADT_MAX = 0x3,IPSET_CREATE = 0x3,IPSET_CADT_MAX = 0x4,};
enum ipset_cmd {IPSET_CMD_NONE = 0x0,IPSET_CMD_PROTOCOL = 0x1,IPSET_CMD_CREATE = 0x2,IPSET_CMD_DESTROY = 0x3,IPSET_CMD_FLUSH = 0x4,IPSET_CMD_RENAME = 0x5,IPSET_CMD_SWAP = 0x6,IPSET_CMD_LIST = 0x7,IPSET_CMD_SAVE = 0x8,IPSET_CMD_ADD = 0x9,IPSET_CMD_DEL = 0xA,IPSET_CMD_TEST = 0xB,IPSET_CMD_HEADER = 0xC,IPSET_CMD_TYPE = 0xD,IPSET_MSG_MAX = 0xE,IPSET_CMD_RESTORE = 0xE,IPSET_CMD_HELP = 0xF,IPSET_CMD_VERSION = 0x10,IPSET_CMD_QUIT = 0x11,IPSET_CMD_MAX = 0x12,IPSET_CMD_COMMIT = 0x12,};
struct kbdiacruc {unsigned int diacr;unsigned int base;unsigned int result;};
struct kbkeycode {unsigned int scancode;unsigned int keycode;};
enum keystatus {KEY_SUCCESS = 0x0,KEY_NOSECRET = 0x1,KEY_UNKNOWN = 0x2,KEY_SYSTEMERR = 0x3,};
enum klm_stats {klm_granted = 0x0,klm_denied = 0x1,klm_denied_nolocks = 0x2,klm_working = 0x3,};
struct list_head;
typedef struct mountbody *mountlist;
enum nfs_ftype {NFNON = 0x0,NFREG = 0x1,NFDIR = 0x2,NFBLK = 0x3,NFCHR = 0x4,NFLNK = 0x5,NFSOCK = 0x6,NFBAD = 0x7,NFFIFO = 0x8,};
enum nis_error {NIS_SUCCESS = 0x0,NIS_S_SUCCESS = 0x1,NIS_NOTFOUND = 0x2,NIS_S_NOTFOUND = 0x3,NIS_CACHEEXPIRED = 0x4,NIS_NAMEUNREACHABLE = 0x5,NIS_UNKNOWNOBJ = 0x6,NIS_TRYAGAIN = 0x7,NIS_SYSTEMERROR = 0x8,NIS_CHAINBROKEN = 0x9,NIS_PERMISSION = 0xA,NIS_NOTOWNER = 0xB,NIS_NOT_ME = 0xC,NIS_NOMEMORY = 0xD,NIS_NAMEEXISTS = 0xE,NIS_NOTMASTER = 0xF,NIS_INVALIDOBJ = 0x10,NIS_BADNAME = 0x11,NIS_NOCALLBACK = 0x12,NIS_CBRESULTS = 0x13,NIS_NOSUCHNAME = 0x14,NIS_NOTUNIQUE = 0x15,NIS_IBMODERROR = 0x16,NIS_NOSUCHTABLE = 0x17,NIS_TYPEMISMATCH = 0x18,NIS_LINKNAMEERROR = 0x19,NIS_PARTIAL = 0x1A,NIS_TOOMANYATTRS = 0x1B,NIS_RPCERROR = 0x1C,NIS_BADATTRIBUTE = 0x1D,NIS_NOTSEARCHABLE = 0x1E,NIS_CBERROR = 0x1F,NIS_FOREIGNNS = 0x20,NIS_BADOBJECT = 0x21,NIS_NOTSAMEOBJ = 0x22,NIS_MODFAIL = 0x23,NIS_BADREQUEST = 0x24,NIS_NOTEMPTY = 0x25,NIS_COLDSTART_ERR = 0x26,NIS_RESYNC = 0x27,NIS_FAIL = 0x28,NIS_UNAVAIL = 0x29,NIS_RES2BIG = 0x2A,NIS_SRVAUTH = 0x2B,NIS_CLNTAUTH = 0x2C,NIS_NOFILESPACE = 0x2D,NIS_NOPROC = 0x2E,NIS_DUMPLATER = 0x2F,};
enum nlm_stats {nlm_granted = 0x0,nlm_denied = 0x1,nlm_denied_nolocks = 0x2,nlm_blocked = 0x3,nlm_denied_grace_period = 0x4,};
struct nubus_dir {unsigned __int8 *base;unsigned __int8 *ptr;int done;int mask;};
struct osd_cap_s {int cmd;__int64 val;};
typedef struct osd_cap_s osd_cap_t;
typedef struct osd_cmd_s osd_cmd_t;
struct osockaddr {unsigned __int16 sa_family;unsigned __int8 sa_data[14];};
struct prefixmsg {unsigned __int8 prefix_family;unsigned __int8 prefix_pad1;unsigned __int16 prefix_pad2;int prefix_ifindex;unsigned __int8 prefix_type;unsigned __int8 prefix_len;unsigned __int8 prefix_flags;unsigned __int8 prefix_pad3;};
typedef unsigned __int64 pthread_t;
typedef __int64 ptrdiff_t;
typedef struct __res_state *res_state;
typedef char *rexstring;
typedef unsigned __int64 rpcport_t;
typedef unsigned __int64 rpcproc_t;
typedef unsigned __int64 rpcprog_t;
typedef unsigned __int64 rpcprot_t;
typedef unsigned __int64 rpcvers_t;
struct rtnexthop {unsigned __int16 rtnh_len;unsigned __int8 rtnh_flags;unsigned __int8 rtnh_hops;int rtnh_ifindex;};
struct scc_modem {__int64 speed;char clocksrc;char nrz;};
typedef char scrnmap_t;
struct sdla_conf {__int16 station;__int16 config;__int16 kbaud;__int16 clocking;__int16 max_frm;__int16 T391;__int16 T392;__int16 N391;__int16 N392;__int16 N393;__int16 CIR_fwd;__int16 Bc_fwd;__int16 Be_fwd;__int16 CIR_bwd;__int16 Bc_bwd;__int16 Be_bwd;};
struct semaphore;
struct sg_header {int pack_len;int reply_len;int pack_id;int result;unsigned __int32 twelve_byte : 1;unsigned __int32 target_status : 5;unsigned __int32 host_status : 8;unsigned __int32 driver_status : 8;unsigned __int32 other_flags : 10;unsigned __int8 sense_buffer[16];};
struct sg_io_hdr {int interface_id;int dxfer_direction;unsigned __int8 cmd_len;unsigned __int8 mx_sb_len;unsigned __int16 iovec_count;unsigned int dxfer_len;void *dxferp;unsigned __int8 *cmdp;unsigned __int8 *sbp;unsigned int timeout;unsigned int flags;int pack_id;void *usr_ptr;unsigned __int8 status;unsigned __int8 masked_status;unsigned __int8 msg_status;unsigned __int8 sb_len_wr;unsigned __int16 host_status;unsigned __int16 driver_status;int resid;unsigned int duration;unsigned int info;};
struct sg_io_vec;
struct shminfo64 {unsigned __int64 shmmax;unsigned __int64 shmmin;unsigned __int64 shmmni;unsigned __int64 shmseg;unsigned __int64 shmall;unsigned __int64 __unused1;unsigned __int64 __unused2;unsigned __int64 __unused3;unsigned __int64 __unused4;};
typedef struct _FF42BAC5ED235A895D76875BB02F1547 siginfo_t;
typedef unsigned __int16 u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned __int64 u_int64_t;
typedef unsigned __int64 uintmax_t;
typedef unsigned __int64 uintptr_t;
struct user_desc {unsigned int entry_number;unsigned int base_addr;unsigned int limit;unsigned __int32 seg_32bit : 1;unsigned __int32 contents : 2;unsigned __int32 read_exec_only : 1;unsigned __int32 limit_in_pages : 1;unsigned __int32 seg_not_present : 1;unsigned __int32 useable : 1;unsigned __int32 lm : 1;};
struct video_spu {int active;int stream_id;};
struct vm86_regs {__int64 ebx;__int64 ecx;__int64 edx;__int64 esi;__int64 edi;__int64 ebp;__int64 eax;__int64 __null_ds;__int64 __null_es;__int64 __null_fs;__int64 __null_gs;__int64 orig_eax;__int64 eip;unsigned __int16 cs;unsigned __int16 __csh;__int64 eflags;__int64 esp;unsigned __int16 ss;unsigned __int16 __ssh;unsigned __int16 es;unsigned __int16 __esh;unsigned __int16 ds;unsigned __int16 __dsh;unsigned __int16 fs;unsigned __int16 __fsh;unsigned __int16 gs;unsigned __int16 __gsh;};
typedef struct _E1260AB78985DBC228459590506E4C92 wordexp_t;
typedef struct _xAxisInfo xAxisInfo;
typedef struct _7B203B1D6B17DB4D229BE0C85CFA6293 xCharInfo;
typedef struct _45DCCDFC0525EE913BAEBC241F6FB2DF xFontProp;
typedef struct _9F8356FA3F6B7BB65CCFE589AF8F3C28 xGlyphElt;
typedef struct _B58F2A65D6A08A32CD1EAF6D9DE3C432 xKeyState;
typedef struct _C8091AD492510FDF271EFEA57BB3787D xTriangle;
typedef struct _C4AF4D457027AFDE6D53E29D5E02871C xXResType;
struct xfrm_algo {char alg_name[64];unsigned int alg_key_len;char alg_key[];};
enum xprt_stat {XPRT_DIED = 0x0,XPRT_MOREREQS = 0x1,XPRT_IDLE = 0x2,};
enum ypxfrstat {YPXFR_SUCC = 0x1,YPXFR_AGE = 0x2,YPXFR_NOMAP = 0xFFFFFFFF,YPXFR_NODOM = 0xFFFFFFFE,YPXFR_RSRC = 0xFFFFFFFD,YPXFR_RPC = 0xFFFFFFFC,YPXFR_MADDR = 0xFFFFFFFB,YPXFR_YPERR = 0xFFFFFFFA,YPXFR_BADARGS = 0xFFFFFFF9,YPXFR_DBM = 0xFFFFFFF8,YPXFR_FILE = 0xFFFFFFF7,YPXFR_SKEW = 0xFFFFFFF6,YPXFR_CLEAR = 0xFFFFFFF5,YPXFR_FORCE = 0xFFFFFFF4,YPXFR_XFRERR = 0xFFFFFFF3,YPXFR_REFUSED = 0xFFFFFFF2,};
typedef struct _DCF698E6B500C8966BB9EAE5B50075E1 HashData;
typedef struct _E2FA2D6AC7903AC733F449DE69784828 IXJ_TONE;
enum MACRO_AC {AC = 0x10,};
enum MACRO_AF {AF_UNSPEC = 0,AF_LOCAL = 1,AF_UNIX = 1,AF_FILE = 1,AF_INET = 2,AF_AX25 = 3,AF_IPX = 4,AF_APPLETALK = 5,AF_NETROM = 6,AF_BRIDGE = 7,AF_ATMPVC = 8,AF_X25 = 9,AF_INET6 = 10,AF_ROSE = 11,AF_DECnet = 12,AF_NETBEUI = 13,AF_SECURITY = 14,AF_KEY = 15,AF_NETLINK = 16,AF_ROUTE = 16,AF_PACKET = 17,AF_ASH = 18,AF_ECONET = 19,AF_ATMSVC = 20,AF_RDS = 21,AF_SNA = 22,AF_IRDA = 23,AF_PPPOX = 24,AF_WANPIPE = 25,AF_LLC = 26,AF_CAN = 29,AF_TIPC = 30,AF_BLUETOOTH = 31,AF_IUCV = 32,AF_RXRPC = 33,AF_ISDN = 34,AF_PHONET = 35,AF_IEEE802154 = 36,AF_CAIF = 37,AF_ALG = 38,AF_NFC = 39,AF_MAX = 40,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,AI_V4MAPPED = 0x8,AI_ALL = 0x10,AI_ADDRCONFIG = 0x20,AI_IDN = 0x40,AI_CANONIDN = 0x80,AI_IDN_ALLOW_UNASSIGNED = 0x100,AI_IDN_USE_STD3_ASCII_RULES = 0x200,AI_NUMERICSERV = 0x400,};
enum MACRO_AO {AO = 245,};
enum MACRO_AR {AR_READ_ONLY = 0x1,AR_WRITE_ONLY = 0x2,AR_DENY_READ = 0x4,AR_DENY_WRITE = 0x8,AR_COMPATIBILITY = 0x10,AR_WRITE_THROUGH = 0x40,AR_OPEN_COMPRESSED = 0x100,};
enum MACRO_AT {AT_NULL = 0,AT_IGNORE = 1,AT_EXECFD = 2,AT_PHDR = 3,AT_PHENT = 4,AT_PHNUM = 5,AT_PAGESZ = 6,AT_BASE = 7,AT_FLAGS = 8,AT_ENTRY = 9,AT_NOTELF = 10,AT_UID = 11,AT_EUID = 12,AT_GID = 13,AT_EGID = 14,AT_CLKTCK = 17,AT_PLATFORM = 15,AT_HWCAP = 16,AT_FPUCW = 18,AT_DCACHEBSIZE = 19,AT_ICACHEBSIZE = 20,AT_UCACHEBSIZE = 21,AT_IGNOREPPC = 22,AT_SECURE = 23,AT_BASE_PLATFORM = 24,AT_RANDOM = 25,AT_EXECFN = 31,AT_SYSINFO = 32,AT_SYSINFO_EHDR = 33,AT_L1I_CACHESHAPE = 34,AT_L1D_CACHESHAPE = 35,AT_L2_CACHESHAPE = 36,AT_L3_CACHESHAPE = 37,};
enum MACRO_B0 {B0 = 0x0,B50 = 0x1,B75 = 0x2,};
enum MACRO_BC {BC_BASE_MAX = 99,BC_DIM_MAX = 2048,BC_SCALE_MAX = 99,BC_STRING_MAX = 1000,};
enum MACRO_BR {BR_STATE_DISABLED = 0,BR_STATE_LISTENING = 1,BR_STATE_LEARNING = 2,BR_STATE_FORWARDING = 3,BR_STATE_BLOCKING = 4,};
enum MACRO_BT {BT_UISHIFT = 5,BT_NBIPUI = 32,BT_UIMASK = 31,};
enum MACRO_CA {CA_CI = 1,CA_CI_LINK = 2,CA_CI_PHYS = 4,CA_DESCR = 8,CA_SC = 128,CA_CI_MODULE_PRESENT = 1,CA_CI_MODULE_READY = 2,CA_ECD = 1,CA_NDS = 2,CA_DSS = 4,CA_RESET = 28544,};
enum MACRO_CB {CB_PROG = 100302,CB_VERS = 1,};
enum MACRO_CD {CD_MINS = 74,CD_SECS = 60,CD_FRAMES = 75,CD_SYNC_SIZE = 12,CD_MSF_OFFSET = 150,CD_CHUNK_SIZE = 24,CD_NUM_OF_CHUNKS = 98,CD_FRAMESIZE_SUB = 96,CD_HEAD_SIZE = 4,CD_SUBHEAD_SIZE = 8,CD_EDC_SIZE = 4,CD_ZERO_SIZE = 8,CD_ECC_SIZE = 276,CD_FRAMESIZE = 2048,CD_FRAMESIZE_RAW = 2352,CD_FRAMESIZE_RAWER = 2646,CD_FRAMESIZE_RAW1 = 2340,CD_FRAMESIZE_RAW0 = 2336,CD_XA_HEAD = 12,CD_XA_TAIL = 280,CD_XA_SYNC_HEAD = 24,};
enum MACRO_CE {CE_INVERT1 = 1,CE_INVERT2 = 2,};
enum MACRO_CI {CI_DEFLATE = 26,CI_DEFLATE_DRAFT = 24,};
enum MACRO_CM {CM_INVERT = 1,};
enum MACRO_CN {CN_IDX_PROC = 0x1,CN_VAL_PROC = 0x1,CN_IDX_CIFS = 0x2,CN_VAL_CIFS = 0x1,CN_W1_IDX = 0x3,CN_W1_VAL = 0x1,CN_IDX_V86D = 0x4,CN_VAL_V86D_UVESAFB = 0x1,CN_IDX_BB = 0x5,CN_DST_IDX = 0x6,CN_DST_VAL = 0x1,CN_IDX_DM = 0x7,CN_VAL_DM_USERSPACE_LOG = 0x1,CN_IDX_DRBD = 0x8,CN_VAL_DRBD = 0x1,CN_KVP_IDX = 0x9,CN_KVP_VAL = 0x1,CN_VSS_IDX = 0xA,CN_VSS_VAL = 0x1,CN_NETLINK_USERS = 0xB,};
enum MACRO_CP {CP_INVERT = 1,};
enum MACRO_CS {CS = 17,};
enum MACRO_CZ {CZ_NBOARDS = 0x4DFA,CZ_BOOT_START = 0x4DFB,CZ_BOOT_DATA = 0x4DFC,CZ_BOOT_END = 0x4DFD,CZ_TEST = 0x4DFE,CZ_DEF_POLL = 0x4,};
enum MACRO_DF {DF_ORIGIN = 0x1,DF_SYMBOLIC = 0x2,DF_TEXTREL = 0x4,DF_BIND_NOW = 0x8,DF_STATIC_TLS = 0x10,DF_1_NOW = 0x1,DF_1_GLOBAL = 0x2,DF_1_GROUP = 0x4,DF_1_NODELETE = 0x8,DF_1_LOADFLTR = 0x10,DF_1_INITFIRST = 0x20,DF_1_NOOPEN = 0x40,DF_1_ORIGIN = 0x80,DF_1_DIRECT = 0x100,DF_1_TRANS = 0x200,DF_1_INTERPOSE = 0x400,DF_1_NODEFLIB = 0x800,DF_1_NODUMP = 0x1000,DF_1_CONFALT = 0x2000,DF_1_ENDFILTEE = 0x4000,DF_1_DISPRELDNE = 0x8000,DF_1_DISPRELPND = 0x10000,DF_1_NODIRECT = 0x20000,DF_1_IGNMULDEF = 0x40000,DF_1_NOKSYMS = 0x80000,DF_1_NOHDR = 0x100000,DF_1_EDITED = 0x200000,DF_1_NORELOC = 0x400000,DF_1_SYMINTPOSE = 0x800000,DF_1_GLOBAUDIT = 0x1000000,DF_1_SINGLETON = 0x2000000,};
enum MACRO_DK {DK_NDRIVE = 4,};
enum MACRO_DM {DM = 242,};
enum MACRO_DN {DN_ACCESS = 0x1,DN_MODIFY = 0x2,DN_CREATE = 0x4,DN_DELETE = 0x8,DN_RENAME = 0x10,DN_ATTRIB = 0x20,DN_MULTISHOT = 0x80000000,};
enum MACRO_DO {DO = 253,};
enum MACRO_DR {DR_FIRSTADDR = 0,DR_LASTADDR = 3,DR_STATUS = 6,DR_CONTROL = 7,DR_TRAP0 = 1,DR_TRAP1 = 2,DR_TRAP2 = 4,DR_TRAP3 = 8,DR_STEP = 16384,DR_SWITCH = 32768,DR_CONTROL_SHIFT = 16,DR_CONTROL_SIZE = 4,DR_RW_EXECUTE = 0,DR_RW_WRITE = 1,DR_RW_READ = 3,DR_LEN_1 = 0,DR_LEN_2 = 4,DR_LEN_4 = 12,DR_LEN_8 = 8,DR_LOCAL_ENABLE_SHIFT = 0,DR_GLOBAL_ENABLE_SHIFT = 1,DR_ENABLE_SIZE = 2,DR_LOCAL_ENABLE_MASK = 85,DR_GLOBAL_ENABLE_MASK = 170,DR_CONTROL_RESERVED = -4294902784,DR_LOCAL_SLOWDOWN = 256,DR_GLOBAL_SLOWDOWN = 512,};
enum MACRO_DS {DS = 23,};
enum MACRO_DT {DT_NULL = 0,DT_NEEDED = 1,DT_PLTRELSZ = 2,DT_PLTGOT = 3,DT_HASH = 4,DT_STRTAB = 5,DT_SYMTAB = 6,DT_RELA = 7,DT_RELASZ = 8,DT_RELAENT = 9,DT_STRSZ = 10,DT_SYMENT = 11,DT_INIT = 12,DT_FINI = 13,DT_SONAME = 14,DT_RPATH = 15,DT_SYMBOLIC = 16,DT_REL = 17,DT_RELSZ = 18,DT_RELENT = 19,DT_PLTREL = 20,DT_DEBUG = 21,DT_TEXTREL = 22,DT_JMPREL = 23,DT_BIND_NOW = 24,DT_INIT_ARRAY = 25,DT_FINI_ARRAY = 26,DT_INIT_ARRAYSZ = 27,DT_FINI_ARRAYSZ = 28,DT_RUNPATH = 29,DT_FLAGS = 30,DT_ENCODING = 32,DT_PREINIT_ARRAY = 32,DT_PREINIT_ARRAYSZ = 33,DT_NUM = 34,DT_LOOS = 1610612749,DT_HIOS = 1879044096,DT_LOPROC = 1879048192,DT_HIPROC = 2147483647,DT_VALRNGLO = 1879047424,DT_GNU_PRELINKED = 1879047669,DT_GNU_CONFLICTSZ = 1879047670,DT_GNU_LIBLISTSZ = 1879047671,DT_CHECKSUM = 1879047672,DT_PLTPADSZ = 1879047673,DT_MOVEENT = 1879047674,DT_MOVESZ = 1879047675,DT_FEATURE_1 = 1879047676,DT_POSFLAG_1 = 1879047677,DT_SYMINSZ = 1879047678,DT_SYMINENT = 1879047679,DT_VALRNGHI = 1879047679,DT_VALNUM = 12,DT_ADDRRNGLO = 1879047680,DT_GNU_HASH = 1879047925,DT_TLSDESC_PLT = 1879047926,DT_TLSDESC_GOT = 1879047927,DT_GNU_CONFLICT = 1879047928,DT_GNU_LIBLIST = 1879047929,DT_CONFIG = 1879047930,DT_DEPAUDIT = 1879047931,DT_AUDIT = 1879047932,DT_PLTPAD = 1879047933,DT_MOVETAB = 1879047934,DT_SYMINFO = 1879047935,DT_ADDRRNGHI = 1879047935,DT_ADDRNUM = 11,DT_VERSYM = 1879048176,DT_RELACOUNT = 1879048185,DT_RELCOUNT = 1879048186,DT_FLAGS_1 = 1879048187,DT_VERDEF = 1879048188,DT_VERDEFNUM = 1879048189,DT_VERNEED = 1879048190,DT_VERNEEDNUM = 1879048191,DT_VERSIONTAGNUM = 16,DT_AUXILIARY = 2147483645,DT_FILTER = 2147483647,DT_EXTRANUM = 3,};
enum MACRO_DV {NET_DV = 0x6,TTY_DV = 0x6,INF_DV = 0x1,};
enum MACRO_DW {DW_TAG_array_type = 0x1,DW_TAG_class_type = 0x2,DW_TAG_entry_point = 0x3,DW_TAG_enumeration_type = 0x4,DW_TAG_formal_parameter = 0x5,DW_TAG_imported_declaration = 0x8,DW_TAG_label = 0xA,DW_TAG_lexical_block = 0xB,DW_TAG_member = 0xD,DW_TAG_pointer_type = 0xF,DW_TAG_reference_type = 0x10,DW_TAG_compile_unit = 0x11,DW_TAG_string_type = 0x12,DW_TAG_structure_type = 0x13,DW_TAG_subroutine_type = 0x15,DW_TAG_typedef = 0x16,DW_TAG_union_type = 0x17,DW_TAG_unspecified_parameters = 0x18,DW_TAG_variant = 0x19,DW_TAG_common_block = 0x1A,DW_TAG_common_inclusion = 0x1B,DW_TAG_inheritance = 0x1C,DW_TAG_inlined_subroutine = 0x1D,DW_TAG_module = 0x1E,DW_TAG_ptr_to_member_type = 0x1F,DW_TAG_set_type = 0x20,DW_TAG_subrange_type = 0x21,DW_TAG_with_stmt = 0x22,DW_TAG_access_declaration = 0x23,DW_TAG_base_type = 0x24,DW_TAG_catch_block = 0x25,DW_TAG_const_type = 0x26,DW_TAG_constant = 0x27,DW_TAG_enumerator = 0x28,DW_TAG_file_type = 0x29,DW_TAG_friend = 0x2A,DW_TAG_namelist = 0x2B,DW_TAG_namelist_item = 0x2C,DW_TAG_namelist_items = 0x2C,DW_TAG_packed_type = 0x2D,DW_TAG_subprogram = 0x2E,DW_TAG_template_type_parameter = 0x2F,DW_TAG_template_type_param = 0x2F,DW_TAG_template_value_parameter = 0x30,DW_TAG_template_value_param = 0x30,DW_TAG_thrown_type = 0x31,DW_TAG_try_block = 0x32,DW_TAG_variant_part = 0x33,DW_TAG_variable = 0x34,DW_TAG_volatile_type = 0x35,DW_TAG_dwarf_procedure = 0x36,DW_TAG_restrict_type = 0x37,DW_TAG_interface_type = 0x38,DW_TAG_namespace = 0x39,DW_TAG_imported_module = 0x3A,DW_TAG_unspecified_type = 0x3B,DW_TAG_partial_unit = 0x3C,DW_TAG_imported_unit = 0x3D,DW_TAG_mutable_type = 0x3E,DW_TAG_condition = 0x3F,DW_TAG_shared_type = 0x40,DW_TAG_type_unit = 0x41,DW_TAG_rvalue_reference_type = 0x42,DW_TAG_template_alias = 0x43,DW_TAG_lo_user = 0x4080,DW_TAG_MIPS_loop = 0x4081,DW_TAG_HP_array_descriptor = 0x4090,DW_TAG_format_label = 0x4101,DW_TAG_function_template = 0x4102,DW_TAG_class_template = 0x4103,DW_TAG_GNU_BINCL = 0x4104,DW_TAG_GNU_EINCL = 0x4105,DW_TAG_GNU_template_template_parameter = 0x4106,DW_TAG_GNU_template_template_param = 0x4106,DW_TAG_GNU_template_parameter_pack = 0x4107,DW_TAG_GNU_formal_parameter_pack = 0x4108,DW_TAG_GNU_call_site = 0x4109,DW_TAG_GNU_call_site_parameter = 0x410A,DW_TAG_ALTIUM_circ_type = 0x5101,DW_TAG_ALTIUM_mwa_circ_type = 0x5102,DW_TAG_ALTIUM_rev_carry_type = 0x5103,DW_TAG_ALTIUM_rom = 0x5111,DW_TAG_upc_shared_type = 0x8765,DW_TAG_upc_strict_type = 0x8766,DW_TAG_upc_relaxed_type = 0x8767,DW_TAG_PGI_kanji_type = 0xA000,DW_TAG_PGI_interface_block = 0xA020,DW_TAG_SUN_function_template = 0x4201,DW_TAG_SUN_class_template = 0x4202,DW_TAG_SUN_struct_template = 0x4203,DW_TAG_SUN_union_template = 0x4204,DW_TAG_SUN_indirect_inheritance = 0x4205,DW_TAG_SUN_codeflags = 0x4206,DW_TAG_SUN_memop_info = 0x4207,DW_TAG_SUN_omp_child_func = 0x4208,DW_TAG_SUN_rtti_descriptor = 0x4209,DW_TAG_SUN_dtor_info = 0x420A,DW_TAG_SUN_dtor = 0x420B,DW_TAG_SUN_f90_interface = 0x420C,DW_TAG_SUN_fortran_vax_structure = 0x420D,DW_TAG_SUN_hi = 0x42FF,DW_TAG_hi_user = 0xFFFF,DW_children_no = 0x0,DW_children_yes = 0x1,DW_FORM_addr = 0x1,DW_FORM_block2 = 0x3,DW_FORM_block4 = 0x4,DW_FORM_data2 = 0x5,DW_FORM_data4 = 0x6,DW_FORM_data8 = 0x7,DW_FORM_string = 0x8,DW_FORM_block = 0x9,DW_FORM_block1 = 0xA,DW_FORM_data1 = 0xB,DW_FORM_flag = 0xC,DW_FORM_sdata = 0xD,DW_FORM_strp = 0xE,DW_FORM_udata = 0xF,DW_FORM_ref_addr = 0x10,DW_FORM_ref1 = 0x11,DW_FORM_ref2 = 0x12,DW_FORM_ref4 = 0x13,DW_FORM_ref8 = 0x14,DW_FORM_ref_udata = 0x15,DW_FORM_indirect = 0x16,DW_FORM_sec_offset = 0x17,DW_FORM_exprloc = 0x18,DW_FORM_flag_present = 0x19,DW_FORM_ref_sig8 = 0x20,DW_AT_sibling = 0x1,DW_AT_location = 0x2,DW_AT_name = 0x3,DW_AT_ordering = 0x9,DW_AT_subscr_data = 0xA,DW_AT_byte_size = 0xB,DW_AT_bit_offset = 0xC,DW_AT_bit_size = 0xD,DW_AT_element_list = 0xF,DW_AT_stmt_list = 0x10,DW_AT_low_pc = 0x11,DW_AT_high_pc = 0x12,DW_AT_language = 0x13,DW_AT_member = 0x14,DW_AT_discr = 0x15,DW_AT_discr_value = 0x16,DW_AT_visibility = 0x17,DW_AT_import = 0x18,DW_AT_string_length = 0x19,DW_AT_common_reference = 0x1A,DW_AT_comp_dir = 0x1B,DW_AT_const_value = 0x1C,DW_AT_containing_type = 0x1D,DW_AT_default_value = 0x1E,DW_AT_inline = 0x20,DW_AT_is_optional = 0x21,DW_AT_lower_bound = 0x22,DW_AT_producer = 0x25,DW_AT_prototyped = 0x27,DW_AT_return_addr = 0x2A,DW_AT_start_scope = 0x2C,DW_AT_bit_stride = 0x2E,DW_AT_stride_size = 0x2E,DW_AT_upper_bound = 0x2F,DW_AT_abstract_origin = 0x31,DW_AT_accessibility = 0x32,DW_AT_address_class = 0x33,DW_AT_artificial = 0x34,DW_AT_base_types = 0x35,DW_AT_calling_convention = 0x36,DW_AT_count = 0x37,DW_AT_data_member_location = 0x38,DW_AT_decl_column = 0x39,DW_AT_decl_file = 0x3A,DW_AT_decl_line = 0x3B,DW_AT_declaration = 0x3C,DW_AT_discr_list = 0x3D,DW_AT_encoding = 0x3E,DW_AT_external = 0x3F,DW_AT_frame_base = 0x40,DW_AT_friend = 0x41,DW_AT_identifier_case = 0x42,DW_AT_macro_info = 0x43,DW_AT_namelist_item = 0x44,DW_AT_priority = 0x45,DW_AT_segment = 0x46,DW_AT_specification = 0x47,DW_AT_static_link = 0x48,DW_AT_type = 0x49,DW_AT_use_location = 0x4A,DW_AT_variable_parameter = 0x4B,DW_AT_virtuality = 0x4C,DW_AT_vtable_elem_location = 0x4D,DW_AT_allocated = 0x4E,DW_AT_associated = 0x4F,DW_AT_data_location = 0x50,DW_AT_byte_stride = 0x51,DW_AT_stride = 0x51,DW_AT_entry_pc = 0x52,DW_AT_use_UTF8 = 0x53,DW_AT_extension = 0x54,DW_AT_ranges = 0x55,DW_AT_trampoline = 0x56,DW_AT_call_column = 0x57,DW_AT_call_file = 0x58,DW_AT_call_line = 0x59,DW_AT_description = 0x5A,DW_AT_binary_scale = 0x5B,DW_AT_decimal_scale = 0x5C,DW_AT_small = 0x5D,DW_AT_decimal_sign = 0x5E,DW_AT_digit_count = 0x5F,DW_AT_picture_string = 0x60,DW_AT_mutable = 0x61,DW_AT_threads_scaled = 0x62,DW_AT_explicit = 0x63,DW_AT_object_pointer = 0x64,DW_AT_endianity = 0x65,DW_AT_elemental = 0x66,DW_AT_pure = 0x67,DW_AT_recursive = 0x68,DW_AT_signature = 0x69,DW_AT_main_subprogram = 0x6A,DW_AT_data_bit_offset = 0x6B,DW_AT_const_expr = 0x6C,DW_AT_enum_class = 0x6D,DW_AT_linkage_name = 0x6E,DW_AT_HP_block_index = 0x2000,DW_AT_lo_user = 0x2000,DW_AT_MIPS_fde = 0x2001,DW_AT_MIPS_loop_begin = 0x2002,DW_AT_MIPS_tail_loop_begin = 0x2003,DW_AT_MIPS_epilog_begin = 0x2004,DW_AT_MIPS_loop_unroll_factor = 0x2005,DW_AT_MIPS_software_pipeline_depth = 0x2006,DW_AT_MIPS_linkage_name = 0x2007,DW_AT_MIPS_stride = 0x2008,DW_AT_MIPS_abstract_name = 0x2009,DW_AT_MIPS_clone_origin = 0x200A,DW_AT_MIPS_has_inlines = 0x200B,DW_AT_MIPS_stride_byte = 0x200C,DW_AT_MIPS_stride_elem = 0x200D,DW_AT_MIPS_ptr_dopetype = 0x200E,DW_AT_MIPS_allocatable_dopetype = 0x200F,DW_AT_MIPS_assumed_shape_dopetype = 0x2010,DW_AT_MIPS_assumed_size = 0x2011,DW_AT_HP_unmodifiable = 0x2001,DW_AT_HP_actuals_stmt_list = 0x2010,DW_AT_HP_proc_per_section = 0x2011,DW_AT_HP_raw_data_ptr = 0x2012,DW_AT_HP_pass_by_reference = 0x2013,DW_AT_HP_opt_level = 0x2014,DW_AT_HP_prof_version_id = 0x2015,DW_AT_HP_opt_flags = 0x2016,DW_AT_HP_cold_region_low_pc = 0x2017,DW_AT_HP_cold_region_high_pc = 0x2018,DW_AT_HP_all_variables_modifiable = 0x2019,DW_AT_HP_linkage_name = 0x201A,DW_AT_HP_prof_flags = 0x201B,DW_AT_CPQ_discontig_ranges = 0x2001,DW_AT_CPQ_semantic_events = 0x2002,DW_AT_CPQ_split_lifetimes_var = 0x2003,DW_AT_CPQ_split_lifetimes_rtn = 0x2004,DW_AT_CPQ_prologue_length = 0x2005,DW_AT_INTEL_other_endian = 0x2026,DW_AT_sf_names = 0x2101,DW_AT_src_info = 0x2102,DW_AT_mac_info = 0x2103,DW_AT_src_coords = 0x2104,DW_AT_body_begin = 0x2105,DW_AT_body_end = 0x2106,DW_AT_GNU_vector = 0x2107,DW_AT_GNU_guarded_by = 0x2108,DW_AT_GNU_pt_guarded_by = 0x2109,DW_AT_GNU_guarded = 0x210A,DW_AT_GNU_pt_guarded = 0x210B,DW_AT_GNU_locks_excluded = 0x210C,DW_AT_GNU_exclusive_locks_required = 0x210D,DW_AT_GNU_shared_locks_required = 0x210E,DW_AT_GNU_odr_signature = 0x210F,DW_AT_GNU_template_name = 0x2110,DW_AT_GNU_call_site_value = 0x2111,DW_AT_GNU_call_site_data_value = 0x2112,DW_AT_GNU_call_site_target = 0x2113,DW_AT_GNU_call_site_target_clobbered = 0x2114,DW_AT_GNU_tail_call = 0x2115,DW_AT_GNU_all_tail_call_sites = 0x2116,DW_AT_GNU_all_call_sites = 0x2117,DW_AT_GNU_all_source_call_sites = 0x2118,DW_AT_ALTIUM_loclist = 0x2300,DW_AT_SUN_template = 0x2201,DW_AT_VMS_rtnbeg_pd_address = 0x2201,DW_AT_SUN_alignment = 0x2202,DW_AT_SUN_vtable = 0x2203,DW_AT_SUN_count_guarantee = 0x2204,DW_AT_SUN_command_line = 0x2205,DW_AT_SUN_vbase = 0x2206,DW_AT_SUN_compile_options = 0x2207,DW_AT_SUN_language = 0x2208,DW_AT_SUN_browser_file = 0x2209,DW_AT_SUN_vtable_abi = 0x2210,DW_AT_SUN_func_offsets = 0x2211,DW_AT_SUN_cf_kind = 0x2212,DW_AT_SUN_vtable_index = 0x2213,DW_AT_SUN_omp_tpriv_addr = 0x2214,DW_AT_SUN_omp_child_func = 0x2215,DW_AT_SUN_func_offset = 0x2216,DW_AT_SUN_memop_type_ref = 0x2217,DW_AT_SUN_profile_id = 0x2218,DW_AT_SUN_memop_signature = 0x2219,DW_AT_SUN_obj_dir = 0x2220,DW_AT_SUN_obj_file = 0x2221,DW_AT_SUN_original_name = 0x2222,DW_AT_SUN_hwcprof_signature = 0x2223,DW_AT_SUN_amd64_parmdump = 0x2224,DW_AT_SUN_part_link_name = 0x2225,DW_AT_SUN_link_name = 0x2226,DW_AT_SUN_pass_with_const = 0x2227,DW_AT_SUN_return_with_const = 0x2228,DW_AT_SUN_import_by_name = 0x2229,DW_AT_SUN_f90_pointer = 0x222A,DW_AT_SUN_pass_by_ref = 0x222B,DW_AT_SUN_f90_allocatable = 0x222C,DW_AT_SUN_f90_assumed_shape_array = 0x222D,DW_AT_SUN_c_vla = 0x222E,DW_AT_SUN_return_value_ptr = 0x2230,DW_AT_SUN_dtor_start = 0x2231,DW_AT_SUN_dtor_length = 0x2232,DW_AT_SUN_dtor_state_initial = 0x2233,DW_AT_SUN_dtor_state_final = 0x2234,DW_AT_SUN_dtor_state_deltas = 0x2235,DW_AT_SUN_import_by_lname = 0x2236,DW_AT_SUN_f90_use_only = 0x2237,DW_AT_SUN_namelist_spec = 0x2238,DW_AT_SUN_is_omp_child_func = 0x2239,DW_AT_SUN_fortran_main_alias = 0x223A,DW_AT_SUN_fortran_based = 0x223B,DW_AT_use_GNAT_descriptive_type = 0x2301,DW_AT_GNAT_descriptive_type = 0x2302,DW_AT_upc_threads_scaled = 0x3210,DW_AT_PGI_lbase = 0x3A00,DW_AT_PGI_soffset = 0x3A01,DW_AT_PGI_lstride = 0x3A02,DW_AT_APPLE_optimized = 0x3FE1,DW_AT_APPLE_flags = 0x3FE2,DW_AT_APPLE_isa = 0x3FE3,DW_AT_APPLE_block = 0x3FE4,DW_AT_APPLE_major_runtime_vers = 0x3FE5,DW_AT_APPLE_runtime_class = 0x3FE6,DW_AT_APPLE_omit_frame_ptr = 0x3FE7,DW_AT_APPLE_closure = 0x3FE4,DW_AT_hi_user = 0x3FFF,DW_OP_addr = 0x3,DW_OP_deref = 0x6,DW_OP_const1u = 0x8,DW_OP_const1s = 0x9,DW_OP_const2u = 0xA,DW_OP_const2s = 0xB,DW_OP_const4u = 0xC,DW_OP_const4s = 0xD,DW_OP_const8u = 0xE,DW_OP_const8s = 0xF,DW_OP_constu = 0x10,DW_OP_consts = 0x11,DW_OP_dup = 0x12,DW_OP_drop = 0x13,DW_OP_over = 0x14,DW_OP_pick = 0x15,DW_OP_swap = 0x16,DW_OP_rot = 0x17,DW_OP_xderef = 0x18,DW_OP_abs = 0x19,DW_OP_and = 0x1A,DW_OP_div = 0x1B,DW_OP_minus = 0x1C,DW_OP_mod = 0x1D,DW_OP_mul = 0x1E,DW_OP_neg = 0x1F,DW_OP_not = 0x20,DW_OP_or = 0x21,DW_OP_plus = 0x22,DW_OP_plus_uconst = 0x23,DW_OP_shl = 0x24,DW_OP_shr = 0x25,DW_OP_shra = 0x26,DW_OP_xor = 0x27,DW_OP_bra = 0x28,DW_OP_eq = 0x29,DW_OP_ge = 0x2A,DW_OP_gt = 0x2B,DW_OP_le = 0x2C,DW_OP_lt = 0x2D,DW_OP_ne = 0x2E,DW_OP_skip = 0x2F,DW_OP_lit0 = 0x30,DW_OP_lit1 = 0x31,DW_OP_lit2 = 0x32,DW_OP_lit3 = 0x33,DW_OP_lit4 = 0x34,DW_OP_lit5 = 0x35,DW_OP_lit6 = 0x36,DW_OP_lit7 = 0x37,DW_OP_lit8 = 0x38,DW_OP_lit9 = 0x39,DW_OP_lit10 = 0x3A,DW_OP_lit11 = 0x3B,DW_OP_lit12 = 0x3C,DW_OP_lit13 = 0x3D,DW_OP_lit14 = 0x3E,DW_OP_lit15 = 0x3F,DW_OP_lit16 = 0x40,DW_OP_lit17 = 0x41,DW_OP_lit18 = 0x42,DW_OP_lit19 = 0x43,DW_OP_lit20 = 0x44,DW_OP_lit21 = 0x45,DW_OP_lit22 = 0x46,DW_OP_lit23 = 0x47,DW_OP_lit24 = 0x48,DW_OP_lit25 = 0x49,DW_OP_lit26 = 0x4A,DW_OP_lit27 = 0x4B,DW_OP_lit28 = 0x4C,DW_OP_lit29 = 0x4D,DW_OP_lit30 = 0x4E,DW_OP_lit31 = 0x4F,DW_OP_reg0 = 0x50,DW_OP_reg1 = 0x51,DW_OP_reg2 = 0x52,DW_OP_reg3 = 0x53,DW_OP_reg4 = 0x54,DW_OP_reg5 = 0x55,DW_OP_reg6 = 0x56,DW_OP_reg7 = 0x57,DW_OP_reg8 = 0x58,DW_OP_reg9 = 0x59,DW_OP_reg10 = 0x5A,DW_OP_reg11 = 0x5B,DW_OP_reg12 = 0x5C,DW_OP_reg13 = 0x5D,DW_OP_reg14 = 0x5E,DW_OP_reg15 = 0x5F,DW_OP_reg16 = 0x60,DW_OP_reg17 = 0x61,DW_OP_reg18 = 0x62,DW_OP_reg19 = 0x63,DW_OP_reg20 = 0x64,DW_OP_reg21 = 0x65,DW_OP_reg22 = 0x66,DW_OP_reg23 = 0x67,DW_OP_reg24 = 0x68,DW_OP_reg25 = 0x69,DW_OP_reg26 = 0x6A,DW_OP_reg27 = 0x6B,DW_OP_reg28 = 0x6C,DW_OP_reg29 = 0x6D,DW_OP_reg30 = 0x6E,DW_OP_reg31 = 0x6F,DW_OP_breg0 = 0x70,DW_OP_breg1 = 0x71,DW_OP_breg2 = 0x72,DW_OP_breg3 = 0x73,DW_OP_breg4 = 0x74,DW_OP_breg5 = 0x75,DW_OP_breg6 = 0x76,DW_OP_breg7 = 0x77,DW_OP_breg8 = 0x78,DW_OP_breg9 = 0x79,DW_OP_breg10 = 0x7A,DW_OP_breg11 = 0x7B,DW_OP_breg12 = 0x7C,DW_OP_breg13 = 0x7D,DW_OP_breg14 = 0x7E,DW_OP_breg15 = 0x7F,DW_OP_breg16 = 0x80,DW_OP_breg17 = 0x81,DW_OP_breg18 = 0x82,DW_OP_breg19 = 0x83,DW_OP_breg20 = 0x84,DW_OP_breg21 = 0x85,DW_OP_breg22 = 0x86,DW_OP_breg23 = 0x87,DW_OP_breg24 = 0x88,DW_OP_breg25 = 0x89,DW_OP_breg26 = 0x8A,DW_OP_breg27 = 0x8B,DW_OP_breg28 = 0x8C,DW_OP_breg29 = 0x8D,DW_OP_breg30 = 0x8E,DW_OP_breg31 = 0x8F,DW_OP_regx = 0x90,DW_OP_fbreg = 0x91,DW_OP_bregx = 0x92,DW_OP_piece = 0x93,DW_OP_deref_size = 0x94,DW_OP_xderef_size = 0x95,DW_OP_nop = 0x96,DW_OP_push_object_address = 0x97,DW_OP_call2 = 0x98,DW_OP_call4 = 0x99,DW_OP_call_ref = 0x9A,DW_OP_form_tls_address = 0x9B,DW_OP_call_frame_cfa = 0x9C,DW_OP_bit_piece = 0x9D,DW_OP_implicit_value = 0x9E,DW_OP_stack_value = 0x9F,DW_OP_GNU_push_tls_address = 0xE0,DW_OP_lo_user = 0xE0,DW_OP_GNU_uninit = 0xF0,DW_OP_GNU_encoded_addr = 0xF1,DW_OP_GNU_implicit_pointer = 0xF2,DW_OP_GNU_entry_value = 0xF3,DW_OP_GNU_const_type = 0xF4,DW_OP_GNU_regval_type = 0xF5,DW_OP_GNU_deref_type = 0xF6,DW_OP_GNU_convert = 0xF7,DW_OP_GNU_reinterpret = 0xF9,DW_OP_GNU_parameter_ref = 0xFA,DW_OP_GNU_addr_index = 0xFB,DW_OP_GNU_const_index = 0xFC,DW_OP_HP_unknown = 0xE0,DW_OP_HP_is_value = 0xE1,DW_OP_HP_fltconst4 = 0xE2,DW_OP_HP_fltconst8 = 0xE3,DW_OP_HP_mod_range = 0xE4,DW_OP_HP_unmod_range = 0xE5,DW_OP_HP_tls = 0xE6,DW_OP_INTEL_bit_piece = 0xE8,DW_OP_APPLE_uninit = 0xF0,DW_OP_PGI_omp_thread_num = 0xF8,DW_OP_hi_user = 0xFF,DW_ATE_address = 0x1,DW_ATE_boolean = 0x2,DW_ATE_complex_float = 0x3,DW_ATE_float = 0x4,DW_ATE_signed = 0x5,DW_ATE_signed_char = 0x6,DW_ATE_unsigned = 0x7,DW_ATE_unsigned_char = 0x8,DW_ATE_imaginary_float = 0x9,DW_ATE_packed_decimal = 0xA,DW_ATE_numeric_string = 0xB,DW_ATE_edited = 0xC,DW_ATE_signed_fixed = 0xD,DW_ATE_unsigned_fixed = 0xE,DW_ATE_decimal_float = 0xF,DW_ATE_ALTIUM_fract = 0x80,DW_ATE_lo_user = 0x80,DW_ATE_ALTIUM_accum = 0x81,DW_ATE_HP_float80 = 0x80,DW_ATE_HP_complex_float80 = 0x81,DW_ATE_HP_float128 = 0x82,DW_ATE_HP_complex_float128 = 0x83,DW_ATE_HP_floathpintel = 0x84,DW_ATE_HP_imaginary_float80 = 0x85,DW_ATE_HP_imaginary_float128 = 0x86,DW_ATE_SUN_interval_float = 0x91,DW_ATE_SUN_imaginary_float = 0x92,DW_ATE_hi_user = 0xFF,DW_DS_unsigned = 0x1,DW_DS_leading_overpunch = 0x2,DW_DS_trailing_overpunch = 0x3,DW_DS_leading_separate = 0x4,DW_DS_trailing_separate = 0x5,DW_END_default = 0x0,DW_END_big = 0x1,DW_END_little = 0x2,DW_END_lo_user = 0x40,DW_END_hi_user = 0xFF,DW_ATCF_lo_user = 0x40,DW_ATCF_SUN_mop_bitfield = 0x41,DW_ATCF_SUN_mop_spill = 0x42,DW_ATCF_SUN_mop_scopy = 0x43,DW_ATCF_SUN_func_start = 0x44,DW_ATCF_SUN_end_ctors = 0x45,DW_ATCF_SUN_branch_target = 0x46,DW_ATCF_SUN_mop_stack_probe = 0x47,DW_ATCF_SUN_func_epilog = 0x48,DW_ATCF_hi_user = 0xFF,DW_ACCESS_public = 0x1,DW_ACCESS_protected = 0x2,DW_ACCESS_private = 0x3,DW_VIS_local = 0x1,DW_VIS_exported = 0x2,DW_VIS_qualified = 0x3,DW_VIRTUALITY_none = 0x0,DW_VIRTUALITY_virtual = 0x1,DW_VIRTUALITY_pure_virtual = 0x2,DW_LANG_C89 = 0x1,DW_LANG_C = 0x2,DW_LANG_Ada83 = 0x3,DW_LANG_C_plus_plus = 0x4,DW_LANG_Cobol74 = 0x5,DW_LANG_Cobol85 = 0x6,DW_LANG_Fortran77 = 0x7,DW_LANG_Fortran90 = 0x8,DW_LANG_Pascal83 = 0x9,DW_LANG_Modula2 = 0xA,DW_LANG_Java = 0xB,DW_LANG_C99 = 0xC,DW_LANG_Ada95 = 0xD,DW_LANG_Fortran95 = 0xE,DW_LANG_PLI = 0xF,DW_LANG_ObjC = 0x10,DW_LANG_ObjC_plus_plus = 0x11,DW_LANG_UPC = 0x12,DW_LANG_D = 0x13,DW_LANG_Python = 0x14,DW_LANG_OpenCL = 0x15,DW_LANG_Go = 0x16,DW_LANG_Modula3 = 0x17,DW_LANG_Haskel = 0x18,DW_LANG_lo_user = 0x8000,DW_LANG_Mips_Assembler = 0x8001,DW_LANG_Upc = 0x8765,DW_LANG_ALTIUM_Assembler = 0x9101,DW_LANG_SUN_Assembler = 0x9001,DW_LANG_hi_user = 0xFFFF,DW_ID_case_sensitive = 0x0,DW_ID_up_case = 0x1,DW_ID_down_case = 0x2,DW_ID_case_insensitive = 0x3,DW_CC_normal = 0x1,DW_CC_program = 0x2,DW_CC_nocall = 0x3,DW_CC_lo_user = 0x40,DW_CC_GNU_renesas_sh = 0x40,DW_CC_GNU_borland_fastcall_i386 = 0x41,DW_CC_ALTIUM_interrupt = 0x65,DW_CC_ALTIUM_near_system_stack = 0x66,DW_CC_ALTIUM_near_user_stack = 0x67,DW_CC_ALTIUM_huge_user_stack = 0x68,DW_CC_hi_user = 0xFF,DW_INL_not_inlined = 0x0,DW_INL_inlined = 0x1,DW_INL_declared_not_inlined = 0x2,DW_INL_declared_inlined = 0x3,DW_ORD_row_major = 0x0,DW_ORD_col_major = 0x1,DW_DSC_label = 0x0,DW_DSC_range = 0x1,DW_LNS_copy = 0x1,DW_LNS_advance_pc = 0x2,DW_LNS_advance_line = 0x3,DW_LNS_set_file = 0x4,DW_LNS_set_column = 0x5,DW_LNS_negate_stmt = 0x6,DW_LNS_set_basic_block = 0x7,DW_LNS_const_add_pc = 0x8,DW_LNS_fixed_advance_pc = 0x9,DW_LNS_set_prologue_end = 0xA,DW_LNS_set_epilogue_begin = 0xB,DW_LNS_set_isa = 0xC,DW_LNE_end_sequence = 0x1,DW_LNE_set_address = 0x2,DW_LNE_define_file = 0x3,DW_LNE_set_discriminator = 0x4,DW_LNE_HP_negate_is_UV_update = 0x11,DW_LNE_HP_push_context = 0x12,DW_LNE_HP_pop_context = 0x13,DW_LNE_HP_set_file_line_column = 0x14,DW_LNE_HP_set_routine_name = 0x15,DW_LNE_HP_set_sequence = 0x16,DW_LNE_HP_negate_post_semantics = 0x17,DW_LNE_HP_negate_function_exit = 0x18,DW_LNE_HP_negate_front_end_logical = 0x19,DW_LNE_HP_define_proc = 0x20,DW_LNE_HP_source_file_correlation = 0x80,DW_LNE_lo_user = 0x80,DW_LNE_hi_user = 0xFF,DW_ISA_UNKNOWN = 0x0,DW_ISA_ARM_thumb = 0x1,DW_ISA_ARM_arm = 0x2,DW_MACINFO_define = 0x1,DW_MACINFO_undef = 0x2,DW_MACINFO_start_file = 0x3,DW_MACINFO_end_file = 0x4,DW_MACINFO_vendor_ext = 0xFF,DW_CFA_advance_loc = 0x40,DW_CFA_offset = 0x80,DW_CFA_restore = 0xC0,DW_CFA_extended = 0x0,DW_CFA_nop = 0x0,DW_CFA_set_loc = 0x1,DW_CFA_advance_loc1 = 0x2,DW_CFA_advance_loc2 = 0x3,DW_CFA_advance_loc4 = 0x4,DW_CFA_offset_extended = 0x5,DW_CFA_restore_extended = 0x6,DW_CFA_undefined = 0x7,DW_CFA_same_value = 0x8,DW_CFA_register = 0x9,DW_CFA_remember_state = 0xA,DW_CFA_restore_state = 0xB,DW_CFA_def_cfa = 0xC,DW_CFA_def_cfa_register = 0xD,DW_CFA_def_cfa_offset = 0xE,DW_CFA_def_cfa_expression = 0xF,DW_CFA_expression = 0x10,DW_CFA_offset_extended_sf = 0x11,DW_CFA_def_cfa_sf = 0x12,DW_CFA_def_cfa_offset_sf = 0x13,DW_CFA_val_offset = 0x14,DW_CFA_val_offset_sf = 0x15,DW_CFA_val_expression = 0x16,DW_CFA_lo_user = 0x1C,DW_CFA_low_user = 0x1C,DW_CFA_MIPS_advance_loc8 = 0x1D,DW_CFA_GNU_window_save = 0x2D,DW_CFA_GNU_args_size = 0x2E,DW_CFA_GNU_negative_offset_extended = 0x2F,DW_CFA_high_user = 0x3F,DW_EH_PE_absptr = 0x0,DW_EH_PE_uleb128 = 0x1,DW_EH_PE_udata2 = 0x2,DW_EH_PE_udata4 = 0x3,DW_EH_PE_udata8 = 0x4,DW_EH_PE_sleb128 = 0x9,DW_EH_PE_sdata2 = 0xA,DW_EH_PE_sdata4 = 0xB,DW_EH_PE_sdata8 = 0xC,DW_EH_PE_pcrel = 0x10,DW_EH_PE_textrel = 0x20,DW_EH_PE_datarel = 0x30,DW_EH_PE_funcrel = 0x40,DW_EH_PE_aligned = 0x50,DW_EH_PE_omit = 0xFF,DW_FRAME_CFA_COL = 0x0,DW_FRAME_REG1 = 0x1,DW_FRAME_REG2 = 0x2,DW_FRAME_REG3 = 0x3,DW_FRAME_REG4 = 0x4,DW_FRAME_REG5 = 0x5,DW_FRAME_REG6 = 0x6,DW_FRAME_REG7 = 0x7,DW_FRAME_REG8 = 0x8,DW_FRAME_REG9 = 0x9,DW_FRAME_REG10 = 0xA,DW_FRAME_REG11 = 0xB,DW_FRAME_REG12 = 0xC,DW_FRAME_REG13 = 0xD,DW_FRAME_REG14 = 0xE,DW_FRAME_REG15 = 0xF,DW_FRAME_REG16 = 0x10,DW_FRAME_REG17 = 0x11,DW_FRAME_REG18 = 0x12,DW_FRAME_REG19 = 0x13,DW_FRAME_REG20 = 0x14,DW_FRAME_REG21 = 0x15,DW_FRAME_REG22 = 0x16,DW_FRAME_REG23 = 0x17,DW_FRAME_REG24 = 0x18,DW_FRAME_REG25 = 0x19,DW_FRAME_REG26 = 0x1A,DW_FRAME_REG27 = 0x1B,DW_FRAME_REG28 = 0x1C,DW_FRAME_REG29 = 0x1D,DW_FRAME_REG30 = 0x1E,DW_FRAME_REG31 = 0x1F,DW_FRAME_FREG0 = 0x20,DW_FRAME_FREG1 = 0x21,DW_FRAME_FREG2 = 0x22,DW_FRAME_FREG3 = 0x23,DW_FRAME_FREG4 = 0x24,DW_FRAME_FREG5 = 0x25,DW_FRAME_FREG6 = 0x26,DW_FRAME_FREG7 = 0x27,DW_FRAME_FREG8 = 0x28,DW_FRAME_FREG9 = 0x29,DW_FRAME_FREG10 = 0x2A,DW_FRAME_FREG11 = 0x2B,DW_FRAME_FREG12 = 0x2C,DW_FRAME_FREG13 = 0x2D,DW_FRAME_FREG14 = 0x2E,DW_FRAME_FREG15 = 0x2F,DW_FRAME_FREG16 = 0x30,DW_FRAME_FREG17 = 0x31,DW_FRAME_FREG18 = 0x32,DW_FRAME_FREG19 = 0x33,DW_FRAME_FREG20 = 0x34,DW_FRAME_FREG21 = 0x35,DW_FRAME_FREG22 = 0x36,DW_FRAME_FREG23 = 0x37,DW_FRAME_FREG24 = 0x38,DW_FRAME_FREG25 = 0x39,DW_FRAME_FREG26 = 0x3A,DW_FRAME_FREG27 = 0x3B,DW_FRAME_FREG28 = 0x3C,DW_FRAME_FREG29 = 0x3D,DW_FRAME_FREG30 = 0x3E,DW_FRAME_FREG31 = 0x3F,DW_FRAME_FREG32 = 0x40,DW_FRAME_FREG33 = 0x41,DW_FRAME_FREG34 = 0x42,DW_FRAME_FREG35 = 0x43,DW_FRAME_FREG36 = 0x44,DW_FRAME_FREG37 = 0x45,DW_FRAME_FREG38 = 0x46,DW_FRAME_FREG39 = 0x47,DW_FRAME_FREG40 = 0x48,DW_FRAME_FREG41 = 0x49,DW_FRAME_FREG42 = 0x4A,DW_FRAME_FREG43 = 0x4B,DW_FRAME_FREG44 = 0x4C,DW_FRAME_FREG45 = 0x4D,DW_FRAME_FREG46 = 0x4E,DW_FRAME_FREG47 = 0x4F,DW_FRAME_FREG48 = 0x50,DW_FRAME_FREG49 = 0x51,DW_FRAME_FREG50 = 0x52,DW_FRAME_FREG51 = 0x53,DW_FRAME_FREG52 = 0x54,DW_FRAME_FREG53 = 0x55,DW_FRAME_FREG54 = 0x56,DW_FRAME_FREG55 = 0x57,DW_FRAME_FREG56 = 0x58,DW_FRAME_FREG57 = 0x59,DW_FRAME_FREG58 = 0x5A,DW_FRAME_FREG59 = 0x5B,DW_FRAME_FREG60 = 0x5C,DW_FRAME_FREG61 = 0x5D,DW_FRAME_FREG62 = 0x5E,DW_FRAME_FREG63 = 0x5F,DW_FRAME_FREG64 = 0x60,DW_FRAME_FREG65 = 0x61,DW_FRAME_FREG66 = 0x62,DW_FRAME_FREG67 = 0x63,DW_FRAME_FREG68 = 0x64,DW_FRAME_FREG69 = 0x65,DW_FRAME_FREG70 = 0x66,DW_FRAME_FREG71 = 0x67,DW_FRAME_FREG72 = 0x68,DW_FRAME_FREG73 = 0x69,DW_FRAME_FREG74 = 0x6A,DW_FRAME_FREG75 = 0x6B,DW_FRAME_FREG76 = 0x6C,DW_FRAME_HIGHEST_NORMAL_REGISTER = 0xBC,DW_FRAME_LAST_REG_NUM = 0xBF,DW_FRAME_RA_COL = 0xBD,DW_FRAME_STATIC_LINK = 0xBE,DW_CHILDREN_no = 0x0,DW_CHILDREN_yes = 0x1,DW_ADDR_none = 0x0,DW_REG_TABLE_SIZE = 0x42,DW_FRAME_UNDEFINED_VAL = 0x40A,DW_FRAME_SAME_VAL = 0x40B,DW_FRAME_CFA_COL3 = 0x59C,DW_EXPR_OFFSET = 0x0,DW_EXPR_VAL_OFFSET = 0x1,DW_EXPR_EXPRESSION = 0x2,DW_EXPR_VAL_EXPRESSION = 0x3,DW_DLA_STRING = 0x1,DW_DLA_LOC = 0x2,DW_DLA_LOCDESC = 0x3,DW_DLA_ELLIST = 0x4,DW_DLA_BOUNDS = 0x5,DW_DLA_BLOCK = 0x6,DW_DLA_DEBUG = 0x7,DW_DLA_DIE = 0x8,DW_DLA_LINE = 0x9,DW_DLA_ATTR = 0xA,DW_DLA_TYPE = 0xB,DW_DLA_SUBSCR = 0xC,DW_DLA_GLOBAL = 0xD,DW_DLA_ERROR = 0xE,DW_DLA_LIST = 0xF,DW_DLA_LINEBUF = 0x10,DW_DLA_ARANGE = 0x11,DW_DLA_ABBREV = 0x12,DW_DLA_FRAME_OP = 0x13,DW_DLA_CIE = 0x14,DW_DLA_FDE = 0x15,DW_DLA_LOC_BLOCK = 0x16,DW_DLA_FRAME_BLOCK = 0x17,DW_DLA_FUNC = 0x18,DW_DLA_TYPENAME = 0x19,DW_DLA_VAR = 0x1A,DW_DLA_WEAK = 0x1B,DW_DLA_ADDR = 0x1C,DW_DLA_RANGES = 0x1D,DW_DLC_READ = 0x0,DW_DLC_WRITE = 0x1,DW_DLC_RDWR = 0x2,DW_DLC_SIZE_64 = 0x40000000,DW_DLC_SIZE_32 = 0x20000000,DW_DLC_OFFSET_SIZE_64 = 0x10000000,DW_DLC_ISA_MIPS = 0x0,DW_DLC_ISA_IA64 = 0x1000000,DW_DLC_STREAM_RELOCATIONS = 0x2000000,DW_DLC_SYMBOLIC_RELOCATIONS = 0x4000000,DW_DLC_TARGET_BIGENDIAN = 0x8000000,DW_DLC_TARGET_LITTLEENDIAN = 0x100000,DW_DLS_BACKWARD = 0xFFFFFFFF,DW_DLS_NOSLIDE = 0x0,DW_DLS_FORWARD = 0x1,DW_DLE_NE = 0x0,DW_DLE_VMM = 0x1,DW_DLE_MAP = 0x2,DW_DLE_LEE = 0x3,DW_DLE_NDS = 0x4,DW_DLE_NLS = 0x5,DW_DLE_ID = 0x6,DW_DLE_IOF = 0x7,DW_DLE_MAF = 0x8,DW_DLE_IA = 0x9,DW_DLE_MDE = 0xA,DW_DLE_MLE = 0xB,DW_DLE_FNO = 0xC,DW_DLE_FNR = 0xD,DW_DLE_FWA = 0xE,DW_DLE_NOB = 0xF,DW_DLE_MOF = 0x10,DW_DLE_EOLL = 0x11,DW_DLE_NOLL = 0x12,DW_DLE_BADOFF = 0x13,DW_DLE_EOS = 0x14,DW_DLE_ATRUNC = 0x15,DW_DLE_BADBITC = 0x16,DW_DLE_DBG_ALLOC = 0x17,DW_DLE_FSTAT_ERROR = 0x18,DW_DLE_FSTAT_MODE_ERROR = 0x19,DW_DLE_INIT_ACCESS_WRONG = 0x1A,DW_DLE_ELF_BEGIN_ERROR = 0x1B,DW_DLE_ELF_GETEHDR_ERROR = 0x1C,DW_DLE_ELF_GETSHDR_ERROR = 0x1D,DW_DLE_ELF_STRPTR_ERROR = 0x1E,DW_DLE_DEBUG_INFO_DUPLICATE = 0x1F,DW_DLE_DEBUG_INFO_NULL = 0x20,DW_DLE_DEBUG_ABBREV_DUPLICATE = 0x21,DW_DLE_DEBUG_ABBREV_NULL = 0x22,DW_DLE_DEBUG_ARANGES_DUPLICATE = 0x23,DW_DLE_DEBUG_ARANGES_NULL = 0x24,DW_DLE_DEBUG_LINE_DUPLICATE = 0x25,DW_DLE_DEBUG_LINE_NULL = 0x26,DW_DLE_DEBUG_LOC_DUPLICATE = 0x27,DW_DLE_DEBUG_LOC_NULL = 0x28,DW_DLE_DEBUG_MACINFO_DUPLICATE = 0x29,DW_DLE_DEBUG_MACINFO_NULL = 0x2A,DW_DLE_DEBUG_PUBNAMES_DUPLICATE = 0x2B,DW_DLE_DEBUG_PUBNAMES_NULL = 0x2C,DW_DLE_DEBUG_STR_DUPLICATE = 0x2D,DW_DLE_DEBUG_STR_NULL = 0x2E,DW_DLE_CU_LENGTH_ERROR = 0x2F,DW_DLE_VERSION_STAMP_ERROR = 0x30,DW_DLE_ABBREV_OFFSET_ERROR = 0x31,DW_DLE_ADDRESS_SIZE_ERROR = 0x32,DW_DLE_DEBUG_INFO_PTR_NULL = 0x33,DW_DLE_DIE_NULL = 0x34,DW_DLE_STRING_OFFSET_BAD = 0x35,DW_DLE_DEBUG_LINE_LENGTH_BAD = 0x36,DW_DLE_LINE_PROLOG_LENGTH_BAD = 0x37,DW_DLE_LINE_NUM_OPERANDS_BAD = 0x38,DW_DLE_LINE_SET_ADDR_ERROR = 0x39,DW_DLE_LINE_EXT_OPCODE_BAD = 0x3A,DW_DLE_DWARF_LINE_NULL = 0x3B,DW_DLE_INCL_DIR_NUM_BAD = 0x3C,DW_DLE_LINE_FILE_NUM_BAD = 0x3D,DW_DLE_ALLOC_FAIL = 0x3E,DW_DLE_NO_CALLBACK_FUNC = 0x3F,DW_DLE_SECT_ALLOC = 0x40,DW_DLE_FILE_ENTRY_ALLOC = 0x41,DW_DLE_LINE_ALLOC = 0x42,DW_DLE_FPGM_ALLOC = 0x43,DW_DLE_INCDIR_ALLOC = 0x44,DW_DLE_STRING_ALLOC = 0x45,DW_DLE_CHUNK_ALLOC = 0x46,DW_DLE_BYTEOFF_ERR = 0x47,DW_DLE_CIE_ALLOC = 0x48,DW_DLE_FDE_ALLOC = 0x49,DW_DLE_REGNO_OVFL = 0x4A,DW_DLE_CIE_OFFS_ALLOC = 0x4B,DW_DLE_WRONG_ADDRESS = 0x4C,DW_DLE_EXTRA_NEIGHBORS = 0x4D,DW_DLE_WRONG_TAG = 0x4E,DW_DLE_DIE_ALLOC = 0x4F,DW_DLE_PARENT_EXISTS = 0x50,DW_DLE_DBG_NULL = 0x51,DW_DLE_DEBUGLINE_ERROR = 0x52,DW_DLE_DEBUGFRAME_ERROR = 0x53,DW_DLE_DEBUGINFO_ERROR = 0x54,DW_DLE_ATTR_ALLOC = 0x55,DW_DLE_ABBREV_ALLOC = 0x56,DW_DLE_OFFSET_UFLW = 0x57,DW_DLE_ELF_SECT_ERR = 0x58,DW_DLE_DEBUG_FRAME_LENGTH_BAD = 0x59,DW_DLE_FRAME_VERSION_BAD = 0x5A,DW_DLE_CIE_RET_ADDR_REG_ERROR = 0x5B,DW_DLE_FDE_NULL = 0x5C,DW_DLE_FDE_DBG_NULL = 0x5D,DW_DLE_CIE_NULL = 0x5E,DW_DLE_CIE_DBG_NULL = 0x5F,DW_DLE_FRAME_TABLE_COL_BAD = 0x60,DW_DLE_PC_NOT_IN_FDE_RANGE = 0x61,DW_DLE_CIE_INSTR_EXEC_ERROR = 0x62,DW_DLE_FRAME_INSTR_EXEC_ERROR = 0x63,DW_DLE_FDE_PTR_NULL = 0x64,DW_DLE_RET_OP_LIST_NULL = 0x65,DW_DLE_LINE_CONTEXT_NULL = 0x66,DW_DLE_DBG_NO_CU_CONTEXT = 0x67,DW_DLE_DIE_NO_CU_CONTEXT = 0x68,DW_DLE_FIRST_DIE_NOT_CU = 0x69,DW_DLE_NEXT_DIE_PTR_NULL = 0x6A,DW_DLE_DEBUG_FRAME_DUPLICATE = 0x6B,DW_DLE_DEBUG_FRAME_NULL = 0x6C,DW_DLE_ABBREV_DECODE_ERROR = 0x6D,DW_DLE_DWARF_ABBREV_NULL = 0x6E,DW_DLE_ATTR_NULL = 0x6F,DW_DLE_DIE_BAD = 0x70,DW_DLE_DIE_ABBREV_BAD = 0x71,DW_DLE_ATTR_FORM_BAD = 0x72,DW_DLE_ATTR_NO_CU_CONTEXT = 0x73,DW_DLE_ATTR_FORM_SIZE_BAD = 0x74,DW_DLE_ATTR_DBG_NULL = 0x75,DW_DLE_BAD_REF_FORM = 0x76,DW_DLE_ATTR_FORM_OFFSET_BAD = 0x77,DW_DLE_LINE_OFFSET_BAD = 0x78,DW_DLE_DEBUG_STR_OFFSET_BAD = 0x79,DW_DLE_STRING_PTR_NULL = 0x7A,DW_DLE_PUBNAMES_VERSION_ERROR = 0x7B,DW_DLE_PUBNAMES_LENGTH_BAD = 0x7C,DW_DLE_GLOBAL_NULL = 0x7D,DW_DLE_GLOBAL_CONTEXT_NULL = 0x7E,DW_DLE_DIR_INDEX_BAD = 0x7F,DW_DLE_LOC_EXPR_BAD = 0x80,DW_DLE_DIE_LOC_EXPR_BAD = 0x81,DW_DLE_ADDR_ALLOC = 0x82,DW_DLE_OFFSET_BAD = 0x83,DW_DLE_MAKE_CU_CONTEXT_FAIL = 0x84,DW_DLE_REL_ALLOC = 0x85,DW_DLE_ARANGE_OFFSET_BAD = 0x86,DW_DLE_SEGMENT_SIZE_BAD = 0x87,DW_DLE_ARANGE_LENGTH_BAD = 0x88,DW_DLE_ARANGE_DECODE_ERROR = 0x89,DW_DLE_ARANGES_NULL = 0x8A,DW_DLE_ARANGE_NULL = 0x8B,DW_DLE_NO_FILE_NAME = 0x8C,DW_DLE_NO_COMP_DIR = 0x8D,DW_DLE_CU_ADDRESS_SIZE_BAD = 0x8E,DW_DLE_INPUT_ATTR_BAD = 0x8F,DW_DLE_EXPR_NULL = 0x90,DW_DLE_BAD_EXPR_OPCODE = 0x91,DW_DLE_EXPR_LENGTH_BAD = 0x92,DW_DLE_MULTIPLE_RELOC_IN_EXPR = 0x93,DW_DLE_ELF_GETIDENT_ERROR = 0x94,DW_DLE_NO_AT_MIPS_FDE = 0x95,DW_DLE_NO_CIE_FOR_FDE = 0x96,DW_DLE_DIE_ABBREV_LIST_NULL = 0x97,DW_DLE_DEBUG_FUNCNAMES_DUPLICATE = 0x98,DW_DLE_DEBUG_FUNCNAMES_NULL = 0x99,DW_DLE_DEBUG_FUNCNAMES_VERSION_ERROR = 0x9A,DW_DLE_DEBUG_FUNCNAMES_LENGTH_BAD = 0x9B,DW_DLE_FUNC_NULL = 0x9C,DW_DLE_FUNC_CONTEXT_NULL = 0x9D,DW_DLE_DEBUG_TYPENAMES_DUPLICATE = 0x9E,DW_DLE_DEBUG_TYPENAMES_NULL = 0x9F,DW_DLE_DEBUG_TYPENAMES_VERSION_ERROR = 0xA0,DW_DLE_DEBUG_TYPENAMES_LENGTH_BAD = 0xA1,DW_DLE_TYPE_NULL = 0xA2,DW_DLE_TYPE_CONTEXT_NULL = 0xA3,DW_DLE_DEBUG_VARNAMES_DUPLICATE = 0xA4,DW_DLE_DEBUG_VARNAMES_NULL = 0xA5,DW_DLE_DEBUG_VARNAMES_VERSION_ERROR = 0xA6,DW_DLE_DEBUG_VARNAMES_LENGTH_BAD = 0xA7,DW_DLE_VAR_NULL = 0xA8,DW_DLE_VAR_CONTEXT_NULL = 0xA9,DW_DLE_DEBUG_WEAKNAMES_DUPLICATE = 0xAA,DW_DLE_DEBUG_WEAKNAMES_NULL = 0xAB,DW_DLE_DEBUG_WEAKNAMES_VERSION_ERROR = 0xAC,DW_DLE_DEBUG_WEAKNAMES_LENGTH_BAD = 0xAD,DW_DLE_WEAK_NULL = 0xAE,DW_DLE_WEAK_CONTEXT_NULL = 0xAF,DW_DLE_LOCDESC_COUNT_WRONG = 0xB0,DW_DLE_MACINFO_STRING_NULL = 0xB1,DW_DLE_MACINFO_STRING_EMPTY = 0xB2,DW_DLE_MACINFO_INTERNAL_ERROR_SPACE = 0xB3,DW_DLE_MACINFO_MALLOC_FAIL = 0xB4,DW_DLE_DEBUGMACINFO_ERROR = 0xB5,DW_DLE_DEBUG_MACRO_LENGTH_BAD = 0xB6,DW_DLE_DEBUG_MACRO_MAX_BAD = 0xB7,DW_DLE_DEBUG_MACRO_INTERNAL_ERR = 0xB8,DW_DLE_DEBUG_MACRO_MALLOC_SPACE = 0xB9,DW_DLE_DEBUG_MACRO_INCONSISTENT = 0xBA,DW_DLE_DF_NO_CIE_AUGMENTATION = 0xBB,DW_DLE_DF_REG_NUM_TOO_HIGH = 0xBC,DW_DLE_DF_MAKE_INSTR_NO_INIT = 0xBD,DW_DLE_DF_NEW_LOC_LESS_OLD_LOC = 0xBE,DW_DLE_DF_POP_EMPTY_STACK = 0xBF,DW_DLE_DF_ALLOC_FAIL = 0xC0,DW_DLE_DF_FRAME_DECODING_ERROR = 0xC1,DW_DLE_DEBUG_LOC_SECTION_SHORT = 0xC2,DW_DLE_FRAME_AUGMENTATION_UNKNOWN = 0xC3,DW_DLE_PUBTYPE_CONTEXT = 0xC4,DW_DLE_DEBUG_PUBTYPES_LENGTH_BAD = 0xC5,DW_DLE_DEBUG_PUBTYPES_VERSION_ERROR = 0xC6,DW_DLE_DEBUG_PUBTYPES_DUPLICATE = 0xC7,DW_DLE_FRAME_CIE_DECODE_ERROR = 0xC8,DW_DLE_FRAME_REGISTER_UNREPRESENTABLE = 0xC9,DW_DLE_FRAME_REGISTER_COUNT_MISMATCH = 0xCA,DW_DLE_LINK_LOOP = 0xCB,DW_DLE_STRP_OFFSET_BAD = 0xCC,DW_DLE_DEBUG_RANGES_DUPLICATE = 0xCD,DW_DLE_DEBUG_RANGES_OFFSET_BAD = 0xCE,DW_DLE_DEBUG_RANGES_MISSING_END = 0xCF,DW_DLE_DEBUG_RANGES_OUT_OF_MEM = 0xD0,DW_DLE_DEBUG_SYMTAB_ERR = 0xD1,DW_DLE_DEBUG_STRTAB_ERR = 0xD2,DW_DLE_RELOC_MISMATCH_INDEX = 0xD3,DW_DLE_RELOC_MISMATCH_RELOC_INDEX = 0xD4,DW_DLE_RELOC_MISMATCH_STRTAB_INDEX = 0xD5,DW_DLE_RELOC_SECTION_MISMATCH = 0xD6,DW_DLE_RELOC_SECTION_MISSING_INDEX = 0xD7,DW_DLE_RELOC_SECTION_LENGTH_ODD = 0xD8,DW_DLE_RELOC_SECTION_PTR_NULL = 0xD9,DW_DLE_RELOC_SECTION_MALLOC_FAIL = 0xDA,DW_DLE_NO_ELF64_SUPPORT = 0xDB,DW_DLE_MISSING_ELF64_SUPPORT = 0xDC,DW_DLE_ORPHAN_FDE = 0xDD,DW_DLE_DUPLICATE_INST_BLOCK = 0xDE,DW_DLE_BAD_REF_SIG8_FORM = 0xDF,DW_DLE_ATTR_EXPRLOC_FORM_BAD = 0xE0,DW_DLE_FORM_SEC_OFFSET_LENGTH_BAD = 0xE1,DW_DLE_NOT_REF_FORM = 0xE2,DW_DLE_DEBUG_FRAME_LENGTH_NOT_MULTIPLE = 0xE3,DW_DLE_REF_SIG8_NOT_HANDLED = 0xE4,DW_DLE_DEBUG_FRAME_POSSIBLE_ADDRESS_BOTCH = 0xE5,DW_DLE_LOC_BAD_TERMINATION = 0xE6,DW_DLE_SYMTAB_SECTION_LENGTH_ODD = 0xE7,DW_DLE_RELOC_SECTION_SYMBOL_INDEX_BAD = 0xE8,DW_DLE_RELOC_SECTION_RELOC_TARGET_SIZE_UNKNOWN = 0xE9,DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO = 0xEA,DW_DLE_LINE_NUMBER_HEADER_ERROR = 0xEB,DW_DLE_DEBUG_TYPES_NULL = 0xEC,DW_DLE_DEBUG_TYPES_DUPLICATE = 0xED,DW_DLE_DEBUG_TYPES_ONLY_DWARF4 = 0xEE,DW_DLE_DEBUG_TYPEOFFSET_BAD = 0xEF,DW_DLE_GNU_OPCODE_ERROR = 0xF0,DW_DLE_LAST = 0xEF,DW_DLE_LO_USER = 0x10000,DW_DLV_BADADDR = 0xFFFFFFFF,DW_DLV_NOCOUNT = 0xFFFFFFFF,DW_DLV_BADOFFSET = 0xFFFFFFFF,DW_DLV_NO_ENTRY = 0xFFFFFFFF,DW_DLV_OK = 0x0,DW_DLV_ERROR = 0x1,DW_DLX_NO_EH_OFFSET = 0xFFFFFFFF,DW_DLX_EH_OFFSET_UNAVAILABLE = 0xFFFFFFFE,};
enum MACRO_EC {EC = 247,};
enum MACRO_EF {EF_CPU32 = 0x810000,};
enum MACRO_EI {EI_NIDENT = 16,EI_MAG0 = 0,};
enum MACRO_EL {EL = 248,};
enum MACRO_EM {EM_NONE = 0,EM_M32 = 1,EM_SPARC = 2,EM_386 = 3,EM_68K = 4,EM_88K = 5,EM_860 = 7,EM_MIPS = 8,EM_S370 = 9,EM_MIPS_RS3_LE = 10,EM_PARISC = 15,EM_VPP500 = 17,EM_SPARC32PLUS = 18,EM_960 = 19,EM_PPC = 20,EM_PPC64 = 21,EM_S390 = 22,EM_V800 = 36,EM_FR20 = 37,EM_RH32 = 38,EM_RCE = 39,EM_ARM = 40,EM_FAKE_ALPHA = 41,EM_SH = 42,EM_SPARCV9 = 43,EM_TRICORE = 44,EM_ARC = 45,EM_H8_300 = 46,EM_H8_300H = 47,EM_H8S = 48,EM_H8_500 = 49,EM_IA_64 = 50,EM_MIPS_X = 51,EM_COLDFIRE = 52,EM_68HC12 = 53,EM_MMA = 54,EM_PCP = 55,EM_NCPU = 56,EM_NDR1 = 57,EM_STARCORE = 58,EM_ME16 = 59,EM_ST100 = 60,EM_TINYJ = 61,EM_X86_64 = 62,EM_PDSP = 63,EM_FX66 = 66,EM_ST9PLUS = 67,EM_ST7 = 68,EM_68HC16 = 69,EM_68HC11 = 70,EM_68HC08 = 71,EM_68HC05 = 72,EM_SVX = 73,EM_ST19 = 74,EM_VAX = 75,EM_CRIS = 76,EM_JAVELIN = 77,EM_FIREPATH = 78,EM_ZSP = 79,EM_MMIX = 80,EM_HUANY = 81,EM_PRISM = 82,EM_AVR = 83,EM_FR30 = 84,EM_D10V = 85,EM_D30V = 86,EM_V850 = 87,EM_M32R = 88,EM_MN10300 = 89,EM_MN10200 = 90,EM_PJ = 91,EM_OPENRISC = 92,EM_ARC_A5 = 93,EM_XTENSA = 94,EM_AARCH64 = 183,EM_TILEPRO = 188,EM_TILEGX = 191,EM_NUM = 192,EM_ALPHA = 36902,};
enum MACRO_EN {EN_BINARY = 1,EN_CRYPT = 2,EN_XDR = 4,EN_MODIFIED = 8,EN_ASN1 = 64,};
enum MACRO_ES {ES = 24,};
enum MACRO_ET {ET_NONE = 0,ET_REL = 1,ET_EXEC = 2,ET_DYN = 3,ET_CORE = 4,ET_NUM = 5,ET_LOOS = 65024,ET_HIOS = 65279,ET_LOPROC = 65280,ET_HIPROC = 65535,};
enum MACRO_EV {EV_NONE = 0,EV_CURRENT = 1,EV_NUM = 2,};
enum MACRO_EX {EX_OK = 0,EX__BASE = 64,EX_USAGE = 64,EX_DATAERR = 65,EX_NOINPUT = 66,EX_NOUSER = 67,EX_NOHOST = 68,EX_UNAVAILABLE = 69,EX_SOFTWARE = 70,EX_OSERR = 71,EX_OSFILE = 72,EX_CANTCREAT = 73,EX_IOERR = 74,EX_TEMPFAIL = 75,EX_PROTOCOL = 76,EX_NOPERM = 77,EX_CONFIG = 78,EX__MAX = 78,};
enum MACRO_FB {FB_MAX = 32,};
enum MACRO_FC {FC_SP_BB_DATA_MASK = 0xFFF,FC_SP_FT_NPIV = 0x8000,FC_SP_FT_CIRO = 0x8000,FC_SP_FT_CLAD = 0x8000,FC_SP_FT_RAND = 0x4000,FC_SP_FT_VAL = 0x2000,FC_SP_FT_NPIV_ACC = 0x2000,FC_SP_FT_FPORT = 0x1000,FC_SP_FT_ABB = 0x800,FC_SP_FT_EDTR = 0x400,FC_SP_FT_MCAST = 0x200,FC_SP_FT_BCAST = 0x100,FC_SP_FT_HUNT = 0x80,FC_SP_FT_SIMP = 0x40,FC_SP_FT_SEC = 0x20,FC_SP_FT_CSYN = 0x10,FC_SP_FT_RTTOV = 0x8,FC_SP_FT_HALF = 0x4,FC_SP_FT_SEQC = 0x2,FC_SP_FT_PAYL = 0x1,FC_CPC_VALID = 0x8000,FC_CPC_IMIX = 0x4000,FC_CPC_SEQ = 0x800,FC_CPC_CAMP = 0x200,FC_CPC_PRI = 0x80,FC_CPI_CSYN = 0x10,FC_CPR_CSYN = 0x8,FC_SPP_OPA_VAL = 0x80,FC_SPP_RPA_VAL = 0x40,FC_SPP_EST_IMG_PAIR = 0x20,FC_SPP_RESP_MASK = 0xF,FC_ELS_RTV_EDRES = 0x4000000,FC_ELS_RTV_RTTOV = 0x80000,};
enum MACRO_FD {FD_SETSIZE = 1024,};
enum MACRO_FE {FE_DFL_ENV = -1,FE_NOMASK_ENV = -2,};
enum MACRO_FM {FM_PATCH = 0x1FD,OPL3_PATCH = 0x3FD,};
enum MACRO_FP {FP_XSTATE_MAGIC1 = 0x46505853,FP_XSTATE_MAGIC2 = 0x46505845,};
enum MACRO_FS {FS = 25,};
enum MACRO_FW {FW_CDEV_EVENT_BUS_RESET = 0x0,FW_CDEV_EVENT_RESPONSE = 0x1,FW_CDEV_EVENT_REQUEST = 0x2,FW_CDEV_EVENT_ISO_INTERRUPT = 0x3,FW_CDEV_EVENT_ISO_RESOURCE_ALLOCATED = 0x4,FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED = 0x5,FW_CDEV_EVENT_REQUEST2 = 0x6,FW_CDEV_EVENT_PHY_PACKET_SENT = 0x7,FW_CDEV_EVENT_PHY_PACKET_RECEIVED = 0x8,FW_CDEV_EVENT_ISO_INTERRUPT_MULTICHANNEL = 0x9,FW_CDEV_IOC_GET_SPEED = 0x2311,FW_CDEV_LONG_RESET = 0x0,FW_CDEV_SHORT_RESET = 0x1,FW_CDEV_ISO_CONTEXT_TRANSMIT = 0x0,FW_CDEV_ISO_CONTEXT_RECEIVE = 0x1,FW_CDEV_ISO_CONTEXT_RECEIVE_MULTICHANNEL = 0x2,FW_CDEV_ISO_INTERRUPT = 0x10000,FW_CDEV_ISO_SKIP = 0x20000,FW_CDEV_ISO_SYNC = 0x20000,FW_CDEV_ISO_CONTEXT_MATCH_TAG0 = 0x1,FW_CDEV_ISO_CONTEXT_MATCH_TAG1 = 0x2,FW_CDEV_ISO_CONTEXT_MATCH_TAG2 = 0x4,FW_CDEV_ISO_CONTEXT_MATCH_TAG3 = 0x8,FW_CDEV_ISO_CONTEXT_MATCH_ALL_TAGS = 0xF,FW_CDEV_VERSION = 0x3,};
enum MACRO_GA {GA = 249,};
enum MACRO_GE {GE_MAJOR = 1,GE_MINOR = 0,};
enum MACRO_GS {GS = 26,};
enum MACRO_HE {HE_REGTYPE_PCI = 1,HE_REGTYPE_RCM = 2,HE_REGTYPE_TCM = 3,HE_REGTYPE_MBOX = 4,};
enum MACRO_HT {HT_3BIT_CAP_MASK = 0xE0,HT_CAPTYPE_SLAVE = 0x0,HT_CAPTYPE_HOST = 0x20,HT_5BIT_CAP_MASK = 0xF8,HT_CAPTYPE_IRQ = 0x80,HT_CAPTYPE_REMAPPING_40 = 0xA0,HT_CAPTYPE_REMAPPING_64 = 0xA2,HT_CAPTYPE_UNITID_CLUMP = 0x90,HT_CAPTYPE_EXTCONF = 0x98,HT_CAPTYPE_MSI_MAPPING = 0xA8,HT_MSI_FLAGS = 0x2,HT_MSI_FLAGS_ENABLE = 0x1,HT_MSI_FLAGS_FIXED = 0x2,HT_MSI_FIXED_ADDR = 0xFEE00000,HT_MSI_ADDR_LO = 0x4,HT_MSI_ADDR_LO_MASK = 0xFFFFFFFFFFF00000,HT_MSI_ADDR_HI = 0x8,HT_CAPTYPE_DIRECT_ROUTE = 0xB0,HT_CAPTYPE_VCSET = 0xB8,HT_CAPTYPE_ERROR_RETRY = 0xC0,HT_CAPTYPE_GEN3 = 0xD0,HT_CAPTYPE_PM = 0xE0,HT_CAP_SIZEOF_LONG = 0x1C,HT_CAP_SIZEOF_SHORT = 0x18,};
enum MACRO_HV {HV_X64_MSR_VP_RUNTIME_AVAILABLE = 1,HV_X64_MSR_TIME_REF_COUNT_AVAILABLE = 2,HV_X64_MSR_SYNIC_AVAILABLE = 4,HV_X64_MSR_SYNTIMER_AVAILABLE = 8,HV_X64_MSR_APIC_ACCESS_AVAILABLE = 16,HV_X64_MSR_HYPERCALL_AVAILABLE = 32,HV_X64_MSR_VP_INDEX_AVAILABLE = 64,HV_X64_MSR_RESET_AVAILABLE = 128,HV_X64_MSR_STAT_PAGES_AVAILABLE = 256,HV_X64_CREATE_PARTITIONS = 1,HV_X64_ACCESS_PARTITION_ID = 2,HV_X64_ACCESS_MEMORY_POOL = 4,HV_X64_ADJUST_MESSAGE_BUFFERS = 8,HV_X64_POST_MESSAGES = 16,HV_X64_SIGNAL_EVENTS = 32,HV_X64_CREATE_PORT = 64,HV_X64_CONNECT_PORT = 128,HV_X64_ACCESS_STATS = 256,HV_X64_DEBUGGING = 2048,HV_X64_CPU_POWER_MANAGEMENT = 4096,HV_X64_CONFIGURE_PROFILER = 8192,HV_X64_MWAIT_AVAILABLE = 1,HV_X64_GUEST_DEBUGGING_AVAILABLE = 2,HV_X64_PERF_MONITOR_AVAILABLE = 4,HV_X64_CPU_DYNAMIC_PARTITIONING_AVAILABLE = 8,HV_X64_HYPERCALL_PARAMS_XMM_AVAILABLE = 16,HV_X64_GUEST_IDLE_STATE_AVAILABLE = 32,HV_X64_MWAIT_RECOMMENDED = 1,HV_X64_LOCAL_TLB_FLUSH_RECOMMENDED = 2,HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED = 4,HV_X64_APIC_ACCESS_RECOMMENDED = 8,HV_X64_SYSTEM_RESET_RECOMMENDED = 16,HV_X64_RELAXED_TIMING_RECOMMENDED = 32,HV_X64_MSR_GUEST_OS_ID = 1073741824,HV_X64_MSR_HYPERCALL = 1073741825,HV_X64_MSR_VP_INDEX = 1073741826,HV_X64_MSR_TIME_REF_COUNT = 1073741856,HV_X64_MSR_EOI = 1073741936,HV_X64_MSR_ICR = 1073741937,HV_X64_MSR_TPR = 1073741938,HV_X64_MSR_APIC_ASSIST_PAGE = 1073741939,HV_X64_MSR_SCONTROL = 1073741952,HV_X64_MSR_SVERSION = 1073741953,HV_X64_MSR_SIEFP = 1073741954,HV_X64_MSR_SIMP = 1073741955,HV_X64_MSR_EOM = 1073741956,HV_X64_MSR_SINT0 = 1073741968,HV_X64_MSR_SINT1 = 1073741969,HV_X64_MSR_SINT2 = 1073741970,HV_X64_MSR_SINT3 = 1073741971,HV_X64_MSR_SINT4 = 1073741972,HV_X64_MSR_SINT5 = 1073741973,HV_X64_MSR_SINT6 = 1073741974,HV_X64_MSR_SINT7 = 1073741975,HV_X64_MSR_SINT8 = 1073741976,HV_X64_MSR_SINT9 = 1073741977,HV_X64_MSR_SINT10 = 1073741978,HV_X64_MSR_SINT11 = 1073741979,HV_X64_MSR_SINT12 = 1073741980,HV_X64_MSR_SINT13 = 1073741981,HV_X64_MSR_SINT14 = 1073741982,HV_X64_MSR_SINT15 = 1073741983,HV_X64_MSR_HYPERCALL_ENABLE = 1,HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_SHIFT = 12,HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_MASK = -4096,HV_X64_HV_NOTIFY_LONG_SPIN_WAIT = 8,HV_X64_MSR_APIC_ASSIST_PAGE_ENABLE = 1,HV_X64_MSR_APIC_ASSIST_PAGE_ADDRESS_SHIFT = 12,HV_X64_MSR_APIC_ASSIST_PAGE_ADDRESS_MASK = -4096,HV_PROCESSOR_POWER_STATE_C0 = 0,HV_PROCESSOR_POWER_STATE_C1 = 1,HV_PROCESSOR_POWER_STATE_C2 = 2,HV_PROCESSOR_POWER_STATE_C3 = 3,HV_STATUS_SUCCESS = 0,HV_STATUS_INVALID_HYPERCALL_CODE = 2,HV_STATUS_INVALID_HYPERCALL_INPUT = 3,HV_STATUS_INVALID_ALIGNMENT = 4,HV_STATUS_INSUFFICIENT_BUFFERS = 19,};
enum MACRO_HZ {HZ = 100,};
enum MACRO_IB {IB_USER_CM_ABI_VERSION = 5,IB_UCM_PRES_DATA = 1,IB_UCM_PRES_INFO = 2,IB_UCM_PRES_PRIMARY = 4,IB_UCM_PRES_ALTERNATE = 8,IB_USER_MAD_ABI_VERSION = 5,IB_IOCTL_MAGIC = 27,IB_USER_MAD_ENABLE_PKEY = 6915,IB_USER_VERBS_ABI_VERSION = 6,};
enum MACRO_ID {ID_ADDRESS = 0x180,};
enum MACRO_IF {IF_NAMESIZE = 16,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,};
enum MACRO_IO {_LFS_ASYNCHRONOUS_IO = 1,_POSIX_PRIORITIZED_IO = 200809,_LFS64_ASYNCHRONOUS_IO = 1,};
enum MACRO_IP {IP_OPTIONS = 4,IP_HDRINCL = 3,IP_TOS = 1,IP_TTL = 2,IP_RECVOPTS = 6,IP_RETOPTS = 7,IP_MULTICAST_IF = 32,IP_MULTICAST_TTL = 33,IP_MULTICAST_LOOP = 34,IP_ADD_MEMBERSHIP = 35,IP_DROP_MEMBERSHIP = 36,IP_UNBLOCK_SOURCE = 37,IP_BLOCK_SOURCE = 38,IP_ADD_SOURCE_MEMBERSHIP = 39,IP_DROP_SOURCE_MEMBERSHIP = 40,IP_MSFILTER = 41,};
enum MACRO_IS {IS_UI = 0x3,};
enum MACRO_K8 {K8_INTP_C1E_ACTIVE_MASK = 0x18000000,};
enum MACRO_KB {KB_84 = 0x1,KB_101 = 0x2,KB_OTHER = 0x3,};
enum MACRO_KD {KD_TEXT = 0x0,KD_GRAPHICS = 0x1,KD_TEXT0 = 0x2,KD_TEXT1 = 0x3,};
enum MACRO_KG {KG_SHIFT = 0,KG_CTRL = 2,KG_ALT = 3,KG_ALTGR = 1,KG_SHIFTL = 4,KG_KANASHIFT = 4,KG_SHIFTR = 5,KG_CTRLL = 6,KG_CTRLR = 7,KG_CAPSSHIFT = 8,};
enum MACRO_KT {KT_LATIN = 0,KT_LETTER = 11,KT_FN = 1,KT_SPEC = 2,KT_PAD = 3,KT_DEAD = 4,KT_CONS = 5,KT_CUR = 6,KT_SHIFT = 7,KT_META = 8,KT_ASCII = 9,KT_LOCK = 10,KT_SLOCK = 12,KT_DEAD2 = 13,KT_BRL = 14,};
enum MACRO_LC {LC_CTYPE = 0,LC_NUMERIC = 1,LC_TIME = 2,LC_COLLATE = 3,LC_MONETARY = 4,LC_MESSAGES = 5,LC_ALL = 6,LC_PAPER = 7,LC_NAME = 8,LC_ADDRESS = 9,LC_TELEPHONE = 10,LC_MEASUREMENT = 11,LC_IDENTIFICATION = 12,LC_CTYPE_MASK = 1,LC_NUMERIC_MASK = 2,LC_TIME_MASK = 4,LC_COLLATE_MASK = 8,LC_MONETARY_MASK = 16,LC_MESSAGES_MASK = 32,LC_PAPER_MASK = 128,LC_NAME_MASK = 256,LC_ADDRESS_MASK = 512,LC_TELEPHONE_MASK = 1024,LC_MEASUREMENT_MASK = 2048,LC_IDENTIFICATION_MASK = 4096,LC_ALL_MASK = 8127,LC_GLOBAL_LOCALE = -1,};
enum MACRO_LL {LL_NONE = 0,LL_EXACT_MATCH = 1,LL_IGNORE_INT_VER = 2,LL_REQUIRE_MINOR = 4,LL_EXPORTS = 8,LL_DELAY_LOAD = 16,LL_DELTA = 32,};
enum MACRO_LM {LM_MODE = 1,LM_FORWARDMASK = 2,LM_SLC = 3,};
enum MACRO_LO {LO_NAME_SIZE = 64,LO_KEY_SIZE = 32,LO_CRYPT_NONE = 0,LO_CRYPT_XOR = 1,LO_CRYPT_DES = 2,LO_CRYPT_FISH2 = 3,LO_CRYPT_BLOW = 4,LO_CRYPT_CAST128 = 5,LO_CRYPT_IDEA = 6,LO_CRYPT_DUMMY = 9,LO_CRYPT_SKIPJACK = 10,LO_CRYPT_CRYPTOAPI = 18,};
enum MACRO_LP {LP_EXIST = 0x1,LP_SELEC = 0x2,LP_BUSY = 0x4,LP_BUSY_BIT_POS = 0x2,LP_OFFL = 0x8,LP_NOPA = 0x10,LP_ERR = 0x20,LP_ABORT = 0x40,LP_CAREFUL = 0x80,LP_ABORTOPEN = 0x100,LP_TRUST_IRQ_ = 0x200,LP_NO_REVERSE = 0x400,LP_DATA_AVAIL = 0x800,LP_PBUSY = 0x80,LP_PACK = 0x40,LP_POUTPA = 0x20,LP_PSELECD = 0x10,LP_PERRORP = 0x8,LP_INIT_CHAR = 0x3E8,LP_INIT_WAIT = 0x1,LP_INIT_TIME = 0x2,};
enum MACRO_MB {MB_LEN_MAX = 16,};
enum MACRO_MD {MD_RESERVED_BYTES = 65536,MD_RESERVED_SECTORS = 128,MD_SB_BYTES = 4096,MD_SB_WORDS = 1024,MD_SB_SECTORS = 8,MD_SB_GENERIC_OFFSET = 0,MD_SB_PERSONALITY_OFFSET = 64,MD_SB_DISKS_OFFSET = 128,MD_SB_DESCRIPTOR_OFFSET = 992,MD_SB_GENERIC_CONSTANT_WORDS = 32,MD_SB_GENERIC_STATE_WORDS = 32,MD_SB_GENERIC_WORDS = 64,MD_SB_PERSONALITY_WORDS = 64,MD_SB_DESCRIPTOR_WORDS = 32,MD_SB_DISKS = 27,MD_SB_DISKS_WORDS = 864,MD_SB_RESERVED_WORDS = 0,MD_SB_EQUAL_WORDS = 992,MD_DISK_FAULTY = 0,MD_DISK_ACTIVE = 1,MD_DISK_SYNC = 2,MD_DISK_REMOVED = 3,MD_DISK_WRITEMOSTLY = 9,MD_SB_MAGIC = -1456779524,MD_SB_CLEAN = 0,MD_SB_ERRORS = 1,MD_SB_BITMAP_PRESENT = 8,MD_SUPERBLOCK_1_TIME_SEC_MASK = 1099511627775,};
enum MACRO_MF {MF_CLEAR_DTR = 1,MF_CLEAR_RTS = 2,MF_REOPEN = 128,};
enum MACRO_MM {MM_NULLLBL = 0,MM_NULLSEV = 0,MM_NULLTXT = 0,MM_NULLACT = 0,MM_NULLTAG = 0,};
enum MACRO_MQ {MQ_BYTES_MAX = 819200,};
enum MACRO_MS {MS_ASYNC = 1,MS_SYNC = 4,MS_INVALIDATE = 2,};
enum MACRO_MT {MT_ISUNKNOWN = 0x1,MT_ISQIC02 = 0x2,MT_ISWT5150 = 0x3,MT_ISARCHIVE_5945L2 = 0x4,MT_ISCMSJ500 = 0x5,MT_ISTDC3610 = 0x6,MT_ISARCHIVE_VP60I = 0x7,MT_ISARCHIVE_2150L = 0x8,MT_ISARCHIVE_2060L = 0x9,MT_ISARCHIVESC499 = 0xA,MT_ISQIC02_ALL_FEATURES = 0xF,MT_ISWT5099EEN24 = 0x11,MT_ISTEAC_MT2ST = 0x12,MT_ISEVEREX_FT40A = 0x32,MT_ISDDS1 = 0x51,MT_ISDDS2 = 0x52,MT_ISSCSI1 = 0x71,MT_ISSCSI2 = 0x72,MT_ISFTAPE_UNKNOWN = 0x800000,MT_ISFTAPE_FLAG = 0x800000,MT_ST_BLKSIZE_SHIFT = 0x0,MT_ST_BLKSIZE_MASK = 0xFFFFFF,MT_ST_DENSITY_SHIFT = 0x18,MT_ST_DENSITY_MASK = 0xFF000000,MT_ST_SOFTERR_SHIFT = 0x0,MT_ST_SOFTERR_MASK = 0xFFFF,MT_ST_OPTIONS = 0xF0000000,MT_ST_BOOLEANS = 0x10000000,MT_ST_SETBOOLEANS = 0x30000000,MT_ST_CLEARBOOLEANS = 0x40000000,MT_ST_WRITE_THRESHOLD = 0x20000000,MT_ST_DEF_BLKSIZE = 0x50000000,MT_ST_DEF_OPTIONS = 0x60000000,MT_ST_BUFFER_WRITES = 0x1,MT_ST_ASYNC_WRITES = 0x2,MT_ST_READ_AHEAD = 0x4,MT_ST_DEBUGGING = 0x8,MT_ST_TWO_FM = 0x10,MT_ST_FAST_MTEOM = 0x20,MT_ST_AUTO_LOCK = 0x40,MT_ST_DEF_WRITES = 0x80,MT_ST_CAN_BSR = 0x100,MT_ST_NO_BLKLIMS = 0x200,MT_ST_CAN_PARTITIONS = 0x400,MT_ST_SCSI2LOGICAL = 0x800,MT_ST_CLEAR_DEFAULT = 0xFFFFF,MT_ST_DEF_DENSITY = 0x60100000,MT_ST_DEF_COMPRESSION = 0x60200000,MT_ST_DEF_DRVBUFFER = 0x60300000,MT_ST_HPLOADER_OFFSET = 0x2710,};
enum MACRO_NC {NC_TPARM_included = 1,};
enum MACRO_ND {ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137,ND_RA_FLAG_MANAGED = 128,ND_RA_FLAG_OTHER = 64,ND_RA_FLAG_HOME_AGENT = 32,ND_NA_FLAG_ROUTER = 128,ND_NA_FLAG_SOLICITED = 64,ND_NA_FLAG_OVERRIDE = 32,ND_OPT_SOURCE_LINKADDR = 1,ND_OPT_TARGET_LINKADDR = 2,ND_OPT_PREFIX_INFORMATION = 3,ND_OPT_REDIRECTED_HEADER = 4,ND_OPT_MTU = 5,ND_OPT_RTR_ADV_INTERVAL = 7,ND_OPT_HOME_AGENT_INFO = 8,ND_OPT_PI_FLAG_ONLINK = 128,ND_OPT_PI_FLAG_AUTO = 64,ND_OPT_PI_FLAG_RADDR = 32,};
enum MACRO_NF {NF_DROP = 0,NF_ACCEPT = 1,NF_STOLEN = 2,NF_QUEUE = 3,NF_REPEAT = 4,NF_STOP = 5,NF_MAX_VERDICT = 5,NF_VERDICT_MASK = 255,NF_VERDICT_FLAG_QUEUE_BYPASS = 32768,NF_VERDICT_QMASK = -65536,NF_VERDICT_QBITS = 16,};
enum MACRO_NI {NI_MAXHOST = 1025,NI_MAXSERV = 32,NI_NUMERICHOST = 1,NI_NUMERICSERV = 2,NI_NOFQDN = 4,NI_NAMEREQD = 8,NI_DGRAM = 16,NI_IDN = 32,NI_IDN_ALLOW_UNASSIGNED = 64,NI_IDN_USE_STD3_ASCII_RULES = 128,};
enum MACRO_NL {NL_ARGMAX = 4096,NL_LANGMAX = 2048,};
enum MACRO_NO {NO_JUSTIFICATION = 0,};
enum MACRO_NR {NR_ICMP_TYPES = 18,};
enum MACRO_NS {NS_PACKETSZ = 512,NS_MAXDNAME = 1025,NS_MAXMSG = 65535,NS_MAXCDNAME = 255,NS_MAXLABEL = 63,NS_HFIXEDSZ = 12,NS_QFIXEDSZ = 4,NS_RRFIXEDSZ = 10,NS_INT32SZ = 4,NS_INT16SZ = 2,NS_INT8SZ = 1,NS_INADDRSZ = 4,NS_IN6ADDRSZ = 16,NS_CMPRSFLGS = 192,NS_DEFAULTPORT = 53,NS_TSIG_FUDGE = 300,NS_TSIG_TCP_COUNT = 100,NS_TSIG_ERROR_NO_TSIG = -10,NS_TSIG_ERROR_NO_SPACE = -11,NS_TSIG_ERROR_FORMERR = -12,NS_KEY_TYPEMASK = 49152,NS_KEY_TYPE_AUTH_CONF = 0,NS_KEY_TYPE_CONF_ONLY = 32768,NS_KEY_TYPE_AUTH_ONLY = 16384,NS_KEY_TYPE_NO_KEY = 49152,NS_KEY_NO_AUTH = 32768,NS_KEY_NO_CONF = 16384,NS_KEY_RESERVED2 = 8192,NS_KEY_EXTENDED_FLAGS = 4096,NS_KEY_RESERVED4 = 2048,NS_KEY_RESERVED5 = 1024,NS_KEY_NAME_TYPE = 768,NS_KEY_NAME_USER = 0,NS_KEY_NAME_ENTITY = 512,NS_KEY_NAME_ZONE = 256,NS_KEY_NAME_RESERVED = 768,NS_KEY_RESERVED8 = 128,NS_KEY_RESERVED9 = 64,NS_KEY_RESERVED10 = 32,NS_KEY_RESERVED11 = 16,NS_KEY_SIGNATORYMASK = 15,NS_KEY_RESERVED_BITMASK = 11504,NS_KEY_RESERVED_BITMASK2 = 65535,NS_ALG_MD5RSA = 1,NS_ALG_DH = 2,NS_ALG_DSA = 3,NS_ALG_DSS = 3,NS_ALG_EXPIRE_ONLY = 253,NS_ALG_PRIVATE_OID = 254,NS_KEY_PROT_TLS = 1,NS_KEY_PROT_EMAIL = 2,NS_KEY_PROT_DNSSEC = 3,NS_KEY_PROT_IPSEC = 4,NS_KEY_PROT_ANY = 255,NS_MD5RSA_MIN_BITS = 512,NS_MD5RSA_MAX_BITS = 4096,NS_MD5RSA_MAX_BYTES = 8195,NS_MD5RSA_MAX_BASE64 = 10928,NS_MD5RSA_MIN_SIZE = 64,NS_MD5RSA_MAX_SIZE = 512,NS_DSA_SIG_SIZE = 41,NS_DSA_MIN_SIZE = 213,NS_DSA_MAX_BYTES = 405,NS_SIG_TYPE = 0,NS_SIG_ALG = 2,NS_SIG_LABELS = 3,NS_SIG_OTTL = 4,NS_SIG_EXPIR = 8,NS_SIG_SIGNED = 12,NS_SIG_FOOT = 16,NS_SIG_SIGNER = 18,NS_NXT_BITS = 8,NS_NXT_MAX = 127,NS_OPT_DNSSEC_OK = 32768,NS_OPT_NSID = 3,};
enum MACRO_NT {NT_PRSTATUS = 1,NT_FPREGSET = 2,NT_PRPSINFO = 3,NT_PRXREG = 4,NT_TASKSTRUCT = 4,NT_PLATFORM = 5,NT_AUXV = 6,NT_GWINDOWS = 7,NT_ASRS = 8,NT_PSTATUS = 10,NT_PSINFO = 13,NT_PRCRED = 14,NT_UTSNAME = 15,NT_LWPSTATUS = 16,NT_LWPSINFO = 17,NT_PRFPXREG = 20,NT_PRXFPREG = 1189489535,NT_PPC_VMX = 256,NT_PPC_SPE = 257,NT_PPC_VSX = 258,NT_386_TLS = 512,NT_386_IOPERM = 513,NT_X86_XSTATE = 514,NT_S390_HIGH_GPRS = 768,NT_S390_TIMER = 769,NT_S390_TODCMP = 770,NT_S390_TODPREG = 771,NT_S390_CTRS = 772,NT_S390_PREFIX = 773,NT_S390_LAST_BREAK = 774,NT_S390_SYSTEM_CALL = 775,NT_ARM_VFP = 1024,NT_ARM_TLS = 1025,NT_ARM_HW_BREAK = 1026,NT_ARM_HW_WATCH = 1027,NT_VERSION = 1,};
enum MACRO_NW {NW_NS_DOS = 0,NW_NS_MAC = 1,NW_NS_NFS = 2,NW_NS_FTAM = 3,NW_NS_OS2 = 4,};
enum MACRO_OC {OC_MODE_OPEN = 0x1,OC_MODE_TRUNCATE = 0x2,OC_MODE_REPLACE = 0x2,OC_MODE_CREATE = 0x8,OC_ACTION_NONE = 0x0,OC_ACTION_OPEN = 0x1,OC_ACTION_CREATE = 0x2,OC_ACTION_TRUNCATE = 0x4,OC_ACTION_REPLACE = 0x4,};
enum MACRO_OK {R_OK = 4,W_OK = 2,X_OK = 1,F_OK = 0,};
enum MACRO_PA {PA_FLAG_MASK = 0xFF00,PA_FLAG_LONG_LONG = 0x100,PA_FLAG_LONG_DOUBLE = 0x100,PA_FLAG_LONG = 0x200,PA_FLAG_SHORT = 0x400,PA_FLAG_PTR = 0x800,};
enum MACRO_PF {PF_UNSPEC = 0,PF_LOCAL = 1,PF_UNIX = 1,PF_FILE = 1,PF_INET = 2,PF_AX25 = 3,PF_IPX = 4,PF_APPLETALK = 5,PF_NETROM = 6,PF_BRIDGE = 7,PF_ATMPVC = 8,PF_X25 = 9,PF_INET6 = 10,PF_ROSE = 11,PF_DECnet = 12,PF_NETBEUI = 13,PF_SECURITY = 14,PF_KEY = 15,PF_NETLINK = 16,PF_ROUTE = 16,PF_PACKET = 17,PF_ASH = 18,PF_ECONET = 19,PF_ATMSVC = 20,PF_RDS = 21,PF_SNA = 22,PF_IRDA = 23,PF_PPPOX = 24,PF_WANPIPE = 25,PF_LLC = 26,PF_CAN = 29,PF_TIPC = 30,PF_BLUETOOTH = 31,PF_IUCV = 32,PF_RXRPC = 33,PF_ISDN = 34,PF_PHONET = 35,PF_IEEE802154 = 36,PF_CAIF = 37,PF_ALG = 38,PF_NFC = 39,PF_MAX = 40,};
enum MACRO_PG {PG_MAGIC = 80,PG_RESET = 90,PG_COMMAND = 67,PG_MAX_DATA = 32768,};
enum MACRO_PH {PH_IOC_MAGIC = 112,};
enum MACRO_PM {PM_MAJOR_VERSION = 1,PM_MINOR_VERSION = 0,PM_GetProxyAddr = 1,PM_GetProxyAddrReply = 2,PM_StartProxy = 3,PM_Unable = 0,PM_Success = 1,PM_Failure = 2,};
enum MACRO_PN {PN_XNUM = 0xFFFF,};
enum MACRO_PP {PP_IOCTL = 112,};
enum MACRO_PR {PR_SET_PDEATHSIG = 1,PR_GET_PDEATHSIG = 2,PR_GET_DUMPABLE = 3,PR_SET_DUMPABLE = 4,PR_GET_UNALIGN = 5,PR_SET_UNALIGN = 6,PR_UNALIGN_NOPRINT = 1,PR_UNALIGN_SIGBUS = 2,PR_GET_KEEPCAPS = 7,PR_SET_KEEPCAPS = 8,PR_GET_FPEMU = 9,PR_SET_FPEMU = 10,PR_FPEMU_NOPRINT = 1,PR_FPEMU_SIGFPE = 2,PR_GET_FPEXC = 11,PR_SET_FPEXC = 12,PR_FP_EXC_SW_ENABLE = 128,PR_FP_EXC_DIV = 65536,PR_FP_EXC_OVF = 131072,PR_FP_EXC_UND = 262144,PR_FP_EXC_RES = 524288,PR_FP_EXC_INV = 1048576,PR_FP_EXC_DISABLED = 0,PR_FP_EXC_NONRECOV = 1,PR_FP_EXC_ASYNC = 2,PR_FP_EXC_PRECISE = 3,PR_GET_TIMING = 13,PR_SET_TIMING = 14,PR_TIMING_STATISTICAL = 0,PR_TIMING_TIMESTAMP = 1,PR_SET_NAME = 15,PR_GET_NAME = 16,PR_GET_ENDIAN = 19,PR_SET_ENDIAN = 20,PR_ENDIAN_BIG = 0,PR_ENDIAN_LITTLE = 1,PR_ENDIAN_PPC_LITTLE = 2,PR_GET_SECCOMP = 21,PR_SET_SECCOMP = 22,PR_CAPBSET_READ = 23,PR_CAPBSET_DROP = 24,PR_GET_TSC = 25,PR_SET_TSC = 26,PR_TSC_ENABLE = 1,PR_TSC_SIGSEGV = 2,PR_GET_SECUREBITS = 27,PR_SET_SECUREBITS = 28,PR_SET_TIMERSLACK = 29,PR_GET_TIMERSLACK = 30,PR_TASK_PERF_EVENTS_DISABLE = 31,PR_TASK_PERF_EVENTS_ENABLE = 32,PR_MCE_KILL = 33,PR_MCE_KILL_CLEAR = 0,PR_MCE_KILL_SET = 1,PR_MCE_KILL_LATE = 0,PR_MCE_KILL_EARLY = 1,PR_MCE_KILL_DEFAULT = 2,PR_MCE_KILL_GET = 34,PR_SET_MM = 35,PR_SET_MM_START_CODE = 1,PR_SET_MM_END_CODE = 2,PR_SET_MM_START_DATA = 3,PR_SET_MM_END_DATA = 4,PR_SET_MM_START_STACK = 5,PR_SET_MM_START_BRK = 6,PR_SET_MM_BRK = 7,PR_SET_MM_ARG_START = 8,PR_SET_MM_ARG_END = 9,PR_SET_MM_ENV_START = 10,PR_SET_MM_ENV_END = 11,PR_SET_MM_AUXV = 12,PR_SET_MM_EXE_FILE = 13,PR_SET_PTRACER = 1499557217,PR_SET_PTRACER_ANY = -1,PR_SET_CHILD_SUBREAPER = 36,PR_GET_CHILD_SUBREAPER = 37,PR_SET_NO_NEW_PRIVS = 38,PR_GET_NO_NEW_PRIVS = 39,PR_GET_TID_ADDRESS = 40,};
enum MACRO_PT {PT_NULL = 0,PT_LOAD = 1,PT_DYNAMIC = 2,PT_INTERP = 3,PT_NOTE = 4,PT_SHLIB = 5,PT_PHDR = 6,PT_TLS = 7,PT_NUM = 8,PT_LOOS = 1610612736,PT_GNU_EH_FRAME = 1685382480,PT_GNU_STACK = 1685382481,PT_GNU_RELRO = 1685382482,PT_LOSUNW = 1879048186,PT_SUNWBSS = 1879048186,PT_SUNWSTACK = 1879048187,PT_HISUNW = 1879048191,PT_HIOS = 1879048191,PT_LOPROC = 1879048192,PT_HIPROC = 2147483647,};
enum MACRO_PX {PX_PROTO_OE = 0,PX_PROTO_OL2TP = 1,PX_PROTO_PPTP = 2,PX_MAX_PROTO = 3,};
enum MACRO_Py {Py_ENABLE_SHARED = 1,Py_UNICODE_SIZE = 4,Py_USING_UNICODE = 1,};
enum MACRO_R8 {R8 = 9,};
enum MACRO_RB {RB_AUTOBOOT = 0x1234567,RB_HALT_SYSTEM = 0xCDEF0123,RB_ENABLE_CAD = 0x89ABCDEF,RB_DISABLE_CAD = 0x0,RB_POWER_OFF = 0x4321FEDC,RB_SW_SUSPEND = 0xD000FCE2,RB_KEXEC = 0x45584543,};
enum MACRO_RE {RE_SYNTAX_EMACS = 0,RE_DUP_MAX = 32767,};
enum MACRO_RR {RR_Rotate_0 = 1,RR_Rotate_90 = 2,RR_Rotate_180 = 4,RR_Rotate_270 = 8,RR_Reflect_X = 16,RR_Reflect_Y = 32,};
enum MACRO_RT {RT_CLASS_UNSPEC = 0,RT_CLASS_DEFAULT = 253,RT_CLASS_MAIN = 254,RT_CLASS_LOCAL = 255,RT_CLASS_MAX = 255,};
enum MACRO_RX {RX_FILTER_ID = 0x20,RX_CHECK_DLC = 0x40,RX_NO_AUTOTIMER = 0x80,RX_ANNOUNCE_RESUME = 0x100,};
enum MACRO_SA {SA_NOCLDSTOP = 1,SA_NOCLDWAIT = 2,SA_SIGINFO = 4,SA_ONSTACK = 134217728,SA_RESTART = 268435456,SA_NODEFER = 1073741824,SA_RESETHAND = -2147483648,SA_INTERRUPT = 536870912,SA_NOMASK = 1073741824,SA_ONESHOT = -2147483648,SA_STACK = 134217728,};
enum MACRO_SB {SB = 250,};
enum MACRO_SC {SC_COMP_PROT = 0x1,SC_COMP_AC = 0x2,SC_COMP_TCP = 0x4,SC_NO_TCP_CCID = 0x8,SC_REJ_COMP_AC = 0x10,SC_REJ_COMP_TCP = 0x20,SC_CCP_OPEN = 0x40,SC_CCP_UP = 0x80,SC_ENABLE_IP = 0x100,SC_COMP_RUN = 0x1000,SC_DECOMP_RUN = 0x2000,SC_DEBUG = 0x10000,SC_LOG_INPKT = 0x20000,SC_LOG_OUTPKT = 0x40000,SC_LOG_RAWIN = 0x80000,SC_LOG_FLUSH = 0x100000,SC_MASK = 0xFE0FFFF,SC_ESCAPED = 0x80000000,SC_FLUSH = 0x40000000,SC_VJ_RESET = 0x20000000,SC_XMIT_BUSY = 0x10000000,SC_RCV_ODDP = 0x8000000,SC_RCV_EVNP = 0x4000000,SC_RCV_B7_1 = 0x2000000,SC_RCV_B7_0 = 0x1000000,SC_DC_FERROR = 0x800000,SC_DC_ERROR = 0x400000,};
enum MACRO_SG {SG_DXFER_NONE = -1,SG_DXFER_TO_DEV = -2,SG_DXFER_FROM_DEV = -3,SG_DXFER_TO_FROM_DEV = -4,SG_FLAG_DIRECT_IO = 1,SG_FLAG_LUN_INHIBIT = 2,SG_FLAG_NO_DXFER = 65536,SG_INFO_OK_MASK = 1,SG_INFO_OK = 0,SG_INFO_CHECK = 1,SG_INFO_DIRECT_IO_MASK = 6,SG_INFO_INDIRECT_IO = 0,SG_INFO_DIRECT_IO = 2,SG_INFO_MIXED_IO = 4,SG_EMULATED_HOST = 8707,SG_SET_TRANSFORM = 8708,SG_GET_TRANSFORM = 8709,SG_SET_RESERVED_SIZE = 8821,SG_GET_RESERVED_SIZE = 8818,SG_GET_SCSI_ID = 8822,SG_SET_FORCE_LOW_DMA = 8825,SG_GET_LOW_DMA = 8826,SG_SET_FORCE_PACK_ID = 8827,SG_GET_PACK_ID = 8828,SG_GET_NUM_WAITING = 8829,SG_GET_SG_TABLESIZE = 8831,SG_GET_VERSION_NUM = 8834,SG_SCSI_RESET = 8836,SG_SCSI_RESET_NOTHING = 0,SG_SCSI_RESET_DEVICE = 1,SG_SCSI_RESET_BUS = 2,SG_SCSI_RESET_HOST = 3,SG_IO = 8837,SG_GET_REQUEST_TABLE = 8838,SG_SET_KEEP_ORPHAN = 8839,SG_GET_KEEP_ORPHAN = 8840,SG_SCATTER_SZ = 32768,SG_DEFAULT_RETRIES = 1,SG_DEF_FORCE_LOW_DMA = 0,SG_DEF_FORCE_PACK_ID = 0,SG_DEF_KEEP_ORPHAN = 0,SG_DEF_RESERVED_SIZE = 32768,SG_MAX_QUEUE = 16,SG_BIG_BUFF = 32768,SG_MAX_SENSE = 16,SG_SET_TIMEOUT = 8705,SG_GET_TIMEOUT = 8706,SG_GET_COMMAND_Q = 8816,SG_SET_COMMAND_Q = 8817,SG_SET_DEBUG = 8830,SG_NEXT_CMD_LEN = 8835,SG_DEFAULT_TIMEOUT = 6000,SG_DEF_COMMAND_Q = 0,SG_DEF_UNDERRUN_FLAG = 0,};
enum MACRO_SI {SI_LOAD_SHIFT = 16,};
enum MACRO_SL {SL_MODE_SLIP = 0,SL_MODE_CSLIP = 1,SL_MODE_KISS = 4,SL_OPT_SIXBIT = 2,SL_OPT_ADAPTIVE = 8,};
enum MACRO_SM {SM_MAXSTRLEN = 1024,SM_PROG = 100024,SM_VERS = 1,SM_STAT = 1,SM_MON = 2,SM_UNMON = 3,SM_UNMON_ALL = 4,SM_SIMU_CRASH = 5,};
enum MACRO_SO {SO_DEBUG = 1,SO_REUSEADDR = 2,SO_TYPE = 3,SO_ERROR = 4,SO_DONTROUTE = 5,SO_BROADCAST = 6,SO_SNDBUF = 7,SO_RCVBUF = 8,SO_SNDBUFFORCE = 32,SO_RCVBUFFORCE = 33,SO_KEEPALIVE = 9,SO_OOBINLINE = 10,SO_NO_CHECK = 11,SO_PRIORITY = 12,SO_LINGER = 13,SO_BSDCOMPAT = 14,SO_REUSEPORT = 15,SO_PASSCRED = 16,SO_PEERCRED = 17,SO_RCVLOWAT = 18,SO_SNDLOWAT = 19,SO_RCVTIMEO = 20,SO_SNDTIMEO = 21,SO_SECURITY_AUTHENTICATION = 22,SO_SECURITY_ENCRYPTION_TRANSPORT = 23,SO_SECURITY_ENCRYPTION_NETWORK = 24,SO_BINDTODEVICE = 25,SO_ATTACH_FILTER = 26,SO_DETACH_FILTER = 27,SO_GET_FILTER = 26,SO_PEERNAME = 28,SO_TIMESTAMP = 29,};
enum MACRO_SS {SS = 20,};
enum MACRO_SV {SV_ONSTACK = 1,SV_INTERRUPT = 2,SV_RESETHAND = 4,};
enum MACRO_TA {TA_BINARY = 1,TA_CRYPT = 2,TA_XDR = 4,TA_SEARCHABLE = 8,TA_CASE = 16,TA_MODIFIED = 32,TA_ASN1 = 64,};
enum MACRO_TC {TC_PRIO_BESTEFFORT = 0,TC_PRIO_FILLER = 1,TC_PRIO_BULK = 2,TC_PRIO_INTERACTIVE_BULK = 4,TC_PRIO_INTERACTIVE = 6,TC_PRIO_CONTROL = 7,TC_PRIO_MAX = 15,TC_H_MAJ_MASK = -65536,TC_H_MIN_MASK = 65535,TC_H_UNSPEC = 0,TC_H_ROOT = -1,TC_H_INGRESS = -15,TC_LINKLAYER_MASK = 15,TC_RTAB_SIZE = 1024,};
enum MACRO_TD {TD_THR_ANY_USER_FLAGS = 0xFFFFFFFF,TD_THR_LOWEST_PRIORITY = 0xFFFFFFEC,TD_SIGNO_MASK = 0x0,TD_EVENTSIZE = 0x2,};
enum MACRO_TF {TF_VBEIB = 0x1,TF_BUF_ESDI = 0x2,TF_BUF_ESBX = 0x4,TF_BUF_RET = 0x8,TF_EXIT = 0x10,};
enum MACRO_TR {TR_ALEN = 6,};
enum MACRO_TS {TS_COMM_LEN = 32,};
enum MACRO_TV {TV_NTSC = 0x10,TV_PAL = 0x20,TV_HIVISION = 0x40,TV_YPBPR = 0x80,TV_AVIDEO = 0x100,TV_SVIDEO = 0x200,TV_SCART = 0x400,TV_PALM = 0x1000,TV_PALN = 0x2000,TV_NTSCJ = 0x1000,TV_CHSCART = 0x8000,TV_CHYPBPR525I = 0x10000,};
enum MACRO_TX {TX_COUNTEVT = 0x4,TX_ANNOUNCE = 0x8,TX_CP_CAN_ID = 0x10,};
enum MACRO_UI {UI_CMD = 0x3,};
enum MACRO_UT {UT_LINESIZE = 32,UT_NAMESIZE = 32,UT_HOSTSIZE = 256,};
enum MACRO_VB {VB_DISPTYPE_CRT1 = 0x80000,VB_SINGLE_MODE = 0x20000000,VB_MIRROR_MODE = 0x40000000,VB_DUALVIEW_MODE = 0x80000000,};
enum MACRO_VT {VT_OPENQRY = 0x5600,VT_GETMODE = 0x5601,VT_SETMODE = 0x5602,VT_AUTO = 0x0,VT_PROCESS = 0x1,VT_ACKACQ = 0x2,VT_GETSTATE = 0x5603,VT_SENDSIG = 0x5604,VT_RELDISP = 0x5605,VT_ACTIVATE = 0x5606,VT_WAITACTIVE = 0x5607,VT_DISALLOCATE = 0x5608,VT_RESIZE = 0x5609,VT_RESIZEX = 0x560A,VT_LOCKSWITCH = 0x560B,VT_UNLOCKSWITCH = 0x560C,VT_GETHIFONTMASK = 0x560D,VT_EVENT_SWITCH = 0x1,VT_EVENT_BLANK = 0x2,VT_EVENT_UNBLANK = 0x4,VT_EVENT_RESIZE = 0x8,VT_MAX_EVENT = 0xF,VT_WAITEVENT = 0x560E,VT_SETACTIVATE = 0x560F,};
enum MACRO_XA {XA_PRIMARY = 1,XA_SECONDARY = 2,XA_ARC = 3,XA_ATOM = 4,XA_BITMAP = 5,XA_CARDINAL = 6,XA_COLORMAP = 7,XA_CURSOR = 8,XA_CUT_BUFFER0 = 9,XA_CUT_BUFFER1 = 10,XA_CUT_BUFFER2 = 11,XA_CUT_BUFFER3 = 12,XA_CUT_BUFFER4 = 13,XA_CUT_BUFFER5 = 14,XA_CUT_BUFFER6 = 15,XA_CUT_BUFFER7 = 16,XA_DRAWABLE = 17,XA_FONT = 18,XA_INTEGER = 19,XA_PIXMAP = 20,XA_POINT = 21,XA_RECTANGLE = 22,XA_RESOURCE_MANAGER = 23,XA_RGB_COLOR_MAP = 24,XA_RGB_BEST_MAP = 25,XA_RGB_BLUE_MAP = 26,XA_RGB_DEFAULT_MAP = 27,XA_RGB_GRAY_MAP = 28,XA_RGB_GREEN_MAP = 29,XA_RGB_RED_MAP = 30,XA_STRING = 31,XA_VISUALID = 32,XA_WINDOW = 33,XA_WM_COMMAND = 34,XA_WM_HINTS = 35,XA_WM_CLIENT_MACHINE = 36,XA_WM_ICON_NAME = 37,XA_WM_ICON_SIZE = 38,XA_WM_NAME = 39,XA_WM_NORMAL_HINTS = 40,XA_WM_SIZE_HINTS = 41,XA_WM_ZOOM_HINTS = 42,XA_MIN_SPACE = 43,XA_NORM_SPACE = 44,XA_MAX_SPACE = 45,XA_END_SPACE = 46,XA_SUPERSCRIPT_X = 47,XA_SUPERSCRIPT_Y = 48,XA_SUBSCRIPT_X = 49,XA_SUBSCRIPT_Y = 50,XA_UNDERLINE_POSITION = 51,XA_UNDERLINE_THICKNESS = 52,XA_STRIKEOUT_ASCENT = 53,XA_STRIKEOUT_DESCENT = 54,XA_ITALIC_ANGLE = 55,XA_X_HEIGHT = 56,XA_QUAD_WIDTH = 57,XA_WEIGHT = 58,XA_POINT_SIZE = 59,XA_RESOLUTION = 60,XA_COPYRIGHT = 61,XA_NOTICE = 62,XA_FONT_NAME = 63,XA_FAMILY_NAME = 64,XA_FULL_NAME = 65,XA_CAP_HEIGHT = 66,XA_WM_CLASS = 67,XA_WM_TRANSIENT_FOR = 68,XA_LAST_PREDEFINED = 68,};
enum MACRO_XC {XC_num_glyphs = 154,XC_X_cursor = 0,XC_arrow = 2,XC_based_arrow_down = 4,XC_based_arrow_up = 6,XC_boat = 8,XC_bogosity = 10,XC_bottom_left_corner = 12,XC_bottom_right_corner = 14,XC_bottom_side = 16,XC_bottom_tee = 18,XC_box_spiral = 20,XC_center_ptr = 22,XC_circle = 24,XC_clock = 26,XC_coffee_mug = 28,XC_cross = 30,XC_cross_reverse = 32,XC_crosshair = 34,XC_diamond_cross = 36,XC_dot = 38,XC_dotbox = 40,XC_double_arrow = 42,XC_draft_large = 44,XC_draft_small = 46,XC_draped_box = 48,XC_exchange = 50,XC_fleur = 52,XC_gobbler = 54,XC_gumby = 56,XC_hand1 = 58,XC_hand2 = 60,XC_heart = 62,XC_icon = 64,XC_iron_cross = 66,XC_left_ptr = 68,XC_left_side = 70,XC_left_tee = 72,XC_leftbutton = 74,XC_ll_angle = 76,XC_lr_angle = 78,XC_man = 80,XC_middlebutton = 82,XC_mouse = 84,XC_pencil = 86,XC_pirate = 88,XC_plus = 90,XC_question_arrow = 92,XC_right_ptr = 94,XC_right_side = 96,XC_right_tee = 98,XC_rightbutton = 100,XC_rtl_logo = 102,XC_sailboat = 104,XC_sb_down_arrow = 106,XC_sb_h_double_arrow = 108,XC_sb_left_arrow = 110,XC_sb_right_arrow = 112,XC_sb_up_arrow = 114,XC_sb_v_double_arrow = 116,XC_shuttle = 118,XC_sizing = 120,XC_spider = 122,XC_spraycan = 124,XC_star = 126,XC_target = 128,XC_tcross = 130,XC_top_left_arrow = 132,XC_top_left_corner = 134,XC_top_right_corner = 136,XC_top_side = 138,XC_top_tee = 140,XC_trek = 142,XC_ul_angle = 144,XC_umbrella = 146,XC_ur_angle = 148,XC_watch = 150,XC_xterm = 152,};
enum MACRO_XI {XI_2_Major = 2,XI_2_Minor = 3,};
enum MACRO_XK {XK_VoidSymbol = 0xFFFFFF,XK_BackSpace = 0xFF08,XK_Tab = 0xFF09,XK_Linefeed = 0xFF0A,XK_Clear = 0xFF0B,XK_Return = 0xFF0D,XK_Pause = 0xFF13,XK_Scroll_Lock = 0xFF14,XK_Sys_Req = 0xFF15,XK_Escape = 0xFF1B,XK_Delete = 0xFFFF,XK_Multi_key = 0xFF20,XK_Codeinput = 0xFF37,XK_SingleCandidate = 0xFF3C,XK_MultipleCandidate = 0xFF3D,XK_PreviousCandidate = 0xFF3E,XK_Kanji = 0xFF21,XK_Muhenkan = 0xFF22,XK_Henkan_Mode = 0xFF23,XK_Henkan = 0xFF23,XK_Romaji = 0xFF24,XK_Hiragana = 0xFF25,XK_Katakana = 0xFF26,XK_Hiragana_Katakana = 0xFF27,XK_Zenkaku = 0xFF28,XK_Hankaku = 0xFF29,XK_Zenkaku_Hankaku = 0xFF2A,XK_Touroku = 0xFF2B,XK_Massyo = 0xFF2C,XK_Kana_Lock = 0xFF2D,XK_Kana_Shift = 0xFF2E,XK_Eisu_Shift = 0xFF2F,XK_Eisu_toggle = 0xFF30,XK_Kanji_Bangou = 0xFF37,XK_Zen_Koho = 0xFF3D,XK_Mae_Koho = 0xFF3E,XK_Home = 0xFF50,XK_Left = 0xFF51,XK_Up = 0xFF52,XK_Right = 0xFF53,XK_Down = 0xFF54,XK_Prior = 0xFF55,XK_Page_Up = 0xFF55,XK_Next = 0xFF56,XK_Page_Down = 0xFF56,XK_End = 0xFF57,XK_Begin = 0xFF58,XK_Select = 0xFF60,XK_Print = 0xFF61,XK_Execute = 0xFF62,XK_Insert = 0xFF63,XK_Undo = 0xFF65,XK_Redo = 0xFF66,XK_Menu = 0xFF67,XK_Find = 0xFF68,XK_Cancel = 0xFF69,XK_Help = 0xFF6A,XK_Break = 0xFF6B,XK_Mode_switch = 0xFF7E,XK_script_switch = 0xFF7E,XK_Num_Lock = 0xFF7F,XK_KP_Space = 0xFF80,XK_KP_Tab = 0xFF89,XK_KP_Enter = 0xFF8D,XK_KP_F1 = 0xFF91,XK_KP_F2 = 0xFF92,XK_KP_F3 = 0xFF93,XK_KP_F4 = 0xFF94,XK_KP_Home = 0xFF95,XK_KP_Left = 0xFF96,XK_KP_Up = 0xFF97,XK_KP_Right = 0xFF98,XK_KP_Down = 0xFF99,XK_KP_Prior = 0xFF9A,XK_KP_Page_Up = 0xFF9A,XK_KP_Next = 0xFF9B,XK_KP_Page_Down = 0xFF9B,XK_KP_End = 0xFF9C,XK_KP_Begin = 0xFF9D,XK_KP_Insert = 0xFF9E,XK_KP_Delete = 0xFF9F,XK_KP_Equal = 0xFFBD,XK_KP_Multiply = 0xFFAA,XK_KP_Add = 0xFFAB,XK_KP_Separator = 0xFFAC,XK_KP_Subtract = 0xFFAD,XK_KP_Decimal = 0xFFAE,XK_KP_Divide = 0xFFAF,XK_KP_0 = 0xFFB0,XK_KP_1 = 0xFFB1,XK_KP_2 = 0xFFB2,XK_KP_3 = 0xFFB3,XK_KP_4 = 0xFFB4,XK_KP_5 = 0xFFB5,XK_KP_6 = 0xFFB6,XK_KP_7 = 0xFFB7,XK_KP_8 = 0xFFB8,XK_KP_9 = 0xFFB9,XK_F1 = 0xFFBE,XK_F2 = 0xFFBF,XK_F3 = 0xFFC0,XK_F4 = 0xFFC1,XK_F5 = 0xFFC2,XK_F6 = 0xFFC3,XK_F7 = 0xFFC4,XK_F8 = 0xFFC5,XK_F9 = 0xFFC6,XK_F10 = 0xFFC7,XK_F11 = 0xFFC8,XK_L1 = 0xFFC8,XK_F12 = 0xFFC9,XK_L2 = 0xFFC9,XK_F13 = 0xFFCA,XK_L3 = 0xFFCA,XK_F14 = 0xFFCB,XK_L4 = 0xFFCB,XK_F15 = 0xFFCC,XK_L5 = 0xFFCC,XK_F16 = 0xFFCD,XK_L6 = 0xFFCD,XK_F17 = 0xFFCE,XK_L7 = 0xFFCE,XK_F18 = 0xFFCF,XK_L8 = 0xFFCF,XK_F19 = 0xFFD0,XK_L9 = 0xFFD0,XK_F20 = 0xFFD1,XK_L10 = 0xFFD1,XK_F21 = 0xFFD2,XK_R1 = 0xFFD2,XK_F22 = 0xFFD3,XK_R2 = 0xFFD3,XK_F23 = 0xFFD4,XK_R3 = 0xFFD4,XK_F24 = 0xFFD5,XK_R4 = 0xFFD5,XK_F25 = 0xFFD6,XK_R5 = 0xFFD6,XK_F26 = 0xFFD7,XK_R6 = 0xFFD7,XK_F27 = 0xFFD8,XK_R7 = 0xFFD8,XK_F28 = 0xFFD9,XK_R8 = 0xFFD9,XK_F29 = 0xFFDA,XK_R9 = 0xFFDA,XK_F30 = 0xFFDB,XK_R10 = 0xFFDB,XK_F31 = 0xFFDC,XK_R11 = 0xFFDC,XK_F32 = 0xFFDD,XK_R12 = 0xFFDD,XK_F33 = 0xFFDE,XK_R13 = 0xFFDE,XK_F34 = 0xFFDF,XK_R14 = 0xFFDF,XK_F35 = 0xFFE0,XK_R15 = 0xFFE0,XK_Shift_L = 0xFFE1,XK_Shift_R = 0xFFE2,XK_Control_L = 0xFFE3,XK_Control_R = 0xFFE4,XK_Caps_Lock = 0xFFE5,XK_Shift_Lock = 0xFFE6,XK_Meta_L = 0xFFE7,XK_Meta_R = 0xFFE8,XK_Alt_L = 0xFFE9,XK_Alt_R = 0xFFEA,XK_Super_L = 0xFFEB,XK_Super_R = 0xFFEC,XK_Hyper_L = 0xFFED,XK_Hyper_R = 0xFFEE,XK_ISO_Lock = 0xFE01,XK_ISO_Level2_Latch = 0xFE02,XK_ISO_Level3_Shift = 0xFE03,XK_ISO_Level3_Latch = 0xFE04,XK_ISO_Level3_Lock = 0xFE05,XK_ISO_Level5_Shift = 0xFE11,XK_ISO_Level5_Latch = 0xFE12,XK_ISO_Level5_Lock = 0xFE13,XK_ISO_Group_Shift = 0xFF7E,XK_ISO_Group_Latch = 0xFE06,XK_ISO_Group_Lock = 0xFE07,XK_ISO_Next_Group = 0xFE08,XK_ISO_Next_Group_Lock = 0xFE09,XK_ISO_Prev_Group = 0xFE0A,XK_ISO_Prev_Group_Lock = 0xFE0B,XK_ISO_First_Group = 0xFE0C,XK_ISO_First_Group_Lock = 0xFE0D,XK_ISO_Last_Group = 0xFE0E,XK_ISO_Last_Group_Lock = 0xFE0F,XK_ISO_Left_Tab = 0xFE20,XK_ISO_Move_Line_Up = 0xFE21,XK_ISO_Move_Line_Down = 0xFE22,XK_ISO_Partial_Line_Up = 0xFE23,XK_ISO_Partial_Line_Down = 0xFE24,XK_ISO_Partial_Space_Left = 0xFE25,XK_ISO_Partial_Space_Right = 0xFE26,XK_ISO_Set_Margin_Left = 0xFE27,XK_ISO_Set_Margin_Right = 0xFE28,XK_ISO_Release_Margin_Left = 0xFE29,XK_ISO_Release_Margin_Right = 0xFE2A,XK_ISO_Release_Both_Margins = 0xFE2B,XK_ISO_Fast_Cursor_Left = 0xFE2C,XK_ISO_Fast_Cursor_Right = 0xFE2D,XK_ISO_Fast_Cursor_Up = 0xFE2E,XK_ISO_Fast_Cursor_Down = 0xFE2F,XK_ISO_Continuous_Underline = 0xFE30,XK_ISO_Discontinuous_Underline = 0xFE31,XK_ISO_Emphasize = 0xFE32,XK_ISO_Center_Object = 0xFE33,XK_ISO_Enter = 0xFE34,XK_dead_grave = 0xFE50,XK_dead_acute = 0xFE51,XK_dead_circumflex = 0xFE52,XK_dead_tilde = 0xFE53,XK_dead_perispomeni = 0xFE53,XK_dead_macron = 0xFE54,XK_dead_breve = 0xFE55,XK_dead_abovedot = 0xFE56,XK_dead_diaeresis = 0xFE57,XK_dead_abovering = 0xFE58,XK_dead_doubleacute = 0xFE59,XK_dead_caron = 0xFE5A,XK_dead_cedilla = 0xFE5B,XK_dead_ogonek = 0xFE5C,XK_dead_iota = 0xFE5D,XK_dead_voiced_sound = 0xFE5E,XK_dead_semivoiced_sound = 0xFE5F,XK_dead_belowdot = 0xFE60,XK_dead_hook = 0xFE61,XK_dead_horn = 0xFE62,XK_dead_stroke = 0xFE63,XK_dead_abovecomma = 0xFE64,XK_dead_psili = 0xFE64,XK_dead_abovereversedcomma = 0xFE65,XK_dead_dasia = 0xFE65,XK_dead_doublegrave = 0xFE66,XK_dead_belowring = 0xFE67,XK_dead_belowmacron = 0xFE68,XK_dead_belowcircumflex = 0xFE69,XK_dead_belowtilde = 0xFE6A,XK_dead_belowbreve = 0xFE6B,XK_dead_belowdiaeresis = 0xFE6C,XK_dead_invertedbreve = 0xFE6D,XK_dead_belowcomma = 0xFE6E,XK_dead_currency = 0xFE6F,XK_dead_a = 0xFE80,XK_dead_A = 0xFE81,XK_dead_e = 0xFE82,XK_dead_E = 0xFE83,XK_dead_i = 0xFE84,XK_dead_I = 0xFE85,XK_dead_o = 0xFE86,XK_dead_O = 0xFE87,XK_dead_u = 0xFE88,XK_dead_U = 0xFE89,XK_dead_small_schwa = 0xFE8A,XK_dead_capital_schwa = 0xFE8B,XK_dead_greek = 0xFE8C,XK_First_Virtual_Screen = 0xFED0,XK_Prev_Virtual_Screen = 0xFED1,XK_Next_Virtual_Screen = 0xFED2,XK_Last_Virtual_Screen = 0xFED4,XK_Terminate_Server = 0xFED5,XK_AccessX_Enable = 0xFE70,XK_AccessX_Feedback_Enable = 0xFE71,XK_RepeatKeys_Enable = 0xFE72,XK_SlowKeys_Enable = 0xFE73,XK_BounceKeys_Enable = 0xFE74,XK_StickyKeys_Enable = 0xFE75,XK_MouseKeys_Enable = 0xFE76,XK_MouseKeys_Accel_Enable = 0xFE77,XK_Overlay1_Enable = 0xFE78,XK_Overlay2_Enable = 0xFE79,XK_AudibleBell_Enable = 0xFE7A,XK_Pointer_Left = 0xFEE0,XK_Pointer_Right = 0xFEE1,XK_Pointer_Up = 0xFEE2,XK_Pointer_Down = 0xFEE3,XK_Pointer_UpLeft = 0xFEE4,XK_Pointer_UpRight = 0xFEE5,XK_Pointer_DownLeft = 0xFEE6,XK_Pointer_DownRight = 0xFEE7,XK_Pointer_Button_Dflt = 0xFEE8,XK_Pointer_Button1 = 0xFEE9,XK_Pointer_Button2 = 0xFEEA,XK_Pointer_Button3 = 0xFEEB,XK_Pointer_Button4 = 0xFEEC,XK_Pointer_Button5 = 0xFEED,XK_Pointer_DblClick_Dflt = 0xFEEE,XK_Pointer_DblClick1 = 0xFEEF,XK_Pointer_DblClick2 = 0xFEF0,XK_Pointer_DblClick3 = 0xFEF1,XK_Pointer_DblClick4 = 0xFEF2,XK_Pointer_DblClick5 = 0xFEF3,XK_Pointer_Drag_Dflt = 0xFEF4,XK_Pointer_Drag1 = 0xFEF5,XK_Pointer_Drag2 = 0xFEF6,XK_Pointer_Drag3 = 0xFEF7,XK_Pointer_Drag4 = 0xFEF8,XK_Pointer_Drag5 = 0xFEFD,XK_Pointer_EnableKeys = 0xFEF9,XK_Pointer_Accelerate = 0xFEFA,XK_Pointer_DfltBtnNext = 0xFEFB,XK_Pointer_DfltBtnPrev = 0xFEFC,XK_ch = 0xFEA0,XK_Ch = 0xFEA1,XK_CH = 0xFEA2,XK_c_h = 0xFEA3,XK_C_h = 0xFEA4,XK_C_H = 0xFEA5,XK_space = 0x20,XK_exclam = 0x21,XK_quotedbl = 0x22,XK_numbersign = 0x23,XK_dollar = 0x24,XK_percent = 0x25,XK_ampersand = 0x26,XK_apostrophe = 0x27,XK_quoteright = 0x27,XK_parenleft = 0x28,XK_parenright = 0x29,XK_asterisk = 0x2A,XK_plus = 0x2B,XK_comma = 0x2C,XK_minus = 0x2D,XK_period = 0x2E,XK_slash = 0x2F,XK_0 = 0x30,XK_1 = 0x31,XK_2 = 0x32,XK_3 = 0x33,XK_4 = 0x34,XK_5 = 0x35,XK_6 = 0x36,XK_7 = 0x37,XK_8 = 0x38,XK_9 = 0x39,XK_colon = 0x3A,XK_semicolon = 0x3B,XK_less = 0x3C,XK_equal = 0x3D,XK_greater = 0x3E,XK_question = 0x3F,XK_at = 0x40,XK_A = 0x41,XK_B = 0x42,XK_C = 0x43,XK_D = 0x44,XK_E = 0x45,XK_F = 0x46,XK_G = 0x47,XK_H = 0x48,XK_I = 0x49,XK_J = 0x4A,XK_K = 0x4B,XK_L = 0x4C,XK_M = 0x4D,XK_N = 0x4E,XK_O = 0x4F,XK_P = 0x50,XK_Q = 0x51,XK_R = 0x52,XK_S = 0x53,XK_T = 0x54,XK_U = 0x55,XK_V = 0x56,XK_W = 0x57,XK_X = 0x58,XK_Y = 0x59,XK_Z = 0x5A,XK_bracketleft = 0x5B,XK_backslash = 0x5C,XK_bracketright = 0x5D,XK_asciicircum = 0x5E,XK_underscore = 0x5F,XK_grave = 0x60,XK_quoteleft = 0x60,XK_a = 0x61,XK_b = 0x62,XK_c = 0x63,XK_d = 0x64,XK_e = 0x65,XK_f = 0x66,XK_g = 0x67,XK_h = 0x68,XK_i = 0x69,XK_j = 0x6A,XK_k = 0x6B,XK_l = 0x6C,XK_m = 0x6D,XK_n = 0x6E,XK_o = 0x6F,XK_p = 0x70,XK_q = 0x71,XK_r = 0x72,XK_s = 0x73,XK_t = 0x74,XK_u = 0x75,XK_v = 0x76,XK_w = 0x77,XK_x = 0x78,XK_y = 0x79,XK_z = 0x7A,XK_braceleft = 0x7B,XK_bar = 0x7C,XK_braceright = 0x7D,XK_asciitilde = 0x7E,XK_nobreakspace = 0xA0,XK_exclamdown = 0xA1,XK_cent = 0xA2,XK_sterling = 0xA3,XK_currency = 0xA4,XK_yen = 0xA5,XK_brokenbar = 0xA6,XK_section = 0xA7,XK_diaeresis = 0xA8,XK_copyright = 0xA9,XK_ordfeminine = 0xAA,XK_guillemotleft = 0xAB,XK_notsign = 0xAC,XK_hyphen = 0xAD,XK_registered = 0xAE,XK_macron = 0xAF,XK_degree = 0xB0,XK_plusminus = 0xB1,XK_twosuperior = 0xB2,XK_threesuperior = 0xB3,XK_acute = 0xB4,XK_mu = 0xB5,XK_paragraph = 0xB6,XK_periodcentered = 0xB7,XK_cedilla = 0xB8,XK_onesuperior = 0xB9,XK_masculine = 0xBA,XK_guillemotright = 0xBB,XK_onequarter = 0xBC,XK_onehalf = 0xBD,XK_threequarters = 0xBE,XK_questiondown = 0xBF,XK_Agrave = 0xC0,XK_Aacute = 0xC1,XK_Acircumflex = 0xC2,XK_Atilde = 0xC3,XK_Adiaeresis = 0xC4,XK_Aring = 0xC5,XK_AE = 0xC6,XK_Ccedilla = 0xC7,XK_Egrave = 0xC8,XK_Eacute = 0xC9,XK_Ecircumflex = 0xCA,XK_Ediaeresis = 0xCB,XK_Igrave = 0xCC,XK_Iacute = 0xCD,XK_Icircumflex = 0xCE,XK_Idiaeresis = 0xCF,XK_ETH = 0xD0,XK_Eth = 0xD0,XK_Ntilde = 0xD1,XK_Ograve = 0xD2,XK_Oacute = 0xD3,XK_Ocircumflex = 0xD4,XK_Otilde = 0xD5,XK_Odiaeresis = 0xD6,XK_multiply = 0xD7,XK_Oslash = 0xD8,XK_Ooblique = 0xD8,XK_Ugrave = 0xD9,XK_Uacute = 0xDA,XK_Ucircumflex = 0xDB,XK_Udiaeresis = 0xDC,XK_Yacute = 0xDD,XK_THORN = 0xDE,XK_Thorn = 0xDE,XK_ssharp = 0xDF,XK_agrave = 0xE0,XK_aacute = 0xE1,XK_acircumflex = 0xE2,XK_atilde = 0xE3,XK_adiaeresis = 0xE4,XK_aring = 0xE5,XK_ae = 0xE6,XK_ccedilla = 0xE7,XK_egrave = 0xE8,XK_eacute = 0xE9,XK_ecircumflex = 0xEA,XK_ediaeresis = 0xEB,XK_igrave = 0xEC,XK_iacute = 0xED,XK_icircumflex = 0xEE,XK_idiaeresis = 0xEF,XK_eth = 0xF0,XK_ntilde = 0xF1,XK_ograve = 0xF2,XK_oacute = 0xF3,XK_ocircumflex = 0xF4,XK_otilde = 0xF5,XK_odiaeresis = 0xF6,XK_division = 0xF7,XK_oslash = 0xF8,XK_ooblique = 0xF8,XK_ugrave = 0xF9,XK_uacute = 0xFA,XK_ucircumflex = 0xFB,XK_udiaeresis = 0xFC,XK_yacute = 0xFD,XK_thorn = 0xFE,XK_ydiaeresis = 0xFF,XK_Aogonek = 0x1A1,XK_breve = 0x1A2,XK_Lstroke = 0x1A3,XK_Lcaron = 0x1A5,XK_Sacute = 0x1A6,XK_Scaron = 0x1A9,XK_Scedilla = 0x1AA,XK_Tcaron = 0x1AB,XK_Zacute = 0x1AC,XK_Zcaron = 0x1AE,XK_Zabovedot = 0x1AF,XK_aogonek = 0x1B1,XK_ogonek = 0x1B2,XK_lstroke = 0x1B3,XK_lcaron = 0x1B5,XK_sacute = 0x1B6,XK_caron = 0x1B7,XK_scaron = 0x1B9,XK_scedilla = 0x1BA,XK_tcaron = 0x1BB,XK_zacute = 0x1BC,XK_doubleacute = 0x1BD,XK_zcaron = 0x1BE,XK_zabovedot = 0x1BF,XK_Racute = 0x1C0,XK_Abreve = 0x1C3,XK_Lacute = 0x1C5,XK_Cacute = 0x1C6,XK_Ccaron = 0x1C8,XK_Eogonek = 0x1CA,XK_Ecaron = 0x1CC,XK_Dcaron = 0x1CF,XK_Dstroke = 0x1D0,XK_Nacute = 0x1D1,XK_Ncaron = 0x1D2,XK_Odoubleacute = 0x1D5,XK_Rcaron = 0x1D8,XK_Uring = 0x1D9,XK_Udoubleacute = 0x1DB,XK_Tcedilla = 0x1DE,XK_racute = 0x1E0,XK_abreve = 0x1E3,XK_lacute = 0x1E5,XK_cacute = 0x1E6,XK_ccaron = 0x1E8,XK_eogonek = 0x1EA,XK_ecaron = 0x1EC,XK_dcaron = 0x1EF,XK_dstroke = 0x1F0,XK_nacute = 0x1F1,XK_ncaron = 0x1F2,XK_odoubleacute = 0x1F5,XK_rcaron = 0x1F8,XK_uring = 0x1F9,XK_udoubleacute = 0x1FB,XK_tcedilla = 0x1FE,XK_abovedot = 0x1FF,XK_Hstroke = 0x2A1,XK_Hcircumflex = 0x2A6,XK_Iabovedot = 0x2A9,XK_Gbreve = 0x2AB,XK_Jcircumflex = 0x2AC,XK_hstroke = 0x2B1,XK_hcircumflex = 0x2B6,XK_idotless = 0x2B9,XK_gbreve = 0x2BB,XK_jcircumflex = 0x2BC,XK_Cabovedot = 0x2C5,XK_Ccircumflex = 0x2C6,XK_Gabovedot = 0x2D5,XK_Gcircumflex = 0x2D8,XK_Ubreve = 0x2DD,XK_Scircumflex = 0x2DE,XK_cabovedot = 0x2E5,XK_ccircumflex = 0x2E6,XK_gabovedot = 0x2F5,XK_gcircumflex = 0x2F8,XK_ubreve = 0x2FD,XK_scircumflex = 0x2FE,XK_kra = 0x3A2,XK_kappa = 0x3A2,XK_Rcedilla = 0x3A3,XK_Itilde = 0x3A5,XK_Lcedilla = 0x3A6,XK_Emacron = 0x3AA,XK_Gcedilla = 0x3AB,XK_Tslash = 0x3AC,XK_rcedilla = 0x3B3,XK_itilde = 0x3B5,XK_lcedilla = 0x3B6,XK_emacron = 0x3BA,XK_gcedilla = 0x3BB,XK_tslash = 0x3BC,XK_ENG = 0x3BD,XK_eng = 0x3BF,XK_Amacron = 0x3C0,XK_Iogonek = 0x3C7,XK_Eabovedot = 0x3CC,XK_Imacron = 0x3CF,XK_Ncedilla = 0x3D1,XK_Omacron = 0x3D2,XK_Kcedilla = 0x3D3,XK_Uogonek = 0x3D9,XK_Utilde = 0x3DD,XK_Umacron = 0x3DE,XK_amacron = 0x3E0,XK_iogonek = 0x3E7,XK_eabovedot = 0x3EC,XK_imacron = 0x3EF,XK_ncedilla = 0x3F1,XK_omacron = 0x3F2,XK_kcedilla = 0x3F3,XK_uogonek = 0x3F9,XK_utilde = 0x3FD,XK_umacron = 0x3FE,XK_Wcircumflex = 0x1000174,XK_wcircumflex = 0x1000175,XK_Ycircumflex = 0x1000176,XK_ycircumflex = 0x1000177,XK_Babovedot = 0x1001E02,XK_babovedot = 0x1001E03,XK_Dabovedot = 0x1001E0A,XK_dabovedot = 0x1001E0B,XK_Fabovedot = 0x1001E1E,XK_fabovedot = 0x1001E1F,XK_Mabovedot = 0x1001E40,XK_mabovedot = 0x1001E41,XK_Pabovedot = 0x1001E56,XK_pabovedot = 0x1001E57,XK_Sabovedot = 0x1001E60,XK_sabovedot = 0x1001E61,XK_Tabovedot = 0x1001E6A,XK_tabovedot = 0x1001E6B,XK_Wgrave = 0x1001E80,XK_wgrave = 0x1001E81,XK_Wacute = 0x1001E82,XK_wacute = 0x1001E83,XK_Wdiaeresis = 0x1001E84,XK_wdiaeresis = 0x1001E85,XK_Ygrave = 0x1001EF2,XK_ygrave = 0x1001EF3,XK_OE = 0x13BC,XK_oe = 0x13BD,XK_Ydiaeresis = 0x13BE,XK_overline = 0x47E,XK_kana_fullstop = 0x4A1,XK_kana_openingbracket = 0x4A2,XK_kana_closingbracket = 0x4A3,XK_kana_comma = 0x4A4,XK_kana_conjunctive = 0x4A5,XK_kana_middledot = 0x4A5,XK_kana_WO = 0x4A6,XK_kana_a = 0x4A7,XK_kana_i = 0x4A8,XK_kana_u = 0x4A9,XK_kana_e = 0x4AA,XK_kana_o = 0x4AB,XK_kana_ya = 0x4AC,XK_kana_yu = 0x4AD,XK_kana_yo = 0x4AE,XK_kana_tsu = 0x4AF,XK_kana_tu = 0x4AF,XK_prolongedsound = 0x4B0,XK_kana_A = 0x4B1,XK_kana_I = 0x4B2,XK_kana_U = 0x4B3,XK_kana_E = 0x4B4,XK_kana_O = 0x4B5,XK_kana_KA = 0x4B6,XK_kana_KI = 0x4B7,XK_kana_KU = 0x4B8,XK_kana_KE = 0x4B9,XK_kana_KO = 0x4BA,XK_kana_SA = 0x4BB,XK_kana_SHI = 0x4BC,XK_kana_SU = 0x4BD,XK_kana_SE = 0x4BE,XK_kana_SO = 0x4BF,XK_kana_TA = 0x4C0,XK_kana_CHI = 0x4C1,XK_kana_TI = 0x4C1,XK_kana_TSU = 0x4C2,XK_kana_TU = 0x4C2,XK_kana_TE = 0x4C3,XK_kana_TO = 0x4C4,XK_kana_NA = 0x4C5,XK_kana_NI = 0x4C6,XK_kana_NU = 0x4C7,XK_kana_NE = 0x4C8,XK_kana_NO = 0x4C9,XK_kana_HA = 0x4CA,XK_kana_HI = 0x4CB,XK_kana_FU = 0x4CC,XK_kana_HU = 0x4CC,XK_kana_HE = 0x4CD,XK_kana_HO = 0x4CE,XK_kana_MA = 0x4CF,XK_kana_MI = 0x4D0,XK_kana_MU = 0x4D1,XK_kana_ME = 0x4D2,XK_kana_MO = 0x4D3,XK_kana_YA = 0x4D4,XK_kana_YU = 0x4D5,XK_kana_YO = 0x4D6,XK_kana_RA = 0x4D7,XK_kana_RI = 0x4D8,XK_kana_RU = 0x4D9,XK_kana_RE = 0x4DA,XK_kana_RO = 0x4DB,XK_kana_WA = 0x4DC,XK_kana_N = 0x4DD,XK_voicedsound = 0x4DE,XK_semivoicedsound = 0x4DF,XK_kana_switch = 0xFF7E,XK_Farsi_0 = 0x10006F0,XK_Farsi_1 = 0x10006F1,XK_Farsi_2 = 0x10006F2,XK_Farsi_3 = 0x10006F3,XK_Farsi_4 = 0x10006F4,XK_Farsi_5 = 0x10006F5,XK_Farsi_6 = 0x10006F6,XK_Farsi_7 = 0x10006F7,XK_Farsi_8 = 0x10006F8,XK_Farsi_9 = 0x10006F9,XK_Arabic_percent = 0x100066A,XK_Arabic_superscript_alef = 0x1000670,XK_Arabic_tteh = 0x1000679,XK_Arabic_peh = 0x100067E,XK_Arabic_tcheh = 0x1000686,XK_Arabic_ddal = 0x1000688,XK_Arabic_rreh = 0x1000691,XK_Arabic_comma = 0x5AC,XK_Arabic_fullstop = 0x10006D4,XK_Arabic_0 = 0x1000660,XK_Arabic_1 = 0x1000661,XK_Arabic_2 = 0x1000662,XK_Arabic_3 = 0x1000663,XK_Arabic_4 = 0x1000664,XK_Arabic_5 = 0x1000665,XK_Arabic_6 = 0x1000666,XK_Arabic_7 = 0x1000667,XK_Arabic_8 = 0x1000668,XK_Arabic_9 = 0x1000669,XK_Arabic_semicolon = 0x5BB,XK_Arabic_question_mark = 0x5BF,XK_Arabic_hamza = 0x5C1,XK_Arabic_maddaonalef = 0x5C2,XK_Arabic_hamzaonalef = 0x5C3,XK_Arabic_hamzaonwaw = 0x5C4,XK_Arabic_hamzaunderalef = 0x5C5,XK_Arabic_hamzaonyeh = 0x5C6,XK_Arabic_alef = 0x5C7,XK_Arabic_beh = 0x5C8,XK_Arabic_tehmarbuta = 0x5C9,XK_Arabic_teh = 0x5CA,XK_Arabic_theh = 0x5CB,XK_Arabic_jeem = 0x5CC,XK_Arabic_hah = 0x5CD,XK_Arabic_khah = 0x5CE,XK_Arabic_dal = 0x5CF,XK_Arabic_thal = 0x5D0,XK_Arabic_ra = 0x5D1,XK_Arabic_zain = 0x5D2,XK_Arabic_seen = 0x5D3,XK_Arabic_sheen = 0x5D4,XK_Arabic_sad = 0x5D5,XK_Arabic_dad = 0x5D6,XK_Arabic_tah = 0x5D7,XK_Arabic_zah = 0x5D8,XK_Arabic_ain = 0x5D9,XK_Arabic_ghain = 0x5DA,XK_Arabic_tatweel = 0x5E0,XK_Arabic_feh = 0x5E1,XK_Arabic_qaf = 0x5E2,XK_Arabic_kaf = 0x5E3,XK_Arabic_lam = 0x5E4,XK_Arabic_meem = 0x5E5,XK_Arabic_noon = 0x5E6,XK_Arabic_ha = 0x5E7,XK_Arabic_heh = 0x5E7,XK_Arabic_waw = 0x5E8,XK_Arabic_alefmaksura = 0x5E9,XK_Arabic_yeh = 0x5EA,XK_Arabic_fathatan = 0x5EB,XK_Arabic_dammatan = 0x5EC,XK_Arabic_kasratan = 0x5ED,XK_Arabic_fatha = 0x5EE,XK_Arabic_damma = 0x5EF,XK_Arabic_kasra = 0x5F0,XK_Arabic_shadda = 0x5F1,XK_Arabic_sukun = 0x5F2,XK_Arabic_madda_above = 0x1000653,XK_Arabic_hamza_above = 0x1000654,XK_Arabic_hamza_below = 0x1000655,XK_Arabic_jeh = 0x1000698,XK_Arabic_veh = 0x10006A4,XK_Arabic_keheh = 0x10006A9,XK_Arabic_gaf = 0x10006AF,XK_Arabic_noon_ghunna = 0x10006BA,XK_Arabic_heh_doachashmee = 0x10006BE,XK_Farsi_yeh = 0x10006CC,XK_Arabic_farsi_yeh = 0x10006CC,XK_Arabic_yeh_baree = 0x10006D2,XK_Arabic_heh_goal = 0x10006C1,XK_Arabic_switch = 0xFF7E,XK_Cyrillic_GHE_bar = 0x1000492,XK_Cyrillic_ghe_bar = 0x1000493,XK_Cyrillic_ZHE_descender = 0x1000496,XK_Cyrillic_zhe_descender = 0x1000497,XK_Cyrillic_KA_descender = 0x100049A,XK_Cyrillic_ka_descender = 0x100049B,XK_Cyrillic_KA_vertstroke = 0x100049C,XK_Cyrillic_ka_vertstroke = 0x100049D,XK_Cyrillic_EN_descender = 0x10004A2,XK_Cyrillic_en_descender = 0x10004A3,XK_Cyrillic_U_straight = 0x10004AE,XK_Cyrillic_u_straight = 0x10004AF,XK_Cyrillic_U_straight_bar = 0x10004B0,XK_Cyrillic_u_straight_bar = 0x10004B1,XK_Cyrillic_HA_descender = 0x10004B2,XK_Cyrillic_ha_descender = 0x10004B3,XK_Cyrillic_CHE_descender = 0x10004B6,XK_Cyrillic_che_descender = 0x10004B7,XK_Cyrillic_CHE_vertstroke = 0x10004B8,XK_Cyrillic_che_vertstroke = 0x10004B9,XK_Cyrillic_SHHA = 0x10004BA,XK_Cyrillic_shha = 0x10004BB,XK_Cyrillic_SCHWA = 0x10004D8,XK_Cyrillic_schwa = 0x10004D9,XK_Cyrillic_I_macron = 0x10004E2,XK_Cyrillic_i_macron = 0x10004E3,XK_Cyrillic_O_bar = 0x10004E8,XK_Cyrillic_o_bar = 0x10004E9,XK_Cyrillic_U_macron = 0x10004EE,XK_Cyrillic_u_macron = 0x10004EF,XK_Serbian_dje = 0x6A1,XK_Macedonia_gje = 0x6A2,XK_Cyrillic_io = 0x6A3,XK_Ukrainian_ie = 0x6A4,XK_Ukranian_je = 0x6A4,XK_Macedonia_dse = 0x6A5,XK_Ukrainian_i = 0x6A6,XK_Ukranian_i = 0x6A6,XK_Ukrainian_yi = 0x6A7,XK_Ukranian_yi = 0x6A7,XK_Cyrillic_je = 0x6A8,XK_Serbian_je = 0x6A8,XK_Cyrillic_lje = 0x6A9,XK_Serbian_lje = 0x6A9,XK_Cyrillic_nje = 0x6AA,XK_Serbian_nje = 0x6AA,XK_Serbian_tshe = 0x6AB,XK_Macedonia_kje = 0x6AC,XK_Ukrainian_ghe_with_upturn = 0x6AD,XK_Byelorussian_shortu = 0x6AE,XK_Cyrillic_dzhe = 0x6AF,XK_Serbian_dze = 0x6AF,XK_numerosign = 0x6B0,XK_Serbian_DJE = 0x6B1,XK_Macedonia_GJE = 0x6B2,XK_Cyrillic_IO = 0x6B3,XK_Ukrainian_IE = 0x6B4,XK_Ukranian_JE = 0x6B4,XK_Macedonia_DSE = 0x6B5,XK_Ukrainian_I = 0x6B6,XK_Ukranian_I = 0x6B6,XK_Ukrainian_YI = 0x6B7,XK_Ukranian_YI = 0x6B7,XK_Cyrillic_JE = 0x6B8,XK_Serbian_JE = 0x6B8,XK_Cyrillic_LJE = 0x6B9,XK_Serbian_LJE = 0x6B9,XK_Cyrillic_NJE = 0x6BA,XK_Serbian_NJE = 0x6BA,XK_Serbian_TSHE = 0x6BB,XK_Macedonia_KJE = 0x6BC,XK_Ukrainian_GHE_WITH_UPTURN = 0x6BD,XK_Byelorussian_SHORTU = 0x6BE,XK_Cyrillic_DZHE = 0x6BF,XK_Serbian_DZE = 0x6BF,XK_Cyrillic_yu = 0x6C0,XK_Cyrillic_a = 0x6C1,XK_Cyrillic_be = 0x6C2,XK_Cyrillic_tse = 0x6C3,XK_Cyrillic_de = 0x6C4,XK_Cyrillic_ie = 0x6C5,XK_Cyrillic_ef = 0x6C6,XK_Cyrillic_ghe = 0x6C7,XK_Cyrillic_ha = 0x6C8,XK_Cyrillic_i = 0x6C9,XK_Cyrillic_shorti = 0x6CA,XK_Cyrillic_ka = 0x6CB,XK_Cyrillic_el = 0x6CC,XK_Cyrillic_em = 0x6CD,XK_Cyrillic_en = 0x6CE,XK_Cyrillic_o = 0x6CF,XK_Cyrillic_pe = 0x6D0,XK_Cyrillic_ya = 0x6D1,XK_Cyrillic_er = 0x6D2,XK_Cyrillic_es = 0x6D3,XK_Cyrillic_te = 0x6D4,XK_Cyrillic_u = 0x6D5,XK_Cyrillic_zhe = 0x6D6,XK_Cyrillic_ve = 0x6D7,XK_Cyrillic_softsign = 0x6D8,XK_Cyrillic_yeru = 0x6D9,XK_Cyrillic_ze = 0x6DA,XK_Cyrillic_sha = 0x6DB,XK_Cyrillic_e = 0x6DC,XK_Cyrillic_shcha = 0x6DD,XK_Cyrillic_che = 0x6DE,XK_Cyrillic_hardsign = 0x6DF,XK_Cyrillic_YU = 0x6E0,XK_Cyrillic_A = 0x6E1,XK_Cyrillic_BE = 0x6E2,XK_Cyrillic_TSE = 0x6E3,XK_Cyrillic_DE = 0x6E4,XK_Cyrillic_IE = 0x6E5,XK_Cyrillic_EF = 0x6E6,XK_Cyrillic_GHE = 0x6E7,XK_Cyrillic_HA = 0x6E8,XK_Cyrillic_I = 0x6E9,XK_Cyrillic_SHORTI = 0x6EA,XK_Cyrillic_KA = 0x6EB,XK_Cyrillic_EL = 0x6EC,XK_Cyrillic_EM = 0x6ED,XK_Cyrillic_EN = 0x6EE,XK_Cyrillic_O = 0x6EF,XK_Cyrillic_PE = 0x6F0,XK_Cyrillic_YA = 0x6F1,XK_Cyrillic_ER = 0x6F2,XK_Cyrillic_ES = 0x6F3,XK_Cyrillic_TE = 0x6F4,XK_Cyrillic_U = 0x6F5,XK_Cyrillic_ZHE = 0x6F6,XK_Cyrillic_VE = 0x6F7,XK_Cyrillic_SOFTSIGN = 0x6F8,XK_Cyrillic_YERU = 0x6F9,XK_Cyrillic_ZE = 0x6FA,XK_Cyrillic_SHA = 0x6FB,XK_Cyrillic_E = 0x6FC,XK_Cyrillic_SHCHA = 0x6FD,XK_Cyrillic_CHE = 0x6FE,XK_Cyrillic_HARDSIGN = 0x6FF,XK_Greek_ALPHAaccent = 0x7A1,XK_Greek_EPSILONaccent = 0x7A2,XK_Greek_ETAaccent = 0x7A3,XK_Greek_IOTAaccent = 0x7A4,XK_Greek_IOTAdieresis = 0x7A5,XK_Greek_IOTAdiaeresis = 0x7A5,XK_Greek_OMICRONaccent = 0x7A7,XK_Greek_UPSILONaccent = 0x7A8,XK_Greek_UPSILONdieresis = 0x7A9,XK_Greek_OMEGAaccent = 0x7AB,XK_Greek_accentdieresis = 0x7AE,XK_Greek_horizbar = 0x7AF,XK_Greek_alphaaccent = 0x7B1,XK_Greek_epsilonaccent = 0x7B2,XK_Greek_etaaccent = 0x7B3,XK_Greek_iotaaccent = 0x7B4,XK_Greek_iotadieresis = 0x7B5,XK_Greek_iotaaccentdieresis = 0x7B6,XK_Greek_omicronaccent = 0x7B7,XK_Greek_upsilonaccent = 0x7B8,XK_Greek_upsilondieresis = 0x7B9,XK_Greek_upsilonaccentdieresis = 0x7BA,XK_Greek_omegaaccent = 0x7BB,XK_Greek_ALPHA = 0x7C1,XK_Greek_BETA = 0x7C2,XK_Greek_GAMMA = 0x7C3,XK_Greek_DELTA = 0x7C4,XK_Greek_EPSILON = 0x7C5,XK_Greek_ZETA = 0x7C6,XK_Greek_ETA = 0x7C7,XK_Greek_THETA = 0x7C8,XK_Greek_IOTA = 0x7C9,XK_Greek_KAPPA = 0x7CA,XK_Greek_LAMDA = 0x7CB,XK_Greek_LAMBDA = 0x7CB,XK_Greek_MU = 0x7CC,XK_Greek_NU = 0x7CD,XK_Greek_XI = 0x7CE,XK_Greek_OMICRON = 0x7CF,XK_Greek_PI = 0x7D0,XK_Greek_RHO = 0x7D1,XK_Greek_SIGMA = 0x7D2,XK_Greek_TAU = 0x7D4,XK_Greek_UPSILON = 0x7D5,XK_Greek_PHI = 0x7D6,XK_Greek_CHI = 0x7D7,XK_Greek_PSI = 0x7D8,XK_Greek_OMEGA = 0x7D9,XK_Greek_alpha = 0x7E1,XK_Greek_beta = 0x7E2,XK_Greek_gamma = 0x7E3,XK_Greek_delta = 0x7E4,XK_Greek_epsilon = 0x7E5,XK_Greek_zeta = 0x7E6,XK_Greek_eta = 0x7E7,XK_Greek_theta = 0x7E8,XK_Greek_iota = 0x7E9,XK_Greek_kappa = 0x7EA,XK_Greek_lamda = 0x7EB,XK_Greek_lambda = 0x7EB,XK_Greek_mu = 0x7EC,XK_Greek_nu = 0x7ED,XK_Greek_xi = 0x7EE,XK_Greek_omicron = 0x7EF,XK_Greek_pi = 0x7F0,XK_Greek_rho = 0x7F1,XK_Greek_sigma = 0x7F2,XK_Greek_finalsmallsigma = 0x7F3,XK_Greek_tau = 0x7F4,XK_Greek_upsilon = 0x7F5,XK_Greek_phi = 0x7F6,XK_Greek_chi = 0x7F7,XK_Greek_psi = 0x7F8,XK_Greek_omega = 0x7F9,XK_Greek_switch = 0xFF7E,XK_hebrew_doublelowline = 0xCDF,XK_hebrew_aleph = 0xCE0,XK_hebrew_bet = 0xCE1,XK_hebrew_beth = 0xCE1,XK_hebrew_gimel = 0xCE2,XK_hebrew_gimmel = 0xCE2,XK_hebrew_dalet = 0xCE3,XK_hebrew_daleth = 0xCE3,XK_hebrew_he = 0xCE4,XK_hebrew_waw = 0xCE5,XK_hebrew_zain = 0xCE6,XK_hebrew_zayin = 0xCE6,XK_hebrew_chet = 0xCE7,XK_hebrew_het = 0xCE7,XK_hebrew_tet = 0xCE8,XK_hebrew_teth = 0xCE8,XK_hebrew_yod = 0xCE9,XK_hebrew_finalkaph = 0xCEA,XK_hebrew_kaph = 0xCEB,XK_hebrew_lamed = 0xCEC,XK_hebrew_finalmem = 0xCED,XK_hebrew_mem = 0xCEE,XK_hebrew_finalnun = 0xCEF,XK_hebrew_nun = 0xCF0,XK_hebrew_samech = 0xCF1,XK_hebrew_samekh = 0xCF1,XK_hebrew_ayin = 0xCF2,XK_hebrew_finalpe = 0xCF3,XK_hebrew_pe = 0xCF4,XK_hebrew_finalzade = 0xCF5,XK_hebrew_finalzadi = 0xCF5,XK_hebrew_zade = 0xCF6,XK_hebrew_zadi = 0xCF6,XK_hebrew_qoph = 0xCF7,XK_hebrew_kuf = 0xCF7,XK_hebrew_resh = 0xCF8,XK_hebrew_shin = 0xCF9,XK_hebrew_taw = 0xCFA,XK_hebrew_taf = 0xCFA,XK_Hebrew_switch = 0xFF7E,XK_Thai_kokai = 0xDA1,XK_Thai_khokhai = 0xDA2,XK_Thai_khokhuat = 0xDA3,XK_Thai_khokhwai = 0xDA4,XK_Thai_khokhon = 0xDA5,XK_Thai_khorakhang = 0xDA6,XK_Thai_ngongu = 0xDA7,XK_Thai_chochan = 0xDA8,XK_Thai_choching = 0xDA9,XK_Thai_chochang = 0xDAA,XK_Thai_soso = 0xDAB,XK_Thai_chochoe = 0xDAC,XK_Thai_yoying = 0xDAD,XK_Thai_dochada = 0xDAE,XK_Thai_topatak = 0xDAF,XK_Thai_thothan = 0xDB0,XK_Thai_thonangmontho = 0xDB1,XK_Thai_thophuthao = 0xDB2,XK_Thai_nonen = 0xDB3,XK_Thai_dodek = 0xDB4,XK_Thai_totao = 0xDB5,XK_Thai_thothung = 0xDB6,XK_Thai_thothahan = 0xDB7,XK_Thai_thothong = 0xDB8,XK_Thai_nonu = 0xDB9,XK_Thai_bobaimai = 0xDBA,XK_Thai_popla = 0xDBB,XK_Thai_phophung = 0xDBC,XK_Thai_fofa = 0xDBD,XK_Thai_phophan = 0xDBE,XK_Thai_fofan = 0xDBF,XK_Thai_phosamphao = 0xDC0,XK_Thai_moma = 0xDC1,XK_Thai_yoyak = 0xDC2,XK_Thai_rorua = 0xDC3,XK_Thai_ru = 0xDC4,XK_Thai_loling = 0xDC5,XK_Thai_lu = 0xDC6,XK_Thai_wowaen = 0xDC7,XK_Thai_sosala = 0xDC8,XK_Thai_sorusi = 0xDC9,XK_Thai_sosua = 0xDCA,XK_Thai_hohip = 0xDCB,XK_Thai_lochula = 0xDCC,XK_Thai_oang = 0xDCD,XK_Thai_honokhuk = 0xDCE,XK_Thai_paiyannoi = 0xDCF,XK_Thai_saraa = 0xDD0,XK_Thai_maihanakat = 0xDD1,XK_Thai_saraaa = 0xDD2,XK_Thai_saraam = 0xDD3,XK_Thai_sarai = 0xDD4,XK_Thai_saraii = 0xDD5,XK_Thai_saraue = 0xDD6,XK_Thai_sarauee = 0xDD7,XK_Thai_sarau = 0xDD8,XK_Thai_sarauu = 0xDD9,XK_Thai_phinthu = 0xDDA,XK_Thai_maihanakat_maitho = 0xDDE,XK_Thai_baht = 0xDDF,XK_Thai_sarae = 0xDE0,XK_Thai_saraae = 0xDE1,XK_Thai_sarao = 0xDE2,XK_Thai_saraaimaimuan = 0xDE3,XK_Thai_saraaimaimalai = 0xDE4,XK_Thai_lakkhangyao = 0xDE5,XK_Thai_maiyamok = 0xDE6,XK_Thai_maitaikhu = 0xDE7,XK_Thai_maiek = 0xDE8,XK_Thai_maitho = 0xDE9,XK_Thai_maitri = 0xDEA,XK_Thai_maichattawa = 0xDEB,XK_Thai_thanthakhat = 0xDEC,XK_Thai_nikhahit = 0xDED,XK_Thai_leksun = 0xDF0,XK_Thai_leknung = 0xDF1,XK_Thai_leksong = 0xDF2,XK_Thai_leksam = 0xDF3,XK_Thai_leksi = 0xDF4,XK_Thai_lekha = 0xDF5,XK_Thai_lekhok = 0xDF6,XK_Thai_lekchet = 0xDF7,XK_Thai_lekpaet = 0xDF8,XK_Thai_lekkao = 0xDF9,XK_Hangul = 0xFF31,XK_Hangul_Start = 0xFF32,XK_Hangul_End = 0xFF33,XK_Hangul_Hanja = 0xFF34,XK_Hangul_Jamo = 0xFF35,XK_Hangul_Romaja = 0xFF36,XK_Hangul_Codeinput = 0xFF37,XK_Hangul_Jeonja = 0xFF38,XK_Hangul_Banja = 0xFF39,XK_Hangul_PreHanja = 0xFF3A,XK_Hangul_PostHanja = 0xFF3B,XK_Hangul_SingleCandidate = 0xFF3C,XK_Hangul_MultipleCandidate = 0xFF3D,XK_Hangul_PreviousCandidate = 0xFF3E,XK_Hangul_Special = 0xFF3F,XK_Hangul_switch = 0xFF7E,XK_Hangul_Kiyeog = 0xEA1,XK_Hangul_SsangKiyeog = 0xEA2,XK_Hangul_KiyeogSios = 0xEA3,XK_Hangul_Nieun = 0xEA4,XK_Hangul_NieunJieuj = 0xEA5,XK_Hangul_NieunHieuh = 0xEA6,XK_Hangul_Dikeud = 0xEA7,XK_Hangul_SsangDikeud = 0xEA8,XK_Hangul_Rieul = 0xEA9,XK_Hangul_RieulKiyeog = 0xEAA,XK_Hangul_RieulMieum = 0xEAB,XK_Hangul_RieulPieub = 0xEAC,XK_Hangul_RieulSios = 0xEAD,XK_Hangul_RieulTieut = 0xEAE,XK_Hangul_RieulPhieuf = 0xEAF,XK_Hangul_RieulHieuh = 0xEB0,XK_Hangul_Mieum = 0xEB1,XK_Hangul_Pieub = 0xEB2,XK_Hangul_SsangPieub = 0xEB3,XK_Hangul_PieubSios = 0xEB4,XK_Hangul_Sios = 0xEB5,XK_Hangul_SsangSios = 0xEB6,XK_Hangul_Ieung = 0xEB7,XK_Hangul_Jieuj = 0xEB8,XK_Hangul_SsangJieuj = 0xEB9,XK_Hangul_Cieuc = 0xEBA,XK_Hangul_Khieuq = 0xEBB,XK_Hangul_Tieut = 0xEBC,XK_Hangul_Phieuf = 0xEBD,XK_Hangul_Hieuh = 0xEBE,XK_Hangul_A = 0xEBF,XK_Hangul_AE = 0xEC0,XK_Hangul_YA = 0xEC1,XK_Hangul_YAE = 0xEC2,XK_Hangul_EO = 0xEC3,XK_Hangul_E = 0xEC4,XK_Hangul_YEO = 0xEC5,XK_Hangul_YE = 0xEC6,XK_Hangul_O = 0xEC7,XK_Hangul_WA = 0xEC8,XK_Hangul_WAE = 0xEC9,XK_Hangul_OE = 0xECA,XK_Hangul_YO = 0xECB,XK_Hangul_U = 0xECC,XK_Hangul_WEO = 0xECD,XK_Hangul_WE = 0xECE,XK_Hangul_WI = 0xECF,XK_Hangul_YU = 0xED0,XK_Hangul_EU = 0xED1,XK_Hangul_YI = 0xED2,XK_Hangul_I = 0xED3,XK_Hangul_J_Kiyeog = 0xED4,XK_Hangul_J_SsangKiyeog = 0xED5,XK_Hangul_J_KiyeogSios = 0xED6,XK_Hangul_J_Nieun = 0xED7,XK_Hangul_J_NieunJieuj = 0xED8,XK_Hangul_J_NieunHieuh = 0xED9,XK_Hangul_J_Dikeud = 0xEDA,XK_Hangul_J_Rieul = 0xEDB,XK_Hangul_J_RieulKiyeog = 0xEDC,XK_Hangul_J_RieulMieum = 0xEDD,XK_Hangul_J_RieulPieub = 0xEDE,XK_Hangul_J_RieulSios = 0xEDF,XK_Hangul_J_RieulTieut = 0xEE0,XK_Hangul_J_RieulPhieuf = 0xEE1,XK_Hangul_J_RieulHieuh = 0xEE2,XK_Hangul_J_Mieum = 0xEE3,XK_Hangul_J_Pieub = 0xEE4,XK_Hangul_J_PieubSios = 0xEE5,XK_Hangul_J_Sios = 0xEE6,XK_Hangul_J_SsangSios = 0xEE7,XK_Hangul_J_Ieung = 0xEE8,XK_Hangul_J_Jieuj = 0xEE9,XK_Hangul_J_Cieuc = 0xEEA,XK_Hangul_J_Khieuq = 0xEEB,XK_Hangul_J_Tieut = 0xEEC,XK_Hangul_J_Phieuf = 0xEED,XK_Hangul_J_Hieuh = 0xEEE,XK_Hangul_RieulYeorinHieuh = 0xEEF,XK_Hangul_SunkyeongeumMieum = 0xEF0,XK_Hangul_SunkyeongeumPieub = 0xEF1,XK_Hangul_PanSios = 0xEF2,XK_Hangul_KkogjiDalrinIeung = 0xEF3,XK_Hangul_SunkyeongeumPhieuf = 0xEF4,XK_Hangul_YeorinHieuh = 0xEF5,XK_Hangul_AraeA = 0xEF6,XK_Hangul_AraeAE = 0xEF7,XK_Hangul_J_PanSios = 0xEF8,XK_Hangul_J_KkogjiDalrinIeung = 0xEF9,XK_Hangul_J_YeorinHieuh = 0xEFA,XK_Korean_Won = 0xEFF,XK_Armenian_ligature_ew = 0x1000587,XK_Armenian_full_stop = 0x1000589,XK_Armenian_verjaket = 0x1000589,XK_Armenian_separation_mark = 0x100055D,XK_Armenian_but = 0x100055D,XK_Armenian_hyphen = 0x100058A,XK_Armenian_yentamna = 0x100058A,XK_Armenian_exclam = 0x100055C,XK_Armenian_amanak = 0x100055C,XK_Armenian_accent = 0x100055B,XK_Armenian_shesht = 0x100055B,XK_Armenian_question = 0x100055E,XK_Armenian_paruyk = 0x100055E,XK_Armenian_AYB = 0x1000531,XK_Armenian_ayb = 0x1000561,XK_Armenian_BEN = 0x1000532,XK_Armenian_ben = 0x1000562,XK_Armenian_GIM = 0x1000533,XK_Armenian_gim = 0x1000563,XK_Armenian_DA = 0x1000534,XK_Armenian_da = 0x1000564,XK_Armenian_YECH = 0x1000535,XK_Armenian_yech = 0x1000565,XK_Armenian_ZA = 0x1000536,XK_Armenian_za = 0x1000566,XK_Armenian_E = 0x1000537,XK_Armenian_e = 0x1000567,XK_Armenian_AT = 0x1000538,XK_Armenian_at = 0x1000568,XK_Armenian_TO = 0x1000539,XK_Armenian_to = 0x1000569,XK_Armenian_ZHE = 0x100053A,XK_Armenian_zhe = 0x100056A,XK_Armenian_INI = 0x100053B,XK_Armenian_ini = 0x100056B,XK_Armenian_LYUN = 0x100053C,XK_Armenian_lyun = 0x100056C,XK_Armenian_KHE = 0x100053D,XK_Armenian_khe = 0x100056D,XK_Armenian_TSA = 0x100053E,XK_Armenian_tsa = 0x100056E,XK_Armenian_KEN = 0x100053F,XK_Armenian_ken = 0x100056F,XK_Armenian_HO = 0x1000540,XK_Armenian_ho = 0x1000570,XK_Armenian_DZA = 0x1000541,XK_Armenian_dza = 0x1000571,XK_Armenian_GHAT = 0x1000542,XK_Armenian_ghat = 0x1000572,XK_Armenian_TCHE = 0x1000543,XK_Armenian_tche = 0x1000573,XK_Armenian_MEN = 0x1000544,XK_Armenian_men = 0x1000574,XK_Armenian_HI = 0x1000545,XK_Armenian_hi = 0x1000575,XK_Armenian_NU = 0x1000546,XK_Armenian_nu = 0x1000576,XK_Armenian_SHA = 0x1000547,XK_Armenian_sha = 0x1000577,XK_Armenian_VO = 0x1000548,XK_Armenian_vo = 0x1000578,XK_Armenian_CHA = 0x1000549,XK_Armenian_cha = 0x1000579,XK_Armenian_PE = 0x100054A,XK_Armenian_pe = 0x100057A,XK_Armenian_JE = 0x100054B,XK_Armenian_je = 0x100057B,XK_Armenian_RA = 0x100054C,XK_Armenian_ra = 0x100057C,XK_Armenian_SE = 0x100054D,XK_Armenian_se = 0x100057D,XK_Armenian_VEV = 0x100054E,XK_Armenian_vev = 0x100057E,XK_Armenian_TYUN = 0x100054F,XK_Armenian_tyun = 0x100057F,XK_Armenian_RE = 0x1000550,XK_Armenian_re = 0x1000580,XK_Armenian_TSO = 0x1000551,XK_Armenian_tso = 0x1000581,XK_Armenian_VYUN = 0x1000552,XK_Armenian_vyun = 0x1000582,XK_Armenian_PYUR = 0x1000553,XK_Armenian_pyur = 0x1000583,XK_Armenian_KE = 0x1000554,XK_Armenian_ke = 0x1000584,XK_Armenian_O = 0x1000555,XK_Armenian_o = 0x1000585,XK_Armenian_FE = 0x1000556,XK_Armenian_fe = 0x1000586,XK_Armenian_apostrophe = 0x100055A,XK_Georgian_an = 0x10010D0,XK_Georgian_ban = 0x10010D1,XK_Georgian_gan = 0x10010D2,XK_Georgian_don = 0x10010D3,XK_Georgian_en = 0x10010D4,XK_Georgian_vin = 0x10010D5,XK_Georgian_zen = 0x10010D6,XK_Georgian_tan = 0x10010D7,XK_Georgian_in = 0x10010D8,XK_Georgian_kan = 0x10010D9,XK_Georgian_las = 0x10010DA,XK_Georgian_man = 0x10010DB,XK_Georgian_nar = 0x10010DC,XK_Georgian_on = 0x10010DD,XK_Georgian_par = 0x10010DE,XK_Georgian_zhar = 0x10010DF,XK_Georgian_rae = 0x10010E0,XK_Georgian_san = 0x10010E1,XK_Georgian_tar = 0x10010E2,XK_Georgian_un = 0x10010E3,XK_Georgian_phar = 0x10010E4,XK_Georgian_khar = 0x10010E5,XK_Georgian_ghan = 0x10010E6,XK_Georgian_qar = 0x10010E7,XK_Georgian_shin = 0x10010E8,XK_Georgian_chin = 0x10010E9,XK_Georgian_can = 0x10010EA,XK_Georgian_jil = 0x10010EB,XK_Georgian_cil = 0x10010EC,XK_Georgian_char = 0x10010ED,XK_Georgian_xan = 0x10010EE,XK_Georgian_jhan = 0x10010EF,XK_Georgian_hae = 0x10010F0,XK_Georgian_he = 0x10010F1,XK_Georgian_hie = 0x10010F2,XK_Georgian_we = 0x10010F3,XK_Georgian_har = 0x10010F4,XK_Georgian_hoe = 0x10010F5,XK_Georgian_fi = 0x10010F6,XK_Xabovedot = 0x1001E8A,XK_Ibreve = 0x100012C,XK_Zstroke = 0x10001B5,XK_Gcaron = 0x10001E6,XK_Ocaron = 0x10001D1,XK_Obarred = 0x100019F,XK_xabovedot = 0x1001E8B,XK_ibreve = 0x100012D,XK_zstroke = 0x10001B6,XK_gcaron = 0x10001E7,XK_ocaron = 0x10001D2,XK_obarred = 0x1000275,XK_SCHWA = 0x100018F,XK_schwa = 0x1000259,XK_EZH = 0x10001B7,XK_ezh = 0x1000292,XK_Lbelowdot = 0x1001E36,XK_lbelowdot = 0x1001E37,XK_Abelowdot = 0x1001EA0,XK_abelowdot = 0x1001EA1,XK_Ahook = 0x1001EA2,XK_ahook = 0x1001EA3,XK_Acircumflexacute = 0x1001EA4,XK_acircumflexacute = 0x1001EA5,XK_Acircumflexgrave = 0x1001EA6,XK_acircumflexgrave = 0x1001EA7,XK_Acircumflexhook = 0x1001EA8,XK_acircumflexhook = 0x1001EA9,XK_Acircumflextilde = 0x1001EAA,XK_acircumflextilde = 0x1001EAB,XK_Acircumflexbelowdot = 0x1001EAC,XK_acircumflexbelowdot = 0x1001EAD,XK_Abreveacute = 0x1001EAE,XK_abreveacute = 0x1001EAF,XK_Abrevegrave = 0x1001EB0,XK_abrevegrave = 0x1001EB1,XK_Abrevehook = 0x1001EB2,XK_abrevehook = 0x1001EB3,XK_Abrevetilde = 0x1001EB4,XK_abrevetilde = 0x1001EB5,XK_Abrevebelowdot = 0x1001EB6,XK_abrevebelowdot = 0x1001EB7,XK_Ebelowdot = 0x1001EB8,XK_ebelowdot = 0x1001EB9,XK_Ehook = 0x1001EBA,XK_ehook = 0x1001EBB,XK_Etilde = 0x1001EBC,XK_etilde = 0x1001EBD,XK_Ecircumflexacute = 0x1001EBE,XK_ecircumflexacute = 0x1001EBF,XK_Ecircumflexgrave = 0x1001EC0,XK_ecircumflexgrave = 0x1001EC1,XK_Ecircumflexhook = 0x1001EC2,XK_ecircumflexhook = 0x1001EC3,XK_Ecircumflextilde = 0x1001EC4,XK_ecircumflextilde = 0x1001EC5,XK_Ecircumflexbelowdot = 0x1001EC6,XK_ecircumflexbelowdot = 0x1001EC7,XK_Ihook = 0x1001EC8,XK_ihook = 0x1001EC9,XK_Ibelowdot = 0x1001ECA,XK_ibelowdot = 0x1001ECB,XK_Obelowdot = 0x1001ECC,XK_obelowdot = 0x1001ECD,XK_Ohook = 0x1001ECE,XK_ohook = 0x1001ECF,XK_Ocircumflexacute = 0x1001ED0,XK_ocircumflexacute = 0x1001ED1,XK_Ocircumflexgrave = 0x1001ED2,XK_ocircumflexgrave = 0x1001ED3,XK_Ocircumflexhook = 0x1001ED4,XK_ocircumflexhook = 0x1001ED5,XK_Ocircumflextilde = 0x1001ED6,XK_ocircumflextilde = 0x1001ED7,XK_Ocircumflexbelowdot = 0x1001ED8,XK_ocircumflexbelowdot = 0x1001ED9,XK_Ohornacute = 0x1001EDA,XK_ohornacute = 0x1001EDB,XK_Ohorngrave = 0x1001EDC,XK_ohorngrave = 0x1001EDD,XK_Ohornhook = 0x1001EDE,XK_ohornhook = 0x1001EDF,XK_Ohorntilde = 0x1001EE0,XK_ohorntilde = 0x1001EE1,XK_Ohornbelowdot = 0x1001EE2,XK_ohornbelowdot = 0x1001EE3,XK_Ubelowdot = 0x1001EE4,XK_ubelowdot = 0x1001EE5,XK_Uhook = 0x1001EE6,XK_uhook = 0x1001EE7,XK_Uhornacute = 0x1001EE8,XK_uhornacute = 0x1001EE9,XK_Uhorngrave = 0x1001EEA,XK_uhorngrave = 0x1001EEB,XK_Uhornhook = 0x1001EEC,XK_uhornhook = 0x1001EED,XK_Uhorntilde = 0x1001EEE,XK_uhorntilde = 0x1001EEF,XK_Uhornbelowdot = 0x1001EF0,XK_uhornbelowdot = 0x1001EF1,XK_Ybelowdot = 0x1001EF4,XK_ybelowdot = 0x1001EF5,XK_Yhook = 0x1001EF6,XK_yhook = 0x1001EF7,XK_Ytilde = 0x1001EF8,XK_ytilde = 0x1001EF9,XK_Ohorn = 0x10001A0,XK_ohorn = 0x10001A1,XK_Uhorn = 0x10001AF,XK_uhorn = 0x10001B0,XK_EcuSign = 0x10020A0,XK_ColonSign = 0x10020A1,XK_CruzeiroSign = 0x10020A2,XK_FFrancSign = 0x10020A3,XK_LiraSign = 0x10020A4,XK_MillSign = 0x10020A5,XK_NairaSign = 0x10020A6,XK_PesetaSign = 0x10020A7,XK_RupeeSign = 0x10020A8,XK_WonSign = 0x10020A9,XK_NewSheqelSign = 0x10020AA,XK_DongSign = 0x10020AB,XK_EuroSign = 0x20AC,XK_zerosuperior = 0x1002070,XK_foursuperior = 0x1002074,XK_fivesuperior = 0x1002075,XK_sixsuperior = 0x1002076,XK_sevensuperior = 0x1002077,XK_eightsuperior = 0x1002078,XK_ninesuperior = 0x1002079,XK_zerosubscript = 0x1002080,XK_onesubscript = 0x1002081,XK_twosubscript = 0x1002082,XK_threesubscript = 0x1002083,XK_foursubscript = 0x1002084,XK_fivesubscript = 0x1002085,XK_sixsubscript = 0x1002086,XK_sevensubscript = 0x1002087,XK_eightsubscript = 0x1002088,XK_ninesubscript = 0x1002089,XK_partdifferential = 0x1002202,XK_emptyset = 0x1002205,XK_elementof = 0x1002208,XK_notelementof = 0x1002209,XK_containsas = 0x100220B,XK_squareroot = 0x100221A,XK_cuberoot = 0x100221B,XK_fourthroot = 0x100221C,XK_dintegral = 0x100222C,XK_tintegral = 0x100222D,XK_because = 0x1002235,XK_approxeq = 0x1002248,XK_notapproxeq = 0x1002247,XK_notidentical = 0x1002262,XK_stricteq = 0x1002263,XK_braille_dot_1 = 0xFFF1,XK_braille_dot_2 = 0xFFF2,XK_braille_dot_3 = 0xFFF3,XK_braille_dot_4 = 0xFFF4,XK_braille_dot_5 = 0xFFF5,XK_braille_dot_6 = 0xFFF6,XK_braille_dot_7 = 0xFFF7,XK_braille_dot_8 = 0xFFF8,XK_braille_dot_9 = 0xFFF9,XK_braille_dot_10 = 0xFFFA,XK_braille_blank = 0x1002800,XK_braille_dots_1 = 0x1002801,XK_braille_dots_2 = 0x1002802,XK_braille_dots_12 = 0x1002803,XK_braille_dots_3 = 0x1002804,XK_braille_dots_13 = 0x1002805,XK_braille_dots_23 = 0x1002806,XK_braille_dots_123 = 0x1002807,XK_braille_dots_4 = 0x1002808,XK_braille_dots_14 = 0x1002809,XK_braille_dots_24 = 0x100280A,XK_braille_dots_124 = 0x100280B,XK_braille_dots_34 = 0x100280C,XK_braille_dots_134 = 0x100280D,XK_braille_dots_234 = 0x100280E,XK_braille_dots_1234 = 0x100280F,XK_braille_dots_5 = 0x1002810,XK_braille_dots_15 = 0x1002811,XK_braille_dots_25 = 0x1002812,XK_braille_dots_125 = 0x1002813,XK_braille_dots_35 = 0x1002814,XK_braille_dots_135 = 0x1002815,XK_braille_dots_235 = 0x1002816,XK_braille_dots_1235 = 0x1002817,XK_braille_dots_45 = 0x1002818,XK_braille_dots_145 = 0x1002819,XK_braille_dots_245 = 0x100281A,XK_braille_dots_1245 = 0x100281B,XK_braille_dots_345 = 0x100281C,XK_braille_dots_1345 = 0x100281D,XK_braille_dots_2345 = 0x100281E,XK_braille_dots_12345 = 0x100281F,XK_braille_dots_6 = 0x1002820,XK_braille_dots_16 = 0x1002821,XK_braille_dots_26 = 0x1002822,XK_braille_dots_126 = 0x1002823,XK_braille_dots_36 = 0x1002824,XK_braille_dots_136 = 0x1002825,XK_braille_dots_236 = 0x1002826,XK_braille_dots_1236 = 0x1002827,XK_braille_dots_46 = 0x1002828,XK_braille_dots_146 = 0x1002829,XK_braille_dots_246 = 0x100282A,XK_braille_dots_1246 = 0x100282B,XK_braille_dots_346 = 0x100282C,XK_braille_dots_1346 = 0x100282D,XK_braille_dots_2346 = 0x100282E,XK_braille_dots_12346 = 0x100282F,XK_braille_dots_56 = 0x1002830,XK_braille_dots_156 = 0x1002831,XK_braille_dots_256 = 0x1002832,XK_braille_dots_1256 = 0x1002833,XK_braille_dots_356 = 0x1002834,XK_braille_dots_1356 = 0x1002835,XK_braille_dots_2356 = 0x1002836,XK_braille_dots_12356 = 0x1002837,XK_braille_dots_456 = 0x1002838,XK_braille_dots_1456 = 0x1002839,XK_braille_dots_2456 = 0x100283A,XK_braille_dots_12456 = 0x100283B,XK_braille_dots_3456 = 0x100283C,XK_braille_dots_13456 = 0x100283D,XK_braille_dots_23456 = 0x100283E,XK_braille_dots_123456 = 0x100283F,XK_braille_dots_7 = 0x1002840,XK_braille_dots_17 = 0x1002841,XK_braille_dots_27 = 0x1002842,XK_braille_dots_127 = 0x1002843,XK_braille_dots_37 = 0x1002844,XK_braille_dots_137 = 0x1002845,XK_braille_dots_237 = 0x1002846,XK_braille_dots_1237 = 0x1002847,XK_braille_dots_47 = 0x1002848,XK_braille_dots_147 = 0x1002849,XK_braille_dots_247 = 0x100284A,XK_braille_dots_1247 = 0x100284B,XK_braille_dots_347 = 0x100284C,XK_braille_dots_1347 = 0x100284D,XK_braille_dots_2347 = 0x100284E,XK_braille_dots_12347 = 0x100284F,XK_braille_dots_57 = 0x1002850,XK_braille_dots_157 = 0x1002851,XK_braille_dots_257 = 0x1002852,XK_braille_dots_1257 = 0x1002853,XK_braille_dots_357 = 0x1002854,XK_braille_dots_1357 = 0x1002855,XK_braille_dots_2357 = 0x1002856,XK_braille_dots_12357 = 0x1002857,XK_braille_dots_457 = 0x1002858,XK_braille_dots_1457 = 0x1002859,XK_braille_dots_2457 = 0x100285A,XK_braille_dots_12457 = 0x100285B,XK_braille_dots_3457 = 0x100285C,XK_braille_dots_13457 = 0x100285D,XK_braille_dots_23457 = 0x100285E,XK_braille_dots_123457 = 0x100285F,XK_braille_dots_67 = 0x1002860,XK_braille_dots_167 = 0x1002861,XK_braille_dots_267 = 0x1002862,XK_braille_dots_1267 = 0x1002863,XK_braille_dots_367 = 0x1002864,XK_braille_dots_1367 = 0x1002865,XK_braille_dots_2367 = 0x1002866,XK_braille_dots_12367 = 0x1002867,XK_braille_dots_467 = 0x1002868,XK_braille_dots_1467 = 0x1002869,XK_braille_dots_2467 = 0x100286A,XK_braille_dots_12467 = 0x100286B,XK_braille_dots_3467 = 0x100286C,XK_braille_dots_13467 = 0x100286D,XK_braille_dots_23467 = 0x100286E,XK_braille_dots_123467 = 0x100286F,XK_braille_dots_567 = 0x1002870,XK_braille_dots_1567 = 0x1002871,XK_braille_dots_2567 = 0x1002872,XK_braille_dots_12567 = 0x1002873,XK_braille_dots_3567 = 0x1002874,XK_braille_dots_13567 = 0x1002875,XK_braille_dots_23567 = 0x1002876,XK_braille_dots_123567 = 0x1002877,XK_braille_dots_4567 = 0x1002878,XK_braille_dots_14567 = 0x1002879,XK_braille_dots_24567 = 0x100287A,XK_braille_dots_124567 = 0x100287B,XK_braille_dots_34567 = 0x100287C,XK_braille_dots_134567 = 0x100287D,XK_braille_dots_234567 = 0x100287E,XK_braille_dots_1234567 = 0x100287F,XK_braille_dots_8 = 0x1002880,XK_braille_dots_18 = 0x1002881,XK_braille_dots_28 = 0x1002882,XK_braille_dots_128 = 0x1002883,XK_braille_dots_38 = 0x1002884,XK_braille_dots_138 = 0x1002885,XK_braille_dots_238 = 0x1002886,XK_braille_dots_1238 = 0x1002887,XK_braille_dots_48 = 0x1002888,XK_braille_dots_148 = 0x1002889,XK_braille_dots_248 = 0x100288A,XK_braille_dots_1248 = 0x100288B,XK_braille_dots_348 = 0x100288C,XK_braille_dots_1348 = 0x100288D,XK_braille_dots_2348 = 0x100288E,XK_braille_dots_12348 = 0x100288F,XK_braille_dots_58 = 0x1002890,XK_braille_dots_158 = 0x1002891,XK_braille_dots_258 = 0x1002892,XK_braille_dots_1258 = 0x1002893,XK_braille_dots_358 = 0x1002894,XK_braille_dots_1358 = 0x1002895,XK_braille_dots_2358 = 0x1002896,XK_braille_dots_12358 = 0x1002897,XK_braille_dots_458 = 0x1002898,XK_braille_dots_1458 = 0x1002899,XK_braille_dots_2458 = 0x100289A,XK_braille_dots_12458 = 0x100289B,XK_braille_dots_3458 = 0x100289C,XK_braille_dots_13458 = 0x100289D,XK_braille_dots_23458 = 0x100289E,XK_braille_dots_123458 = 0x100289F,XK_braille_dots_68 = 0x10028A0,XK_braille_dots_168 = 0x10028A1,XK_braille_dots_268 = 0x10028A2,XK_braille_dots_1268 = 0x10028A3,XK_braille_dots_368 = 0x10028A4,XK_braille_dots_1368 = 0x10028A5,XK_braille_dots_2368 = 0x10028A6,XK_braille_dots_12368 = 0x10028A7,XK_braille_dots_468 = 0x10028A8,XK_braille_dots_1468 = 0x10028A9,XK_braille_dots_2468 = 0x10028AA,XK_braille_dots_12468 = 0x10028AB,XK_braille_dots_3468 = 0x10028AC,XK_braille_dots_13468 = 0x10028AD,XK_braille_dots_23468 = 0x10028AE,XK_braille_dots_123468 = 0x10028AF,XK_braille_dots_568 = 0x10028B0,XK_braille_dots_1568 = 0x10028B1,XK_braille_dots_2568 = 0x10028B2,XK_braille_dots_12568 = 0x10028B3,XK_braille_dots_3568 = 0x10028B4,XK_braille_dots_13568 = 0x10028B5,XK_braille_dots_23568 = 0x10028B6,XK_braille_dots_123568 = 0x10028B7,XK_braille_dots_4568 = 0x10028B8,XK_braille_dots_14568 = 0x10028B9,XK_braille_dots_24568 = 0x10028BA,XK_braille_dots_124568 = 0x10028BB,XK_braille_dots_34568 = 0x10028BC,XK_braille_dots_134568 = 0x10028BD,XK_braille_dots_234568 = 0x10028BE,XK_braille_dots_1234568 = 0x10028BF,XK_braille_dots_78 = 0x10028C0,XK_braille_dots_178 = 0x10028C1,XK_braille_dots_278 = 0x10028C2,XK_braille_dots_1278 = 0x10028C3,XK_braille_dots_378 = 0x10028C4,XK_braille_dots_1378 = 0x10028C5,XK_braille_dots_2378 = 0x10028C6,XK_braille_dots_12378 = 0x10028C7,XK_braille_dots_478 = 0x10028C8,XK_braille_dots_1478 = 0x10028C9,XK_braille_dots_2478 = 0x10028CA,XK_braille_dots_12478 = 0x10028CB,XK_braille_dots_3478 = 0x10028CC,XK_braille_dots_13478 = 0x10028CD,XK_braille_dots_23478 = 0x10028CE,XK_braille_dots_123478 = 0x10028CF,XK_braille_dots_578 = 0x10028D0,XK_braille_dots_1578 = 0x10028D1,XK_braille_dots_2578 = 0x10028D2,XK_braille_dots_12578 = 0x10028D3,XK_braille_dots_3578 = 0x10028D4,XK_braille_dots_13578 = 0x10028D5,XK_braille_dots_23578 = 0x10028D6,XK_braille_dots_123578 = 0x10028D7,XK_braille_dots_4578 = 0x10028D8,XK_braille_dots_14578 = 0x10028D9,XK_braille_dots_24578 = 0x10028DA,XK_braille_dots_124578 = 0x10028DB,XK_braille_dots_34578 = 0x10028DC,XK_braille_dots_134578 = 0x10028DD,XK_braille_dots_234578 = 0x10028DE,XK_braille_dots_1234578 = 0x10028DF,XK_braille_dots_678 = 0x10028E0,XK_braille_dots_1678 = 0x10028E1,XK_braille_dots_2678 = 0x10028E2,XK_braille_dots_12678 = 0x10028E3,XK_braille_dots_3678 = 0x10028E4,XK_braille_dots_13678 = 0x10028E5,XK_braille_dots_23678 = 0x10028E6,XK_braille_dots_123678 = 0x10028E7,XK_braille_dots_4678 = 0x10028E8,XK_braille_dots_14678 = 0x10028E9,XK_braille_dots_24678 = 0x10028EA,XK_braille_dots_124678 = 0x10028EB,XK_braille_dots_34678 = 0x10028EC,XK_braille_dots_134678 = 0x10028ED,XK_braille_dots_234678 = 0x10028EE,XK_braille_dots_1234678 = 0x10028EF,XK_braille_dots_5678 = 0x10028F0,XK_braille_dots_15678 = 0x10028F1,XK_braille_dots_25678 = 0x10028F2,XK_braille_dots_125678 = 0x10028F3,XK_braille_dots_35678 = 0x10028F4,XK_braille_dots_135678 = 0x10028F5,XK_braille_dots_235678 = 0x10028F6,XK_braille_dots_1235678 = 0x10028F7,XK_braille_dots_45678 = 0x10028F8,XK_braille_dots_145678 = 0x10028F9,XK_braille_dots_245678 = 0x10028FA,XK_braille_dots_1245678 = 0x10028FB,XK_braille_dots_345678 = 0x10028FC,XK_braille_dots_1345678 = 0x10028FD,XK_braille_dots_2345678 = 0x10028FE,XK_braille_dots_12345678 = 0x10028FF,XK_Sinh_ng = 0x1000D82,XK_Sinh_h2 = 0x1000D83,XK_Sinh_a = 0x1000D85,XK_Sinh_aa = 0x1000D86,XK_Sinh_ae = 0x1000D87,XK_Sinh_aee = 0x1000D88,XK_Sinh_i = 0x1000D89,XK_Sinh_ii = 0x1000D8A,XK_Sinh_u = 0x1000D8B,XK_Sinh_uu = 0x1000D8C,XK_Sinh_ri = 0x1000D8D,XK_Sinh_rii = 0x1000D8E,XK_Sinh_lu = 0x1000D8F,XK_Sinh_luu = 0x1000D90,XK_Sinh_e = 0x1000D91,XK_Sinh_ee = 0x1000D92,XK_Sinh_ai = 0x1000D93,XK_Sinh_o = 0x1000D94,XK_Sinh_oo = 0x1000D95,XK_Sinh_au = 0x1000D96,XK_Sinh_ka = 0x1000D9A,XK_Sinh_kha = 0x1000D9B,XK_Sinh_ga = 0x1000D9C,XK_Sinh_gha = 0x1000D9D,XK_Sinh_ng2 = 0x1000D9E,XK_Sinh_nga = 0x1000D9F,XK_Sinh_ca = 0x1000DA0,XK_Sinh_cha = 0x1000DA1,XK_Sinh_ja = 0x1000DA2,XK_Sinh_jha = 0x1000DA3,XK_Sinh_nya = 0x1000DA4,XK_Sinh_jnya = 0x1000DA5,XK_Sinh_nja = 0x1000DA6,XK_Sinh_tta = 0x1000DA7,XK_Sinh_ttha = 0x1000DA8,XK_Sinh_dda = 0x1000DA9,XK_Sinh_ddha = 0x1000DAA,XK_Sinh_nna = 0x1000DAB,XK_Sinh_ndda = 0x1000DAC,XK_Sinh_tha = 0x1000DAD,XK_Sinh_thha = 0x1000DAE,XK_Sinh_dha = 0x1000DAF,XK_Sinh_dhha = 0x1000DB0,XK_Sinh_na = 0x1000DB1,XK_Sinh_ndha = 0x1000DB3,XK_Sinh_pa = 0x1000DB4,XK_Sinh_pha = 0x1000DB5,XK_Sinh_ba = 0x1000DB6,XK_Sinh_bha = 0x1000DB7,XK_Sinh_ma = 0x1000DB8,XK_Sinh_mba = 0x1000DB9,XK_Sinh_ya = 0x1000DBA,XK_Sinh_ra = 0x1000DBB,XK_Sinh_la = 0x1000DBD,XK_Sinh_va = 0x1000DC0,XK_Sinh_sha = 0x1000DC1,XK_Sinh_ssha = 0x1000DC2,XK_Sinh_sa = 0x1000DC3,XK_Sinh_ha = 0x1000DC4,XK_Sinh_lla = 0x1000DC5,XK_Sinh_fa = 0x1000DC6,XK_Sinh_al = 0x1000DCA,XK_Sinh_aa2 = 0x1000DCF,XK_Sinh_ae2 = 0x1000DD0,XK_Sinh_aee2 = 0x1000DD1,XK_Sinh_i2 = 0x1000DD2,XK_Sinh_ii2 = 0x1000DD3,XK_Sinh_u2 = 0x1000DD4,XK_Sinh_uu2 = 0x1000DD6,XK_Sinh_ru2 = 0x1000DD8,XK_Sinh_e2 = 0x1000DD9,XK_Sinh_ee2 = 0x1000DDA,XK_Sinh_ai2 = 0x1000DDB,XK_Sinh_o2 = 0x1000DDC,XK_Sinh_oo2 = 0x1000DDD,XK_Sinh_au2 = 0x1000DDE,XK_Sinh_lu2 = 0x1000DDF,XK_Sinh_ruu2 = 0x1000DF2,XK_Sinh_luu2 = 0x1000DF3,XK_Sinh_kunddaliya = 0x1000DF4,};
enum MACRO_XT {XT_FUNCTION_MAXNAMELEN = 30,XT_EXTENSION_MAXNAMELEN = 29,XT_TABLE_MAXNAMELEN = 32,XT_CONTINUE = -1,XT_RETURN = -5,XT_INV_PROTO = 64,};
enum MACRO_ZF {ZF_TINACT_DEF = 1000,ZF_TINACT = 1000,};
enum MACRO__G {_G_config_h = 1,};
enum MACRO__K {_K_SS_MAXSIZE = 128,};
enum MACRO_sz {sz_XWDheader = 100,sz_XWDColor = 12,};
enum MACRO_xv {xv_QueryExtension = 0,xv_QueryAdaptors = 1,xv_QueryEncodings = 2,xv_GrabPort = 3,xv_UngrabPort = 4,xv_PutVideo = 5,xv_PutStill = 6,xv_GetVideo = 7,xv_GetStill = 8,xv_StopVideo = 9,xv_SelectVideoNotify = 10,xv_SelectPortNotify = 11,xv_QueryBestSize = 12,xv_SetPortAttribute = 13,xv_GetPortAttribute = 14,xv_QueryPortAttributes = 15,xv_ListImageFormats = 16,xv_QueryImageAttributes = 17,xv_PutImage = 18,xv_ShmPutImage = 19,xv_LastRequest = 19,};
typedef unsigned __int16 Rotation;
typedef struct term TERMINAL;
typedef struct termtype TERMTYPE;
enum TX_state {TXS_IDLE = 0x0,TXS_BUSY = 0x1,TXS_ACTIVE = 0x2,TXS_NEWFRAME = 0x3,TXS_IDLE2 = 0x4,TXS_WAIT = 0x5,TXS_TIMEOUT = 0x6,};
typedef unsigned __int64 VisualID;
typedef int XContext;
typedef struct _2AF778DA43FB8122C2FB509EA1A1C573 XDGAMode;
typedef struct _XExtData XExtData;
typedef struct _XOC *XFontSet;
typedef unsigned __int64 XIMStyle;
typedef char *XPointer;
typedef struct _335EDB02744B103283B800FF919FC940 XSegment;
typedef struct _48A6A373861130075F8524D5C353FEE6 XWDColor;
typedef struct _55C4BAE65683A06129AA1262EA0CD4D4 XWMHints;
typedef struct _389F741C4688F992C1DDC28AB9B68F46 XcmsRGBi;
typedef union _XkbEvent XkbEvent;
typedef int XrmQuark;
typedef struct _48974C792553FBFA318CEC22C625F222 XrmValue;
typedef struct _XSQEvent _XQEvent;
struct _XkbMods {unsigned __int8 mask;unsigned __int8 real_mods;unsigned __int16 vmods;};
typedef struct _9722585E737591D9DBBFC1CA80083F53 __fsid_t;
typedef signed __int8 __int8_t;
typedef unsigned int __mode_t;
typedef __int64 __quad_t;
typedef unsigned __int64 __rlim_t;
typedef __int64 __time_t;
typedef unsigned __int8 __u_char;
typedef unsigned __int64 __u_long;
typedef struct _agp_bind agp_bind;
typedef struct _agp_info agp_info;
struct atm_bhli {unsigned __int8 hl_type;unsigned __int8 hl_length;unsigned __int8 hl_info[8];};
union bpf_attr;
struct ca_descr {unsigned int index;unsigned int parity;unsigned __int8 cw[8];};
typedef struct ca_msg ca_msg_t;
typedef struct ca_pid ca_pid_t;
typedef unsigned __int16 char16_t;
typedef unsigned int char32_t;
struct copr_msg {int len;unsigned __int8 data[4000];};
typedef struct _6954A090FF674864C2EF0B367DFBE910 dgaEvent;
typedef double double_t;
struct endpoint {char *uaddr;char *family;char *proto;};
enum fc_ns_pt {FC_NS_UNID_PORT = 0x0,FC_NS_N_PORT = 0x1,FC_NS_NL_PORT = 0x2,FC_NS_FNL_PORT = 0x3,FC_NS_NX_PORT = 0x7F,FC_NS_F_PORT = 0x81,FC_NS_FL_PORT = 0x82,FC_NS_E_PORT = 0x84,FC_NS_B_PORT = 0x85,};
enum fe_pilot {PILOT_ON = 0x0,PILOT_OFF = 0x1,PILOT_AUTO = 0x2,};
struct flat_hdr {char magic[4];unsigned __int64 rev;unsigned __int64 entry;unsigned __int64 data_start;unsigned __int64 data_end;unsigned __int64 bss_end;unsigned __int64 stack_size;unsigned __int64 reloc_start;unsigned __int64 reloc_count;unsigned __int64 flags;unsigned __int64 build_date;unsigned __int64 filler[5];};
typedef struct _BAC7E67B0C2C05C40DFF67087D59816E fr_proto;
typedef struct _CE866585EA90BEF8E1777B84F5242003 fsChar2b;
enum fsh_mode {fsm_DN = 0x0,fsm_DR = 0x1,fsm_DW = 0x2,fsm_DRW = 0x3,};
typedef struct _4CAA9B0307CCA9BCFEBCF54A65F793DC glob64_t;
struct gmon_hdr {char cookie[4];char version[4];char spare[12];};
struct i2o_html {unsigned int iop;unsigned int tid;unsigned int page;void *resbuf;unsigned int *reslen;void *qbuf;unsigned int qlen;};
typedef __int64 intmax_t;
struct ipmi_msg {unsigned __int8 netfn;unsigned __int8 cmd;unsigned __int16 data_len;unsigned __int8 *data;};
typedef struct _1A38A2B7DACF749A0F420E169943E110 jint16_t;
typedef struct _37808375AC776F173FF34D4AD244857E jint32_t;
struct kbsentry {unsigned __int8 kb_func;unsigned __int8 kb_string[512];};
struct mallinfo {int arena;int ordblks;int smblks;int hblks;int hblkhd;int usmblks;int fsmblks;int uordblks;int fordblks;int keepcost;};
enum msg_type {CALL = 0x0,REPLY = 0x1,};
enum name_pos {SAME_NAME = 0x0,HIGHER_NAME = 0x1,LOWER_NAME = 0x2,NOT_SEQUENTIAL = 0x3,BAD_NAME = 0x4,};
enum nfs_stat {NFS_OK = 0x0,NFSERR_PERM = 0x1,NFSERR_NOENT = 0x2,NFSERR_IO = 0x5,NFSERR_NXIO = 0x6,NFSERR_EAGAIN = 0xB,NFSERR_ACCES = 0xD,NFSERR_EXIST = 0x11,NFSERR_XDEV = 0x12,NFSERR_NODEV = 0x13,NFSERR_NOTDIR = 0x14,NFSERR_ISDIR = 0x15,NFSERR_INVAL = 0x16,NFSERR_FBIG = 0x1B,NFSERR_NOSPC = 0x1C,NFSERR_ROFS = 0x1E,NFSERR_MLINK = 0x1F,NFSERR_OPNOTSUPP = 0x2D,NFSERR_NAMETOOLONG = 0x3F,NFSERR_NOTEMPTY = 0x42,NFSERR_DQUOT = 0x45,NFSERR_STALE = 0x46,NFSERR_REMOTE = 0x47,NFSERR_WFLUSH = 0x63,NFSERR_BADHANDLE = 0x2711,NFSERR_NOT_SYNC = 0x2712,NFSERR_BAD_COOKIE = 0x2713,NFSERR_NOTSUPP = 0x2714,NFSERR_TOOSMALL = 0x2715,NFSERR_SERVERFAULT = 0x2716,NFSERR_BADTYPE = 0x2717,NFSERR_JUKEBOX = 0x2718,NFSERR_SAME = 0x2719,NFSERR_DENIED = 0x271A,NFSERR_EXPIRED = 0x271B,NFSERR_LOCKED = 0x271C,NFSERR_GRACE = 0x271D,NFSERR_FHEXPIRED = 0x271E,NFSERR_SHARE_DENIED = 0x271F,NFSERR_WRONGSEC = 0x2720,NFSERR_CLID_INUSE = 0x2721,NFSERR_RESOURCE = 0x2722,NFSERR_MOVED = 0x2723,NFSERR_NOFILEHANDLE = 0x2724,NFSERR_MINOR_VERS_MISMATCH = 0x2725,NFSERR_STALE_CLIENTID = 0x2726,NFSERR_STALE_STATEID = 0x2727,NFSERR_OLD_STATEID = 0x2728,NFSERR_BAD_STATEID = 0x2729,NFSERR_BAD_SEQID = 0x272A,NFSERR_NOT_SAME = 0x272B,NFSERR_LOCK_RANGE = 0x272C,NFSERR_SYMLINK = 0x272D,NFSERR_RESTOREFH = 0x272E,NFSERR_LEASE_MOVED = 0x272F,NFSERR_ATTRNOTSUPP = 0x2730,NFSERR_NO_GRACE = 0x2731,NFSERR_RECLAIM_BAD = 0x2732,NFSERR_RECLAIM_CONFLICT = 0x2733,NFSERR_BAD_XDR = 0x2734,NFSERR_LOCKS_HELD = 0x2735,NFSERR_OPENMODE = 0x2736,NFSERR_BADOWNER = 0x2737,NFSERR_BADCHAR = 0x2738,NFSERR_BADNAME = 0x2739,NFSERR_BAD_RANGE = 0x273A,NFSERR_LOCK_NOTSUPP = 0x273B,NFSERR_OP_ILLEGAL = 0x273C,NFSERR_DEADLOCK = 0x273D,NFSERR_FILE_OPEN = 0x273E,NFSERR_ADMIN_REVOKED = 0x273F,NFSERR_CB_PATH_DOWN = 0x2740,};
typedef char *nis_name;
typedef char *peername;
struct plipconf {unsigned __int16 pcmd;unsigned __int64 nibble;unsigned __int64 trigger;};
struct protoent {char *p_name;char **p_aliases;int p_proto;};
typedef void *psaddr_t;
typedef struct ptsreq ptsreq_t;
typedef int regoff_t;
struct rtc_time {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct rtgenmsg {unsigned __int8 rtgen_family;};
struct scc_stat {__int64 rxints;__int64 txints;__int64 exints;__int64 spints;__int64 txframes;__int64 rxframes;__int64 rxerrs;__int64 txerrs;unsigned int nospace;unsigned int rx_over;unsigned int tx_under;unsigned int tx_state;int tx_queued;unsigned int maxqueue;unsigned int bufsize;};
struct sdla_mem {int addr;int len;void *data;};
struct sigstack {void *ss_sp;int ss_onstack;};
typedef union sigval sigval_t;
typedef struct _C9793B2A88A40550F3E6FCBE57C78800 sprayarr;
typedef unsigned int tcflag_t;
struct termtype {char *term_names;char *str_table;char *Booleans;__int16 *Numbers;char **Strings;char *ext_str_table;char **ext_Names;unsigned __int16 num_Booleans;unsigned __int16 num_Numbers;unsigned __int16 num_Strings;unsigned __int16 ext_Booleans;unsigned __int16 ext_Numbers;unsigned __int16 ext_Strings;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
typedef unsigned __int8 u_int8_t;
typedef unsigned __int16 uint16_t;
typedef unsigned int uint32_t;
typedef unsigned __int64 uint64_t;
struct vt_event {unsigned int event;unsigned int oldev;unsigned int newev;unsigned int pad[4];};
struct vt_sizes {unsigned __int16 v_rows;unsigned __int16 v_cols;unsigned __int16 v_scrollsize;};
typedef unsigned __int64 wctype_t;
enum wimax_st {__WIMAX_ST_NULL = 0x0,WIMAX_ST_DOWN = 0x1,__WIMAX_ST_QUIESCING = 0x2,WIMAX_ST_UNINITIALIZED = 0x3,WIMAX_ST_RADIO_OFF = 0x4,WIMAX_ST_READY = 0x5,WIMAX_ST_SCANNING = 0x6,WIMAX_ST_CONNECTING = 0x7,WIMAX_ST_CONNECTED = 0x8,__WIMAX_ST_INVALID = 0x9,};
typedef struct _94C04A488373DB802AA4CC07AF27941B xBellReq;
typedef struct _xKeyInfo xKeyInfo;
typedef struct _xSegment xSegment;
typedef struct _2A4E2A3E6DCC7FD4DDF34506A216CCE0 xSpanFix;
typedef struct _F1DC5359840258F1056D6AC9280CBC0A xTextElt;
enum xcb_cw_t {XCB_CW_BACK_PIXMAP = 0x1,XCB_CW_BACK_PIXEL = 0x2,XCB_CW_BORDER_PIXMAP = 0x4,XCB_CW_BORDER_PIXEL = 0x8,XCB_CW_BIT_GRAVITY = 0x10,XCB_CW_WIN_GRAVITY = 0x20,XCB_CW_BACKING_STORE = 0x40,XCB_CW_BACKING_PLANES = 0x80,XCB_CW_BACKING_PIXEL = 0x100,XCB_CW_OVERRIDE_REDIRECT = 0x200,XCB_CW_SAVE_UNDER = 0x400,XCB_CW_EVENT_MASK = 0x800,XCB_CW_DONT_PROPAGATE = 0x1000,XCB_CW_COLORMAP = 0x2000,XCB_CW_CURSOR = 0x4000,};
enum xcb_gc_t {XCB_GC_FUNCTION = 0x1,XCB_GC_PLANE_MASK = 0x2,XCB_GC_FOREGROUND = 0x4,XCB_GC_BACKGROUND = 0x8,XCB_GC_LINE_WIDTH = 0x10,XCB_GC_LINE_STYLE = 0x20,XCB_GC_CAP_STYLE = 0x40,XCB_GC_JOIN_STYLE = 0x80,XCB_GC_FILL_STYLE = 0x100,XCB_GC_FILL_RULE = 0x200,XCB_GC_TILE = 0x400,XCB_GC_STIPPLE = 0x800,XCB_GC_TILE_STIPPLE_ORIGIN_X = 0x1000,XCB_GC_TILE_STIPPLE_ORIGIN_Y = 0x2000,XCB_GC_FONT = 0x4000,XCB_GC_SUBWINDOW_MODE = 0x8000,XCB_GC_GRAPHICS_EXPOSURES = 0x10000,XCB_GC_CLIP_ORIGIN_X = 0x20000,XCB_GC_CLIP_ORIGIN_Y = 0x40000,XCB_GC_CLIP_MASK = 0x80000,XCB_GC_DASH_OFFSET = 0x100000,XCB_GC_DASH_LIST = 0x200000,XCB_GC_ARC_MODE = 0x400000,};
enum xcb_gx_t {XCB_GX_CLEAR = 0x0,XCB_GX_AND = 0x1,XCB_GX_AND_REVERSE = 0x2,XCB_GX_COPY = 0x3,XCB_GX_AND_INVERTED = 0x4,XCB_GX_NOOP = 0x5,XCB_GX_XOR = 0x6,XCB_GX_OR = 0x7,XCB_GX_NOR = 0x8,XCB_GX_EQUIV = 0x9,XCB_GX_INVERT = 0xA,XCB_GX_OR_REVERSE = 0xB,XCB_GX_COPY_INVERTED = 0xC,XCB_GX_OR_INVERTED = 0xD,XCB_GX_NAND = 0xE,XCB_GX_SET = 0xF,};
enum xcb_kb_t {XCB_KB_KEY_CLICK_PERCENT = 0x1,XCB_KB_BELL_PERCENT = 0x2,XCB_KB_BELL_PITCH = 0x4,XCB_KB_BELL_DURATION = 0x8,XCB_KB_LED = 0x10,XCB_KB_LED_MODE = 0x20,XCB_KB_KEY = 0x40,XCB_KB_AUTO_REPEAT_MODE = 0x80,};
typedef struct _xkbEvent xkbEvent;
typedef struct _09E69E0556021A33BB43607C87C36B45 xvFormat;
typedef struct _7F1527F4980126EB9203A44DB3E05AC8 CTL_MSG;
typedef struct _XDisplay Display;
typedef struct _02D3975949B56402107C534E336AFF12 Dl_info;
typedef struct _Font *FontPtr;
typedef struct _Font FontRec;
typedef unsigned __int8 KeyCode;
enum MACRO_A {A_NORMAL = 0,A_ATTRIBUTES = -256,A_CHARTEXT = 255,A_COLOR = 65280,A_STANDOUT = 65536,A_UNDERLINE = 131072,A_REVERSE = 262144,A_BLINK = 524288,A_DIM = 1048576,A_BOLD = 2097152,A_ALTCHARSET = 4194304,A_INVIS = 8388608,A_PROTECT = 16777216,A_HORIZONTAL = 33554432,A_LEFT = 67108864,A_LOW = 134217728,A_RIGHT = 268435456,A_TOP = 536870912,A_VERTICAL = 1073741824,};
enum MACRO_C {C_IRUSR = 0x100,C_IWUSR = 0x80,C_IXUSR = 0x40,C_IRGRP = 0x20,C_IWGRP = 0x10,C_IXGRP = 0x8,C_IROTH = 0x4,C_IWOTH = 0x2,C_IXOTH = 0x1,C_ISUID = 0x800,C_ISGID = 0x400,C_ISVTX = 0x200,C_ISBLK = 0x6000,C_ISCHR = 0x2000,C_ISDIR = 0x4000,C_ISFIFO = 0x1000,C_ISSOCK = 0xC000,C_ISLNK = 0xA000,C_ISCTG = 0x9000,C_ISREG = 0x8000,};
enum MACRO_E {E_MIPS_ARCH_1 = 0x0,E_MIPS_ARCH_2 = 0x10000000,E_MIPS_ARCH_3 = 0x20000000,E_MIPS_ARCH_4 = 0x30000000,E_MIPS_ARCH_5 = 0x40000000,E_MIPS_ARCH_32 = 0x60000000,E_MIPS_ARCH_64 = 0x70000000,};
enum MACRO_F {F_ULOCK = 0,F_LOCK = 1,F_TLOCK = 2,F_TEST = 3,};
enum MACRO_H {_XLOCALE_H = 1,_SYS_TYPES_H = 1,};
enum MACRO_K {K_RAW = 0x0,K_XLATE = 0x1,K_MEDIUMRAW = 0x2,K_UNICODE = 0x3,K_OFF = 0x4,};
enum MACRO_L {L_tmpnam = 20,};
enum MACRO_M {M_MXFAST = 1,M_NLBLKS = 2,M_GRAIN = 3,M_KEEP = 4,M_TRIM_THRESHOLD = -1,M_TOP_PAD = -2,M_MMAP_THRESHOLD = -3,M_MMAP_MAX = -4,M_CHECK_ACTION = -5,M_PERTURB = -6,M_ARENA_TEST = -7,M_ARENA_MAX = -8,};
enum MACRO_N {N_UNDF = 0,N_ABS = 2,N_TEXT = 4,N_DATA = 6,N_BSS = 8,N_FN = 15,N_EXT = 1,N_TYPE = 30,N_STAB = 224,N_INDR = 10,N_SETA = 20,N_SETT = 22,N_SETD = 24,N_SETB = 26,N_SETV = 28,};
enum MACRO_O {O_ACCMODE = 0x3,O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_CREAT = 0x40,O_EXCL = 0x80,O_NOCTTY = 0x100,O_TRUNC = 0x200,O_APPEND = 0x400,O_NONBLOCK = 0x800,O_NDELAY = 0x800,O_SYNC = 0x101000,O_FSYNC = 0x101000,O_ASYNC = 0x2000,};
enum MACRO_Q {Q_SYNC = 0x800001,Q_QUOTAON = 0x800002,Q_QUOTAOFF = 0x800003,Q_GETFMT = 0x800004,Q_GETINFO = 0x800005,Q_SETINFO = 0x800006,Q_GETQUOTA = 0x800007,Q_SETQUOTA = 0x800008,};
enum MACRO_R {R_68K_NONE = 0,R_68K_32 = 1,R_68K_16 = 2,R_68K_8 = 3,R_68K_PC32 = 4,R_68K_PC16 = 5,R_68K_PC8 = 6,R_68K_GOT32 = 7,R_68K_GOT16 = 8,R_68K_GOT8 = 9,R_68K_GOT32O = 10,R_68K_GOT16O = 11,R_68K_GOT8O = 12,R_68K_PLT32 = 13,R_68K_PLT16 = 14,R_68K_PLT8 = 15,R_68K_PLT32O = 16,R_68K_PLT16O = 17,R_68K_PLT8O = 18,R_68K_COPY = 19,R_68K_GLOB_DAT = 20,R_68K_JMP_SLOT = 21,R_68K_RELATIVE = 22,R_68K_TLS_GD32 = 25,R_68K_TLS_GD16 = 26,R_68K_TLS_GD8 = 27,R_68K_TLS_LDM32 = 28,R_68K_TLS_LDM16 = 29,R_68K_TLS_LDM8 = 30,R_68K_TLS_LDO32 = 31,R_68K_TLS_LDO16 = 32,R_68K_TLS_LDO8 = 33,R_68K_TLS_IE32 = 34,R_68K_TLS_IE16 = 35,R_68K_TLS_IE8 = 36,R_68K_TLS_LE32 = 37,R_68K_TLS_LE16 = 38,R_68K_TLS_LE8 = 39,R_68K_TLS_DTPMOD32 = 40,R_68K_TLS_DTPREL32 = 41,R_68K_TLS_TPREL32 = 42,R_68K_NUM = 43,R_386_NONE = 0,R_386_32 = 1,R_386_PC32 = 2,R_386_GOT32 = 3,R_386_PLT32 = 4,R_386_COPY = 5,R_386_GLOB_DAT = 6,R_386_JMP_SLOT = 7,R_386_RELATIVE = 8,R_386_GOTOFF = 9,R_386_GOTPC = 10,R_386_32PLT = 11,R_386_TLS_TPOFF = 14,R_386_TLS_IE = 15,R_386_TLS_GOTIE = 16,R_386_TLS_LE = 17,R_386_TLS_GD = 18,R_386_TLS_LDM = 19,R_386_16 = 20,R_386_PC16 = 21,R_386_8 = 22,R_386_PC8 = 23,R_386_TLS_GD_32 = 24,R_386_TLS_GD_PUSH = 25,R_386_TLS_GD_CALL = 26,R_386_TLS_GD_POP = 27,R_386_TLS_LDM_32 = 28,R_386_TLS_LDM_PUSH = 29,R_386_TLS_LDM_CALL = 30,R_386_TLS_LDM_POP = 31,R_386_TLS_LDO_32 = 32,R_386_TLS_IE_32 = 33,R_386_TLS_LE_32 = 34,R_386_TLS_DTPMOD32 = 35,R_386_TLS_DTPOFF32 = 36,R_386_TLS_TPOFF32 = 37,R_386_TLS_GOTDESC = 39,R_386_TLS_DESC_CALL = 40,R_386_TLS_DESC = 41,R_386_IRELATIVE = 42,R_386_NUM = 43,};
enum MACRO_S {S_IFMT = 61440,S_IFDIR = 16384,S_IFCHR = 8192,S_IFBLK = 24576,S_IFREG = 32768,S_IFIFO = 4096,S_IFLNK = 40960,S_IFSOCK = 49152,S_ISUID = 2048,S_ISGID = 1024,S_ISVTX = 512,S_IRUSR = 256,S_IWUSR = 128,S_IXUSR = 64,S_IRWXU = 448,S_IRGRP = 32,S_IWGRP = 16,S_IXGRP = 8,S_IRWXG = 56,S_IROTH = 4,S_IWOTH = 2,S_IXOTH = 1,S_IRWXO = 7,};
enum MACRO_T {__OFF_T_MATCHES_OFF64_T = 1,__INO_T_MATCHES_INO64_T = 1,};
enum MACRO_X {X_PROTOCOL = 11,X_PROTOCOL_REVISION = 0,};
typedef unsigned __int8 *Pointer;
typedef struct _691123D744001B8BE68B84780CEE447C XChar2b;
typedef struct _XIMText XIMText;
typedef struct _XcmsCCC *XcmsCCC;
typedef struct _DFC468A573BED393F8C22B677D1D24EF XcmsPad;
typedef struct _EBE355A101A506B8BB9BC1A4B6A6F5B0 XcmsRGB;
struct _Client;
typedef unsigned __int64 __dev_t;
typedef unsigned int __gid_t;
typedef unsigned __int64 __ino_t;
typedef int __key_t;
typedef __int64 __off_t;
typedef int __pid_t;
typedef unsigned int __u_int;
typedef unsigned int __uid_t;
struct _fpxreg {unsigned __int16 significand[4];unsigned __int16 exponent;unsigned __int16 padding[3];};
struct aioinit {int aio_threads;int aio_num;int aio_locks;int aio_usedba;int aio_debug;int aio_numusers;int aio_idle_time;int aio_reserved;};
typedef struct atreq atreq_t;
struct bpq_req {int cmd;int speed;int clockmode;int txdelay;unsigned __int8 persist;int slotime;int squeldelay;int dmachan;int irq;};
struct ca_caps {unsigned int slot_num;unsigned int slot_type;unsigned int descr_num;unsigned int descr_type;};
typedef struct _DC91CDF27CF0E1CD3A7D6CD60E761811 cchar_t;
enum desmode {CBC = 0x0,ECB = 0x1,};
typedef char *dirpath;
struct ec_addr {unsigned __int8 station;unsigned __int8 net;};
typedef int error_t;
typedef struct exportnode *exports;
enum fc_rctl {FC_RCTL_DD_UNCAT = 0x0,FC_RCTL_DD_SOL_DATA = 0x1,FC_RCTL_DD_UNSOL_CTL = 0x2,FC_RCTL_DD_SOL_CTL = 0x3,FC_RCTL_DD_UNSOL_DATA = 0x4,FC_RCTL_DD_DATA_DESC = 0x5,FC_RCTL_DD_UNSOL_CMD = 0x6,FC_RCTL_DD_CMD_STATUS = 0x7,FC_RCTL_ELS_REQ = 0x22,FC_RCTL_ELS_REP = 0x23,FC_RCTL_ELS4_REQ = 0x32,FC_RCTL_ELS4_REP = 0x33,FC_RCTL_VFTH = 0x50,FC_RCTL_IFRH = 0x51,FC_RCTL_ENCH = 0x52,FC_RCTL_BA_NOP = 0x80,FC_RCTL_BA_ABTS = 0x81,FC_RCTL_BA_RMC = 0x82,FC_RCTL_BA_ACC = 0x84,FC_RCTL_BA_RJT = 0x85,FC_RCTL_BA_PRMT = 0x86,FC_RCTL_ACK_1 = 0xC0,FC_RCTL_ACK_0 = 0xC1,FC_RCTL_P_RJT = 0xC2,FC_RCTL_F_RJT = 0xC3,FC_RCTL_P_BSY = 0xC4,FC_RCTL_F_BSY = 0xC5,FC_RCTL_F_BSYL = 0xC6,FC_RCTL_LCR = 0xC7,FC_RCTL_END = 0xC9,};
enum fe_caps {FE_IS_STUPID = 0x0,FE_CAN_INVERSION_AUTO = 0x1,FE_CAN_FEC_1_2 = 0x2,FE_CAN_FEC_2_3 = 0x4,FE_CAN_FEC_3_4 = 0x8,FE_CAN_FEC_4_5 = 0x10,FE_CAN_FEC_5_6 = 0x20,FE_CAN_FEC_6_7 = 0x40,FE_CAN_FEC_7_8 = 0x80,FE_CAN_FEC_8_9 = 0x100,FE_CAN_FEC_AUTO = 0x200,FE_CAN_QPSK = 0x400,FE_CAN_QAM_16 = 0x800,FE_CAN_QAM_32 = 0x1000,FE_CAN_QAM_64 = 0x2000,FE_CAN_QAM_128 = 0x4000,FE_CAN_QAM_256 = 0x8000,FE_CAN_QAM_AUTO = 0x10000,FE_CAN_TRANSMISSION_MODE_AUTO = 0x20000,FE_CAN_BANDWIDTH_AUTO = 0x40000,FE_CAN_GUARD_INTERVAL_AUTO = 0x80000,FE_CAN_HIERARCHY_AUTO = 0x100000,FE_CAN_8VSB = 0x200000,FE_CAN_16VSB = 0x400000,FE_HAS_EXTENDED_CAPS = 0x800000,FE_CAN_MULTISTREAM = 0x4000000,FE_CAN_TURBO_FEC = 0x8000000,FE_CAN_2G_MODULATION = 0x10000000,FE_NEEDS_BENDING = 0x20000000,FE_CAN_RECOVER = 0x40000000,FE_CAN_MUTE_TS = 0x80000000,};
enum fe_type {FE_QPSK = 0x0,FE_QAM = 0x1,FE_OFDM = 0x2,FE_ATSC = 0x3,};
typedef char fhandle[32];
typedef float float_t;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsError;
typedef struct _BE90B4AC206CC1F52CC4D15D587652C4 fsRange;
typedef union _12139D15327A66BC6BD2CA276E233382 fsReply;
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
typedef struct _i2o_hrt i2o_hrt;
typedef struct _i2o_lct i2o_lct;
typedef void *iconv_t;
typedef __int16 int16_t;
typedef int int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 io_port;
typedef struct _2979C697EC1DBCBD00D7AAFFAA91F55E jmode_t;
typedef struct __jmp_buf_tag jmp_buf[1];
struct kbdiacr {unsigned __int8 diacr;unsigned __int8 base;unsigned __int8 result;};
struct kbentry {unsigned __int8 kb_table;unsigned __int8 kb_index;unsigned __int16 kb_value;};
typedef struct _AC1F0727205AA235F31FA7E4FBAB6931 lldiv_t;
typedef char *mapname;
typedef unsigned __int64 mmask_t;
struct mq_attr {__int64 mq_flags;__int64 mq_maxmsg;__int64 mq_msgsize;__int64 mq_curmsgs;__int64 __reserved[4];};
struct msginfo {int msgpool;int msgmap;int msgmax;int msgmnb;int msgmni;int msgssz;int msgtql;unsigned __int16 msgseg;};
struct nf_acct;
struct nfs2_fh {char data[32];};
struct nfs3_fh {unsigned __int16 size;unsigned __int8 data[64];};
typedef void *nl_catd;
typedef int nl_item;
typedef void *pointer;
struct pt_regs {unsigned __int64 r15;unsigned __int64 r14;unsigned __int64 r13;unsigned __int64 r12;unsigned __int64 rbp;unsigned __int64 rbx;unsigned __int64 r11;unsigned __int64 r10;unsigned __int64 r9;unsigned __int64 r8;unsigned __int64 rax;unsigned __int64 rcx;unsigned __int64 rdx;unsigned __int64 rsi;unsigned __int64 rdi;unsigned __int64 orig_rax;unsigned __int64 rip;unsigned __int64 cs;unsigned __int64 eflags;unsigned __int64 rsp;unsigned __int64 ss;};
typedef struct re_pattern_buffer regex_t;
struct res_sym {int number;char *name;char *humanname;};
struct ru_utmp {char ut_line[8];char ut_user[8];char ut_host[16];__int64 ut_time;};
typedef __int64 s_reg_t;
struct seminfo {int semmap;int semmni;int semmns;int semmnu;int semmsl;int semopm;int semume;int semusz;int semvmx;int semaem;};
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
struct sm_name {char *mon_name;};
struct sm_stat {int state;};
typedef unsigned int speed_t;
typedef struct sigaltstack stack_t;
typedef unsigned __int8 uint8_t;
typedef unsigned __int16 umode_t;
struct unipair {unsigned __int16 unicode;unsigned __int16 fontpos;};
struct utmparr {struct ru_utmp **uta_arr;int uta_cnt;};
typedef struct _3CB4B96D60588C36FFA558911245B240 uuid_be;
typedef struct _3CB4B96D60588C36FFA558911245B240 uuid_le;
struct vt_mode {char mode;char waitv;__int16 relsig;__int16 acqsig;__int16 frsig;};
struct vt_stat {unsigned __int16 v_active;unsigned __int16 v_signal;unsigned __int16 v_state;};
#define wchar_t int
struct winsize {unsigned __int16 ws_row;unsigned __int16 ws_col;unsigned __int16 ws_xpixel;unsigned __int16 ws_ypixel;};
typedef struct _345FECB84F456AF148A04283FEB93B5B xBigReq;
typedef struct _9E6A7A2F5B8444BF3F540E884EB664C9 xvEvent;
enum zotypes {BOGUS_OBJ = 0x0,NO_OBJ = 0x1,DIRECTORY_OBJ = 0x2,GROUP_OBJ = 0x3,TABLE_OBJ = 0x4,ENTRY_OBJ = 0x5,LINK_OBJ = 0x6,PRIVATE_OBJ = 0x7,NIS_BOGUS_OBJ = 0x0,NIS_NO_OBJ = 0x1,NIS_DIRECTORY_OBJ = 0x2,NIS_GROUP_OBJ = 0x3,NIS_TABLE_OBJ = 0x4,NIS_ENTRY_OBJ = 0x5,NIS_LINK_OBJ = 0x6,NIS_PRIVATE_OBJ = 0x7,};
typedef struct _44E50AEC2878F8A6376C06FA64195504 *BoxPtr;
typedef struct _44E50AEC2878F8A6376C06FA64195504 BoxRec;
typedef unsigned __int16 CARD16;
typedef unsigned int CARD32;
typedef unsigned __int64 CARD64;
typedef struct _F3C08B9B3A2B2160E2DEB46E97A36321 FP3232;
typedef struct _ftsent FTSENT;
typedef struct _1FC9C4745BFE4A4C45A6D008A791D581 HEADER;
typedef __int64 Lmid_t;
typedef struct _AF39247D48CF164753A445931539035C MEVENT;
enum NPmode {NPMODE_PASS = 0x0,NPMODE_DROP = 0x1,NPMODE_ERROR = 0x2,NPMODE_QUEUE = 0x3,};
typedef struct _XRegion REGION;
typedef struct _XRegion *Region;
typedef struct screen SCREEN;
typedef struct _5342985482DA4551756A03BE632E6931 Screen;
typedef unsigned __int16 SizeID;
typedef struct _D33AAE3110C188617B7959564922C41D Visual;
typedef struct _win_st WINDOW;
typedef struct _6A1E68C5A198D57F5F76A65BA6AE762A XColor;
typedef union _XEvent XEvent;
typedef struct _XImage XImage;
typedef struct _13C78DD7EDF1CF1C4AE9B0D54E891AA2 XPoint;
struct _ENTRY;
typedef struct _IO_FILE __FILE;
typedef unsigned int __id_t;
struct _fpreg {unsigned __int16 significand[4];unsigned __int16 exponent;};
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
struct arphdr {unsigned __int16 ar_hrd;unsigned __int16 ar_pro;unsigned __int8 ar_hln;unsigned __int8 ar_pln;unsigned __int16 ar_op;};
typedef int bool_t;
struct buf_nr {unsigned int min;unsigned int init;unsigned int max;};
struct ca_msg {unsigned int index;unsigned int type;unsigned int length;unsigned __int8 msg[256];};
struct ca_pid {unsigned int pid;int index;};
typedef unsigned __int64 chtype;
enum desdir {ENCRYPT = 0x0,DECRYPT = 0x1,};
typedef int enum_t;
typedef struct _B4ED38EDC55356A7E931AC6DC9C0CA0A fd_set;
typedef struct _B91A488201B9E841F1A5B4B4EA09BBDD fenv_t;
typedef struct _768514BAAACF268575EBDB64572D2040 glob_t;
typedef __int64 greg_t;
typedef struct groupnode *groups;
typedef char int8_t;
typedef char keybuf[48];
typedef struct _5EDD4B4F882E321F07D8AFF023DDDD7D keydat;
typedef struct _AC1F0727205AA235F31FA7E4FBAB6931 ldiv_t;
struct linger {int l_onoff;int l_linger;};
typedef unsigned __int16 mifi_t;
struct mntent {char *mnt_fsname;char *mnt_dir;char *mnt_type;char *mnt_opts;int mnt_freq;int mnt_passno;};
typedef unsigned __int64 nfds_t;
typedef struct __ns_msg ns_msg;
enum nstype {UNKNOWN = 0x0,NIS = 0x1,SUNYP = 0x2,IVY = 0x3,DNS = 0x4,X500 = 0x5,DNANS = 0x6,XCHS = 0x7,CDS = 0x8,};
struct option {const char *name;int has_arg;int *flag;int val;};
struct pollfd {int fd;__int16 events;__int16 revents;};
struct rpcent {char *r_name;char **r_aliases;int r_number;};
struct rtattr {unsigned __int16 rta_len;unsigned __int16 rta_type;};
struct screen;
struct sembuf {unsigned __int16 sem_num;__int16 sem_op;__int16 sem_flg;};
union sigval {int sival_int;void *sival_ptr;};
typedef unsigned __int64 size_t;
struct status {char *mon_name;int state;char priv[16];};
struct tc_cnt {int refcnt;int bindcnt;};
struct tcamsg {unsigned __int8 tca_family;unsigned __int8 tca__pad1;unsigned __int16 tca__pad2;};
struct termio {unsigned __int16 c_iflag;unsigned __int16 c_oflag;unsigned __int16 c_cflag;unsigned __int16 c_lflag;unsigned __int8 c_line;unsigned __int8 c_cc[8];};
struct ttyent {char *ty_name;char *ty_getty;char *ty_type;int ty_status;char *ty_window;char *ty_comment;};
typedef unsigned __int16 ushort;
typedef struct _0D364CBB4DE5622667695AC90920144B valdat;
typedef unsigned __int16 vifi_t;
struct vtimes {int vm_utime;int vm_stime;unsigned int vm_idsrss;unsigned int vm_ixrss;int vm_maxrss;int vm_majflt;int vm_minflt;int vm_nswap;int vm_inblk;int vm_oublk;};
typedef unsigned int wint_t;
typedef struct _3B00234C5998E2ECB70FFF97A8C8B026 xDepth;
typedef struct _2A2BB2E6A1A637B547E2DF81ADC3376A xError;
typedef struct _xEvent xEvent;
typedef struct _3BEEF239534EE9E2D4AD58999E56F197 xGEReq;
typedef struct _xPoint xPoint;
typedef union _B20031452D9C70A13D819C8DDA3A0BA9 xReply;
enum xdr_op {XDR_ENCODE = 0x0,XDR_DECODE = 0x1,XDR_FREE = 0x2,};
typedef struct _149F28F052847359C6CBD46BA265755A yp_buf;
enum ypstat {YP_TRUE = 0x1,YP_NOMORE = 0x2,YP_FALSE = 0x0,YP_NOMAP = 0xFFFFFFFF,YP_NODOM = 0xFFFFFFFE,YP_NOKEY = 0xFFFFFFFD,YP_BADOP = 0xFFFFFFFC,YP_BADDB = 0xFFFFFFFB,YP_YPERR = 0xFFFFFFFA,YP_BADARGS = 0xFFFFFFF9,YP_VERS = 0xFFFFFFF8,};
typedef unsigned __int8 CARD8;
typedef struct _470449F8043B0E95436C3AE3811CEA11 Depth;
typedef struct entry ENTRY;
typedef struct fieldnode FIELD;
typedef __int16 INT16;
typedef int INT32;
typedef __int64 INT64;
typedef struct panel PANEL;
typedef struct xauth Xauth;
typedef struct _648B167E5FE8430EFE8E72D1CD79C82D _PAGE;
typedef signed __int16 __s16;
typedef signed int __s32;
typedef signed __int64 __s64;
typedef unsigned __int16 __u16;
typedef unsigned int __u32;
typedef unsigned __int64 __u64;
struct alias {const char *from;const char *to;const char *source;};
typedef struct _979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct entry {char *key;void *data;};
typedef struct _F0D1009415F4F398C0AA24385D596C1B fsReq;
struct fstab {char *fs_spec;char *fs_file;char *fs_vfstype;char *fs_mntops;const char *fs_type;int fs_freq;int fs_passno;};
struct gaicb {const char *ar_name;const char *ar_service;const struct addrinfo *ar_request;struct addrinfo *ar_result;int __return;int __unused[5];};
struct iattr;
struct ifmap {unsigned __int64 mem_start;unsigned __int64 mem_end;unsigned __int16 base_addr;unsigned __int8 irq;unsigned __int8 dma;unsigned __int8 port;};
struct inode;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;char int_p_cs_precedes;char int_p_sep_by_space;char int_n_cs_precedes;char int_n_sep_by_space;char int_p_sign_posn;char int_n_sign_posn;};
struct mtpos {__int64 mt_blkno;};
struct my_id {char *my_name;int my_prog;int my_vers;int my_proc;};
typedef struct __ns_rr ns_rr;
typedef nis_object *obj_p;
struct qelem {struct qelem *q_forw;struct qelem *q_back;char q_data[1];};
struct rtmsg {unsigned __int8 rtm_family;unsigned __int8 rtm_dst_len;unsigned __int8 rtm_src_len;unsigned __int8 rtm_tos;unsigned __int8 rtm_table;unsigned __int8 rtm_protocol;unsigned __int8 rtm_scope;unsigned __int8 rtm_type;unsigned int rtm_flags;};
typedef union _0C72A33DA16A3FF6F4A3A372A725953A sem_t;
struct token {char *tk_name;int tk_valnumber;char *tk_valstring;};
typedef unsigned __int64 ulong;
struct vring {unsigned int num;struct vring_desc *desc;struct vring_avail *avail;struct vring_used *used;};
typedef struct _95C51ACBAA3B94C874709B766C465057 xTrap;
struct xauth {unsigned __int16 family;unsigned __int16 address_length;char *address;unsigned __int16 number_length;char *number;unsigned __int16 name_length;char *name;unsigned __int16 data_length;char *data;};
typedef unsigned __int64 Atom;
typedef int Bool;
typedef struct _IO_FILE FILE;
typedef struct formnode FORM;
typedef unsigned __int64 FSID;
typedef signed __int8 INT8;
typedef struct tagITEM ITEM;
typedef struct tagMENU MENU;
typedef unsigned __int64 Mask;
typedef struct _0C41D669CC7829CF12B135747142967F TEXT;
typedef unsigned __int64 Time;
typedef struct _3ACF1F82BEC6DEE83FE33E625399BBD7 XArc;
struct __bb {__int64 zero_word;const char *filename;__int64 *counts;__int64 ncounts;struct __bb *next;const unsigned __int64 *addresses;};
typedef signed __int8 __s8;
typedef unsigned __int8 __u8;
typedef unsigned __int8 cc_t;
struct exec {unsigned __int64 a_info;unsigned int a_text;unsigned int a_data;unsigned int a_bss;unsigned int a_syms;unsigned int a_entry;unsigned int a_trsize;unsigned int a_drsize;};
struct ldat;
struct mtop {__int16 mt_op;int mt_count;};
typedef char *name;
struct pmap {unsigned __int64 pm_prog;unsigned __int64 pm_vers;unsigned __int64 pm_prot;unsigned __int64 pm_port;};
struct sgrp {char *sg_namp;char *sg_passwd;char **sg_adm;char **sg_mem;};
struct spwd {char *sp_namp;char *sp_pwdp;__int64 sp_lstchg;__int64 sp_min;__int64 sp_max;__int64 sp_warn;__int64 sp_inact;__int64 sp_expire;unsigned __int64 sp_flag;};
typedef unsigned int uint;
typedef struct _xArc xArc;
typedef struct _xReq xReq;
typedef struct _CBA5F02AFFC4EA4A3305BB276E7E8CDE xrgb;
typedef struct _44E50AEC2878F8A6376C06FA64195504 BOX;
typedef struct _44E50AEC2878F8A6376C06FA64195504 Box;
typedef struct __dirstream DIR;
struct Elf;
typedef struct _271D5A48EF70FFAE3A8D1DC7505162EA FTS;
struct FTW {int base;int level;};
typedef struct _XIC *XIC;
typedef unsigned __int64 XID;
typedef struct _XIM *XIM;
typedef struct _XOC *XOC;
typedef struct _XOM *XOM;
enum res {stat_succ = 0x0,stat_fail = 0x1,};
typedef unsigned int u32;
typedef unsigned __int64 u64;
typedef struct _XGC *GC;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;__int64 tm_gmtoff;const char *tm_zone;};
struct btrfs_ioctl_vol_args_v2___0E1BBE3C4D92C29D6483496511BFB0E5___97070D54DF9902B037972BD3BA33C07B {__u64 size;struct btrfs_qgroup_inherit *qgroup_inherit;};
struct snd_seq_queue_timer___3C9D4FA6EACDE415FCF2F668B28F5C6D___D2D61BAD79E4054FA57FCFB656984E98 {struct snd_timer_id id;unsigned int resolution;};
struct __attribute__((packed)) usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B___2571549C4A7486545CEF5C221FD27B39 {__u8 DeviceRemovable[4];__u8 PortPwrCtrlMask[4];};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___16150796182201030812428BD2F4D48E {__u64 identity_tag;__u64 reserved;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5D4484EFAC362B9C4E377EE9D3C2BA2F {__u64 wwid;__u64 lun;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___67AFCD26D9906A14E8CE0368700EBABB {__u64 reserved1;__u64 reserved2;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___835C5C2F1D39D04DA38329CAD2148D35 {__u64 eui;__u64 reserved;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___A8715AB24EE22E2A929A76D7931F76D0 {__u64 serial_number;__u64 reserved;};
struct __attribute__((packed)) edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___CCD79EED25FBA0A6EB1729EB5401A8B9 {__u64 reserved;};
struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___0A024C9A9BA58F0A63BD780E6C8FAD05 {__u32 ah;__u32 remote_qpn;__u32 remote_qkey;__u32 reserved;};
struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___090D2B91546D13E6DEEAE2B35DAA114F {__u32 card;__u32 device;__u32 subdevice;};
struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___4AD0A116567558B22CFABFC49C5FFE0A {__u32 major;__u32 minor;};
struct xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E___3F36A97FCC75B2C3787A521E6B8B77EF {__u32 every;__u32 packet;__u32 count;};
struct xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E___EE820D7A7447C58C4FD6EEB80D72CED7 {__u32 probability;};
struct kvm_ioapic_state___DD5945FC8609333C0DC47555F67F1F87___22B2FEED7AAD3155BA3FE7D4BF196114 {__u8 vector;unsigned __int8 delivery_mode : 3;unsigned __int8 dest_mode : 1;unsigned __int8 delivery_status : 1;unsigned __int8 polarity : 1;unsigned __int8 remote_irr : 1;unsigned __int8 trig_mode : 1;unsigned __int8 mask : 1;unsigned __int8 reserve : 7;__u8 reserved[4];__u8 dest_id;};
struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___CA6086BB8AC19E5B352F0637E4160722 {__u32 data[16];};
struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___EBC2A1B437D5ACA45358D03849DB19E5 {__u64 pts;};
struct v4l2_encoder_cmd___52D6E5497D79C1B4EFA05317CEE49696___6499AC71176CBE4D887BAA80F7F1110D {__u32 data[8];};
struct fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4___9AE2B409811208BBEC845B39EFD02679 {__u8 drive_number;__u8 state;__u8 signature;__u8 vol_id[4];__u8 vol_label[11];__u8 fs_type[8];};
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___245BDAF14406869F855F2314AA540EA2 {uint64_t add;uint64_t nocarry_mask;};
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___92D3420542E1CF2B3B5BFC49E99E7277 {uint64_t compare;uint64_t swap;uint64_t compare_mask;uint64_t swap_mask;};
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___A59A4479E68D84CE19315FC94EF5BECC {uint64_t add;};
struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___E133F9469844536D4848E7460598F6BA {uint64_t compare;uint64_t swap;};
struct xt_entry_target___47536B2923186FE397875189D0BFAE98___FB47B6E93E27087F0FEB5CEECBFB98BB {__u16 target_size;struct xt_target *target;};
struct xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718___E8D3D8264EBDE8DDA40BE8682F61E36C {__u16 match_size;struct xt_match *match;};
struct xt_string_info___C39E5CEE57601962F961C038F8A50B86___C70A73FBCF83193366EABA9582FA4B4D {__u8 flags;};
struct xt_string_info___C39E5CEE57601962F961C038F8A50B86___D243FA1A6B620F6FE40A610B1BA3DAB2 {__u8 invert;};
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___1AAAF31CDB477A122FA4B8DB27C17EE4 {__u8 type;};
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___4F2B88AF6086A93C20CDE0CF8C7B9238 {__u32 connection_id;char volume[16];};
struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___F08C5679DFE1125AD1988C42E32336AC {__u8 type;__u8 service;};
struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___CA6086BB8AC19E5B352F0637E4160722 {__u32 data[16];};
struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___EBC2A1B437D5ACA45358D03849DB19E5 {__u64 pts;};
struct hdspm_status___9A4D23CEA97C8F2269F11F81D9BD27E8___9F98F9191317024E22BFFFB63D520E77 {uint8_t sync_wc;uint8_t sync_madi;uint8_t sync_tco;uint8_t sync_in;uint8_t madi_input;uint8_t channel_format;uint8_t frame_format;};
struct irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD___F507A81B129D990840BB4B6C65CE09C4 {unsigned __int16 len;__u8 octet_seq[1024];};
struct irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD___FD3F387589D8DBAF03E7F59401F513FD {__u8 len;__u8 charset;__u8 string[256];};
union COFF_auxent___8BBA864C406C799E487F50DA03CFED8B___B43E3C95070E5A6C461F1A8FACE73978 {struct COFF_auxent______B43E3C95070E5A6C461F1A8FACE73978___DD24CBB9BDA2635ADD0C8F5B2B6C0707 x_lnsz;char x_fsize[4];};
struct __res_state___E19F19286CA79C25813C29B2F37D7904___9F1FBFA3B280393606EA65BB64E9684F {u_int16_t nscount;u_int16_t nsmap[3];int nssocks[3];u_int16_t nscount6;u_int16_t nsinit;struct sockaddr_in6 *nsaddrs[3];unsigned int _initstamp[2];};
struct rta_session___D973AC1711B483EC871F326B7831CCB7___9B3C115401ADAEEEC088EE222696ABF6 {__u16 sport;__u16 dport;};
struct xt_ecn_info___96739E9C55C04822E8C6EA3C08F21247___845FF427DB7004B7E89C377EFD0F9017 {__u8 ect;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A___5875BC7EBFDF39B43C4D68A641A956DA {__u32 err;};
struct phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7___79F9F606AEF972467561C7C3244F0049 {__u8 pn_submsg_id;__u8 pn_data[5];};
struct sigevent___4FA236EFE1337B09F044CA22D4984BE4___24DBCF560A8F0BCF4BC9504FE41525CE {void (*_function)(sigval_t);pthread_attr_t *_attribute;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0782806FB5FEE125636C30F93EC424E5 {CARD32 pad00;CARD32 time;CARD32 owner;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___210E680417EC90CA260E4854A6751754 {CARD32 pad00;CARD32 parent;CARD32 window;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___3F936A3A9A06092B5B70BD26A7DFD789 {CARD32 pad00;CARD32 event;CARD32 window;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___9E59406F0409BDE74EEED2CE1F683A76 {CARD32 pad00;CARD32 time;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___B56843D1A807D13D0FEC0C0069626892 {CARD32 pad00;CARD32 time;CARD32 window;CARD32 atom;};
struct icmphdr___44B9F435D952314818895718F3518D16___6EE1EE5693408D5F1EEE7E152919407C {u_int16_t id;u_int16_t sequence;};
struct icmphdr___44B9F435D952314818895718F3518D16___FAA42A1B1B50669B023341484BA7B095 {u_int16_t __unused;u_int16_t mtu;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___0D41B3811F015B06FF7F97F1123DECB6 {__u64 nr;__u64 ret;__u64 args[9];};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8C611F25D4ACBFD17F2D17F4C0FF238C {__u32 epr;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___A1B67C45776BD8EF9064084D47210D40 {__u64 hardware_exit_reason;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___A9751E5CD96116865FFC28C49DDEBD33 {__u64 hardware_entry_failure_reason;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___E359DA8D54736DEF55DE0FF520F1219C {__u64 gprs[32];};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___EDA0495B17FF03E79A1AEDDCBD8E1B5C {__u32 exception;__u32 error_code;};
struct __attribute__((packed)) tftphdr___F0E260BA94295889B6F0F49F83AB5E48___9DF8B9116CFCAEDEA835550C8A86965C {__attribute__((packed)) union tftphdr______9DF8B9116CFCAEDEA835550C8A86965C___45C12AF7FE255FC44175B22DB1DFFF77 th_u3;char tu_data[];};
struct icmp___EEC48C5976A17953B310258F40698883___18EAF2C5161535AE6831887B3FEB9817 {u_int32_t its_otime;u_int32_t its_rtime;u_int32_t its_ttime;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___F43D85AC31CEBD8CC07B08111ABDF065 {int si_tid;int si_overrun;sigval_t si_sigval;};
struct _6105F69743B5F4DC3D2725A2474E8E7A___226E8492299A9657BCCDB2FD50B1B3D8 {__jmp_buf __cancel_jmp_buf;int __mask_was_saved;};
union _E8B6B3D679DDF9A2A9F1E31A29349D07___E20C8C1B4A7C82F1CEEE602013DD1F57 {uint64_t a_val;};
union _F9E7774477A9727B3397D0BE30B022B2___9A662A763779714768031DA711D3415F {uint32_t a_val;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__coredump_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__ptrace_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;__kernel_pid_t tracer_pid;__kernel_pid_t tracer_tgid;};
union proc_event_____id_proc_event___709BA8BF96562A3C1103B79568DD6831 {__u32 euid;__u32 egid;};
union proc_event_____id_proc_event___7E5CB78A3BF3DAEBB3EE71E5C1A8F53E {__u32 ruid;__u32 rgid;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__comm_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;char comm[16];};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__exec_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__fork_proc_event {__kernel_pid_t parent_pid;__kernel_pid_t parent_tgid;__kernel_pid_t child_pid;__kernel_pid_t child_tgid;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__sid_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;};
union _XIMStringConversionText___DE48A4CD3A06187C4ACE99002CF90FB4 {char *mbs;wchar_t *wcs;};
union kvm_assigned_pci_dev___46ACB1F2FA2487EC224C9DB07A2A3B2E {__u32 reserved[11];};
union snd_seq_queue_timer___3C9D4FA6EACDE415FCF2F668B28F5C6D {struct snd_seq_queue_timer___3C9D4FA6EACDE415FCF2F668B28F5C6D___D2D61BAD79E4054FA57FCFB656984E98 alsa;};
struct fc_bsg_ctels_reply___D358A143548AB973F1CBBF682DE7DAAF {uint8_t action;uint8_t reason_code;uint8_t reason_explanation;uint8_t vendor_unique;};
struct _955F1759725876F7F898C71A8A4DCDA3____pthread_mutex_s {int __lock;unsigned int __count;int __owner;unsigned int __nusers;int __kind;int __spins;__pthread_list_t __list;};
struct _SCSI3Addr_struct___8CB8CA02CCA8FA2CB0393D22371E4F6E {__u8 Dev;unsigned __int8 Bus : 6;unsigned __int8 Mode : 2;};
struct _SCSI3Addr_struct___FA627A8FBA596FD3BD82259322F441D8 {__u8 DevLSB;unsigned __int8 DevMSB : 6;unsigned __int8 Mode : 2;};
union ib_uverbs_send_wr___3DB9C648727C4FF416E200CBAEEA3871 {__u32 imm_data;__u32 invalidate_rkey;};
struct xcb_xkb_get_kbd_by_name_replies_client_symbols_map_t {xcb_xkb_key_type_t *types_rtrn;xcb_xkb_key_sym_map_t *syms_rtrn;uint8_t *acts_rtrn_count;xcb_xkb_action_t *acts_rtrn_acts;xcb_xkb_set_behavior_t *behaviors_rtrn;uint8_t *vmods_rtrn;xcb_xkb_set_explicit_t *explicit_rtrn;xcb_xkb_key_mod_map_t *modmap_rtrn;xcb_xkb_key_v_mod_map_t *vmodmap_rtrn;};
struct xcb_xkb_get_kbd_by_name_replies_server_symbols_map_t {xcb_xkb_key_type_t *types_rtrn;xcb_xkb_key_sym_map_t *syms_rtrn;uint8_t *acts_rtrn_count;xcb_xkb_action_t *acts_rtrn_acts;xcb_xkb_set_behavior_t *behaviors_rtrn;uint8_t *vmods_rtrn;xcb_xkb_set_explicit_t *explicit_rtrn;xcb_xkb_key_mod_map_t *modmap_rtrn;xcb_xkb_key_v_mod_map_t *vmodmap_rtrn;};
struct xt_connbytes_info___7751BED587E51DB2A173CBFFFE6F548E {__attribute__((aligned(8))) __u64 from;__attribute__((aligned(8))) __u64 to;};
union kvm_assigned_irq___290E15ACA7FF071DF6EF2EB627B02119 {__u32 reserved[12];};
union v4l2_encoder_cmd___52D6E5497D79C1B4EFA05317CEE49696 {struct v4l2_encoder_cmd___52D6E5497D79C1B4EFA05317CEE49696___6499AC71176CBE4D887BAA80F7F1110D raw;};
struct kvm_vcpu_events___23BE99AFA671DB58DC2BAA381F92428C {__u8 injected;__u8 nr;__u8 soft;__u8 shadow;};
struct kvm_vcpu_events___59E0C1196A233DB3DDF4599083599B26 {__u8 injected;__u8 pending;__u8 masked;__u8 pad;};
struct sockaddr_atmsvc___28FFA2D832CE4CF9061331F52341A4DE {unsigned __int8 prv[20];char pub[13];char lij_type;__u32 lij_id;};
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_idseq {u_int16_t icd_id;u_int16_t icd_seq;};
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_pmtu {u_int16_t ipm_void;u_int16_t ipm_nextmtu;};
union kvm_dirty_log___2B14A28C4DCCD1DA7D9F0B5F8695D8BE {void *dirty_bitmap;__u64 padding2;};
union baycom_ioctl___F7F4D081547B704FD9326E93E92455B8 {struct baycom_debug_data dbg;};
struct etheraddress___DC2CBD42B28FE4DE7724D288168FAA30 {__u8 dne_hiord[4];__u8 dne_nodeaddr[2];};
union hdspm_status___9A4D23CEA97C8F2269F11F81D9BD27E8 {struct hdspm_status___9A4D23CEA97C8F2269F11F81D9BD27E8___9F98F9191317024E22BFFFB63D520E77 madi;};
union ib_uverbs_wc___3DB9C648727C4FF416E200CBAEEA3871 {__u32 imm_data;__u32 invalidate_rkey;};
union td_event_msg___93B01EC8B2A37DE149D5B3F5BB1472F3 {uintptr_t data;};
union COFF_auxent___A007460A5209B8A49642556855958EDD {char x_fname[14];struct COFF_auxent___A007460A5209B8A49642556855958EDD___269C1D88824C4EBB14FAA70E77D8D034 x_n;};
union COFF_syment___012205A2FD59DD97F518116F0BCD0B1F {char e_name[8];struct COFF_syment___012205A2FD59DD97F518116F0BCD0B1F___83545BEAD29F54571CFA44BED0AC2C0D e;};
union __res_state___E19F19286CA79C25813C29B2F37D7904 {char pad[52];struct __res_state___E19F19286CA79C25813C29B2F37D7904___9F1FBFA3B280393606EA65BB64E9684F _ext;};
union video_event___67F2EB9310C2BF96BF5213AE56F4A830 {video_size_t size;unsigned int frame_rate;unsigned __int8 vsync_field;};
union xt_ecn_info___96739E9C55C04822E8C6EA3C08F21247 {struct xt_ecn_info___96739E9C55C04822E8C6EA3C08F21247___845FF427DB7004B7E89C377EFD0F9017 tcp;};
union bp_address___3B940BBAFE206A608BBBF7EC1987BA49 {ip_addr_t ip_addr;};
union shaperconf___47AAC6CDC41711CE8CC9377BCA1EA0FF {char ssu_name[14];u_int32_t ssu_speed;};
union sigcontext___828E61C1A573428F501E0B4A68357797 {struct _fpstate *fpstate;__uint64_t __fpstate_word;};
struct _XDisplay___40E717ABED307E15FC65B9096F5C7074 {XPointer defaultCCCs;XPointer clientCmaps;XPointer perVisualIntensityMaps;};
struct des_block___8E96D37FBE99CA069DD91238980BB651 {u_int32_t high;u_int32_t low;};
union td_notify___143F0EF771439D241AFD6E8AB1506B64 {psaddr_t bptaddr;int syscallno;};
union _XIMText___8281806D2C2C5E9220BA18F83AF5F330 {char *multi_byte;wchar_t *wide_char;};
union atm_blli___0572EE5627218739C843F51EF75EFA8A {struct atm_blli___0572EE5627218739C843F51EF75EFA8A___BA7E10FCB28575EA7EE39DE7BC7A718D itu;unsigned __int8 user;};
union fhstatus___5A86E21E7BD06EF982D138486E7C27D0 {fhandle fhs_fhandle;};
struct xcb_xkb_get_kbd_by_name_replies_types_map_t {xcb_xkb_key_type_t *types_rtrn;xcb_xkb_key_sym_map_t *syms_rtrn;uint8_t *acts_rtrn_count;xcb_xkb_action_t *acts_rtrn_acts;xcb_xkb_set_behavior_t *behaviors_rtrn;uint8_t *vmods_rtrn;xcb_xkb_set_explicit_t *explicit_rtrn;xcb_xkb_key_mod_map_t *modmap_rtrn;xcb_xkb_key_v_mod_map_t *vmodmap_rtrn;};
union arc_cap___693039C66FBA5C91E273DA0B47DDAEBD {__u8 ack;__u8 raw[];};
union kvm_run___F43018F8AEE5B5844153EFD33BC1C430 {struct kvm_sync_regs regs;char padding[1024];};
union __attribute__((packed)) tftphdr___F0E260BA94295889B6F0F49F83AB5E48 {char tu_padding[3];__attribute__((packed)) struct tftphdr___F0E260BA94295889B6F0F49F83AB5E48___9DF8B9116CFCAEDEA835550C8A86965C th_u2;char tu_stuff[];};
union ifconf___6BFF7D1955055D26BF83C89630184638 {__caddr_t ifcu_buf;struct ifreq *ifcu_req;};
union rusage___053CCAE027B5BFCB43679F38B0BBAFFB {__int64 ru_inblock;__syscall_slong_t __ru_inblock_word;};
union rusage___1358501C97B7AC417CB67978351D7ED8 {__int64 ru_minflt;__syscall_slong_t __ru_minflt_word;};
union rusage___2C815BBF04E92D15CDB4A45E8AD3A3E5 {__int64 ru_nvcsw;__syscall_slong_t __ru_nvcsw_word;};
union rusage___3B4947AE73BD84433438D8F38CADF7D5 {__int64 ru_nivcsw;__syscall_slong_t __ru_nivcsw_word;};
union rusage___432FF46A9027D949EED7182447443219 {__int64 ru_ixrss;__syscall_slong_t __ru_ixrss_word;};
union rusage___5B25822D21B23C62AAC800B59197C0E9 {__int64 ru_msgsnd;__syscall_slong_t __ru_msgsnd_word;};
union rusage___9F5E3C17DD7C53B5A698FB11C246C70B {__int64 ru_oublock;__syscall_slong_t __ru_oublock_word;};
union rusage___BE0BA0CA85EE8DDDB4C2D45E2D812E33 {__int64 ru_majflt;__syscall_slong_t __ru_majflt_word;};
union rusage___C0F0170E03C25EB818136FFBEB1A4400 {__int64 ru_nswap;__syscall_slong_t __ru_nswap_word;};
union rusage___C564AC21F6E5BE8C627FEDECB4652ACF {__int64 ru_msgrcv;__syscall_slong_t __ru_msgrcv_word;};
union rusage___C83E8E9C9ADD361154E0D8EBED847957 {__int64 ru_nsignals;__syscall_slong_t __ru_nsignals_word;};
union rusage___C8E0368DFE215138D5FE989391EDF66A {__int64 ru_maxrss;__syscall_slong_t __ru_maxrss_word;};
union rusage___D61F8409E13EA6E11D92C6D9757A1531 {__int64 ru_isrss;__syscall_slong_t __ru_isrss_word;};
union rusage___E7EE59A34ECBA4FFAE4E24E03E23B031 {__int64 ru_idrss;__syscall_slong_t __ru_idrss_word;};
struct utmpx___4FC64FD635E0E5C6E29ADA80B3E686D5 {__int32_t tv_sec;__int32_t tv_usec;};
struct xcb_xkb_permament_radio_group_behavior_t {uint8_t type;uint8_t group;};
struct __attribute__((packed)) uac_format_type_i_continuous_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bFormatType;__u8 bNrChannels;__u8 bSubframeSize;__u8 bBitResolution;__u8 bSamFreqType;__u8 tLowerSamFreq[3];__u8 tUpperSamFreq[3];};
struct utmp___D1644BFB760C8D02595F7CD5DC7921A3 {int32_t tv_sec;int32_t tv_usec;};
struct xcb_xkb_permament_overlay_2_behavior_t {uint8_t type;uint8_t key;};
struct btrfs_ioctl_dev_replace_status_params {__u64 replace_state;__u64 progress_1000;__u64 time_started;__u64 time_stopped;__u64 num_write_errors;__u64 num_uncorrectable_read_errors;};
struct __attribute__((packed)) uac_format_type_i_discrete_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bFormatType;__u8 bNrChannels;__u8 bSubframeSize;__u8 bBitResolution;__u8 bSamFreqType;__u8 tSamFreq[][3];};
struct _XIMPreeditStateNotifyCallbackStruct {XIMPreeditState state;};
struct ib_uverbs_create_comp_channel_resp {__u32 fd;};
struct _0187150EB0144696EE5998F276804071 {CARD8 offset;CARD8 diff;};
struct _048EDDC221AC6C2316AA6C5DA748547D {CARD16 x_resolution;CARD16 y_resolution;CARD16 point_size;};
struct _0782F5328933DE790EA437AB6F909CFD {CARD32 window;};
struct _095E04B97CE84C59083222C7D172F70D {__int64 flags;int x;int y;int width;int height;int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;struct _095E04B97CE84C59083222C7D172F70D___CDF557A927ED2BFF93B09908D4EFCA76 min_aspect;struct _095E04B97CE84C59083222C7D172F70D___CDF557A927ED2BFF93B09908D4EFCA76 max_aspect;int base_width;int base_height;int win_gravity;};
struct _0B4ED8A417FCECA210AD3881277BFA25 {INT32 x;INT32 y;};
struct _0C21A611EFF1A0A24872DDA75B66705A {CARD8 c_class;CARD8 event_type_base;};
struct _0CA5FB17303BD72ED823DD36CD7B7A7D {CARD32 visual;CARD32 format;};
struct _10D33281027157B4990D02C2868FA96A {char name[10];char phone[32];int outgoing;};
struct _18A7FF309BE85B010DF59BF700116658 {__cpu_mask __bits[16];};
struct __attribute__((packed)) _1A38A2B7DACF749A0F420E169943E110 {__u16 v16;};
union _1C4035FDEAFFF0FCE26E66A96F6BBEB4 {struct _1C4035FDEAFFF0FCE26E66A96F6BBEB4___20EFCB5FAA72B851457C6BAA266EC02E __data;char __size[48];__int64 __align;};
struct _1C989109A1E2AFEC30347169F1D74F63 {XcmsFloat u_prime;XcmsFloat v_prime;XcmsFloat Y;};
struct __attribute__((packed)) _2979C697EC1DBCBD00D7AAFFAA91F55E {__u32 m;};
struct _29CF6037BDB08BCCAAEBB0F049E81934 {CARD32 nDepth;CARD32 fallback;};
struct _2A4E2A3E6DCC7FD4DDF34506A216CCE0 {INT32 l;INT32 r;INT32 y;};
struct _2DDFDD5DD8CD88FDBBE41C4BA29EE9C7 {unsigned int num_blocks;XID context_id;void *privData;__int16 *blocks;};
struct _2E0E2C12F04118C9E52BAE749EE378FF {XExtData *ext_data;int depth;int bits_per_pixel;int scanline_pad;};
struct _2E734CDD133C90FA8809C11E24CF40CD {int type;unsigned __int64 serial;int send_event;Display *display;int extension;int evtype;};
struct _2F57F65BEC0740F2386441D498F16321 {uint16_t type;uint16_t length;uint16_t sourceid;uint16_t num_keycodes;};
struct _34E3615AA1F5E404F43F7626305BA1D6 {XID surface_id;XID context_id;int surface_type_id;unsigned __int16 width;unsigned __int16 height;void *privData;};
struct __attribute__((packed)) _37808375AC776F173FF34D4AD244857E {__u32 v32;};
struct _389F741C4688F992C1DDC28AB9B68F46 {XcmsFloat red;XcmsFloat green;XcmsFloat blue;};
struct _3CB4B96D60588C36FFA558911245B240 {__u8 b[16];};
struct _3D2747B906FBDDB46B196214774699C1 {CARD32 clientResource;CARD32 nRanges;};
struct _3DDB46D984C469553E00D9B3BEA3349C {XcmsFloat x;XcmsFloat y;XcmsFloat Y;};
struct _3E84D1386F10E26A4E3E4F22FDD3C8B8 {int num_font;XFontStruct **font_struct_list;char **font_name_list;};
struct _3FAE0D239BF72F1C4090C29672BF8F72 {char magic[2];char vstamp[2];char tsize[4];char dsize[4];char bsize[4];char entry[4];char text_start[4];char data_start[4];};
struct _4543C93AEA47F6ED8C90F8F964657E96 {CARD32 num_offsets;CARD32 data_len;};
struct _45DCCDFC0525EE913BAEBC241F6FB2DF {CARD32 name;CARD32 value;};
struct _470449F8043B0E95436C3AE3811CEA11 {int depth;int nvisuals;Visual *visuals;};
struct _48974C792553FBFA318CEC22C625F222 {unsigned int size;XPointer addr;};
struct _4BB2E57EB8074CF4622278B169F475B1 {uint32_t base_mods;uint32_t latched_mods;uint32_t locked_mods;uint32_t effective_mods;};
struct _4C6601BAE3B7FB7226E40FC6ABCCD221 {CARD32 resource_base;CARD32 resource_mask;};
struct _4CAA9B0307CCA9BCFEBCF54A65F793DC {size_t gl_pathc;char **gl_pathv;size_t gl_offs;int gl_flags;void (*gl_closedir)(void *);struct dirent64 *(*gl_readdir)(void *);void *(*gl_opendir)(const char *);int (*gl_lstat)(const char *, struct stat64 *);int (*gl_stat)(const char *, struct stat64 *);};
struct _50157A8979FD42735599E52566CAF2B0 {int type;unsigned __int64 serial;int send_event;Display *display;int extension;int evtype;unsigned int cookie;void *data;};
struct _58058F4C4926147A1BF935BBE1E04307 {Time time;__int16 x;__int16 y;};
struct _5CE23C12CE680B06D74E0C7033A4C5D0 {CARD32 n;};
struct _5EC6E86656B6684A0C8370E4CB53DCE1 {CARD16 red;CARD16 green;CARD16 blue;CARD16 alpha;};
struct __attribute__((aligned(16))) _6105F69743B5F4DC3D2725A2474E8E7A {struct _6105F69743B5F4DC3D2725A2474E8E7A___226E8492299A9657BCCDB2FD50B1B3D8 __cancel_jmp_buf[1];void *__pad[4];};
struct _6136D91980F3ED417B16959F6289782F {CARD32 metrics;};
struct _6313E54CC161B7E5C4F7C30B4DF21654 {CARD8 low;CARD8 high;};
struct _64419251F3172C7227A52AC30EAD3C9D {int max_keypermod;KeyCode *modifiermap;};
struct _6BA9BAD34CD581FCA2A7610248080448 {XRectangle max_ink_extent;XRectangle max_logical_extent;};
struct _6CDBBC56673808DBC2DA2091B1C251E0 {XcmsFloat X;XcmsFloat Y;XcmsFloat Z;};
struct _768514BAAACF268575EBDB64572D2040 {size_t gl_pathc;char **gl_pathv;size_t gl_offs;int gl_flags;void (*gl_closedir)(void *);struct dirent *(*gl_readdir)(void *);void *(*gl_opendir)(const char *);int (*gl_lstat)(const char *, struct stat *);int (*gl_stat)(const char *, struct stat *);};
struct _7F79EDEFC3CE5D4824B190E83A46D022 {INT32 numerator;INT32 denominator;};
union __attribute__((aligned(16))) _8172E892401C380D352F1B0F85477F39 {La_x86_64_xmm xmm[4];};
struct _87651D9D31681607819E457EB5237059 {CARD8 c_class;CARD8 length;CARD8 num_valuators;CARD8 mode;};
struct _8BC4543EF695142B249D7CC5D558FED0 {CARD32 cursor;CARD32 delay;};
struct _8F523C6F05AE02FCAAA5D62A1D3E087B {CARD32 attachment;CARD32 name;CARD32 pitch;CARD32 cpp;CARD32 flags;};
struct _9411444C71E1E75572D5F3D9F74657B9 {uint8_t base_group;uint8_t latched_group;uint8_t locked_group;uint8_t effective_group;};
union _955F1759725876F7F898C71A8A4DCDA3 {struct _955F1759725876F7F898C71A8A4DCDA3____pthread_mutex_s __data;char __size[40];__int64 __align;};
struct _95A1135F6D8D8F6471E320B5C82E7B21 {uint16_t type;uint16_t length;uint16_t deviceid;uint16_t pad;};
struct _95C51ACBAA3B94C874709B766C465057 {xSpanFix top;xSpanFix bot;};
struct _991DB0B5CB0892F70B164889AA9E2739 {CARD16 first;CARD16 last;};
struct _9C224668B7E64BE6AE9499E6FD772938 {char *chars;int nchars;int delta;XFontSet font_set;};
struct _9DBA678C3E373C7A30D5EC7DD13ED3FC {CARD16 red;CARD16 redMask;CARD16 green;CARD16 greenMask;CARD16 blue;CARD16 blueMask;CARD16 alpha;CARD16 alphaMask;};
struct _A0997E1460B127CFD45B0CF477ECACD8 {uint16_t type;uint16_t length;uint16_t deviceid;uint16_t new_master;};
struct _A64E5FDBC99443F3D6ECB2BCB6D30607 {unsigned __int8 *value;Atom encoding;int format;unsigned __int64 nitems;};
struct _AAE8A52A0C0419608DDD9DF8462D9921 {uint16_t type;uint16_t length;uint16_t sourceid;uint16_t num_buttons;};
union _AEC512E533A23DF0E4E7770B7D3B7341 {struct _AEC512E533A23DF0E4E7770B7D3B7341___D894E3326F078364D3B6CBCD0A540AF0 __data;char __size[56];__int64 __align;};
struct _AF39247D48CF164753A445931539035C {__int16 id;int x;int y;int z;mmask_t bstate;};
struct _B1F3B1E8AC6C76EBFB982A13A87B6D55 {INT32 matrix11;INT32 matrix12;INT32 matrix13;INT32 matrix21;INT32 matrix22;INT32 matrix23;INT32 matrix31;INT32 matrix32;INT32 matrix33;};
struct _B4DBE4004D983CDD99352ECA92D175EF {xPointFixed p1;xPointFixed p2;};
struct _B4ED38EDC55356A7E931AC6DC9C0CA0A {__fd_mask fds_bits[16];};
struct _BD619B2F7AFF7BA6F06506AA27210664 {regoff_t rm_so;regoff_t rm_eo;};
struct _BE873DF30A0F36F7B74D63F54E76D60A {CARD16 widthInPixels;CARD16 heightInPixels;CARD16 widthInMillimeters;CARD16 heightInMillimeters;};
struct _BE90B4AC206CC1F52CC4D15D587652C4 {CARD8 min_char_high;CARD8 min_char_low;CARD8 max_char_high;CARD8 max_char_low;};
struct _C0A8173FD3695D4670457D810A0436B3 {XID subpicture_id;XID context_id;int xvimage_id;unsigned __int16 width;unsigned __int16 height;int num_palette_entries;int entry_bytes;char component_order[4];void *privData;};
struct _C4AF4D457027AFDE6D53E29D5E02871C {CARD32 resource_type;CARD32 count;};
struct _C8091AD492510FDF271EFEA57BB3787D {xPointFixed p1;xPointFixed p2;xPointFixed p3;};
struct _C95899C55C523B7B6DD91187BD37B39A {uint16_t type;uint16_t length;};
struct _CBA5F02AFFC4EA4A3305BB276E7E8CDE {CARD16 red;CARD16 green;CARD16 blue;CARD16 pad;};
struct _CCAEDA52B750854C25441FD25B4DA915 {XcmsFloat L_star;XcmsFloat a_star;XcmsFloat b_star;};
struct _CE866585EA90BEF8E1777B84F5242003 {CARD8 high;CARD8 low;};
struct _D484A87E94E3DD0BB42E942E2185E2EE {XcmsFloat H;XcmsFloat V;XcmsFloat C;};
struct _DB64A8459715AF3CEFE23597C08B5967 {CARD16 control;CARD16 length;};
struct _DBF1C752AC6FF12C0FE21B58BD0D2479 {char name[10];char master[10];char slave[10];char eaz[256];char drvid[25];int onhtime;int charge;int l2_proto;int l3_proto;int p_encap;int exclusive;int dialmax;int slavedelay;int cbdelay;int chargehup;int ihup;int secure;int callback;int cbhup;int pppbind;int chargeint;int triggercps;int dialtimeout;int dialwait;int dialmode;};
struct _DCF698E6B500C8966BB9EAE5B50075E1 {unsigned int table_size;const HashValue *table_data;HashValue (*hash_of)(const char *);int (*compare_names)(const char *, const char *);};
struct _DD1A60F664AD301361B26C5800787B5E {unsigned __int16 count_styles;XIMStyle *supported_styles;};
struct _DFC468A573BED393F8C22B677D1D24EF {XcmsFloat pad0;XcmsFloat pad1;XcmsFloat pad2;XcmsFloat pad3;};
struct _E1260AB78985DBC228459590506E4C92 {size_t we_wordc;char **we_wordv;size_t we_offs;};
struct _E38CC4C8385B7649E275253761B49FA9 {Atom name;unsigned __int64 card32;};
struct _E9F5FE92D7DB981290475B0A784F5155 {int __count;union _E9F5FE92D7DB981290475B0A784F5155___BADCA52C29225A708D9C0115E5B974AC __value;};
struct _EBA61ABD6EAEDF513D00140FC4172EAC {Dwarf_Bool check_verbose_mode;};
struct _ECC0E2C5AD5080F3204655729300624A {CARD32 position;CARD32 length;};
struct _ED8D04F85EE8AAEAC5043F9A38E051F9 {char month[3];char day[3];char hour[3];char min[3];int numlen;char number[11];int namelen;char name[80];};
struct _F2C3184CEEDD49A7FB665043E59AF1F0 {XcmsFloat L_star;XcmsFloat u_star;XcmsFloat v_star;};
struct _F5409A53EFE8E3D243CC0647BA303F63 {uint16_t deviceid;uint16_t mask_len;};
struct _F9A11BF5FCA53245437FD040CE8F0807 {CARD8 first;CARD8 last;};
struct _FED2578BDF2A9AA68C400E8DB47E2B4E {uint16_t type;uint16_t length;uint16_t sourceid;uint16_t pad;};
typedef xRRGetScreenResourcesReply xRRGetScreenResourcesCurrentReply;
struct xcb_xkb_permament_lock_behavior_t {uint8_t type;uint8_t pad0;};
struct __attribute__((packed)) uac_format_type_i_ext_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bFormatType;__u8 bSubslotSize;__u8 bBitResolution;__u8 bHeaderLength;__u8 bControlSize;__u8 bSideBandProtocol;};
struct openvpn_plugin_args_open_return {int type_mask;openvpn_plugin_handle_t *handle;struct openvpn_plugin_string_list **return_list;};
typedef xRRGetScreenResourcesReq xRRGetScreenResourcesCurrentReq;
struct btrfs_ioctl_qgroup_assign_args {__u64 assign;__u64 src;__u64 dst;};
struct btrfs_ioctl_qgroup_create_args {__u64 create;__u64 qgroupid;};
struct __attribute__((packed)) usb_interface_assoc_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bFirstInterface;__u8 bInterfaceCount;__u8 bFunctionClass;__u8 bFunctionSubClass;__u8 bFunctionProtocol;__u8 iFunction;};
struct __attribute__((packed)) usb_ss_container_id_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDevCapabilityType;__u8 bReserved;__u8 ContainerID[16];};
typedef xXIBarrierEvent xXIBarrierPointerReleasedEvent;
struct xcb_x_print_string8_iterator_t {xcb_x_print_string8_t *data;int rem;int index;};
struct xcb_xkb_radio_group_behavior_t {uint8_t type;uint8_t group;};
struct _XIMPreeditDrawCallbackStruct {int caret;int chg_first;int chg_length;XIMText *text;};
struct btrfs_ioctl_quota_rescan_args {__u64 flags;__u64 progress;__u64 reserved[6];};
struct ib_uverbs_create_comp_channel {__u64 response;};
struct __attribute__((packed)) usb_cdc_network_terminal_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bEntityId;__u8 iName;__u8 bChannelIndex;__u8 bPhysicalInterface;};
struct __attribute__((packed)) uvc_color_matching_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bColorPrimaries;__u8 bTransferCharacteristics;__u8 bMatrixCoefficients;};
struct __attribute__((packed)) uvc_extension_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bUnitID;__u8 guidExtensionCode[16];__u8 bNumControls;__u8 bNrInPins;__u8 baSourceID[];__u8 bControlSize;__u8 bmControls[];__u8 iExtension;};
struct Dwarf_Obj_Access_Interface_s {void *object;const Dwarf_Obj_Access_Methods *methods;};
struct btrfs_ioctl_logical_ino_args {__u64 logical;__u64 size;__u64 reserved[4];__u64 inodes;};
struct ib_uverbs_post_srq_recv_resp {__u32 bad_wr;};
typedef int printf_arginfo_size_function(const struct printf_info *info, size_t n, int *argtypes, int *size);
struct __attribute__((packed)) uac_selector_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bUintID;__u8 bNrInPins;__u8 baSourceID[];};
struct __attribute__((packed)) usb_cdc_call_mgmt_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bmCapabilities;__u8 bDataInterface;};
struct __attribute__((packed)) uvc_selector_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bUnitID;__u8 bNrInPins;__u8 baSourceID[];__u8 iSelector;};
struct xcb_input_input_class_info_t {uint8_t class_id;uint8_t event_type_base;};
struct xcb_xkb_overlay_2_behavior_t {uint8_t type;uint8_t key;};
struct xcb_xkb_sa_device_valuator_t {uint8_t type;uint8_t device;uint8_t val1what;uint8_t val1index;uint8_t val1value;uint8_t val2what;uint8_t val2index;uint8_t val2value;};
struct xcb_xkb_sa_lock_device_btn_t {uint8_t type;uint8_t flags;uint8_t pad0;uint8_t button;uint8_t device;};
struct fuse_notify_poll_wakeup_out {uint64_t kh;};
struct fw_cdev_receive_phy_packets {__u64 closure;};
struct omap3isp_prev_update_config {__u32 update;__u32 flag;__u32 shading_shift;struct omap3isp_prev_luma *luma;struct omap3isp_prev_hmed *hmed;struct omap3isp_prev_cfa *cfa;struct omap3isp_prev_csup *csup;struct omap3isp_prev_wbal *wbal;struct omap3isp_prev_blkadj *blkadj;struct omap3isp_prev_rgbtorgb *rgb2rgb;struct omap3isp_prev_csc *csc;struct omap3isp_prev_yclimit *yclimit;struct omap3isp_prev_dcor *dcor;struct omap3isp_prev_nf *nf;struct omap3isp_prev_gtables *gamma;};
struct openvpn_plugin_args_func_in {const int type;const char **const argv;const char **const envp;openvpn_plugin_handle_t handle;void *per_client_context;int __current_cert_depth_disabled;void *__current_cert_disabled;};
struct __attribute__((packed)) uac_feature_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bUnitID;__u8 bSourceID;__u8 bControlSize;__u8 bmaControls[];};
struct __attribute__((packed)) usb_midi_in_jack_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bJackType;__u8 bJackID;__u8 iJack;};
struct v4l2_subdev_frame_size_enum {__u32 index;__u32 pad;__u32 code;__u32 min_width;__u32 max_width;__u32 min_height;__u32 max_height;__u32 reserved[9];};
typedef uint8_t xcb_record_element_header_t;
struct xcb_xf86dri_drm_clip_rect_t {int16_t x1;int16_t y1;int16_t x2;int16_t x3;};
struct xcb_xkb_sa_action_message_t {uint8_t type;uint8_t flags;uint8_t message[6];};
struct btrfs_ioctl_quota_ctl_args {__u64 cmd;__u64 status;};
struct ethtool_get_features_block {__u32 available;__u32 requested;__u32 active;__u32 never_changed;};
struct ethtool_set_features_block {__u32 valid;__u32 requested;};
struct fw_cdev_initiate_bus_reset {__u32 type;};
struct ib_ucm_sidr_rep_event_resp {__u32 status;__u32 qkey;__u32 qpn;};
struct ib_uverbs_destroy_srq_resp {__u32 events_reported;};
struct ib_uverbs_get_context_resp {__u32 async_fd;__u32 num_comp_vectors;};
typedef enum _5A59040AF89DFE914D292934EBD3DDFE openvpn_plugin_log_flags_t;
struct __attribute__((packed)) usb_ms_endpoint_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bNumEmbMIDIJack;__u8 baAssocJackID[];};
struct v4l2_subdev_mbus_code_enum {__u32 pad;__u32 index;__u32 code;__u32 reserved[9];};
struct xcb_glx_float32_iterator_t {xcb_glx_float32_t *data;int rem;int index;};
struct xcb_glx_float64_iterator_t {xcb_glx_float64_t *data;int rem;int index;};
struct xcb_input_valuator_state_t {uint8_t class_id;uint8_t len;uint8_t num_valuators;uint8_t mode;};
struct xcb_xkb_counted_string_8_t {uint8_t length;};
struct xcb_xkb_default_behavior_t {uint8_t type;uint8_t pad0;};
struct xcb_xkb_sa_lock_controls_t {uint8_t type;uint8_t pad0[3];uint8_t boolCtrlsHigh;uint8_t boolCtrlsLow;uint8_t pad1[2];};
struct xcb_xkb_string8_iterator_t {xcb_xkb_string8_t *data;int rem;int index;};
struct xt_connsecmark_target_info {__u8 mode;};
struct xt_tcpoptstrip_target_info {__u32 strip_bmap[8];};
struct __attribute__((aligned(8))) __kernel_sockaddr_storage {__kernel_sa_family_t ss_family;char __data[126];};
struct btrfs_ioctl_get_dev_stats {__u64 devid;__u64 nr_items;__u64 flags;__u64 values[5];__u64 unused[121];};
struct btrfs_ioctl_ino_path_args {__u64 inum;__u64 size;__u64 reserved[4];__u64 fspath;};
struct fw_cdev_remove_descriptor {__u32 handle;};
struct ib_uverbs_comp_event_desc {__u64 cq_handle;};
struct ib_uverbs_create_srq_resp {__u32 srq_handle;__u32 max_wr;__u32 max_sge;__u32 srqn;};
struct ib_uverbs_destroy_cq_resp {__u32 comp_events_reported;__u32 async_events_reported;};
struct ib_uverbs_destroy_qp_resp {__u32 events_reported;};
struct __attribute__((packed)) uac_mixer_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bUnitID;__u8 bNrInPins;__u8 baSourceID[];};
struct __attribute__((packed)) usb_encryption_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bEncryptionType;__u8 bEncryptionValue;__u8 bAuthKeyIndex;};
struct vfio_iommu_spapr_tce_info {__u32 argsz;__u32 flags;__u32 dma32_window_start;__u32 dma32_window_size;};
struct xcb_keymap_notify_event_t {uint8_t response_type;uint8_t keys[31];};
struct xcb_randr_refresh_rates_t {uint16_t nRates;};
struct xcb_render_directformat_t {uint16_t red_shift;uint16_t red_mask;uint16_t green_shift;uint16_t green_mask;uint16_t blue_shift;uint16_t blue_mask;uint16_t alpha_shift;uint16_t alpha_mask;};
typedef uint16_t xcb_xkb_bell_class_spec_t;
struct xcb_xkb_common_behavior_t {uint8_t type;uint8_t data;};
struct xcb_xkb_sa_lock_ptr_btn_t {uint8_t type;uint8_t flags;uint8_t pad0;uint8_t button;uint8_t pad1[4];};
struct xcb_xkb_sa_set_controls_t {uint8_t type;uint8_t pad0[3];uint8_t boolCtrlsHigh;uint8_t boolCtrlsLow;uint8_t pad1[2];};
struct __user_cap_header_struct {__u32 version;int pid;};
struct fc_bsg_host_vendor_reply {uint32_t vendor_rsp[];};
struct hiddev_string_descriptor {__s32 index;char value[256];};
struct ib_uverbs_create_ah_resp {__u32 ah_handle;};
struct ib_uverbs_create_cq_resp {__u32 cq_handle;__u32 cqe;};
struct ib_uverbs_create_qp_resp {__u32 qp_handle;__u32 qpn;__u32 max_send_wr;__u32 max_recv_wr;__u32 max_send_sge;__u32 max_recv_sge;__u32 max_inline_data;__u32 reserved;};
struct ib_uverbs_open_xrcd_resp {__u32 xrcd_handle;};
struct ib_uverbs_post_recv_resp {__u32 bad_wr;};
struct ib_uverbs_post_send_resp {__u32 bad_wr;};
struct ib_uverbs_query_srq_resp {__u32 max_wr;__u32 max_sge;__u32 srq_limit;__u32 reserved;};
struct omapfb_update_window_old {__u32 x;__u32 y;__u32 width;__u32 height;__u32 format;};
struct reiserfs_security_handle {char *name;void *value;size_t length;};
struct __attribute__((packed)) usb_cdc_mdlm_detail_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bGuidDescriptorType;__u8 bDetailData[];};
struct __attribute__((packed)) usb_interface_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bInterfaceNumber;__u8 bAlternateSetting;__u8 bNumEndpoints;__u8 bInterfaceClass;__u8 bInterfaceSubClass;__u8 bInterfaceProtocol;__u8 iInterface;};
typedef xLbxPolyPointReq xLbxPolyFillRectangleReq;
typedef xSetMappingReply xSetModifierMappingReply;
struct xcb_dri2_attach_format_t {uint32_t attachment;uint32_t format;};
struct xcb_input_button_state_t {uint8_t class_id;uint8_t len;uint8_t num_buttons;uint8_t pad0;uint8_t buttons[32];};
struct xcb_input_device_state_t {uint16_t control_id;uint16_t len;};
typedef uint32_t xcb_record_client_spec_t;
typedef uint16_t xcb_xkb_led_class_spec_t;
struct xcb_xkb_set_map_values_t {xcb_xkb_set_key_type_t *types;xcb_xkb_key_sym_map_t *syms;uint8_t *actionsCount;xcb_xkb_action_t *actions;xcb_xkb_set_behavior_t *behaviors;uint8_t *vmods;xcb_xkb_set_explicit_t *explicit;xcb_xkb_key_mod_map_t *modmap;xcb_xkb_key_v_mod_map_t *vmodmap;};
struct Dwarf_Relocation_Data_s {unsigned __int8 drd_type;unsigned __int8 drd_length;Dwarf_Unsigned drd_offset;Dwarf_Unsigned drd_symbol_index;};
typedef int (*__gconv_trans_query_fct)(const char *, const char ***, size_t *);
typedef __io_close_fn cookie_close_function_t;
typedef enum fe_spectral_inversion fe_spectral_inversion_t;
typedef fsCatalogueChangeNotifyEvent fsFontChangeNotifyEvent;
typedef fsListFontsReq fsListFontsWithXInfoReq;
struct ib_uverbs_alloc_mw_resp {__u32 mw_handle;__u32 rkey;};
struct ib_uverbs_alloc_pd_resp {__u32 pd_handle;};
struct ib_uverbs_req_notify_cq {__u32 cq_handle;__u32 solicited_only;};
struct kvm_irq_routing_irqchip {__u32 irqchip;__u32 pin;};
struct mdp_device_descriptor_s {__u32 number;__u32 major;__u32 minor;__u32 raid_disk;__u32 state;__u32 reserved[27];};
typedef int printf_arginfo_function(const struct printf_info *info, size_t n, int *argtypes);
struct __attribute__((packed)) uvc_format_uncompressed {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bFormatIndex;__u8 bNumFrameDescriptors;__u8 guidFormat[16];__u8 bBitsPerPixel;__u8 bDefaultFrameIndex;__u8 bAspectRatioX;__u8 bAspectRatioY;__u8 bmInterfaceFlags;__u8 bCopyProtect;};
struct v4l2_event_subscription {__u32 type;__u32 id;__u32 flags;__u32 reserved[5];};
struct __attribute__((packed)) v4l2_mpeg_vbi_itv0_line {__u8 id;__u8 data[42];};
typedef xSetMappingReply xSetPointerMappingReply;
typedef uint32_t xcb_input_event_class_t;
struct xcb_input_input_state_t {uint8_t class_id;uint8_t len;uint8_t num_items;};
struct xcb_randr_screen_size_t {uint16_t width;uint16_t height;uint16_t mwidth;uint16_t mheight;};
typedef uint32_t xcb_render_pictformat_t;
struct xcb_xkb_lock_behavior_t {uint8_t type;uint8_t pad0;};
struct xcb_xkb_sa_device_btn_t {uint8_t type;uint8_t flags;uint8_t count;uint8_t button;uint8_t device;uint8_t pad0[3];};
struct xcb_xkb_sa_latch_mods_t {uint8_t type;uint8_t flags;uint8_t mask;uint8_t realMods;uint8_t vmodsHigh;uint8_t vmodsLow;uint8_t pad0[2];};
struct xt_classify_target_info {__u32 priority;};
struct __user_cap_data_struct {__u32 effective;__u32 permitted;__u32 inheritable;};
struct _cciss_pci_info_struct {unsigned __int8 bus;unsigned __int8 dev_fn;unsigned __int16 domain;__u32 board_id;};
struct _xkbOverlayKeyWireDesc {CARD8 over[4];CARD8 under[4];};
typedef enum _0EB787AF809256D3196903C0524521CB audio_channel_select_t;
struct avmb1_loadandconfigdef {int contr;avmb1_t4file t4file;avmb1_t4file t4config;};
struct btrfs_balance_progress {__u64 expected;__u64 considered;__u64 completed;};
struct btrfs_ioctl_space_info {__u64 flags;__u64 total_bytes;__u64 used_bytes;};
struct dvb_diseqc_slave_reply {__u8 msg[4];__u8 msg_len;int timeout;};
struct dvd_host_send_rpcstate {__u8 type;__u8 pdrc;};
typedef fsQueryXBitmaps8Reply fsQueryXBitmaps16Reply;
typedef fsQueryXExtents8Reply fsQueryXExtents16Reply;
struct hiddev_collection_info {__u32 index;__u32 type;__u32 usage;__u32 level;};
struct ib_ucm_destroy_id_resp {__u32 events_reported;};
struct ib_uverbs_query_device {__u64 response;__u64 driver_data[];};
struct omap3isp_prev_rgbtorgb {__u16 matrix[3][3];__u16 offset[3];};
struct snd_seq_port_subscribe {struct snd_seq_addr sender;struct snd_seq_addr dest;unsigned int voices;unsigned int flags;unsigned __int8 queue;unsigned __int8 pad[3];char reserved[64];};
struct __attribute__((packed)) usb_cdc_acm_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bmCapabilities;};
struct __attribute__((packed)) usb_connection_context {__u8 CHID[16];__u8 CDID[16];__u8 CK[16];};
struct xcb_dri2_dri2_buffer_t {uint32_t attachment;uint32_t name;uint32_t pitch;uint32_t cpp;uint32_t flags;};
struct xcb_input_device_ctl_t {uint16_t control_id;uint16_t len;};
struct xcb_input_input_info_t {uint8_t class_id;uint8_t len;};
typedef uint32_t xcb_x_print_pcontext_t;
struct xcb_xkb_sa_lock_mods_t {uint8_t type;uint8_t flags;uint8_t mask;uint8_t realMods;uint8_t vmodsHigh;uint8_t vmodsLow;uint8_t pad0[2];};
struct xcb_xkb_sa_no_action_t {uint8_t type;uint8_t pad0[7];};
struct xcb_xkb_sa_terminate_t {uint8_t type;uint8_t pad0[7];};
typedef int (*Dwarf_Callback_Func_b)(char *, int, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned *, int *);
typedef int (*Dwarf_Callback_Func_c)(char *, int, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned *, void *, int *);
struct Dwarf_P_String_Attr_s {Dwarf_Unsigned sa_offset;Dwarf_Unsigned sa_nbytes;};
struct _cciss_coalint_struct {__u32 delay;__u32 count;};
typedef enum _71B13CE70739FD517E3E251777789B61 audio_stream_source_t;
struct ax25_route_opt_struct {ax25_address port_addr;ax25_address dest_addr;int cmd;int arg;};
typedef _IO_cookie_io_functions_t cookie_io_functions_t;
struct dvb_diseqc_master_cmd {__u8 msg[6];__u8 msg_len;};
struct fc_bsg_host_add_rport {uint8_t reserved;uint8_t port_id[3];};
struct fc_bsg_host_del_rport {uint8_t reserved;uint8_t port_id[3];};
typedef fsResourceReq fsSetAuthorizationReq;
struct fsl_hv_ioctl_doorbell {__u32 ret;__u32 doorbell;};
struct gnet_stats_rate_est64 {__u64 bps;__u64 pps;};
struct ib_ucm_apr_event_resp {__u32 status;};
struct ib_ucm_create_id_resp {__u32 id;};
struct ib_ucm_mra_event_resp {__u8 timeout;__u8 reserved[3];};
struct ib_ucm_rej_event_resp {__u32 reason;};
struct ib_uverbs_get_context {__u64 response;__u64 driver_data[];};
struct ib_uverbs_reg_mr_resp {__u32 mr_handle;__u32 lkey;__u32 rkey;};
struct ifla_vlan_qos_mapping {__u32 from;__u32 to;};
struct kvm_ppc_one_page_size {__u32 page_shift;__u32 pte_enc;};
struct kvm_s390_ucas_mapping {__u64 user_addr;__u64 vcpu_addr;__u64 length;};
struct matroxioc_output_mode {__u32 output;__u32 mode;};
struct __attribute__((packed)) nfulnl_msg_config_cmd {__u8 command;};
struct omap3isp_prev_gtables {__u32 red[1024];__u32 green[1024];__u32 blue[1024];};
struct omap3isp_prev_yclimit {__u8 minC;__u8 maxC;__u8 minY;__u8 maxY;};
struct snd_compressed_buffer {__u32 fragment_size;__u32 fragments;};
struct __attribute__((packed)) usb_descriptor_header {__u8 bLength;__u8 bDescriptorType;};
struct __attribute__((packed)) uvc_descriptor_header {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;};
struct v4l2_event_frame_sync {__u32 frame_sequence;};
struct v4l2_frmsize_discrete {__u32 width;__u32 height;};
struct v4l2_frmsize_stepwise {__u32 min_width;__u32 max_width;__u32 step_width;__u32 min_height;__u32 max_height;__u32 step_height;};
typedef enum _08EBBBEE0290DB92B78419976688149A video_displayformat_t;
typedef enum _23629B6518A96341E28EAD3ADC141DC6 video_stream_source_t;
typedef xListFontsReq xListFontsWithInfoReq;
typedef xPolySegmentReq xPolyFillRectangleReq;
typedef uint32_t xcb_glx_context_tag_t;
struct xcb_input_key_state_t {uint8_t class_id;uint8_t len;uint8_t num_keys;uint8_t pad0;uint8_t keys[32];};
struct xcb_record_range_16_t {uint16_t first;uint16_t last;};
typedef uint32_t xcb_render_glyphset_t;
struct xcb_x_print_printer_t {uint32_t nameLen;uint32_t descLen;};
typedef uint16_t xcb_xkb_device_spec_t;
struct xcb_xkb_get_map_map_t {xcb_xkb_key_type_t *types_rtrn;xcb_xkb_key_sym_map_t *syms_rtrn;uint8_t *acts_rtrn_count;xcb_xkb_action_t *acts_rtrn_acts;xcb_xkb_set_behavior_t *behaviors_rtrn;uint8_t *vmods_rtrn;xcb_xkb_set_explicit_t *explicit_rtrn;xcb_xkb_key_mod_map_t *modmap_rtrn;xcb_xkb_key_v_mod_map_t *vmodmap_rtrn;};
struct xcb_xkb_overlay_key_t {xcb_xkb_string8_t over[4];xcb_xkb_string8_t under[4];};
struct xcb_xkb_overlay_row_t {uint8_t rowUnder;uint8_t nKeys;uint8_t pad0[2];};
struct xcb_xkb_sa_set_mods_t {uint8_t type;uint8_t flags;uint8_t mask;uint8_t realMods;uint8_t vmodsHigh;uint8_t vmodsLow;uint8_t pad0[2];};
typedef uint32_t xcb_xvmc_subpicture_t;
struct xfrm_replay_state_esn {unsigned int bmp_len;__u32 oseq;__u32 seq;__u32 oseq_hi;__u32 seq_hi;__u32 replay_window;__u32 bmp[];};
struct xt_cluster_match_info {__u32 total_nodes;__u32 node_mask;__u32 hash_seed;__u32 flags;};
typedef XButtonEvent XButtonReleasedEvent;
typedef __kernel_long_t __kernel_suseconds_t;
struct _xkbBehaviorWireDesc {CARD8 key;CARD8 type;CARD8 data;CARD8 pad;};
struct btrfs_scrub_progress {__u64 data_extents_scrubbed;__u64 tree_extents_scrubbed;__u64 data_bytes_scrubbed;__u64 tree_bytes_scrubbed;__u64 read_errors;__u64 csum_errors;__u64 verify_errors;__u64 no_csum;__u64 csum_discards;__u64 super_errors;__u64 malloc_errors;__u64 uncorrectable_errors;__u64 corrected_errors;__u64 last_physical;__u64 unverified_errors;};
struct capi_register_params {__u32 level3cnt;__u32 datablkcnt;__u32 datablklen;};
struct dvd_lu_send_rpcstate {unsigned __int8 type : 2;unsigned __int8 vra : 3;unsigned __int8 ucca : 3;__u8 region_mask;__u8 rpc_scheme;};
typedef enum fe_delivery_system fe_delivery_system_t;
typedef fsQueryXBitmaps8Req fsQueryXBitmaps16Req;
typedef fsQueryXExtents8Req fsQueryXExtents16Req;
struct fsl_hv_ioctl_restart {__u32 ret;__u32 partition;};
struct fuse_batch_forget_in {uint32_t count;uint32_t dummy;};
struct ib_uverbs_close_xrcd {__u32 xrcd_handle;};
struct ib_uverbs_dealloc_mw {__u32 mw_handle;};
struct ib_uverbs_dealloc_pd {__u32 pd_handle;};
struct ib_uverbs_destroy_ah {__u32 ah_handle;};
struct ip6t_ipv6header_info {__u8 matchflags;__u8 invflags;__u8 modeflag;};
struct __attribute__((packed)) iso_directory_record {char length[1];char ext_attr_length[1];char extent[8];char size[8];char date[7];char flags[1];char file_unit_size[1];char interleave[1];char volume_sequence_number[4];unsigned __int8 name_len[1];char name[];};
struct kvm_guest_debug_arch {__u64 debugreg[8];};
struct kvm_reinject_control {__u8 pit_reinject;__u8 reserved[31];};
struct kvm_user_trace_setup {__u32 buf_size;__u32 buf_nr;};
struct omap3isp_ccdc_blcomp {__u8 b_mg;__u8 gb_g;__u8 gr_cy;__u8 r_ye;};
struct omap3isp_hist_region {__u16 h_start;__u16 h_end;__u16 v_start;__u16 v_end;};
struct omap3isp_prev_blkadj {__u8 red;__u8 green;__u8 blue;};
struct omapfb_update_window {__u32 x;__u32 y;__u32 width;__u32 height;__u32 format;__u32 out_x;__u32 out_y;__u32 out_width;__u32 out_height;__u32 reserved[8];};
typedef enum _72B551E940A86C568035BFB29737DF70 parport_device_class;
struct sctp_event_subscribe {__u8 sctp_data_io_event;__u8 sctp_association_event;__u8 sctp_address_event;__u8 sctp_send_failure_event;__u8 sctp_peer_error_event;__u8 sctp_shutdown_event;__u8 sctp_partial_delivery_event;__u8 sctp_adaptation_layer_event;__u8 sctp_authentication_event;__u8 sctp_sender_dry_event;};
struct selnl_msg_policyload {__u32 seqno;};
struct selnl_msg_setenforce {__s32 val;};
struct snd_pcm_mmap_control {snd_pcm_uframes_t appl_ptr;snd_pcm_uframes_t avail_min;};
struct snd_sb_csp_microcode {struct snd_sb_csp_mc_header info;unsigned __int8 data[12288];};
struct soundfont_voice_info {unsigned __int16 sf_id;unsigned __int16 sample;int start;int end;int loopstart;int loopend;__int16 rate_offset;unsigned __int16 mode;__int16 root;__int16 tune;unsigned __int8 low;unsigned __int8 high;unsigned __int8 vellow;unsigned __int8 velhigh;signed __int8 fixkey;signed __int8 fixvel;signed __int8 pan;signed __int8 fixpan;__int16 exclusiveClass;unsigned __int8 amplitude;unsigned __int8 attenuation;__int16 scaleTuning;struct soundfont_voice_parm parm;unsigned __int16 sample_mode;};
struct tc_fq_codel_qd_stats {__u32 maxpacket;__u32 drop_overlimit;__u32 ecn_mark;__u32 new_flow_count;__u32 new_flows_len;__u32 old_flows_len;};
struct __attribute__((packed)) usb_debug_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDebugInEndpoint;__u8 bDebugOutEndpoint;};
struct v4l2_jpegcompression {int quality;int APPn;int APP_len;char APP_data[60];int COM_len;char COM_data[60];__u32 jpeg_markers;};
typedef xChangeModeReq xForceScreenSaverReq;
typedef xLbxPolyPointReq xLbxPolyRectangleReq;
typedef xChangeModeReq xSetAccessControlReq;
typedef xChangeModeReq xSetCloseDownModeReq;
typedef xXIBarrierEvent xXIBarrierLeaveEvent;
typedef uint8_t xcb_input_key_code_t;
typedef uint32_t xcb_record_context_t;
struct xcb_record_range_8_t {uint8_t first;uint8_t last;};
typedef uint32_t xcb_render_picture_t;
struct xcb_xkb_sa_ptr_btn_t {uint8_t type;uint8_t flags;uint8_t count;uint8_t button;uint8_t pad0[4];};
struct xt_nfacct_match_info {char name[32];struct nf_acct *nfacct;};
struct xt_u32_value_element {__u32 min;__u32 max;};
typedef int (*Dwarf_Callback_Func)(char *, int, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, int *, int *);
typedef CARD32 *RecordClientSpecPtr;
typedef XButtonEvent XButtonPressedEvent;
typedef int (*XcmsParseStringProc)(char *, XcmsColor *);
struct _PhysDevAddr_struct {unsigned __int32 TargetId : 24;unsigned __int32 Bus : 6;unsigned __int32 Mode : 2;SCSI3Addr_struct Target[2];};
typedef enum _BDF88968CAE1EA74E42809B9AE857E7C _Unwind_Reason_Code;
struct _XResResourceIdSpec {CARD32 resource;CARD32 type;};
struct _XkbIndicatorDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;unsigned __int16 shape_ndx;unsigned __int16 on_color_ndx;unsigned __int16 off_color_ndx;};
struct _XkbIndicatorMapRec {unsigned __int8 flags;unsigned __int8 which_groups;unsigned __int8 groups;unsigned __int8 which_mods;XkbModsRec mods;unsigned int ctrls;};
typedef enum __rlimit_resource __rlimit_resource_t;
struct ax25_bpqaddr_struct {char dev[16];ax25_address addr;};
typedef enum fe_guard_interval fe_guard_interval_t;
struct floppy_drive_params {signed __int8 cmos;unsigned __int64 max_dtr;unsigned __int64 hlt;unsigned __int64 hut;unsigned __int64 srt;unsigned __int64 spinup;unsigned __int64 spindown;unsigned __int8 spindown_offset;unsigned __int8 select_delay;unsigned __int8 rps;unsigned __int8 tracks;unsigned __int64 timeout;unsigned __int8 interleave_sect;struct floppy_max_errors max_errors;char flags;char read_track;__int16 autodetect[8];int checkfreq;int native_format;};
typedef fsReq fsListExtensionsReq;
struct fsl_hv_ioctl_status {__u32 ret;__u32 partition;__u32 status;};
struct gnet_stats_rate_est {__u32 bps;__u32 pps;};
struct i2c_rdwr_ioctl_data {struct i2c_msg *msgs;__u32 nmsgs;};
struct kvm_arm_device_addr {__u64 id;__u64 addr;};
struct kvm_irq_routing_msi {__u32 address_lo;__u32 address_hi;__u32 data;__u32 pad;};
typedef enum __ns_update_operation ns_update_operation;
struct omap3isp_h3a_af_hmf {__u8 enable;__u8 threshold;};
struct omap3isp_h3a_af_iir {__u16 h_start;__u16 coeff_set0[11];__u16 coeff_set1[11];};
struct snd_seq_queue_timer {int queue;int type;union snd_seq_queue_timer___3C9D4FA6EACDE415FCF2F668B28F5C6D u;char reserved[64];};
struct soundfont_open_parm {unsigned __int16 type;__int16 reserved;char name[32];};
struct tcf_ematch_tree_hdr {__u16 nmatches;__u16 progid;};
union telephony_exception {struct phone_except bits;unsigned int bytes;};
struct __attribute__((packed)) usb_midi_source_pin {__u8 baSourceID;__u8 baSourcePin;};
struct v4l2_frequency_band {__u32 tuner;__u32 type;__u32 index;__u32 capability;__u32 rangelow;__u32 rangehigh;__u32 modulation;__u32 reserved[9];};
struct v4l2_requestbuffers {__u32 count;__u32 type;__u32 memory;__u32 reserved[2];};
struct vhost_memory_region {__u64 guest_phys_addr;__u64 memory_size;__u64 userspace_addr;__u64 flags_padding;};
struct video_still_picture {char *iFrame;__s32 size;};
typedef __u8 virtio_net_ctrl_ack;
struct __attribute__((packed)) virtio_net_ctrl_hdr {__u8 c_class;__u8 cmd;};
typedef uint32_t xcb_damage_damage_t;
typedef uint32_t xcb_xfixes_region_t;
union xcb_xkb_ax_option_t {uint16_t fbopt;uint16_t skopt;};
struct xt_connlabel_mtinfo {__u16 bit;__u16 options;};
typedef XMotionEvent XPointerMovedEvent;
typedef void (*XcmsScreenFreeProc)(XPointer);
struct _LogDevAddr_struct {unsigned __int32 VolId : 30;unsigned __int32 Mode : 2;__u8 reserved[4];};
struct _LogvolInfo_struct {__u32 LunID;int num_opens;int num_parts;};
struct _XIMHotKeyTriggers {int num_hot_key;XIMHotKeyTrigger *key;};
typedef __kernel_long_t __kernel_ptrdiff_t;
typedef enum __priority_which __priority_which_t;
struct _xkbActionWireDesc {CARD8 type;CARD8 data[7];};
typedef __u16 audio_attributes_t;
typedef enum _4F2534ECD011C8155D7AFF8CBF6630B3 audio_play_state_t;
struct ax25_routes_struct {ax25_address port_addr;ax25_address dest_addr;unsigned __int8 digi_count;ax25_address digi_addr[8];};
struct __attribute__((packed)) btrfs_balance_args {__u64 profiles;__u64 usage;__u64 devid;__u64 pstart;__u64 pend;__u64 vstart;__u64 vend;__u64 target;__u64 flags;__u64 unused[8];};
struct btrfs_qgroup_limit {__u64 flags;__u64 max_rfer;__u64 max_excl;__u64 rsv_rfer;__u64 rsv_excl;};
struct dlm_device_version {__u32 version[3];};
struct ethtool_pauseparam {__u32 cmd;__u32 autoneg;__u32 rx_pause;__u32 tx_pause;};
struct ethtool_rxfh_indir {__u32 cmd;__u32 size;__u32 ring_index[];};
typedef enum fe_sec_tone_mode fe_sec_tone_mode_t;
typedef enum fe_transmit_mode fe_transmit_mode_t;
typedef CARD32 fsBitmapFormatMask;
typedef fsReq fsGetCataloguesReq;
typedef fsReq fsGetResolutionReq;
struct fsl_hv_ioctl_start {__u32 ret;__u32 partition;__u32 entry_point;__u32 load;};
struct fw_cdev_deallocate {__u32 handle;};
struct fw_cdev_iso_packet {__u32 control;__u32 header[];};
struct hiddev_report_info {__u32 report_type;__u32 report_id;__u32 num_fields;};
struct i2o_cmd_passthru32 {unsigned int iop;__u32 msg;};
struct ib_uverbs_alloc_pd {__u64 response;__u64 driver_data[];};
struct ib_uverbs_dereg_mr {__u32 mr_handle;};
struct ifla_vf_link_state {__u32 vf;__u32 link_state;};
struct kvm_tpr_access_ctl {__u32 enabled;__u32 flags;__u32 reserved[8];};
struct omap3isp_prev_csup {__u8 gain;__u8 thres;__u8 hypf_en;};
struct omap3isp_prev_hmed {__u8 odddist;__u8 evendist;__u8 thres;};
struct omap3isp_prev_luma {__u32 table[128];};
struct raw_config_request {int raw_minor;uint64_t block_major;uint64_t block_minor;};
struct sctp_setadaptation {__u32 ssb_adaptation_ind;};
struct snd_compr_metadata {__u32 key;__u32 value[8];};
struct snd_rawmidi_params {int stream;size_t buffer_size;size_t avail_min;unsigned __int32 no_active_sensing : 1;unsigned __int8 reserved[16];};
struct snd_seq_query_subs {struct snd_seq_addr root;int type;int index;int num_subs;struct snd_seq_addr addr;unsigned __int8 queue;unsigned int flags;char reserved[64];};
struct snd_seq_queue_info {int queue;int owner;unsigned __int32 locked : 1;char name[64];unsigned int flags;char reserved[60];};
struct __attribute__((packed)) usb_cdc_union_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bMasterInterface0;__u8 bSlaveInterface0;};
struct __attribute__((packed)) usb_dev_cap_header {__u8 bLength;__u8 bDescriptorType;__u8 bDevCapabilityType;};
struct __attribute__((packed)) usb_key_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 tTKID[3];__u8 bReserved;__u8 bKeyData[];};
struct __attribute__((packed)) usb_otg_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bmAttributes;};
struct v4l2_mbus_framefmt {__u32 width;__u32 height;__u32 code;__u32 field;__u32 colorspace;__u32 reserved[7];};
struct __attribute__((packed)) v4l2_mpeg_vbi_ITV0 {struct v4l2_mpeg_vbi_itv0_line line[36];};
typedef __u16 video_attributes_t;
typedef enum _475D1C857CA63124E480C577997D9964 video_play_state_t;
struct virtio_net_ctrl_mq {__u16 virtqueue_pairs;};
typedef xGrabPointerReply xGrabKeyboardReply;
typedef xLbxImageTextReq xLbxImageText16Req;
typedef xLbxPolyPointReq xLbxPolyFillArcReq;
typedef xLbxPolyPointReq xLbxPolySegmentReq;
typedef xXIBarrierEvent xXIBarrierHitEvent;
typedef uint32_t xcb_glx_drawable_t;
typedef uint32_t xcb_glx_fbconfig_t;
typedef uint32_t xcb_randr_output_t;
struct xcb_render_color_t {uint16_t red;uint16_t green;uint16_t blue;uint16_t alpha;};
typedef int32_t xcb_render_fixed_t;
typedef uint32_t xcb_render_glyph_t;
typedef uint32_t xcb_sync_counter_t;
struct xcb_xkb_property_t {uint16_t nameLength;uint16_t valueLength;};
typedef uint32_t xcb_xvmc_context_t;
typedef uint32_t xcb_xvmc_surface_t;
struct xt_tos_target_info {__u8 tos_value;__u8 tos_mask;};
typedef int (*NCURSES_SCREEN_CB)(SCREEN *, void *);
typedef int (*NCURSES_WINDOW_CB)(WINDOW *, void *);
typedef XCrossingEvent XEnterWindowEvent;
typedef enum _21F5A3B15463AF72127F5499CB6EE2AC XICCEncodingStyle;
typedef enum _DB4B60BC3E5D47BB5823C48350265A79 XIMCaretDirection;
typedef enum _B539734676A04848B68060D6D483E0A0 XIMStatusDataType;
typedef XKeyEvent XKeyReleasedEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef XrmQuark XrmRepresentation;
typedef enum _2BE422EB4B7233E8C58D6E03ADE8CB89 _LIB_VERSION_TYPE;
struct _XResClientIdSpec {CARD32 client;CARD32 mask;};
struct _XkbComponentList {int num_keymaps;int num_keycodes;int num_types;int num_compat;int num_symbols;int num_geometry;XkbComponentNamePtr keymaps;XkbComponentNamePtr keycodes;XkbComponentNamePtr types;XkbComponentNamePtr compat;XkbComponentNamePtr symbols;XkbComponentNamePtr geometry;};
struct _XkbDeviceChanges {unsigned int changed;unsigned __int16 first_btn;unsigned __int16 num_btns;XkbDeviceLedChangesRec leds;};
typedef wint_t (*__gconv_btowc_fct)(struct __gconv_step *, unsigned __int8);
struct __gconv_step_data {unsigned __int8 *__outbuf;unsigned __int8 *__outbufend;int __flags;int __invocation_counter;int __internal_use;__mbstate_t *__statep;__mbstate_t __state;struct __gconv_trans_data *__trans;};
typedef int (*__gconv_trans_fct)(struct __gconv_step *, struct __gconv_step_data *, void *, const unsigned __int8 *, const unsigned __int8 **, const unsigned __int8 *, unsigned __int8 **, size_t *);
typedef __clock_t __sigchld_clock_t;
struct _xkbPointWireDesc {INT16 x;INT16 y;};
struct ax25_parms_struct {ax25_address port_addr;unsigned __int16 values[20];};
struct dcb_peer_app_info {__u8 willing;__u8 error;};
struct erase_info_user64 {__u64 start;__u64 length;};
struct ethtool_ringparam {__u32 cmd;__u32 rx_max_pending;__u32 rx_mini_max_pending;__u32 rx_jumbo_max_pending;__u32 tx_max_pending;__u32 rx_pending;__u32 rx_mini_pending;__u32 rx_jumbo_pending;__u32 tx_pending;};
typedef enum fe_sec_mini_cmd fe_sec_mini_cmd_t;
struct fsl_hv_ioctl_stop {__u32 ret;__u32 partition;};
struct fuse_getxattr_out {uint32_t size;uint32_t padding;};
struct fuse_interrupt_in {uint64_t unique;};
struct fw_cdev_flush_iso {__u32 handle;};
struct idletimer_tg_info {__u32 timeout;char label[28];struct idletimer_tg *timer;};
struct inet_diag_meminfo {__u32 idiag_rmem;__u32 idiag_wmem;__u32 idiag_fmem;__u32 idiag_tmem;};
struct kvm_create_device {__u32 type;__u32 fd;__u32 flags;};
struct kvm_mmu_op_header {__u32 op;__u32 pad;};
struct media_device_info {char driver[16];char model[32];char serial[40];char bus_info[32];__u32 media_version;__u32 hw_revision;__u32 driver_version;__u32 reserved[31];};
struct netlink_diag_ring {__u32 ndr_block_size;__u32 ndr_block_nr;__u32 ndr_frame_size;__u32 ndr_frame_nr;};
typedef uint64_t rds_rdma_cookie_t;
struct rtnl_link_stats64 {__u64 rx_packets;__u64 tx_packets;__u64 rx_bytes;__u64 tx_bytes;__u64 rx_errors;__u64 tx_errors;__u64 rx_dropped;__u64 tx_dropped;__u64 multicast;__u64 collisions;__u64 rx_length_errors;__u64 rx_over_errors;__u64 rx_crc_errors;__u64 rx_frame_errors;__u64 rx_fifo_errors;__u64 rx_missed_errors;__u64 tx_aborted_errors;__u64 tx_carrier_errors;__u64 tx_fifo_errors;__u64 tx_heartbeat_errors;__u64 tx_window_errors;__u64 rx_compressed;__u64 tx_compressed;};
struct snd_ctl_card_info {int card;int pad;unsigned __int8 id[16];unsigned __int8 driver[16];unsigned __int8 name[32];unsigned __int8 longname[80];unsigned __int8 reserved_[16];unsigned __int8 mixername[80];unsigned __int8 components[128];};
struct snd_pcm_sw_params {int tstamp_mode;unsigned int period_step;unsigned int sleep_min;snd_pcm_uframes_t avail_min;snd_pcm_uframes_t xfer_align;snd_pcm_uframes_t start_threshold;snd_pcm_uframes_t stop_threshold;snd_pcm_uframes_t silence_threshold;snd_pcm_uframes_t silence_size;snd_pcm_uframes_t boundary;unsigned __int8 reserved[64];};
struct snd_timer_gparams {struct snd_timer_id tid;unsigned __int64 period_num;unsigned __int64 period_den;unsigned __int8 reserved[32];};
struct snd_timer_gstatus {struct snd_timer_id tid;unsigned __int64 resolution;unsigned __int64 resolution_num;unsigned __int64 resolution_den;unsigned __int8 reserved[32];};
struct v4l2_ext_controls {__u32 ctrl_class;__u32 count;__u32 error_idx;__u32 reserved[2];struct v4l2_ext_control *controls;};
struct v4l2_hw_freq_seek {__u32 tuner;__u32 type;__u32 seek_upward;__u32 wrap_around;__u32 spacing;__u32 rangelow;__u32 rangehigh;__u32 reserved[5];};
struct vfio_group_status {__u32 argsz;__u32 flags;};
struct video_spu_palette {int length;__u8 *palette;};
struct virtio_scsi_inhdr {__u32 errors;__u32 data_len;__u32 sense_len;__u32 residual;};
typedef xLbxImageTextReq xLbxImageText8Req;
typedef xLbxPolyTextReq xLbxPolyText16Req;
typedef xPolySegmentReq xPolyRectangleReq;
typedef RECORD_CLIENT_INFO xRecordClientInfo;
typedef uint32_t xcb_glx_context_t;
typedef uint32_t xcb_glx_pbuffer_t;
struct xcb_xevie_event_t {uint8_t pad0[32];};
typedef uint16_t xcb_xkb_id_spec_t;
struct xcb_xkb_listing_t {uint16_t flags;uint16_t length;};
struct xcb_xkb_outline_t {uint8_t nPoints;uint8_t cornerRadius;uint8_t pad0[2];};
typedef uint32_t xcb_xv_encoding_t;
struct xcb_xv_rational_t {int32_t numerator;int32_t denominator;};
struct xfrm_lifetime_cfg {__u64 soft_byte_limit;__u64 hard_byte_limit;__u64 soft_packet_limit;__u64 hard_packet_limit;__u64 soft_add_expires_seconds;__u64 hard_add_expires_seconds;__u64 soft_use_expires_seconds;__u64 hard_use_expires_seconds;};
struct xfrm_lifetime_cur {__u64 bytes;__u64 packets;__u64 add_time;__u64 use_time;};
struct xfrm_replay_state {__u32 oseq;__u32 seq;__u32 bitmap;};
struct xfrm_usersa_flush {__u8 proto;};
struct xt_sctp_flag_info {__u8 chunktype;__u8 flag;__u8 flag_mask;};
struct xt_socket_mtinfo1 {__u8 flags;};
struct xt_socket_mtinfo2 {__u8 flags;};
struct xt_tos_match_info {__u8 tos_mask;__u8 tos_value;__u8 invert;};
typedef enum _77DF46C9425AF9D71E9D4833358F4738 Dwarf_Endianness;
struct Dwarf_P_Marker_s {Dwarf_Unsigned ma_marker;Dwarf_Unsigned ma_offset;};
typedef enum _8E161423434F8AC50E1B64633E1606E9 IXJ_CADENCE_TERM;
typedef CARD32 RecordClientSpec;
typedef XKeyEvent XKeyPressedEvent;
struct _FontPathElement {int name_length;char *name;int type;int refcount;pointer c_private;};
typedef _Unwind_Reason_Code (*_Unwind_Trace_Fn)(struct _Unwind_Context *, void *);
struct _XkbIndicatorRec {unsigned __int64 phys_indicators;XkbIndicatorMapRec maps[32];};
struct __dvb_net_if_old {__u16 pid;__u16 if_num;};
typedef enum __itimer_which __itimer_which_t;
typedef __kernel_long_t __kernel_clock_t;
typedef __kernel_long_t __kernel_ssize_t;
struct _xwd_file_header {CARD32 header_size;CARD32 file_version;CARD32 pixmap_format;CARD32 pixmap_depth;CARD32 pixmap_width;CARD32 pixmap_height;CARD32 xoffset;CARD32 byte_order;CARD32 bitmap_unit;CARD32 bitmap_bit_order;CARD32 bitmap_pad;CARD32 bits_per_pixel;CARD32 bytes_per_line;CARD32 visual_class;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD32 bits_per_rgb;CARD32 colormap_entries;CARD32 ncolors;CARD32 window_width;CARD32 window_height;CARD32 window_x;CARD32 window_y;CARD32 window_bdrwidth;};
struct audit_tty_status {__u32 enabled;__u32 log_passwd;};
struct bridge_vlan_info {__u16 flags;__u16 vid;};
struct can_berr_counter {__u16 txerr;__u16 rxerr;};
struct can_device_stats {__u32 bus_error;__u32 error_warning;__u32 error_passive;__u32 bus_off;__u32 arbitration_lost;__u32 restarts;};
struct dlm_purge_params {__u32 nodeid;__u32 pid;};
struct dvd_lu_send_agid {__u8 type;unsigned __int32 agid : 2;};
struct ebt_pkttype_info {__u8 pkt_type;__u8 invert;};
struct ethtool_channels {__u32 cmd;__u32 max_rx;__u32 max_tx;__u32 max_other;__u32 max_combined;__u32 rx_count;__u32 tx_count;__u32 other_count;__u32 combined_count;};
struct ethtool_coalesce {__u32 cmd;__u32 rx_coalesce_usecs;__u32 rx_max_coalesced_frames;__u32 rx_coalesce_usecs_irq;__u32 rx_max_coalesced_frames_irq;__u32 tx_coalesce_usecs;__u32 tx_max_coalesced_frames;__u32 tx_coalesce_usecs_irq;__u32 tx_max_coalesced_frames_irq;__u32 stats_block_coalesce_usecs;__u32 use_adaptive_rx_coalesce;__u32 use_adaptive_tx_coalesce;__u32 pkt_rate_low;__u32 rx_coalesce_usecs_low;__u32 rx_max_coalesced_frames_low;__u32 tx_coalesce_usecs_low;__u32 tx_max_coalesced_frames_low;__u32 pkt_rate_high;__u32 rx_coalesce_usecs_high;__u32 rx_max_coalesced_frames_high;__u32 tx_coalesce_usecs_high;__u32 tx_max_coalesced_frames_high;__u32 rate_sample_interval;};
struct fc_bsg_rport_els {uint8_t els_code;};
struct fc_els_rnid_resp {__u8 rnid_cmd;__u8 rnid_resv[3];__u8 rnid_fmt;__u8 rnid_cid_len;__u8 rnid_resv2;__u8 rnid_sid_len;};
struct fc_els_rscn_page {__u8 rscn_page_flags;__u8 rscn_fid[3];};
typedef enum fe_sec_voltage fe_sec_voltage_t;
struct fuse_getxattr_in {uint32_t size;uint32_t padding;};
struct fuse_ioctl_iovec {uint64_t base;uint64_t len;};
struct fuse_setxattr_in {uint32_t size;uint32_t flags;};
struct fw_cdev_stop_iso {__u32 handle;};
struct gnet_stats_queue {__u32 qlen;__u32 backlog;__u32 drops;__u32 requeues;__u32 overlimits;};
struct ib_path_rec_data {__u32 flags;__u32 reserved;__u32 path_rec[16];};
struct ib_ucm_create_id {__u64 uid;__u64 response;};
struct ifla_vf_spoofchk {__u32 vf;__u32 setting;};
struct ip6t_reject_info {__u32 with;};
struct kvm_cpuid_entry2 {__u32 function;__u32 index;__u32 flags;__u32 eax;__u32 ebx;__u32 ecx;__u32 edx;__u32 padding[3];};
struct media_links_enum {__u32 entity;struct media_pad_desc *pads;struct media_link_desc *links;__u32 reserved[4];};
struct name_table_entry {const char *nte_name;int nte_type;HashValue nte_index;HashValue nte_link;};
struct omapfb_vram_info {__u32 total;__u32 free;__u32 largest_free_block;__u32 reserved[5];};
typedef enum _F1F08A28B7CE4D8B86945E590C2AE6B2 osd_raw_window_t;
struct ovs_key_ethernet {__u8 eth_src[6];__u8 eth_dst[6];};
struct packet_diag_info {__u32 pdi_index;__u32 pdi_version;__u32 pdi_reserve;__u32 pdi_copy_thresh;__u32 pdi_tstamp;__u32 pdi_flags;};
struct packet_diag_ring {__u32 pdr_block_size;__u32 pdr_block_nr;__u32 pdr_frame_size;__u32 pdr_frame_nr;__u32 pdr_retire_tmo;__u32 pdr_sizeof_priv;__u32 pdr_features;};
struct pkt_ctrl_command {__u32 command;__u32 dev_index;__u32 dev;__u32 pkt_dev;__u32 num_devices;__u32 padding;};
struct prefix_cacheinfo {__u32 preferred_time;__u32 valid_time;};
struct region_info_user {__u32 offset;__u32 erasesize;__u32 numblocks;__u32 regionindex;};
struct robust_list_head {struct robust_list list;__int64 futex_offset;struct robust_list *list_op_pending;};
struct snd_rawmidi_info {unsigned int device;unsigned int subdevice;int stream;int card;unsigned int flags;unsigned __int8 id[64];unsigned __int8 name[80];unsigned __int8 subname[32];unsigned int subdevices_count;unsigned int subdevices_avail;unsigned __int8 reserved[64];};
struct __attribute__((packed)) snd_seq_ev_quote {struct snd_seq_addr origin;unsigned __int16 value;struct snd_seq_event *event;};
struct snd_timer_select {struct snd_timer_id id;unsigned __int8 reserved[32];};
struct sockaddr_storage {sa_family_t ss_family;unsigned __int64 __ss_align;char __ss_padding[112];};
struct sound_timer_info {char name[32];int caps;};
struct tc_netem_corrupt {__u32 probability;__u32 correlation;};
struct tc_netem_gemodel {__u32 p;__u32 r;__u32 h;__u32 k1;};
struct tc_netem_gimodel {__u32 p13;__u32 p31;__u32 p32;__u32 p14;__u32 p23;};
struct tc_netem_reorder {__u32 probability;__u32 correlation;};
struct tc_service_curve {__u32 m1;__u32 d;__u32 m2;};
struct __attribute__((packed)) uac1_status_word {__u8 bStatusType;__u8 bOriginator;};
struct __attribute__((packed)) uvc_format_mjpeg {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bFormatIndex;__u8 bNumFrameDescriptors;__u8 bmFlags;__u8 bDefaultFrameIndex;__u8 bAspectRatioX;__u8 bAspectRatioY;__u8 bmInterfaceFlags;__u8 bCopyProtect;};
struct __attribute__((packed)) v4l2_event_vsync {__u8 field;};
struct vfio_device_info {__u32 argsz;__u32 flags;__u32 num_regions;__u32 num_irqs;};
struct vhost_vring_addr {unsigned int index;unsigned int flags;__u64 desc_user_addr;__u64 used_user_addr;__u64 avail_user_addr;__u64 log_guest_addr;};
struct x25_route_struct {struct x25_address address;unsigned int sigdigits;char device[200];};
typedef xLbxPolyTextReq xLbxPolyText8Req;
typedef xXIEnterEvent xXIFocusOutEvent;
typedef uint32_t xcb_glx_bool32_t;
typedef uint32_t xcb_glx_pixmap_t;
typedef uint32_t xcb_glx_window_t;
typedef uint32_t xcb_randr_crtc_t;
typedef uint32_t xcb_randr_mode_t;
struct xcb_res_client_t {uint32_t resource_base;uint32_t resource_mask;};
typedef uint8_t xcb_shape_kind_t;
typedef uint32_t xcb_sync_alarm_t;
typedef uint32_t xcb_sync_fence_t;
struct xt_CHECKSUM_info {__u8 operation;};
struct xt_devgroup_info {__u32 flags;__u32 src_group;__u32 src_mask;__u32 dst_group;__u32 dst_mask;};
typedef enum _A98D0825AA235C940E5A466593BCCCF2 GMON_Record_Tag;
typedef enum _3C337C70E0B127F66DEE8FC07E8C6106 IXJ_FILTER_FREQ;
typedef int (*XIOErrorHandler)(Display *);
typedef enum _C25EDA2AFA4331EE1194B950D24C90A5 XSyncAlarmState;
struct _XComposeStatus {XPointer compose_ptr;int chars_matched;};
struct _XkbKeyAliasRec {char real[4];char alias[4];};
struct _XkbShapeDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;unsigned __int16 color_ndx;unsigned __int16 shape_ndx;};
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_time_t;
struct _old_mixer_info {char id[16];char name[32];};
struct atm_backend_ppp {atm_backend_t backend_num;int encaps;};
typedef enum _4E8A6E2B6F1A3352FBE218C916A6864D atmlec_msg_type;
struct audit_rule_data {__u32 flags;__u32 action;__u32 field_count;__u32 mask[64];__u32 fields[64];__u32 values[64];__u32 fieldflags[64];__u32 buflen;char buf[];};
struct ax25_ctl_struct {ax25_address port_addr;ax25_address source_addr;ax25_address dest_addr;unsigned int cmd;unsigned __int64 arg;unsigned __int8 digi_count;ax25_address digi_addr[8];};
struct ax25_fwd_struct {ax25_address port_from;ax25_address port_to;};
typedef __compar_fn_t comparison_fn_t;
struct dvd_lu_send_asf {__u8 type;unsigned __int32 agid : 2;unsigned __int32 asf : 1;};
struct ebt_mark_m_info {unsigned __int64 mark;unsigned __int64 mask;__u8 invert;__u8 bitmask;};
struct erase_info_user {__u32 start;__u32 length;};
struct ethtool_drvinfo {__u32 cmd;char driver[32];char version[32];char fw_version[32];char bus_info[32];char reserved1[32];char reserved2[12];__u32 n_priv_flags;__u32 n_stats;__u32 testinfo_len;__u32 eedump_len;__u32 regdump_len;};
struct ethtool_modinfo {__u32 cmd;__u32 type;__u32 eeprom_len;__u32 reserved[8];};
struct fc_bsg_host_els {uint8_t command_code;uint8_t port_id[3];};
struct fc_bsg_rport_ct {uint32_t preamble_word0;uint32_t preamble_word1;uint32_t preamble_word2;};
struct __attribute__((packed)) fddi_8022_1_hdr {__u8 dsap;__u8 ssap;__u8 ctrl;};
struct __attribute__((packed)) fddi_8022_2_hdr {__u8 dsap;__u8 ssap;__u8 ctrl_1;__u8 ctrl_2;};
typedef enum fe_modulation fe_modulation_t;
typedef fsResourceReq fsQueryXInfoReq;
struct fuse_forget_one {uint64_t nodeid;uint64_t nlookup;};
struct ifla_vf_tx_rate {__u32 vf;__u32 rate;};
struct ifla_vlan_flags {__u32 flags;__u32 mask;};
struct ipt_reject_info {enum ipt_reject_with with;};
struct kvm_cpuid_entry {__u32 function;__u32 eax;__u32 ebx;__u32 ecx;__u32 edx;__u32 padding;};
struct mixer_vol_table {int num;char name[32];int levels[32];};
struct nf_ct_tcp_flags {__u8 flags;__u8 mask;};
struct nfs4_mount_data {int version;int flags;int rsize;int wsize;int timeo;int retrans;int acregmin;int acregmax;int acdirmin;int acdirmax;struct nfs_string client_addr;struct nfs_string mnt_path;struct nfs_string hostname;unsigned int host_addrlen;struct sockaddr *host_addr;int proto;int auth_flavourlen;int *auth_flavours;};
struct nr_route_struct {int type;ax25_address callsign;char device[16];unsigned int quality;char mnemonic[7];ax25_address neighbour;unsigned int obs_count;unsigned int ndigis;ax25_address digipeaters[8];};
struct __attribute__((packed)) olpc_ofw_header {__u32 ofw_magic;__u32 ofw_version;__u32 cif_handler;__u32 irq_desc_table;};
struct ovs_vport_stats {__u64 rx_packets;__u64 tx_packets;__u64 rx_bytes;__u64 tx_bytes;__u64 rx_errors;__u64 tx_errors;__u64 rx_dropped;__u64 tx_dropped;};
typedef int printf_function(FILE *stream, const struct printf_info *info, const void *const *args);
typedef enum _3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_sendhookact;
struct rtnl_link_stats {__u32 rx_packets;__u32 tx_packets;__u32 rx_bytes;__u32 tx_bytes;__u32 rx_errors;__u32 tx_errors;__u32 rx_dropped;__u32 tx_dropped;__u32 multicast;__u32 collisions;__u32 rx_length_errors;__u32 rx_over_errors;__u32 rx_crc_errors;__u32 rx_frame_errors;__u32 rx_fifo_errors;__u32 rx_missed_errors;__u32 tx_aborted_errors;__u32 tx_carrier_errors;__u32 tx_fifo_errors;__u32 tx_heartbeat_errors;__u32 tx_window_errors;__u32 rx_compressed;__u32 tx_compressed;};
typedef enum sctp_sn_error sctp_sn_error_t;
struct snd_seq_connect {struct snd_seq_addr sender;struct snd_seq_addr dest;};
struct sockaddr_atmpvc {unsigned __int16 sap_family;struct sockaddr_atmpvc___43BC5BD14FF5343B21515253C57232B1 sap_addr;};
struct sockaddr_atmsvc {unsigned __int16 sas_family;struct sockaddr_atmsvc___28FFA2D832CE4CF9061331F52341A4DE sas_addr;};
struct tc_choke_xstats {__u32 early;__u32 pdrop;__u32 other;__u32 marked;__u32 matched;};
struct tc_sfqred_stats {__u32 prob_drop;__u32 forced_drop;__u32 prob_mark;__u32 forced_mark;__u32 prob_mark_head;__u32 forced_mark_head;};
struct ulog_packet_msg {unsigned __int64 mark;__int64 timestamp_sec;__int64 timestamp_usec;unsigned int hook;char indev_name[16];char outdev_name[16];size_t data_len;char prefix[32];unsigned __int8 mac_len;unsigned __int8 mac[80];unsigned __int8 payload[];};
struct unix_diag_rqlen {__u32 udiag_rqueue;__u32 udiag_wqueue;};
struct v4l2_pix_format {__u32 width;__u32 height;__u32 pixelformat;__u32 field;__u32 bytesperline;__u32 sizeimage;__u32 colorspace;__u32 priv;};
struct video_navi_pack {int length;__u8 data[1024];};
struct vlan_ioctl_args {int cmd;char device1[24];union vlan_ioctl_args___94757F94B6A54079544B78B6544C33D2 u;__int16 vlan_qos;};
struct vring_used_elem {__u32 id;__u32 len;};
typedef xImageTextReq xImageText16Req;
typedef xLbxPolyPointReq xLbxPolyLineReq;
typedef xPolySegmentReq xPolyFillArcReq;
typedef xXIEnterEvent xXIFocusInEvent;
typedef uint32_t xcb_timestamp_t;
struct xt_mark_tginfo2 {__u32 mark;__u32 mask;};
struct xt_physdev_info {char physindev[16];char in_mask[16];char physoutdev[16];char out_mask[16];__u8 invert;__u8 bitmask;};
typedef __u32 DriverVer_type;
typedef int (*FreeModmapType)(XModifierKeymap *);
typedef __u32 Heartbeat_type;
struct __attribute__((packed)) INFTLPartition {__u32 virtualUnits;__u32 firstUnit;__u32 lastUnit;__u32 flags;__u32 spareUnits;__u32 Reserved0;__u32 Reserved1;};
typedef XFocusChangeEvent XFocusOutEvent;
typedef enum _1245A1FB5F4A3D60B68851188167E7C1 XSyncValueType;
typedef enum _5A773820A0D67B4336D2749C8D45D255 *XrmBindingList;
struct _XImage__funcs {struct _XImage *(*create_image)(struct _XDisplay *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int);int (*destroy_image)(struct _XImage *);unsigned __int64 (*get_pixel)(struct _XImage *, int, int);int (*put_pixel)(struct _XImage *, int, int, unsigned __int64);struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);int (*add_pixel)(struct _XImage *, __int64);};
struct _XkbKTMapEntry {int active;unsigned __int8 level;XkbModsRec mods;};
struct _XkbKeyNameRec {char name[4];};
struct _XkbLogoDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;unsigned __int16 color_ndx;unsigned __int16 shape_ndx;char *logo_name;};
struct _XkbMapChanges {unsigned __int16 changed;KeyCode min_key_code;KeyCode max_key_code;unsigned __int8 first_type;unsigned __int8 num_types;KeyCode first_key_sym;unsigned __int8 num_key_syms;KeyCode first_key_act;unsigned __int8 num_key_acts;KeyCode first_key_behavior;unsigned __int8 num_key_behaviors;KeyCode first_key_explicit;unsigned __int8 num_key_explicit;KeyCode first_modmap_key;unsigned __int8 num_modmap_keys;KeyCode first_vmodmap_key;unsigned __int8 num_vmodmap_keys;unsigned __int8 pad;unsigned __int16 vmods;};
struct _XkbOverlayKey {XkbKeyNameRec over;XkbKeyNameRec under;};
struct _XkbOverlayRow {unsigned __int16 row_under;unsigned __int16 num_keys;unsigned __int16 sz_keys;XkbOverlayKeyPtr keys;};
struct _XkbTextDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;__int16 width;__int16 height;unsigned __int16 color_ndx;char *text;char *font;};
typedef __builtin_va_list __gnuc_va_list;
typedef __kernel_ulong_t __kernel_ino_t;
typedef __kernel_long_t __kernel_off_t;
typedef enum __rusage_who __rusage_who_t;
typedef __restorefn_t *__sigrestore_t;
struct _xAnyClassinfo {CARD8 c_class;CARD8 length;};
typedef __u32 can_err_mask_t;
typedef enum dmx_ts_pes dmx_pes_type_t;
struct dtv_properties {__u32 num;struct dtv_property *props;};
struct ebt_limit_info {__u32 avg;__u32 burst;unsigned __int64 prev;__u32 credit;__u32 credit_cap;__u32 cost;};
struct fc_gid_pn_resp {__u8 fp_resvd;__u8 fp_fid[3];};
typedef enum fe_bandwidth fe_bandwidth_t;
typedef enum fe_code_rate fe_code_rate_t;
typedef enum fe_hierarchy fe_hierarchy_t;
typedef CARD32 fsBitmapFormat;
struct fuse_access_in {uint32_t mask;uint32_t padding;};
struct fuse_create_in {uint32_t flags;uint32_t mode;uint32_t umask;uint32_t padding;};
struct fuse_forget_in {uint64_t nlookup;};
struct fuse_rename_in {uint64_t newdir;};
struct fuse_write_out {uint32_t size;uint32_t padding;};
struct gaih_addrtuple {struct gaih_addrtuple *next;char *name;int family;uint32_t addr[4];uint32_t scopeid;};
struct idt77105_stats {__u32 symbol_errors;__u32 tx_cells;__u32 rx_cells;__u32 rx_hec_errors;};
struct ifla_cacheinfo {__u32 max_reasm_len;__u32 tstamp;__u32 reachable_time;__u32 retrans_time;};
struct ip6_opt_router {uint8_t ip6or_type;uint8_t ip6or_len;uint8_t ip6or_value[2];};
struct ip6_opt_tunnel {uint8_t ip6ot_type;uint8_t ip6ot_len;uint8_t ip6ot_encap_limit;};
struct __attribute__((packed)) iso_path_table {unsigned __int8 name_len[2];char extent[4];char parent[2];char name[];};
struct kvm_pit_config {__u32 flags;__u32 pad[15];};
struct kvm_vapic_addr {__u64 vapic_addr;};
struct mii_ioctl_data {__u16 phy_id;__u16 reg_num;__u16 val_in;__u16 val_out;};
struct mtrr_var_range {__u32 base_lo;__u32 base_hi;__u32 mask_lo;__u32 mask_hi;};
struct nfs_fhbase_old {__u32 fb_dcookie;__u32 fb_ino;__u32 fb_dirino;__u32 fb_dev;__u32 fb_xdev;__u32 fb_xino;__u32 fb_generation;};
struct ovs_flow_stats {__u64 n_packets;__u64 n_bytes;};
struct ovs_key_icmpv6 {__u8 icmpv6_type;__u8 icmpv6_code;};
struct rand_pool_info {int entropy_count;int buf_size;__u32 buf[];};
struct sbi_instrument {unsigned __int16 key;__int16 device;int channel;sbi_instr_data operators;};
struct sctp_authchunk {__u8 sauth_chunk;};
struct snd_aes_iec958 {unsigned __int8 status[24];unsigned __int8 subcode[147];unsigned __int8 pad;unsigned __int8 dig_subframe[4];};
struct snd_codec_desc {__u32 max_ch;__u32 sample_rates;__u32 bit_rate[32];__u32 num_bitrates;__u32 rate_control;__u32 profiles;__u32 modes;__u32 formats;__u32 min_buffer;__u32 reserved[15];};
struct snd_compr_caps {__u32 num_codecs;__u32 direction;__u32 min_fragment_size;__u32 max_fragment_size;__u32 min_fragments;__u32 max_fragments;__u32 codecs[32];__u32 reserved[11];};
struct snd_hwdep_info {unsigned int device;int card;unsigned __int8 id[64];unsigned __int8 name[80];int iface;unsigned __int8 reserved[64];};
struct snd_timer_info {unsigned int flags;int card;unsigned __int8 id[64];unsigned __int8 name[80];unsigned __int64 reserved0;unsigned __int64 resolution;unsigned __int8 reserved[64];};
struct tc_multiq_qopt {__u16 bands;__u16 max_bands;};
struct tcf_ematch_hdr {__u16 matchid;__u16 kind;__u16 flags;__u16 pad;};
typedef enum _D4AB9A46DE65367CC0FF11AD6E77796A td_thr_state_e;
struct v4l2_frequency {__u32 tuner;__u32 type;__u32 frequency;__u32 reserved[8];};
typedef enum _44B46E597998AE412FE6C3AD18848DD7 video_format_t;
typedef enum _0B5D3E957672FAB7AF607968B416CE5C video_system_t;
struct vt_setactivate {unsigned int console;struct vt_mode mode;};
typedef CARD32 xDbeBackBuffer;
typedef CARD8 xDbeSwapAction;
typedef xImageTextReq xImageText8Req;
typedef xLbxPolyPointReq xLbxPolyArcReq;
typedef xPolyTextReq xPolyText16Req;
typedef uint32_t xcb_colormap_t;
typedef uint32_t xcb_drawable_t;
typedef uint32_t xcb_fontable_t;
typedef uint32_t xcb_gcontext_t;
typedef uint8_t xcb_shape_op_t;
typedef uint32_t xcb_visualid_t;
typedef pthread_cond_t xcondition_rec;
struct xfrmu_sadhinfo {__u32 sadhcnt;__u32 sadhmcnt;};
struct xfrmu_spdhinfo {__u32 spdhcnt;__u32 spdhmcnt;};
struct xt_NFQ_info_v1 {__u16 queuenum;__u16 queues_total;};
struct xt_NFQ_info_v2 {__u16 queuenum;__u16 queues_total;__u16 bypass;};
struct xt_NFQ_info_v3 {__u16 queuenum;__u16 queues_total;__u16 flags;};
struct xt_helper_info {int invert;char name[30];};
struct xt_tcpmss_info {__u16 mss;};
struct ypall_callback {int (*foreach)(int status, char *key, int keylen, char *val, int vallen, char *data);char *data;};
struct ypresp_maplist {ypstat stat;ypmaplist *maps;};
typedef __u32 BusTypes_type;
struct CYZ_BOOT_CTRL {unsigned __int16 nboard;int status[4];int nchannel[4];int fw_rev[4];unsigned __int64 offset;unsigned __int64 data[256];};
typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;
typedef int (*NameCheckFunc)(char *name);
typedef int (*WakeupFpeFunc)(FontPathElementPtr fpe, unsigned __int64 *LastSelectMask);
typedef XFocusChangeEvent XFocusInEvent;
typedef enum _B64C39E2ADABB22C50C1D912F1D253CC XIMCaretStyle;
typedef enum _0112955827FC2F1F3D73B2DA97E42271 XSyncTestType;
typedef enum _405C8636DEE5D8D2C9F0466394C3E3EA XrmOptionKind;
struct _XkbAnyDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;};
struct __sysctl_args {int *name;int nlen;void *oldval;size_t *oldlenp;void *newval;size_t newlen;unsigned __int64 __unused[4];};
struct accessdata_dn {__u8 acc_accl;__u8 acc_acc[40];__u8 acc_passl;__u8 acc_pass[40];__u8 acc_userl;__u8 acc_user[40];};
typedef __kernel_ulong_t aio_context_t;
typedef error_t (*argp_parser_t)(int key, char *arg, struct argp_state *state);
struct atm_dev_stats {struct atm_aal_stats aal0;struct atm_aal_stats aal34;struct atm_aal_stats aal5;};
struct avmb1_loaddef {int contr;avmb1_t4file t4file;};
struct can_bittiming {__u32 bitrate;__u32 sample_point;__u32 tq;__u32 prop_seg;__u32 phase_seg1;__u32 phase_seg2;__u32 sjw;__u32 brp;};
struct cdrom_volctrl {__u8 channel0;__u8 channel1;__u8 channel2;__u8 channel3;};
struct cuse_init_out {uint32_t major;uint32_t minor;uint32_t unused;uint32_t flags;uint32_t max_read;uint32_t max_write;uint32_t dev_major;uint32_t dev_minor;uint32_t spare[10];};
struct cycx_firmware {char signature[80];unsigned __int16 version;unsigned __int16 checksum;unsigned __int16 reserved[6];char descr[256];struct cycx_fw_info info;unsigned __int8 image[];};
struct dm_target_msg {__u64 sector;char message[];};
typedef __u8 dvd_challenge[10];
struct dvd_copyright {__u8 type;__u8 layer_num;__u8 cpst;__u8 rmi;};
typedef elf_greg_t elf_gregset_t[27];
struct ethtool_flash {__u32 cmd;__u32 region;char data[128];};
struct ethtool_value {__u32 cmd;__u32 data;};
struct fc_els_ls_acc {__u8 la_cmd;__u8 la_resv[3];};
struct fc_els_ls_rjt {__u8 er_cmd;__u8 er_resv[4];__u8 er_reason;__u8 er_explan;__u8 er_vendor;};
struct fuse_bmap_out {uint64_t block;};
struct fuse_mkdir_in {uint32_t mode;uint32_t umask;};
struct fuse_mknod_in {uint32_t mode;uint32_t rdev;uint32_t umask;uint32_t padding;};
struct fuse_poll_out {uint32_t revents;uint32_t padding;};
struct hashlimit_cfg {__u32 mode;__u32 avg;__u32 burst;__u32 size;__u32 max;__u32 gc_interval;__u32 expire;};
struct hdspm_version {uint8_t card_type;char cardname[20];unsigned int serial;unsigned __int16 firmware_rev;int addons;};
struct hsc_rx_config {uint32_t mode;uint32_t flow;uint32_t channels;};
struct hsc_tx_config {uint32_t mode;uint32_t channels;uint32_t speed;uint32_t arb_mode;};
struct ib_ucm_notify {__u32 id;__u32 event;};
struct ifa_cacheinfo {__u32 ifa_prefered;__u32 ifa_valid;__u32 cstamp;__u32 tstamp;};
struct ifla_port_vsi {__u8 vsi_mgr_id;__u8 vsi_type_id[3];__u8 vsi_type_version;__u8 pad[3];};
struct ip6_opt_jumbo {uint8_t ip6oj_type;uint8_t ip6oj_len;uint8_t ip6oj_jumbo_len[4];};
struct ipt_ulog_info {unsigned int nl_group;size_t copy_range;size_t qthreshold;char prefix[32];};
struct kexec_segment {const void *buf;size_t bufsz;const void *mem;size_t memsz;};
struct kvm_debugregs {__u64 db[4];__u64 dr6;__u64 dr7;__u64 flags;__u64 reserved[9];};
struct kvm_interrupt {__u32 irq;};
struct kvm_pic_state {__u8 last_irr;__u8 irr;__u8 imr;__u8 isr;__u8 priority_add;__u8 irq_base;__u8 read_reg_select;__u8 poll;__u8 special_mask;__u8 init_state;__u8 auto_eoi;__u8 rotate_on_auto_eoi;__u8 special_fully_nested_mode;__u8 init4;__u8 elcr;__u8 elcr_mask;};
struct mtd_ecc_stats {__u32 corrected;__u32 failed;__u32 badblocks;__u32 bbtblocks;};
struct nda_cacheinfo {__u32 ndm_confirmed;__u32 ndm_used;__u32 ndm_updated;__u32 ndm_refcnt;};
typedef enum __ns_cert_types ns_cert_types;
typedef void (*plugin_vlog_t)(openvpn_plugin_log_flags_t flags, const char *plugin_name, const char *format, va_list arglist);
typedef enum _8B8F331936A9C3786664C6159BA2308F reg_errcode_t;
struct request_sense {unsigned __int8 valid : 1;unsigned __int8 error_code : 7;__u8 segment_number;unsigned __int8 reserved1 : 2;unsigned __int8 ili : 1;unsigned __int8 reserved2 : 1;unsigned __int8 sense_key : 4;__u8 information[4];__u8 add_sense_len;__u8 command_info[4];__u8 asc;__u8 ascq;__u8 fruc;__u8 sks[3];__u8 asb[46];};
struct rta_mfc_stats {__u64 mfcs_packets;__u64 mfcs_bytes;__u64 mfcs_wrong_if;};
struct scc_hw_config {io_port data_a;io_port ctrl_a;io_port data_b;io_port ctrl_b;io_port vector_latch;io_port special;int irq;__int64 clock;char option;char brand;char escc;};
struct sioc_mif_req6 {mifi_t mifi;unsigned __int64 icount;unsigned __int64 ocount;unsigned __int64 ibytes;unsigned __int64 obytes;};
struct sock_diag_req {__u8 sdiag_family;__u8 sdiag_protocol;};
struct sockaddr_iucv {sa_family_t siucv_family;unsigned __int16 siucv_port;unsigned int siucv_addr;char siucv_nodeid[8];char siucv_user_id[8];char siucv_name[8];};
struct tc_cbq_lssopt {unsigned __int8 change;unsigned __int8 flags;unsigned __int8 ewma_log;unsigned __int8 level;__u32 maxidle;__u32 minidle;__u32 offtime;__u32 avpkt;};
struct tc_cbq_wrropt {unsigned __int8 flags;unsigned __int8 priority;unsigned __int8 cpriority;unsigned __int8 __reserved;__u32 allot;__u32 weight;};
struct tc_choke_qopt {__u32 limit;__u32 qth_min;__u32 qth_max;unsigned __int8 Wlog;unsigned __int8 Plog;unsigned __int8 Scell_log;unsigned __int8 flags;};
struct tc_htb_xstats {__u32 lends;__u32 borrows;__u32 giants;__u32 tokens;__u32 ctokens;};
struct tc_netem_corr {__u32 delay_corr;__u32 loss_corr;__u32 dup_corr;};
struct tc_netem_qopt {__u32 latency;__u32 limit;__u32 loss;__u32 gap;__u32 duplicate;__u32 jitter;};
struct tc_red_xstats {__u32 early;__u32 pdrop;__u32 other;__u32 marked;};
struct tc_sfb_xstats {__u32 earlydrop;__u32 penaltydrop;__u32 bucketdrop;__u32 queuedrop;__u32 childdrop;__u32 marked;__u32 maxqlen;__u32 maxprob;__u32 avgprob;};
struct tc_sfq_xstats {__s32 allot;};
struct tcpvegas_info {__u32 tcpv_enabled;__u32 tcpv_rttcnt;__u32 tcpv_rtt;__u32 tcpv_minrtt;};
struct td_thr_events {uint32_t event_bits[2];};
typedef int td_thr_iter_f(const td_thrhandle_t *, void *);
typedef enum _89FB60EA18EC68E58342D0F505790FD5 td_thr_type_e;
struct tipc_name_seq {__u32 type;__u32 lower;__u32 upper;};
struct tlv_list_desc {struct tlv_desc *tlv_ptr;__u32 tlv_space;};
struct unix_diag_vfs {__u32 udiag_vfs_ino;__u32 udiag_vfs_dev;};
struct __attribute__((packed)) usb_handshake {__u8 bMessageNumber;__u8 bStatus;__u8 tTKID[3];__u8 bReserved;__u8 CDID[16];__u8 nonce[16];__u8 MIC[8];};
struct __attribute__((packed)) v4l2_rds_data {__u8 lsb;__u8 msb;__u8 block;};
struct vfio_irq_info {__u32 argsz;__u32 flags;__u32 index;__u32 count;};
typedef xPolyTextReq xPolyText8Req;
typedef xXIEnterEvent xXILeaveEvent;
typedef uint8_t xcb_keycode_t;
struct xcb_segment_t {int16_t x1;int16_t y1;int16_t x2;int16_t y2;};
typedef uint32_t xcb_shm_seg_t;
typedef uint32_t xcb_xv_port_t;
struct xfrmu_spdinfo {__u32 incnt;__u32 outcnt;__u32 fwdcnt;__u32 inscnt;__u32 outscnt;__u32 fwdscnt;};
struct xt_audit_info {__u8 type;};
typedef pthread_key_t xthread_key_t;
struct ypdelete_args {char *mapname;yp_buf key;};
struct ypupdate_args {char *mapname;yp_buf key;yp_buf datum;};
struct zatm_pool_req {int pool_num;struct zatm_pool_info info;};
typedef int64_t Elf32_Sxword;
typedef int64_t Elf64_Sxword;
typedef enum _038CC4C7C84F4F08B3B749DDF010BA25 FontEncoding;
typedef void (*FreeFuncType)(Display *);
typedef enum _DBF60D5FB5714F72F7E879ABF8093E1F IXJ_SIGEVENT;
struct RUNTIME_9060 {__u32 loc_addr_range;__u32 loc_addr_base;__u32 loc_arbitr;__u32 endian_descr;__u32 loc_rom_range;__u32 loc_rom_base;__u32 loc_bus_descr;__u32 loc_range_mst;__u32 loc_base_mst;__u32 loc_range_io;__u32 pci_base_mst;__u32 pci_conf_io;__u32 filler1;__u32 filler2;__u32 filler3;__u32 filler4;__u32 mail_box_0;__u32 mail_box_1;__u32 mail_box_2;__u32 mail_box_3;__u32 filler5;__u32 filler6;__u32 filler7;__u32 filler8;__u32 pci_doorbell;__u32 loc_doorbell;__u32 intr_ctrl_stat;__u32 init_ctrl;};
typedef int (*ResetFpeFunc)(FontPathElementPtr fpe);
typedef enum _2ADC401C2E21ED1A63A0FE0B868E544D XOrientation;
typedef XID XSyncCounter;
typedef XrmQuarkList XrmClassList;
typedef XrmHashBucket *XrmHashTable;
typedef XID XvEncodingID;
struct _XkbControls {unsigned __int8 mk_dflt_btn;unsigned __int8 num_groups;unsigned __int8 groups_wrap;XkbModsRec internal;XkbModsRec ignore_lock;unsigned int enabled_ctrls;unsigned __int16 repeat_delay;unsigned __int16 repeat_interval;unsigned __int16 slow_keys_delay;unsigned __int16 debounce_delay;unsigned __int16 mk_delay;unsigned __int16 mk_interval;unsigned __int16 mk_time_to_max;unsigned __int16 mk_max_speed;__int16 mk_curve;unsigned __int16 ax_options;unsigned __int16 ax_timeout;unsigned __int16 axt_opts_mask;unsigned __int16 axt_opts_values;unsigned int axt_ctrls_mask;unsigned int axt_ctrls_values;unsigned __int8 per_key_repeat[32];};
struct __fat_dirent {__int64 d_ino;__kernel_off_t d_off;unsigned __int16 d_reclen;char d_name[256];};
typedef int __io_seek_fn(void *cookie, __off64_t *pos, int w);
typedef pthread_key_t __libc_key_t;
struct _libc_xmmreg {__uint32_t element[4];};
struct arc_hardware {__u8 source;__u8 dest;__u8 offset[2];};
struct arpd_request {unsigned __int16 req;u_int32_t ip;unsigned __int64 dev;unsigned __int64 stamp;unsigned __int64 updated;unsigned __int8 ha[7];};
struct arpt_getinfo {char name[32];unsigned int valid_hooks;unsigned int hook_entry[3];unsigned int underflow[3];unsigned int num_entries;unsigned int size;};
struct audit_status {__u32 mask;__u32 enabled;__u32 failure;__u32 pid;__u32 rate_limit;__u32 backlog_limit;__u32 lost;__u32 backlog;};
struct baycom_ioctl {int cmd;union baycom_ioctl___F7F4D081547B704FD9326E93E92455B8 data;};
struct can_ctrlmode {__u32 mask;__u32 flags;};
struct capi_version {__u32 majorversion;__u32 minorversion;__u32 majormanuversion;__u32 minormanuversion;};
struct cdrom_tochdr {__u8 cdth_trk0;__u8 cdth_trk1;};
struct cuse_init_in {uint32_t major;uint32_t minor;uint32_t unused;uint32_t flags;};
typedef enum _8342ACF1596C20AFB098E0618220285F dmx_output_t;
typedef enum _5A024065603B52F79011217893D48477 dmx_source_t;
struct dvd_manufact {__u8 type;__u8 layer_num;int len;__u8 value[2048];};
struct fb_con2fbmap {__u32 console;__u32 framebuffer;};
struct fc_gspn_resp {__u8 fp_name_len;char fp_name[];};
struct fc_ns_gid_ft {__u8 fn_resvd;__u8 fn_domain_id_scope;__u8 fn_area_id_scope;__u8 fn_fc4_type;};
struct fc_ns_gid_pt {__u8 fn_pt_type;__u8 fn_domain_id_scope;__u8 fn_area_id_scope;__u8 fn_resvd;};
struct fc_ns_pt_obj {__u8 pt_type;};
typedef enum fe_rolloff fe_rolloff_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
struct fstrim_range {__u64 start;__u64 len;__u64 minlen;};
struct fuse_init_in {uint32_t major;uint32_t minor;uint32_t max_readahead;uint32_t flags;};
struct fuse_link_in {uint64_t oldnodeid;};
struct fuse_open_in {uint32_t flags;uint32_t unused;};
struct hdsp_version {enum HDSP_IO_Type io_type;unsigned __int16 firmware_rev;};
struct i2o_evt_info {struct i2o_evt_id id;unsigned __int8 evt_data[88];unsigned int data_size;};
struct icmp6_filter {uint32_t icmp6_filt[8];};
struct icmp_ra_addr {u_int32_t ira_addr;u_int32_t ira_preference;};
struct ieee_maxrate {__u64 tc_maxrate[8];};
struct if_irda_line {__u8 dtr;__u8 rts;};
struct ifla_vf_vlan {__u32 vf;__u32 vlan;__u32 qos;};
struct ip6_opt_nsap {uint8_t ip6on_type;uint8_t ip6on_len;uint8_t ip6on_src_nsap_len;uint8_t ip6on_dst_nsap_len;};
struct ip6t_getinfo {char name[32];unsigned int valid_hooks;unsigned int hook_entry[5];unsigned int underflow[5];unsigned int num_entries;unsigned int size;};
struct ip6t_hl_info {__u8 mode;__u8 hop_limit;};
struct ipt_ttl_info {__u8 mode;__u8 ttl;};
typedef int32_t key_serial_t;
struct kvm_mp_state {__u32 mp_state;};
struct kvm_msr_list {__u32 nmsrs;__u32 indices[];};
struct kvm_reg_list {__u64 n;__u64 reg[];};
struct kvm_s390_psw {__u64 mask;__u64 addr;};
struct llc_snap_hdr {__u8 dsap;__u8 ssap;__u8 ui;__u8 org[3];__u8 type[2];};
struct nand_oobfree {__u32 offset;__u32 length;};
struct nand_oobinfo {__u32 useecc;__u32 eccbytes;__u32 oobfree[8][2];__u32 eccpos[32];};
struct nduseroptmsg {unsigned __int8 nduseropt_family;unsigned __int8 nduseropt_pad1;unsigned __int16 nduseropt_opts_len;int nduseropt_ifindex;__u8 nduseropt_icmp_type;__u8 nduseropt_icmp_code;unsigned __int16 nduseropt_pad2;unsigned int nduseropt_pad3;};
typedef enum __ns_key_types ns_key_types;
struct nubus_dirent {unsigned __int8 *base;unsigned __int8 type;__u32 data;int mask;};
struct ovs_dp_stats {__u64 n_hit;__u64 n_missed;__u64 n_lost;__u64 n_flows;};
struct ovs_key_icmp {__u8 icmp_type;__u8 icmp_code;};
typedef void (*plugin_log_t)(openvpn_plugin_log_flags_t flags, const char *plugin_name, const char *format, ...);
typedef elf_fpregset_t prfpregset_t;
typedef __u8 qnx4_ftype_t;
struct re_registers {unsigned int num_regs;regoff_t *start;regoff_t *end;};
typedef __s32 sctp_assoc_t;
struct sctp_initmsg {__u16 sinit_num_ostreams;__u16 sinit_max_instreams;__u16 sinit_max_attempts;__u16 sinit_max_init_timeo;};
struct serial_rs485 {__u32 flags;__u32 delay_rts_before_send;__u32 delay_rts_after_send;__u32 padding[5];};
typedef __sig_atomic_t sig_atomic_t;
typedef __sighandler_t sighandler_t;
struct sioc_vif_req {vifi_t vifi;unsigned __int64 icount;unsigned __int64 ocount;unsigned __int64 ibytes;unsigned __int64 obytes;};
struct snd_enc_flac {__u32 num;__u32 gain;};
struct snd_enc_real {__u32 quant_bits;__u32 start_region;__u32 num_regions;};
struct sockaddr_ash {sa_family_t sash_family;int sash_ifindex;unsigned __int8 sash_channel;unsigned int sash_plen;unsigned __int8 sash_prefix[16];};
struct sockaddr_llc {__kernel_sa_family_t sllc_family;__kernel_sa_family_t sllc_arphrd;unsigned __int8 sllc_test;unsigned __int8 sllc_xid;unsigned __int8 sllc_ua;unsigned __int8 sllc_sap;unsigned __int8 sllc_mac[6];unsigned __int8 __pad[2];};
struct sockaddr_pkt {sa_family_t spkt_family;unsigned __int8 spkt_device[14];unsigned __int16 spkt_protocol;};
typedef enum _F36832D1A8492353777D3B766025617E socket_state;
struct tc_drr_stats {__u32 deficit;};
struct tc_fifo_qopt {__u32 limit;};
struct tc_hfsc_qopt {__u16 defcls;};
struct tc_pedit_key {__u32 mask;__u32 val;__u32 off;__u32 at;__u32 offmask;__u32 shift;};
struct tc_plug_qopt {int action;__u32 limit;};
struct tc_prio_qopt {int bands;__u8 priomap[16];};
struct tc_qfq_stats {__u32 weight;__u32 lmax;};
struct tcf_em_nbyte {__u16 off;unsigned __int16 len : 12;unsigned __int8 layer : 4;};
typedef pthread_key_t thread_key_t;
struct usbdevfs_urb {unsigned __int8 type;unsigned __int8 endpoint;int status;unsigned int flags;void *buffer;int buffer_length;int actual_length;int start_frame;int number_of_packets;int error_count;unsigned int signr;void *usercontext;struct usbdevfs_iso_packet_desc iso_frame_desc[];};
typedef xPolyPointReq xPolyLineReq;
typedef uint8_t xcb_button_t;
struct xcb_char2b_t {uint8_t byte1;uint8_t byte2;};
typedef uint32_t xcb_cursor_t;
struct xcb_format_t {uint8_t depth;uint8_t bits_per_pixel;uint8_t scanline_pad;uint8_t pad0[5];};
typedef uint32_t xcb_keysym_t;
typedef uint32_t xcb_pixmap_t;
typedef uint32_t xcb_window_t;
typedef xcondition_rec *xcondition_t;
struct xt_DSCP_info {__u8 dscp;};
struct xt_dscp_info {__u8 dscp;__u8 invert;};
struct COFF_lineno {union COFF_lineno___EB2C3E8F56ACA6629C4DF3C25298B95B l_addr;char l_lnno[2];};
struct COFF_syment {union COFF_syment___012205A2FD59DD97F518116F0BCD0B1F e;char e_value[4];char e_scnum[2];char e_type[2];char e_sclass[1];char e_numaux[1];};
typedef int32_t Elf32_Sword;
typedef uint64_t Elf32_Xword;
typedef __s16 Elf64_SHalf;
typedef int32_t Elf64_Sword;
typedef uint64_t Elf64_Xword;
typedef int (*FreeFpeFunc)(FontPathElementPtr fpe);
typedef enum _A64A6485A3EA322157715C598EBB29F4 IRDA_DONGLE;
typedef int (*InitFpeFunc)(FontPathElementPtr fpe);
typedef enum _F3466220812A2E418E930C294A45C6EA OSD_Command;
typedef XrmQuarkList XrmNameList;
struct _ExtentInfo {DrawDirection drawDirection;int fontAscent;int fontDescent;int overallAscent;int overallDescent;int overallWidth;int overallLeft;int overallRight;};
struct _POINTBLOCK {XPoint pts[200];struct _POINTBLOCK *next;};
struct _XkbOutline {unsigned __int16 num_points;unsigned __int16 sz_points;unsigned __int16 corner_radius;XkbPointPtr points;};
typedef int (*__gconv_fct)(struct __gconv_step *, struct __gconv_step_data *, const unsigned __int8 **, const unsigned __int8 *, unsigned __int8 **, size_t *, int, int);
struct _agp_unbind {int key;__u32 priority;};
struct _ymmh_state {__uint32_t ymmh_space[64];};
struct agp_version {__u16 major;__u16 minor;};
struct arc_rfc1051 {__u8 proto;__u8 payload[];};
struct cgroupstats {__u64 nr_sleeping;__u64 nr_running;__u64 nr_stopped;__u64 nr_uninterruptible;__u64 nr_io_wait;};
struct cramfs_info {__u32 crc;__u32 edition;__u32 blocks;__u32 files;};
typedef enum _2D9AFB5301F88CF2B834A26D4E6AE961 dmx_input_t;
struct dvd_disckey {__u8 type;unsigned __int32 agid : 2;__u8 value[2048];};
struct ethtool_eee {__u32 cmd;__u32 supported;__u32 advertised;__u32 lp_advertised;__u32 eee_active;__u32 eee_enabled;__u32 tx_lpi_enabled;__u32 tx_lpi_timer;__u32 reserved[2];};
struct fb_bitfield {__u32 offset;__u32 length;__u32 msb_right;};
struct fb_copyarea {__u32 dx;__u32 dy;__u32 width;__u32 height;__u32 sx;__u32 sy;};
struct fb_fillrect {__u32 dx;__u32 dy;__u32 width;__u32 height;__u32 color;__u32 rop;};
struct fc_els_lirr {__u8 lirr_cmd;__u8 lirr_resv[3];__u8 lirr_func;__u8 lirr_fmt;__u8 lirr_resv2[2];};
struct fc_els_rlir {__u8 rlir_cmd;__u8 rlir_resv[3];__u8 rlir_fmt;__u8 rlir_clr_len;__u8 rlir_cld_len;__u8 rlir_slr_len;};
struct fc_els_rnid {__u8 rnid_cmd;__u8 rnid_resv[3];__u8 rnid_fmt;__u8 rnid_resv2[3];};
struct fddi_header {u_int8_t fddi_fc;u_int8_t fddi_dhost[6];u_int8_t fddi_shost[6];};
typedef enum fe_status fe_status_t;
typedef fsResourceReq fsFreeACReq;
typedef CARD32 fsTimestamp;
struct hdspm_mixer {struct hdspm_channelfader ch[64];};
struct i2o_evt_get {struct i2o_evt_info info;int pending;int lost;};
typedef __u16 ip_set_id_t;
struct ip_vs_flags {__u32 flags;__u32 mask;};
struct ipt_getinfo {char name[32];unsigned int valid_hooks;unsigned int hook_entry[5];unsigned int underflow[5];unsigned int num_entries;unsigned int size;};
struct kvm_one_reg {__u64 id;__u64 addr;};
struct mgsl_icount {__u32 cts;__u32 dsr;__u32 rng;__u32 dcd;__u32 tx;__u32 rx;__u32 frame;__u32 parity;__u32 overrun;__u32 brk;__u32 buf_overrun;__u32 txok;__u32 txunder;__u32 txabort;__u32 txtimeout;__u32 rxshort;__u32 rxlong;__u32 rxabort;__u32 rxover;__u32 rxcrc;__u32 rxok;__u32 exithunt;__u32 rxidle;};
struct mtd_oob_buf {__u32 start;__u32 length;unsigned __int8 *ptr;};
struct new_utsname {char sysname[65];char nodename[65];char release[65];char version[65];char machine[65];char domainname[65];};
struct nl_mmap_hdr {unsigned int nm_status;unsigned int nm_len;__u32 nm_group;__u32 nm_pid;__u32 nm_uid;__u32 nm_gid;};
struct ns_tsig_key {char name[1025];char alg[1025];unsigned __int8 *data;int len;};
struct nw_nfs_info {__u32 mode;__u32 rdev;};
struct omapfb_caps {__u32 ctrl;__u32 plane_color;__u32 wnd_color;};
typedef enum _ABB8C31B92B6C4B8DC4BEE3F40D939D6 phone_codec;
typedef enum _5E39050E33ED31726BC937556AF5832E phone_ports;
struct pool_levels {int buftype;int count;buf_nr level;};
typedef elf_gregset_t prgregset_t;
struct random_data {int32_t *fptr;int32_t *rptr;int32_t *state;int rand_type;int rand_deg;int rand_sep;int32_t *end_ptr;};
struct rpc_timeval {uint32_t tv_sec;uint32_t tv_usec;};
typedef enum sctp_cmsg_type sctp_cmsg_t;
struct sigaltstack {void *ss_sp;int ss_flags;size_t ss_size;};
struct sm_stat_res {res res_stat;int state;};
struct snd_enc_wma {__u32 super_block_align;};
struct sockaddr_un {sa_family_t sun_family;char sun_path[108];};
typedef __suseconds_t suseconds_t;
struct tc_cbq_fopt {__u32 split;__u32 defmap;__u32 defchange;};
struct tc_htb_glob {__u32 version;__u32 rate2quantum;__u32 defcls;__u32 debug;__u32 direct_pkts;};
struct tc_red_qopt {__u32 limit;__u32 qth_min;__u32 qth_max;unsigned __int8 Wlog;unsigned __int8 Plog;unsigned __int8 Scell_log;unsigned __int8 flags;};
struct tc_rsvp_gpi {__u32 key;__u32 mask;int offset;};
struct tc_sfb_qopt {__u32 rehash_interval;__u32 warmup_time;__u32 max;__u32 bin_size;__u32 increment;__u32 decrement;__u32 limit;__u32 penalty_rate;__u32 penalty_burst;};
struct tc_sfq_qopt {unsigned int quantum;int perturb_period;__u32 limit;unsigned int divisor;unsigned int flows;};
struct tc_u32_mark {__u32 val;__u32 mask;__u32 success;};
struct tc_u32_pcnt {__u64 rcnt;__u64 rhit;__u64 kcnts[];};
typedef enum _E1B461D6ADC649FA7943809455C6C6EE td_notify_e;
struct tinfo_fkeys {unsigned int offset;chtype code;};
struct tipc_portid {__u32 ref;__u32 node;};
typedef __u64 v4l2_std_id;
struct vring_avail {__u16 flags;__u16 idx;__u16 ring[];};
typedef xPolySegmentReq xPolyArcReq;
struct xcb_point_t {int16_t x;int16_t y;};
struct xt_NFQ_info {__u16 queuenum;};
struct xt_counters {__u64 pcnt;__u64 bcnt;};
struct xt_cpu_info {__u32 cpu;__u32 invert;};
struct xt_osf_info {char genre[32];__u32 len;__u32 flags;__u32 loglevel;__u32 ttl;};
struct xt_rateinfo {__u32 avg;__u32 burst;unsigned __int64 prev;__u32 credit;__u32 credit_cap;__u32 cost;struct xt_limit_priv *master;};
typedef FSID AccContext;
struct BOARD_CTRL {__u32 n_channel;__u32 fw_version;__u32 op_system;__u32 dr_version;__u32 inactivity;__u32 hcmd_channel;__u32 hcmd_param;__u32 fwcmd_channel;__u32 fwcmd_param;__u32 zf_int_queue_addr;__u32 filler[6];};
struct CUSTOM_REG {__u32 fpga_id;__u32 fpga_version;__u32 cpu_start;__u32 cpu_stop;__u32 misc_reg;__u32 idt_mode;__u32 uart_irq_status;__u32 clear_timer0_irq;__u32 clear_timer1_irq;__u32 clear_timer2_irq;__u32 test_register;__u32 test_count;__u32 timer_select;__u32 pr_uart_irq_status;__u32 ram_wait_state;__u32 uart_wait_state;__u32 timer_wait_state;__u32 ack_wait_state;};
typedef uint32_t Elf32_Addr;
typedef uint16_t Elf32_Half;
typedef uint32_t Elf32_Word;
typedef uint64_t Elf64_Addr;
typedef uint16_t Elf64_Half;
typedef uint32_t Elf64_Word;
typedef uint32_t Elf_Symndx;
typedef CARD16 KeyButMask;
typedef XID PictFormat;
typedef CARD32 VisualID32;
typedef XID XSyncAlarm;
typedef XID XSyncFence;
typedef enum _5A773820A0D67B4336D2749C8D45D255 XrmBinding;
struct _XLockPtrs {void (*lock_display)(Display *dpy);void (*unlock_display)(Display *dpy);};
struct __mf_cache {__mf_uintptr_t low;__mf_uintptr_t high;};
struct _agp_setup {__u32 agp_mode;};
struct _xAxisInfo {CARD32 resolution;CARD32 min_value;CARD32 max_value;};
struct _xsave_hdr {__uint64_t xstate_bv;__uint64_t reserved1[2];__uint64_t reserved2[5];};
struct argp_state {const struct argp *root_argp;int argc;char **argv;int next;unsigned int flags;unsigned int arg_num;int quoted;void *input;void **child_inputs;void *hook;char *name;FILE *err_stream;FILE *out_stream;void *pstate;};
struct audit_rule {__u32 flags;__u32 action;__u32 field_count;__u32 mask[64];__u32 fields[64];__u32 values[64];};
typedef __blkcnt64_t blkcnt64_t;
struct bp_address {int address_type;union bp_address___3B940BBAFE206A608BBBF7EC1987BA49 bp_address_u;};
struct cdrom_msf0 {__u8 minute;__u8 second;__u8 frame;};
struct dmx_filter {__u8 filter[16];__u8 mask[16];__u8 mode[16];};
struct dtv_cmds_h {char *name;__u32 cmd;unsigned __int32 set : 1;unsigned __int32 buffer : 1;unsigned __int32 reserved : 30;};
struct elf32_note {Elf32_Word n_namesz;Elf32_Word n_descsz;Elf32_Word n_type;};
struct elf64_note {Elf64_Word n_namesz;Elf64_Word n_descsz;Elf64_Word n_type;};
struct __attribute__((packed)) ether_addr {u_int8_t ether_addr_octet[6];};
struct fc_els_rls {__u8 rls_cmd;__u8 rls_resv[4];__u8 rls_port_id[3];};
struct fc_els_rtv {__u8 rtv_cmd;__u8 rtv_zero[3];};
struct fc_els_scr {__u8 scr_cmd;__u8 scr_resv[6];__u8 scr_reg_func;};
struct fc_els_srl {__u8 srl_cmd;__u8 srl_resv[3];__u8 srl_flag;__u8 srl_flag_param[3];};
typedef enum fe_pilot fe_pilot_t;
typedef fsResourceReq fsCloseReq;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
struct kbdiacrsuc {unsigned int kb_cnt;struct kbdiacruc kbdiacruc[256];};
struct mixer_info {char id[16];char name[32];int modify_counter;int fillers[10];};
struct nd_opt_hdr {uint8_t nd_opt_type;uint8_t nd_opt_len;};
struct netconfmsg {__u8 ncm_family;};
struct nl_pktinfo {__u32 group;};
struct rex_result {int rlt_stat;rexstring rlt_message;};
struct rtc_wkalrm {unsigned __int8 enabled;unsigned __int8 pending;struct rtc_time time;};
struct sis_memreq {__u32 offset;__u32 size;};
struct synth_info {char name[30];int device;int synth_type;int synth_subtype;int perc_mode;int nr_voices;int nr_drums;int instr_bank_size;unsigned int capabilities;int dummies[19];};
struct tc_skbedit {__u32 index;__u32 capab;int action;int refcnt;int bindcnt;};
typedef enum _65CF98EECFB69F691B0631C04FBFD9D4 td_event_e;
typedef __useconds_t useconds_t;
struct v4l2_fract {__u32 numerator;__u32 denominator;};
typedef uint32_t xcb_atom_t;
typedef uint32_t xcb_font_t;
struct xfrm_stats {__u32 replay_window;__u32 replay;__u32 integrity_failed;};
typedef pthread_mutex_t xmutex_rec;
typedef Dwarf_Unsigned Dwarf_Tag;
typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;
typedef void (*Form_Hook)(FORM *);
struct _CharInfo {xCharInfo metrics;char *bits;};
struct _XExtData {int number;struct _XExtData *next;int (*free_private)(struct _XExtData *extension);XPointer private_data;};
struct _XSQEvent {struct _XSQEvent *next;XEvent event;unsigned __int64 qserial_num;};
typedef __quad_t *__qaddr_t;
struct _agp_bind {int key;__kernel_off_t pg_start;};
struct _xSegment {INT16 x1;INT16 y1;INT16 x2;INT16 y2;};
typedef __blksize_t blksize_t;
struct can_clock {__u32 freq;};
struct cdrom_mcn {__u8 medium_catalog_number[14];};
struct cdrom_msf {__u8 cdmsf_min0;__u8 cdmsf_sec0;__u8 cdmsf_frame0;__u8 cdmsf_min1;__u8 cdmsf_sec1;__u8 cdmsf_frame1;};
typedef __clockid_t clockid_t;
union des_block {struct des_block___8E96D37FBE99CA069DD91238980BB651 key;char c[8];};
struct dvd_layer {unsigned __int8 book_version : 4;unsigned __int8 book_type : 4;unsigned __int8 min_rate : 4;unsigned __int8 disc_size : 4;unsigned __int8 layer_type : 4;unsigned __int8 track_path : 1;unsigned __int8 nlayers : 2;unsigned __int8 track_density : 4;unsigned __int8 linear_density : 4;unsigned __int8 bca : 1;__u32 start_sector;__u32 end_sector;__u32 end_sector_l0;};
typedef uint64_t eventfd_t;
struct fb_vblank {__u32 flags;__u32 count;__u32 vcount;__u32 hcount;__u32 reserved[4];};
struct fc_ba_rjt {__u8 br_resvd;__u8 br_reason;__u8 br_explan;__u8 br_vendor;};
struct fc_ns_fid {__u8 fp_flags;__u8 fp_fid[3];};
struct fc_pf_rjt {__u8 rj_action;__u8 rj_reason;__u8 rj_resvd;__u8 rj_vendor;};
typedef enum fe_caps fe_caps_t;
typedef enum fe_type fe_type_t;
typedef fsReq fsNoopReq;
struct gpio_desc {__u32 state;__u32 smask;__u32 dir;__u32 dmask;};
typedef greg_t gregset_t[23];
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
struct __attribute__((packed)) inftl_bci {__u8 ECCsig[6];__u8 Status;__u8 Status1;};
struct ip6_rthdr {uint8_t ip6r_nxt;uint8_t ip6r_len;uint8_t ip6r_type;uint8_t ip6r_segleft;};
struct ip6t_icmp {__u8 type;__u8 code[2];__u8 invflags;};
struct ipmi_recv {int recv_type;unsigned __int8 *addr;unsigned int addr_len;__int64 msgid;struct ipmi_msg msg;};
struct kvm_xsave {__u32 region[1024];};
struct loop_info {int lo_number;__kernel_old_dev_t lo_device;unsigned __int64 lo_inode;__kernel_old_dev_t lo_rdevice;int lo_offset;int lo_encrypt_type;int lo_encrypt_key_size;int lo_flags;char lo_name[64];unsigned __int8 lo_encrypt_key[32];unsigned __int64 lo_init[2];char reserved[4];};
typedef __mbstate_t mbstate_t;
struct midi_info {char name[30];int device;unsigned int capabilities;int dev_type;int dummies[18];};
typedef __syscall_ulong_t msgqnum_t;
typedef __u8 mtrr_type;
struct ndt_stats {__u64 ndts_allocs;__u64 ndts_destroys;__u64 ndts_hash_grows;__u64 ndts_res_failed;__u64 ndts_lookups;__u64 ndts_hits;__u64 ndts_rcv_probes_mcast;__u64 ndts_rcv_probes_ucast;__u64 ndts_periodic_gc_runs;__u64 ndts_forced_gc_runs;};
struct __attribute__((packed)) nftl_uci0 {__u16 VirtUnitNum;__u16 ReplUnitNum;__u16 SpareVirtUnitNum;__u16 SpareReplUnitNum;};
typedef enum __ns_opcode ns_opcode;
struct osd_cmd_s {OSD_Command cmd;int x0;int y0;int x1;int y1;int color;void *data;};
typedef enum _8B9F5C98200A9797B04E3604F16BEDF6 phone_cap;
struct rds_iovec {uint64_t addr;uint64_t bytes;};
struct rnd_state {__u32 s1;__u32 s2;__u32 s3;};
struct sbi_patch {unsigned __int8 prog;unsigned __int8 bank;char key[4];char name[25];char extension[7];unsigned __int8 data[32];};
struct sisfb_cmd {__u32 sisfb_cmd;__u32 sisfb_arg[16];__u32 sisfb_result[4];};
typedef __socklen_t socklen_t;
struct table_col {char *tc_name;uint32_t tc_flags;uint32_t tc_rights;};
struct tc_gact_p {__u16 ptype;__u16 pval;int paction;};
struct tc_mirred {__u32 index;__u32 capab;int action;int refcnt;int bindcnt;int eaction;__u32 ifindex;};
struct tipc_name {__u32 type;__u32 instance;};
struct v4l2_rect {__s32 left;__s32 top;__s32 width;__s32 height;};
typedef const __int32_t *wctrans_t;
struct xcb_str_t {uint8_t name_len;};
typedef bool_t (*xdrproc_t)(XDR *, void *, ...);
struct xfrm_mark {__u32 v;__u32 m;};
struct xt_osf_wc {__u32 wc;__u32 val;};
typedef pthread_t xthread_t;
struct ypmaplist {mapname map;struct ypmaplist *next;};
struct BUF_CTRL {__u32 flag_dma;__u32 tx_bufaddr;__u32 tx_bufsize;__u32 tx_threshold;__u32 tx_get;__u32 tx_put;__u32 rx_bufaddr;__u32 rx_bufsize;__u32 rx_threshold;__u32 rx_get;__u32 rx_put;__u32 filler[5];};
typedef XID Colormap;
typedef XID Drawable;
typedef XID GContext;
typedef XID GlyphSet;
typedef enum _EBAB663850F5FC0FD60D9237EF3E5FCE IXJ_FREQ;
typedef enum _4873ED9D71E14D937DD4FDACF169E857 IXJ_NOTE;
typedef XrmQuark XrmClass;
typedef XID XvPortID;
struct _XRegion {__int64 size;__int64 numRects;BOX *rects;BOX extents;};
typedef __off64_t __loff_t;
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;socklen_t ai_addrlen;struct sockaddr *ai_addr;char *ai_canonname;struct addrinfo *ai_next;};
struct aliasent {char *alias_name;size_t alias_members_len;char **alias_members;int alias_local;};
typedef __blkcnt_t blkcnt_t;
struct cdrom_ti {__u8 cdti_trk0;__u8 cdti_ind0;__u8 cdti_trk1;__u8 cdti_ind1;};
struct __attribute__((packed)) cld_name {uint16_t cn_len;unsigned __int8 cn_id[1024];};
struct compstat {__u32 unc_bytes;__u32 unc_packets;__u32 comp_bytes;__u32 comp_packets;__u32 inc_bytes;__u32 inc_packets;__u32 in_count;__u32 bytes_out;double ratio;};
struct dlm_lksb {int sb_status;__u32 sb_lkid;char sb_flags;char *sb_lvbptr;};
struct dmx_caps {__u32 caps;int num_decoders;};
struct efi_info {__u32 efi_loader_signature;__u32 efi_systab;__u32 efi_memdesc_size;__u32 efi_memdesc_version;__u32 efi_memmap;__u32 efi_memmap_size;__u32 efi_systab_hi;__u32 efi_memmap_hi;};
typedef __u32 ext_accm[8];
struct fbcurpos {__u16 x;__u16 y;};
typedef _G_fpos64_t fpos64_t;
typedef enum _891529C55A3D7F6C466AE0BA608A35EA idtype_t;
struct ieee_ets {__u8 willing;__u8 ets_cap;__u8 cbs;__u8 tc_tx_bw[8];__u8 tc_rx_bw[8];__u8 tc_tsa[8];__u8 prio_tc[8];__u8 tc_reco_bw[8];__u8 tc_reco_tsa[8];__u8 reco_prio_tc[8];};
typedef __intptr_t intptr_t;
struct ip6_dest {uint8_t ip6d_nxt;uint8_t ip6d_len;};
struct ipmi_req {unsigned __int8 *addr;unsigned int addr_len;__int64 msgid;struct ipmi_msg msg;};
struct ipt_icmp {__u8 type;__u8 code[2];__u8 invflags;};
struct ist_info {__u32 signature;__u32 command;__u32 event;__u32 perf_level;};
struct kbdiacrs {unsigned int kb_cnt;struct kbdiacr kbdiacr[256];};
struct klm_stat {klm_stats stat;};
struct kvm_regs {__u64 rax;__u64 rbx;__u64 rcx;__u64 rdx;__u64 rsi;__u64 rdi;__u64 rsp;__u64 rbp;__u64 r8;__u64 r9;__u64 r10;__u64 r11;__u64 r12;__u64 r13;__u64 r14;__u64 r15;__u64 rip;__u64 rflags;};
typedef __locale_t locale_t;
typedef __syscall_ulong_t msglen_t;
struct __attribute__((packed)) nftl_bci {unsigned __int8 ECCSig[6];__u8 Status;__u8 Status1;};
struct nlm_stat {nlm_stats stat;};
typedef enum __ns_class ns_class;
typedef enum __ns_rcode ns_rcode;
struct otp_info {__u32 start;__u32 length;__u32 locked;};
struct phm_regs {__u32 count;__u32 mask;__u32 values[8];};
struct pmaplist {struct pmap pml_map;struct pmaplist *pml_next;};
struct ppp_idle {__kernel_time_t xmit_idle;__kernel_time_t recv_idle;};
typedef __rlim64_t rlim64_t;
struct rlimit64 {rlim64_t rlim_cur;rlim64_t rlim_max;};
struct __attribute__((packed)) sadb_ext {__u16 sadb_ext_len;__u16 sadb_ext_type;};
struct __attribute__((packed)) sadb_key {__u16 sadb_key_len;__u16 sadb_key_exttype;__u16 sadb_key_bits;__u16 sadb_key_reserved;};
struct sg_iovec {void *iov_base;size_t iov_len;};
struct shm_info {int used_ids;__syscall_ulong_t shm_tot;__syscall_ulong_t shm_rss;__syscall_ulong_t shm_swp;__syscall_ulong_t swap_attempts;__syscall_ulong_t swap_successes;};
typedef __syscall_ulong_t shmatt_t;
typedef __sigset_t sigset_t;
struct snd_mask {__u32 bits[8];};
struct sockaddr {sa_family_t sa_family;char sa_data[14];};
typedef enum _B66645BB19D3E41D07C841CC99076606 td_err_e;
typedef pthread_t thread_t;
struct typenode {unsigned __int16 status;__int64 ref;struct typenode *left;struct typenode *right;void *(*makearg)(va_list *);void *(*copyarg)(const void *);void (*freearg)(void *);bool (*fcheck)(FIELD *, const void *);bool (*ccheck)(int, const void *);bool (*next)(FIELD *, const void *);bool (*prev)(FIELD *, const void *);};
typedef __u_quad_t u_quad_t;
struct utmpidle {struct ru_utmp ui_utmp;unsigned int ui_idle;};
typedef xmutex_rec *xmutex_t;
struct CH_CTRL {__u32 op_mode;__u32 intr_enable;__u32 sw_flow;__u32 flow_status;__u32 comm_baud;__u32 comm_parity;__u32 comm_data_l;__u32 comm_flags;__u32 hw_flow;__u32 rs_control;__u32 rs_status;__u32 flow_xon;__u32 flow_xoff;__u32 hw_overflow;__u32 sw_overflow;__u32 comm_error;__u32 ichar;__u32 filler[7];};
struct FIRM_ID {__u32 signature;__u32 zfwctrl_addr;};
struct Gpm_Roi {__int16 xMin;__int16 xMax;__int16 yMin;__int16 yMax;unsigned __int16 minMod;unsigned __int16 maxMod;unsigned __int16 eventMask;unsigned __int16 owned;Gpm_Handler *handler;void *clientdata;struct Gpm_Roi *prev;struct Gpm_Roi *next;};
typedef CARD8 KEYCODE;
typedef XID Picture;
typedef XrmQuark XrmName;
struct _XkbKey {XkbKeyNameRec name;__int16 gap;unsigned __int8 shape_ndx;unsigned __int8 color_ndx;};
typedef __u16 __sum16;
struct _xPoint {INT16 x;INT16 y;};
struct _xmmreg {__uint32_t element[4];};
struct atm_qos {struct atm_trafprm txtp;struct atm_trafprm rxtp;unsigned __int8 aal;};
typedef __caddr_t caddr_t;
typedef __u32 canid_t;
struct cee_pfc {__u8 willing;__u8 error;__u8 pfc_en;__u8 tcs_supported;};
typedef __clock_t clock_t;
struct cmsghdr {size_t cmsg_len;int cmsg_level;int cmsg_type;unsigned __int8 __cmsg_data[];};
typedef __daddr_t daddr_t;
struct dmx_stc {unsigned int num;unsigned int base;__u64 stc;};
struct dvd_bca {__u8 type;int len;__u8 value[188];};
typedef __u8 dvd_key[5];
struct fch_hdr {__u8 daddr[6];__u8 saddr[6];};
struct fd_args {nis_name dir_name;nis_name requester;};
typedef __fd_mask fd_mask;
typedef fsCatalogueChangeNotifyEvent fsEvent;
typedef __u32 if_mask;
struct ifaddrs {struct ifaddrs *ifa_next;char *ifa_name;unsigned int ifa_flags;struct sockaddr *ifa_addr;struct sockaddr *ifa_netmask;union ifaddrs___5A9FB6B4293E0982D0D9C18B84AAF77B ifa_ifu;void *ifa_data;};
struct in_addr {in_addr_t s_addr;};
typedef __ino64_t ino64_t;
struct ip6_ext {uint8_t ip6e_nxt;uint8_t ip6e_len;};
struct ip6_hbh {uint8_t ip6h_nxt;uint8_t ip6h_len;};
struct ip6_opt {uint8_t ip6o_type;uint8_t ip6o_len;};
struct ip6t_mh {__u8 types[2];__u8 invflags;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct ip_opts {struct in_addr ip_dst;char ip_opts[40];};
struct lastlog {int32_t ll_time;char ll_line[32];char ll_host[256];};
typedef __pid_t lwpid_t;
typedef u_int16_t n_short;
struct netinfo {struct sockaddr rip_dst;int rip_metric;};
struct nis_oid {uint32_t ctime;uint32_t mtime;};
struct nis_tag {uint32_t tag_type;char *tag_val;};
typedef __nlink_t nlink_t;
struct npioctl {int protocol;enum NPmode mode;};
typedef enum __ns_flag ns_flag;
typedef enum __ns_sect ns_sect;
typedef enum __ns_type ns_type;
struct obstack {__int64 chunk_size;struct _obstack_chunk *chunk;char *object_base;char *next_free;char *chunk_limit;union obstack___F91006FBD6EB572A801247A9C58C8B69 temp;int alignment_mask;struct _obstack_chunk *(*chunkfun)(void *, __int64);void (*freefun)(void *, struct _obstack_chunk *);void *extra_arg;unsigned __int32 use_extra_arg : 1;unsigned __int32 maybe_empty_object : 1;unsigned __int32 alloc_failed : 1;};
typedef __off64_t off64_t;
struct phm_reg {__u32 reg;__u32 value;};
struct pppstat {__u32 ppp_discards;__u32 ppp_ibytes;__u32 ppp_ioctects;__u32 ppp_ipackets;__u32 ppp_ierrors;__u32 ppp_ilqrs;__u32 ppp_obytes;__u32 ppp_ooctects;__u32 ppp_opackets;__u32 ppp_oerrors;__u32 ppp_olqrs;};
struct rtentry {unsigned __int64 rt_pad1;struct sockaddr rt_dst;struct sockaddr rt_gateway;struct sockaddr rt_genmask;unsigned __int16 rt_flags;__int16 rt_pad2;unsigned __int64 rt_pad3;unsigned __int8 rt_tos;unsigned __int8 rt_class;__int16 rt_pad4[3];__int16 rt_metric;char *rt_dev;unsigned __int64 rt_mtu;unsigned __int64 rt_window;unsigned __int16 rt_irtt;};
struct shminfo {__syscall_ulong_t shmmax;__syscall_ulong_t shmmin;__syscall_ulong_t shmmni;__syscall_ulong_t shmseg;__syscall_ulong_t shmall;__syscall_ulong_t __unused1;__syscall_ulong_t __unused2;__syscall_ulong_t __unused3;__syscall_ulong_t __unused4;};
typedef __ssize_t ssize_t;
struct tc_csum {__u32 index;__u32 capab;int action;int refcnt;int bindcnt;__u32 update_flags;};
struct tc_gact {__u32 index;__u32 capab;int action;int refcnt;int bindcnt;};
struct __attribute__((packed)) tftphdr {__int16 th_opcode;__attribute__((packed)) union tftphdr___F0E260BA94295889B6F0F49F83AB5E48 th_u1;};
typedef __timer_t timer_t;
typedef __u_short u_short;
struct utimbuf {__time_t actime;__time_t modtime;};
struct utsname {char sysname[65];char nodename[65];char release[65];char version[65];char machine[65];char domainname[65];};
typedef enum _EDBA1914F16BC538415B0E0A3A3FD3BB ACTION;
typedef CARD16 BITS16;
typedef CARD32 BITS32;
struct CLIENT {AUTH *cl_auth;struct CLIENT__clnt_ops *cl_ops;caddr_t cl_private;};
typedef XID Cursor;
typedef int32_t FP1616;
typedef XID KeySym;
typedef XID Pixmap;
typedef XID Window;
typedef __u16 __be16;
typedef __u32 __be32;
typedef __u64 __be64;
typedef __u16 __le16;
typedef __u32 __le32;
typedef __u64 __le64;
typedef __u32 __wsum;
struct arpreq {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;struct sockaddr arp_netmask;char arp_dev[16];};
typedef chtype attr_t;
struct cee_pg {__u8 willing;__u8 error;__u8 pg_en;__u8 tcs_supported;__u8 pg_bw[8];__u8 prio_pg[8];};
typedef u_int16_t comp_t;
struct __attribute__((packed)) ethhdr {unsigned __int8 h_dest[6];unsigned __int8 h_source[6];__be16 h_proto;};
typedef _G_fpos_t fpos_t;
typedef __fsid_t fsid_t;
struct if_set {if_mask ifs_bits[8];};
struct ifconf {int ifc_len;union ifconf___6BFF7D1955055D26BF83C89630184638 ifc_ifcu;};
typedef __loff_t loff_t;
typedef __mode_t mode_t;
struct mon_id {char *mon_name;struct my_id my_id;};
struct msgbuf {__syscall_slong_t mtype;char mtext[1];};
typedef u_int32_t n_long;
typedef u_int32_t n_time;
struct netent {char *n_name;char **n_aliases;int n_addrtype;uint32_t n_net;};
struct nfattr {__u16 nfa_len;__u16 nfa_type;};
struct nlattr {__u16 nla_len;__u16 nla_type;};
struct ptsreq {__u32 protocol;unsigned __int8 flags;unsigned __int8 pts1;unsigned __int8 pts2;unsigned __int8 pts3;};
typedef __quad_t quad_t;
typedef __rlim_t rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
struct sigvec {__sighandler_t sv_handler;int sv_mask;int sv_flags;};
typedef __time_t time_t;
typedef __u_char u_char;
typedef __u_long u_long;
struct udphdr {u_int16_t source;u_int16_t dest;u_int16_t len;u_int16_t check;};
struct vjstat {__u32 vjs_packets;__u32 vjs_compressed;__u32 vjs_searches;__u32 vjs_misses;__u32 vjs_uncompressedin;__u32 vjs_compressedin;__u32 vjs_errorin;__u32 vjs_tossed;};
typedef CARD32 xwdval;
typedef XID Glyph;
typedef enum _003F63A829E52477BDB4080710A1139D VISIT;
struct atreq {__s32 atr_len;unsigned __int8 atr[64];__s32 power_act;unsigned __int8 bIFSD;unsigned __int8 bIFSC;};
struct cb_id {__u32 idx;__u32 val;};
typedef __dev_t dev_t;
typedef __gid_t gid_t;
struct group {char *gr_name;char *gr_passwd;__gid_t gr_gid;char **gr_mem;};
typedef __ino_t ino_t;
struct iovec {void *iov_base;size_t iov_len;};
typedef __key_t key_t;
typedef __kernel_mqd_t mqd_t;
struct mtget {__int64 mt_type;__int64 mt_resid;__int64 mt_dsreg;__int64 mt_gstat;__int64 mt_erreg;__daddr_t mt_fileno;__daddr_t mt_blkno;};
struct nlist {union nlist___34B1BE95F83DF5B7277E649894D7700C n_un;unsigned __int8 n_type;char n_other;__int16 n_desc;unsigned __int64 n_value;};
typedef __off_t off_t;
struct panel {WINDOW *win;struct panel *below;struct panel *above;void *user;};
typedef __pid_t pid_t;
typedef __kernel_uid32_t qid_t;
typedef __be16 sid_t;
typedef __sighandler_t sig_t;
struct tcf_t {__u64 install;__u64 lastuse;__u64 expires;};
struct tcmsg {unsigned __int8 tcm_family;unsigned __int8 tcm__pad1;unsigned __int16 tcm__pad2;int tcm_ifindex;__u32 tcm_handle;__u32 tcm_parent;__u32 tcm_info;};
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
typedef __u_int u_int;
typedef __uid_t uid_t;
typedef CARD8 BOOL;
typedef CARD8 BYTE;
typedef XID Font;
struct argp {const struct argp_option *options;argp_parser_t parser;const char *args_doc;const char *doc;const struct argp_child *children;char *(*help_filter)(int key, const char *text, void *input);const char *argp_domain;};
typedef __id_t id_t;
struct prof {void *pr_base;size_t pr_size;size_t pr_off;unsigned __int64 pr_scale;};
struct mon {struct mon_id mon_id;char priv[16];};
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
struct __attribute__((packed)) usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B___0F39C91C7DBDCC74C5766049C47658C1 {__u8 bHubHdrDecLat;__le16 wHubDelay;__le16 DeviceRemovable;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5D56A3B05DC79D2B39CE2065DB667513 {__u32 array_number;__u32 reserved1;__u64 reserved2;};
struct __attribute__((packed)) edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___49195614F6319582F6FB6EA7B8D4CCE9 {__u8 bus;__u8 slot;__u8 function;__u8 channel;__u32 reserved;};
struct __attribute__((packed)) edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___8A9F28F90D71C0EDE080B89C7B8F7CEB {__u16 base_address;__u16 reserved1;__u32 reserved2;};
struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___7CB675A7FE3B771F7EED94A658A00CF2 {__u64 remote_addr;__u64 compare_add;__u64 swap;__u32 rkey;__u32 reserved;};
struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___F2BB21E50B3B06F7946E9B016EF3FE56 {__u64 remote_addr;__u32 rkey;__u32 reserved;};
struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___09DF2535E6DA103D7F29916F5EF0F37F {unsigned int items;unsigned int item;char name[64];__u64 names_ptr;unsigned int names_length;};
struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___E1020325AD69165DDCE560DF1208AB92 {__s32 speed;__u32 format;};
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___BFD7413E14FC21CAB05150D69A0647C0 {caddr_t where;xdrproc_t proc;};
struct xt_set_info_v0___5FA737C7984580A7156FEACCCEF959DE___B1EE31AB57794F087E09CB38893522FB {__u32 __flags[6];__u8 dim;__u8 flags;};
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___B8AD833485FADDB6F1E0494B45611EC6 {CARD32 type;INT16 shorts0;INT16 shorts1;INT16 shorts2;INT16 shorts3;INT16 shorts4;INT16 shorts5;INT16 shorts6;INT16 shorts7;INT16 shorts8;INT16 shorts9;};
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FB6660946ED728575FB5339601D7D5BE {CARD32 type;INT8 bytes[20];};
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FD3E7DCAA1FA6D37E77316D970071F0A {CARD32 type;INT32 longs0;INT32 longs1;INT32 longs2;INT32 longs3;INT32 longs4;};
union sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___E4FE2715AED4C6C7BAE0E08F234A7CEC {__u32 connection_id;__u8 nsapi;};
struct sockaddr_tipc___E58F941474A2167ADFB4DB3CD3C86AFF___6DE9A15E0505DC1D36F657D5804C4D5B {struct tipc_name name;__u32 domain;};
struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___E1020325AD69165DDCE560DF1208AB92 {__s32 speed;__u32 format;};
struct dtv_property___B98ACA724107A4780966790F8E6F51AE___E85D121AEF2FD57774AEAE3C80475EA9 {__u8 data[32];__u32 len;__u32 reserved1[3];void *reserved2;};
union COFF_auxent___8BBA864C406C799E487F50DA03CFED8B___BC4ABED5B595E3E8C165C6A75882B0B0 {struct COFF_auxent______BC4ABED5B595E3E8C165C6A75882B0B0___5B40661CB552EBE7B7ADF18FDA423A8F x_fcn;struct COFF_auxent______BC4ABED5B595E3E8C165C6A75882B0B0___AE9B05ABEC1048BE339BB828F6FDD6C6 x_ary;};
struct rta_session___D973AC1711B483EC871F326B7831CCB7___1773C2309B9F5A0B912D9E6D7AA20BD2 {__u8 type;__u8 code;__u16 ident;};
struct atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4___0818C7DDE51664281A126620DABD8E4B {__u16 lec_id;__u32 tran_id;unsigned __int8 mac_addr[6];unsigned __int8 atm_addr[20];};
struct phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7___1C126A4DD303F51C1B963FE9DA319A63 {__u16 pn_e_res_id;__u8 pn_e_submsg_id;__u8 pn_e_data[3];};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___5A60174FC6A07BE0049C674473C6C1C3 {CARD32 pad00;CARD32 window;CARD16 width;CARD16 height;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___99F5A2754EC45011AB028BB1CC2CE3C7 {CARD32 pad00;CARD32 window;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 count;CARD16 pad2;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___9C75AB6DDEADA42926A4005EFC1B4241 {CARD32 pad00;CARD32 event;CARD32 window;INT16 x;INT16 y;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___D4E6015299E8C3BAFA52E0C7400AB6A6 {CARD32 pad00;CARD32 window;BYTE mode;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___EDE3B33B7AF26E05A2A60AEE6589519E {CARD32 pad00;CARD32 event;CARD32 window;CARD32 parent;BYTE place;BYTE pad1;BYTE pad2;BYTE pad3;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___00575168428C2A87979258BF9A2B69BD {__u32 dcrn;__u32 data;__u8 is_write;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8BD831D3F26E755231EE226110EFBC25 {__u64 nr;__u64 args[6];__u64 ret;__u32 longmode;__u32 pad;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___9A8CADB17020C23A50EF184344A8FCB4 {__u64 rip;__u32 is_write;__u32 pad;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___BD1B4A354AF725BA74D732704C5A145B {__u64 trans_exc_code;__u32 pgm_code;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___CC925405885A04949E6CA336967D4693 {__u32 suberror;__u32 ndata;__u64 data[16];};
struct ____1C1E9EA25555F3A04518B10EE9DF4602___CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___DDF278A5B88F81FEC3CBEE828E282CB3 {__pid_t si_pid;__uid_t si_uid;};
struct ____4C8070B9675DF490D49D1F7749E052FB___CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
union _8E3F17DF06268256B33C950219C36638___933121F4FA1889599F702E16603DBB9F {Elf64_Xword d_val;Elf64_Addr d_ptr;};
union _9E389EF8DB18C75445DC45CE7C2FFB9B___2798575F521600C1E26DD161E22996D8 {Elf32_Word d_val;Elf32_Addr d_ptr;};
union _XIMStatusDrawCallbackStruct___D9A2F521BD917AA4B9408853DE8DEFA7 {XIMText *text;Pixmap bitmap;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__exit_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;__u32 exit_code;__u32 exit_signal;};
union btrfs_ioctl_vol_args_v2___0E1BBE3C4D92C29D6483496511BFB0E5 {btrfs_ioctl_vol_args_v2___0E1BBE3C4D92C29D6483496511BFB0E5___97070D54DF9902B037972BD3BA33C07B __anonymous0;__u64 unused[4];};
struct xcb_xkb_get_kbd_by_name_replies_other_names_value_list_t {xcb_atom_t keycodesName;xcb_atom_t geometryName;xcb_atom_t symbolsName;xcb_atom_t physSymbolsName;xcb_atom_t typesName;xcb_atom_t compatName;xcb_atom_t *typeNames;uint8_t *nLevelsPerType;xcb_atom_t *ktLevelNames;xcb_atom_t *indicatorNames;xcb_atom_t *virtualModNames;xcb_atom_t *groups;xcb_xkb_key_name_t *keyNames;xcb_xkb_key_alias_t *keyAliases;xcb_atom_t *radioGroupNames;};
struct _MoreErrInfo_struct___00DBD85E10A37A41C143DBD374F1292B {__u8 Reserved[2];__u8 offense_size;__u8 offense_num;__u32 offense_value;};
struct _MoreErrInfo_struct___850DDD04F051AEAB5762E411F2D3B073 {__u8 Reserved[3];__u8 Type;__u32 ErrorInfo;};
struct xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t {xcb_atom_t keycodesName;xcb_atom_t geometryName;xcb_atom_t symbolsName;xcb_atom_t physSymbolsName;xcb_atom_t typesName;xcb_atom_t compatName;xcb_atom_t *typeNames;uint8_t *nLevelsPerType;xcb_atom_t *ktLevelNames;xcb_atom_t *indicatorNames;xcb_atom_t *virtualModNames;xcb_atom_t *groups;xcb_xkb_key_name_t *keyNames;xcb_xkb_key_alias_t *keyAliases;xcb_atom_t *radioGroupNames;};
union usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B {__attribute__((packed)) struct usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B___2571549C4A7486545CEF5C221FD27B39 hs;__attribute__((packed)) struct usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B___0F39C91C7DBDCC74C5766049C47658C1 ss;};
struct sctp_notification___C5201E10A3BA1990E1BB7800BD4B4755 {__u16 sn_type;__u16 sn_flags;__u32 sn_length;};
union snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4 {struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___417F44919A114DFD176AABDB9ECD58A2 integer;struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___417F44919A114DFD176AABDB9ECD58A2 integer64;struct snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4___09DF2535E6DA103D7F29916F5EF0F37F enumerated;unsigned __int8 reserved[128];};
union xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E {struct xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E___EE820D7A7447C58C4FD6EEB80D72CED7 random;struct xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E___3F36A97FCC75B2C3787A521E6B8B77EF nth;};
union kvm_ioapic_state___DD5945FC8609333C0DC47555F67F1F87 {__u64 bits;struct kvm_ioapic_state___DD5945FC8609333C0DC47555F67F1F87___22B2FEED7AAD3155BA3FE7D4BF196114 fields;};
union v4l2_ext_control___69E76359D6A92B09615B31A0CD58076A {__s32 value;__s64 value64;char *string;};
union v4l2_frmsizeenum___AB1B6A5DBF64E5DBD6E4918CD3F58D99 {struct v4l2_frmsize_discrete discrete;struct v4l2_frmsize_stepwise stepwise;};
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_rtradv {u_int8_t irt_num_addrs;u_int8_t irt_wpa;u_int16_t irt_lifetime;};
struct kvm_vcpu_events___1CFDC73C128D5D93EB72FA493B7308C8 {__u8 injected;__u8 nr;__u8 has_error_code;__u8 pad;__u32 error_code;};
union v4l2_event_ctrl___877A83439B5014158313B7A496DCA350 {__s32 value;__s64 value64;};
struct xcb_selinux_get_selection_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xkb_get_kbd_by_name_replies_t___indicator_maps {uint8_t indicatorDeviceID;uint32_t which;uint32_t realIndicators;uint8_t nIndicators;uint8_t pad0[15];xcb_xkb_indicator_map_t *maps;};
union i2400m_msg_hdr___22B7D1DBBF1ADFD158475D81DBFFC78D {__le32 barker;__u32 size;};
union i2400m_msg_hdr___2714A6542DBCB9EFDD6DA7143E760F28 {__le32 sequence;__u32 offset;};
union v4l2_dbg_match___9221E6CCFE3ED5A42DA7B217EF6A225C {__u32 addr;char name[32];};
struct xcb_selinux_get_property_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_get_screen_of_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
union xt_set_info_v0___5FA737C7984580A7156FEACCCEF959DE {__u32 flags[7];struct xt_set_info_v0___5FA737C7984580A7156FEACCCEF959DE___B1EE31AB57794F087E09CB38893522FB compat;};
union xt_string_info___C39E5CEE57601962F961C038F8A50B86 {struct xt_string_info___C39E5CEE57601962F961C038F8A50B86___D243FA1A6B620F6FE40A610B1BA3DAB2 v0;struct xt_string_info___C39E5CEE57601962F961C038F8A50B86___C70A73FBCF83193366EABA9582FA4B4D v1;};
union kvm_irq_level___2C42BCD169011235984D59B666AD220A {__u32 irq;__s32 status;};
union authdes_verf___7A6CF749D39778C1B89693A36BA727C7 {struct rpc_timeval adv_ctime;des_block adv_xtime;};
union ebt_ip6_info___26363C14217845B81957C820750DD008 {__u16 sport[2];__u8 icmpv6_type[2];};
union ebt_ip6_info___AB7A6A2EFD5D2D8A9CC0BEC5B58393A0 {__u16 dport[2];__u8 icmpv6_code[2];};
union irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD {unsigned int irda_attrib_int;struct irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD___F507A81B129D990840BB4B6C65CE09C4 irda_attrib_octet_seq;struct irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD___FD3F387589D8DBAF03E7F59401F513FD irda_attrib_string;};
struct xcb_input_get_device_modifier_mapping_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_input_set_device_modifier_mapping_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t keycodes_per_modifier;uint8_t pad0;};
struct xcb_selinux_get_device_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_selinux_get_selection_use_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_selinux_get_window_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_rehash_printer_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct COFF_auxent___8BBA864C406C799E487F50DA03CFED8B {char x_tagndx[4];union COFF_auxent___8BBA864C406C799E487F50DA03CFED8B___B43E3C95070E5A6C461F1A8FACE73978 x_misc;union COFF_auxent___8BBA864C406C799E487F50DA03CFED8B___BC4ABED5B595E3E8C165C6A75882B0B0 x_fcnary;char x_tvndx[2];};
struct __res_state___A41D3F045172AF5618492D381489FAF0 {struct in_addr addr;u_int32_t mask;};
union if_irda_req___9DA9AA7ECA440A9F5CDA74F00DBFB189 {struct if_irda_line ifru_line;struct if_irda_qos ifru_qos;unsigned __int16 ifru_flags;unsigned int ifru_receiving;unsigned int ifru_mode;unsigned int ifru_dongle;};
union v4l2_buffer___60C6B35876E0AE46B602D9AFD0188855 {__u32 offset;unsigned __int64 userptr;struct v4l2_plane *planes;__s32 fd;};
struct xcb_selinux_get_property_use_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xfixes_get_cursor_image_and_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xkb_get_kbd_by_name_replies_t___compat_map {uint8_t compatDeviceID;uint8_t groupsRtrn;uint8_t pad0;uint16_t firstSIRtrn;uint16_t nSIRtrn;uint16_t nTotalSI;uint8_t pad1[16];uint8_t *si_rtrn;xcb_xkb_mod_def_t *group_rtrn;};
union ypbind_resp___CD49527FE086EB7F6D0E69C2C3AD50AC {u_int ypbind_error;ypbind_binding ypbind_bindinfo;};
struct cback_data___8577E6F7A3DA394015609B473F63AD7B {u_int entries_len;obj_p *entries_val;};
union v4l2_plane___7F64AB741C97E078016A97B1EA8BEEFE {__u32 mem_offset;unsigned __int64 userptr;__s32 fd;};
struct xcb_input_get_device_button_mapping_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_input_set_device_button_mapping_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t map_size;uint8_t pad0[2];};
union dtv_stats___6DB0D4BB6C903E0E24B38DB1D5FBBC78 {__u64 uvalue;__s64 svalue;};
struct group_obj___6B1AF3D1F6DE7092D80225088D6E3A34 {u_int gr_members_len;nis_name *gr_members_val;};
union phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7 {struct phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7___79F9F606AEF972467561C7C3244F0049 base;struct phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7___1C126A4DD303F51C1B963FE9DA319A63 ext;};
struct rex_start___27D82728F37DDE14700CB9E3D9A87412 {u_int rst_env_len;rexstring *rst_env_val;};
struct rex_start___4E8F7DC4996D24194F1417703DE27DA2 {u_int rst_cmd_len;rexstring *rst_cmd_val;};
union sigaction___CF138106520E5A28DAF2A67779B92EE8 {__sighandler_t sa_handler;void (*sa_sigaction)(int, siginfo_t *, void *);};
struct xcb_input_device_button_state_notify_event_t {uint8_t response_type;uint8_t device_id;uint16_t sequence;uint8_t buttons[28];};
union sigevent___4FA236EFE1337B09F044CA22D4984BE4 {int _pad[12];__pid_t _tid;struct sigevent___4FA236EFE1337B09F044CA22D4984BE4___24DBCF560A8F0BCF4BC9504FE41525CE _sigev_thread;};
union __attribute__((packed)) cld_msg___4B56EB8A9D6FEFEB7556C99AA13CA4F5 {int64_t cm_gracetime;struct cld_name cm_name;};
union dynamic___355B7563D908D50B4B67712FB263B5CD {Elf32_Sword d_val;Elf32_Addr d_ptr;};
struct xcb_input_change_keyboard_device_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_input_change_pointer_device_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t x_axis;uint8_t y_axis;uint8_t device_id;uint8_t pad0;};
struct xcb_input_device_key_state_notify_event_t {uint8_t response_type;uint8_t device_id;uint16_t sequence;uint8_t keys[28];};
struct xcb_input_get_extension_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t name_len;uint8_t pad0[2];};
struct xcb_x_print_print_query_screens_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_input_get_feedback_control_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_input_set_device_valuators_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t first_valuator;uint8_t num_valuators;uint8_t pad0;};
struct xcb_render_query_pict_formats_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_screensaver_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t client_major_version;uint8_t client_minor_version;uint8_t pad0[2];};
struct xcb_sync_list_system_counters_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_get_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct __attribute__((packed)) uac_format_type_ii_discrete_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bFormatType;__le16 wMaxBitRate;__le16 wSamplesPerFrame;__u8 bSamFreqType;__u8 tSamFreq[][3];};
struct virtio_blk_config__virtio_blk_geometry {__u16 cylinders;__u8 heads;__u8 sectors;};
struct xcb_input_get_device_control_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t control_id;uint8_t device_id;uint8_t pad0;};
struct xcb_input_list_input_devices_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_input_query_device_state_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_xkb_permament_overlay_1_behavior_t {uint8_t type;xcb_keycode_t key;};
struct xcb_selinux_list_selections_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_start_doc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t driver_mode;};
struct xcb_x_print_print_start_job_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t output_mode;};
struct xcb_xfixes_get_cursor_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
union ____933121F4FA1889599F702E16603DBB9F {Elf64_Xword d_val;Elf64_Addr d_ptr;};
struct btrfs_ioctl_dev_replace_start_params {__u64 srcdevid;__u64 cont_reading_from_srcdev_mode;__u8 srcdev_name[1025];__u8 tgtdev_name[1025];};
struct xcb_input_get_device_focus_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_x_print_print_end_page_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t cancel;uint8_t pad0[3];};
struct xcb_xinerama_query_screens_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xinerama_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t major;uint8_t minor;};
struct xcb_input_device_resolution_state_t {uint16_t control_id;uint16_t len;uint32_t num_valuators;};
struct xcb_input_set_device_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t mode;uint8_t pad0[2];};
struct xcb_selinux_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t client_major;uint8_t client_minor;};
struct xcb_x_print_print_end_doc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t cancel;};
struct xcb_x_print_print_end_job_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t cancel;};
struct xcb_xc_misc_get_xid_range_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xf86dri_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_get_keyboard_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_get_modifier_mapping_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_list_fonts_with_info_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t max_names;uint16_t pattern_len;};
struct xcb_record_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_set_modifier_mapping_request_t {uint8_t major_opcode;uint8_t keycodes_per_modifier;uint16_t length;};
struct _02B7C110B96F422043FD747664A5A945 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _0461405B9932B2ED05AF0EE41FC655EB {uint8_t reqType;uint8_t ReqType;uint16_t length;uint16_t major_version;uint16_t minor_version;};
struct _0822494CA8335A3B81E4FAC70FD7E6A7 {unsigned int num_blocks;XID context_id;void *privData;XvMCMacroBlock *macro_blocks;};
struct _0A00068ABA4408D4F92644683EE31C51 {Dwarf_Small lr_atom;Dwarf_Unsigned lr_number;Dwarf_Unsigned lr_number2;Dwarf_Unsigned lr_offset;};
struct _0C1A989C237847E9E0FEF5D20B714342 {CARD8 reqType;CARD8 nElts;CARD16 length;};
struct _0C4B847EA89D426433C47107E0756204 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;};
struct _0E70E9A2AD7D0637C6C018491CDB8CD9 {INT32 top;INT32 bottom;xLineFixed left;xLineFixed right;};
struct _10184D3025615BB97A779285FBA6EAF5 {CARD8 reqType;CARD8 brReqType;CARD16 length;};
struct _11B292B49D7574EDADD15F3F19C7735E {CARD16 control;CARD16 length;CARD8 status;CARD8 pad0;CARD16 pad1;};
struct _13745364EEA695BC65B7D4AAC1B24515 {td_thr_events_t eventmask;td_event_e eventnum;void *eventdata;};
struct _139D55FE8C88418352B74C39DE937D4F {int type;Display *display;XID resourceid;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct _15A7CADFA0C3B6AF2858DE2248F61F64 {__off64_t __pos;__mbstate_t __state;};
struct _194914D9D4C0AE9A8FC55BCBB00ED166 {CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD16 alpha;};
struct _24BF153529F05C45F0A0621575016FCA {CARD8 c_class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;CARD16 accelNum;CARD16 accelDenom;CARD16 threshold;};
struct _256B6D485D886C7434E6D059DF9BE864 {CARD8 reqType;CARD8 damageReqType;CARD16 length;};
struct _28183F13DB7442E77993ED2BEDDC9E43 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 firstKeyCode;CARD8 keySymsPerKeyCode;CARD8 keyCodes;};
struct _28DBCFF2F5EB26695C388B23D6931809 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;};
struct _29DBA087DFE16744A29CB8F8CD68D43B {CARD32 length;CARD16 status;CARD16 pad;};
struct _2C268D9809C6E9DE2B818A0BB7518C2E {CARD16 control;CARD16 length;CARD32 num_valuators;};
struct _2FC2A6BC4D5C4BA98ABB1F848EBDDDCB {CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _30B70AE4F294613C62268FE45513ED13 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int from_configure;};
struct _32138DB0B6D2C0E6C623C7DE1AD597BF {Visual *visual;VisualID visualid;int screen;int depth;int c_class;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;int colormap_size;int bits_per_rgb;};
struct _3224684BD501E054CF1A67297C7290FB {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;};
struct _355FFBAADB08B4CAA5BBFAF829DED10A {RECORD_RANGE8 majorCode;RECORD_RANGE16 minorCode;};
struct _3A28C96D52FB29F9635C6203D2891B70 {size_t count;xcb_extension_t *ext;uint8_t opcode;uint8_t isvoid;};
struct _3A8E116D72DF0C8D49D51593D925AF55 {XDGAMode mode;unsigned __int8 *data;Pixmap pixmap;};
struct _3B895FF4AB049C141C5F7C25E8036379 {CARD16 control;CARD16 length;CARD8 first_valuator;CARD8 num_valuators;CARD8 pad1;CARD8 pad2;};
struct _3B8E4E23B9740784A6100A2DE9D445C8 {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;int place;};
struct _3BEEF239534EE9E2D4AD58999E56F197 {CARD8 reqType;CARD8 ReqType;CARD16 length;};
struct _3DD3CD96FAD56E1211E0F63114C705EF {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;};
struct _4489EB38A238A95680D8722B994EE839 {Elf64_Xword m_value;Elf64_Xword m_info;Elf64_Xword m_poffset;Elf64_Half m_repeat;Elf64_Half m_stride;};
struct _4496CBA88907C11C6361D9179E75F570 {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;};
struct _4550F01C1AE59E404A8C00C15C6A89B9 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _4581608EB282A4CD84CF9A6FF906DD32 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;char key_vector[32];};
struct _47DAAB86EBF09131080EDB83B3644219 {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;int override_redirect;};
struct _488FF45B2B0EF525AA1AD13B1739492B {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;};
struct _4B29FBEAFEB74D66435D912679576990 {CARD8 reqType;CARD8 miscReqType;CARD16 length;};
struct _4D2E0013E954DA651F15636ABC395F09 {CARD8 c_class;CARD8 id;CARD16 length;};
struct _4D69B6347F056FE268056727CEA155AA {wchar_t *chars;int nchars;int delta;XFontSet font_set;};
struct _4E034CF603E977B1C171CF8061167D87 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int override_redirect;};
struct _51727A972DDFA83BAA2CC416714856EF {CARD8 c_class;CARD8 length;CARD8 num_buttons;BYTE pad1;CARD8 buttons[32];};
struct _523CE37B1F7AC95341854764E619AB82 {CARD8 reqType;CARD8 renderReqType;CARD16 length;};
struct _524CF13A1D734F6153C9475201DD66D0 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint16_t deviceid;uint16_t pad0;};
struct _586CBC0EC33709906F5B6EA510EDE79F {int type;unsigned __int64 serial;int send_event;Display *display;Drawable drawable;int x;int y;int width;int height;int count;int major_code;int minor_code;};
struct _5C0DD3C4E70CCCC9965B24A6BE5ED8FB {CARD8 depth;CARD8 bitsPerPixel;CARD8 scanLinePad;CARD8 pad1;CARD32 pad2;};
struct _5CD0DDA75FC8A64FD62E45433429A157 {CARD8 reqType;CARD8 XTestReqType;CARD16 length;};
struct _5F1D1C367F851FDE7EA3DDE22527B9A9 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int place;};
struct _625DD72E42D2E4120693244DFAAD3348 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;};
struct _648D5B97A5A1D2D2729A4C51B6643734 {XChar2b *chars;int nchars;int delta;Font font;};
struct _666210E100F3CB5D4A75782C69E711A8 {CARD8 header;CARD8 pad1;CARD16 jumpx;CARD16 jumpy;CARD16 delay_time;};
struct _66669466698BDB410095AFB1AF18F4BC {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int width;int height;};
struct _696BFCCA82AE9FEB0738E58DD35D6784 {uint16_t type;uint16_t length;uint16_t deviceid;uint8_t return_mode;uint8_t pad;uint16_t return_pointer;uint16_t return_keyboard;};
struct _69AF41EBDA657EE1FC7AC417361C4229 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int request;int first_keycode;int count;};
struct _6ED97C3403DE0E72A6D3A9179DE884AD {CARD16 control;CARD16 length;CARD32 offset_x;CARD32 offset_y;CARD32 width;CARD32 height;CARD32 screen;CARD32 following;};
struct _6FA9C15AF3974CA3A341A1191B3752B4 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int x;int y;int width;int height;int count;};
struct _7086C2867C7D4B0306B00A1789D67F56 {CARD32 flags;INT32 min;INT32 max;CARD32 size;};
struct _70CE59A0CFDF5BD02F17410240B55142 {CARD8 c_class;CARD8 id;CARD16 length;CARD16 max_symbols;CARD16 num_syms_supported;};
struct _7545E18792FF2C20F9BB4220259E75A2 {CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD32 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct _75FD820D0CE6C215ACE04A8FAA270A6D {Elf64_Half vd_version;Elf64_Half vd_flags;Elf64_Half vd_ndx;Elf64_Half vd_cnt;Elf64_Word vd_hash;Elf64_Word vd_aux;Elf64_Word vd_next;};
struct _786884C59B8460C39A9F20EFE8931D61 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;Window parent;int x;int y;int override_redirect;};
struct _797907A242F94DB9200676D3A724828B {CARD8 reqType;CARD8 ext_opcode;CARD16 length;};
struct _7B203B1D6B17DB4D229BE0C85CFA6293 {INT16 leftSideBearing;INT16 rightSideBearing;INT16 characterWidth;INT16 ascent;INT16 descent;CARD16 attributes;};
struct _7D569909FEB0E294999F498DE699AF74 {CARD8 c_class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;CARD16 num_keysyms;};
struct _801F83CB04C22E52C720D7D622E0E540 {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;Window above;int detail;unsigned __int64 value_mask;};
struct _83A9560127C5CA1AF601DD4E7C3B278F {CARD32 time;INT16 x;INT16 y;};
struct _875800A09C817D61F833D1479DE8ED86 {CARD16 status;CARD16 major_version;CARD16 minor_version;CARD8 num_alternates;CARD8 auth_index;CARD16 alternate_len;CARD16 auth_len;};
struct _8AF8D50F7459E989F83B822632060AA0 {unsigned __int8 kind;unsigned __int8 size;Elf32_Section section;Elf32_Word info;};
struct _8C606E8C629293621C4597F91F88DAA0 {int type;unsigned __int64 serial;int send_event;Display *display;Drawable drawable;int major_code;int minor_code;};
struct _8E3F17DF06268256B33C950219C36638 {Elf64_Sxword d_tag;union _8E3F17DF06268256B33C950219C36638___933121F4FA1889599F702E16603DBB9F d_un;};
struct _95C1FEB0645AD02B5C1E9ED7A3FFD156 {uint16_t deviceid;uint16_t use;uint16_t attachment;uint16_t num_classes;uint16_t name_len;uint8_t enabled;uint8_t pad;};
struct _9D6FB564ED57422FFB268B9144C446E8 {CARD8 type;CARD8 pad00;CARD16 sequenceNumber;CARD8 actions[28];};
struct _9DC1427BFA5A30405B067C9596620D04 {CARD32 length;CARD16 max_request_len;CARD16 vendor_len;CARD32 release_number;};
struct _9E389EF8DB18C75445DC45CE7C2FFB9B {Elf32_Sword d_tag;union _9E389EF8DB18C75445DC45CE7C2FFB9B___2798575F521600C1E26DD161E22996D8 d_un;};
struct _9E637E3D30D4EE6DC2F7DCF094554036 {__off_t __pos;__mbstate_t __state;};
struct _A0565235DB0A025ED98270EC8F0003BF {Elf32_Half vd_version;Elf32_Half vd_flags;Elf32_Half vd_ndx;Elf32_Half vd_cnt;Elf32_Word vd_hash;Elf32_Word vd_aux;Elf32_Word vd_next;};
struct _A0C7E3A5A810FD3BF4087852A9D616F8 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;};
struct _A1602EFEF26A0DD20EAD389B18F82E81 {CARD8 reqType;CARD8 xtReqType;CARD16 length;CARD8 majorVersion;CARD8 pad;CARD16 minorVersion;};
struct _A313ED2DE25BE046A874D492CFBD731F {Elf64_Addr r_offset;Elf64_Xword r_info;};
struct _A46BFD4B6B8C284ED478D587B5722CAB {Elf64_Word vna_hash;Elf64_Half vna_flags;Elf64_Half vna_other;Elf64_Word vna_name;Elf64_Word vna_next;};
struct _A4DBC252F7392490EC4C7D58273D4CD1 {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _A78B9460B3A970BB806E84788697D919 {uint16_t type;uint16_t length;uint16_t name_len;uint8_t send_core;uint8_t enable;};
struct _A7F49BCAD2F54790AC5A5BD9DFF19382 {CARD16 control;CARD16 length;CARD8 enable;CARD8 pad0;CARD16 pad1;};
struct _A7FA0352B3D2D5994DC9E111A361682C {size_t dls_size;unsigned int dls_cnt;Dl_serpath dls_serpath[1];};
struct _AAD257271AAA9A190B14D3482C45D035 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _ABE60368F0168DDE4E32B527D5287C6B {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 level;CARD16 pad0;};
struct _AC4DD9D92E70F28730FDAF46AFF0094D {uint8_t reqType;uint8_t ReqType;uint16_t length;uint8_t num_changes;uint8_t pad0;uint16_t pad1;};
struct _AF5FB4080A51E8992C2DCC85F9B13FAA {CARD8 header;CARD8 keycode;CARD16 delay_time;};
struct _B511218BDE8923632D5391031F827DC7 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int x;int y;int width;int height;int border_width;Window above;int override_redirect;};
struct _B584FC37E760C222478B879BC253DCF4 {int function;unsigned __int64 plane_mask;unsigned __int64 foreground;unsigned __int64 background;int line_width;int line_style;int cap_style;int join_style;int fill_style;int fill_rule;int arc_mode;Pixmap tile;Pixmap stipple;int ts_x_origin;int ts_y_origin;Font font;int subwindow_mode;int graphics_exposures;int clip_x_origin;int clip_y_origin;Pixmap clip_mask;int dash_offset;char dashes;};
struct _B58F2A65D6A08A32CD1EAF6D9DE3C432 {CARD8 c_class;CARD8 length;CARD8 num_keys;BYTE pad1;CARD8 keys[32];};
struct _BA3BC151FA826CD0885676DC609737ED {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int mode;int detail;};
struct _BB279EA07E8836E412716D1B8B41E21D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 numKeyPerModifier;CARD16 pad1;};
struct _BC21E3DCA2DEF6CD8EB07ED07E074597 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 status;CARD8 unused;CARD32 length;};
struct _BC4B0D515307F8380CCAE7BF44CFA97C {Elf32_Word ri_gprmask;Elf32_Word ri_cprmask[4];Elf32_Sword ri_gp_value;};
struct _BE4469CD69A158FEF141EB99E29DC657 {CARD32 surface_type_id;CARD16 chroma_format;CARD16 pad0;CARD16 max_width;CARD16 max_height;CARD16 subpicture_max_width;CARD16 subpicture_max_height;CARD32 mc_type;CARD32 flags;};
struct _C1A5A3DCCCA94F161802FCE22321BD34 {CARD8 reqType;CARD8 miscReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _C552EBCACAEF1EC592A2129D44400B77 {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD16 minDelay;CARD16 maxDelay;};
struct _C772EEB8BDF2D9B03BC2113DCD14FF9B {Elf32_Addr r_offset;Elf32_Word r_info;};
struct _CB514849AD88F11A467565D13DD0C300 {Dwarf_Addr dwr_addr1;Dwarf_Addr dwr_addr2;enum Dwarf_Ranges_Entry_Type dwr_type;};
struct _CB86ED79A67F464A5E5DD7E35915D8C3 {char *option;char *specifier;XrmOptionKind argKind;XPointer value;};
struct _CC1BC89F17F8E2D162EA4A62A1B63DC5 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int state;};
struct _CC7B73821EC10F3655DDE5DAA21E5635 {CARD16 width;CARD16 height;INT16 x;INT16 y;INT16 xOff;INT16 yOff;};
struct _CCAFB83A0FC0BF591DA5D736B6BAF8AE {INT16 left;INT16 right;INT16 width;INT16 ascent;INT16 descent;CARD16 attributes;};
struct _CF3111049F55256272BC67C062EAE4FA {CARD16 control;CARD16 length;CARD8 status;CARD8 iscore;CARD16 pad1;};
struct _D33AAE3110C188617B7959564922C41D {XExtData *ext_data;VisualID visualid;int c_class;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;int bits_per_rgb;int map_entries;};
struct _D3FB05D1960191678CEDB7021036F6D1 {uint16_t deviceid;uint16_t pad;uint32_t barrier;uint32_t eventid;};
struct _D499544929243D34F0E5D505EF6E776A {uint16_t type;uint16_t length;uint16_t sourceid;uint8_t mode;uint8_t num_touches;};
struct _DBDB4AF8E469679C3A4CD785AB502395 {Elf64_Half vn_version;Elf64_Half vn_cnt;Elf64_Word vn_file;Elf64_Word vn_aux;Elf64_Word vn_next;};
struct _DC91CDF27CF0E1CD3A7D6CD60E761811 {attr_t attr;wchar_t chars[5];};
struct _DD90A90D33B6DCFC05E4E875B7D49A5E {CARD8 reqType;CARD8 mbufReqType;CARD16 length;};
struct _DDB9E5FBB16C40A976BC405025678C57 {Elf32_Half vn_version;Elf32_Half vn_cnt;Elf32_Word vn_file;Elf32_Word vn_aux;Elf32_Word vn_next;};
struct _DE99FD7022C5FF7012AC4CC23AAA0836 {CARD8 reqType;CARD8 dbeReqType;CARD16 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 unused;};
struct _E1CFC36011533414D97A1ABDF69EC869 {int elements_used;IXJ_CADENCE_TERM termination;IXJ_CADENCE_ELEMENT *ce;};
struct _E2CD2B01FA038266E5DB6C7E58157C2E {gregset_t gregs;fpregset_t fpregs;unsigned __int64 __reserved1[8];};
struct _E59953A36063650DE92A1957B98E4A1B {CARD8 header;CARD8 motion_data;CARD16 delay_time;};
struct _E714B4690DCD4CE2097239CD07373860 {Elf32_Word vna_hash;Elf32_Half vna_flags;Elf32_Half vna_other;Elf32_Word vna_name;Elf32_Word vna_next;};
struct _E7AFD6532C2786B1E1EBCA6ADECADE75 {CARD8 reqType;CARD8 xvReqType;CARD16 length;};
struct _E8B6B3D679DDF9A2A9F1E31A29349D07 {uint64_t a_type;union _E8B6B3D679DDF9A2A9F1E31A29349D07___E20C8C1B4A7C82F1CEEE602013DD1F57 a_un;};
struct _EE65B23A4559DB1BF795CF28121204EB {XID context_id;int surface_type_id;unsigned __int16 width;unsigned __int16 height;XvPortID port;int flags;void *privData;};
struct _EF15DCB28339270802C69A46485DD45C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 nbytes;CARD8 pad1;CARD8 pad2;};
struct _EF3075C2F2980D34C2767B31474F1A14 {CARD8 reqType;CARD8 dbeReqType;CARD16 length;};
struct _F0D1009415F4F398C0AA24385D596C1B {CARD8 reqType;CARD8 data;CARD16 length;};
struct _F1472F09D9F4F4B2B771740E265DAEF8 {CARD8 reqType;CARD8 numKeyPerModifier;CARD16 length;};
struct _F1DC5359840258F1056D6AC9280CBC0A {CARD8 len;INT8 delta;};
struct _F2F9B6351970DCB60CFA1FAEAB4D2E42 {INT16 x_org;INT16 y_org;CARD16 width;CARD16 height;};
struct _F3C08B9B3A2B2160E2DEB46E97A36321 {int32_t integral;uint32_t frac;};
struct _F571D10236F18BD99A11DF3B50D0C123 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 standby;CARD16 suspend;CARD16 off;CARD16 pad0;};
struct _F761E35AAB0F963E8328223906FB41E6 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint16_t deviceid;uint16_t pad;};
struct _F80E3F154E69694439090B67229FB6AA {CARD8 reqType;CARD8 keyCodes;CARD16 length;CARD8 firstKeyCode;CARD8 keySymsPerKeyCode;CARD16 pad1;};
struct _F9E7774477A9727B3397D0BE30B022B2 {uint32_t a_type;union _F9E7774477A9727B3397D0BE30B022B2___9A662A763779714768031DA711D3415F a_un;};
struct _F9ED97278D4922C5DE254E13FEAC389D {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int x;int y;};
struct _FFD94501D319906E4D5D8BC1834D8469 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 pad0;CARD16 pad1;};
struct _FFDDF8AD41840F2444187795E69FE4AB {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct __attribute__((packed)) uac_format_type_ii_ext_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bFormatType;__u16 wMaxBitRate;__u16 wSamplesPerFrame;__u8 bHeaderLength;__u8 bSideBandProtocol;};
struct xcb_big_requests_enable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_get_pointer_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_get_pointer_mapping_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_input_device_abs_area_state_t {uint16_t control_id;uint16_t len;uint32_t offset_x;uint32_t offset_y;uint32_t width;uint32_t height;uint32_t screen;uint32_t following;};
struct xcb_input_device_resolution_ctl_t {uint16_t control_id;uint16_t len;uint8_t first_valuator;uint8_t num_valuators;};
struct xcb_input_string_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;uint16_t max_symbols;uint16_t num_keysyms;};
struct xcb_screensaver_suspend_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t suspend;uint8_t pad0[3];};
struct xcb_set_close_down_mode_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;};
struct xcb_set_pointer_mapping_request_t {uint8_t major_opcode;uint8_t map_len;uint16_t length;};
struct xcb_shape_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xc_misc_get_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t client_major_version;uint16_t client_minor_version;};
struct xcb_xevie_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t client_major_version;uint16_t client_minor_version;};
struct __attribute__((packed)) usb_endpoint_descriptor_no_audio {__u8 bLength;__u8 bDescriptorType;__u8 bEndpointAddress;__u8 bmAttributes;__le16 wMaxPacketSize;__u8 bInterval;};
struct xcb_force_screen_saver_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;};
struct xcb_input_close_device_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_set_access_control_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;};
struct xcb_x_print_bad_sequence_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xinerama_is_active_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xv_query_extension_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xvmc_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct __attribute__((packed)) uac1_output_terminal_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bTerminalID;__le16 wTerminalType;__u8 bAssocTerminal;__u8 bSourceID;__u8 iTerminal;};
struct __attribute__((packed)) usb_cdc_country_functional_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 iCountryCodeRelDate;__le16 wCountyCode0;};
struct __attribute__((packed)) usb_wireless_ep_comp_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bMaxBurst;__u8 bMaxSequence;__le16 wMaxStreamDelay;__le16 wOverTheAirPacketSize;__u8 bOverTheAirInterval;__u8 bmCompAttributes;};
struct __attribute__((packed)) uvc_control_endpoint_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u16 wMaxTransferSize;};
struct v4l2_subdev_frame_interval_enum {__u32 index;__u32 pad;__u32 code;__u32 width;__u32 height;struct v4l2_fract interval;__u32 reserved[9];};
struct xcb_dpms_get_timeouts_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_dpms_set_timeouts_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t standby_timeout;uint16_t suspend_timeout;uint16_t off_timeout;};
struct xcb_input_bell_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;uint8_t percent;uint8_t pad0[3];uint16_t pitch;uint16_t duration;};
struct xcb_input_device_enable_state_t {uint16_t control_id;uint16_t len;uint8_t enable;uint8_t pad0[3];};
struct xcb_input_open_device_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t pad0[3];};
struct xcb_input_string_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;uint8_t pad0[2];uint16_t num_keysyms;};
struct xcb_res_query_clients_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_res_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t client_major;uint8_t client_minor;};
struct xcb_shm_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_test_grab_control_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t impervious;uint8_t pad0[3];};
struct xcb_x_print_bad_context_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xkb_use_extension_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t wantedMajor;uint16_t wantedMinor;};
struct _XIMPreeditCaretCallbackStruct {int position;XIMCaretDirection direction;XIMCaretStyle style;};
struct fw_cdev_event_iso_interrupt_mc {__u64 closure;__u32 type;__u32 completed;};
struct __attribute__((packed)) uac_processing_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bUnitID;__u16 wProcessType;__u8 bNrInPins;__u8 baSourceID[];};
struct __attribute__((packed)) uvc_camera_terminal_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bTerminalID;__u16 wTerminalType;__u8 bAssocTerminal;__u8 iTerminal;__u16 wObjectiveFocalLengthMin;__u16 wObjectiveFocalLengthMax;__u16 wOcularFocalLength;__u8 bControlSize;__u8 bmControls[3];};
struct __attribute__((packed)) uvc_output_terminal_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bTerminalID;__u16 wTerminalType;__u8 bAssocTerminal;__u8 bSourceID;__u8 iTerminal;};
struct __attribute__((packed)) uvc_processing_unit_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bUnitID;__u8 bSourceID;__u16 wMaxMultiplier;__u8 bControlSize;__u8 bmControls[2];__u8 iProcessing;};
struct xcb_dpms_force_level_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t power_level;};
struct xcb_dpms_get_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t client_major_version;uint16_t client_minor_version;};
struct xcb_get_screen_saver_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_input_device_enable_ctrl_t {uint16_t control_id;uint16_t len;uint8_t enable;uint8_t pad0[3];};
struct xcb_input_ptr_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;uint8_t pad0[2];uint16_t accel_num;uint16_t accel_denom;uint16_t threshold;};
struct xcb_render_pict_format_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_sync_await_fence_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_test_get_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t major_version;uint8_t pad0;uint16_t minor_version;};
struct xcb_xkb_get_names_value_list_t {xcb_atom_t keycodesName;xcb_atom_t geometryName;xcb_atom_t symbolsName;xcb_atom_t physSymbolsName;xcb_atom_t typesName;xcb_atom_t compatName;xcb_atom_t *typeNames;uint8_t *nLevelsPerType;xcb_atom_t *ktLevelNames;xcb_atom_t *indicatorNames;xcb_atom_t *virtualModNames;xcb_atom_t *groups;xcb_xkb_key_name_t *keyNames;xcb_xkb_key_alias_t *keyAliases;xcb_atom_t *radioGroupNames;};
struct btrfs_ioctl_qgroup_limit_args {__u64 qgroupid;struct btrfs_qgroup_limit lim;};
struct fw_cdev_allocate_iso_resource {__u64 closure;__u64 channels;__u32 bandwidth;__u32 handle;};
struct __attribute__((packed)) uac_input_terminal_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bTerminalID;__le16 wTerminalType;__u8 bAssocTerminal;__u8 bNrChannels;__le16 wChannelConfig;__u8 iChannelNames;__u8 iTerminal;};
struct __attribute__((packed)) uvc_input_terminal_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bTerminalID;__u16 wTerminalType;__u8 bAssocTerminal;__u8 iTerminal;};
struct xcb_damage_bad_damage_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_get_input_focus_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_input_device_busy_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_input_device_core_state_t {uint16_t control_id;uint16_t len;uint8_t status;uint8_t iscore;uint8_t pad0[2];};
struct xcb_list_extensions_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_query_extension_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t name_len;uint8_t pad1[2];};
struct xcb_sync_initialize_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t desired_major_version;uint8_t desired_minor_version;};
struct xcb_xfixes_bad_region_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct _XF86VidModeGetGammaRampSize {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86VidModeSetClientVersion {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 major;CARD16 minor;};
struct _XIMStatusDrawCallbackStruct {XIMStatusDataType type;union _XIMStatusDrawCallbackStruct___D9A2F521BD917AA4B9408853DE8DEFA7 data;};
struct btrfs_ioctl_clone_range_args {__s64 src_fd;__u64 src_offset;__u64 src_length;__u64 dest_offset;};
struct __attribute__((packed)) usb_midi_out_jack_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bJackType;__u8 bJackID;__u8 bNrInputPins;struct usb_midi_source_pin pins[];};
struct __attribute__((packed)) uvc_output_header_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bNumFormats;__u16 wTotalLength;__u8 bEndpointAddress;__u8 bTerminalLink;__u8 bControlSize;__u8 bmaControls[];};
struct xcb_input_device_core_ctrl_t {uint16_t control_id;uint16_t len;uint8_t status;uint8_t pad0[3];};
struct xcb_randr_bad_output_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_render_glyph_set_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xkb_overlay_1_behavior_t {uint8_t type;xcb_keycode_t key;};
struct btrfs_ioctl_ino_lookup_args {__u64 treeid;__u64 objectid;char name[4080];};
struct fuse_notify_inval_entry_out {uint64_t parent;uint32_t namelen;uint32_t padding;};
struct fuse_notify_inval_inode_out {uint64_t ino;int64_t off;int64_t len;};
struct fw_cdev_event_iso_interrupt {__u64 closure;__u32 type;__u32 cycle;__u32 header_length;__u32 header[];};
struct kvm_userspace_memory_region {__u32 slot;__u32 flags;__u64 guest_phys_addr;__u64 memory_size;__u64 userspace_addr;};
struct __attribute__((packed)) uac_iso_endpoint_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bmAttributes;__u8 bLockDelayUnits;__le16 wLockDelay;};
struct __attribute__((packed)) usb_wireless_cap_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDevCapabilityType;__u8 bmAttributes;__le16 wPHYRates;__u8 bmTFITXPowerInfo;__u8 bmFFITXPowerInfo;__le16 bmBandGroup;__u8 bReserved;};
struct __attribute__((packed)) uvc_input_header_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bNumFormats;__u16 wTotalLength;__u8 bEndpointAddress;__u8 bmInfo;__u8 bTerminalLink;__u8 bStillCaptureMethod;__u8 bTriggerSupport;__u8 bTriggerUsage;__u8 bControlSize;__u8 bmaControls[];};
struct xcb_get_font_path_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_set_font_path_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t font_qty;uint8_t pad1[2];};
struct xcb_ungrab_server_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_xkb_counted_string_16_t {uint16_t length;uint8_t pad0;};
struct xcb_xv_bad_encoding_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct Dwarf_Obj_Access_Section_s {Dwarf_Addr addr;Dwarf_Unsigned type;Dwarf_Unsigned size;const char *name;Dwarf_Unsigned link;Dwarf_Unsigned info;Dwarf_Unsigned entrysize;};
struct _XF86VidModeLockModeSwitch {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 lock;};
struct fw_cdev_create_iso_context {__u32 type;__u32 header_size;__u32 channel;__u32 speed;__u64 closure;__u32 handle;};
struct fw_cdev_send_stream_packet {__u32 length;__u32 tag;__u32 channel;__u32 sy;__u64 closure;__u64 data;__u32 generation;__u32 speed;};
struct ib_ucm_sidr_req_event_resp {__u16 pkey;__u8 port;__u8 reserved;};
struct ib_uverbs_async_event_desc {__u64 element;__u32 event_type;__u32 reserved;};
struct __attribute__((packed)) usb_cdc_ncm_ndp_input_size {__le32 dwNtbInMaxSize;__le16 wNtbInMaxDatagrams;__le16 wReserved;};
struct __attribute__((packed)) usb_cdc_ncm_ntb_parameters {__le16 wLength;__le16 bmNtbFormatsSupported;__le32 dwNtbInMaxSize;__le16 wNdpInDivisor;__le16 wNdpInPayloadRemainder;__le16 wNdpInAlignment;__le16 wPadding1;__le32 dwNtbOutMaxSize;__le16 wNdpOutDivisor;__le16 wNdpOutPayloadRemainder;__le16 wNdpOutAlignment;__le16 wNtbOutMaxDatagrams;};
struct v4l2_subdev_frame_interval {__u32 pad;struct v4l2_fract interval;__u32 reserved[9];};
struct vfio_iommu_type1_dma_unmap {__u32 argsz;__u32 flags;__u64 iova;__u64 size;};
struct xcb_change_hosts_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;uint8_t family;uint8_t pad0;uint16_t address_len;};
struct xcb_dpms_capable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_dpms_disable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_input_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;};
struct xcb_no_operation_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_query_keymap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_randr_bad_crtc_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_randr_bad_mode_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_render_animcursorelt_t {xcb_cursor_t cursor;uint32_t delay;};
struct xcb_render_pict_op_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_render_picture_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xinerama_screen_info_t {int16_t x_org;int16_t y_org;uint16_t width;uint16_t height;};
struct xcb_xkb_kt_set_map_entry_t {uint8_t level;uint8_t realMods;uint16_t virtualMods;};
struct xcb_xkb_sa_switch_screen_t {uint8_t type;uint8_t flags;int8_t newScreen;uint8_t pad0[5];};
struct xcb_xkb_set_names_values_t {xcb_atom_t keycodesName;xcb_atom_t geometryName;xcb_atom_t symbolsName;xcb_atom_t physSymbolsName;xcb_atom_t typesName;xcb_atom_t compatName;xcb_atom_t *typeNames;uint8_t *nLevelsPerType;xcb_atom_t *ktLevelNames;xcb_atom_t *indicatorNames;xcb_atom_t *virtualModNames;xcb_atom_t *groups;xcb_xkb_key_name_t *keyNames;xcb_xkb_key_alias_t *keyAliases;xcb_atom_t *radioGroupNames;};
struct xcb_xv_bad_control_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xv_image_format_info_t {uint32_t id;uint8_t type;uint8_t byte_order;uint8_t pad0[2];uint8_t guid[16];uint8_t bpp;uint8_t num_planes;uint8_t pad1[2];uint8_t depth;uint8_t pad2[3];uint32_t red_mask;uint32_t green_mask;uint32_t blue_mask;uint8_t format;uint8_t pad3[3];uint32_t y_sample_bits;uint32_t u_sample_bits;uint32_t v_sample_bits;uint32_t vhorz_y_period;uint32_t vhorz_u_period;uint32_t vhorz_v_period;uint32_t vvert_y_period;uint32_t vvert_u_period;uint32_t vvert_v_period;uint8_t vcomp_order[32];uint8_t vscanline_order;uint8_t pad4[11];};
struct _XF86MiscGetMouseSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86MiscSetClientVersion {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD16 major;CARD16 minor;};
struct _XkbExtensionDeviceNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int reason;unsigned int supported;unsigned int unsupported;int first_btn;int num_btns;unsigned int leds_defined;unsigned int led_state;int led_class;int led_id;};
struct _xkbKTSetMapEntryWireDesc {CARD8 level;CARD8 realMods;CARD16 virtualMods;};
struct btrfs_ioctl_dev_info_args {__u64 devid;__u8 uuid[16];__u64 bytes_used;__u64 total_bytes;__u64 unused[379];__u8 path[1024];};
struct btrfs_ioctl_search_header {__u64 transid;__u64 objectid;__u64 offset;__u32 type;__u32 len;};
struct kvm_ppc_one_seg_page_size {__u32 page_shift;__u32 slb_enc;struct kvm_ppc_one_page_size enc[8];};
struct __attribute__((packed)) uac1_ac_header_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__le16 bcdADC;__le16 wTotalLength;__u8 bInCollection;__u8 baInterfaceNr[];};
struct __attribute__((packed)) uac1_as_header_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u8 bTerminalLink;__u8 bDelay;__le16 wFormatTag;};
struct __attribute__((packed)) usb_ss_ep_comp_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bMaxBurst;__u8 bmAttributes;__le16 wBytesPerInterval;};
struct xcb_dpms_enable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_grab_server_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_input_valuator_info_t {uint8_t class_id;uint8_t len;uint8_t axes_len;uint8_t mode;uint32_t motion_size;};
struct xcb_intern_atom_request_t {uint8_t major_opcode;uint8_t only_if_exists;uint16_t length;uint16_t name_len;uint8_t pad0[2];};
struct xcb_xkb_sa_redirect_key_t {uint8_t type;xcb_keycode_t newkey;uint8_t mask;uint8_t realModifiers;uint8_t vmodsMaskHigh;uint8_t vmodsMaskLow;uint8_t vmodsHigh;uint8_t vmodsLow;};
struct xcb_xkb_sa_set_ptr_dflt_t {uint8_t type;uint8_t flags;uint8_t affect;int8_t value;uint8_t pad0[4];};
struct _ScreenSaverQueryVersion {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD8 clientMajor;CARD8 clientMinor;CARD16 unused;};
struct _XF86BigfontQueryVersion {CARD8 reqType;CARD8 xf86bigfontReqType;CARD16 length;};
struct _XF86DGAQueryDirectVideo {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86VidModeGetGammaRamp {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 size;};
struct _XF86VidModeQueryVersion {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;};
struct _XF86VidModeSetGammaRamp {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 size;};
struct _XIMStringConversionText {unsigned __int16 length;XIMStringConversionFeedback *feedback;int encoding_is_wchar;union _XIMStringConversionText___DE48A4CD3A06187C4ACE99002CF90FB4 string;};
typedef void (*_XInternalConnectionProc)(Display *, int, XPointer);
struct _xSyncListSystemCounters {CARD8 reqType;CARD8 syncReqType;CARD16 length;};
struct btrfs_ioctl_fs_info_args {__u64 max_id;__u64 num_devices;__u8 fsid[16];__u64 reserved[124];};
struct fuse_notify_retrieve_out {uint64_t notify_unique;uint64_t nodeid;uint64_t offset;uint32_t size;uint32_t padding;};
struct fw_cdev_event_phy_packet {__u64 closure;__u32 type;__u32 rcode;__u32 length;__u32 data[];};
struct fw_cdev_set_iso_channels {__u64 channels;__u32 handle;};
struct hidraw_report_descriptor {__u32 size;__u8 value[4096];};
struct ib_uverbs_resize_cq_resp {__u32 cqe;__u32 reserved;__u64 driver_data[];};
struct openvpn_plugin_callbacks {plugin_log_t plugin_log;plugin_vlog_t plugin_vlog;};
struct __attribute__((packed)) usb_ms_header_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__le16 bcdMSC;__le16 wTotalLength;};
struct __attribute__((packed)) usb_qualifier_descriptor {__u8 bLength;__u8 bDescriptorType;__le16 bcdUSB;__u8 bDeviceClass;__u8 bDeviceSubClass;__u8 bDeviceProtocol;__u8 bMaxPacketSize0;__u8 bNumConfigurations;__u8 bRESERVED;};
struct vfio_iommu_type1_dma_map {__u32 argsz;__u32 flags;__u64 vaddr;__u64 iova;__u64 size;};
struct xcb_input_device_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_input_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;};
struct xcb_list_fonts_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t max_names;uint16_t pattern_len;};
struct xcb_list_hosts_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_record_client_info_t {xcb_record_client_spec_t client_resource;uint32_t num_ranges;};
struct xcb_render_glyph_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_setup_authenticate_t {uint8_t status;uint8_t pad0[5];uint16_t length;};
struct xcb_sync_await_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xkb_sa_latch_group_t {uint8_t type;uint8_t flags;int8_t group;uint8_t pad0[5];};
struct _XF86DGAGetViewPortSize {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86DGAViewPortChanged {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 n;};
struct _XF86MiscGetKbdSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86VidModeGetModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct dvd_host_send_challenge {__u8 type;unsigned __int32 agid : 2;dvd_challenge chal;};
struct fuse_notify_retrieve_in {uint64_t dummy1;uint64_t offset;uint32_t size;uint32_t dummy2;uint64_t dummy3;uint64_t dummy4;};
struct fw_cdev_event_bus_reset {__u64 closure;__u32 type;__u32 node_id;__u32 local_node_id;__u32 bm_node_id;__u32 irm_node_id;__u32 root_node_id;__u32 generation;};
struct fw_cdev_get_cycle_timer {__u64 local_time;__u32 cycle_timer;};
struct fw_cdev_send_phy_packet {__u64 closure;__u32 data[2];__u32 generation;};
struct __attribute__((packed)) gnet_stats_basic_packed {__u64 bytes;__u32 packets;};
struct kvm_assigned_msix_entry {__u32 assigned_dev_id;__u32 gsi;__u16 entry;__u16 padding[3];};
struct kvm_coalesced_mmio_zone {__u64 addr;__u32 size;__u32 pad;};
struct __attribute__((packed)) nfqnl_msg_config_params {__be32 copy_range;__u8 copy_mode;};
struct __attribute__((packed)) usb_endpoint_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bEndpointAddress;__u8 bmAttributes;__le16 wMaxPacketSize;__u8 bInterval;__u8 bRefresh;__u8 bSynchAddress;};
struct __attribute__((packed)) usb_security_descriptor {__u8 bLength;__u8 bDescriptorType;__le16 wTotalLength;__u8 bNumEncryptionTypes;};
struct xcb_dpms_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_input_button_info_t {uint8_t class_id;uint8_t len;uint16_t num_buttons;};
struct xcb_input_class_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_input_device_info_t {xcb_atom_t device_type;uint8_t device_id;uint8_t num_class_info;uint8_t device_use;uint8_t pad0;};
struct xcb_input_event_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_render_indexvalue_t {uint32_t pixel;uint16_t red;uint16_t green;uint16_t blue;uint16_t alpha;};
struct xcb_render_pictscreen_t {uint32_t num_depths;xcb_render_pictformat_t fallback;};
struct xcb_render_pictvisual_t {xcb_visualid_t visual;xcb_render_pictformat_t format;};
struct xcb_selinux_list_item_t {xcb_atom_t name;uint32_t object_context_len;uint32_t data_context_len;};
struct xcb_xkb_sa_lock_group_t {uint8_t type;uint8_t flags;int8_t group;uint8_t pad0[5];};
struct xcb_xv_attribute_info_t {uint32_t flags;int32_t min;int32_t max;uint32_t size;};
struct xcb_xv_bad_port_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xt_u32_location_element {__u32 number;__u8 nextop;};
struct _LbxGetModifierMapping {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _PanoramiXQueryVersion {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD8 clientMajor;CARD8 clientMinor;CARD16 unused;};
struct _XF86VidModeSwitchMode {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 zoom;};
struct _XResResourceSizeValue {xXResResourceSizeSpec size;CARD32 numCrossReferences;};
struct _xkbDeviceLedsWireDesc {CARD16 ledClass;CARD16 ledID;CARD32 namesPresent;CARD32 mapsPresent;CARD32 physIndicators;CARD32 state;};
struct _xkbOverlayRowWireDesc {CARD8 rowUnder;CARD8 nKeys;CARD16 pad1;};
struct btrfs_ioctl_scrub_args {__u64 devid;__u64 start;__u64 end;__u64 flags;struct btrfs_scrub_progress progress;__u64 unused[109];};
struct btrfs_ioctl_search_key {__u64 tree_id;__u64 min_objectid;__u64 max_objectid;__u64 min_offset;__u64 max_offset;__u64 min_transid;__u64 max_transid;__u32 min_type;__u32 max_type;__u32 nr_items;__u32 unused;__u64 unused1;__u64 unused2;__u64 unused3;__u64 unused4;};
struct btrfs_ioctl_space_args {__u64 space_slots;__u64 total_spaces;struct btrfs_ioctl_space_info spaces[];};
struct ebt_mac_wormhash_tuple {__u32 cmp[2];__be32 ip;};
struct ethtool_ah_espip4_spec {__be32 ip4src;__be32 ip4dst;__be32 spi;__u8 tos;};
struct fuse_notify_delete_out {uint64_t parent;uint64_t child;uint32_t namelen;uint32_t padding;};
struct fw_cdev_add_descriptor {__u32 immediate;__u32 key;__u64 data;__u32 length;__u32 handle;};
struct fw_cdev_event_request2 {__u64 closure;__u32 type;__u32 tcode;__u64 offset;__u32 source_node_id;__u32 destination_node_id;__u32 card;__u32 generation;__u32 handle;__u32 length;__u32 data[];};
struct fw_cdev_event_response {__u64 closure;__u32 type;__u32 rcode;__u32 length;__u32 data[];};
struct ib_uverbs_global_route {__u8 dgid[16];__u32 flow_label;__u8 sgid_index;__u8 hop_limit;__u8 traffic_class;__u8 reserved;};
struct nd_opt_home_agent_info {uint8_t nd_opt_home_agent_info_type;uint8_t nd_opt_home_agent_info_len;uint16_t nd_opt_home_agent_info_reserved;uint16_t nd_opt_home_agent_info_preference;uint16_t nd_opt_home_agent_info_lifetime;};
struct __attribute__((packed)) nfulnl_msg_config_mode {__be32 copy_range;__u8 copy_mode;__u8 _pad;};
struct rose_facilities_struct {rose_address source_addr;rose_address dest_addr;ax25_address source_call;ax25_address dest_call;unsigned __int8 source_ndigis;unsigned __int8 dest_ndigis;ax25_address source_digis[6];ax25_address dest_digis[6];unsigned int rand;rose_address fail_addr;ax25_address fail_call;};
struct __attribute__((packed)) usb_ext_cap_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDevCapabilityType;__le32 bmAttributes;};
struct v4l2_sliced_vbi_format {__u16 service_set;__u16 service_lines[2][24];__u32 io_size;__u32 reserved[2];};
struct virtio_console_control {__u32 id;__u16 event;__u16 value;};
struct xcb_input_mode_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_record_ext_range_t {xcb_record_range_8_t major;xcb_record_range_16_t minor;};
struct xcb_render_glyphinfo_t {uint16_t width;uint16_t height;int16_t x;int16_t y;int16_t x_off;int16_t y_off;};
struct xcb_render_pictdepth_t {uint8_t depth;uint8_t pad0;uint16_t num_visuals;uint8_t pad1[4];};
struct xcb_xkb_kt_map_entry_t {uint8_t active;uint8_t level;uint8_t mods_mask;uint8_t mods_mods;uint16_t mods_vmods;uint8_t pad0[2];};
struct xcb_xkb_sa_set_group_t {uint8_t type;uint8_t flags;int8_t group;uint8_t pad0[5];};
struct xcb_xkb_set_explicit_t {xcb_keycode_t keycode;uint8_t explicit;};
struct xcb_xkb_set_key_type_t {uint8_t mask;uint8_t realMods;uint16_t virtualMods;uint8_t numLevels;uint8_t nMapEntries;uint8_t preserve;uint8_t pad0;};
struct xt_secmark_target_info {__u8 mode;__u32 secid;char secctx[256];};
struct _XDGASetClientVersion {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 major;CARD16 minor;};
struct _XF86MiscGetFilePaths {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86MiscQueryVersion {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XResResourceSizeSpec {xXResResourceIdSpec spec;CARD32 bytes;CARD32 refCount;CARD32 useCount;};
struct _XkbNewKeyboardNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;int old_device;int min_key_code;int max_key_code;int old_min_key_code;int old_max_key_code;unsigned int changed;char req_major;char req_minor;};
struct _xkbGetIndicatorState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;};
struct btrfs_ioctl_send_args {__s64 send_fd;__u64 clone_sources_count;__u64 *clone_sources;__u64 parent_root;__u64 flags;__u64 reserved[4];};
struct dvd_lu_send_challenge {__u8 type;unsigned __int32 agid : 2;dvd_challenge chal;};
struct dvd_lu_send_title_key {__u8 type;unsigned __int32 agid : 2;dvd_key title_key;int lba;unsigned __int32 cpm : 1;unsigned __int32 cp_sec : 1;unsigned __int32 cgms : 2;};
struct fuse_notify_store_out {uint64_t nodeid;uint64_t offset;uint32_t size;uint32_t padding;};
struct fw_cdev_event_request {__u64 closure;__u32 type;__u32 tcode;__u64 offset;__u32 handle;__u32 length;__u32 data[];};
struct fw_cdev_send_response {__u32 rcode;__u32 length;__u64 data;__u32 handle;};
struct ib_uverbs_create_xsrq {__u64 response;__u64 user_handle;__u32 srq_type;__u32 pd_handle;__u32 max_wr;__u32 max_sge;__u32 srq_limit;__u32 reserved;__u32 xrcd_handle;__u32 cq_handle;__u64 driver_data[];};
struct ib_uverbs_destroy_srq {__u64 response;__u32 srq_handle;__u32 reserved;};
struct kvm_mmu_op_release_pt {struct kvm_mmu_op_header header;__u64 pt_phys;};
struct nfulnl_msg_packet_hdr {__be16 hw_protocol;__u8 hook;__u8 _pad;};
struct omap3isp_ccdc_culling {__u8 v_pattern;__u16 h_odd;__u16 h_even;};
struct omap3isp_h3a_af_paxel {__u16 h_start;__u16 v_start;__u8 width;__u8 height;__u8 h_cnt;__u8 v_cnt;__u8 line_inc;};
struct __attribute__((packed)) usb_config_descriptor {__u8 bLength;__u8 bDescriptorType;__le16 wTotalLength;__u8 bNumInterfaces;__u8 bConfigurationValue;__u8 iConfiguration;__u8 bmAttributes;__u8 bMaxPower;};
struct __attribute__((packed)) usb_device_descriptor {__u8 bLength;__u8 bDescriptorType;__le16 bcdUSB;__u8 bDeviceClass;__u8 bDeviceSubClass;__u8 bDeviceProtocol;__u8 bMaxPacketSize0;__le16 idVendor;__le16 idProduct;__le16 bcdDevice;__u8 iManufacturer;__u8 iProduct;__u8 iSerialNumber;__u8 bNumConfigurations;};
struct __attribute__((packed)) usb_ss_cap_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDevCapabilityType;__u8 bmAttributes;__le16 wSpeedSupported;__u8 bFunctionalitySupport;__u8 bU1devExitLat;__le16 bU2DevExitLat;};
struct __attribute__((packed)) usb_string_descriptor {__u8 bLength;__u8 bDescriptorType;__le16 wData[1];};
struct __attribute__((packed)) v4l2_plane_pix_format {__u32 sizeimage;__u16 bytesperline;__u16 reserved[7];};
struct v4l2_subdev_selection {__u32 which;__u32 pad;__u32 target;__u32 flags;struct v4l2_rect r;__u32 reserved[8];};
struct vfio_iommu_type1_info {__u32 argsz;__u32 flags;__u64 iova_pgsizes;};
struct __attribute__((packed)) virtio_console_config {__u16 cols;__u16 rows;__u32 max_nr_ports;__u32 emerg_wr;};
struct xcb_input_axis_info_t {uint32_t resolution;int32_t minimum;int32_t maximum;};
struct xcb_randr_mode_info_t {uint32_t id;uint16_t width;uint16_t height;uint32_t dot_clock;uint16_t hsync_start;uint16_t hsync_end;uint16_t htotal;uint16_t hskew;uint16_t vsync_start;uint16_t vsync_end;uint16_t vtotal;uint16_t name_len;uint32_t mode_flags;};
struct xcb_xkb_key_mod_map_t {xcb_keycode_t keycode;uint8_t mods;};
struct xcb_xkb_key_sym_map_t {uint8_t kt_index[4];uint8_t groupInfo;uint8_t width;uint16_t nSyms;};
struct xcb_xkb_sa_iso_lock_t {uint8_t type;uint8_t flags;uint8_t mask;uint8_t realMods;int8_t group;uint8_t affect;uint8_t vmodsHigh;uint8_t vmodsLow;};
struct xcb_xkb_sa_move_ptr_t {uint8_t type;uint8_t flags;int8_t xHigh;uint8_t xLow;int8_t yHigh;uint8_t yLow;uint8_t pad0[2];};
struct xt_rateest_match_info {char name1[16];char name2[16];__u16 flags;__u16 mode;__u32 bps1;__u32 pps1;__u32 bps2;__u32 pps2;struct xt_rateest *est1;struct xt_rateest *est2;};
typedef void (*XConnectionWatchProc)(Display *, XPointer, int, int, XPointer *);
typedef int (*XcmsDDConversionProc)(XcmsCCC, XcmsColor *, unsigned int, int *);
typedef int (*XcmsDIConversionProc)(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
struct _LbxLargeRequestData {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _XF86DGAQueryVersion {CARD8 reqType;CARD8 dgaReqType;CARD16 length;};
struct _XF86MiscPassMessage {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD16 typelen;CARD16 vallen;CARD16 screen;CARD16 pad;};
struct autofs_packet_expire {struct autofs_packet_hdr hdr;int len;char name[256];};
struct btrfs_data_container {__u32 bytes_left;__u32 bytes_missing;__u32 elem_cnt;__u32 elem_missed;__u64 val[];};
struct btrfs_ioctl_timespec {__u64 sec;__u32 nsec;};
struct btrfs_ioctl_vol_args {__s64 fd;char name[4088];};
struct btrfs_qgroup_inherit {__u64 flags;__u64 num_qgroups;__u64 num_ref_copies;__u64 num_excl_copies;struct btrfs_qgroup_limit lim;__u64 qgroups[];};
struct fw_cdev_event_common {__u64 closure;__u32 type;};
struct fw_cdev_send_request {__u32 tcode;__u32 length;__u64 offset;__u64 closure;__u64 data;__u32 generation;};
struct i2c_smbus_ioctl_data {__u8 read_write;__u8 command;__u32 size;union i2c_smbus_data *data;};
struct ib_uverbs_create_srq {__u64 response;__u64 user_handle;__u32 pd_handle;__u32 max_wr;__u32 max_sge;__u32 srq_limit;__u64 driver_data[];};
struct ib_uverbs_destroy_cq {__u64 response;__u32 cq_handle;__u32 reserved;};
struct ib_uverbs_destroy_qp {__u64 response;__u32 qp_handle;__u32 reserved;};
struct ib_uverbs_modify_srq {__u32 srq_handle;__u32 attr_mask;__u32 max_wr;__u32 srq_limit;__u64 driver_data[];};
struct ib_uverbs_query_port {__u64 response;__u8 port_num;__u8 reserved[7];__u64 driver_data[];};
struct ip_set_counter_match {__u8 op;__u64 value;};
struct kvm_assigned_msix_nr {__u32 assigned_dev_id;__u16 entry_nr;__u16 padding;};
struct kvm_assigned_pci_dev {__u32 assigned_dev_id;__u32 busnr;__u32 devfn;__u32 flags;__u32 segnr;kvm_assigned_pci_dev___46ACB1F2FA2487EC224C9DB07A2A3B2E __anonymous0;};
struct kvm_mmu_op_write_pte {struct kvm_mmu_op_header header;__u64 pte_phys;__u64 pte_val;};
struct kvm_vcpu_pv_apf_data {__u32 reason;__u8 pad[60];__u32 enabled;};
struct nfqnl_msg_config_cmd {__u8 command;__u8 _pad;__be16 pf;};
struct omap3isp_ccdc_bclamp {__u8 obgain;__u8 obstpixel;__u8 oblines;__u8 oblen;__u16 dcsubval;};
struct omapfb_tearsync_info {__u8 enabled;__u8 reserved1[3];__u16 line;__u16 reserved2;};
struct snd_compr_codec_caps {__u32 codec;__u32 num_descriptors;struct snd_codec_desc descriptor[32];};
struct snd_seq_queue_status {int queue;int events;snd_seq_tick_time_t tick;struct snd_seq_real_time time;int running;int flags;char reserved[64];};
struct tc_fq_codel_cl_stats {__s32 deficit;__u32 ldelay;__u32 count;__u32 lastcount;__u32 dropping;__s32 drop_next;};
struct __attribute__((packed)) ubi_set_vol_prop_req {__u8 property;__u8 padding[7];__u64 value;};
struct __attribute__((packed)) usb_cdc_notification {__u8 bmRequestType;__u8 bNotificationType;__le16 wValue;__le16 wIndex;__le16 wLength;};
struct uvc_xu_control_query {__u8 unit;__u8 selector;__u8 query;__u16 size;__u8 *data;};
struct v4l2_sliced_vbi_data {__u32 id;__u32 field;__u32 line;__u32 reserved;__u8 data[48];};
struct xfrm_userpolicy_type {__u8 type;__u16 reserved1;__u8 reserved2;};
struct xt_ct_target_info_v1 {__u16 flags;__u16 zone;__u32 ct_events;__u32 exp_events;char helper[16];char timeout[32];struct nf_conn *ct;};
struct xt_tcpmss_match_info {__u16 mss_min;__u16 mss_max;__u8 invert;};
typedef void (*BlockHandlerProcPtr)(pointer, OSTimePtr, pointer);
typedef int (*XcmsCompressionProc)(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
struct _LbxEndLargeRequest {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
union _MoreErrInfo_struct {struct _MoreErrInfo_struct___850DDD04F051AEAB5762E411F2D3B073 Common_Info;struct _MoreErrInfo_struct___00DBD85E10A37A41C143DBD374F1292B Invalid_Cmd;};
struct _ScreenSaverSuspend {CARD8 reqType;CARD8 saverReqType;CARD16 length;int suspend;};
struct _XF86DGADirectVideo {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 enable;};
struct _XkbCompatMapNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed_groups;int first_si;int num_si;int num_total_si;};
struct _XkbIndicatorNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;unsigned int state;};
struct _XkbSymInterpretRec {KeySym sym;unsigned __int8 flags;unsigned __int8 match;unsigned __int8 mods;unsigned __int8 virtual_mod;XkbAnyAction act;};
struct _xSyncAwaitFenceReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;};
struct _xSyncWaitCondition {CARD32 counter;CARD32 value_type;INT32 wait_value_hi;CARD32 wait_value_lo;CARD32 test_type;INT32 event_threshold_hi;CARD32 event_threshold_lo;};
struct _xkbOutlineWireDesc {CARD8 nPoints;CARD8 cornerRadius;CARD16 pad;};
struct _xkbVModMapWireDesc {CARD8 key;CARD8 pad;CARD16 vmods;};
struct can_bittiming_const {char name[16];__u32 tseg1_min;__u32 tseg1_max;__u32 tseg2_min;__u32 tseg2_max;__u32 sjw_max;__u32 brp_min;__u32 brp_max;__u32 brp_inc;};
struct dvb_qpsk_parameters {__u32 symbol_rate;fe_code_rate_t fec_inner;};
struct elf32_fdpic_loadseg {Elf32_Addr addr;Elf32_Addr p_vaddr;Elf32_Word p_memsz;};
struct ethtool_usrip4_spec {__be32 ip4src;__be32 ip4dst;__be32 l4_4_bytes;__u8 tos;__u8 ip_ver;__u8 proto;};
struct fsl_hv_ioctl_memcpy {__u32 ret;__u32 source;__u32 target;__u32 reserved;__u64 local_vaddr;__u64 remote_paddr;__u64 count;};
struct __attribute__((packed)) i2400m_pl_edata_hdr {__le32 reorder;__u8 cs;__u8 reserved[11];};
struct ib_ucm_attr_id_resp {__be64 service_id;__be64 service_mask;__be32 local_id;__be32 remote_id;};
struct ib_ucm_init_qp_attr {__u64 response;__u32 id;__u32 qp_state;};
struct ib_uverbs_open_xrcd {__u64 response;__u32 fd;__u32 oflags;__u64 driver_data[];};
struct ib_uverbs_query_srq {__u64 response;__u32 srq_handle;__u32 reserved;__u64 driver_data[];};
struct ib_uverbs_resize_cq {__u64 response;__u32 cq_handle;__u32 cqe;__u64 driver_data[];};
union ieee854_long_double {long double d;struct ieee854_long_double___FB8E818610133F718AF156918955DD46 ieee;struct ieee854_long_double___301A90221CF54AA61D03B5601C453EBC ieee_nan;};
struct kvm_debug_exit_arch {__u32 exception;__u32 pad;__u64 pc;__u64 dr6;__u64 dr7;};
struct nand_ecclayout_user {__u32 eccbytes;__u32 eccpos[64];__u32 oobavail;struct nand_oobfree oobfree[8];};
struct net_dm_config_entry {__u32 type;__attribute__((aligned(8))) __u64 data;};
struct omapfb_display_info {__u16 xres;__u16 yres;__u32 width;__u32 height;__u32 reserved[5];};
struct snd_hwdep_dsp_image {unsigned int index;unsigned __int8 name[64];unsigned __int8 *image;size_t length;unsigned __int64 driver_data;};
struct snd_seq_client_info {int client;snd_seq_client_type_t type;char name[64];unsigned int filter;unsigned __int8 multicast_filter[8];unsigned __int8 event_filter[32];int num_ports;int event_lost;char reserved[64];};
struct __attribute__((packed)) usb_cdc_header_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__le16 bcdCDC;};
struct __attribute__((packed)) usb_cdc_line_coding {__le32 dwDTERate;__u8 bCharFormat;__u8 bParityType;__u8 bDataBits;};
struct __attribute__((packed)) v4l2_bt_timings_cap {__u32 min_width;__u32 max_width;__u32 min_height;__u32 max_height;__u64 min_pixelclock;__u64 max_pixelclock;__u32 standards;__u32 capabilities;__u32 reserved[16];};
struct v4l2_sliced_vbi_cap {__u16 service_set;__u16 service_lines[2][24];__u32 type;__u32 reserved[3];};
struct __attribute__((packed)) virtio_balloon_stat {__u16 tag;__u64 val;};
struct __attribute__((packed)) virtio_net_ctrl_mac {__u32 entries;__u8 macs[][6];};
struct xcb_setup_request_t {uint8_t byte_order;uint8_t pad0;uint16_t protocol_major_version;uint16_t protocol_minor_version;uint16_t authorization_protocol_name_len;uint16_t authorization_protocol_data_len;uint8_t pad1[2];};
struct xcb_xkb_key_alias_t {uint8_t real[4];uint8_t alias[4];};
struct xt_addrtype_info_v1 {__u16 source;__u16 dest;__u32 flags;};
struct xt_connmark_mtinfo1 {__u32 mark;__u32 mask;__u8 invert;};
struct xt_connmark_tginfo1 {__u32 ctmark;__u32 ctmask;__u32 nfmask;__u8 mode;};
struct xt_owner_match_info {__u32 uid_min;__u32 uid_max;__u32 gid_min;__u32 gid_max;__u8 match;__u8 invert;};
typedef int (*XcmsScreenInitProc)(Display *, int, XcmsPerScrnInfo *);
typedef char *(*XkbGetAtomNameFunc)(Display *, Atom);
struct _ShapeQueryVersion {CARD8 reqType;CARD8 shapeReqType;CARD16 length;};
struct _XF86DGAGetVidPage {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86DGAGetVideoLL {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86DGASetVidPage {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 vpage;};
struct _XResClientIdValue {xXResClientIdSpec spec;CARD32 length;};
struct _XevieQueryVersion {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
struct _xkbListComponents {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 maxNames;};
struct _xkbSymMapWireDesc {CARD8 ktIndex[4];CARD8 groupInfo;CARD8 width;CARD16 nSyms;};
struct blk_io_trace_remap {__be32 device_from;__be32 device_to;__be64 sector_from;};
struct dm_target_versions {__u32 next;__u32 version[3];char name[];};
struct fc_bsg_ctels_reply {uint32_t status;struct fc_bsg_ctels_reply___D358A143548AB973F1CBBF682DE7DAAF rjt_data;};
struct fc_bsg_host_vendor {uint64_t vendor_id;uint32_t vendor_cmd[];};
struct ib_uverbs_query_qp {__u64 response;__u32 qp_handle;__u32 attr_mask;__u64 driver_data[];};
struct inet_diag_hostcond {__u8 family;__u8 prefix_len;int port;__be32 addr[];};
struct jffs2_unknown_node {jint16_t magic;jint16_t nodetype;jint32_t totlen;jint32_t hdr_crc;};
struct kvm_s390_interrupt {__u32 type;__u32 parm;__u64 parm64;};
struct __attribute__((packed)) ncp_request_header {__u16 type;__u8 sequence;__u8 conn_low;__u8 task;__u8 conn_high;__u8 function;__u8 data[];};
struct __attribute__((packed)) nw_search_sequence {__u8 volNumber;__u32 dirBase;__u32 sequence;};
struct omap3isp_prev_dcor {__u8 couplet_mode_en;__u32 detect_correct[4];};
struct omap3isp_prev_wbal {__u16 dgain;__u8 coef3;__u8 coef2;__u8 coef1;__u8 coef0;};
struct omapfb_memory_read {__u16 x;__u16 y;__u16 w;__u16 h;size_t buffer_size;void *buffer;};
struct tipc_bearer_config {__be32 priority;__be32 disc_domain;char name[32];};
struct __attribute__((packed)) ubi_leb_change_req {__s32 lnum;__s32 bytes;__s8 dtype;__s8 padding[7];};
struct __attribute__((packed)) usb_bos_descriptor {__u8 bLength;__u8 bDescriptorType;__le16 wTotalLength;__u8 bNumDeviceCaps;};
struct v4l2_enc_idx_entry {__u64 offset;__u64 pts;__u32 length;__u32 flags;__u32 reserved[2];};
struct __attribute__((packed)) v4l2_mpeg_vbi_itv0 {__le32 linemask[2];struct v4l2_mpeg_vbi_itv0_line line[35];};
struct v4l2_subdev_format {__u32 which;__u32 pad;struct v4l2_mbus_framefmt format;__u32 reserved[8];};
struct x25_dte_facilities {__u16 delay_cumul;__u16 delay_target;__u16 delay_max;__u8 min_throughput;__u8 expedited;__u8 calling_len;__u8 called_len;__u8 calling_ae[20];__u8 called_ae[20];};
struct xcb_setup_failed_t {uint8_t status;uint8_t reason_len;uint16_t protocol_major_version;uint16_t protocol_minor_version;uint16_t length;};
struct xcb_xkb_key_name_t {uint8_t name[4];};
struct xcb_xkb_key_type_t {uint8_t mods_mask;uint8_t mods_mods;uint16_t mods_vmods;uint8_t numLevels;uint8_t nMapEntries;uint8_t hasPreserve;uint8_t pad0;};
typedef Atom (*XkbInternAtomFunc)(Display *, const char *, int);
struct _XDGAQueryVersion {CARD8 reqType;CARD8 dgaReqType;CARD16 length;};
struct _XEVIQueryVersion {CARD8 reqType;CARD8 xeviReqType;CARD16 length;};
struct _XResQueryClients {CARD8 reqType;CARD8 XResReqType;CARD16 length;};
struct _XResQueryVersion {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD8 client_major;CARD8 client_minor;CARD16 unused;};
struct _XcupQueryVersion {CARD8 reqType;CARD8 xcupReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
struct _XkbAccessXNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;int detail;int keycode;int sk_delay;int debounce_delay;};
struct _XkbDeviceLedInfo {unsigned __int16 led_class;unsigned __int16 led_id;unsigned int phys_indicators;unsigned int maps_present;unsigned int names_present;unsigned int state;Atom names[32];XkbIndicatorMapRec maps[32];};
struct _xkbSetDeviceInfo {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 firstBtn;CARD8 nBtns;CARD16 change;CARD16 nDeviceLedFBs;};
struct _xkbShapeWireDesc {CARD32 name;CARD8 nOutlines;CARD8 primaryNdx;CARD8 approxNdx;CARD8 pad;};
struct dccp_hdr_ack_bits {__be16 dccph_reserved1;__be16 dccph_ack_nr_high;__be32 dccph_ack_nr_low;};
struct dccp_hdr_response {struct dccp_hdr_ack_bits dccph_resp_ack;__be32 dccph_resp_service;};
struct dlm_lspace_params {__u32 flags;__u32 minor;char name[];};
struct ethtool_gfeatures {__u32 cmd;__u32 size;struct ethtool_get_features_block features[];};
struct ethtool_perm_addr {__u32 cmd;__u32 size;__u8 data[];};
struct ethtool_sfeatures {__u32 cmd;__u32 size;struct ethtool_set_features_block features[];};
struct ethtool_sset_info {__u32 cmd;__u32 reserved;__u64 sset_mask;__u32 data[];};
struct fanotify_response {__s32 fd;__u32 response;};
struct fb_fix_screeninfo {char id[16];unsigned __int64 smem_start;__u32 smem_len;__u32 type;__u32 type_aux;__u32 visual;__u16 xpanstep;__u16 ypanstep;__u16 ywrapstep;__u32 line_length;unsigned __int64 mmio_start;__u32 mmio_len;__u32 accel;__u16 capabilities;__u16 reserved[2];};
struct fb_var_screeninfo {__u32 xres;__u32 yres;__u32 xres_virtual;__u32 yres_virtual;__u32 xoffset;__u32 yoffset;__u32 bits_per_pixel;__u32 grayscale;struct fb_bitfield red;struct fb_bitfield green;struct fb_bitfield blue;struct fb_bitfield transp;__u32 nonstd;__u32 activate;__u32 height;__u32 width;__u32 accel_flags;__u32 pixclock;__u32 left_margin;__u32 right_margin;__u32 upper_margin;__u32 lower_margin;__u32 hsync_len;__u32 vsync_len;__u32 sync;__u32 vmode;__u32 rotate;__u32 colorspace;__u32 reserved[4];};
struct fsl_hv_ioctl_prop {__u32 ret;__u32 handle;__u64 path;__u64 propname;__u64 propval;__u32 proplen;__u32 reserved;};
struct fuse_fallocate_in {uint64_t fh;uint64_t offset;uint64_t length;uint32_t mode;uint32_t padding;};
struct fw_cdev_queue_iso {__u64 packets;__u64 data;__u32 size;__u32 handle;};
struct fw_cdev_start_iso {__s32 cycle;__u32 sync;__u32 tags;__u32 handle;};
struct gfs2_quota_change {__be64 qc_change;__be32 qc_flags;__be32 qc_id;};
struct hiddev_field_info {__u32 report_type;__u32 report_id;__u32 field_index;__u32 maxusage;__u32 flags;__u32 physical;__u32 logical;__u32 application;__s32 logical_minimum;__s32 logical_maximum;__s32 physical_minimum;__s32 physical_maximum;__u32 unit_exponent;__u32 unit;};
struct ib_ucm_destroy_id {__u64 response;__u32 id;__u32 reserved;};
struct ib_uverbs_cmd_hdr {__u32 command;__u16 in_words;__u16 out_words;};
struct ib_uverbs_poll_cq {__u64 response;__u32 cq_handle;__u32 ne;};
struct ib_uverbs_recv_wr {__u64 wr_id;__u32 num_sge;__u32 reserved;};
union ip_set_name_index {char name[32];ip_set_id_t index;};
union jffs2_device_node {jint16_t old_id;jint32_t new_id;};
struct jffs2_raw_summary {jint16_t magic;jint16_t nodetype;jint32_t totlen;jint32_t hdr_crc;jint32_t sum_num;jint32_t cln_mkr;jint32_t padded;jint32_t sum_crc;jint32_t node_crc;jint32_t sum[];};
struct kvm_memory_region {__u32 slot;__u32 flags;__u64 guest_phys_addr;__u64 memory_size;};
struct minix_super_block {__u16 s_ninodes;__u16 s_nzones;__u16 s_imap_blocks;__u16 s_zmap_blocks;__u16 s_firstdatazone;__u16 s_log_zone_size;__u32 s_max_size;__u16 s_magic;__u16 s_state;__u32 s_zones;};
struct net_dm_config_msg {__u32 entries;struct net_dm_config_entry options[];};
struct net_dm_drop_point {__u8 pc[8];__u32 count;};
struct omap3isp_ccdc_fpc {__u16 fpnum;__u32 fpcaddr;};
struct omap3isp_prev_csc {__u16 matrix[3][3];__s16 offset[3];};
struct omapfb_plane_info {__u32 pos_x;__u32 pos_y;__u8 enabled;__u8 channel_out;__u8 mirror;__u8 mem_idx;__u32 out_width;__u32 out_height;__u32 reserved2[12];};
struct re_pattern_buffer {unsigned __int8 *buffer;unsigned __int64 allocated;unsigned __int64 used;reg_syntax_t syntax;char *fastmap;unsigned __int8 *translate;size_t re_nsub;unsigned __int32 can_be_null : 1;unsigned __int32 regs_allocated : 2;unsigned __int32 fastmap_accurate : 1;unsigned __int32 no_sub : 1;unsigned __int32 not_bol : 1;unsigned __int32 not_eol : 1;unsigned __int32 newline_anchor : 1;};
struct romfs_super_block {__be32 word0;__be32 word1;__be32 size;__be32 checksum;char name[];};
struct rose_route_struct {rose_address address;unsigned __int16 mask;ax25_address neighbour;char device[16];unsigned __int8 ndigis;ax25_address digipeaters[8];};
struct __attribute__((packed)) sadb_x_nat_t_port {__u16 sadb_x_nat_t_port_len;__u16 sadb_x_nat_t_port_exttype;__be16 sadb_x_nat_t_port_port;__u16 sadb_x_nat_t_port_reserved;};
struct __attribute__((packed)) sadb_x_nat_t_type {__u16 sadb_x_nat_t_type_len;__u16 sadb_x_nat_t_type_exttype;__u8 sadb_x_nat_t_type_type;__u8 sadb_x_nat_t_type_reserved[3];};
struct snd_seq_port_info {struct snd_seq_addr addr;char name[64];unsigned int capability;unsigned int type;int midi_channels;int midi_voices;int synth_voices;int read_use;int write_use;void *kernel;unsigned int flags;unsigned __int8 time_queue;char reserved[59];};
union snd_seq_timestamp {snd_seq_tick_time_t tick;struct snd_seq_real_time time;};
struct sock_extended_err {__u32 ee_errno;__u8 ee_origin;__u8 ee_type;__u8 ee_code;__u8 ee_pad;__u32 ee_info;__u32 ee_data;};
struct __attribute__((packed)) usb_cdc_mbim_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__le16 bcdMBIMVersion;__le16 wMaxControlMessage;__u8 bNumberFilters;__u8 bMaxFilterSize;__le16 wMaxSegmentSize;__u8 bmNetworkCapabilities;};
struct __attribute__((packed)) usb_cdc_mdlm_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__le16 bcdVersion;__u8 bGUID[16];};
struct __attribute__((packed)) usb_cdc_ncm_nth16 {__le32 dwSignature;__le16 wHeaderLength;__le16 wSequence;__le16 wBlockLength;__le16 wNdpIndex;};
struct __attribute__((packed)) usb_cdc_ncm_nth32 {__le32 dwSignature;__le16 wHeaderLength;__le16 wSequence;__le32 dwBlockLength;__le32 dwNdpIndex;};
struct __attribute__((packed)) usb_cdc_obex_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__le16 bcdVersion;};
struct v4l2_exportbuffer {__u32 type;__u32 index;__u32 plane;__u32 flags;__s32 fd;__u32 reserved[11];};
struct virtio_blk_outhdr {__u32 type;__u32 ioprio;__u64 sector;};
struct __attribute__((packed)) virtio_net_config {__u8 mac[6];__u16 status;__u16 max_virtqueue_pairs;};
struct xcb_xkb_mod_def_t {uint8_t mask;uint8_t realMods;uint16_t vmods;};
struct xcb_xkb_overlay_t {xcb_atom_t name;uint8_t nRows;uint8_t pad0[3];};
struct xfrm_user_sec_ctx {__u16 len;__u16 exttype;__u8 ctx_alg;__u8 ctx_doi;__u16 ctx_len;};
struct xt_connbytes_info {struct xt_connbytes_info___7751BED587E51DB2A173CBFFFE6F548E count;__u8 what;__u8 direction;};
struct xt_ct_target_info {__u16 flags;__u16 zone;__u32 ct_events;__u32 exp_events;char helper[16];struct nf_conn *ct;};
struct xt_statistic_info {__u16 mode;__u16 flags;union xt_statistic_info___539ECF97D6564B6FCE7661F25908FF9E u;struct xt_statistic_priv *master;};
typedef int (*CloseDisplayType)(Display *, XExtCodes *);
struct __attribute__((packed)) INFTLMediaHeader {char bootRecordID[8];__u32 NoOfBootImageBlocks;__u32 NoOfBinaryPartitions;__u32 NoOfBDTLPartitions;__u32 BlockMultiplierBits;__u32 FormatFlags;__u32 OsakVersion;__u32 PercentUsed;struct INFTLPartition Partitions[4];};
struct _LbxQueryVersion {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _ShmQueryVersion {CARD8 reqType;CARD8 shmReqType;CARD16 length;};
struct _XConnectionInfo {int fd;_XInternalConnectionProc read_callback;XPointer call_data;XPointer *watch_data;struct _XConnectionInfo *next;};
struct _XagQueryVersion {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
struct _XcmsPerScrnInfo {XcmsColor screenWhitePt;XPointer functionSet;XPointer screenData;unsigned __int8 state;char pad[3];};
struct _XkbServerMapRec {unsigned __int16 num_acts;unsigned __int16 size_acts;XkbAction *acts;XkbBehavior *behaviors;unsigned __int16 *key_acts;unsigned __int8 *explicit;unsigned __int8 vmods[16];unsigned __int16 *vmodmap;};
struct _xSyncInitialize {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 pad;};
struct _xkbModsWireDesc {CARD8 mask;CARD8 realMods;CARD16 virtualMods;};
struct _xkbSelectEvents {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 affectWhich;CARD16 clear;CARD16 selectAll;CARD16 affectMap;CARD16 map;};
struct _xkbUseExtension {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 wantedMajor;CARD16 wantedMinor;};
struct authdes_fullname {char *name;des_block key;uint32_t window;};
struct ethtool_gstrings {__u32 cmd;__u32 string_set;__u32 len;__u8 data[];};
struct fw_cdev_allocate {__u64 offset;__u64 closure;__u32 length;__u32 handle;__u64 region_end;};
struct fw_cdev_get_info {__u32 version;__u32 rom_length;__u64 rom;__u64 bus_reset;__u64 bus_reset_closure;__u32 card;};
struct gnet_stats_basic {__u64 bytes;__u32 packets;};
struct group_source_req {uint32_t gsr_interface;struct sockaddr_storage gsr_group;struct sockaddr_storage gsr_source;};
struct hiddev_usage_ref {__u32 report_type;__u32 report_id;__u32 field_index;__u32 usage_index;__u32 usage_code;__s32 value;};
struct ib_ucm_event_get {__u64 response;__u64 data;__u64 info;__u8 data_len;__u8 info_len;__u8 reserved[6];};
struct ib_uverbs_reg_mr {__u64 response;__u64 start;__u64 length;__u64 hca_va;__u32 pd_handle;__u32 access_flags;__u64 driver_data[];};
struct ip_vs_stats_user {__u32 conns;__u32 inpkts;__u32 outpkts;__u64 inbytes;__u64 outbytes;__u32 cps;__u32 inpps;__u32 outpps;__u32 inbps;__u32 outbps;};
struct irda_device_info {__u32 saddr;__u32 daddr;char info[22];__u8 charset;__u8 hints[2];};
struct irda_device_list {__u32 len;struct irda_device_info dev[1];};
struct kvm_assigned_irq {__u32 assigned_dev_id;__u32 host_irq;__u32 guest_irq;__u32 flags;kvm_assigned_irq___290E15ACA7FF071DF6EF2EB627B02119 __anonymous0;};
struct kvm_memory_alias {__u32 slot;__u32 flags;__u64 guest_phys_addr;__u64 memory_size;__u64 target_phys_addr;};
struct minix3_dir_entry {__u32 inode;char name[];};
struct mode_page_header {__be16 mode_data_length;__u8 medium_type;__u8 reserved1;__u8 reserved2;__u8 reserved3;__be16 desc_length;};
struct mrw_feature_desc {__be16 feature_code;unsigned __int8 reserved1 : 2;unsigned __int8 feature_version : 4;unsigned __int8 persistent : 1;unsigned __int8 curr : 1;__u8 add_len;unsigned __int8 reserved2 : 7;unsigned __int8 write : 1;__u8 reserved3;__u8 reserved4;__u8 reserved5;};
struct __attribute__((packed)) ncp_reply_header {__u16 type;__u8 sequence;__u8 conn_low;__u8 task;__u8 conn_high;__u8 completion_code;__u8 connection_state;__u8 data[];};
struct net_dm_alert_msg {__u32 entries;struct net_dm_drop_point points[];};
struct netlink_diag_msg {__u8 ndiag_family;__u8 ndiag_type;__u8 ndiag_protocol;__u8 ndiag_state;__u32 ndiag_portid;__u32 ndiag_dst_portid;__u32 ndiag_dst_group;__u32 ndiag_ino;__u32 ndiag_cookie[2];};
struct omap3isp_prev_nf {__u8 spread;__u32 table[64];};
struct omapfb_color_key {__u8 channel_out;__u32 background;__u32 trans_key;__u8 key_type;};
struct rds_free_mr_args {rds_rdma_cookie_t cookie;uint64_t flags;};
struct __attribute__((packed)) resume_swap_area {__kernel_loff_t offset;__u32 dev;};
struct __attribute__((packed)) sadb_x_kmaddress {__u16 sadb_x_kmaddress_len;__u16 sadb_x_kmaddress_exttype;__u32 sadb_x_kmaddress_reserved;};
struct __attribute__((packed)) sadb_x_kmprivate {__u16 sadb_x_kmprivate_len;__u16 sadb_x_kmprivate_exttype;__u32 sadb_x_kmprivate_reserved;};
struct sctp_assoc_value {sctp_assoc_t assoc_id;uint32_t assoc_value;};
struct __attribute__((packed)) __attribute__((aligned(4))) sctp_setpeerprim {sctp_assoc_t sspp_assoc_id;struct sockaddr_storage sspp_addr;};
struct snd_compr_tstamp {__u32 byte_offset;__u32 copied_total;snd_pcm_uframes_t pcm_frames;snd_pcm_uframes_t pcm_io_frames;__u32 sampling_rate;};
struct tipc_cfg_msg_hdr {__be32 tcm_len;__be16 tcm_type;__be16 tcm_flags;char tcm_reserved[8];};
struct tipc_link_config {__be32 value;char name[60];};
struct __attribute__((packed)) usb_cdc_ncm_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__le16 bcdNcmVersion;__u8 bmNetworkCapabilities;};
struct v4l2_captureparm {__u32 capability;__u32 capturemode;struct v4l2_fract timeperframe;__u32 extendedmode;__u32 readbuffers;__u32 reserved[4];};
struct v4l2_encoder_cmd {__u32 cmd;__u32 flags;v4l2_encoder_cmd___52D6E5497D79C1B4EFA05317CEE49696 __anonymous0;};
struct __attribute__((packed)) v4l2_ext_control {__u32 id;__u32 size;__u32 reserved2[1];v4l2_ext_control___69E76359D6A92B09615B31A0CD58076A __anonymous0;};
struct v4l2_framebuffer {__u32 capability;__u32 flags;void *base;struct v4l2_pix_format fmt;};
struct v4l2_frmsizeenum {__u32 index;__u32 pixel_format;__u32 type;v4l2_frmsizeenum___AB1B6A5DBF64E5DBD6E4918CD3F58D99 __anonymous0;__u32 reserved[2];};
struct v4l2_subdev_crop {__u32 which;__u32 pad;struct v4l2_rect rect;__u32 reserved[8];};
struct v4l2_subdev_edid {__u32 pad;__u32 start_block;__u32 blocks;__u32 reserved[5];__u8 *edid;};
struct vfio_region_info {__u32 argsz;__u32 flags;__u32 index;__u32 resv;__u64 size;__u64 offset;};
struct __attribute__((packed)) virtio_9p_config {__u16 tag_len;__u8 tag[];};
struct xcb_sync_int64_t {int32_t hi;uint32_t lo;};
struct xt_addrtype_info {__u16 source;__u16 dest;__u32 invert_source;__u32 invert_dest;};
struct xt_counters_info {char name[32];unsigned int num_counters;struct xt_counters counters[];};
typedef void (*BeforeFlushType)(Display *, XExtCodes *, const char *, __int64);
typedef char *(*ErrorStringType)(Display *, int, XExtCodes *, char *, int);
struct __attribute__((packed)) NFTLMediaHeader {char DataOrgID[6];__u16 NumEraseUnits;__u16 FirstPhysicalEUN;__u32 FormattedSize;unsigned __int8 UnitSizeFactor;};
struct _LbxInternAtoms {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD16 num;};
struct _XConnWatchInfo {XConnectionWatchProc fn;XPointer client_data;struct _XConnWatchInfo *next;};
struct _XkbNamesNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;int first_type;int num_types;int first_lvl;int num_lvls;int num_aliases;int num_radio_groups;unsigned int changed_vmods;unsigned int changed_groups;unsigned int changed_indicators;int first_key;int num_keys;};
struct _xkbGetControls {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;};
struct ethtool_ts_info {__u32 cmd;__u32 so_timestamping;__s32 phc_index;__u32 tx_types;__u32 tx_reserved[3];__u32 rx_filters;__u32 rx_reserved[3];};
struct ethtool_wolinfo {__u32 cmd;__u32 supported;__u32 wolopts;__u8 sopass[6];};
struct fuse_getattr_in {uint32_t getattr_flags;uint32_t dummy;uint64_t fh;};
struct fuse_release_in {uint64_t fh;uint32_t flags;uint32_t release_flags;uint64_t lock_owner;};
struct fuse_setattr_in {uint32_t valid;uint32_t padding;uint64_t fh;uint64_t size;uint64_t lock_owner;uint64_t atime;uint64_t mtime;uint64_t unused2;uint32_t atimensec;uint32_t mtimensec;uint32_t unused3;uint32_t mode;uint32_t unused4;uint32_t uid;uint32_t gid;uint32_t unused5;};
struct __attribute__((packed)) inftl_unithead1 {__u16 virtualUnitNo;__u16 prevUnitNo;__u8 ANAC;__u8 NACs;__u8 parityPerField;__u8 discarded;};
struct __attribute__((packed)) inftl_unithead2 {__u8 parityPerField;__u8 ANAC;__u16 prevUnitNo;__u16 virtualUnitNo;__u8 NACs;__u8 discarded;};
struct kvm_device_attr {__u32 flags;__u32 group;__u64 attr;__u64 addr;};
struct kvm_guest_debug {__u32 control;__u32 pad;struct kvm_guest_debug_arch arch;};
struct kvm_signal_mask {__u32 len;__u8 sigset[];};
struct kvm_translation {__u64 linear_address;__u64 physical_address;__u8 valid;__u8 writeable;__u8 usermode;__u8 pad[5];};
struct minix_dir_entry {__u16 inode;char name[];};
struct mtrr_state_type {struct mtrr_var_range var_ranges[256];mtrr_type fixed_ranges[88];unsigned __int8 enabled;unsigned __int8 have_fixed;mtrr_type def_type;};
struct ncp_volume_info {__u32 total_blocks;__u32 free_blocks;__u32 purgeable_blocks;__u32 not_yet_purgeable_blocks;__u32 total_dir_entries;__u32 available_dir_entries;__u8 sectors_per_block;char volume_name[17];};
struct omapfb_mem_info {__u32 size;__u8 type;__u8 reserved[3];};
struct ppp_option_data {u_int8_t *ptr;u_int32_t length;int transmit;};
struct rds_get_mr_args {struct rds_iovec vec;uint64_t cookie_addr;uint64_t flags;};
struct rds_rdma_notify {uint64_t user_token;int32_t status;};
struct rm_feature_desc {__be16 feature_code;unsigned __int8 reserved1 : 2;unsigned __int8 feature_version : 4;unsigned __int8 persistent : 1;unsigned __int8 curr : 1;__u8 add_len;unsigned __int8 mech_type : 3;unsigned __int8 load : 1;unsigned __int8 eject : 1;unsigned __int8 pvnt_jmpr : 1;unsigned __int8 dbml : 1;unsigned __int8 lock : 1;__u8 reserved2;__u8 reserved3;__u8 reserved4;};
struct snd_compr_avail {__u64 avail;struct snd_compr_tstamp tstamp;};
struct snd_ctl_elem_id {unsigned int numid;snd_ctl_elem_iface_t iface;unsigned int device;unsigned int subdevice;unsigned __int8 name[44];unsigned int index;};
struct snd_enc_generic {__u32 bw;__s32 reserved[15];};
struct snd_timer_ginfo {struct snd_timer_id tid;unsigned int flags;int card;unsigned __int8 id[64];unsigned __int8 name[80];unsigned __int64 reserved0;unsigned __int64 resolution;unsigned __int64 resolution_min;unsigned __int64 resolution_max;unsigned int clients;unsigned __int8 reserved[32];};
struct tc_codel_xstats {__u32 maxpacket;__u32 count;__u32 lastcount;__u32 ldelay;__s32 drop_next;__u32 drop_overlimit;__u32 ecn_mark;__u32 dropping;};
struct tipc_genlmsghdr {__u32 dest;__u16 cmd;__u16 reserved;};
struct __attribute__((packed)) usb_ctrlrequest {__u8 bRequestType;__u8 bRequest;__le16 wValue;__le16 wIndex;__le16 wLength;};
struct __attribute__((packed)) usb_set_sel_req {__u8 u1_sel;__u8 u1_pel;__le16 u2_sel;__le16 u2_pel;};
struct __attribute__((packed)) v4l2_bt_timings {__u32 width;__u32 height;__u32 interlaced;__u32 polarities;__u64 pixelclock;__u32 hfrontporch;__u32 hsync;__u32 hbackporch;__u32 vfrontporch;__u32 vsync;__u32 vbackporch;__u32 il_vfrontporch;__u32 il_vsync;__u32 il_vbackporch;__u32 standards;__u32 flags;__u32 reserved[14];};
struct v4l2_capability {__u8 driver[16];__u8 card[32];__u8 bus_info[32];__u32 version;__u32 capabilities;__u32 device_caps;__u32 reserved[3];};
struct v4l2_outputparm {__u32 capability;__u32 outputmode;struct v4l2_fract timeperframe;__u32 extendedmode;__u32 writebuffers;__u32 reserved[4];};
struct v4l2_vbi_format {__u32 sampling_rate;__u32 offset;__u32 samples_per_line;__u32 sample_format;__s32 start[2];__u32 count[2];__u32 flags;__u32 reserved[2];};
struct video_highlight {int active;__u8 contrast1;__u8 contrast2;__u8 color1;__u8 color2;__u32 ypos;__u32 xpos;};
struct xcb_rectangle_t {int16_t x;int16_t y;uint16_t width;uint16_t height;};
struct xcb_timecoord_t {xcb_timestamp_t time;int16_t x;int16_t y;};
struct xcb_xkb_shape_t {xcb_atom_t name;uint8_t nOutlines;uint8_t primaryNdx;uint8_t approxNdx;uint8_t pad0;};
struct xcb_xv_format_t {xcb_visualid_t visual;uint8_t depth;uint8_t pad0[3];};
struct xt_get_revision {char name[29];__u8 revision;};
struct xt_mark_mtinfo1 {__u32 mark;__u32 mask;__u8 invert;};
struct xt_multiport_v1 {__u8 flags;__u8 count;__u16 ports[15];__u8 pflags[15];__u8 invert;};
typedef void (*ClientDiedFunc)(pointer client, FontPathElementPtr fpe);
typedef int (*LoadGlyphsFunc)(pointer client, FontPtr pfont, int range_flag, unsigned int nchars, int item_size, unsigned __int8 *data);
typedef void (*PrintErrorType)(Display *, XErrorEvent *, void *);
struct _LbxStartProxy {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _XExtEventInfo {CARD32 mask;BYTE type;BYTE word;};
struct _i2o_lct_entry {unsigned __int32 entry_size : 16;unsigned __int32 tid : 12;unsigned __int32 reserved : 4;__u32 change_ind;__u32 device_flags;unsigned __int32 class_id : 12;unsigned __int32 version : 4;unsigned __int32 vendor_id : 16;__u32 sub_class;unsigned __int32 user_tid : 12;unsigned __int32 parent_tid : 12;unsigned __int32 bios_info : 8;__u8 identity_tag[8];__u32 event_capabilities;};
struct _i2o_local_bus {__u16 LbBaseIOPort;__u16 reserved;__u32 LbBaseMemoryAddress;};
struct _i2o_other_bus {__u16 BaseIOPort;__u16 reserved;__u32 BaseMemoryAddress;};
struct _xSyncAwaitReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;};
struct _xValuatorInfo {CARD8 c_class;CARD8 length;CARD8 num_axes;CARD8 mode;CARD32 motion_buffer_size;};
struct atalk_netrange {__u8 nr_phase;__be16 nr_firstnet;__be16 nr_lastnet;};
struct bp_getfile_arg {bp_machine_name_t client_name;bp_fileid_t file_id;};
struct dccp_hdr_reset {struct dccp_hdr_ack_bits dccph_reset_ack;__u8 dccph_reset_code;__u8 dccph_reset_data[3];};
struct dm_target_deps {__u32 count;__u32 padding;__u64 dev[];};
struct ebt_802_3_info {__u8 sap;__be16 type;__u8 bitmask;__u8 invflags;};
struct ebt_nflog_info {__u32 len;__u16 group;__u16 threshold;__u16 flags;__u16 pad;char prefix[64];};
struct ethtool_eeprom {__u32 cmd;__u32 magic;__u32 offset;__u32 len;__u8 data[];};
struct fc_bsg_host_ct {uint8_t reserved;uint8_t port_id[3];uint32_t preamble_word0;uint32_t preamble_word1;uint32_t preamble_word2;};
struct fc_els_rtv_acc {__u8 rtv_cmd;__u8 rtv_zero[3];__be32 rtv_r_a_tov;__be32 rtv_e_d_tov;__be32 rtv_toq;};
struct fuse_file_lock {uint64_t start;uint64_t end;uint32_t type;uint32_t pid;};
struct fuse_in_header {uint32_t len;uint32_t opcode;uint64_t unique;uint64_t nodeid;uint32_t uid;uint32_t gid;uint32_t pid;uint32_t padding;};
struct fuse_ioctl_out {int32_t result;uint32_t flags;uint32_t in_iovs;uint32_t out_iovs;};
struct hashlimit_cfg1 {__u32 mode;__u32 avg;__u32 burst;__u32 size;__u32 max;__u32 gc_interval;__u32 expire;__u8 srcmask;__u8 dstmask;};
struct hiddev_devinfo {__u32 bustype;__u32 busnum;__u32 devnum;__u32 ifnum;__s16 vendor;__s16 product;__s16 version;__u32 num_applications;};
struct hidraw_devinfo {__u32 bustype;__s16 vendor;__s16 product;};
struct __attribute__((packed)) hippi_snap_hdr {__u8 dsap;__u8 ssap;__u8 ctrl;__u8 oui[3];__be16 ethertype;};
struct __attribute__((packed)) i2400m_bcf_hdr {__le32 module_type;__le32 header_len;__le32 header_version;__le32 module_id;__le32 module_vendor;__le32 date;__le32 size;__le32 key_size;__le32 modulus_size;__le32 exponent_size;__u8 reserved[88];};
struct __attribute__((packed)) i2400m_tlv_hdr {__le16 type;__le16 length;__u8 pl[];};
union i2c_smbus_data {__u8 byte;__u16 word;__u8 block[34];};
struct ib_ucm_attr_id {__u64 response;__u32 id;__u32 reserved;};
struct ib_ucm_cmd_hdr {__u32 cmd;__u16 in;__u16 out;};
union ieee754_double {double d;struct ieee754_double___D177F1DF27478B0248C6745F72EEAEB0 ieee;struct ieee754_double___DD584A325266113E3D0838C6650565BE ieee_nan;};
struct __attribute__((packed)) inftl_unittail {__u8 Reserved[4];__u16 EraseMark;__u16 EraseMark1;};
struct __attribute__((packed)) jffs2_raw_xref {jint16_t magic;jint16_t nodetype;jint32_t totlen;jint32_t hdr_crc;jint32_t ino;jint32_t xid;jint32_t xseqno;jint32_t node_crc;};
struct kvm_breakpoint {__u32 enabled;__u32 padding;__u64 address;};
struct kvm_clock_data {__u64 clock;__u32 flags;__u32 pad[9];};
struct kvm_config_tlb {__u64 params;__u64 array;__u32 mmu_type;__u32 array_len;};
struct kvm_ppc_pvinfo {__u32 flags;__u32 hcall[4];__u8 pad[108];};
struct kvm_steal_time {__u64 steal;__u32 version;__u32 flags;__u32 pad[12];};
struct media_pad_desc {__u32 entity;__u16 index;__u32 flags;__u32 reserved[2];};
struct mpc_parameters {__u16 mpc_p1;__u16 mpc_p2;__u8 mpc_p3[8];__u16 mpc_p4;__u16 mpc_p5;__u16 mpc_p6;};
struct msdos_dir_slot {__u8 id;__u8 name0_4[10];__u8 attr;__u8 reserved;__u8 alias_checksum;__u8 name5_10[12];__le16 start;__u8 name11_12[4];};
struct nfs_fhbase_new {__u8 fb_version;__u8 fb_auth_type;__u8 fb_fsid_type;__u8 fb_fileid_type;__u32 fb_auth[1];};
struct ptp_clock_time {__s64 sec;__u32 nsec;__u32 reserved;};
struct qnx4_link_info {char dl_fname[48];__le32 dl_inode_blk;__u8 dl_inode_ndx;__u8 dl_spare[10];__u8 dl_status;};
typedef res_sendhookact (*res_send_qhook)(struct sockaddr_in *const *ns, const u_char **query, int *querylen, u_char *ans, int anssiz, int *resplen);
typedef res_sendhookact (*res_send_rhook)(const struct sockaddr_in *ns, const u_char *query, int querylen, u_char *ans, int anssiz, int *resplen);
struct __attribute__((packed)) sadb_supported {__u16 sadb_supported_len;__u16 sadb_supported_exttype;__u32 sadb_supported_reserved;};
struct __attribute__((packed)) sadb_x_sec_ctx {__u16 sadb_x_sec_len;__u16 sadb_x_sec_exttype;__u8 sadb_x_ctx_alg;__u8 sadb_x_ctx_doi;__u16 sadb_x_ctx_len;};
struct sctp_assoc_ids {__u32 gaids_number_of_ids;sctp_assoc_t gaids_assoc_id[];};
struct sctp_authkeyid {sctp_assoc_t scact_assoc_id;__u16 scact_keynumber;};
struct sctp_sack_info {sctp_assoc_t sack_assoc_id;uint32_t sack_delay;uint32_t sack_freq;};
struct snd_enc_vorbis {__s32 quality;__u32 managed;__u32 max_bit_rate;__u32 min_bit_rate;__u32 downmix;};
struct sys_desc_table {__u16 length;__u8 table[14];};
struct tc_mqprio_qopt {__u8 num_tc;__u8 prio_tc_map[16];__u8 hw;__u16 count[16];__u16 offset[16];};
struct __attribute__((packed)) v4l2_dbg_match {__u32 type;v4l2_dbg_match___9221E6CCFE3ED5A42DA7B217EF6A225C __anonymous0;};
struct v4l2_selection {__u32 type;__u32 target;__u32 flags;struct v4l2_rect r;__u32 reserved[9];};
struct virtio_net_hdr {__u8 flags;__u8 gso_type;__u16 hdr_len;__u16 gso_size;__u16 csum_start;__u16 csum_offset;};
struct xcb_charinfo_t {int16_t left_side_bearing;int16_t right_side_bearing;int16_t character_width;int16_t ascent;int16_t descent;uint16_t attributes;};
struct xcb_fontprop_t {xcb_atom_t name;uint32_t value;};
struct xcb_res_type_t {xcb_atom_t resource_type;uint32_t count;};
struct xcb_xv_image_t {uint32_t id;uint16_t width;uint16_t height;uint32_t data_size;uint32_t num_planes;};
struct xt_length_info {__u16 min;__u16 max;__u8 invert;};
struct xt_set_info_v0 {ip_set_id_t index;union xt_set_info_v0___5FA737C7984580A7156FEACCCEF959DE u;};
struct yppushresp_xfr {u_int transid;yppush_status status;};
typedef void (*CloseFontFunc)(FontPathElementPtr fpe, FontPtr pFont);
typedef void (*Dwarf_Handler)(Dwarf_Error, Dwarf_Ptr);
typedef int (*StartLfwiFunc)(pointer client, FontPathElementPtr fpe, char *pat, int len, int max, pointer *privatep);
typedef int (*XErrorHandler)(Display *, XErrorEvent *);
struct _LbxImageText {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;CARD8 nChars;};
struct _LbxPolyPoint {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;CARD8 padBytes;};
struct _LbxStopProxy {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
typedef __ssize_t __io_write_fn(void *cookie, const char *buf, size_t n);
struct __jmp_buf_tag {__jmp_buf __jmpbuf;int __mask_was_saved;__sigset_t __saved_mask;};
struct _agp_allocate {int key;__kernel_size_t pg_count;__u32 type;__u32 physical;};
struct _fpx_sw_bytes {__uint32_t magic1;__uint32_t extended_size;__uint64_t xstate_bv;__uint32_t xstate_size;__uint32_t padding[7];};
struct apm_bios_info {__u16 version;__u16 cseg;__u32 offset;__u16 cseg_16;__u16 dseg;__u16 flags;__u16 cseg_len;__u16 cseg_16_len;__u16 dseg_len;};
struct arc_eth_encap {__u8 proto;struct ethhdr eth;__u8 payload[];};
struct bp_whoami_res {bp_machine_name_t client_name;bp_machine_name_t domain_name;bp_address router_address;};
struct __attribute__((packed)) cgw_csum_crc8 {__s8 from_idx;__s8 to_idx;__s8 result_idx;__u8 init_crc_val;__u8 final_xor_val;__u8 crctab[256];__u8 profile;__u8 profile_data[20];};
struct ethtool_stats {__u32 cmd;__u32 n_stats;__u64 data[];};
struct __attribute__((packed)) fddi_snap_hdr {__u8 dsap;__u8 ssap;__u8 ctrl;__u8 oui[3];__be16 ethertype;};
struct fiemap_extent {__u64 fe_logical;__u64 fe_physical;__u64 fe_length;__u64 fe_reserved64[2];__u32 fe_flags;__u32 fe_reserved[3];};
struct fuse_flush_in {uint64_t fh;uint32_t unused;uint32_t padding;uint64_t lock_owner;};
struct fuse_fsync_in {uint64_t fh;uint32_t fsync_flags;uint32_t padding;};
struct fuse_init_out {uint32_t major;uint32_t minor;uint32_t max_readahead;uint32_t flags;uint16_t max_background;uint16_t congestion_threshold;uint32_t max_write;};
struct fuse_ioctl_in {uint64_t fh;uint32_t flags;uint32_t cmd;uint64_t arg;uint32_t in_size;uint32_t out_size;};
struct fuse_open_out {uint64_t fh;uint32_t open_flags;uint32_t padding;};
struct fuse_write_in {uint64_t fh;uint64_t offset;uint32_t size;uint32_t write_flags;uint64_t lock_owner;uint32_t flags;uint32_t padding;};
struct gfs2_rgrp_lvb {__be32 rl_magic;__be32 rl_flags;__be32 rl_free;__be32 rl_dinodes;__be64 rl_igeneration;__be32 rl_unlinked;__be32 __pad;};
struct hdsp_peak_rms {__u32 input_peaks[26];__u32 playback_peaks[26];__u32 output_peaks[28];__u64 input_rms[26];__u64 playback_rms[26];__u64 output_rms[26];};
struct ib_ucm_listen {__be64 service_id;__be64 service_mask;__u32 id;__u32 reserved;};
struct ib_uverbs_sge {__u64 addr;__u32 length;__u32 lkey;};
union ieee754_float {float f;struct ieee754_float___CCFA8EFBEFBEB58ABED61A4627F05411 ieee;struct ieee754_float___C1CC197CEBD9377945A71E8A21F83EB1 ieee_nan;};
struct inotify_event {int wd;uint32_t mask;uint32_t cookie;uint32_t len;char name[];};
struct kvm_dirty_log {__u32 slot;__u32 padding1;kvm_dirty_log___2B14A28C4DCCD1DA7D9F0B5F8695D8BE __anonymous0;};
struct kvm_dirty_tlb {__u64 bitmap;__u32 num_dirty;};
struct kvm_irq_level {kvm_irq_level___2C42BCD169011235984D59B666AD220A __anonymous0;__u32 level;};
struct kvm_msr_entry {__u32 index;__u32 reserved;__u64 data;};
struct mtd_oob_buf64 {__u64 start;__u32 pad;__u32 length;__u64 usr_ptr;};
struct mtd_write_req {__u64 start;__u64 len;__u64 ooblen;__u64 usr_data;__u64 usr_oob;__u8 mode;__u8 padding[7];};
struct rta_cacheinfo {__u32 rta_clntref;__u32 rta_lastuse;__s32 rta_expires;__u32 rta_error;__u32 rta_used;__u32 rta_id;__u32 rta_ts;__u32 rta_tsage;};
struct __attribute__((packed)) sadb_spirange {__u16 sadb_spirange_len;__u16 sadb_spirange_exttype;__u32 sadb_spirange_min;__u32 sadb_spirange_max;__u32 sadb_spirange_reserved;};
struct sctp_hmacalgo {__u32 shmac_num_idents;__u16 shmac_idents[];};
struct sockaddr_ax25 {sa_family_t sax25_family;ax25_address sax25_call;int sax25_ndigis;};
struct tc_cbq_xstats {__u32 borrows;__u32 overactions;__s32 avgidle;__s32 undertime;};
struct tc_hfsc_stats {__u64 work;__u64 rtwork;__u32 period;__u32 level;};
struct tc_netem_rate {__u32 rate;__s32 packet_overhead;__u32 cell_size;__s32 cell_overhead;};
struct tc_rsvp_pinfo {struct tc_rsvp_gpi dpi;struct tc_rsvp_gpi spi;__u8 protocol;__u8 tunnelid;__u8 tunnelhdr;__u8 pad;};
struct __attribute__((packed)) ubi_rsvol_req {__s64 bytes;__s32 vol_id;};
struct unix_diag_msg {__u8 udiag_family;__u8 udiag_type;__u8 udiag_state;__u8 pad;__u32 udiag_ino;__u32 udiag_cookie[2];};
struct v4l2_timecode {__u32 type;__u32 flags;__u8 frames;__u8 seconds;__u8 minutes;__u8 hours;__u8 userbits[4];};
struct watchdog_info {__u32 options;__u32 firmware_version;__u8 identity[32];};
struct xcb_xkb_row_t {int16_t top;int16_t left;uint8_t nKeys;uint8_t vertical;uint8_t pad0[2];};
struct xt_nflog_info {__u32 len;__u16 group;__u16 threshold;__u16 flags;__u16 pad;char prefix[64];};
struct xt_quota_info {__u32 flags;__u32 pad;__attribute__((aligned(8))) __u64 quota;struct xt_quota_priv *master;};
struct xt_realm_info {__u32 id;__u32 mask;__u8 invert;};
struct ypresp_master {ypstat stat;peername peer;};
struct _LbxCopyArea {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 srcCache;CARD8 cacheEnts;};
struct _LbxPolyText {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;};
struct _LbxPutImage {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 compressionMethod;CARD8 cacheEnts;CARD8 bitPacked;};
struct _XkbAnyEvent {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;unsigned int device;};
struct __gconv_info {size_t __nsteps;struct __gconv_step *__steps;struct __gconv_step_data __data[];};
typedef __ssize_t __io_read_fn(void *cookie, char *buf, size_t nbytes);
struct _agp_segment {__kernel_off_t pg_start;__kernel_size_t pg_count;int prot;};
struct _i2o_pci_bus {__u8 PciFunctionNumber;__u8 PciDeviceNumber;__u8 PciBusNumber;__u8 reserved;__u16 PciVendorID;__u16 PciDeviceID;};
struct _xButtonInfo {CARD8 c_class;CARD8 length;CARD16 num_buttons;};
struct _xDeviceInfo {CARD32 type;CARD8 id;CARD8 num_classes;CARD8 use;CARD8 attached;};
struct _xRRModeInfo {CARD32 id;CARD16 width;CARD16 height;CARD32 dotClock;CARD16 hSyncStart;CARD16 hSyncEnd;CARD16 hTotal;CARD16 hSkew;CARD16 vSyncStart;CARD16 vSyncEnd;CARD16 vTotal;CARD16 nameLength;CARD32 modeFlags;};
struct _xkbGetState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;};
struct authdes_verf {union authdes_verf___7A6CF749D39778C1B89693A36BA727C7 adv_time_u;uint32_t adv_int_u;};
struct capi_profile {__u16 ncontroller;__u16 nbchannel;__u32 goptions;__u32 support1;__u32 support2;__u32 support3;__u32 reserved[6];__u32 manu[5];};
struct __attribute__((packed)) cgw_csum_xor {__s8 from_idx;__s8 to_idx;__s8 result_idx;__u8 init_xor_val;};
struct dvd_physical {__u8 type;__u8 layer_num;struct dvd_layer layer[4];};
struct dvd_send_key {__u8 type;unsigned __int32 agid : 2;dvd_key key;};
struct ebt_log_info {__u8 loglevel;__u8 prefix[30];__u32 bitmask;};
struct __attribute__((packed)) ether_header {u_int8_t ether_dhost[6];u_int8_t ether_shost[6];u_int16_t ether_type;};
union etheraddress {__u8 dne_addr[6];struct etheraddress___DC2CBD42B28FE4DE7724D288168FAA30 dne_remote;};
struct ethtool_dump {__u32 cmd;__u32 version;__u32 flag;__u32 len;__u8 data[];};
struct ethtool_regs {__u32 cmd;__u32 version;__u32 len;__u8 data[];};
struct ethtool_test {__u32 cmd;__u32 flags;__u32 reserved;__u32 len;__u64 data[];};
struct __attribute__((packed)) fc_els_adisc {__u8 adisc_cmd;__u8 adisc_resv[3];__u8 adisc_resv1;__u8 adisc_hard_addr[3];__be64 adisc_wwpn;__be64 adisc_wwnn;__u8 adisc_resv2;__u8 adisc_port_id[3];};
struct __attribute__((packed)) fc_ns_rff_id {struct fc_ns_fid fr_fid;__u8 fr_resvd[2];__u8 fr_feat;__u8 fr_type;};
struct fib_rule_hdr {__u8 family;__u8 dst_len;__u8 src_len;__u8 tos;__u8 table;__u8 res1;__u8 res2;__u8 action;__u32 flags;};
struct fs_qfilestat {__u64 qfs_ino;__u64 qfs_nblks;__u32 qfs_nextents;};
struct fuse_bmap_in {uint64_t block;uint32_t blocksize;uint32_t padding;};
struct fuse_kstatfs {uint64_t blocks;uint64_t bfree;uint64_t bavail;uint64_t files;uint64_t ffree;uint32_t bsize;uint32_t namelen;uint32_t frsize;uint32_t padding;uint32_t spare[6];};
struct fuse_poll_in {uint64_t fh;uint64_t kh;uint32_t flags;uint32_t events;};
struct fuse_read_in {uint64_t fh;uint64_t offset;uint32_t size;uint32_t read_flags;uint64_t lock_owner;uint32_t flags;uint32_t padding;};
struct group_filter {uint32_t gf_interface;struct sockaddr_storage gf_group;uint32_t gf_fmode;uint32_t gf_numsrc;struct sockaddr_storage gf_slist[1];};
struct __attribute__((packed)) hippi_le_hdr {unsigned __int8 fc : 3;unsigned __int8 double_wide : 1;unsigned __int8 message_type : 4;__u8 dest_switch_addr[3];unsigned __int8 dest_addr_type : 4;unsigned __int8 src_addr_type : 4;__u8 src_switch_addr[3];__u16 reserved;__u8 daddr[6];__u16 locally_administered;__u8 saddr[6];};
struct ifaddrlblmsg {__u8 ifal_family;__u8 __ifal_reserved;__u8 ifal_prefixlen;__u8 ifal_flags;__u32 ifal_index;__u32 ifal_seq;};
struct ip_timestamp {u_int8_t ipt_code;u_int8_t ipt_len;u_int8_t ipt_ptr;unsigned __int32 ipt_flg : 4;unsigned __int32 ipt_oflw : 4;u_int32_t data[9];};
struct irda_ias_set {char irda_class_name[64];char irda_attrib_name[256];unsigned int irda_attrib_type;union irda_ias_set___7EBFB09B0303C5332C09A0F6BC207BBD attribute;__u32 daddr;};
struct key_netstarg {keybuf st_priv_key;keybuf st_pub_key;netnamestr st_netname;};
struct minix2_inode {__u16 i_mode;__u16 i_nlinks;__u16 i_uid;__u16 i_gid;__u32 i_size;__u32 i_atime;__u32 i_mtime;__u32 i_ctime;__u32 i_zone[10];};
struct ovs_key_ipv4 {__be32 ipv4_src;__be32 ipv4_dst;__u8 ipv4_proto;__u8 ipv4_tos;__u8 ipv4_ttl;__u8 ipv4_frag;};
struct ovs_key_ipv6 {__be32 ipv6_src[4];__be32 ipv6_dst[4];__be32 ipv6_label;__u8 ipv6_proto;__u8 ipv6_tclass;__u8 ipv6_hlimit;__u8 ipv6_frag;};
typedef bool_t (*resultproc_t)(caddr_t resp, struct sockaddr_in *raddr);
struct __attribute__((packed)) rfkill_event {__u32 idx;__u8 type;__u8 op;__u8 soft;__u8 hard;};
struct __attribute__((packed)) sadb_address {__u16 sadb_address_len;__u16 sadb_address_exttype;__u8 sadb_address_proto;__u8 sadb_address_prefixlen;__u16 sadb_address_reserved;};
struct sctp_rtoinfo {sctp_assoc_t srto_assoc_id;__u32 srto_initial;__u32 srto_max;__u32 srto_min;};
struct seccomp_data {int nr;__u32 arch;__u64 instruction_pointer;__u64 args[6];};
struct snd_pcm_info {unsigned int device;unsigned int subdevice;int stream;int card;unsigned __int8 id[64];unsigned __int8 name[80];unsigned __int8 subname[32];int dev_class;int dev_subclass;unsigned int subdevices_count;unsigned int subdevices_avail;union snd_pcm_sync_id sync;unsigned __int8 reserved[64];};
struct sockaddr_x25 {__kernel_sa_family_t sx25_family;struct x25_address sx25_addr;};
struct tc_gred_qopt {__u32 limit;__u32 qth_min;__u32 qth_max;__u32 DP;__u32 backlog;__u32 qave;__u32 forced;__u32 early;__u32 other;__u32 pdrop;__u8 Wlog;__u8 Plog;__u8 Scell_log;__u8 prio;__u32 packets;__u32 bytesin;};
struct tc_pedit_sel {__u32 index;__u32 capab;int action;int refcnt;int bindcnt;unsigned __int8 nkeys;unsigned __int8 flags;struct tc_pedit_key keys[];};
struct tcf_meta_val {__u16 kind;__u8 shift;__u8 op;};
struct td_thrhandle {td_thragent_t *th_ta_p;psaddr_t th_unique;};
struct v4l2_control {__u32 id;__s32 value;};
struct v4l2_fmtdesc {__u32 index;__u32 type;__u32 flags;__u8 description[32];__u32 pixelformat;__u32 reserved[4];};
struct vfio_irq_set {__u32 argsz;__u32 flags;__u32 index;__u32 start;__u32 count;__u8 data[];};
struct vhost_memory {__u32 nregions;__u32 padding;struct vhost_memory_region regions[];};
struct xt_dccp_info {__u16 dpts[2];__u16 spts[2];__u16 flags;__u16 invflags;__u16 typemask;__u8 option;};
struct xt_multiport {__u8 flags;__u8 count;__u16 ports[15];};
struct xt_time_info {__u32 date_start;__u32 date_stop;__u32 daytime_start;__u32 daytime_stop;__u32 monthdays_match;__u8 weekdays_match;__u8 flags;};
struct ypresp_order {ypstat stat;u_int ordernum;};
typedef int (*StartLaFunc)(pointer client, FontPathElementPtr fpe, char *pat, int len, int max, pointer *privatep);
struct _GetBugMode {CARD8 reqType;CARD8 mitReqType;CARD16 length;};
struct _XFreeFuncs {FreeFuncType atoms;FreeModmapType modifiermap;FreeFuncType key_bindings;FreeFuncType context_db;FreeFuncType defaultCCCs;FreeFuncType clientCmaps;FreeFuncType intensityMaps;FreeFuncType im_filters;FreeFuncType xkb;};
struct _agp_region {__kernel_pid_t pid;__kernel_size_t seg_count;struct _agp_segment *seg_list;};
struct _xRectangle {INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct arc_rfc1201 {__u8 proto;__u8 split_flag;__be16 sequence;__u8 payload[];};
struct atmarp_ctrl {enum atmarp_ctrl_type type;int itf_num;__be32 ip;};
struct br_port_msg {__u8 family;__u32 ifindex;};
struct canfd_frame {canid_t can_id;__u8 len;__u8 flags;__u8 __res0;__u8 __res1;__attribute__((aligned(8))) __u8 data[64];};
struct cryptkeyarg {netnamestr remotename;des_block deskey;};
struct efs_sb_info {__u32 fs_magic;__u32 fs_start;__u32 first_block;__u32 total_blocks;__u32 group_size;__u32 data_free;__u32 inode_free;__u16 inode_blocks;__u16 total_groups;};
struct __attribute__((packed)) epoll_event {uint32_t events;epoll_data_t data;};
struct fc_els_clid {__u8 clid_iq;__u8 clid_ic;__be16 clid_epai;};
struct fc_els_cssp {__be16 cp_class;__be16 cp_init;__be16 cp_recip;__be16 cp_rdfs;__be16 cp_con_seq;__be16 cp_ee_cred;__u8 cp_resv1;__u8 cp_open_seq;__u8 _cp_resv2[2];};
struct fc_els_logo {__u8 fl_cmd;__u8 fl_zero[3];__u8 fl_resvd;__u8 fl_n_port_id[3];__be64 fl_n_port_wwn;};
struct fc_els_prli {__u8 prli_cmd;__u8 prli_spp_len;__be16 prli_len;};
struct fc_els_prlo {__u8 prlo_cmd;__u8 prlo_obs;__be16 prlo_len;};
struct fc_els_rscn {__u8 rscn_cmd;__u8 rscn_page_len;__be16 rscn_plen;};
struct __attribute__((packed)) fc_ns_rn_id {struct fc_ns_fid fr_fid;__be64 fr_wwn;};
struct if_irda_req {union if_irda_req___4AF2B49FDDB54BAFABDFAE063E6E4A98 ifr_ifrn;union if_irda_req___9DA9AA7ECA440A9F5CDA74F00DBFB189 ifr_ifru;};
struct ifla_vf_mac {__u32 vf;__u8 mac[32];};
struct ip_msfilter {struct in_addr imsf_multiaddr;struct in_addr imsf_interface;uint32_t imsf_fmode;uint32_t imsf_numsrc;struct in_addr imsf_slist[1];};
struct kvm_x86_mce {__u64 status;__u64 addr;__u64 misc;__u64 mcg_status;__u8 bank;__u8 pad1[7];__u64 pad2[3];};
struct linkinfo_dn {__u16 idn_segsize;__u8 idn_linkstate;};
struct mmc_ioc_cmd {int write_flag;int is_acmd;__u32 opcode;__u32 arg;__u32 response[4];unsigned int flags;unsigned int blksz;unsigned int blocks;unsigned int postsleep_min_us;unsigned int postsleep_max_us;unsigned int data_timeout_ns;unsigned int cmd_timeout_ms;__u32 __pad;__u64 data_ptr;};
struct mtrr_gentry {__u64 base;__u32 size;__u32 regnum;__u32 type;__u32 _pad;};
struct mtrr_sentry {__u64 base;__u32 size;__u32 type;};
struct __attribute__((packed)) nbd_request {__be32 magic;__be32 type;char handle[8];__be64 from;__be32 len;};
struct printf_info {int prec;int width;wchar_t spec;unsigned __int32 is_long_double : 1;unsigned __int32 is_short : 1;unsigned __int32 is_long : 1;unsigned __int32 alt : 1;unsigned __int32 space : 1;unsigned __int32 left : 1;unsigned __int32 showsign : 1;unsigned __int32 group : 1;unsigned __int32 extra : 1;unsigned __int32 is_char : 1;unsigned __int32 wide : 1;unsigned __int32 i18n : 1;unsigned __int32 __pad : 4;unsigned __int16 user;wchar_t pad;};
struct romfs_inode {__be32 next;__be32 spec;__be32 size;__be32 checksum;char name[];};
struct sockaddr_ec {sa_family_t sec_family;unsigned __int8 port;unsigned __int8 cb;unsigned __int8 type;struct ec_addr addr;unsigned __int64 cookie;};
struct sockaddr_nl {__kernel_sa_family_t nl_family;unsigned __int16 nl_pad;__u32 nl_pid;__u32 nl_groups;};
struct __attribute__((packed)) sockaddr_pn {__kernel_sa_family_t spn_family;__u8 spn_obj;__u8 spn_dev;__u8 spn_resource;__u8 spn_zero[11];};
struct tc_ratespec {unsigned __int8 cell_log;__u8 linklayer;unsigned __int16 overhead;__int16 cell_align;unsigned __int16 mpu;__u32 rate;};
struct tc_tbf_qopt {struct tc_ratespec rate;struct tc_ratespec peakrate;__u32 limit;__u32 buffer;__u32 mtu;};
struct tcf_em_text {char algo[16];__u16 from_offset;__u16 to_offset;__u16 pattern_len;unsigned __int8 from_layer : 4;unsigned __int8 to_layer : 4;__u8 pad;};
struct tipc_subscr {struct tipc_name_seq seq;__u32 timeout;__u32 filter;char usr_handle[8];};
struct __attribute__((packed)) ubi_map_req {__s32 lnum;__s8 dtype;__s8 padding[3];};
struct vm86_struct {struct vm86_regs regs;unsigned __int64 flags;unsigned __int64 screen_bitmap;unsigned __int64 cpu_type;struct revectored_struct int_revectored;struct revectored_struct int21_revectored;};
struct xcb_depth_t {uint8_t depth;uint8_t pad0;uint16_t visuals_len;uint8_t pad1[4];};
struct xt_ecn_info {__u8 operation;__u8 invert;__u8 ip_ect;union xt_ecn_info___96739E9C55C04822E8C6EA3C08F21247 proto;};
struct xt_led_info {char id[27];__u8 always_blink;__u32 delay;void *internal_data;};
struct xt_set_info {ip_set_id_t index;__u8 dim;__u8 flags;};
struct ypbind_resp {ypbind_resptype ypbind_status;union ypbind_resp___CD49527FE086EB7F6D0E69C2C3AD50AC ypbind_resp_u;};
struct ypreq_nokey {domainname domain;mapname map;};
typedef int (*NextLaFunc)(pointer client, FontPathElementPtr fpe, char **namep, int *namelenp, char **resolvedp, int *resolvedlenp, pointer c_private);
struct _xkbGetMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 full;CARD16 partial;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD16 virtualMods;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD16 pad1;};
struct _xkbSetMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 present;CARD16 flags;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD16 totalSyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD16 totalActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 totalKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 totalKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 totalModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD8 totalVModMapKeys;CARD16 virtualMods;};
struct atalk_addr {__be16 s_net;__u8 s_node;};
struct atmtcp_hdr {__u16 vpi;__u16 vci;__u32 length;};
struct bfs_dirent {__le16 ino;char name[14];};
struct dvb_net_if {__u16 pid;__u16 if_num;__u8 feedtype;};
union epoll_data {void *ptr;int fd;uint32_t u32;uint64_t u64;};
struct f_owner_ex {enum __pid_type type;__pid_t pid;};
struct fc_els_rec {__u8 rec_cmd;__u8 rec_zero[3];__u8 rec_resvd;__u8 rec_s_id[3];__be16 rec_ox_id;__be16 rec_rx_id;};
struct fc_els_rpl {__u8 rpl_cmd;__u8 rpl_resv[5];__be16 rpl_max_size;__u8 rpl_resv1;__u8 rpl_index[3];};
struct fc_els_rps {__u8 rps_cmd;__u8 rps_resv[2];__u8 rps_flag;__be64 rps_port_spec;};
struct fc_els_rrq {__u8 rrq_cmd;__u8 rrq_zero[3];__u8 rrq_resvd;__u8 rrq_s_id[3];__be16 rrq_ox_id;__be16 rrq_rx_id;};
struct fc_els_spp {__u8 spp_type;__u8 spp_type_ext;__u8 spp_flags;__u8 _spp_resvd;__be32 spp_orig_pa;__be32 spp_resp_pa;__be32 spp_params;};
struct __attribute__((packed)) fc_ns_rsnn {__be64 fr_wwn;__u8 fr_name_len;char fr_name[];};
struct __attribute__((packed)) fc_ns_rspn {struct fc_ns_fid fr_fid;__u8 fr_name_len;char fr_name[];};
struct genlmsghdr {__u8 cmd;__u8 version;__u16 reserved;};
struct gfs2_quota {__be64 qu_limit;__be64 qu_warn;__be64 qu_value;__u8 qu_reserved[64];};
struct ip_ct_sctp {enum sctp_conntrack state;__be32 vtag[2];};
struct klm_holder {bool_t exclusive;int svid;u_int l_offset;u_int l_len;};
struct kvm_cpuid2 {__u32 nent;__u32 padding;struct kvm_cpuid_entry2 entries[];};
struct kvm_dtable {__u64 base;__u16 limit;__u16 padding[3];};
struct mei_client {__u32 max_msg_length;__u8 protocol_version;__u8 reserved[3];};
struct ndt_config {__u16 ndtc_key_len;__u16 ndtc_entry_size;__u32 ndtc_entries;__u32 ndtc_last_flush;__u32 ndtc_last_rand;__u32 ndtc_hash_rnd;__u32 ndtc_hash_mask;__u32 ndtc_hash_chain_gc;__u32 ndtc_proxy_qlen;};
struct optdata_dn {__le16 opt_status;__le16 opt_optl;__u8 opt_data[16];};
struct ovs_key_nd {__u32 nd_target[4];__u8 nd_sll[6];__u8 nd_tll[6];};
struct __attribute__((packed)) sadb_ident {__u16 sadb_ident_len;__u16 sadb_ident_exttype;__u16 sadb_ident_type;__u16 sadb_ident_reserved;__u64 sadb_ident_id;};
struct shaperconf {u_int16_t ss_cmd;union shaperconf___47AAC6CDC41711CE8CC9377BCA1EA0FF ss_u;};
struct sigcontext {__uint64_t r8;__uint64_t r9;__uint64_t r10;__uint64_t r11;__uint64_t r12;__uint64_t r13;__uint64_t r14;__uint64_t r15;__uint64_t rdi;__uint64_t rsi;__uint64_t rbp;__uint64_t rbx;__uint64_t rdx;__uint64_t rax;__uint64_t rcx;__uint64_t rsp;__uint64_t rip;__uint64_t eflags;unsigned __int16 cs;unsigned __int16 gs;unsigned __int16 fs;unsigned __int16 __pad0;__uint64_t err;__uint64_t trapno;__uint64_t oldmask;__uint64_t cr2;sigcontext___828E61C1A573428F501E0B4A68357797 __anonymous0;__uint64_t __reserved1[8];};
struct tc_cbq_ovl {unsigned __int8 strategy;unsigned __int8 priority2;__u16 pad;__u32 penalty;};
struct tc_htb_opt {struct tc_ratespec rate;struct tc_ratespec ceil;__u32 buffer;__u32 cbuffer;__u32 quantum;__u32 level;__u32 prio;};
struct tcf_em_cmp {__u32 val;__u32 mask;__u16 off;unsigned __int8 align : 4;unsigned __int8 flags : 4;unsigned __int8 layer : 4;unsigned __int8 opnd : 4;};
struct tun_filter {__u16 flags;__u16 count;__u8 addr[][6];};
struct v4l2_plane {__u32 bytesused;__u32 length;union v4l2_plane___7F64AB741C97E078016A97B1EA8BEEFE m;__u32 data_offset;__u32 reserved[11];};
struct vring_used {__u16 flags;__u16 idx;struct vring_used_elem ring[];};
struct xcb_host_t {uint8_t family;uint8_t pad0;uint16_t address_len;};
struct xt_osf_opt {__u16 kind;__u16 length;struct xt_osf_wc wc;};
struct ypresp_val {ypstat stat;valdat val;};
struct ypresp_xfr {u_int transid;ypxfrstat xfrstat;};
struct Gpm_Event {unsigned __int8 buttons;unsigned __int8 modifiers;unsigned __int16 vc;__int16 dx;__int16 dy;__int16 x;__int16 y;enum Gpm_Etype type;int clicks;enum Gpm_Margin margin;__int16 wdx;__int16 wdy;};
struct _FontInfo {unsigned __int16 firstCol;unsigned __int16 lastCol;unsigned __int16 firstRow;unsigned __int16 lastRow;unsigned __int16 defaultCh;unsigned __int32 noOverlap : 1;unsigned __int32 terminalFont : 1;unsigned __int32 constantMetrics : 1;unsigned __int32 constantWidth : 1;unsigned __int32 inkInside : 1;unsigned __int32 inkMetrics : 1;unsigned __int32 allExist : 1;unsigned __int32 drawDirection : 2;unsigned __int32 cachable : 1;unsigned __int32 anamorphic : 1;__int16 maxOverlap;__int16 pad;xCharInfo maxbounds;xCharInfo minbounds;xCharInfo ink_maxbounds;xCharInfo ink_minbounds;__int16 fontAscent;__int16 fontDescent;int nprops;FontPropPtr props;char *isStringProp;};
struct _LbxDelta {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 diffs;CARD8 cindex;};
struct _xKeyInfo {CARD8 c_class;CARD8 length;CARD8 min_keycode;CARD8 max_keycode;CARD16 num_keys;CARD8 pad1;CARD8 pad2;};
struct af_alg_iv {__u32 ivlen;__u8 iv[];};
struct can_frame {canid_t can_id;__u8 can_dlc;__attribute__((aligned(8))) __u8 data[8];};
struct cp_result {nis_error cp_status;uint32_t cp_zticks;uint32_t cp_dticks;};
struct __attribute__((packed)) dtv_stats {__u8 scale;dtv_stats___6DB0D4BB6C903E0E24B38DB1D5FBBC78 __anonymous0;};
struct __attribute__((packed)) e820entry {__u64 addr;__u64 size;__u32 type;};
struct efs_super {__be32 fs_size;__be32 fs_firstcg;__be32 fs_cgfsize;__be16 fs_cgisize;__be16 fs_sectors;__be16 fs_heads;__be16 fs_ncg;__be16 fs_dirty;__be32 fs_time;__be32 fs_magic;char fs_fname[6];char fs_fpack[6];__be32 fs_bmsize;__be32 fs_tfree;__be32 fs_tinode;__be32 fs_bmblock;__be32 fs_replsb;__be32 fs_lastialloc;char fs_spare[20];__be32 fs_checksum;};
struct elf32_rel {Elf32_Addr r_offset;Elf32_Word r_info;};
struct elf64_rel {Elf64_Addr r_offset;Elf64_Xword r_info;};
struct ether_arp {struct arphdr ea_hdr;u_int8_t arp_sha[6];u_int8_t arp_spa[4];u_int8_t arp_tha[6];u_int8_t arp_tpa[4];};
struct fc_ba_acc {__u8 ba_seq_id_val;__u8 ba_seq_id;__u8 ba_resvd[2];__be16 ba_ox_id;__be16 ba_rx_id;__be16 ba_low_seq_cnt;__be16 ba_high_seq_cnt;};
struct fc_ct_hdr {__u8 ct_rev;__u8 ct_in_id[3];__u8 ct_fs_type;__u8 ct_fs_subtype;__u8 ct_options;__u8 _ct_resvd1;__be16 ct_cmd;__be16 ct_mr_size;__u8 _ct_resvd2;__u8 ct_reason;__u8 ct_explan;__u8 ct_vendor;};
struct fuse_attr {uint64_t ino;uint64_t size;uint64_t blocks;uint64_t atime;uint64_t mtime;uint64_t ctime;uint32_t atimensec;uint32_t mtimensec;uint32_t ctimensec;uint32_t mode;uint32_t nlink;uint32_t uid;uint32_t gid;uint32_t rdev;uint32_t blksize;uint32_t padding;};
struct gmonparam {__int64 state;u_short *kcount;u_long kcountsize;u_long *froms;u_long fromssize;struct tostruct *tos;u_long tossize;__int64 tolimit;u_long lowpc;u_long highpc;u_long textsize;u_long hashfraction;__int64 log_hashfraction;};
struct group_obj {uint32_t gr_flags;struct group_obj___6B1AF3D1F6DE7092D80225088D6E3A34 gr_members;};
struct group_req {uint32_t gr_interface;struct sockaddr_storage gr_group;};
struct groupnode {name gr_name;groups gr_next;};
struct idmap_msg {__u8 im_type;__u8 im_conv;char im_name[128];__u32 im_id;__u8 im_status;};
struct if_dqinfo {__u64 dqi_bgrace;__u64 dqi_igrace;__u32 dqi_flags;__u32 dqi_valid;};
struct ifaddrmsg {__u8 ifa_family;__u8 ifa_prefixlen;__u8 ifa_flags;__u8 ifa_scope;__u32 ifa_index;};
struct ip6t_frag {__u32 ids[2];__u32 hdrlen;__u8 flags;__u8 invflags;};
struct kvm_cpuid {__u32 nent;__u32 padding;struct kvm_cpuid_entry entries[];};
struct kvm_irqfd {__u32 fd;__u32 gsi;__u32 flags;__u32 resamplefd;__u8 pad[16];};
struct __attribute__((packed)) nftl_uci1 {__u32 WearInfo;__u16 EraseMark;__u16 EraseMark1;};
struct __attribute__((packed)) nftl_uci2 {__u16 FoldMark;__u16 FoldMark1;__u32 unused;};
struct __attribute__((packed)) phonethdr {__u8 pn_rdev;__u8 pn_sdev;__u8 pn_res;__be16 pn_length;__u8 pn_robj;__u8 pn_sobj;};
struct phonetmsg {__u8 pn_trans_id;__u8 pn_msg_id;union phonetmsg___4AA71C9F4BCFFCF9FC39418BEA83C1F7 pn_msg_u;};
struct ping_args {nis_name dir;uint32_t stamp;};
struct ppp_stats {struct pppstat p;struct vjstat vj;};
struct pptp_addr {__be16 call_id;struct in_addr sin_addr;};
struct __attribute__((packed)) sadb_prop {__u16 sadb_prop_len;__u16 sadb_prop_exttype;__u8 sadb_prop_replay;__u8 sadb_prop_reserved[3];};
struct __attribute__((packed)) __attribute__((aligned(4))) sctp_prim {sctp_assoc_t ssp_assoc_id;struct sockaddr_storage ssp_addr;};
struct sigaction {union sigaction___CF138106520E5A28DAF2A67779B92EE8 __sigaction_handler;__sigset_t sa_mask;int sa_flags;void (*sa_restorer)(void);};
struct snd_xferi {snd_pcm_sframes_t result;void *buf;snd_pcm_uframes_t frames;};
struct snd_xfern {snd_pcm_sframes_t result;void **bufs;snd_pcm_uframes_t frames;};
struct statvfs64 {unsigned __int64 f_bsize;unsigned __int64 f_frsize;__fsblkcnt64_t f_blocks;__fsblkcnt64_t f_bfree;__fsblkcnt64_t f_bavail;__fsfilcnt64_t f_files;__fsfilcnt64_t f_ffree;__fsfilcnt64_t f_favail;unsigned __int64 f_fsid;unsigned __int64 f_flag;unsigned __int64 f_namemax;int __f_spare[6];};
struct tc_police {__u32 index;int action;__u32 limit;__u32 burst;__u32 mtu;struct tc_ratespec rate;struct tc_ratespec peakrate;int refcnt;int bindcnt;__u32 capab;};
struct td_notify {td_notify_e type;union td_notify___143F0EF771439D241AFD6E8AB1506B64 u;};
struct timestamp {u_int8_t len;u_int8_t ptr;unsigned __int32 flags : 4;unsigned __int32 overflow : 4;u_int32_t data[9];};
struct v4l2_crop {__u32 type;struct v4l2_rect c;};
struct xcb_arc_t {int16_t x;int16_t y;uint16_t width;uint16_t height;int16_t angle1;int16_t angle2;};
struct xcb_rgb_t {uint16_t red;uint16_t green;uint16_t blue;uint8_t pad0[2];};
struct _XIMText {unsigned __int16 length;XIMFeedback *feedback;int encoding_is_wchar;union _XIMText___8281806D2C2C5E9220BA18F83AF5F330 string;};
struct _i2o_lct {unsigned __int32 table_size : 16;unsigned __int32 boot_tid : 12;unsigned __int32 lct_ver : 4;__u32 iop_flags;__u32 change_ind;i2o_lct_entry lct_entry[1];};
struct dirent64 {__ino64_t d_ino;__off64_t d_off;unsigned __int16 d_reclen;unsigned __int8 d_type;char d_name[256];};
struct dn_naddr {__le16 a_len;__u8 a_addr[2];};
struct fhstatus {u_int fhs_status;union fhstatus___5A86E21E7BD06EF982D138486E7C27D0 fhstatus_u;};
struct if_dqblk {__u64 dqb_bhardlimit;__u64 dqb_bsoftlimit;__u64 dqb_curspace;__u64 dqb_ihardlimit;__u64 dqb_isoftlimit;__u64 dqb_curinodes;__u64 dqb_btime;__u64 dqb_itime;__u32 dqb_valid;};
struct io_event {__u64 data;__u64 obj;__s64 res;__s64 res2;};
struct kvm_msrs {__u32 nmsrs;__u32 pad;struct kvm_msr_entry entries[];};
struct link_map {Elf64_Addr l_addr;char *l_name;Elf64_Dyn *l_ld;struct link_map *l_next;struct link_map *l_prev;};
struct nfgenmsg {__u8 nfgen_family;__u8 version;__be16 res_id;};
struct nlmsghdr {__u32 nlmsg_len;__u16 nlmsg_type;__u16 nlmsg_flags;__u32 nlmsg_seq;__u32 nlmsg_pid;};
struct oar_mask {uint32_t oa_rights;zotypes oa_otype;};
struct rtcanmsg {__u8 can_family;__u8 gwtype;__u16 flags;};
struct __attribute__((packed)) sadb_alg {__u8 sadb_alg_id;__u8 sadb_alg_ivlen;__u16 sadb_alg_minbits;__u16 sadb_alg_maxbits;__u16 sadb_alg_reserved;};
struct sigevent {sigval_t sigev_value;int sigev_signo;int sigev_notify;union sigevent___4FA236EFE1337B09F044CA22D4984BE4 _sigev_un;};
struct tc_stats {__u64 bytes;__u32 packets;__u32 drops;__u32 overlimits;__u32 bps;__u32 pps;__u32 qlen;__u32 backlog;};
struct tcp_info {u_int8_t tcpi_state;u_int8_t tcpi_ca_state;u_int8_t tcpi_retransmits;u_int8_t tcpi_probes;u_int8_t tcpi_backoff;u_int8_t tcpi_options;unsigned __int8 tcpi_snd_wscale : 4;unsigned __int8 tcpi_rcv_wscale : 4;u_int32_t tcpi_rto;u_int32_t tcpi_ato;u_int32_t tcpi_snd_mss;u_int32_t tcpi_rcv_mss;u_int32_t tcpi_unacked;u_int32_t tcpi_sacked;u_int32_t tcpi_lost;u_int32_t tcpi_retrans;u_int32_t tcpi_fackets;u_int32_t tcpi_last_data_sent;u_int32_t tcpi_last_ack_sent;u_int32_t tcpi_last_data_recv;u_int32_t tcpi_last_ack_recv;u_int32_t tcpi_pmtu;u_int32_t tcpi_rcv_ssthresh;u_int32_t tcpi_rtt;u_int32_t tcpi_rttvar;u_int32_t tcpi_snd_ssthresh;u_int32_t tcpi_snd_cwnd;u_int32_t tcpi_advmss;u_int32_t tcpi_reordering;u_int32_t tcpi_rcv_rtt;u_int32_t tcpi_rcv_space;u_int32_t tcpi_total_retrans;};
struct timespec {__time_t tv_sec;__syscall_slong_t tv_nsec;};
struct v86_regs {__u32 ebx;__u32 ecx;__u32 edx;__u32 esi;__u32 edi;__u32 ebp;__u32 eax;__u32 eip;__u32 eflags;__u32 esp;__u16 cs;__u16 ss;__u16 es;__u16 ds;__u16 fs;__u16 gs;};
typedef int (*XICProc)(XIC, XPointer, XPointer);
typedef void (*XIDProc)(Display *, XPointer, XPointer);
typedef void (*XIMProc)(XIM, XPointer, XPointer);
struct _XImage {int width;int height;int xoffset;int format;char *data;int byte_order;int bitmap_unit;int bitmap_bit_order;int bitmap_pad;int depth;int bytes_per_line;int bits_per_pixel;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;XPointer obdata;struct _XImage__funcs f;};
struct _XkbRow {__int16 top;__int16 left;unsigned __int16 num_keys;unsigned __int16 sz_keys;int vertical;XkbKeyPtr keys;XkbBoundsRec bounds;};
struct arc_cap {__u8 proto;__u8 cookie[4];union arc_cap___693039C66FBA5C91E273DA0B47DDAEBD mes;};
struct bcm_hcs {__u16 magic;__u16 control;__u16 rev_maj;__u16 rev_min;__u32 build_date;__u32 filelen;__u32 ldaddress;char filename[64];__u16 hcs;__u16 her_znaet_chto;__u32 crc;};
struct dcb_app {__u8 selector;__u8 priority;__u16 protocol;};
struct dn_addr {__le16 dna_family;union etheraddress dna_netaddr;};
struct dynamic {Elf32_Sword d_tag;union dynamic___355B7563D908D50B4B67712FB263B5CD d_un;};
struct e820map {__u32 nr_map;struct e820entry map[128];};
struct fb_cmap {__u32 start;__u32 len;__u16 *red;__u16 *green;__u16 *blue;__u16 *transp;};
struct flock64 {__int16 l_type;__int16 l_whence;__off64_t l_start;__off64_t l_len;__pid_t l_pid;};
struct i2c_msg {__u16 addr;__u16 flags;__u16 len;__u8 *buf;};
struct igmpmsg {__u32 unused1;__u32 unused2;unsigned __int8 im_msgtype;unsigned __int8 im_mbz;unsigned __int8 im_vif;unsigned __int8 unused3;struct in_addr im_src;struct in_addr im_dst;};
struct ip6t_ah {__u32 spis[2];__u32 hdrlen;__u8 hdrres;__u8 invflags;};
struct kvm_msi {__u32 address_lo;__u32 address_hi;__u32 data;__u32 flags;__u8 pad[16];};
struct kvm_xcr {__u32 xcr;__u32 reserved;__u64 value;};
struct mif6ctl {mifi_t mif6c_mifi;unsigned __int8 mif6c_flags;unsigned __int8 vifc_threshold;__u16 mif6c_pifi;unsigned int vifc_rate_limit;};
struct r_debug {int r_version;struct link_map *r_map;Elf64_Addr r_brk;enum r_debug___AF097615159EB3CBDA82C5A5C14EBA11 r_state;Elf64_Addr r_ldbase;};
struct statvfs {unsigned __int64 f_bsize;unsigned __int64 f_frsize;__fsblkcnt_t f_blocks;__fsblkcnt_t f_bfree;__fsblkcnt_t f_bavail;__fsfilcnt_t f_files;__fsfilcnt_t f_ffree;__fsfilcnt_t f_favail;unsigned __int64 f_fsid;unsigned __int64 f_flag;unsigned __int64 f_namemax;int __f_spare[6];};
struct tagITEM {TEXT name;TEXT description;struct tagMENU *imenu;void *userptr;Item_Options opt;__int16 index;__int16 y;__int16 x;bool value;struct tagITEM *left;struct tagITEM *right;struct tagITEM *up;struct tagITEM *down;};
struct timeval {__time_t tv_sec;__suseconds_t tv_usec;};
struct trh_hdr {u_int8_t ac;u_int8_t fc;u_int8_t daddr[6];u_int8_t saddr[6];u_int16_t rcf;u_int16_t rseg[8];};
struct trn_hdr {u_int8_t trn_ac;u_int8_t trn_fc;u_int8_t trn_dhost[6];u_int8_t trn_shost[6];u_int16_t trn_rcf;u_int16_t trn_rseg[8];};
struct dcbmsg {__u8 dcb_family;__u8 cmd;__u16 dcb_pad;};
struct dirent {__ino_t d_ino;__off_t d_off;unsigned __int16 d_reclen;unsigned __int8 d_type;char d_name[256];};
struct dqinfo {u_int64_t dqi_bgrace;u_int64_t dqi_igrace;u_int32_t dqi_flags;u_int32_t dqi_valid;};
struct hdr_ni {__u8 dsap;__u8 ssap;__be16 ctrl;__u8 orig[3];__be16 type;};
struct hdr_ui {__u8 dsap;__u8 ssap;__u8 ctrl;__u8 orig[3];__be16 type;};
struct ipt_ah {__u32 spis[2];__u8 invflags;};
struct mfcctl {struct in_addr mfcc_origin;struct in_addr mfcc_mcastgrp;vifi_t mfcc_parent;unsigned __int8 mfcc_ttls[32];unsigned int mfcc_pkt_cnt;unsigned int mfcc_byte_cnt;unsigned int mfcc_wrong_if;int mfcc_expire;};
struct msghdr {void *msg_name;socklen_t msg_namelen;struct iovec *msg_iov;size_t msg_iovlen;void *msg_control;size_t msg_controllen;int msg_flags;};
struct ndtmsg {__u8 ndtm_family;__u8 ndtm_pad1;__u16 ndtm_pad2;};
struct passwd {char *pw_name;char *pw_passwd;__uid_t pw_uid;__gid_t pw_gid;char *pw_gecos;char *pw_dir;char *pw_shell;};
struct tc_nat {__u32 index;__u32 capab;int action;int refcnt;int bindcnt;__be32 old_addr;__be32 new_addr;__be32 mask;__u32 flags;};
struct tcphdr {u_int16_t source;u_int16_t dest;u_int32_t seq;u_int32_t ack_seq;unsigned __int16 res1 : 4;unsigned __int16 doff : 4;unsigned __int16 fin : 1;unsigned __int16 syn : 1;unsigned __int16 rst : 1;unsigned __int16 psh : 1;unsigned __int16 ack : 1;unsigned __int16 urg : 1;unsigned __int16 res2 : 2;u_int16_t window;u_int16_t check;u_int16_t urg_ptr;};
struct tun_pi {__u16 flags;__be16 proto;};
struct xt_esp {__u32 spis[2];__u8 invflags;};
struct xt_tcp {__u16 spts[2];__u16 dpts[2];__u8 option;__u8 flg_mask;__u8 flg_cmp;__u8 invflags;};
struct xt_udp {__u16 spts[2];__u16 dpts[2];__u8 invflags;};
struct _xArc {INT16 x;INT16 y;CARD16 width;CARD16 height;INT16 angle1;INT16 angle2;};
struct _xReq {CARD8 reqType;CARD8 data;CARD16 length;};
struct dqblk {u_int64_t dqb_bhardlimit;u_int64_t dqb_bsoftlimit;u_int64_t dqb_curspace;u_int64_t dqb_ihardlimit;u_int64_t dqb_isoftlimit;u_int64_t dqb_curinodes;u_int64_t dqb_btime;u_int64_t dqb_itime;u_int32_t dqb_valid;};
struct fcllc {__u8 dsap;__u8 ssap;__u8 llc;__u8 protid[3];__be16 ethertype;};
struct flock {__int16 l_type;__int16 l_whence;__off_t l_start;__off_t l_len;__pid_t l_pid;};
struct timex {unsigned int modes;__syscall_slong_t offset;__syscall_slong_t freq;__syscall_slong_t maxerror;__syscall_slong_t esterror;int status;__syscall_slong_t constant;__syscall_slong_t precision;__syscall_slong_t tolerance;struct timeval time;__syscall_slong_t tick;__syscall_slong_t ppsfreq;__syscall_slong_t jitter;int shift;__syscall_slong_t stabil;__syscall_slong_t jitcnt;__syscall_slong_t calcnt;__syscall_slong_t errcnt;__syscall_slong_t stbcnt;int tai;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;__int32 : 32;};
struct tmask {CARD32 mask;Pointer dev;};
struct trllc {u_int8_t dsap;u_int8_t ssap;u_int8_t llc;u_int8_t protid[3];u_int16_t ethertype;};
struct ustat {__daddr_t f_tfree;__ino_t f_tinode;char f_fname[6];char f_fpack[6];};
union wait {int w_status;struct wait___E9BF053A98CA6B253628237B5A23E48D __wait_terminated;struct wait___39CA23F4E14B66D514B108A5928EF219 __wait_stopped;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___83773ADBAD3B93FDD4B93390256209A7 {__u8 device;__u8 lun;__u8 reserved1;__u8 reserved2;__u32 reserved3;__u64 reserved4;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___88F788ECB28BCCE1F1BB53FF78063EDE {__u16 id;__u64 lun;__u16 reserved1;__u32 reserved2;};
struct fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4___719E9A969D439A9871DE8EAA9BE35CAF {__le32 length;__le16 flags;__u8 version[2];__le32 root_cluster;__le16 info_sector;__le16 backup_boot;__le16 reserved2[6];__u8 drive_number;__u8 state;__u8 signature;__u8 vol_id[4];__u8 vol_label[11];__u8 fs_type[8];};
struct xt_entry_target___47536B2923186FE397875189D0BFAE98___84A7A9A013369EBAD6CAAE27DB63CB8D {__u16 target_size;char name[29];__u8 revision;};
struct xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718___E697E25CA4F698AF2CEDF10AA576C38D {__u16 match_size;char name[29];__u8 revision;};
union _xEvent______F60DFC41729ECCA7C121C44CBFE60E95___82F47A5C57D4899F304609D6061CA549 {struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FD3E7DCAA1FA6D37E77316D970071F0A l;struct _xEvent_________82F47A5C57D4899F304609D6061CA549___B8AD833485FADDB6F1E0494B45611EC6 s;struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FB6660946ED728575FB5339601D7D5BE b;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0D5E0D9ECA38FABF7ACF740E3D46813C {CARD32 pad00;CARD32 window;CARD32 colormap;BOOL _new;BYTE state;BYTE pad1;BYTE pad2;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0F73BC087B0175F837E61BF86166AB84 {CARD32 pad00;CARD32 window;CARD8 state;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___316B218C709051C178B3BB07E6B18196 {CARD32 pad00;CARD32 drawable;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 minorEvent;CARD16 count;BYTE majorEvent;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___3284E488B37AEC742A022E833068D497 {CARD32 pad00;CARD32 event;CARD32 window;BOOL override;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___40ECE1105C1C479EC11371480E0EAEEE {CARD32 pad00;CARD32 window;CARD32 atom;CARD32 time;BYTE state;BYTE pad1;CARD16 pad2;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___4D6B1C2E2FE6C1124CAB2311E897D1AB {CARD32 pad00;CARD8 request;CARD8 firstKeyCode;CARD8 count;BYTE pad1;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___674F3E4AE65A41A1BBF2ACE37596CB1B {CARD32 pad00;CARD32 event;CARD32 window;BOOL fromConfigure;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___CF45A70F1381AC3E41639336F8DCFD08 {CARD32 pad00;CARD32 parent;CARD32 window;CARD32 sibling;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 valueMask;CARD32 pad1;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___E3E63ACF9DBDF6C56161A285CC120760 {CARD32 pad00;CARD32 drawable;CARD16 minorEvent;BYTE majorEvent;BYTE bpad;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___2604A667C73FB069A2304F8E765BD24B {__u8 icptcode;__u16 ipa;__u32 ipb;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___649D61653448803413F3B321FF9BAB70 {__u16 subchannel_id;__u16 subchannel_nr;__u32 io_int_parm;__u32 io_int_word;__u32 ipb;__u8 dequeued;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8B28E511ABDF7664AE4A66D9651FF4E2 {__u64 phys_addr;__u8 data[8];__u32 len;__u8 is_write;};
struct ____1C1E9EA25555F3A04518B10EE9DF4602___5BEEE552B0DC6B217341171DE42CA55F {BYTE type;BYTE reason;CARD16 sequenceNumber;CARD32 time;CARD32 drawable;CARD32 port;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___002955E8B5DE3B92E30DFEF7AB65BFE2 {__pid_t si_pid;__uid_t si_uid;sigval_t si_sigval;};
struct ____41B0E947727B04B281BBEA4B1896A8BE___8A1A9DC09BDADE4F3456EDCC5E429445 {__pid_t si_pid;__uid_t si_uid;int si_status;__sigchld_clock_t si_utime;__sigchld_clock_t si_stime;};
struct ____4C8070B9675DF490D49D1F7749E052FB___554023DFD94A0D1F1DC623A35C397FCE {CARD32 pad0;CARD32 time;INT16 dx;INT16 dy;INT16 screen;CARD16 state;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__id_proc_event {__kernel_pid_t process_pid;__kernel_pid_t process_tgid;union proc_event_____id_proc_event___7E5CB78A3BF3DAEBB3EE71E5C1A8F53E r;union proc_event_____id_proc_event___709BA8BF96562A3C1103B79568DD6831 e;};
union kvm_irq_routing_entry___D9076952D2DFC423F3B6B09BF4822D49 {struct kvm_irq_routing_irqchip irqchip;struct kvm_irq_routing_msi msi;__u32 pad[8];};
struct ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314__ip6_hdrctl {uint32_t ip6_un1_flow;uint16_t ip6_un1_plen;uint8_t ip6_un1_nxt;uint8_t ip6_un1_hlim;};
struct xcb_input_change_device_dont_propagate_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint16_t num_classes;uint8_t mode;uint8_t pad0;};
union edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243 {__attribute__((packed)) struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___8A9F28F90D71C0EDE080B89C7B8F7CEB isa;__attribute__((packed)) struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___49195614F6319582F6FB6EA7B8D4CCE9 pci;__attribute__((packed)) struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___CCD79EED25FBA0A6EB1729EB5401A8B9 ibnd;__attribute__((packed)) struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___CCD79EED25FBA0A6EB1729EB5401A8B9 xprs;__attribute__((packed)) struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___CCD79EED25FBA0A6EB1729EB5401A8B9 htpt;__attribute__((packed)) struct edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243___CCD79EED25FBA0A6EB1729EB5401A8B9 unknown;};
union ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A {struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___F2BB21E50B3B06F7946E9B016EF3FE56 rdma;struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___7CB675A7FE3B771F7EED94A658A00CF2 atomic;struct ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A___0A024C9A9BA58F0A63BD780E6C8FAD05 ud;};
union media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4 {struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___4AD0A116567558B22CFABFC49C5FFE0A v4l;struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___4AD0A116567558B22CFABFC49C5FFE0A fb;struct media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4___090D2B91546D13E6DEEAE2B35DAA114F alsa;int dvb;__u8 raw[184];};
struct xcb_xf86dri_query_direct_rendering_capable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
union v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB {struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___EBC2A1B437D5ACA45358D03849DB19E5 stop;struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___E1020325AD69165DDCE560DF1208AB92 start;struct v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB___CA6086BB8AC19E5B352F0637E4160722 raw;};
union v4l2_streamparm___27A26CB990F090CF49B51711EB49A596 {struct v4l2_captureparm capture;struct v4l2_outputparm output;__u8 raw_data[200];};
struct xcb_input_get_device_dont_propagate_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_selinux_set_selection_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_len;};
struct xcb_xf86dri_query_direct_rendering_capable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t is_capable;};
union xt_entry_target___47536B2923186FE397875189D0BFAE98 {struct xt_entry_target___47536B2923186FE397875189D0BFAE98___84A7A9A013369EBAD6CAAE27DB63CB8D user;struct xt_entry_target___47536B2923186FE397875189D0BFAE98___FB47B6E93E27087F0FEB5CEECBFB98BB kernel;__u16 target_size;};
union v4l2_querymenu___F0EB35073D18D1D762C948D5819F4E2D {__u8 name[32];__s64 value;};
struct xcb_input_get_selected_extension_events_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_selinux_set_property_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_len;};
union xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718 {struct xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718___E697E25CA4F698AF2CEDF10AA576C38D user;struct xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718___E8D3D8264EBDE8DDA40BE8682F61E36C kernel;__u16 match_size;};
union sockaddr_tipc___E58F941474A2167ADFB4DB3CD3C86AFF {struct tipc_portid id;struct tipc_name_seq nameseq;struct sockaddr_tipc___E58F941474A2167ADFB4DB3CD3C86AFF___6DE9A15E0505DC1D36F657D5804C4D5B name;};
union video_command___33EDB0D7B1B9386905594C9DF664C3AC {struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___EBC2A1B437D5ACA45358D03849DB19E5 stop;struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___E1020325AD69165DDCE560DF1208AB92 play;struct video_command___33EDB0D7B1B9386905594C9DF664C3AC___CA6086BB8AC19E5B352F0637E4160722 raw;};
struct xcb_input_get_device_dont_propagate_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_classes;uint8_t pad1[22];};
struct xcb_randr_get_screen_resources_current_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_selinux_get_selection_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_selection_data_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_atom_t selection;};
struct xcb_x_print_print_get_image_resolution_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;};
struct xcb_x_print_print_set_image_resolution_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint16_t image_resolution;};
struct xcb_input_get_selected_extension_events_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_this_classes;uint16_t num_all_classes;uint8_t pad1[20];};
struct xcb_selinux_get_property_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_set_device_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_len;};
struct xcb_selinux_set_selection_use_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_len;};
struct xcb_selinux_set_window_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_len;};
struct xcb_x_print_print_get_page_dimensions_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;};
union rta_session___D973AC1711B483EC871F326B7831CCB7 {struct rta_session___D973AC1711B483EC871F326B7831CCB7___9B3C115401ADAEEEC088EE222696ABF6 ports;struct rta_session___D973AC1711B483EC871F326B7831CCB7___1773C2309B9F5A0B912D9E6D7AA20BD2 icmpt;__u32 spi;};
struct xcb_composite_release_overlay_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_selinux_get_selection_data_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_set_property_use_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_len;};
struct xcb_x_print_print_get_image_resolution_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t image_resolution;};
struct xcb_x_print_print_set_image_resolution_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;uint16_t previous_resolutions;};
union atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4 {struct atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4___9610A77582F2A392DD1CBF879E698EA0 normal;struct atmlec_config_msg config;struct atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4___0818C7DDE51664281A126620DABD8E4B proxy;};
struct xcb_composite_unredirect_subwindows_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_input_change_device_key_mapping_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;xcb_input_key_code_t first_keycode;uint8_t keysyms_per_keycode;uint8_t keycode_count;};
struct xcb_input_get_device_modifier_mapping_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t keycodes_per_modifier;uint8_t pad1[23];};
struct xcb_input_set_device_modifier_mapping_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_selinux_get_device_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_property_data_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_selection_use_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_window_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_x_print_print_get_page_dimensions_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width;uint16_t height;uint16_t offset_x;uint16_t offset_y;uint16_t reproducible_width;uint16_t reproducible_height;};
union icmp6_hdr___85A0B7966B981BE593FDADBE0B8685D7 {uint32_t icmp6_un_data32[1];uint16_t icmp6_un_data16[2];uint8_t icmp6_un_data8[4];};
struct xcb_input_get_device_motion_events_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_timestamp_t start;xcb_timestamp_t stop;uint8_t device_id;};
struct xcb_render_query_pict_index_values_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_pictformat_t format;};
struct xcb_selinux_get_property_use_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_x_print_print_get_one_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t valueLen;uint8_t pad1[20];};
struct xcb_x_print_print_get_printer_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t printerNameLen;uint32_t localeLen;};
struct xcb_xf86dri_get_client_driver_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xkb_get_kbd_by_name_replies_t___geometry {uint8_t geometryDeviceID;xcb_atom_t name;uint8_t geometryFound;uint8_t pad0;uint16_t widthMM;uint16_t heightMM;uint16_t nProperties;uint16_t nColors;uint16_t nShapes;uint16_t nSections;uint16_t nDoodads;uint16_t nKeyAliases;uint8_t baseColorNdx;uint8_t labelColorNdx;xcb_xkb_counted_string_16_t *labelFont;xcb_xkb_property_t *properties;xcb_xkb_counted_string_16_t *colors;xcb_xkb_shape_t *shapes;xcb_xkb_section_t *sections;xcb_xkb_doodad_t *doodads;xcb_xkb_key_alias_t *keyAliases;};
union atm_blli___F33FFBC35AC6DBBD1109622F8FE46785 {struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___90930356AF01700B0B1F8C799478F0DA itu;unsigned __int8 user;struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___0F6B4EFD9333C782E1CC1D8BF79C584F h310;struct atm_blli___F33FFBC35AC6DBBD1109622F8FE46785___B6C23F42B327BC00499A13D234739E58 tr9577;};
union in6_addr___B80A5568EDCB3DEA112C17957211D170 {uint8_t __u6_addr8[16];uint16_t __u6_addr16[8];uint32_t __u6_addr32[4];};
union knfsd_fh___925CA116668CC790A9CAB8C177903946 {struct nfs_fhbase_old fh_old;__u32 fh_pad[32];struct nfs_fhbase_new fh_new;};
struct xcb_composite_redirect_subwindows_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_input_get_device_button_mapping_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t map_size;uint8_t pad1[23];};
struct xcb_input_set_device_button_mapping_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_res_query_client_pixmap_bytes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t xid;};
struct xcb_selinux_get_selection_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_atom_t selection;};
struct xcb_x_print_print_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context;};
struct xcb_x_print_print_get_document_data_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t status_code;uint32_t finished_flag;uint32_t dataLen;uint8_t pad1[12];};
union fddihdr___938C6FB260523AB5682B137AC0052733 {struct fddi_8022_1_hdr llc_8022_1;struct fddi_8022_2_hdr llc_8022_2;struct fddi_snap_hdr llc_snap;};
union icmphdr___44B9F435D952314818895718F3518D16 {struct icmphdr___44B9F435D952314818895718F3518D16___6EE1EE5693408D5F1EEE7E152919407C echo;u_int32_t gateway;struct icmphdr___44B9F435D952314818895718F3518D16___FAA42A1B1B50669B023341484BA7B095 frag;};
struct xcb_composite_get_overlay_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_input_get_device_key_mapping_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;xcb_input_key_code_t first_keycode;uint8_t count;};
struct xcb_input_get_device_motion_events_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_coords;uint8_t num_axes;uint8_t device_mode;uint8_t pad1[18];};
struct xcb_input_select_extension_event_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint16_t num_classes;uint8_t pad0[2];};
struct xcb_randr_list_output_properties_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;};
struct xcb_render_query_pict_index_values_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_values;uint8_t pad1[20];};
struct xcb_screensaver_unset_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_x_print_print_get_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint8_t pool;uint8_t pad0[3];};
struct xcb_x_print_print_get_printer_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t listCount;uint8_t pad1[20];};
struct xcb_x_print_print_input_selected_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;};
struct xcb_xf86dri_get_client_driver_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t client_driver_major_version;uint32_t client_driver_minor_version;uint32_t client_driver_patch_version;uint32_t client_driver_name_len;uint8_t pad1[8];};
struct xcb_xfixes_change_cursor_by_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t src;uint16_t nbytes;uint8_t pad0[2];};
struct xcb_composite_unredirect_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_glx_get_drawable_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_drawable_t drawable;};
struct xcb_glx_query_extensions_string_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_glx_vendor_private_with_reply_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t retval;uint8_t data1[24];};
struct xcb_randr_get_screen_size_range_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_res_query_client_pixmap_bytes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t bytes;uint32_t bytes_overflow;};
struct xcb_selinux_get_selection_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
union ifreq___75060FE57352FD064152EAF8FAEB1426 {struct sockaddr ifru_addr;struct sockaddr ifru_dstaddr;struct sockaddr ifru_broadaddr;struct sockaddr ifru_netmask;struct sockaddr ifru_hwaddr;__int16 ifru_flags;int ifru_ivalue;int ifru_mtu;struct ifmap ifru_map;char ifru_slave[16];char ifru_newname[16];__caddr_t ifru_data;};
struct xcb_dri2_get_buffers_with_format_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t width;uint32_t height;uint32_t count;uint8_t pad1[12];};
struct xcb_input_change_keyboard_device_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_input_device_presence_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;uint8_t devchange;uint8_t device_id;uint16_t control;uint8_t pad1[20];};
struct xcb_input_get_device_key_mapping_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t keysyms_per_keycode;uint8_t pad1[23];};
struct xcb_input_send_extension_event_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination;uint8_t device_id;uint8_t propagate;uint16_t num_classes;uint8_t num_events;uint8_t pad0[3];};
struct xcb_input_ungrab_device_button_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;uint8_t modifier_device;uint8_t button;uint8_t grabbed_device;};
struct xcb_randr_get_screen_resources_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_randr_list_output_properties_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_atoms;uint8_t pad1[22];};
struct xcb_render_reference_glyph_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t gsid;xcb_render_glyphset_t existing;};
struct xcb_res_query_client_resources_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t xid;};
struct xcb_selinux_get_client_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t resource;};
struct xcb_selinux_get_device_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t device;};
struct xcb_selinux_get_property_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_window_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_selinux_set_device_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t device;uint32_t context_len;};
struct xcb_x_print_print_input_selected_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t event_mask;uint32_t all_events_mask;};
struct xcb_composite_redirect_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_glx_get_drawable_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_attribs;uint8_t pad1[20];};
struct xcb_glx_get_query_objectuiv_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint32_t datum;uint8_t pad2[12];};
struct xcb_glx_query_extensions_string_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint8_t pad2[16];};
struct xcb_input_allow_device_events_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_timestamp_t time;uint8_t mode;uint8_t device_id;};
struct xcb_input_change_pointer_device_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_input_get_extension_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major;uint16_t server_minor;uint8_t present;uint8_t pad1[19];};
struct xcb_randr_get_crtc_gamma_size_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;};
struct xcb_randr_get_screen_size_range_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t min_width;uint16_t min_height;uint16_t max_width;uint16_t max_height;uint8_t pad1[16];};
struct xcb_randr_query_output_property_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pending;uint8_t range;uint8_t immutable;uint8_t pad1[21];};
struct xcb_render_create_anim_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cid;};
struct xcb_render_set_picture_filter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;uint16_t filter_len;uint8_t pad0[2];};
struct xcb_x_print_print_query_screens_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t listCount;uint8_t pad1[20];};
struct xcb_x_print_print_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_x_print_print_set_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context;};
struct xcb_xf86dri_get_drawable_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t drawable;};
struct xcb_xinerama_get_screen_count_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_glx_set_client_info_2arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;uint32_t num_versions;uint32_t gl_str_len;uint32_t glx_str_len;};
struct xcb_input_change_device_notify_event_t {uint8_t response_type;uint8_t device_id;uint16_t sequence;xcb_timestamp_t time;uint8_t request;uint8_t pad0[23];};
struct xcb_input_get_feedback_control_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_feedback;uint8_t pad1[22];};
struct xcb_input_grab_device_button_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t grab_window;uint8_t grabbed_device;uint8_t modifier_device;uint16_t num_classes;uint16_t modifiers;uint8_t this_device_mode;uint8_t other_device_mode;uint8_t button;uint8_t owner_events;uint8_t pad0[2];};
struct xcb_input_set_device_valuators_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_list_installed_colormaps_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_randr_get_crtc_transform_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;};
struct xcb_randr_get_output_primary_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_res_query_client_resources_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_types;uint8_t pad1[20];};
struct xcb_selinux_get_client_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_device_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_selinux_get_window_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context_len;uint8_t pad1[20];};
struct xcb_x_print_print_start_page_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xf86dri_close_connection_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xf86dri_destroy_drawable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t drawable;};
struct xcb_xv_query_port_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;};
struct xcb_xvmc_list_subpicture_types_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num;uint8_t pad1[20];};
struct xcb_change_keyboard_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint32_t value_mask;};
struct xcb_change_keyboard_mapping_request_t {uint8_t major_opcode;uint8_t keycode_count;uint16_t length;xcb_keycode_t first_keycode;uint8_t keysyms_per_keycode;uint8_t pad0[2];};
struct xcb_composite_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_glx_get_polygon_stipple_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint8_t lsb_first;};
struct xcb_glx_query_server_string_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t name;};
struct xcb_glx_set_client_info_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;uint32_t num_versions;uint32_t gl_str_len;uint32_t glx_str_len;};
struct xcb_input_ungrab_device_key_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t grabWindow;uint16_t modifiers;uint8_t modifier_device;uint8_t key;uint8_t grabbed_device;};
struct xcb_randr_get_crtc_gamma_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t size;uint8_t pad1[22];};
struct xcb_render_query_pict_formats_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_formats;uint32_t num_screens;uint32_t num_depths;uint32_t num_visuals;uint32_t num_subpixel;uint8_t pad1[4];};
struct xcb_screensaver_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;uint8_t pad1[20];};
struct xcb_selinux_list_properties_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_sync_list_system_counters_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t counters_len;uint8_t pad1[20];};
struct xcb_x_print_print_get_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context;};
struct xcb_xf86dri_auth_connection_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t magic;};
struct xcb_xf86dri_create_drawable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t drawable;};
struct xcb_xf86dri_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t context;};
struct xcb_xf86dri_get_device_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xf86dri_open_connection_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xfixes_intersect_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source1;xcb_xfixes_region_t source2;xcb_xfixes_region_t destination;};
struct xcb_xkb_get_indicator_state_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];};
struct xcb_xkb_set_debugging_flags_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t msgLength;uint8_t pad0[2];uint32_t affectFlags;uint32_t flags;uint32_t affectCtrls;uint32_t ctrls;};
struct xcb_xv_query_image_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_planes;uint32_t data_size;uint16_t width;uint16_t height;uint8_t pad1[12];};
struct xcb_xvmc_destroy_subpicture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_subpicture_t subpicture_id;};
struct xcb_xvmc_list_surface_types_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port_id;};
struct xcb_change_pointer_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;int16_t acceleration_numerator;int16_t acceleration_denominator;int16_t threshold;uint8_t do_acceleration;uint8_t do_threshold;};
struct xcb_copy_colormap_and_free_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t mid;xcb_colormap_t src_cmap;};
struct xcb_glx_destroy_glx_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_pixmap_t glx_pixmap;};
struct xcb_glx_get_visual_configs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_input_get_device_control_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_input_list_input_devices_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t devices_len;uint8_t pad1[23];};
struct xcb_input_query_device_state_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t num_classes;uint8_t pad1[23];};
struct xcb_list_installed_colormaps_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t cmaps_len;uint8_t pad1[22];};
struct xcb_record_disable_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_screensaver_query_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_x_print_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_id;uint32_t printerNameLen;uint32_t localeLen;};
struct xcb_xf86dri_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t visual;uint32_t context;};
struct xcb_xfixes_change_save_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t mode;uint8_t target;uint8_t map;uint8_t pad0;xcb_window_t window;};
struct xcb_xfixes_get_cursor_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cursor;};
struct xcb_xfixes_set_cursor_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cursor;uint16_t nbytes;uint8_t pad0[2];};
struct xcb_xfixes_subtract_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source1;xcb_xfixes_region_t source2;xcb_xfixes_region_t destination;};
struct xcb_xv_query_port_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_attributes;uint32_t text_size;uint8_t pad1[16];};
struct xcb_xv_select_video_notify_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint8_t onoff;uint8_t pad0[3];};
struct _xSecurityAuthorizationRevokedEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 authId;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct xcb_composite_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_dri2_destroy_drawable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_dri2_invalidate_buffers_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;};
struct xcb_get_window_attributes_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_glx_get_polygon_stipple_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_query_server_string_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t str_len;uint8_t pad2[16];};
struct xcb_input_grab_device_key_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t grab_window;uint16_t num_classes;uint16_t modifiers;uint8_t modifier_device;uint8_t grabbed_device;uint8_t key;uint8_t this_device_mode;uint8_t other_device_mode;uint8_t owner_events;uint8_t pad0[2];};
struct xcb_randr_get_screen_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_record_enable_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_render_free_glyph_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t glyphset;};
struct xcb_selinux_list_properties_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t properties_len;uint8_t pad1[20];};
struct xcb_selinux_list_selections_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t selections_len;uint8_t pad1[20];};
struct xcb_x_print_attribut_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_x_print_pcontext_t context;};
struct xcb_xf86dri_auth_connection_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t authenticated;};
struct xcb_xf86dri_create_drawable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t hw_drawable_handle;};
struct xcb_xf86dri_get_device_info_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t framebuffer_handle_low;uint32_t framebuffer_handle_high;uint32_t framebuffer_origin_offset;uint32_t framebuffer_size;uint32_t framebuffer_stride;uint32_t device_private_size;};
struct xcb_xf86dri_open_connection_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t sarea_handle_low;uint32_t sarea_handle_high;uint32_t bus_id_len;uint8_t pad1[12];};
struct xcb_xfixes_destroy_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xfixes_region_extents_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_xfixes_region_t destination;};
struct xcb_xkb_get_indicator_state_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint32_t state;uint8_t pad0[20];};
struct xcb_xkb_set_debugging_flags_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t currentFlags;uint32_t currentCtrls;uint32_t supportedFlags;uint32_t supportedCtrls;uint8_t pad1[8];};
struct xcb_xv_list_image_formats_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;};
struct xcb_xv_select_port_notify_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;uint8_t onoff;uint8_t pad0[3];};
struct xcb_xvmc_list_surface_types_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num;uint8_t pad1[20];};
struct xcb_damage_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_dri2_create_drawable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_get_keyboard_mapping_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_keycode_t first_keycode;uint8_t count;};
struct xcb_glx_get_visual_configs_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_visuals;uint32_t num_properties;uint8_t pad1[16];};
struct xcb_input_device_abs_calib_state_t {uint16_t control_id;uint16_t len;int32_t min_x;int32_t max_x;int32_t min_y;int32_t max_y;uint32_t flip_x;uint32_t flip_y;uint32_t rotation;uint32_t button_threshold;};
struct xcb_randr_get_crtc_gamma_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;};
struct xcb_randr_set_crtc_gamma_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;uint16_t size;uint8_t pad0[2];};
struct xcb_render_query_filters_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_render_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_shape_input_selected_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination_window;};
struct xcb_sync_destroy_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;};
struct xcb_xc_misc_get_xid_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t count;};
struct xcb_xf86dri_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t hw_context;};
struct xcb_xfixes_change_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t source;xcb_cursor_t destination;};
struct xcb_xfixes_create_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xfixes_expand_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_xfixes_region_t destination;uint16_t left;uint16_t right;uint16_t top;uint16_t bottom;};
struct xcb_xfixes_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_xinerama_query_screens_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t number;uint8_t pad1[20];};
struct xcb_xinerama_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major;uint16_t minor;};
struct xcb_xkb_latch_lock_state_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t affectModLocks;uint8_t modLocks;uint8_t lockGroup;uint8_t groupLock;uint8_t affectModLatches;uint8_t pad0;uint8_t latchGroup;uint16_t groupLatch;};
struct xcb_xvmc_create_subpicture_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width_actual;uint16_t height_actual;uint16_t num_palette_entries;uint16_t entry_bytes;uint8_t component_order[4];uint8_t pad1[12];};
struct xcb_xvmc_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_context_t context_id;};
struct xcb_xvmc_destroy_surface_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_surface_t surface_id;};
struct _019CECDD6753AAB6598130682127E88A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 accelNumerator;CARD16 accelDenominator;CARD16 threshold;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _01D78593398EF5D4C7B0D882F4AC2769 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 width_actual;CARD16 height_actual;CARD32 flags_return;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _021E9AD0CA1321D22959C0410667B3A9 {CARD8 type;CARD8 subCode;CARD16 sequenceNumber;CARD32 timestamp;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _0490893E281F28CD04BB03B56188F30F {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 cursor;};
struct _04D0ADC31935FE4C3A858C08EAEE2E45 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 padl2;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _069CA722659D31B5E21E1ACEADA10473 {CARD8 reqType;BYTE pad;CARD16 length;CARD16 nFonts;BYTE pad1;BYTE pad2;};
struct _0733D28D39B544C0D1FF9AB5A89F168E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 event_mask;};
struct _07A0BBE0F3D6D0E97B5A30869B6D39C4 {CARD8 byteOrder;BYTE pad;CARD16 majorVersion;CARD16 minorVersion;CARD16 nbytesAuthProto;CARD16 nbytesAuthString;CARD16 pad2;};
struct _0894F55B6F728822A381396F6EE8B24B {BOOL success;BOOL changeType;CARD16 majorVersion;CARD16 minorVersion;CARD16 length;CARD32 tag;};
struct _091D8C0512871595A9DC831969F12B34 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 window;};
struct _092DD72AC6B9BBA1C79AF097B6F8E844 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 num_feedbacks;CARD16 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;};
struct _095E6FF95FC66C44DDF436071BD80AA6 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numFormats;CARD32 numScreens;CARD32 numDepths;CARD32 numVisuals;CARD32 numSubpixel;CARD32 pad5;};
struct _09D1663D7DAEECED4A739563D5B83B0D {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 nAtoms;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _09E69E0556021A33BB43607C87C36B45 {CARD32 visual;CARD8 depth;CARD8 pad1;CARD16 pad2;};
struct _0A270F69B196F9EFA6F2CD4624EE5655 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad2;CARD32 pixel;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _0A710E56E462CA6F472C6BEF95652ED5 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;};
struct _0CCE02F838D9CC63825202C012B6DAD4 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 window;CARD32 selection;CARD32 eventMask;};
struct _0D158C80ECE88D73A8DF0C6BE4079214 {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD32 authId;};
struct _0D45806D0AFB3D6C5E140525A7935E9C {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t time;uint16_t deviceid;uint16_t pad;};
struct _0D9E7AE1C1D47F10E3F53D770D6A64FD {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 crtc;CARD32 configTimestamp;};
struct _0E536A4A735E73BADC27E9D377D18348 {CARD8 type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _0F2B39C4889BFBA0BBC9C66D38A1F5D3 {Elf32_Word sh_name;Elf32_Word sh_type;Elf32_Word sh_flags;Elf32_Addr sh_addr;Elf32_Off sh_offset;Elf32_Word sh_size;Elf32_Word sh_link;Elf32_Word sh_info;Elf32_Word sh_addralign;Elf32_Word sh_entsize;};
struct _113ADE3249D8CE9145901B23810AE272 {BYTE type;BYTE pad;CARD16 sequenceNumber;CARD32 length;CARD32 num_replies;CARD32 num_catalogues;};
union _12139D15327A66BC6BD2CA276E233382 {fsGenericReply generic;fsListExtensionsReply extensions;fsGetResolutionReply getres;};
struct _121BB16CF18BA8DCF6DED8D25AA283B5 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;};
struct _129AE17A1813221886388BE0CE8ED06D {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint32_t touchid;uint32_t root;uint32_t event;uint32_t child;uint16_t sourceid;uint16_t pad0;uint32_t flags;uint32_t pad1;uint32_t pad2;};
struct _12C70FB380D888247B65F57E99B647A7 {CARD32 encoding;CARD16 name_size;CARD16 width;CARD16 height;xvRational rate;CARD16 pad;};
struct _14A823895445B846828F3D4F9D47C3C9 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 surface_id;CARD32 context_id;};
struct _16D469E4E47B7327E679AF2DCECA539C {CARD16 control;CARD16 length;CARD32 offset_x;CARD32 offset_y;INT32 width;INT32 height;INT32 screen;CARD32 following;};
struct _176B59BEDA9B70C3FEBB155A23358FC4 {CARD8 type;CARD8 rotation;CARD16 sequenceNumber;CARD32 timestamp;CARD32 configTimestamp;CARD32 root;CARD32 window;CARD16 sizeID;CARD16 subpixelOrder;CARD16 widthInPixels;CARD16 heightInPixels;CARD16 widthInMillimeters;CARD16 heightInMillimeters;};
struct _17BA7F3533648026466E6A0BBE53DC05 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t time;uint16_t deviceid;uint8_t mode;uint8_t pad;uint32_t touchid;uint32_t grab_window;};
struct _19FC7662DCA21D9E3B89E1DCC09F0A20 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;CARD32 param;};
struct _1ACEBBD1BA76D1519A3D809460AEA55C {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _1B380CA5B169C2B25F5DE0AF08CB7E59 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _1C8B88A4B2A3D81E79624372BB131558 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 bitmap;};
struct _1E4927A029C92C0FD595CCC76CE8B139 {CARD8 header;CARD8 pad1;CARD16 pad2;CARD32 delay_time;};
struct _1F0742A31307BC27E4EE3AB33F15E494 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 window;CARD32 eventMask;};
struct _1F1AC3FACFBF0931A43D0CD999C4D927 {CARD8 reqType;CARD8 depth;CARD16 length;CARD32 pid;CARD32 drawable;CARD16 width;CARD16 height;};
struct _221FB40353091864D31474CD79EAAEF6 {CARD8 reqType;CARD8 XTestReqType;CARD16 length;CARD32 ack;CARD8 action_list[64];};
struct _232CF08580C586A710BC040E507CB83C {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 crtc;CARD16 size;CARD16 pad1;};
struct _24F12A37FE1D1AEA7948B3C7A0452456 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;CARD32 mask;};
struct _27AC02CFF97A742F93959B98FA171589 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;BYTE map[32];};
struct _28432349E9E6DB3D22D342B43F161279 {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 window;};
struct _286A111ACEDB435E271A47289B65D34E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 owner;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _292923DDD4ED46EE83D974C820DC3932 {CARD8 reqType;BYTE pad;CARD16 length;CARD16 maxNames;CARD16 nbytes;};
struct _29C593C589279C3E7D511580F3E78129 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 first_valuator;CARD8 num_valuators;BYTE pad1;};
struct _2A5F331BE8D13DBE7F0EFE2DE0745FC4 {CARD8 type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 authId;CARD16 dataLength;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _2AC87F894EE3258143DDE890FCFACB0D {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 glyphset;};
struct _2C303F742F1AA0AC713FA8EB1EC01C89 {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 cmap;CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad;};
struct _2CBA644A081B49363F2046758E32CF0D {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 damage;};
struct _2D75EBE1A6467BFFE36F9C7798C50507 {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint16_t major_version;uint16_t minor_version;uint32_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;};
struct _2E22270806C47E05D9B4938893A6CA7A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPixels;CARD16 nMasks;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _2E4398F466C16291FBF2DFDFDD4EEEFA {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 drawable;CARD32 region;};
struct _2E55BACA418C7D9DC01173D7FC9AB491 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD16 vid_w;CARD16 vid_h;CARD16 drw_w;CARD16 drw_h;CARD8 motion;CARD8 pad1;CARD16 pad2;};
struct _2E67F07AE07052B8E2E5530980B63AB8 {CARD8 type;CARD8 subtype;CARD16 sequenceNumber;CARD32 window;CARD32 cursorSerial;CARD32 timestamp;CARD32 name;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _2E772061F36030946C15A90398CEA89B {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 buffer;};
struct _2E8E071D0F1855B453728BF138794906 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 width;CARD32 height;CARD32 count;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _2E963936DF2C8EEC00CED466180278DB {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 num_clients;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _3088BFAEEF676422C10800B8EA2DDE0D {CARD8 type;CARD8 pad;CARD16 sequenceNumber;CARD16 event_type;CARD16 pad2;CARD32 drawable;CARD32 ust_hi;CARD32 ust_lo;CARD32 msc_hi;CARD32 msc_lo;CARD32 sbc_hi;CARD32 sbc_lo;};
struct _31656A24DD6A4D60E66F5C984119D448 {__be16 disc_information_length;unsigned __int8 reserved1 : 3;unsigned __int8 erasable : 1;unsigned __int8 border_status : 2;unsigned __int8 disc_status : 2;__u8 n_first_track;__u8 n_sessions_lsb;__u8 first_track_lsb;__u8 last_track_lsb;unsigned __int8 did_v : 1;unsigned __int8 dbc_v : 1;unsigned __int8 uru : 1;unsigned __int8 reserved2 : 2;unsigned __int8 dbit : 1;unsigned __int8 mrw_status : 2;__u8 disc_type;__u8 n_sessions_msb;__u8 first_track_msb;__u8 last_track_msb;__u32 disc_id;__u32 lead_in;__u32 lead_out;__u8 disc_bar_code[8];__u8 reserved3;__u8 n_opc;};
struct _31724D647FFD3CAE2535F1783448B15A {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source1;CARD32 source2;CARD32 destination;};
struct _32453B3EC12C1083BBBEA47A258ADABA {CARD8 reqType;BYTE pad;CARD16 length;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _32814486483B74398EA3D6D6C36E06C2 {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;};
struct _32EEA813D9DAD40A14F6989D3C5227A8 {BYTE type;BYTE unused;CARD16 sequenceNumber;CARD32 buffer;CARD32 timeStamp;CARD32 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;CARD32 unused6;};
struct _3369594E17BD6DC3517892D04DD0216E {CARD8 reqType;CARD8 XTestReqType;CARD16 length;CARD32 mode;};
struct _33E0BD21BC9E25CB376AFEED9A297D0A {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;CARD32 data00;CARD32 data01;CARD32 data02;CARD32 data03;CARD32 data04;CARD32 data05;};
struct _345FECB84F456AF148A04283FEB93B5B {CARD8 reqType;CARD8 data;CARD16 zero;CARD32 length;};
struct _34EAD46D4136C0FB62D0AF99E563E31F {uint8_t reqType;uint8_t ReqType;uint16_t length;uint16_t deviceid;uint8_t delete;uint8_t pad0;uint32_t property;uint32_t type;uint32_t offset;uint32_t len;};
struct _357A9604AFCE0041C6457BE84E687FE7 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 source_provider;CARD32 configTimestamp;};
struct _36BEE3A57B9FB4D58D0EF1CD5EE3E1F6 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 barrier;};
struct _37A9DB4B311662424B6FA129E06762F1 {CARD8 reqType;CARD8 button;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD16 pad;};
struct _3896B2BCF45D7EED33CC60DD2030F7DF {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Colormap colormap;int _new;int state;};
struct _38BC431CF83E096863532D796A6E7F77 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 ndevices;CARD8 pad1;CARD8 pad2;CARD8 pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _38D9E3C539C38752A8877DF0574E9A10 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint16_t deviceid;uint16_t pad0;uint32_t property;};
struct _395B269B2EB9353EDAC9E4036758953F {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 displayNameLength;CARD32 physicalScreen;CARD32 valueMask;};
struct _3B00234C5998E2ECB70FFF97A8C8B026 {CARD8 depth;CARD8 pad1;CARD16 nVisuals;CARD32 pad2;};
struct _3B0A3C5E53A42F20C20C43D841AB73C8 {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t event_type;uint16_t pad1;uint32_t pad[5];uint32_t full_sequence;};
struct _3C0F511821AED167BDBDCCDEFF5867E2 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint32_t property;uint8_t what;uint8_t pad0;uint16_t pad1;uint32_t pad2;uint32_t pad3;};
struct _3C37F6B251EFBC95637A014CFEA9DDEB {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint32_t flags;uint16_t num_info;uint16_t pad0;uint32_t pad1;uint32_t pad2;};
struct _3C4C38FC10522588E30AD31A846C8E7D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nColors;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _3C57A176DA13593CE98DBC4E12CE23DD {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int keycode;int same_screen;};
struct _3C663E68C00512772EEEF9594AC2C00F {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 window;};
struct _3CF9C552218676756FBC5AC837F62592 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 driverNameLength;CARD32 deviceNameLength;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _3D73D80F45981F599F79B091582EFD16 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 property;};
struct _3D7F29ED0930CC4F7BF457E53790E4B5 {BYTE type;BYTE pad00;CARD16 sequenceNumber;CARD32 time;BYTE devchange;BYTE deviceid;CARD16 control;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;};
struct _3DC7B7400B12314EE6EFE34533277AB7 {u_char vers;u_char type;u_char answer;u_char pad;u_int32_t id_num;struct osockaddr addr;};
struct _3DF25DAA63A6E3C01476C2ACB580EE52 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;CARD32 output;};
struct _3E53CB2ED1FED691C94CE793AD197BA2 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 cid;CARD32 src;CARD16 x;CARD16 y;};
struct _3F0A60266B45B227E929296904C751DD {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _3F85C0DE38758494B25116473C086153 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;CARD32 interval;};
struct _403017519C186A112CAA8988372FD914 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num_formats;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _408ECFFBDBCCAB2F4BE7BF225F1A7284 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 id;CARD16 width;CARD16 height;};
struct _418C74B7659B6963E50B421CB8AEDCF3 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;CARD32 configTimestamp;};
struct _421551632E56BA5B9AAA3C53AC32257E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 swap_hi;CARD32 swap_lo;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _425D596FFB295BDC9ECE8B5455A7138C {BYTE type;BYTE setOfRotations;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 timestamp;CARD32 configTimestamp;CARD16 nSizes;CARD16 sizeID;CARD16 rotation;CARD16 rate;CARD16 nrateEnts;CARD16 pad;};
struct _431023746282E83C34446CE1DCC859AA {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 actual_width;CARD16 actual_height;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _434B3255D002B67E7352AD09968BC579 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;char is_hint;int same_screen;};
struct _44921DDD4632BD4A3848A6F76E5AB5A7 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 major;CARD32 minor;CARD32 patchLevel;CARD32 nameLen;CARD32 busIDLen;CARD32 isLocal;};
struct _44989FB912D962B2DEA21D74F6F43DAE {BYTE byteOrder;CARD8 num_auths;CARD16 major_version;CARD16 minor_version;CARD16 auth_len;};
struct _44DBA8761062EA5D0E0445C058A5F0FB {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPixels;CARD16 pad2;CARD32 redMask;CARD32 greenMask;CARD32 blueMask;CARD32 pad3;CARD32 pad4;};
struct _4664B325D7B1C568276997F8FB024EC2 {Elf64_Addr r_offset;Elf64_Xword r_info;Elf64_Sxword r_addend;};
struct _4788A0C65CEF1424AE2DE816674E1913 {Elf32_Word p_type;Elf32_Off p_offset;Elf32_Addr p_vaddr;Elf32_Addr p_paddr;Elf32_Word p_filesz;Elf32_Word p_memsz;Elf32_Word p_flags;Elf32_Word p_align;};
struct _48A6A373861130075F8524D5C353FEE6 {CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD8 flags;CARD8 pad;};
struct _49A9C69F1FAAE36175A766361397A248 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 drawable;CARD32 timestamp;CARD32 configTimestamp;CARD16 sizeID;CARD16 rotation;CARD16 rate;CARD16 pad;};
struct _4A016A5603D15160CDD9BBBD4586D83A {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t grab_window;uint32_t detail;uint16_t deviceid;uint16_t num_modifiers;uint8_t grab_type;uint8_t pad0;uint16_t pad1;};
struct _4A5D5D546E7D786034D6559D1E5FBE4A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 majorVersion;CARD32 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _4C6B28AF05B44434FD231A2EDF3D1534 {CARD16 control;CARD16 length;INT32 min_x;INT32 max_x;INT32 min_y;INT32 max_y;CARD32 flip_x;CARD32 flip_y;CARD32 rotation;CARD32 button_threshold;};
struct _4C9FC87DA575F754989D5BFCDDDAE424 {Colormap colormap;unsigned __int64 red_max;unsigned __int64 red_mult;unsigned __int64 green_max;unsigned __int64 green_mult;unsigned __int64 blue_max;unsigned __int64 blue_mult;unsigned __int64 base_pixel;VisualID visualid;XID killid;};
struct _4E7073A36C65C782742204589C7C453B {CARD8 c_class;CARD8 id;CARD16 length;INT32 int_to_display;};
struct _4F69801DA156947B017328D4DF73EF11 {CARD8 type;CARD8 pad;CARD16 sequenceNumber;CARD32 drawable;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _4F75C09F59EAA25C6312C1809A75A428 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;};
struct _4FE6F5ECACFA93E764B6E0B251EFE623 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t win;};
struct _50E42323027751282F1104957020037E {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 cmap;};
struct _528C256D64E70EF258C44321FAFFDA35 {CARD32 visualID;CARD8 c_class;CARD8 bitsPerRGB;CARD16 colormapEntries;CARD32 redMask;CARD32 greenMask;CARD32 blueMask;CARD32 pad;};
struct _53A84E5818A8BF56A6CBC41177A9FFE2 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 nEvents;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _55C4BAE65683A06129AA1262EA0CD4D4 {__int64 flags;int input;int initial_state;Pixmap icon_pixmap;Window icon_window;int icon_x;int icon_y;Pixmap icon_mask;XID window_group;};
struct _55D1EED960AB10AAD38BEA1E9F59F1B6 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 context_id;};
struct _560A03400C719BC685F99AA3989F50DD {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 window;CARD8 updateAction;CARD8 updateHint;CARD16 unused;};
struct _56876A3CF1ED32735E0999A0D66A4738 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nColormaps;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _56F965C4CB1B37CA1C9344E914749FD8 {CARD8 reqType;CARD8 direction;CARD16 length;CARD32 window;};
struct _57642C20A930BC40CC56BFA51EFC45F8 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nFonts;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _57E6A23A76D16D83EF023BCC9C7B7628 {CARD8 reqType;CARD8 pad;CARD16 length;CARD32 window;CARD16 mask;CARD16 pad2;};
struct _58C3F68DE6E766EC315A68C29D87018F {CARD8 reqType;BYTE nbytes;CARD16 length;};
struct _5AAA2BA072F64AA18930C6E033859039 {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint16_t num_modifiers;uint16_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;uint32_t pad6;};
struct _5EC50BA61A7AE0BB02D4340472A7D806 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;CARD32 destination;};
struct _5ED203E6BF1B06D8F06879722F6B66D4 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _5F1426FF167D9E06CE7F137AEA610D0C {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 success;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _60FD28E41E68D30D206D9EC072DAC7C8 {CARD8 reqType;CARD8 revertTo;CARD16 length;CARD32 focus;CARD32 time;};
struct _6197E9F903ED803C824E8A215640B820 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 mode;};
struct _61DCC48F09BF582DF809A259BD2C270C {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t win;uint32_t cursor;uint16_t deviceid;uint16_t pad1;};
struct _625B72EC204AD184FA367A67F4C8645C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;};
struct _6459665531F174B64FEE3BC376E34521 {CARD8 type;CARD8 pad;CARD16 sequenceNumber;CARD16 event_type;CARD16 pad2;CARD32 drawable;CARD32 ust_hi;CARD32 ust_lo;CARD32 msc_hi;CARD32 msc_lo;CARD32 sbc;};
struct _67223C7576264C1E3F5454254FA2FCB7 {CARD8 c_class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;INT16 num;INT16 denom;INT16 thresh;};
struct _6999C5F45A7509ACAEE4435BC7D6BE11 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 authLen;CARD32 length;};
struct _6B1E97362D63C40B98094F056DF5AEF5 {Elf32_Word st_name;Elf32_Addr st_value;Elf32_Word st_size;unsigned __int8 st_info;unsigned __int8 st_other;Elf32_Section st_shndx;};
struct _6C1CA9801472DA3CC516BCC310DA8AB0 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 crtc;};
struct _6C8DA88AE0F795AA91A7651F5464995D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 firstKeyCode;CARD8 count;BYTE pad1;};
struct _6DC10CFFA94DA978AABC1A085F692023 {Pixmap background_pixmap;unsigned __int64 background_pixel;Pixmap border_pixmap;unsigned __int64 border_pixel;int bit_gravity;int win_gravity;int backing_store;unsigned __int64 backing_planes;unsigned __int64 backing_pixel;int save_under;__int64 event_mask;__int64 do_not_propagate_mask;int override_redirect;Colormap colormap;Cursor cursor;};
struct _6ECE5F7C46F37A2EF909042FBC6F3E21 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;};
struct _70AE50C60636BA34AE17DCBE089831D2 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD16 server_major;CARD16 server_minor;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7227A9398068B3A0AEE87CBD043E51D6 {CARD32 visualID;CARD8 depth;CARD8 perfLevel;CARD16 pad1;};
struct _72F0243C2EB87E20847F7DC0E66AC2E3 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 deviceId;};
struct _730B0A961A25B34AF2CAA3D5B8639BBB {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 buffer;CARD32 valueMask;};
struct _73B4058B96DB787648F70BEB3765CE40 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 pixel;CARD16 exactRed;CARD16 exactGreen;CARD16 exactBlue;CARD16 screenRed;CARD16 screenGreen;CARD16 screenBlue;CARD32 pad2;CARD32 pad3;};
struct _740C46A196F463FF63DE6C8E1A8E1740 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 context_id;CARD32 port;CARD32 surface_type_id;CARD16 width;CARD16 height;CARD32 flags;};
struct _7552ACBA9FE9B8170F87BF8276CCD8D3 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint16_t deviceid;uint8_t mode;uint8_t format;uint32_t property;uint32_t type;uint32_t num_items;};
struct _7801A91C37AF2AAC45BD7DD78FEE34EA {BYTE type;BYTE result;CARD16 sequenceNumber;CARD32 length;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _783627FE6E647043A8324E9AB2705236 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 property;CARD32 type;CARD8 format;CARD8 mode;CARD16 pad;CARD32 nUnits;};
struct _791AF81D366397FAE28AFC7E5E3FF4B5 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;CARD8 elementHeader;CARD8 pad;CARD16 pad0;CARD32 nClients;CARD32 nRanges;};
struct _79D3745B39F9E71262BFBA7985E1C7DE {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 exactRed;CARD16 exactGreen;CARD16 exactBlue;CARD16 screenRed;CARD16 screenGreen;CARD16 screenBlue;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _79F2479F433F63099A0390C39EAA789F {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num_attributes;CARD32 text_size;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _7A455DB3BD331D79AF16B3231F86E0C5 {CARD8 reqType;BOOL onlyIfExists;CARD16 length;CARD16 nbytes;CARD16 pad;};
struct _7BC974A8E90EFB1AB4A63682D9BB99C5 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num_planes;CARD32 data_size;CARD16 width;CARD16 height;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _7C0193CACD5E2992F63533D0F1598B1A {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7CE69C85D0575A23F013545F3194CABE {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 region;CARD32 window;};
struct _7E3EB1143DB1648EACC9B112CB231A1D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numIndexValues;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7E7BC6786790AB56FAE456C8962F7E9D {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 format;};
struct _7E8BAC4262F9B7E47F22B721CB72642D {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 port;CARD32 surface_type_id;};
struct _7FBA3E320C553851CFD795D35ADFF810 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t focus;uint32_t time;uint16_t deviceid;uint16_t pad0;};
struct _7FFBF4E81BEBC201DEAF468EBD0F9AD5 {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;};
struct _80FA3E9E2CB8CB94E88F4B4B7A4726B2 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 glyphset;CARD32 nglyphs;};
struct _8101C547F89E636B6C8AA4FE510BA77D {uint32_t modifiers;uint8_t status;uint8_t pad0;uint16_t pad1;};
struct _819D62649EAF67B78691543FCA1EE6A8 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 attribute;};
struct _8215DDD75066012239D919FF6D1C96FC {CARD8 reqType;BYTE num_catalogues;CARD16 length;};
struct _82ABCF53CC2EA0D7663831DD8801F474 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 property;CARD8 deviceid;CARD8 pad0;CARD16 pad1;};
struct _83DC73F186BDA0868BCE8C2AD62B1A32 {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 damage;CARD32 repair;CARD32 parts;};
struct _8608EF80BDF2C775EBE0E30BF11DBE52 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _873989352E2697A1AEEAE6DD5F2AF6D9 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int button;int same_screen;};
struct _88C1685F053777CC7A3B1D0ED0ED52E3 {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 drawable;};
struct _88CB499CEF7C95AB64991FDC4A8C267A {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 keySymsPerKeyCode;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _895A6AA0EC03D09B638DC82C89B5E3C4 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 displayNameLength;CARD32 valueMask;};
struct _8973D72E68A3D7427BDE924AB847E810 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _89ACFCE72F27CF3E8997F0C88CBC1FEF {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;CARD16 enable;CARD16 pad2;};
struct _89C19CA17CD4EE2490EC1EBDB53AA079 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 drawable;};
struct _8AC915922B7872008F9FA0F659707AB7 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 size_return;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _8B1EAF7AAA57F33F38F96E94C6EE2E44 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nameLength;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _8B5E934A02E5303CBD075C3822A8790B {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint32_t focus;uint32_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;};
struct _8BD856D0EABB45DC0AE6203B505E4C05 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;CARD16 count;CARD16 pad00;};
struct _8BE617EABEB75C8FAB9CB9A4A240FEE3 {CARD8 reqType;CARD8 ext_opcode;CARD16 length;CARD32 event_mask;};
struct _8C544AC6C871408AE6573DA61B3B8C70 {BYTE type;BYTE status;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _8CF3D5156D7798F5A42A7DF6A044CF98 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;CARD32 property;};
struct _8D1982C4FDB5289A11AD10918D95A5A0 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;CARD32 property;CARD32 type;CARD8 format;CARD8 mode;CARD16 pad;CARD32 nUnits;};
struct _8D276D88AE7A52B5A0CD113CDF9731AA {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 x;CARD16 y;CARD32 flags;};
struct _8E1349AD4AC8D9A4F1DC84C54B0BE169 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPaths;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _8FB70F9DF6D59D5E0632B90366E8D2D5 {CARD8 reqType;CARD8 dbeReqType;CARD16 length;CARD32 n;};
struct _9081086C0126123317B5AEBA108CF51B {CARD8 type;CARD8 subtype;CARD16 sequenceNumber;CARD32 window;CARD32 owner;CARD32 selection;CARD32 timestamp;CARD32 selectionTimestamp;CARD32 pad2;CARD32 pad3;};
struct _90B3239242A1E7B072ABC9D9983310BF {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 this_client_count;CARD16 all_clients_count;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _9116D1D1673D46BDBD8F6CDE5760A584 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint16_t num_classes;uint16_t sourceid;uint8_t reason;uint8_t pad0;uint16_t pad1;uint32_t pad2;uint32_t pad3;};
struct _9299B18999A9011A0F23F2925A47CC5A {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t grab_window;uint32_t time;uint32_t cursor;uint16_t deviceid;uint8_t grab_mode;uint8_t paired_device_mode;uint8_t owner_events;uint8_t pad;uint16_t mask_len;};
struct _93B69AC16094E7C5789E83029DFD84BC {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 window;CARD32 valueMask;};
struct _940A6A704B5145F6559156337DBE573E {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 property;CARD32 type;CARD8 deviceid;CARD8 format;CARD8 mode;CARD8 pad;CARD32 nUnits;};
struct _942EBE9ABD97793534DEB0950390C4AB {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 subpicture_id;CARD32 context_id;CARD32 xvimage_id;CARD16 width;CARD16 height;};
struct _94C04A488373DB802AA4CC07AF27941B {CARD8 reqType;INT8 percent;CARD16 length;};
struct _9522E807BA7B29263AAB53074ABFE969 {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 window;CARD8 update;CARD8 pad1;CARD16 pad2;};
struct _95AD98905D37F3C4828B107878AF9BCB {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;};
struct _9862706C0A5BB87114D8D1264CC215A3 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 unused;CARD32 length;};
struct _988632284A71C49D1170FC4598DEA165 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 count;CARD16 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _989300C65D48D4487CD63431A5B756B7 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;};
struct _992D1839AC8E639F23406CD0C00EF002 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;CARD32 count;};
struct _9990F7522FA29648C94CCC0846165B95 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 width;CARD16 height;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _99C954413A17768447BF0852A4562C6B {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;int mode;int detail;int same_screen;int focus;unsigned int state;};
struct _99CEDDFDC374B3E2BEA3B5EBC859ABB7 {uint16_t type;uint16_t length;uint16_t sourceid;uint16_t number;uint16_t scroll_type;uint16_t pad0;uint32_t flags;FP3232 increment;};
struct _9A02475B75BDC9A6C1FC81F46F9E4217 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;};
struct _9A79A86C67FC8B79D589DEFE9BCD3BC9 {CARD8 reqType;BYTE pad;CARD16 length;CARD8 firstKeyCode;CARD8 count;CARD16 pad1;};
struct _9B4395DE66E8574EC0897BBFC5E468E1 {CARD8 family;BYTE pad;CARD16 length;};
struct _9B9FAE43572AF8916E11706D7ECE195D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numAliases;CARD32 numFilters;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _9DF5225FB79C7EC3237B4B73EEC9C169 {CARD8 reqType;CARD8 key;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD16 pad;};
struct _9E1D181561E0D2ACA87E09ABA7C14355 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;CARD32 destination;CARD16 left;CARD16 right;CARD16 top;CARD16 bottom;};
struct _9F8356FA3F6B7BB65CCFE589AF8F3C28 {CARD8 len;CARD8 pad1;CARD16 pad2;INT16 deltax;INT16 deltay;};
struct _A18F96C8DBFB2F1615E2CE49B44750F7 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _A1A32FB2C00492E90944DE52B5668962 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 major;CARD32 minor;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _A42D6322032E0C7A7A9C932B10DA502C {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 screenCount;CARD32 maskCount;};
struct _A545D31055C82AF5215FB86F909CA367 {CARD8 reqType;BYTE num_resolutions;CARD16 length;};
struct _A81A12901E1DD22594C62DD882F5E1C7 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;};
struct _A94EB43F2838EBEBCA936AD6F7EBA6B5 {RECORD_RANGE8 coreRequests;RECORD_RANGE8 coreReplies;RECORD_EXTRANGE extRequests;RECORD_EXTRANGE extReplies;RECORD_RANGE8 deliveredEvents;RECORD_RANGE8 deviceEvents;RECORD_RANGE8 errors;BOOL clientStarted;BOOL clientDied;};
struct _A9B1BAFFCE9059101A2CA55F4DE425B3 {CARD8 c_class;CARD8 id;CARD16 length;CARD32 led_mask;CARD32 led_values;};
struct _AAECD496E21460385AB9540869BF9C78 {Elf32_Addr r_offset;Elf32_Word r_info;Elf32_Sword r_addend;};
struct _AB5F7E1CFB8B75B23227FD0CD252BAA6 {__be16 track_information_length;__u8 track_lsb;__u8 session_lsb;__u8 reserved1;unsigned __int8 reserved2 : 2;unsigned __int8 damage : 1;unsigned __int8 copy : 1;unsigned __int8 track_mode : 4;unsigned __int8 rt : 1;unsigned __int8 blank : 1;unsigned __int8 packet : 1;unsigned __int8 fp : 1;unsigned __int8 data_mode : 4;unsigned __int8 reserved3 : 6;unsigned __int8 lra_v : 1;unsigned __int8 nwa_v : 1;__be32 track_start;__be32 next_writable;__be32 free_blocks;__be32 fixed_packet_size;__be32 track_size;__be32 last_rec_address;};
struct _AB98B12C01F884E8BC2DC3D07B35D622 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 drawable;CARD32 timestamp;CARD32 configTimestamp;CARD16 sizeID;CARD16 rotation;};
struct _AD58CDA99C93F34C31A743157D5C3E5C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 xaxis;CARD8 yaxis;CARD8 deviceid;BYTE pad1;};
struct _AE0B01F07923BA2B607EE52A3BD72CF8 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t win;uint16_t deviceid;uint16_t pad1;};
struct _AF27679C824E3E5901AA7DC2B9114169 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 atom;CARD16 nbytes;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _AF323DE6ACA1BD5E0BC0872A156AE035 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 configTimestamp;};
struct _B09B64BCB86C923CE64AD6544D183118 {CARD8 reqType;CARD8 xtReqType;CARD16 length;CARD32 window;CARD32 cursor;};
struct _B0A4657A0F832627789EEFA30E2C3FE8 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 port;};
struct _B16FC8566897364FB8F68A61B8D500EB {CARD8 type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _B1BFEFE2106F3BB5718738D899DB0721 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;CARD32 drawable;CARD32 format;CARD32 mask;};
struct _B269B0A5851D241ECE7A73512E496A13 {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _B2D1347A7314B3F7BD8A6C26E40DE0B3 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 keys[28];};
struct _B2D730F73A56FF96C6A7A740CAA96BFE {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 gc;};
struct _B366CC5B56440B0B1B4971EDF28ED7EF {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 damage;CARD32 drawable;CARD8 level;CARD8 pad1;CARD16 pad2;};
struct _B39E143921B528937FA4C70092531C43 {CARD8 type;CARD8 subCode;CARD16 sequenceNumber;CARD32 timestamp;CARD32 window;CARD32 provider;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _B3BD77590CC72559D1303DD07BD38410 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 valueMask;};
struct _B3CBED78BE28E2F7F53FDE1AC472584A {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint16_t num_devices;uint16_t pad0;uint32_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;};
struct _B4C695B0250A38B82AFFE65B8304A51A {__int16 __flags;pid_t __pgrp;sigset_t __sd;sigset_t __ss;struct sched_param __sp;int __policy;int __pad[16];};
struct _B4F2C86EC2AFA3B90E8AE0EA0F71367B {CARD8 reqType;BYTE pad;CARD16 length;};
struct _B700DEC12E3C3D556A5FC194447E1A6E {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 gsid;CARD32 format;};
struct _B818E9DF3118804B08A86ECE79240C1A {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;CARD32 mode;};
struct _BA51B89E4C593A6AA4F22AA051FCA364 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t win;uint16_t num_masks;uint16_t pad;};
struct _BA7B5543ABAE7B9E6314E3F267492402 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;CARD16 nbytes;CARD16 pad;};
struct _BAE4AA77CC43BF06F4D3ADF31CFD29F5 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 cid;};
struct _BBFFAC2C7D7C298A8C1E91F0BFE75A53 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint32_t detail;uint16_t sourceid;uint16_t valuators_len;uint32_t flags;uint32_t pad2;};
struct _BCDE0020825236A8F8A72B60AFA7374C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 control;CARD8 deviceid;BYTE pad0;};
struct _BD0CD7113069CF1296E061F976B1B743 {CARD8 reqType;CARD8 data;CARD16 length;CARD32 maxNames;CARD16 nbytes;CARD16 pad2;};
struct _BD6B6A249F1B6C2CBC1F20B0596A95AC {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 bytes;CARD32 bytes_overflow;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _BDA8B21BBF344B8E23C198E46F24428F {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 physicalScreen;};
struct _BF1396F4A988D0ACD0874F9F43763CE5 {CARD8 type;CARD8 subCode;CARD16 sequenceNumber;CARD32 window;CARD32 output;CARD32 atom;CARD32 timestamp;CARD8 state;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;};
struct _C0A0DF669A9A28D262D6289CF39399F2 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 picture;};
struct _C0A8BBE9C57177701090E972AEA8D416 {Dwarf_Unsigned bl_len;Dwarf_Ptr bl_data;Dwarf_Small bl_from_loclist;Dwarf_Unsigned bl_section_offset;};
struct _C16308A46254792F555119C61B977CA2 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 control;CARD8 deviceid;BYTE pad2;};
struct _C178C08748CCB321711F58A9FBA92C23 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numIds;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _C201FB0F2222C07B40D490F1CBB06D58 {BYTE type;BYTE ScreenCount;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _C260757490C306CA273BB590CB913883 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 surface_id;};
struct _C277CB81CBAA95C145BFA0CE4951774F {CARD32 id;CARD8 type;CARD8 byte_order;CARD16 pad1;CARD8 guid[16];CARD8 bpp;CARD8 num_planes;CARD16 pad2;CARD8 depth;CARD8 pad3;CARD16 pad4;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD8 format;CARD8 pad5;CARD16 pad6;CARD32 y_sample_bits;CARD32 u_sample_bits;CARD32 v_sample_bits;CARD32 horz_y_period;CARD32 horz_u_period;CARD32 horz_v_period;CARD32 vert_y_period;CARD32 vert_u_period;CARD32 vert_v_period;CARD8 comp_order[32];CARD8 scanline_order;CARD8 pad7;CARD16 pad8;CARD32 pad9;CARD32 pad10;};
struct _C65DFB72B3FBEEE777E9E71274DF712D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nProperties;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _C785CF6C4EEFEB89ECBC9FAC0351909D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 map_length;BYTE pad1;BYTE pad2;};
struct _C98069716B69DDD3E3DFFC1FB582A369 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t time;uint32_t grab_window;uint32_t cursor;uint32_t detail;uint16_t deviceid;uint16_t num_modifiers;uint16_t mask_len;uint8_t grab_type;uint8_t grab_mode;uint8_t paired_device_mode;uint8_t owner_events;uint16_t pad1;};
struct _CE845F89F9878C873199BB4116C12DE5 {Elf32_Xword m_value;Elf32_Word m_info;Elf32_Word m_poffset;Elf32_Half m_repeat;Elf32_Half m_stride;};
struct _CF03470A90651644D6E7B9A83DE18936 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 sink_provider;CARD32 configTimestamp;};
struct _CF1CBE9BFB7E9609B8A4034B734E37B9 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 window;CARD32 driverType;};
struct _D0A230E2822E6F114388A4393E99A918 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 numKeyPerModifier;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _D0DECA1AE238766CAB6224F38ED2C117 {CARD8 type;CARD8 subCode;CARD16 sequenceNumber;CARD32 window;CARD32 provider;CARD32 atom;CARD32 timestamp;CARD8 state;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;};
struct _D0F732F65C44B5672B29FFE38726918A {CARD32 base_id;CARD16 name_size;CARD16 num_ports;CARD16 num_formats;CARD8 type;CARD8 pad;};
struct _D1CC089C043B8A5C6F39977960C72D3D {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 num_types;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _D293AA008B167A5482334DF4B9C04D8D {CARD8 c_class;CARD8 id;CARD16 length;CARD8 percent;BYTE pad1;BYTE pad2;BYTE pad3;CARD16 pitch;CARD16 duration;};
struct _D414AB5C490C563DD84DD380518CE003 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 cursor;CARD16 nbytes;CARD16 pad;};
struct _D467916C3587874006E0A38FD04B2C07 {BYTE type;BYTE state;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _D4E78A805D3B4AC5F724CECE1911262F {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 window;};
struct _D51E2BFC694F46296AEDCFF248667504 {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint16_t num_properties;uint16_t pad0;uint32_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;};
struct _D570BD474412728E81DF3D371018F9FB {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 window;CARD32 magic;};
struct _D60B59C14E4F896E4A7591EB7765B14B {CARD8 success;BYTE lengthReason;CARD16 majorVersion;CARD16 minorVersion;CARD16 length;};
struct _D7F0CB1571AAC0714CF3A2A9DC0827E7 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 following;CARD32 nFonts;};
struct _D8420CC1363AF2C8EAD0CBC387915DA6 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t time;uint16_t deviceid;uint8_t mode;uint8_t pad;};
struct _D91C2DCC69F66A043F2E243F7B809339 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 subpicture_id;};
struct _DB14CFE2E08779D243D914BBAB2B5230 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _DC1F4185A69167B259A83E436A7DD097 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 window;};
struct _DDAC1D07D44FFC2E5C65864F60CCE1DF {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 parent;CARD16 nChildren;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DE5295A524AE5E785ED4C88469459F67 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;};
struct _DEEBBF9E678AFA2413B9A4D363D90472 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 time;};
struct _DF1F6B2A10DE489D1BD3908B3045E5A6 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;};
struct _DF2660A74F633C8EB56A7225DE8125F3 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 port;CARD32 shmKey;CARD32 magic;};
struct _E011BF1EAEBA58EFCBDC3D43230C2DBF {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 authenticated;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _E088F45CD187D3D735EE0ADD637BCD24 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t num_barriers;};
struct _E0C447414AA97F974326ACA5E0A3E4C8 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 propertyType;CARD32 bytesAfter;CARD32 nItems;CARD8 format;CARD8 deviceid;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _E1188CFE1A0E0A12BD195964AFA7C49B {CARD8 reqType;CARD8 dbeReqType;CARD16 length;xDbeBackBuffer buffer;};
struct _E1B611A0324DBC10371E6C5C458A41ED {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _E286A6BB4A6F2654A491CFFF4E402FC9 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 physicalId;};
struct _E2CAB82FD115FB5CD111E5D354459422 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 overlayWin;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _E38AF46511CCA77388BA66BB0D6EA6C9 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;CARD16 nbytes;CARD16 pad;};
struct _E3DAF80DA6E2FC3B2711E1BFC9612898 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;CARD16 width;CARD16 height;CARD32 widthInMillimeters;CARD32 heightInMillimeters;};
struct _E52A8F32C8A3F3878A2B0A4A62B69464 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 gsid;CARD32 existing;};
struct _E6A7EC26390A1436F354D6A4637276C8 {CARD8 reqType;CARD8 c_class;CARD16 length;CARD32 drawable;CARD16 width;CARD16 height;};
struct _E6CAD5F58B0D02B91FD47A036636D1EC {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 window;CARD32 pixmap;};
struct _E6E23F4F2E9628A3BBE27C1C5CFEEEE2 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 window;CARD8 kind;CARD8 pad1;CARD16 pad2;};
struct _E997A7E9262D40FC83356A066D96F704 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;CARD32 nClients;};
struct _E9AF2F2A8EA064B789B183AF44D2C131 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;CARD32 target_msc_hi;CARD32 target_msc_lo;CARD32 divisor_hi;CARD32 divisor_lo;CARD32 remainder_hi;CARD32 remainder_lo;};
struct _E9ECFF0EA05AD5C4AE006A43157FC997 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numSizes;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _EDCAE6FAA77F2844B16FB7E0B618EDD7 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 mode;BYTE pad1;BYTE pad2;};
struct _EFD218D8CB6E2125874F3715AA0C6AA7 {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint32_t type;uint32_t bytes_after;uint32_t num_items;uint8_t format;uint8_t pad0;uint16_t pad1;uint32_t pad2;uint32_t pad3;};
struct _F0B6F56018B35AE6D958AA393C56DA44 {CARD8 coreRequestsFirst;CARD8 coreRequestsLast;CARD8 coreRepliesFirst;CARD8 coreRepliesLast;CARD8 extRequestsMajorFirst;CARD8 extRequestsMajorLast;CARD16 extRequestsMinorFirst;CARD16 extRequestsMinorLast;CARD8 extRepliesMajorFirst;CARD8 extRepliesMajorLast;CARD16 extRepliesMinorFirst;CARD16 extRepliesMinorLast;CARD8 deliveredEventsFirst;CARD8 deliveredEventsLast;CARD8 deviceEventsFirst;CARD8 deviceEventsLast;CARD8 errorsFirst;CARD8 errorsLast;BOOL clientStarted;BOOL clientDied;};
struct _F0F833B8645551F58CD05873A995AFBD {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint8_t status;uint8_t pad0;uint16_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;uint32_t pad6;};
struct _F134966C153EAA2FEEB175F7114F713D {CARD8 byte_order;CARD8 depth;CARD16 num;CARD16 bpp;CARD16 name_size;CARD32 vsync_num;CARD32 vsync_den;CARD32 flags;CARD16 image_width;CARD16 image_height;CARD16 pixmap_width;CARD16 pixmap_height;CARD32 bytes_per_scanline;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD16 visual_class;CARD16 pad1;CARD16 viewport_width;CARD16 viewport_height;CARD16 viewport_xstep;CARD16 viewport_ystep;CARD16 viewport_xmax;CARD16 viewport_ymax;CARD32 viewport_flags;CARD32 reserved1;CARD32 reserved2;};
struct _F14124C6CA524F54899508FD11C59AF5 {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t pad[7];uint32_t full_sequence;};
struct _F19CD3A20937CEF33F3E2EF5E2D906EF {CARD32 release;CARD32 ridBase;CARD32 ridMask;CARD32 motionBufferSize;CARD16 nbytesVendor;CARD16 maxRequestSize;CARD8 numRoots;CARD8 numFormats;CARD8 imageByteOrder;CARD8 bitmapBitOrder;CARD8 bitmapScanlineUnit;CARD8 bitmapScanlinePad;CARD8 minKeyCode;CARD8 maxKeyCode;CARD32 pad2;};
struct _F1FCB6DD93472D8B068BCACD2B6CBA02 {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t resource_id;uint16_t minor_code;uint8_t major_code;uint8_t pad0;uint32_t pad[5];uint32_t full_sequence;};
struct _F1FFDF0E76C6F940FFACBA8A13B33CEB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 focus;CARD32 time;CARD8 revertTo;CARD8 device;CARD16 pad01;};
struct _F2ECD6480817AB9433FAAAFCD2A3757B {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD16 nbytesAuthProto;CARD16 nbytesAuthData;CARD32 valueMask;};
struct _F3EFAA27463B93CC96181BFE5F29A4C5 {CARD8 reqType;CARD8 mode;CARD16 length;CARD32 time;};
struct _F41DB5A7C32B97CBCEE09CBFE1E8FA57 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 mesglen;CARD16 pad2;CARD32 status;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _F466B234F46A211DC597B6DC6FDB33CA {CARD8 type;CARD8 pad00;CARD16 sequenceNumber;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;CARD32 pad07;CARD32 pad08;};
struct _F48CE0DBD7E8B40C5BE46DCA241B28C2 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;CARD32 target_sbc_hi;CARD32 target_sbc_lo;};
struct _F4F17E25C7BB477B61B5A580F872EC7D {CARD32 counter;INT32 resolution_hi;CARD32 resolution_lo;CARD16 name_length;};
struct _F7C1CEA4394D109A2161A09361931998 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 ust_hi;CARD32 ust_lo;CARD32 msc_hi;CARD32 msc_lo;CARD32 sbc_hi;CARD32 sbc_lo;};
struct _F81C4DFCF4FD8DAD229D0D8C30F8406E {CARD8 reqType;CARD8 xtReqType;CARD16 length;BOOL impervious;CARD8 pad0;CARD8 pad1;CARD8 pad2;};
struct _F88DFF0D39F146217256B482FD360ACC {CARD8 reqType;BYTE mode;CARD16 length;};
struct _FA4FE0B2CA883E06053CBA1706060353 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 atom;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _FB619B5CE8E6B82A3D0938CCE57F62CA {CARD8 reqType;BYTE mode;CARD16 length;CARD8 hostFamily;BYTE pad;CARD16 hostLength;};
struct _FC3BB1A81303FA005E7D17D8401F89AB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 feedbackid;CARD8 feedbackclass;INT8 percent;};
struct _FCB7777383764032C418362DA6B02328 {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint16_t num_masks;uint16_t pad0;uint32_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;};
struct _FD9EA5F23BD8EC0F64EDF9068C14C969 {CARD8 depth;CARD8 pad1;CARD16 nPictVisuals;CARD32 pad2;};
struct _FDE03FEB32A19C100EEAC3636148FF44 {CARD8 type;CARD8 subCode;CARD16 sequenceNumber;CARD32 timestamp;CARD32 configTimestamp;CARD32 window;CARD32 output;CARD32 crtc;CARD32 mode;CARD16 rotation;CARD8 connection;CARD8 subpixelOrder;};
struct _FDFBD601B4BD2833D8A740F2A9550A80 {CARD8 reqType;CARD8 data;CARD16 length;CARD32 pad;};
struct _FE74AE40C36D9F9A6F621CCCBCB7D423 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num;CARD32 padl2;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;};
struct _FF5F1AAD05AC8DB2C41E7ADC05E9F823 {CARD8 reqType;CARD8 dri2ReqType;CARD16 length;CARD32 drawable;CARD32 region;CARD32 dest;CARD32 src;};
struct _FF9246841A32B78E17B3644398C154C0 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 buttons[28];};
struct _FFD82B8BDC4823D2EC5A0D9DC75F48E0 {CARD8 reqType;CARD8 miscReqType;CARD16 length;CARD32 count;};
struct xcb_get_selection_owner_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_atom_t selection;};
struct xcb_glx_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;};
struct xcb_glx_destroy_pbuffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_pbuffer_t pbuffer;};
struct xcb_input_device_valuator_event_t {uint8_t response_type;uint8_t device_id;uint16_t sequence;uint16_t device_state;uint8_t num_valuators;uint8_t first_valuator;int32_t valuators[6];};
struct xcb_input_set_device_mode_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_input_ungrab_device_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_timestamp_t time;uint8_t device_id;};
struct xcb_randr_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;};
struct xcb_record_free_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_render_free_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;};
struct xcb_selinux_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major;uint16_t server_minor;};
struct xcb_shape_query_extents_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination_window;};
struct xcb_xc_misc_get_xid_range_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t start_id;uint32_t count;};
struct xcb_xf86dri_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t dri_major_version;uint16_t dri_minor_version;uint32_t dri_minor_patch;};
struct xcb_xfixes_fetch_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xfixes_union_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source1;xcb_xfixes_region_t source2;xcb_xfixes_region_t destination;};
struct xcb_xkb_compat_map_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t changedGroups;uint16_t firstSI;uint16_t nSI;uint16_t nTotalSI;uint8_t pad0[16];};
struct xcb_xkb_get_indicator_map_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint32_t which;uint32_t realIndicators;uint8_t nIndicators;uint8_t pad0[15];};
struct xcb_xkb_get_kbd_by_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t need;uint16_t want;uint8_t load;uint8_t pad0;uint8_t keymapsSpecLen;uint8_t keycodesSpecLen;uint8_t typesSpecLen;uint8_t compatMapSpecLen;uint8_t symbolsSpecLen;uint8_t geometrySpecLen;};
struct xcb_xkb_list_components_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t maxNames;uint8_t keymapsSpecLen;uint8_t keycodesSpecLen;uint8_t typesSpecLen;uint8_t compatMapSpecLen;uint8_t symbolsSpecLen;uint8_t geometrySpecLen;};
struct xcb_xkb_set_device_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t firstBtn;uint8_t nBtns;uint16_t change;uint16_t nDeviceLedFBs;};
struct xcb_xv_list_image_formats_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_formats;uint8_t pad1[20];};
struct xcb_alloc_color_planes_request_t {uint8_t major_opcode;uint8_t contiguous;uint16_t length;xcb_colormap_t cmap;uint16_t colors;uint16_t reds;uint16_t greens;uint16_t blues;};
struct xcb_damage_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_destroy_subwindows_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_dri2_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;};
struct xcb_get_keyboard_control_reply_t {uint8_t response_type;uint8_t global_auto_repeat;uint16_t sequence;uint32_t length;uint32_t led_mask;uint8_t key_click_percent;uint8_t bell_percent;uint16_t bell_pitch;uint16_t bell_duration;uint8_t pad0[2];uint8_t auto_repeats[32];};
struct xcb_get_keyboard_mapping_reply_t {uint8_t response_type;uint8_t keysyms_per_keycode;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_get_modifier_mapping_reply_t {uint8_t response_type;uint8_t keycodes_per_modifier;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_glx_destroy_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_pixmap_t glx_pixmap;};
struct xcb_glx_get_fb_configs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_glx_get_pixel_mapuiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_pixel_mapusv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint16_t datum;uint8_t pad2[16];};
struct xcb_input_device_abs_area_ctrl_t {uint16_t control_id;uint16_t len;uint32_t offset_x;uint32_t offset_y;int32_t width;int32_t height;int32_t screen;uint32_t following;};
struct xcb_input_device_abs_calib_ctl_t {uint16_t control_id;uint16_t len;int32_t min_x;int32_t max_x;int32_t min_y;int32_t max_y;uint32_t flip_x;uint32_t flip_y;uint32_t rotation;uint32_t button_threshold;};
struct xcb_input_integer_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;int32_t int_to_display;};
struct xcb_query_text_extents_request_t {uint8_t major_opcode;uint8_t odd_length;uint16_t length;xcb_fontable_t font;};
struct xcb_randr_destroy_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_mode_t mode;};
struct xcb_randr_get_crtc_gamma_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t size;uint8_t pad1[22];};
struct xcb_randr_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint16_t enable;uint8_t pad0[2];};
struct xcb_record_get_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_record_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_render_free_glyphs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t glyphset;};
struct xcb_render_query_filters_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_aliases;uint32_t num_filters;uint8_t pad1[16];};
struct xcb_render_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_set_modifier_mapping_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_shape_get_rectangles_reply_t {uint8_t response_type;uint8_t ordering;uint16_t sequence;uint32_t length;uint32_t rectangles_len;uint8_t pad0[20];};
struct xcb_shape_input_selected_reply_t {uint8_t response_type;uint8_t enabled;uint16_t sequence;uint32_t length;};
struct xcb_shape_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination_window;uint8_t enable;uint8_t pad0[3];};
struct xcb_sync_destroy_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t alarm;};
struct xcb_sync_destroy_fence_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_fence_t fence;};
struct xcb_sync_query_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;};
struct xcb_sync_trigger_fence_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_fence_t fence;};
struct xcb_uninstall_colormap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_xc_misc_get_xid_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ids_len;uint8_t pad1[20];};
struct xcb_xevie_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t event_mask;};
struct xcb_xfixes_copy_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_xfixes_region_t destination;};
struct xcb_xfixes_hide_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xfixes_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_xfixes_show_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xinerama_get_state_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xkb_get_compat_map_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t groups;uint8_t getAllSI;uint16_t firstSI;uint16_t nSI;};
struct xcb_xkb_per_client_flags_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint32_t supported;uint32_t value;uint32_t autoCtrls;uint32_t autoCtrlsValues;uint8_t pad0[8];};
struct xcb_xkb_set_compat_map_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0;uint8_t recomputeActions;uint8_t truncateSI;uint8_t groups;uint16_t firstSI;uint16_t nSI;uint8_t pad1[2];};
struct xcb_xv_query_best_size_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;uint16_t vid_w;uint16_t vid_h;uint16_t drw_w;uint16_t drw_h;uint8_t motion;uint8_t pad0[3];};
struct xcb_xv_query_encodings_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;};
struct _XF86OldVidModeValidateModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _XcupGetReservedColormapEntries {CARD8 reqType;CARD8 xcupReqType;CARD16 length;CARD32 screen;};
struct xcb_alloc_color_cells_request_t {uint8_t major_opcode;uint8_t contiguous;uint16_t length;xcb_colormap_t cmap;uint16_t colors;uint16_t planes;};
struct xcb_alloc_named_color_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint16_t name_len;uint8_t pad1[2];};
struct xcb_big_requests_enable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t maximum_request_length;};
struct xcb_get_pointer_control_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t acceleration_numerator;uint16_t acceleration_denominator;uint16_t threshold;uint8_t pad1[18];};
struct xcb_get_pointer_mapping_reply_t {uint8_t response_type;uint8_t map_len;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_glx_delete_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_window_t glxwindow;};
struct xcb_glx_gen_queries_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_query_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;};
struct xcb_glx_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;};
struct xcb_input_device_bell_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t device_id;uint8_t feedback_id;uint8_t feedback_class;int8_t percent;};
struct xcb_randr_get_panning_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;};
struct xcb_randr_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_set_pointer_mapping_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_shape_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_sync_get_priority_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t id;};
struct xcb_test_compare_cursor_reply_t {uint8_t response_type;uint8_t same;uint16_t sequence;uint32_t length;};
struct xcb_xc_misc_get_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;};
struct xcb_xevie_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;uint8_t pad1[20];};
struct xcb_xfixes_set_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xkb_list_components_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint16_t nKeymaps;uint16_t nKeycodes;uint16_t nTypes;uint16_t nCompatMaps;uint16_t nSymbols;uint16_t nGeometries;uint16_t extra;uint8_t pad0[10];};
struct xcb_xkb_select_events_details_t {uint16_t affectNewKeyboard;uint16_t newKeyboardDetails;uint16_t affectState;uint16_t stateDetails;uint32_t affectCtrls;uint32_t ctrlDetails;uint32_t affectIndicatorState;uint32_t indicatorStateDetails;uint32_t affectIndicatorMap;uint32_t indicatorMapDetails;uint16_t affectNames;uint16_t namesDetails;uint8_t affectCompat;uint8_t compatDetails;uint8_t affectBell;uint8_t bellDetails;uint8_t affectMsgDetails;uint8_t msgDetails;uint16_t affectAccessX;uint16_t accessXDetails;uint16_t affectExtDev;uint16_t extdevDetails;};
struct xcb_xkb_select_events_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t affectWhich;uint16_t clear;uint16_t selectAll;uint16_t affectMap;uint16_t map;};
struct xcb_xv_query_adaptors_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xvmc_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width_actual;uint16_t height_actual;uint32_t flags_return;uint8_t pad1[20];};
struct xcb_xvmc_create_surface_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_alloc_color_planes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t pixels_len;uint8_t pad1[2];uint32_t red_mask;uint32_t green_mask;uint32_t blue_mask;uint8_t pad2[8];};
struct xcb_circulate_window_request_t {uint8_t major_opcode;uint8_t direction;uint16_t length;xcb_window_t window;};
struct xcb_configure_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;uint16_t value_mask;uint8_t pad1[2];};
struct xcb_dri2_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;};
struct xcb_glx_get_clip_plane_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_get_fb_configs_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_FB_configs;uint32_t num_properties;uint8_t pad1[16];};
struct xcb_input_kbd_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;uint16_t pitch;uint16_t duration;uint32_t led_mask;uint32_t led_values;uint8_t global_auto_repeat;uint8_t click;uint8_t percent;uint8_t pad0;uint8_t auto_repeats[32];};
struct xcb_input_led_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;uint32_t led_mask;uint32_t led_values;};
struct xcb_install_colormap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_record_bad_context_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t invalid_record;};
struct xcb_set_screen_saver_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;int16_t timeout;int16_t interval;uint8_t prefer_blanking;uint8_t allow_exposures;};
struct xcb_sync_query_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t alarm;};
struct xcb_sync_query_fence_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_fence_t fence;};
struct xcb_sync_reset_fence_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_fence_t fence;};
struct xcb_unmap_subwindows_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_xevie_select_input_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xinerama_is_active_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t state;};
struct xcb_xkb_get_compat_map_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint8_t groupsRtrn;uint8_t pad0;uint16_t firstSIRtrn;uint16_t nSIRtrn;uint16_t nTotalSI;uint8_t pad1[16];};
struct xcb_xkb_get_controls_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];};
struct xcb_xv_query_best_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t actual_width;uint16_t actual_height;};
struct xcb_xv_query_encodings_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_encodings;uint8_t pad1[22];};
struct xcb_xv_query_extension_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major;uint16_t minor;};
struct xcb_xvmc_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major;uint32_t minor;};
struct xcb_alloc_color_cells_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t pixels_len;uint16_t masks_len;uint8_t pad1[20];};
struct xcb_alloc_named_color_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t pixel;uint16_t exact_red;uint16_t exact_green;uint16_t exact_blue;uint16_t visual_red;uint16_t visual_green;uint16_t visual_blue;};
struct xcb_change_save_set_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;xcb_window_t window;};
struct xcb_dpms_get_timeouts_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t standby_timeout;uint16_t suspend_timeout;uint16_t off_timeout;uint8_t pad1[18];};
struct xcb_dri2_authenticate_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t authenticated;};
struct xcb_dri2_swap_buffers_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t swap_hi;uint32_t swap_lo;};
struct xcb_get_motion_events_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t events_len;uint8_t pad1[20];};
struct xcb_glx_client_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;uint32_t str_len;};
struct xcb_glx_query_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_attribs;uint8_t pad1[20];};
struct xcb_glx_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_graphics_exposure_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;uint16_t x;uint16_t y;uint16_t width;uint16_t height;uint16_t minor_opcode;uint16_t count;uint8_t major_opcode;uint8_t pad1[3];};
struct xcb_input_grab_device_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t status;uint8_t pad1[23];};
struct xcb_input_open_device_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t num_classes;uint8_t pad1[23];};
struct xcb_list_properties_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_query_best_size_request_t {uint8_t major_opcode;uint8_t _class;uint16_t length;xcb_drawable_t drawable;uint16_t width;uint16_t height;};
struct xcb_res_query_clients_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_clients;uint8_t pad1[20];};
struct xcb_res_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major;uint16_t server_minor;};
struct xcb_shm_query_version_reply_t {uint8_t response_type;uint8_t shared_pixmaps;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;uint16_t uid;uint16_t gid;uint8_t pixmap_format;uint8_t pad0[15];};
struct xcb_ungrab_keyboard_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_timestamp_t time;};
struct xcb_visibility_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;uint8_t state;uint8_t pad1[3];};
struct xcb_xkb_use_extension_reply_t {uint8_t response_type;uint8_t supported;uint16_t sequence;uint32_t length;uint16_t serverMajor;uint16_t serverMinor;uint8_t pad0[20];};
struct xcb_xv_query_adaptors_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_adaptors;uint8_t pad1[22];};
struct _XF86VidModeValidateModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct xcb_circulate_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;uint8_t pad1[4];uint8_t place;uint8_t pad2[3];};
struct xcb_damage_destroy_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_damage_damage_t damage;};
struct xcb_destroy_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_dpms_get_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;};
struct xcb_dri2_copy_region_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;};
struct xcb_dri2_get_buffers_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t width;uint32_t height;uint32_t count;uint8_t pad1[12];};
struct xcb_get_screen_saver_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t timeout;uint16_t interval;uint8_t prefer_blanking;uint8_t allow_exposures;uint8_t pad1[18];};
struct xcb_glx_gen_textures_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_get_booleanv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint8_t datum;uint8_t pad2[15];};
struct xcb_input_led_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;uint32_t led_mask;uint32_t led_values;};
struct xcb_input_ptr_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;uint8_t pad0[2];int16_t num;int16_t denom;int16_t threshold;};
struct xcb_map_subwindows_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_recolor_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cursor;uint16_t fore_red;uint16_t fore_green;uint16_t fore_blue;uint16_t back_red;uint16_t back_green;uint16_t back_blue;};
struct xcb_sync_query_fence_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t triggered;uint8_t pad1[23];};
struct xcb_test_get_version_reply_t {uint8_t response_type;uint8_t major_version;uint16_t sequence;uint32_t length;uint16_t minor_version;};
struct xcb_ungrab_pointer_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_timestamp_t time;};
struct _ScreenSaverUnsetAttributes {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;};
struct _XResQueryClientPixmapBytes {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD32 xid;};
struct _xkbIndicatorDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 shapeNdx;CARD8 onColorNdx;CARD8 offColorNdx;CARD8 pad1;CARD32 pad2;};
struct omap3isp_ccdc_update_config {__u16 update;__u16 flag;enum omap3isp_alaw_ipwidth alawip;struct omap3isp_ccdc_bclamp *bclamp;struct omap3isp_ccdc_blcomp *blcomp;struct omap3isp_ccdc_fpc *fpc;struct omap3isp_ccdc_lsc_config *lsc_cfg;struct omap3isp_ccdc_culling *cull;__u8 *lsc;};
struct xcb_free_colormap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_get_atom_name_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_atom_t atom;};
struct xcb_glx_get_error_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_is_direct_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;};
struct xcb_glx_read_pixels_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_render_mode_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ret_val;uint32_t n;uint32_t new_mode;uint8_t pad1[12];};
struct xcb_list_extensions_reply_t {uint8_t response_type;uint8_t names_len;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_list_properties_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t atoms_len;uint8_t pad1[22];};
struct xcb_query_best_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width;uint16_t height;};
struct xcb_query_extension_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t present;uint8_t major_opcode;uint8_t first_event;uint8_t first_error;};
struct xcb_query_pointer_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_sync_initialize_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t major_version;uint8_t minor_version;uint8_t pad1[22];};
struct xcb_ungrab_button_request_t {uint8_t major_opcode;uint8_t button;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;uint8_t pad0[2];};
struct xcb_xkb_get_state_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];};
struct _XF86OldVidModeAddModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;CARD32 after_dotclock;CARD16 after_hdisplay;CARD16 after_hsyncstart;CARD16 after_hsyncend;CARD16 after_htotal;CARD16 after_vdisplay;CARD16 after_vsyncstart;CARD16 after_vsyncend;CARD16 after_vtotal;CARD32 after_flags;};
struct _XF86OldVidModeModModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _xkbGetIndicatorStateReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 state;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct autofs_packet_expire_multi {struct autofs_packet_hdr hdr;autofs_wqt_t wait_queue_token;int len;char name[256];};
struct fw_cdev_event_iso_resource {__u64 closure;__u32 type;__u32 handle;__s32 channel;__s32 bandwidth;};
struct omap3isp_stat_event_status {__u32 frame_number;__u16 config_counter;__u8 buf_err;};
struct xcb_allow_events_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;xcb_timestamp_t time;};
struct xcb_destroy_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;};
struct xcb_dri2_get_msc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_dri2_get_param_reply_t {uint8_t response_type;uint8_t is_param_recognized;uint16_t sequence;uint32_t length;uint32_t value_hi;uint32_t value_lo;};
struct xcb_get_geometry_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;};
struct xcb_glx_end_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_get_minmax_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_get_string_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint8_t pad2[16];};
struct xcb_lookup_color_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint16_t name_len;uint8_t pad1[2];};
struct xcb_mapping_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint8_t request;xcb_keycode_t first_keycode;uint8_t count;uint8_t pad1;};
struct xcb_query_colors_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_resize_request_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;uint16_t width;uint16_t height;};
struct xcb_store_colors_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_unmap_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_x_print_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_x_print_pcontext_t context;uint8_t cancel;};
struct xcb_xkb_indicator_doodad_t {xcb_atom_t name;uint8_t type;uint8_t priority;int16_t top;int16_t left;int16_t angle;uint8_t shapeNdx;uint8_t onColorNdx;uint8_t offColorNdx;uint8_t pad0[5];};
struct _XF86MiscSetGrabKeysState {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;BOOL enable;BOOL pad1;CARD16 pad2;};
struct _XResQueryClientResources {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD32 xid;};
struct ib_uverbs_query_port_resp {__u32 port_cap_flags;__u32 max_msg_sz;__u32 bad_pkey_cntr;__u32 qkey_viol_cntr;__u32 gid_tbl_len;__u16 pkey_tbl_len;__u16 lid;__u16 sm_lid;__u8 state;__u8 max_mtu;__u8 active_mtu;__u8 lmc;__u8 max_vl_num;__u8 sm_sl;__u8 subnet_timeout;__u8 init_type_reply;__u8 active_width;__u8 active_speed;__u8 phys_state;__u8 link_layer;__u8 reserved[2];};
struct xcb_alloc_color_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint16_t red;uint16_t green;uint16_t blue;uint8_t pad1[2];};
union xcb_client_message_data_t {uint8_t data8[20];uint16_t data16[10];uint32_t data32[5];};
struct xcb_dri2_wait_msc_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ust_hi;uint32_t ust_lo;uint32_t msc_hi;uint32_t msc_lo;uint32_t sbc_hi;uint32_t sbc_lo;};
struct xcb_dri2_wait_sbc_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ust_hi;uint32_t ust_lo;uint32_t msc_hi;uint32_t msc_lo;uint32_t sbc_hi;uint32_t sbc_lo;};
struct xcb_free_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cursor;};
struct xcb_free_pixmap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_pixmap_t pixmap;};
struct xcb_get_atom_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t name_len;uint8_t pad1[22];};
struct xcb_get_font_path_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t path_len;uint8_t pad1[22];};
struct xcb_glx_gen_lists_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ret_val;};
struct xcb_glx_is_direct_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t is_direct;uint8_t pad1[23];};
struct xcb_glx_wait_gl_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_grab_keyboard_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_kill_client_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint32_t resource;};
struct xcb_xevie_start_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xkb_device_led_info_t {xcb_xkb_led_class_spec_t ledClass;xcb_xkb_id_spec_t ledID;uint32_t namesPresent;uint32_t mapsPresent;uint32_t physIndicators;uint32_t state;};
struct _PanoramiXGetScreenCount {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;};
struct _XDGACopyTransparentArea {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 srcx;CARD16 srcy;CARD16 width;CARD16 height;CARD16 dstx;CARD16 dsty;CARD32 key;};
struct _xkbGetIndicatorMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 which;CARD32 realIndicators;CARD8 nIndicators;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbIndicatorMapWireDesc {CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 mods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;};
struct _xkbSymInterpretWireDesc {CARD32 sym;CARD8 mods;CARD8 match;CARD8 virtualMod;CARD8 flags;xkbActionWireDesc act;};
struct btrfs_ioctl_balance_args {__u64 flags;__u64 state;struct btrfs_balance_args data;struct btrfs_balance_args meta;struct btrfs_balance_args sys;struct btrfs_balance_progress stat;__u64 unused[72];};
struct fw_cdev_get_cycle_timer2 {__s64 tv_sec;__s32 tv_nsec;__s32 clk_id;__u32 cycle_timer;};
struct omap3isp_ccdc_lsc_config {__u16 offset;__u8 gain_mode_n;__u8 gain_mode_m;__u8 gain_format;__u16 fmtsph;__u16 fmtlnh;__u16 fmtslv;__u16 fmtlnv;__u8 initial_x;__u8 initial_y;__u32 size;};
struct omap3isp_h3a_aewb_config {__u32 buf_size;__u16 config_counter;__u16 saturation_limit;__u16 win_height;__u16 win_width;__u16 ver_win_count;__u16 hor_win_count;__u16 ver_win_start;__u16 hor_win_start;__u16 blk_ver_win_start;__u16 blk_win_height;__u16 subsample_ver_inc;__u16 subsample_hor_inc;__u8 alaw_enable;};
struct rds_get_mr_for_dest_args {struct sockaddr_storage dest_addr;struct rds_iovec vec;uint64_t cookie_addr;uint64_t flags;};
struct rds_info_rdma_connection {__be32 src_addr;__be32 dst_addr;uint8_t src_gid[16];uint8_t dst_gid[16];uint32_t max_send_wr;uint32_t max_recv_wr;uint32_t max_send_sge;uint32_t rdma_mr_max;uint32_t rdma_mr_size;};
struct xcb_close_font_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_font_t font;};
struct xcb_dpms_capable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t capable;uint8_t pad1[23];};
struct xcb_dri2_connect_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t driver_name_length;uint32_t device_name_length;uint8_t pad1[16];};
struct xcb_dri2_get_msc_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ust_hi;uint32_t ust_lo;uint32_t msc_hi;uint32_t msc_lo;uint32_t sbc_hi;uint32_t sbc_lo;};
struct xcb_glx_finish_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_render_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_wait_x_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_grab_pointer_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_lookup_color_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t exact_red;uint16_t exact_green;uint16_t exact_blue;uint16_t visual_red;uint16_t visual_green;uint16_t visual_blue;};
struct xcb_map_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_query_colors_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t colors_len;uint8_t pad1[22];};
struct xcb_query_font_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_fontable_t font;};
struct xcb_query_keymap_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t keys[32];};
struct xcb_query_tree_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_set_dashes_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t gc;uint16_t dash_offset;uint16_t dashes_len;};
struct xcb_shm_detach_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shm_seg_t shmseg;};
struct xcb_sync_counter_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_counter;uint16_t minor_opcode;uint8_t major_opcode;};
struct xcb_sync_systemcounter_t {xcb_sync_counter_t counter;xcb_sync_int64_t resolution;uint16_t name_len;};
struct xcb_unmap_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;uint8_t from_configure;uint8_t pad1[3];};
struct xcb_xkb_keyboard_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t value;uint16_t minorOpcode;uint8_t majorOpcode;uint8_t pad0[21];};
struct xcb_xv_grab_port_reply_t {uint8_t response_type;uint8_t result;uint16_t sequence;uint32_t length;};
struct _PanoramiXGetScreenSize {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;CARD32 screen;};
struct _ScreenSaverSelectInput {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;CARD32 eventMask;};
struct _XF86DGAInstallColormap {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad2;CARD32 id;};
struct _XF86VidModeAddModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;CARD32 after_dotclock;CARD16 after_hdisplay;CARD16 after_hsyncstart;CARD16 after_hsyncend;CARD16 after_htotal;CARD16 after_hskew;CARD16 after_vdisplay;CARD16 after_vsyncstart;CARD16 after_vsyncend;CARD16 after_vtotal;CARD16 pad2;CARD32 after_flags;CARD32 reserved4;CARD32 reserved5;CARD32 reserved6;};
struct _XF86VidModeModModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct _XF86VidModeSetViewPort {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 x;CARD32 y;};
struct _XResQueryResourceBytes {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD32 client;CARD32 numSpecs;};
struct _xSyncDestroyCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 counter;};
struct _xkbListComponentsReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 nKeymaps;CARD16 nKeycodes;CARD16 nTypes;CARD16 nCompatMaps;CARD16 nSymbols;CARD16 nGeometries;CARD16 extra;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbPerClientFlagsReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 supported;CARD32 value;CARD32 autoCtrls;CARD32 autoCtrlValues;CARD32 pad1;CARD32 pad2;};
struct ib_uverbs_post_srq_recv {__u64 response;__u32 srq_handle;__u32 wr_count;__u32 sge_count;__u32 wqe_size;struct ib_uverbs_recv_wr recv[];};
struct xcb_alloc_color_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t red;uint16_t green;uint16_t blue;uint8_t pad1[2];uint32_t pixel;};
struct xcb_glx_flush_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_generic_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_value;uint16_t minor_opcode;uint8_t major_opcode;uint8_t pad0[21];};
struct xcb_map_request_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t parent;xcb_window_t window;};
struct xcb_no_exposure_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;uint16_t minor_opcode;uint8_t major_opcode;uint8_t pad1;};
struct xcb_open_font_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_font_t fid;uint16_t name_len;uint8_t pad1[2];};
struct xcb_xevie_end_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t cmap;};
struct xcb_xevie_start_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xkb_common_doodad_t {xcb_atom_t name;uint8_t type;uint8_t priority;int16_t top;int16_t left;int16_t angle;};
struct xcb_xkb_indicator_map_t {uint8_t flags;uint8_t whichGroups;uint8_t groups;uint8_t whichMods;uint8_t mods;uint8_t realMods;uint16_t vmods;uint32_t ctrls;};
struct xcb_xkb_key_v_mod_map_t {xcb_keycode_t keycode;uint8_t pad0;uint16_t vmods;};
struct xcb_xvmc_surface_info_t {xcb_xvmc_surface_t id;uint16_t chroma_format;uint16_t pad0;uint16_t max_width;uint16_t max_height;uint16_t subpicture_max_width;uint16_t subpicture_max_height;uint32_t mc_type;uint32_t flags;};
struct Dwarf_Regtable_Entry_s {Dwarf_Small dw_offset_relevant;Dwarf_Small dw_value_type;Dwarf_Half dw_regnum;Dwarf_Addr dw_offset;};
struct _LbxGetKeyboardMapping {CARD8 reqType;CARD8 lbxReqType;CARD16 length;KeyCode firstKeyCode;CARD8 count;CARD16 pad1;};
struct _LbxInvalidateTagEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 tag;CARD32 tagType;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
typedef _Unwind_Reason_Code (*_Unwind_Personality_Fn)(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *);
struct _XDGAGetViewportStatus {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _xkbKTMapEntryWireDesc {BOOL active;CARD8 mask;CARD8 level;CARD8 realMods;CARD16 virtualMods;CARD16 pad;};
struct hiddev_usage_ref_multi {struct hiddev_usage_ref uref;__u32 num_values;__s32 values[1024];};
struct ipt_clusterip_tgt_info {__u32 flags;__u8 clustermac[6];__u16 num_total_nodes;__u16 num_local_nodes;__u16 local_nodes[16];__u32 hash_mode;__u32 hash_initval;struct clusterip_config *config;};
struct __attribute__((packed)) uvc_frame_uncompressed {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bFrameIndex;__u8 bmCapabilities;__u16 wWidth;__u16 wHeight;__u32 dwMinBitRate;__u32 dwMaxBitRate;__u32 dwMaxVideoFrameBufferSize;__u32 dwDefaultFrameInterval;__u8 bFrameIntervalType;__u32 dwFrameInterval[];};
struct uvc_xu_control_mapping {__u32 id;__u8 name[32];__u8 entity[16];__u8 selector;__u8 size;__u8 offset;__u32 v4l2_type;__u32 data_type;struct uvc_menu_info *menu_info;__u32 menu_count;__u32 reserved[4];};
struct __attribute__((packed)) v4l2_pix_format_mplane {__u32 width;__u32 height;__u32 pixelformat;__u32 field;__u32 colorspace;struct v4l2_plane_pix_format plane_fmt[8];__u8 num_planes;__u8 reserved[11];};
struct xcb_glx_finish_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;};
struct xcb_list_fonts_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t names_len;uint8_t pad1[22];};
struct xcb_list_hosts_reply_t {uint8_t response_type;uint8_t mode;uint16_t sequence;uint32_t length;uint16_t hosts_len;uint8_t pad0[22];};
struct xcb_map_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;uint8_t override_redirect;uint8_t pad1[3];};
struct xcb_sync_alarm_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_alarm;uint16_t minor_opcode;uint8_t major_opcode;};
struct xcb_xevie_send_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xkb_shape_doodad_t {xcb_atom_t name;uint8_t type;uint8_t priority;int16_t top;int16_t left;int16_t angle;uint8_t colorNdx;uint8_t shapeNdx;uint8_t pad0[6];};
struct xt_rateest_target_info {char name[16];__s8 interval;__u8 ewma_log;struct xt_rateest *est;};
struct Dwarf_Macro_Details_s {Dwarf_Off dmd_offset;Dwarf_Small dmd_type;Dwarf_Signed dmd_lineno;Dwarf_Signed dmd_fileindex;char *dmd_macro;};
struct _LbxBeginLargeRequest {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 largeReqLength;};
struct _LbxGetWinAttrAndGeom {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 id;};
struct _ScreenSaverQueryInfo {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;};
struct _XDGACloseFramebuffer {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XEVIGetVisualInfoReq {CARD8 reqType;CARD8 xeviReqType;CARD16 length;CARD32 n_visual;};
struct _XF86BigfontQueryFont {CARD8 reqType;CARD8 xf86bigfontReqType;CARD16 length;CARD32 id;CARD32 flags;};
struct _xSyncDestroyAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 alarm;};
struct _xSyncDestroyFenceReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 fid;};
struct _xSyncQueryCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 counter;};
struct _xSyncTriggerFenceReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 fid;};
struct _xkbAnyDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD32 pad2;CARD32 pad3;};
struct _xkbGetCompatMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 groups;CARD8 pad1;CARD16 firstSI;CARD16 nSI;CARD16 nTotalSI;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbGetNamedIndicator {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 ledClass;CARD16 ledID;CARD16 pad1;CARD32 indicator;};
struct _xkbSetDebuggingFlags {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 msgLength;CARD16 pad;CARD32 affectFlags;CARD32 flags;CARD32 affectCtrls;CARD32 ctrls;};
struct autofs_packet_missing {struct autofs_packet_hdr hdr;autofs_wqt_t wait_queue_token;int len;char name[256];};
struct dmx_sct_filter_params {__u16 pid;dmx_filter_t filter;__u32 timeout;__u32 flags;};
struct ib_ucm_rep_event_resp {__be64 remote_ca_guid;__u32 remote_qkey;__u32 remote_qpn;__u32 starting_psn;__u8 responder_resources;__u8 initiator_depth;__u8 target_ack_delay;__u8 failover_accepted;__u8 flow_control;__u8 rnr_retry_count;__u8 srq;__u8 reserved[5];};
struct sctp_adaptation_event {__u16 sai_type;__u16 sai_flags;__u32 sai_length;__u32 sai_adaptation_ind;sctp_assoc_t sai_assoc_id;};
struct sctp_sender_dry_event {__u16 sender_dry_type;__u16 sender_dry_flags;__u32 sender_dry_length;sctp_assoc_t sender_dry_assoc_id;};
struct usbdevfs_ctrltransfer {__u8 bRequestType;__u8 bRequest;__u16 wValue;__u16 wIndex;__u16 wLength;__u32 timeout;void *data;};
struct __attribute__((packed)) uvc_header_descriptor {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u16 bcdUVC;__u16 wTotalLength;__u32 dwClockFrequency;__u8 bInCollection;__u8 baInterfaceNr[];};
struct __attribute__((packed)) uvc_streaming_control {__u16 bmHint;__u8 bFormatIndex;__u8 bFrameIndex;__u32 dwFrameInterval;__u16 wKeyFrameRate;__u16 wPFrameRate;__u16 wCompQuality;__u16 wCompWindowSize;__u16 wDelay;__u32 dwMaxVideoFrameSize;__u32 dwMaxPayloadTransferSize;__u32 dwClockFrequency;__u8 bmFramingInfo;__u8 bPreferedVersion;__u8 bMinVersion;__u8 bMaxVersion;};
struct xcb_dpms_info_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t power_level;uint8_t state;uint8_t pad1[21];};
struct xcb_free_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t gc;};
struct xcb_xevie_end_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xkb_logo_doodad_t {xcb_atom_t name;uint8_t type;uint8_t priority;int16_t top;int16_t left;int16_t angle;uint8_t colorNdx;uint8_t shapeNdx;uint8_t pad0[6];};
struct xcb_xv_adaptor_info_t {xcb_xv_port_t base_id;uint16_t name_size;uint16_t num_ports;uint16_t num_formats;uint8_t type;uint8_t pad0;};
struct xt_tproxy_target_info {__u32 mark_mask;__u32 mark_value;__be32 laddr;__be16 lport;};
struct _LbxListenToAllEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _LbxListenToOneEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 client;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _LbxReleaseCmapEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 colormap;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _LbxSendTagDataEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 tag;CARD32 tagType;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _RequestBlock_struct {__u8 CDBLen;struct _RequestBlock_struct___ACD4FD9060306C0152C059073058268C Type;__u16 Timeout;__u8 CDB[16];};
struct _XDGAInstallColormap {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 cmap;};
struct _XDGAOpenFramebuffer {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XF86VidModeGetGamma {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _XF86VidModeSetGamma {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 red;CARD32 green;CARD32 blue;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _XkbStateNotifyEvent {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;int group;int base_group;int latched_group;int locked_group;unsigned int mods;unsigned int base_mods;unsigned int latched_mods;unsigned int locked_mods;int compat_state;unsigned __int8 grab_mods;unsigned __int8 compat_grab_mods;unsigned __int8 lookup_mods;unsigned __int8 compat_lookup_mods;int ptr_buttons;KeyCode keycode;char event_type;char req_major;char req_minor;};
struct _xSyncChangeAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 alarm;CARD32 valueMask;};
struct _xSyncCreateAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 id;CARD32 valueMask;};
struct __attribute__((packed)) nfqnl_msg_packet_hdr {__be32 packet_id;__be16 hw_protocol;__u8 hook;};
struct nfulnl_msg_packet_hw {__be16 hw_addrlen;__u16 _pad;__u8 hw_addr[8];};
struct omapfb_ovl_colormode {__u8 overlay_idx;__u8 mode_idx;__u32 bits_per_pixel;__u32 nonstd;struct fb_bitfield red;struct fb_bitfield green;struct fb_bitfield blue;struct fb_bitfield transp;};
struct xcb_focus_in_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_window_t event;uint8_t mode;uint8_t pad0[3];};
struct xcb_input_key_info_t {uint8_t class_id;uint8_t len;xcb_input_key_code_t min_keycode;xcb_input_key_code_t max_keycode;uint16_t num_keys;uint8_t pad0[2];};
struct xt_set_info_match_v3 {struct xt_set_info match_set;struct ip_set_counter_match packets;struct ip_set_counter_match bytes;__u32 flags;};
typedef int (*XcmsWhiteAdjustProc)(XcmsCCC, XcmsColor *, XcmsColor *, XcmsColorFormat, XcmsColor *, unsigned int, int *);
struct _ShapeGetRectangles {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;CARD8 kind;CARD8 junk1;CARD16 junk2;};
struct _ShapeInputSelected {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;};
struct _XDGACreateColormap {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 id;CARD32 mode;CARD8 alloc;CARD8 pad1;CARD16 pad2;};
struct _XF86DGASetViewPort {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 x;CARD32 y;};
struct _XResQueryClientIds {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD32 numSpecs;};
struct _xSyncQueryAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 alarm;};
struct _xSyncQueryFenceReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 fid;};
struct _xSyncResetFenceReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 fid;};
struct _xkbGetIndicatorMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 which;};
struct _xkbKeyTypeWireDesc {CARD8 mask;CARD8 realMods;CARD16 virtualMods;CARD8 numLevels;CARD8 nMapEntries;BOOL preserve;CARD8 pad;};
struct _xkbOverlayWireDesc {CARD32 name;CARD8 nRows;CARD8 pad1;CARD16 pad2;};
struct _xkbSetIndicatorMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;CARD32 which;};
struct ebt_stp_config_info {__u8 flags;__u16 root_priol;__u16 root_priou;char root_addr[6];char root_addrmsk[6];__u32 root_costl;__u32 root_costu;__u16 sender_priol;__u16 sender_priou;char sender_addr[6];char sender_addrmsk[6];__u16 portl;__u16 portu;__u16 msg_agel;__u16 msg_ageu;__u16 max_agel;__u16 max_ageu;__u16 hello_timel;__u16 hello_timeu;__u16 forward_delayl;__u16 forward_delayu;};
struct ethtool_tcpip4_spec {__be32 ip4src;__be32 ip4dst;__be16 psrc;__be16 pdst;__u8 tos;};
struct ib_ucm_private_data {__u64 data;__u32 id;__u8 len;__u8 reserved[3];};
struct ib_user_mad_reg_req {__u32 id;packed_ulong method_mask[2];__u8 qpn;__u8 mgmt_class;__u8 mgmt_class_version;__u8 oui[3];__u8 rmpp_version;};
struct ib_uverbs_create_cq {__u64 response;__u64 user_handle;__u32 cqe;__u32 comp_vector;__s32 comp_channel;__u32 reserved;__u64 driver_data[];};
struct ib_uverbs_create_qp {__u64 response;__u64 user_handle;__u32 pd_handle;__u32 send_cq_handle;__u32 recv_cq_handle;__u32 srq_handle;__u32 max_send_wr;__u32 max_recv_wr;__u32 max_send_sge;__u32 max_recv_sge;__u32 max_inline_data;__u8 sq_sig_all;__u8 qp_type;__u8 is_srq;__u8 reserved;__u64 driver_data[];};
struct ib_uverbs_post_recv {__u64 response;__u32 qp_handle;__u32 wr_count;__u32 sge_count;__u32 wqe_size;struct ib_uverbs_recv_wr recv_wr[];};
struct nd_opt_adv_interval {uint8_t nd_opt_adv_interval_type;uint8_t nd_opt_adv_interval_len;uint16_t nd_opt_adv_interval_reserved;uint32_t nd_opt_adv_interval_ival;};
struct nfqnl_msg_packet_hw {__be16 hw_addrlen;__u16 _pad;__u8 hw_addr[8];};
struct __attribute__((packed)) rds_info_connection {uint64_t next_tx_seq;uint64_t next_rx_seq;__be32 laddr;__be32 faddr;uint8_t transport[16];uint8_t flags;};
struct __attribute__((packed)) sadb_x_ipsecrequest {__u16 sadb_x_ipsecrequest_len;__u16 sadb_x_ipsecrequest_proto;__u8 sadb_x_ipsecrequest_mode;__u8 sadb_x_ipsecrequest_level;__u16 sadb_x_ipsecrequest_reserved1;__u32 sadb_x_ipsecrequest_reqid;__u32 sadb_x_ipsecrequest_reserved2;};
struct sctp_shutdown_event {__u16 sse_type;__u16 sse_flags;__u32 sse_length;sctp_assoc_t sse_assoc_id;};
struct snd_pcm_mmap_status {snd_pcm_state_t state;int pad1;snd_pcm_uframes_t hw_ptr;struct timespec tstamp;snd_pcm_state_t suspended_state;struct timespec audio_tstamp;};
struct xcb_request_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_value;uint16_t minor_opcode;uint8_t major_opcode;uint8_t pad0;};
struct xfrm_user_kmaddress {xfrm_address_t local;xfrm_address_t remote;__u32 reserved;__u16 family;};
struct _LbxFreeCellsEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 colormap;CARD32 pixelStart;CARD32 pixelEnd;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _LbxIncrementPixel {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 cmap;CARD32 pixel;};
struct _LbxModifySequence {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 adjust;};
struct _LbxQueryExtension {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 nbytes;};
struct _PanoramiXGetState {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;};
struct _ShapeQueryExtents {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;};
struct _XDGAFillRectangle {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD32 color;};
struct _XkbControlsNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed_ctrls;unsigned int enabled_ctrls;unsigned int enabled_ctrl_changes;int num_groups;KeyCode keycode;char event_type;char req_major;char req_minor;};
struct _XkbMapNotifyEvent {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;unsigned int flags;int first_type;int num_types;KeyCode min_key_code;KeyCode max_key_code;KeyCode first_key_sym;KeyCode first_key_act;KeyCode first_key_behavior;KeyCode first_key_explicit;KeyCode first_modmap_key;KeyCode first_vmodmap_key;int num_key_syms;int num_key_acts;int num_key_behaviors;int num_key_explicit;int num_modmap_keys;int num_vmodmap_keys;unsigned int vmods;};
struct __gconv_trans_data {__gconv_trans_fct __trans_fct;__gconv_trans_context_fct __trans_context_fct;__gconv_trans_end_fct __trans_end_fct;void *__data;struct __gconv_trans_data *__next;};
struct _i2o_eisa_bus_info {__u16 EisaBaseIOPort;__u8 reserved;__u8 EisaSlotNumber;__u32 EisaBaseMemoryAddress;};
struct _xkbPerClientFlags {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;CARD32 change;CARD32 value;CARD32 ctrlsToChange;CARD32 autoCtrls;CARD32 autoCtrlValues;};
struct dvb_qam_parameters {__u32 symbol_rate;fe_code_rate_t fec_inner;fe_modulation_t modulation;};
struct full_sockaddr_rose {sa_family_t srose_family;rose_address srose_addr;ax25_address srose_call;unsigned int srose_ndigis;ax25_address srose_digis[6];};
struct ib_uverbs_alloc_mw {__u64 response;__u32 pd_handle;__u8 mw_type;__u8 reserved[3];};
struct kvm_coalesced_mmio {__u64 phys_addr;__u32 len;__u32 pad;__u8 data[8];};
struct kvm_xen_hvm_config {__u32 flags;__u32 msr;__u64 blob_addr_32;__u64 blob_addr_64;__u8 blob_size_32;__u8 blob_size_64;__u8 pad2[30];};
struct minix3_super_block {__u32 s_ninodes;__u16 s_pad0;__u16 s_imap_blocks;__u16 s_zmap_blocks;__u16 s_firstdatazone;__u16 s_log_zone_size;__u16 s_pad1;__u32 s_max_size;__u32 s_zones;__u16 s_magic;__u16 s_pad2;__u16 s_blocksize;__u8 s_disk_version;};
struct omap3isp_stat_data {struct timeval ts;void *buf;__u32 buf_size;__u16 frame_number;__u16 cur_frame;__u16 config_counter;};
struct packet_diag_mclist {__u32 pdmc_index;__u32 pdmc_count;__u16 pdmc_type;__u16 pdmc_alen;__u8 pdmc_addr[7];};
struct sctp_authkey_event {__u16 auth_type;__u16 auth_flags;__u32 auth_length;__u16 auth_keynumber;__u16 auth_altkeynumber;__u32 auth_indication;sctp_assoc_t auth_assoc_id;};
struct __attribute__((packed)) usb_cdc_ether_desc {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 iMACAddress;__le32 bmEthernetStatistics;__le16 wMaxSegmentSize;__le16 wNumberMCFilters;__u8 bNumberPowerFilters;};
struct __attribute__((packed)) usb_hub_descriptor {__u8 bDescLength;__u8 bDescriptorType;__u8 bNbrPorts;__le16 wHubCharacteristics;__u8 bPwrOn2PwrGood;__u8 bHubContrCurrent;union usb_hub_descriptor___A692678C37F83DE7D0AC782750637E8B u;};
struct __attribute__((packed)) v4l2_dbg_chip_info {struct v4l2_dbg_match match;char name[32];__u32 flags;__u32 reserved[32];};
struct xcb_bell_request_t {uint8_t major_opcode;int8_t percent;uint16_t length;};
struct xcb_expose_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;uint16_t x;uint16_t y;uint16_t width;uint16_t height;uint16_t count;uint8_t pad1[2];};
struct xcb_record_range_t {xcb_record_range_8_t core_requests;xcb_record_range_8_t core_replies;xcb_record_ext_range_t ext_requests;xcb_record_ext_range_t ext_replies;xcb_record_range_8_t delivered_events;xcb_record_range_8_t device_events;xcb_record_range_8_t errors;uint8_t client_started;uint8_t client_died;};
struct xcb_sync_trigger_t {xcb_sync_counter_t counter;uint32_t wait_type;xcb_sync_int64_t wait_value;uint32_t test_type;};
struct _LbxInvalidateTag {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 tag;};
union _SCSI3Addr_struct {struct _SCSI3Addr_struct___8CB8CA02CCA8FA2CB0393D22371E4F6E PeripDev;struct _SCSI3Addr_struct___FA627A8FBA596FD3BD82259322F441D8 LogDev;struct _SCSI3Addr_struct___6965806F62356BC0A797529058F9C84D LogUnit;};
struct _XevieSelectInput {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD32 event_mask;};
struct _XkbActionMessage {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;KeyCode keycode;int press;int key_event_follows;int group;unsigned int mods;char message[7];};
struct _i2o_status_block {__u16 org_id;__u16 reserved;unsigned __int16 iop_id : 12;unsigned __int16 reserved1 : 4;__u16 host_unit_id;unsigned __int16 segment_number : 12;unsigned __int16 i2o_version : 4;__u8 iop_state;__u8 msg_type;__u16 inbound_frame_size;__u8 init_code;__u8 reserved2;__u32 max_inbound_frames;__u32 cur_inbound_frames;__u32 max_outbound_frames;char product_id[24];__u32 expected_lct_size;__u32 iop_capabilities;__u32 desired_mem_size;__u32 current_mem_size;__u32 current_mem_base;__u32 desired_io_size;__u32 current_io_size;__u32 current_io_base;unsigned __int32 reserved3 : 24;unsigned __int32 cmd_status : 8;};
struct _xSyncGetPriority {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 id;};
struct _xkbGetDeviceInfo {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 wanted;BOOL allBtns;CARD8 firstBtn;CARD8 nBtns;CARD8 pad;CARD16 ledClass;CARD16 ledID;};
struct ib_uverbs_ah_attr {struct ib_uverbs_global_route grh;__u16 dlid;__u8 sl;__u8 src_path_bits;__u8 static_rate;__u8 is_global;__u8 port_num;__u8 reserved;};
struct ib_uverbs_open_qp {__u64 response;__u64 user_handle;__u32 pd_handle;__u32 qpn;__u8 qp_type;__u8 reserved[7];__u64 driver_data[];};
struct ib_uverbs_qp_dest {__u8 dgid[16];__u32 flow_label;__u16 dlid;__u16 reserved;__u8 sgid_index;__u8 hop_limit;__u8 traffic_class;__u8 sl;__u8 src_path_bits;__u8 static_rate;__u8 is_global;__u8 port_num;};
struct kvm_ppc_smmu_info {__u64 flags;__u32 slb_size;__u32 pad;struct kvm_ppc_one_seg_page_size sps[8];};
struct omap3isp_prev_cfa {enum omap3isp_cfa_fmt format;__u8 gradthrs_vert;__u8 gradthrs_horz;__u32 table[4][144];};
struct snd_pcm_hw_params {unsigned int flags;struct snd_mask masks[3];struct snd_mask mres[5];struct snd_interval intervals[12];struct snd_interval ires[9];unsigned int rmask;unsigned int cmask;unsigned int info;unsigned int msbits;unsigned int rate_num;unsigned int rate_den;snd_pcm_uframes_t fifo_size;unsigned __int8 reserved[64];};
struct __attribute__((packed)) v4l2_dbg_register {struct v4l2_dbg_match match;__u32 size;__u64 reg;__u64 val;};
struct xcb_value_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_value;uint16_t minor_opcode;uint8_t major_opcode;uint8_t pad0;};
struct xt_hashlimit_info {char name[16];struct hashlimit_cfg cfg;struct xt_hashlimit_htable *hinfo;union xt_hashlimit_info___36FD1D4A07CE693D744388849A922979 u;};
struct La_x86_64_retval {uint64_t lrv_rax;uint64_t lrv_rdx;La_x86_64_xmm lrv_xmm0;La_x86_64_xmm lrv_xmm1;long double lrv_st0;long double lrv_st1;La_x86_64_vector lrv_vector0;La_x86_64_vector lrv_vector1;};
struct _ShmCreatePixmap {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 pid;CARD32 drawable;CARD16 width;CARD16 height;CARD8 depth;CARD8 pad0;CARD8 pad1;CARD8 pad2;CARD32 shmseg;CARD32 offset;};
struct _XDGASelectInput {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 mask;};
struct _XDGASetViewport {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 x;CARD16 y;CARD32 flags;};
struct _XagDestroyAssoc {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 window;};
struct _XcmsFunctionSet {XcmsColorSpace **DDColorSpaces;XcmsScreenInitProc screenInitProc;XcmsScreenFreeProc screenFreeProc;};
struct _XcupStoreColors {CARD8 reqType;CARD8 xcupReqType;CARD16 length;CARD32 cmap;};
struct _XkbClientMapRec {unsigned __int8 size_types;unsigned __int8 num_types;XkbKeyTypePtr types;unsigned __int16 size_syms;unsigned __int16 num_syms;KeySym *syms;XkbSymMapPtr key_sym_map;unsigned __int8 *modmap;};
struct _XkbCompatMapRec {XkbSymInterpretPtr sym_interpret;XkbModsRec groups[4];unsigned __int16 num_si;unsigned __int16 size_si;};
struct _xkbGetCompatMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 groups;BOOL getAllSI;CARD16 firstSI;CARD16 nSI;};
struct _xkbGetKbdByName {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 need;CARD16 want;BOOL load;CARD8 pad;};
struct _xkbSetCompatMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 pad1;BOOL recomputeActions;BOOL truncateSI;CARD8 groups;CARD16 firstSI;CARD16 nSI;CARD16 pad2;};
struct ethtool_flow_ext {__u8 padding[2];unsigned __int8 h_dest[6];__be16 vlan_etype;__be16 vlan_tci;__be32 data[2];};
struct inet_diag_sockid {__be16 idiag_sport;__be16 idiag_dport;__be32 idiag_src[4];__be32 idiag_dst[4];__u32 idiag_if;__u32 idiag_cookie[2];};
struct kvm_ioapic_state {__u64 base_address;__u32 ioregsel;__u32 id;__u32 irr;__u32 pad;union kvm_ioapic_state___DD5945FC8609333C0DC47555F67F1F87 redirtbl[24];};
struct mdp_superblock_s {__u32 md_magic;__u32 major_version;__u32 minor_version;__u32 patch_version;__u32 gvalid_words;__u32 set_uuid0;__u32 ctime;__u32 level;__u32 size;__u32 nr_disks;__u32 raid_disks;__u32 md_minor;__u32 not_persistent;__u32 set_uuid1;__u32 set_uuid2;__u32 set_uuid3;__u32 gstate_creserved[16];__u32 utime;__u32 state;__u32 active_disks;__u32 working_disks;__u32 failed_disks;__u32 spare_disks;__u32 sb_csum;__u32 events_lo;__u32 events_hi;__u32 cp_events_lo;__u32 cp_events_hi;__u32 recovery_cp;__u64 reshape_position;__u32 new_level;__u32 delta_disks;__u32 new_layout;__u32 new_chunk;__u32 gstate_sreserved[14];__u32 layout;__u32 chunk_size;__u32 root_pv;__u32 root_block;__u32 pstate_reserved[60];mdp_disk_t disks[27];__u32 reserved[];mdp_disk_t this_disk;};
struct netlink_diag_req {__u8 sdiag_family;__u8 sdiag_protocol;__u16 pad;__u32 ndiag_ino;__u32 ndiag_show;__u32 ndiag_cookie[2];};
struct rdma_cm_id_stats {__u32 qp_num;__u32 bound_dev_if;__u32 port_space;__s32 pid;__u8 cm_state;__u8 node_type;__u8 port_num;__u8 qp_type;};
struct __attribute__((packed)) rds_info_counter {uint8_t name[32];uint64_t value;};
struct sctp_assoc_stats {sctp_assoc_t sas_assoc_id;struct sockaddr_storage sas_obs_rto_ipaddr;__u64 sas_maxrto;__u64 sas_isacks;__u64 sas_osacks;__u64 sas_opackets;__u64 sas_ipackets;__u64 sas_rtxchunks;__u64 sas_outofseqtsns;__u64 sas_idupchunks;__u64 sas_gapcnt;__u64 sas_ouodchunks;__u64 sas_iuodchunks;__u64 sas_oodchunks;__u64 sas_iodchunks;__u64 sas_octrlchunks;__u64 sas_ictrlchunks;};
struct sctp_assocparams {sctp_assoc_t sasoc_assoc_id;__u16 sasoc_asocmaxrxt;__u16 sasoc_number_peer_destinations;__u32 sasoc_peer_rwnd;__u32 sasoc_local_rwnd;__u32 sasoc_cookie_life;};
struct sctp_pdapi_event {__u16 pdapi_type;__u16 pdapi_flags;__u32 pdapi_length;__u32 pdapi_indication;sctp_assoc_t pdapi_assoc_id;};
struct __attribute__((packed)) usb_cdc_dmm_desc {__u8 bFunctionLength;__u8 bDescriptorType;__u8 bDescriptorSubtype;__u16 bcdVersion;__le16 wMaxCommand;};
union xcb_xkb_doodad_t {xcb_xkb_common_doodad_t common;xcb_xkb_shape_doodad_t shape;xcb_xkb_text_doodad_t *text;xcb_xkb_indicator_doodad_t indicator;xcb_xkb_logo_doodad_t *logo;};
struct xt_recent_mtinfo {__u32 seconds;__u32 hit_count;__u8 check_set;__u8 invert;char name[200];__u8 side;};
struct _LbxAllowMotion {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 num;};
struct _LbxCloseClient {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 client;};
struct _LbxSwitchEvent {BYTE type;BYTE lbxType;CARD16 pad;CARD32 client;};
typedef _Unwind_Reason_Code (*_Unwind_Stop_Fn)(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *, void *);
struct _XDGAQueryModes {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XInternalAsync {struct _XInternalAsync *next;int (*handler)(Display *, xReply *, char *, int, XPointer);XPointer data;};
struct _XagCreateAssoc {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 window;CARD16 window_type;CARD16 system_window_len;};
struct _xkbGetGeometry {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 name;};
struct _xkbGetMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 pad1;CARD8 minKeyCode;CARD8 maxKeyCode;CARD16 present;CARD8 firstType;CARD8 nTypes;CARD8 totalTypes;CARD8 firstKeySym;CARD16 totalSyms;CARD8 nKeySyms;CARD8 firstKeyAct;CARD16 totalActs;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 totalKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 totalKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 totalModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD8 totalVModMapKeys;CARD8 pad2;CARD16 virtualMods;};
struct _xkbKeyWireDesc {CARD8 name[4];INT16 gap;CARD8 shapeNdx;CARD8 colorNdx;};
struct _xkbSetGeometry {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 nShapes;CARD8 nSections;CARD32 name;CARD16 widthMM;CARD16 heightMM;CARD16 nProperties;CARD16 nColors;CARD16 nDoodads;CARD16 nKeyAliases;CARD8 baseColorNdx;CARD8 labelColorNdx;CARD16 pad;};
struct adfs_discrecord {__u8 log2secsize;__u8 secspertrack;__u8 heads;__u8 density;__u8 idlen;__u8 log2bpmb;__u8 skew;__u8 bootoption;__u8 lowsector;__u8 nzones;__le16 zone_spare;__le32 root;__le32 disc_size;__le16 disc_id;__u8 disc_name[10];__le32 disc_type;__le32 disc_size_high;unsigned __int8 log2sharesize : 4;unsigned __int8 unused40 : 4;unsigned __int8 big_flag : 1;unsigned __int8 unused41 : 1;__u8 nzones_high;__le32 format_version;__le32 root_size;__u8 unused52[8];};
struct bfs_super_block {__le32 s_magic;__le32 s_start;__le32 s_end;__le32 s_from;__le32 s_to;__s32 s_bfrom;__s32 s_bto;char s_fsname[6];char s_volume[6];__u32 s_padding[118];};
struct dlm_lock_result {__u32 version[3];__u32 length;void *user_astaddr;void *user_astparam;struct dlm_lksb *user_lksb;struct dlm_lksb lksb;__u8 bast_mode;__u8 unused[3];__u32 lvb_offset;};
struct dm_ulog_request {uint64_t luid;char uuid[129];char padding[3];uint32_t version;int32_t error;uint32_t seq;uint32_t request_type;uint32_t data_size;char data[];};
struct fc_els_rnid_gen {__u8 rnid_vend_id[16];__be32 rnid_atype;__be32 rnid_phys_port;__be32 rnid_att_nodes;__u8 rnid_node_mgmt;__u8 rnid_ip_ver;__be16 rnid_prot_port;__be32 rnid_ip_addr[4];__u8 rnid_resvd[2];__be16 rnid_vend_spec;};
struct fc_frame_header {__u8 fh_r_ctl;__u8 fh_d_id[3];__u8 fh_cs_ctl;__u8 fh_s_id[3];__u8 fh_type;__u8 fh_f_ctl[3];__u8 fh_seq_id;__u8 fh_df_ctl;__be16 fh_seq_cnt;__be16 fh_ox_id;__be16 fh_rx_id;__be32 fh_parm_offset;};
struct fuse_out_header {uint32_t len;int32_t error;uint64_t unique;};
struct ib_ucm_sidr_rep {__u32 id;__u32 qpn;__u32 qkey;__u32 status;__u64 info;__u64 data;__u8 info_len;__u8 data_len;__u8 reserved[6];};
struct ip_vs_dest_user {__be32 addr;__be16 port;unsigned int conn_flags;int weight;__u32 u_threshold;__u32 l_threshold;};
struct __attribute__((packed)) jffs2_raw_xattr {jint16_t magic;jint16_t nodetype;jint32_t totlen;jint32_t hdr_crc;jint32_t xid;jint32_t version;__u8 xprefix;__u8 name_len;jint16_t value_len;jint32_t data_crc;jint32_t node_crc;__u8 data[];};
struct packet_diag_msg {__u8 pdiag_family;__u8 pdiag_type;__u16 pdiag_num;__u32 pdiag_ino;__u32 pdiag_cookie[2];};
struct packet_diag_req {__u8 sdiag_family;__u8 sdiag_protocol;__u16 pad;__u32 pdiag_ino;__u32 pdiag_show;__u32 pdiag_cookie[2];};
struct rtnl_link_ifmap {__u64 mem_start;__u64 mem_end;__u64 base_addr;__u16 irq;__u8 dma;__u8 port;};
struct sctp_authchunks {sctp_assoc_t gauth_assoc_id;__u32 gauth_number_of_chunks;uint8_t gauth_chunks[];};
struct sctp_paddrthlds {sctp_assoc_t spt_assoc_id;struct sockaddr_storage spt_address;__u16 spt_pathmaxrxt;__u16 spt_pathpfthld;};
struct sctp_sndrcvinfo {__u16 sinfo_stream;__u16 sinfo_ssn;__u16 sinfo_flags;__u32 sinfo_ppid;__u32 sinfo_context;__u32 sinfo_timetolive;__u32 sinfo_tsn;__u32 sinfo_cumtsn;sctp_assoc_t sinfo_assoc_id;};
struct __attribute__((packed)) uvc_frame_mjpeg {__u8 bLength;__u8 bDescriptorType;__u8 bDescriptorSubType;__u8 bFrameIndex;__u8 bmCapabilities;__u16 wWidth;__u16 wHeight;__u32 dwMinBitRate;__u32 dwMaxBitRate;__u32 dwMaxVideoFrameBufferSize;__u32 dwDefaultFrameInterval;__u8 bFrameIntervalType;__u32 dwFrameInterval[];};
struct v4l2_event_ctrl {__u32 changes;__u32 type;v4l2_event_ctrl___877A83439B5014158313B7A496DCA350 __anonymous0;__u32 flags;__s32 minimum;__s32 maximum;__s32 step;__s32 default_value;};
struct vm86plus_struct {struct vm86_regs regs;unsigned __int64 flags;unsigned __int64 screen_bitmap;unsigned __int64 cpu_type;struct revectored_struct int_revectored;struct revectored_struct int21_revectored;struct vm86plus_info_struct vm86plus;};
struct xMbufBufferInfo {CARD32 visualID;CARD16 maxBuffers;CARD8 depth;CARD8 unused;};
struct xcb_coloritem_t {uint32_t pixel;uint16_t red;uint16_t green;uint16_t blue;uint8_t flags;uint8_t pad0;};
struct xfrm_encap_tmpl {__u16 encap_type;__be16 encap_sport;__be16 encap_dport;xfrm_address_t encap_oa;};
typedef int (*CreateFontType)(Display *, XFontStruct *, XExtCodes *);
struct La_x86_64_regs {uint64_t lr_rdx;uint64_t lr_r8;uint64_t lr_r9;uint64_t lr_rcx;uint64_t lr_rsi;uint64_t lr_rdi;uint64_t lr_rbp;uint64_t lr_rsp;La_x86_64_xmm lr_xmm[8];La_x86_64_vector lr_vector[8];};
struct RigidDiskBlock {__u32 rdb_ID;__be32 rdb_SummedLongs;__s32 rdb_ChkSum;__u32 rdb_HostID;__be32 rdb_BlockBytes;__u32 rdb_Flags;__u32 rdb_BadBlockList;__be32 rdb_PartitionList;__u32 rdb_FileSysHeaderList;__u32 rdb_DriveInit;__u32 rdb_Reserved1[6];__u32 rdb_Cylinders;__u32 rdb_Sectors;__u32 rdb_Heads;__u32 rdb_Interleave;__u32 rdb_Park;__u32 rdb_Reserved2[3];__u32 rdb_WritePreComp;__u32 rdb_ReducedWrite;__u32 rdb_StepRate;__u32 rdb_Reserved3[5];__u32 rdb_RDBBlocksLo;__u32 rdb_RDBBlocksHi;__u32 rdb_LoCylinder;__u32 rdb_HiCylinder;__u32 rdb_CylBlocks;__u32 rdb_AutoParkSeconds;__u32 rdb_HighRDSKBlock;__u32 rdb_Reserved4;char rdb_DiskVendor[8];char rdb_DiskProduct[16];char rdb_DiskRevision[4];char rdb_ControllerVendor[8];char rdb_ControllerProduct[16];char rdb_ControllerRevision[4];__u32 rdb_Reserved5[10];};
struct _LbxCloseEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 client;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _ShmCompletion {BYTE type;BYTE bpad0;CARD16 sequenceNumber;CARD32 drawable;CARD16 minorEvent;BYTE majorEvent;BYTE bpad1;CARD32 shmseg;CARD32 offset;CARD32 pad0;CARD32 pad1;CARD32 pad2;};
struct _XkbDeviceInfo {char *name;Atom type;unsigned __int16 device_spec;int has_own_state;unsigned __int16 supported;unsigned __int16 unsupported;unsigned __int16 num_btns;XkbAction *btn_acts;unsigned __int16 sz_leds;unsigned __int16 num_leds;unsigned __int16 dflt_kbd_fb;unsigned __int16 dflt_led_fb;XkbDeviceLedInfoPtr leds;};
struct bp_getfile_res {bp_machine_name_t server_name;bp_address server_address;bp_path_t server_path;};
struct dm_target_spec {__u64 sector_start;__u64 length;__s32 status;__u32 next;char target_type[16];};
struct fc_els_rec_acc {__u8 reca_cmd;__u8 reca_zero[3];__be16 reca_ox_id;__be16 reca_rx_id;__u8 reca_resvd1;__u8 reca_ofid[3];__u8 reca_resvd2;__u8 reca_rfid[3];__be32 reca_fc4value;__be32 reca_e_stat;};
struct fc_gpn_ft_resp {__u8 fp_flags;__u8 fp_fid[3];__be32 fp_resvd;__be64 fp_wwpn;};
struct feature_header {__u32 data_len;__u8 reserved1;__u8 reserved2;__u16 curr_profile;};
struct fuse_entry_out {uint64_t nodeid;uint64_t generation;uint64_t entry_valid;uint64_t attr_valid;uint32_t entry_valid_nsec;uint32_t attr_valid_nsec;struct fuse_attr attr;};
struct gfs2_ea_header {__be32 ea_rec_len;__be32 ea_data_len;__u8 ea_name_len;__u8 ea_type;__u8 ea_flags;__u8 ea_num_ptrs;__u32 __pad;};
struct gfs2_quota_lvb {__be32 qb_magic;__u32 __pad;__be64 qb_limit;__be64 qb_warn;__be64 qb_value;};
struct hdspm_peak_rms {uint32_t input_peaks[64];uint32_t playback_peaks[64];uint32_t output_peaks[64];uint64_t input_rms[64];uint64_t playback_rms[64];uint64_t output_rms[64];uint8_t speed;int status2;};
struct ivtv_dma_frame {enum v4l2_buf_type type;__u32 pixelformat;void *y_source;void *uv_source;struct v4l2_rect src;struct v4l2_rect dst;__u32 src_width;__u32 src_height;};
struct kvm_enable_cap {__u32 cap;__u32 flags;__u64 args[4];__u8 pad[64];};
struct tc_sfq_qopt_v1 {struct tc_sfq_qopt v0;unsigned int depth;unsigned int headdrop;__u32 limit;__u32 qth_min;__u32 qth_max;unsigned __int8 Wlog;unsigned __int8 Plog;unsigned __int8 Scell_log;unsigned __int8 flags;__u32 max_P;struct tc_sfqred_stats stats;};
struct ubi_attach_req {__s32 ubi_num;__s32 mtd_num;__s32 vid_hdr_offset;__s16 max_beb_per1024;__s8 padding[10];};
struct v4l2_modulator {__u32 index;__u8 name[32];__u32 capability;__u32 rangelow;__u32 rangehigh;__u32 txsubchans;__u32 reserved[4];};
struct xt_string_info {__u16 from_offset;__u16 to_offset;char algo[16];char pattern[128];__u8 patlen;union xt_string_info___C39E5CEE57601962F961C038F8A50B86 u;__attribute__((aligned(8))) struct ts_config *config;};
struct ypresp_key_val {ypstat stat;valdat val;keydat key;};
typedef int (*ListFontsFunc)(pointer client, FontPathElementPtr fpe, char *pat, int len, int max, FontNamesPtr names);
struct _LbxCopyPlane {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 bitPlane;CARD8 srcCache;CARD8 cacheEnts;};
struct _LbxNewClient {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 client;};
struct _LbxQueryFont {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 fid;};
struct _XDGACopyArea {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 srcx;CARD16 srcy;CARD16 width;CARD16 height;CARD16 dstx;CARD16 dsty;};
struct __bridge_info {__u64 designated_root;__u64 bridge_id;__u32 root_path_cost;__u32 max_age;__u32 hello_time;__u32 forward_delay;__u32 bridge_max_age;__u32 bridge_hello_time;__u32 bridge_forward_delay;__u8 topology_change;__u8 topology_change_detected;__u8 root_port;__u8 stp_enabled;__u32 ageing_time;__u32 gc_interval;__u32 hello_timer_value;__u32 tcn_timer_value;__u32 topology_change_timer_value;__u32 gc_timer_value;};
struct ebt_vlan_info {__u16 id;__u8 prio;__be16 encap;__u8 bitmask;__u8 invflags;};
struct fuse_attr_out {uint64_t attr_valid;uint32_t attr_valid_nsec;uint32_t dummy;struct fuse_attr attr;};
struct inet_diag_msg {__u8 idiag_family;__u8 idiag_state;__u8 idiag_timer;__u8 idiag_retrans;struct inet_diag_sockid id;__u32 idiag_expires;__u32 idiag_rqueue;__u32 idiag_wqueue;__u32 idiag_uid;__u32 idiag_inode;};
struct inet_diag_req {__u8 idiag_family;__u8 idiag_src_len;__u8 idiag_dst_len;__u8 idiag_ext;struct inet_diag_sockid id;__u32 idiag_states;__u32 idiag_dbs;};
struct mtd_info_user {__u8 type;__u32 flags;__u32 size;__u32 erasesize;__u32 writesize;__u32 oobsize;__u64 padding;};
struct nd_opt_rd_hdr {uint8_t nd_opt_rh_type;uint8_t nd_opt_rh_len;uint16_t nd_opt_rh_reserved1;uint32_t nd_opt_rh_reserved2;};
struct rds_rdma_args {rds_rdma_cookie_t cookie;struct rds_iovec remote_vec;uint64_t local_vec_addr;uint64_t nr_local;uint64_t flags;uint64_t user_token;};
struct __attribute__((packed)) sadb_lifetime {__u16 sadb_lifetime_len;__u16 sadb_lifetime_exttype;__u32 sadb_lifetime_allocations;__u64 sadb_lifetime_bytes;__u64 sadb_lifetime_addtime;__u64 sadb_lifetime_usetime;};
struct __attribute__((packed)) sadb_x_policy {__u16 sadb_x_policy_len;__u16 sadb_x_policy_exttype;__u16 sadb_x_policy_type;__u8 sadb_x_policy_dir;__u8 sadb_x_policy_reserved;__u32 sadb_x_policy_id;__u32 sadb_x_policy_priority;};
struct sctp_getaddrs {sctp_assoc_t assoc_id;__u32 addr_num;__u8 addrs[];};
struct sockaddr_irda {__kernel_sa_family_t sir_family;__u8 sir_lsap_sel;__u32 sir_addr;char sir_name[25];};
struct sockaddr_rose {sa_family_t srose_family;rose_address srose_addr;ax25_address srose_call;int srose_ndigis;ax25_address srose_digi;};
struct unix_diag_req {__u8 sdiag_family;__u8 sdiag_protocol;__u16 pad;__u32 udiag_states;__u32 udiag_ino;__u32 udiag_show;__u32 udiag_cookie[2];};
struct uvc_menu_info {__u32 value;__u8 name[32];};
struct v4l2_audioout {__u32 index;__u8 name[32];__u32 capability;__u32 mode;__u32 reserved[2];};
struct ypbind_setdom {domainname ypsetdom_domain;ypbind_binding ypsetdom_binding;u_int ypsetdom_vers;};
typedef int (*CreateGCType)(Display *, GC, XExtCodes *);
typedef int (*FreeFontType)(Display *, XFontStruct *, XExtCodes *);
struct _LbxFillPoly {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;BYTE shape;CARD8 padBytes;};
struct _XDGASetMode {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 mode;CARD32 pid;};
struct _i2o_isa_bus {__u16 IsaBaseIOPort;__u8 CSN;__u8 reserved;__u32 IsaBaseMemoryAddress;};
struct _i2o_mca_bus {__u16 McaBaseIOPort;__u8 reserved;__u8 McaSlotNumber;__u32 McaBaseMemoryAddress;};
struct _xkbGetNames {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 which;};
struct _xkbSetNames {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 virtualMods;CARD32 which;CARD8 firstType;CARD8 nTypes;CARD8 firstKTLevel;CARD8 nKTLevels;CARD32 indicators;CARD8 groupNames;CARD8 nRadioGroups;CARD8 firstKey;CARD8 nKeys;CARD8 nKeyAliases;CARD8 pad1;CARD16 totalKTLevelNames;};
struct authdes_cred {enum authdes_namekind adc_namekind;struct authdes_fullname adc_fullname;uint32_t adc_nickname;};
struct blk_io_trace {__u32 magic;__u32 sequence;__u64 time;__u64 sector;__u32 bytes;__u32 action;__u32 pid;__u32 device;__u32 cpu;__u16 error;__u16 pdu_len;};
struct dm_name_list {__u64 dev;__u32 next;char name[];};
struct ebt_arp_info {__be16 htype;__be16 ptype;__be16 opcode;__be32 saddr;__be32 smsk;__be32 daddr;__be32 dmsk;unsigned __int8 smaddr[6];unsigned __int8 smmsk[6];unsigned __int8 dmaddr[6];unsigned __int8 dmmsk[6];__u8 bitmask;__u8 invflags;};
struct ebt_stp_info {__u8 type;struct ebt_stp_config_info config;__u16 bitmask;__u16 invflags;};
struct eg_ctrl_info {__u8 DLL_header[256];__u8 DH_length;__be32 cache_id;__be32 tag;__be32 mps_ip;__be32 eg_dst_ip;__u8 in_MPC_data_ATM_addr[20];__u16 holding_time;};
struct igmpv3_query {__u8 type;__u8 code;__be16 csum;__be32 group;unsigned __int8 qrv : 3;unsigned __int8 suppress : 1;unsigned __int8 resv : 4;__u8 qqic;__be16 nsrcs;__be32 srcs[];};
struct sctp_authkey {sctp_assoc_t sca_assoc_id;__u16 sca_keynumber;__u16 sca_keylength;__u8 sca_key[];};
struct sockaddr_alg {__u16 salg_family;__u8 salg_type[14];__u32 salg_feat;__u32 salg_mask;__u8 salg_name[64];};
struct tc_gred_sopt {__u32 DPs;__u32 def_DP;__u8 grio;__u8 flags;__u16 pad1;};
struct td_event_msg {td_event_e event;const td_thrhandle_t *th_p;union td_event_msg___93B01EC8B2A37DE149D5B3F5BB1472F3 msg;};
struct v4l2_cropcap {__u32 type;struct v4l2_rect bounds;struct v4l2_rect defrect;struct v4l2_fract pixelaspect;};
struct v4l2_enc_idx {__u32 entries;__u32 entries_cap;__u32 reserved[4];struct v4l2_enc_idx_entry entry[64];};
struct xfrm_sec_ctx {__u8 ctx_doi;__u8 ctx_alg;__u16 ctx_len;__u32 ctx_sid;char ctx_str[];};
struct xt_sctp_info {__u16 dpts[2];__u16 spts[2];__u32 chunkmap[64];__u32 chunk_match_type;struct xt_sctp_flag_info flag_info[4];int flag_count;__u32 flags;__u32 invflags;};
typedef int (*FlushGCType)(Display *, GC, XExtCodes *);
struct _LbxTagData {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 tag;CARD32 real_length;};
struct _XagDestroy {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;};
struct _XagGetAttr {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;};
struct _XevieStart {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD32 screen;};
struct __fdb_entry {__u8 mac_addr[6];__u8 port_no;__u8 is_local;__u32 ageing_timer_value;__u8 port_hi;__u8 pad0;__u16 unused;};
struct ebt_ip_info {__be32 saddr;__be32 daddr;__be32 smsk;__be32 dmsk;__u8 tos;__u8 protocol;__u8 bitmask;__u8 invflags;__u16 sport[2];__u16 dport[2];};
struct ethtool_cmd {__u32 cmd;__u32 supported;__u32 advertising;__u16 speed;__u8 duplex;__u8 port;__u8 phy_address;__u8 transceiver;__u8 autoneg;__u8 mdio_support;__u32 maxtxpkt;__u32 maxrxpkt;__u16 speed_hi;__u8 eth_tp_mdix;__u8 eth_tp_mdix_ctrl;__u32 lp_advertising;__u32 reserved[2];};
struct fc_els_clir {__be64 clir_wwpn;__be64 clir_wwnn;__u8 clir_port_type;__u8 clir_port_id[3];__be64 clir_conn_wwpn;__be64 clir_conn_wwnn;__be64 clir_fab_name;__be32 clir_phys_port;__be32 clir_trans_id;__u8 clir_resv[3];__u8 clir_ts_fmt;__be64 clir_timestamp;};
struct fuse_dirent {uint64_t ino;uint64_t off;uint32_t namelen;uint32_t type;char name[];};
struct ib_ucm_info {__u32 id;__u32 status;__u64 info;__u64 data;__u8 info_len;__u8 data_len;__u8 reserved[6];};
struct igmpv3_grec {__u8 grec_type;__u8 grec_auxwords;__be16 grec_nsrcs;__be32 grec_mca;__be32 grec_src[];};
struct loop_info64 {__u64 lo_device;__u64 lo_inode;__u64 lo_rdevice;__u64 lo_offset;__u64 lo_sizelimit;__u32 lo_number;__u32 lo_encrypt_type;__u32 lo_encrypt_key_size;__u32 lo_flags;__u8 lo_file_name[64];__u8 lo_crypt_name[64];__u8 lo_encrypt_key[32];__u64 lo_init[2];};
struct minix_inode {__u16 i_mode;__u16 i_uid;__u32 i_size;__u32 i_time;__u8 i_gid;__u8 i_nlinks;__u16 i_zone[9];};
struct opaque_auth {enum_t oa_flavor;caddr_t oa_base;u_int oa_length;};
struct ovs_key_arp {__be32 arp_sip;__be32 arp_tip;__be16 arp_op;__u8 arp_sha[6];__u8 arp_tha[6];};
struct rmtcallargs {u_long prog;u_long vers;u_long proc;u_long arglen;caddr_t args_ptr;xdrproc_t xdr_args;};
struct rta_session {__u8 proto;__u8 pad1;__u16 pad2;union rta_session___D973AC1711B483EC871F326B7831CCB7 u;};
struct __attribute__((packed)) screen_info {__u8 orig_x;__u8 orig_y;__u16 ext_mem_k;__u16 orig_video_page;__u8 orig_video_mode;__u8 orig_video_cols;__u8 flags;__u8 unused2;__u16 orig_video_ega_bx;__u16 unused3;__u8 orig_video_lines;__u8 orig_video_isVGA;__u16 orig_video_points;__u16 lfb_width;__u16 lfb_height;__u16 lfb_depth;__u32 lfb_base;__u32 lfb_size;__u16 cl_magic;__u16 cl_offset;__u16 lfb_linelength;__u8 red_size;__u8 red_pos;__u8 green_size;__u8 green_pos;__u8 blue_size;__u8 blue_pos;__u8 rsvd_size;__u8 rsvd_pos;__u16 vesapm_seg;__u16 vesapm_off;__u16 pages;__u16 vesa_attributes;__u32 capabilities;__u8 _reserved[6];};
struct sock_filter {__u16 code;__u8 jt;__u8 jf;__u32 k;};
struct sockaddr_at {__kernel_sa_family_t sat_family;__u8 sat_port;struct atalk_addr sat_addr;char sat_zero[8];};
struct sockaddr_in {sa_family_t sin_family;in_port_t sin_port;struct in_addr sin_addr;unsigned __int8 sin_zero[8];};
struct v4l2_window {struct v4l2_rect w;__u32 field;__u32 chromakey;struct v4l2_clip *clips;__u32 clipcount;void *bitmap;__u8 global_alpha;};
struct video_event {__s32 type;__kernel_time_t timestamp;union video_event___67F2EB9310C2BF96BF5213AE56F4A830 u;};
struct xt_u32_test {struct xt_u32_location_element location[11];struct xt_u32_value_element value[11];__u8 nnums;__u8 nvalues;};
typedef int (*CopyGCType)(Display *, GC, XExtCodes *);
typedef int (*FreeGCType)(Display *, GC, XExtCodes *);
struct _LbxSwitch {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 client;};
struct _ShmDetach {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 shmseg;};
struct _XagCreate {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;CARD32 attrib_mask;};
struct elf32_phdr {Elf32_Word __p_type;Elf32_Off p_offset;Elf32_Addr p_vaddr;Elf32_Addr p_paddr;Elf32_Word p_filesz;Elf32_Word p_memsz;Elf32_Word p_flags;Elf32_Word p_align;};
struct elf32_rela {Elf32_Addr r_offset;Elf32_Word r_info;Elf32_Sword r_addend;};
struct elf32_shdr {Elf32_Word sh_name;Elf32_Word sh_type;Elf32_Word sh_flags;Elf32_Addr sh_addr;Elf32_Off sh_offset;Elf32_Word sh_size;Elf32_Word sh_link;Elf32_Word sh_info;Elf32_Word sh_addralign;Elf32_Word sh_entsize;};
struct elf64_rela {Elf64_Addr r_offset;Elf64_Xword r_info;Elf64_Sxword r_addend;};
struct exportnode {dirpath ex_dir;groups ex_groups;exports ex_next;};
struct fc_els_pnb {__be32 pnb_phys_pn;__u8 pnb_resv;__u8 pnb_port_id[3];__be64 pnb_wwpn;};
struct fuse_lk_in {uint64_t fh;uint64_t owner;struct fuse_file_lock lk;uint32_t lk_flags;uint32_t padding;};
struct ib_ucm_lap {__u64 path;__u64 data;__u32 id;__u8 len;__u8 reserved[3];};
struct ib_ucm_mra {__u64 data;__u32 id;__u8 len;__u8 timeout;__u8 reserved[2];};
struct ib_ucm_rep {__u64 uid;__u64 data;__u32 id;__u32 qpn;__u32 psn;__u8 len;__u8 responder_resources;__u8 initiator_depth;__u8 target_ack_delay;__u8 failover_accepted;__u8 flow_control;__u8 rnr_retry_count;__u8 srq;__u8 reserved[4];};
struct nd_opt_mtu {uint8_t nd_opt_mtu_type;uint8_t nd_opt_mtu_len;uint16_t nd_opt_mtu_reserved;uint32_t nd_opt_mtu_mtu;};
struct rmtcallres {u_long *port_ptr;u_long resultslen;caddr_t results_ptr;xdrproc_t xdr_results;};
struct __attribute__((packed)) sadb_x_sa2 {__u16 sadb_x_sa2_len;__u16 sadb_x_sa2_exttype;__u8 sadb_x_sa2_mode;__u8 sadb_x_sa2_reserved1;__u16 sadb_x_sa2_reserved2;__u32 sadb_x_sa2_sequence;__u32 sadb_x_sa2_reqid;};
struct setup_data {__u64 next;__u32 type;__u32 len;__u8 data[];};
struct sisfb_info {__u32 sisfb_id;__u32 chip_id;__u32 memory;__u32 heapstart;__u8 fbvidmode;__u8 sisfb_version;__u8 sisfb_revision;__u8 sisfb_patchlevel;__u8 sisfb_caps;__u32 sisfb_tqlen;__u32 sisfb_pcibus;__u32 sisfb_pcislot;__u32 sisfb_pcifunc;__u8 sisfb_lcdpdc;__u8 sisfb_lcda;__u32 sisfb_vbflags;__u32 sisfb_currentvbflags;__u32 sisfb_scalelcd;__u32 sisfb_specialtiming;__u8 sisfb_haveemi;__u8 sisfb_emi30;__u8 sisfb_emi31;__u8 sisfb_emi32;__u8 sisfb_emi33;__u8 sisfb_haveemilcd;__u8 sisfb_lcdpdca;__u16 sisfb_tvxpos;__u16 sisfb_tvypos;__u32 sisfb_heapsize;__u32 sisfb_videooffset;__u32 sisfb_curfstn;__u32 sisfb_curdstn;__u16 sisfb_pci_vendor;__u32 sisfb_vbflags2;__u8 sisfb_can_post;__u8 sisfb_card_posted;__u8 sisfb_was_boot_device;__u8 reserved[183];};
struct tipc_event {__u32 event;__u32 found_lower;__u32 found_upper;struct tipc_portid port;struct tipc_subscr s;};
struct v4l2_audio {__u32 index;__u8 name[32];__u32 capability;__u32 mode;__u32 reserved[2];};
struct vring_desc {__u64 addr;__u32 len;__u16 flags;__u16 next;};
typedef int (*ErrorType)(Display *, xError *, XExtCodes *, int *);
struct _XDGASync {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XagQuery {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 resource;};
struct _XevieEnd {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD32 cmap;};
struct _XkbShape {Atom name;unsigned __int16 num_outlines;unsigned __int16 sz_outlines;XkbOutlinePtr outlines;XkbOutlinePtr approx;XkbOutlinePtr primary;XkbBoundsRec bounds;};
struct _agp_info {struct agp_version version;__u32 bridge_id;__u32 agp_mode;unsigned __int64 aper_base;size_t aper_size;size_t pg_total;size_t pg_system;size_t pg_used;};
struct elf32_sym {Elf32_Word st_name;Elf32_Addr st_value;Elf32_Word st_size;unsigned __int8 st_info;unsigned __int8 st_other;Elf32_Half st_shndx;};
struct fieldnode {unsigned __int16 status;__int16 rows;__int16 cols;__int16 frow;__int16 fcol;int drows;int dcols;int maxgrow;int nrow;__int16 nbuf;__int16 just;__int16 page;__int16 index;int pad;chtype fore;chtype back;Field_Options opts;struct fieldnode *snext;struct fieldnode *sprev;struct fieldnode *link;struct formnode *form;struct typenode *type;void *arg;FIELD_CELL *buf;void *usrptr;};
struct hdspm_ltc {unsigned int ltc;enum hdspm_ltc_format format;enum hdspm_ltc_frame frame;enum hdspm_ltc_input_format input_format;};
struct icmp6_hdr {uint8_t icmp6_type;uint8_t icmp6_code;uint16_t icmp6_cksum;union icmp6_hdr___85A0B7966B981BE593FDADBE0B8685D7 icmp6_dataun;};
union inftl_uci {struct inftl_unithead1 a;struct inftl_unithead2 b;struct inftl_unittail c;};
struct ip6t_opts {__u32 hdrlen;__u8 flags;__u8 invflags;__u16 opts[16];__u8 optsnr;};
struct mountbody {name ml_hostname;dirpath ml_directory;mountlist ml_next;};
struct pps_ktime {__s64 sec;__s32 nsec;__u32 flags;};
struct qnx4_xblk {__le32 xblk_next_xblk;__le32 xblk_prev_xblk;__u8 xblk_num_xtnts;__u8 xblk_spare[3];__le32 xblk_num_blocks;qnx4_xtnt_t xblk_xtnts[60];char xblk_signature[8];qnx4_xtnt_t xblk_first_xtnt;};
struct __attribute__((packed)) sadb_sens {__u16 sadb_sens_len;__u16 sadb_sens_exttype;__u32 sadb_sens_dpd;__u8 sadb_sens_sens_level;__u8 sadb_sens_sens_len;__u8 sadb_sens_integ_level;__u8 sadb_sens_integ_len;__u32 sadb_sens_reserved;};
struct ypreq_key {domainname domain;mapname map;keydat key;};
struct ZFW_CTRL {struct BOARD_CTRL board_ctrl;struct CH_CTRL ch_ctrl[64];struct BUF_CTRL buf_ctrl[64];};
struct __ns_msg {const u_char *_msg;const u_char *_eom;u_int16_t _id;u_int16_t _flags;u_int16_t _counts[4];const u_char *_sections[4];ns_sect _sect;int _rrnum;const u_char *_msg_ptr;};
struct dccp_hdr {__be16 dccph_sport;__be16 dccph_dport;__u8 dccph_doff;unsigned __int8 dccph_cscov : 4;unsigned __int8 dccph_ccval : 4;__sum16 dccph_checksum;unsigned __int8 dccph_x : 1;unsigned __int8 dccph_type : 4;unsigned __int8 dccph_reserved : 3;__u8 dccph_seq2;__be16 dccph_seq;};
struct fb_image {__u32 dx;__u32 dy;__u32 width;__u32 height;__u32 fg_color;__u32 bg_color;__u8 depth;const char *data;struct fb_cmap cmap;};
struct ieee_pfc {__u8 pfc_cap;__u8 pfc_en;__u8 mbc;__u16 delay;__u64 requests[8];__u64 indications[8];};
struct ip6_frag {uint8_t ip6f_nxt;uint8_t ip6f_reserved;uint16_t ip6f_offlg;uint32_t ip6f_ident;};
struct kvm_xcrs {__u32 nr_xcrs;__u32 flags;struct kvm_xcr xcrs[16];__u64 padding[16];};
union nftl_uci {struct nftl_uci0 a;struct nftl_uci1 b;struct nftl_uci2 c;};
struct __attribute__((packed)) sadb_msg {__u8 sadb_msg_version;__u8 sadb_msg_type;__u8 sadb_msg_errno;__u8 sadb_msg_satype;__u16 sadb_msg_len;__u16 sadb_msg_reserved;__u32 sadb_msg_seq;__u32 sadb_msg_pid;};
struct sg_io_v4 {__s32 guard;__u32 protocol;__u32 subprotocol;__u32 request_len;__u64 request;__u64 request_tag;__u32 request_attr;__u32 request_priority;__u32 request_extra;__u32 max_response_len;__u64 response;__u32 dout_iovec_count;__u32 dout_xfer_len;__u32 din_iovec_count;__u32 din_xfer_len;__u64 dout_xferp;__u64 din_xferp;__u32 timeout;__u32 flags;__u64 usr_ptr;__u32 spare_in;__u32 driver_status;__u32 transport_status;__u32 device_status;__u32 retry_delay;__u32 info;__u32 duration;__u32 response_len;__s32 din_resid;__s32 dout_resid;__u64 generated_tag;__u32 spare_out;__u32 padding;};
struct acct_v3 {char ac_flag;char ac_version;u_int16_t ac_tty;u_int32_t ac_exitcode;u_int32_t ac_uid;u_int32_t ac_gid;u_int32_t ac_pid;u_int32_t ac_ppid;u_int32_t ac_btime;float ac_etime;comp_t ac_utime;comp_t ac_stime;comp_t ac_mem;comp_t ac_io;comp_t ac_rw;comp_t ac_minflt;comp_t ac_majflt;comp_t ac_swaps;char ac_comm[16];};
struct icmphdr {u_int8_t type;u_int8_t code;u_int16_t checksum;union icmphdr___44B9F435D952314818895718F3518D16 un;};
struct igmphdr {__u8 type;__u8 code;__sum16 csum;__be32 group;};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_line;cc_t c_cc[32];speed_t c_ispeed;speed_t c_ospeed;};
struct xfrm_id {xfrm_address_t daddr;__be32 spi;__u8 proto;};
struct fiemap {__u64 fm_start;__u64 fm_length;__u32 fm_flags;__u32 fm_mapped_extents;__u32 fm_extent_count;__u32 fm_reserved;struct fiemap_extent fm_extents[];};
struct ipt_ip {struct in_addr src;struct in_addr dst;struct in_addr smsk;struct in_addr dmsk;char iniface[16];char outiface[16];unsigned __int8 iniface_mask[16];unsigned __int8 outiface_mask[16];__u16 proto;__u8 flags;__u8 invflags;};
struct __attribute__((packed)) vbe_ib {char vbe_signature[4];__u16 vbe_version;__u32 oem_string_ptr;__u32 capabilities;__u32 mode_list_ptr;__u16 total_memory;__u16 oem_software_rev;__u32 oem_vendor_name_ptr;__u32 oem_product_name_ptr;__u32 oem_product_rev_ptr;__u8 reserved[222];char oem_data[256];char misc_data[512];};
struct iphdr {unsigned __int32 ihl : 4;unsigned __int32 version : 4;u_int8_t tos;u_int16_t tot_len;u_int16_t id;u_int16_t frag_off;u_int8_t ttl;u_int8_t protocol;u_int16_t check;u_int32_t saddr;u_int32_t daddr;};
struct ndmsg {__u8 ndm_family;__u8 ndm_pad1;__u16 ndm_pad2;__s32 ndm_ifindex;__u16 ndm_state;__u8 ndm_flags;__u8 ndm_type;};
struct ucred {pid_t pid;uid_t uid;gid_t gid;};
struct AUTH {struct opaque_auth ah_cred;struct opaque_auth ah_verf;union des_block ah_key;struct AUTH__auth_ops *ah_ops;caddr_t ah_private;};
struct _XGC {XExtData *ext_data;GContext gid;int rects;int dashes;unsigned __int64 dirty;XGCValues values;};
struct acct {char ac_flag;u_int16_t ac_uid;u_int16_t ac_gid;u_int16_t ac_tty;u_int32_t ac_btime;comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;comp_t ac_mem;comp_t ac_io;comp_t ac_rw;comp_t ac_minflt;comp_t ac_majflt;comp_t ac_swaps;u_int32_t ac_exitcode;char ac_comm[17];char ac_pad[10];};
struct igmp {u_int8_t igmp_type;u_int8_t igmp_code;u_int16_t igmp_cksum;struct in_addr igmp_group;};
struct XDR {enum xdr_op x_op;struct XDR__xdr_ops *x_ops;caddr_t x_public;caddr_t x_private;caddr_t x_base;u_int x_handy;};
struct ip {unsigned __int32 ip_hl : 4;unsigned __int32 ip_v : 4;u_int8_t ip_tos;u_short ip_len;u_short ip_id;u_short ip_off;u_int8_t ip_ttl;u_int8_t ip_p;u_short ip_sum;struct in_addr ip_src;struct in_addr ip_dst;};
struct __attribute__((packed)) edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5355185EB8EFB70EF804337A514801F4 {__u8 device;__u8 reserved1;__u16 reserved2;__u32 reserved3;__u64 reserved4;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___B652DCB1C62512FA77E4252B8A422175 {CARD32 pad00;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BYTE mode;BYTE flags;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___C927E5D571B5CC43049437141E992D5C {CARD32 pad00;CARD32 event;CARD32 window;CARD32 parent;INT16 x;INT16 y;BOOL override;BYTE pad1;BYTE pad2;BYTE pad3;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___7EAD3D9EE1A56EB81EC14AA86DEFD2DA {__u8 direction;__u8 size;__u16 port;__u32 count;__u64 data_offset;};
struct ____1C1E9EA25555F3A04518B10EE9DF4602___FA18AEC49CDA3F922B926DB83731E944 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 time;CARD32 port;CARD32 attribute;INT32 value;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct xcb_composite_create_region_from_border_clip_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_window_t window;};
union rds_atomic_args___F92BFCF0AE7692DF19980549DF229223 {struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___E133F9469844536D4848E7460598F6BA cswp;struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___A59A4479E68D84CE19315FC94EF5BECC fadd;struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___92D3420542E1CF2B3B5BFC49E99E7277 m_cswp;struct rds_atomic_args___F92BFCF0AE7692DF19980549DF229223___245BDAF14406869F855F2314AA540EA2 m_fadd;};
struct xcb_xkb_get_kbd_by_name_replies_t___client_symbols {uint8_t clientDeviceID;uint8_t pad0[2];xcb_keycode_t clientMinKeyCode;xcb_keycode_t clientMaxKeyCode;uint16_t present;uint8_t firstType;uint8_t nTypes;uint8_t totalTypes;xcb_keycode_t firstKeySym;uint16_t totalSyms;uint8_t nKeySyms;xcb_keycode_t firstKeyAction;uint16_t totalActions;uint8_t nKeyActions;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehaviors;uint8_t totalKeyBehaviors;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;uint8_t totalKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;uint8_t totalModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint8_t totalVModMapKeys;uint8_t pad1;uint16_t virtualMods;xcb_xkb_get_kbd_by_name_replies_client_symbols_map_t map;};
struct xcb_xkb_get_kbd_by_name_replies_t___server_symbols {uint8_t serverDeviceID;uint8_t pad0[2];xcb_keycode_t serverMinKeyCode;xcb_keycode_t serverMaxKeyCode;uint16_t present;uint8_t firstType;uint8_t nTypes;uint8_t totalTypes;xcb_keycode_t firstKeySym;uint16_t totalSyms;uint8_t nKeySyms;xcb_keycode_t firstKeyAction;uint16_t totalActions;uint8_t nKeyActions;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehaviors;uint8_t totalKeyBehaviors;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;uint8_t totalKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;uint8_t totalModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint8_t totalVModMapKeys;uint8_t pad1;uint16_t virtualMods;xcb_xkb_get_kbd_by_name_replies_server_symbols_map_t map;};
union hdlcdrv_ioctl___3EABF1CC9C5D017A39C9F4CBC11E5536 {struct hdlcdrv_params mp;struct hdlcdrv_channel_params cp;struct hdlcdrv_channel_state cs;struct hdlcdrv_old_channel_state ocs;unsigned int calibrate;unsigned __int8 bits;char modename[128];char drivername[32];};
struct ubi_rnvol_req___F09893DCAECAFD0B6ABDD7E485962E11 {__s32 vol_id;__s16 name_len;__s8 padding2[2];char name[128];};
struct xcb_render_set_picture_clip_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;int16_t clip_x_origin;int16_t clip_y_origin;};
struct xcb_selinux_get_property_data_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_atom_t property;};
struct xcb_x_print_print_get_screen_of_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t root;};
struct xcb_xfixes_create_region_from_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_render_picture_t picture;};
struct xcb_randr_get_screen_resources_current_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;uint16_t num_crtcs;uint16_t num_outputs;uint16_t num_modes;uint16_t names_len;uint8_t pad1[8];};
struct xcb_x_print_print_get_one_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t nameLen;uint8_t pool;uint8_t pad0[3];};
struct xcb_xfixes_create_region_from_bitmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_pixmap_t bitmap;};
union v4l2_event___8B28A54845FF2EA0761A5ED508965B6E {struct v4l2_event_vsync vsync;struct v4l2_event_ctrl ctrl;struct v4l2_event_frame_sync frame_sync;__u8 data[64];};
struct xcb_glx_get_color_table_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_color_table_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_convolution_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_convolution_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_randr_configure_output_property_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_atom_t property;uint8_t pending;uint8_t range;uint8_t pad0[2];};
struct xcb_x_print_print_get_document_data_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t max_bytes;};
struct xcb_x_print_print_put_document_data_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t len_data;uint16_t len_fmt;uint16_t len_options;};
struct xcb_glx_change_drawable_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_drawable_t drawable;uint32_t num_attribs;};
struct xcb_glx_get_compressed_tex_image_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t size;uint8_t pad2[12];};
struct xcb_glx_get_color_table_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_color_table_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_convolution_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_convolution_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_histogram_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_histogram_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_vendor_private_with_reply_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t vendor_code;xcb_glx_context_tag_t context_tag;};
struct xcb_composite_name_window_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_pixmap_t pixmap;};
struct xcb_dri2_get_buffers_with_format_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t count;};
struct xcb_randr_delete_output_property_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_atom_t property;};
struct xcb_selinux_get_property_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_atom_t property;};
struct xcb_x_print_print_set_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t stringLen;uint8_t pool;uint8_t rule;uint8_t pad0[2];};
struct xcb_xfixes_create_region_from_gc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_gcontext_t gc;};
struct xcb_glx_get_histogram_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_histogram_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_query_objectuiv_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t id;uint32_t pname;};
struct xcb_glx_get_tex_level_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_level_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_randr_query_output_property_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_atom_t property;};
struct xcb_change_active_pointer_grab_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cursor;xcb_timestamp_t time;uint16_t event_mask;uint8_t pad1[2];};
struct xcb_composite_get_overlay_window_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t overlay_win;uint8_t pad1[20];};
struct xcb_glx_get_convolution_filter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_glx_get_minmax_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_minmax_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_query_objectiv_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t id;uint32_t pname;};
struct xcb_x_print_print_get_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t stringLen;uint8_t pad1[20];xcb_x_print_string8_t attributes;};
struct xcb_x_print_print_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t event_mask;};
struct xcb_xfixes_select_cursor_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint32_t event_mask;};
struct xcb_xvmc_list_subpicture_types_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port_id;xcb_xvmc_surface_t surface_id;};
struct xcb_glx_are_textures_resident_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_input_device_mapping_notify_event_t {uint8_t response_type;uint8_t device_id;uint16_t sequence;uint8_t request;xcb_input_key_code_t first_keycode;uint8_t count;uint8_t pad0;xcb_timestamp_t time;uint8_t pad1[20];};
struct xcb_record_unregister_clients_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;uint32_t num_client_specs;};
struct xcb_xkb_extension_device_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t pad0;uint16_t reason;uint16_t ledClass;uint8_t ledID;uint32_t ledsDefined;uint32_t ledState;uint8_t firstButton;uint8_t nButtons;uint16_t supported;uint16_t unsupported;uint8_t pad1[2];};
struct xcb_xv_query_image_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;uint32_t id;uint16_t width;uint16_t height;};
struct xcb_change_window_attributes_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;uint32_t value_mask;};
struct xcb_glx_get_convolution_filter_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;int32_t height;uint8_t pad2[8];};
struct xcb_glx_get_minmax_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_minmax_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_query_objectiv_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_separable_filter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_randr_delete_output_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_randr_mode_t mode;};
struct xcb_randr_get_screen_resources_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;uint16_t num_crtcs;uint16_t num_outputs;uint16_t num_modes;uint16_t names_len;uint8_t pad1[8];};
struct xcb_randr_screen_change_notify_event_t {uint8_t response_type;uint8_t rotation;uint16_t sequence;xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;xcb_window_t root;xcb_window_t request_window;uint16_t sizeID;uint16_t subpixel_order;uint16_t width;uint16_t height;uint16_t mwidth;uint16_t mheight;};
struct xcb_randr_set_output_primary_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_randr_output_t output;};
struct xcb_render_create_solid_fill_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_color_t color;};
struct xcb_screensaver_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t event_mask;};
struct xcb_xinerama_get_screen_size_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint32_t screen;};
struct xcb_xkb_indicator_state_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t pad0[3];uint32_t state;uint32_t stateChanged;uint8_t pad1[12];};
struct xcb_dri2_buffer_swap_complete_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint16_t event_type;uint8_t pad1[2];xcb_drawable_t drawable;uint32_t ust_hi;uint32_t ust_lo;uint32_t msc_hi;uint32_t msc_lo;uint32_t sbc;};
struct xcb_glx_are_textures_resident_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;uint8_t pad1[20];};
struct xcb_glx_get_tex_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_tex_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_input_device_state_notify_event_t {uint8_t response_type;uint8_t device_id;uint16_t sequence;xcb_timestamp_t time;uint8_t num_keys;uint8_t num_buttons;uint8_t num_valuators;uint8_t classes_reported;uint8_t buttons[4];uint8_t keys[4];uint32_t valuators[3];};
struct xcb_randr_get_output_property_reply_t {uint8_t response_type;uint8_t format;uint16_t sequence;uint32_t length;xcb_atom_t type;uint32_t bytes_after;uint32_t num_items;uint8_t pad0[12];};
struct xcb_randr_set_screen_config_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;uint16_t sizeID;uint16_t rotation;uint16_t rate;uint8_t pad0[2];};
struct xcb_render_create_glyph_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t gsid;xcb_render_pictformat_t format;};
struct xcb_xf86dri_get_drawable_info_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t drawable_table_index;uint32_t drawable_table_stamp;int16_t drawable_origin_X;int16_t drawable_origin_Y;int16_t drawable_size_W;int16_t drawable_size_H;uint32_t num_clip_rects;int16_t back_x;int16_t back_y;uint32_t num_back_clip_rects;};
struct xcb_xfixes_translate_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;int16_t dx;int16_t dy;};
struct xcb_xinerama_get_screen_count_reply_t {uint8_t response_type;uint8_t screen_count;uint16_t sequence;uint32_t length;xcb_window_t window;};
struct xcb_glx_delete_queries_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_get_separable_filter_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t row_w;int32_t col_h;uint8_t pad2[8];};
struct xcb_glx_make_context_current_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_context_tag_t context_tag;uint8_t pad1[20];};
struct xcb_input_set_device_focus_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t focus;xcb_timestamp_t time;uint8_t revert_to;uint8_t device_id;};
struct xcb_randr_get_output_primary_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_randr_output_t output;};
struct xcb_render_fill_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t dst;xcb_render_color_t color;};
struct xcb_xinerama_get_screen_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t width;uint32_t height;xcb_window_t window;uint32_t screen;};
struct xcb_xkb_indicator_map_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t pad0[3];uint32_t state;uint32_t mapChanged;uint8_t pad1[12];};
struct xcb_glx_get_tex_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_randr_add_output_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_randr_mode_t mode;};
struct xcb_randr_get_output_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_timestamp_t config_timestamp;};
struct xcb_randr_set_screen_size_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint16_t width;uint16_t height;uint32_t mm_width;uint32_t mm_height;};
struct xcb_render_change_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;uint32_t value_mask;};
struct xcb_translate_coordinates_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t src_window;xcb_window_t dst_window;int16_t src_x;int16_t src_y;};
struct xcb_xfixes_get_cursor_image_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t xhot;uint16_t yhot;uint32_t cursor_serial;uint8_t pad1[8];};
struct xcb_xkb_get_indicator_map_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];uint32_t which;};
struct xcb_xkb_get_named_indicator_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;xcb_atom_t indicator;uint8_t found;uint8_t on;uint8_t realIndicator;uint8_t ndx;uint8_t map_flags;uint8_t map_whichGroups;uint8_t map_groups;uint8_t map_whichMods;uint8_t map_mods;uint8_t map_realMods;uint16_t map_vmod;uint32_t map_ctrls;uint8_t pad0[3];};
struct xcb_xkb_new_keyboard_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t oldDeviceID;xcb_keycode_t minKeyCode;xcb_keycode_t maxKeyCode;xcb_keycode_t oldMinKeyCode;xcb_keycode_t oldMaxKeyCode;uint8_t requestMajor;uint8_t requestMinor;uint16_t changed;uint8_t pad0[14];};
struct xcb_xkb_set_indicator_map_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];uint32_t which;};
struct xcb_xv_get_port_attribute_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_atom_t attribute;};
struct _XIMStringConversionCallbackStruct {XIMStringConversionPosition position;XIMCaretDirection direction;XIMStringConversionOperation operation;unsigned __int16 factor;XIMStringConversionText *text;};
struct xcb_glx_get_pixel_mapuiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t map;};
struct xcb_glx_get_pixel_mapusv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t map;};
struct xcb_input_integer_feedback_state_t {uint8_t class_id;uint8_t id;uint16_t len;uint32_t resolution;int32_t min_value;int32_t max_value;};
struct xcb_render_create_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cid;xcb_render_picture_t source;uint16_t x;uint16_t y;};
struct xcb_screensaver_query_info_reply_t {uint8_t response_type;uint8_t state;uint16_t sequence;uint32_t length;xcb_window_t saver_window;uint32_t ms_until_server;uint32_t ms_since_user_input;uint32_t event_mask;uint8_t kind;uint8_t pad0[7];};
struct xcb_shape_get_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_shape_kind_t source_kind;uint8_t pad0[3];};
struct xcb_xfixes_get_cursor_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_atom_t atom;uint16_t nbytes;uint8_t pad1[18];};
struct xcb_xfixes_invert_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_rectangle_t bounds;xcb_xfixes_region_t destination;};
struct xcb_xkb_per_client_flags_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];uint32_t change;uint32_t value;uint32_t ctrlsToChange;uint32_t autoCtrls;uint32_t autoCtrlsValues;};
struct _019B8CCB864AFF4771EC3D9E3020C8B5 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;BYTE mode;BYTE target;BYTE map;BYTE pad1;CARD32 window;};
struct _0340F183E3D57BA98D278D6E8F4BBAEC {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD32 drawable;CARD32 mask;};
struct _0394AD1A4355901AA0166B57E4564BFE {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 timestamp;CARD32 crtc;CARD32 mmWidth;CARD32 mmHeight;CARD8 connection;CARD8 subpixelOrder;CARD16 nCrtcs;CARD16 nModes;CARD16 nPreferred;CARD16 nClones;CARD16 nameLength;};
struct _04E4DAE4A3CDECE9860BD3B57B108BDE {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _0566ABB5D656E83D377732EE088CAE2E {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 physicalId;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _06385DA08CE18FAF207AB6F3372C4AC2 {CARD8 type;CARD8 level;CARD16 sequenceNumber;CARD32 drawable;CARD32 damage;CARD32 timestamp;xRectangle area;xRectangle geometry;};
struct _0702AFAE85E523028461380896C86760 {BYTE type;CARD8 numKeyPerModifier;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _089D19AFE35A3BB9549C0E2B9D96DA0E {BYTE type;CARD8 ununsed;CARD16 sequenceNumber;CARD32 length;CARD32 majorVersion;CARD32 minorVersion;CARD32 patchVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;};
struct _091A8121C3C792D8858188DBB434C01C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD32 planeMask;};
struct _096B79C2878CB1494F01039365F649CF {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 crtc;xRenderTransform transform;CARD16 nbytesFilter;CARD16 pad;};
struct _097BEF8EA5AD56087B71A05CBB409B26 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;xRRModeInfo modeInfo;};
struct _0BFF5F3619172B7B9D3CD50426ED3418 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad2;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct _0C5B3DDBD9AAB3637C3C3A1D41E42158 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;INT32 value;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _0CBB5A6AED43B7843759DE8BFE16890A {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 errorScreen;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _0D0114D795552F54A79F202DB3226B55 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD32 mask;};
struct _0D1FFF2FD08E009A212466AD439E256D {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 destination;};
struct _0DACB856E79E56F4174777CC52DD3C58 {CARD8 type;CARD8 subCode;CARD16 sequenceNumber;CARD32 timestamp;CARD32 window;CARD32 crtc;CARD32 mode;CARD16 rotation;CARD16 pad1;INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct _0DEEDF24E65D3751BB6E7763FD103A13 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 src;CARD32 mask;CARD32 dst;INT16 xSrc;INT16 ySrc;INT16 xMask;INT16 yMask;INT16 xDst;INT16 yDst;CARD16 width;CARD16 height;};
struct _0E6A401F8BD845D438E717B135D77D29 {BYTE type;CARD8 format;CARD16 sequenceNumber;CARD32 length;CARD32 propertyType;CARD32 bytesAfter;CARD32 nItems;CARD32 tag;CARD32 pad1;CARD32 pad2;};
struct _0FED49E1AEFB77840C2E86EAD6756677 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 nAtoms;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _1296C23E7EDA709A08D87BF116515624 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD16 dashOffset;CARD16 nDashes;};
struct _1309DA1401AD871232334AF15910FB3C {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;CARD32 shmseg;CARD32 id;CARD32 offset;INT16 src_x;INT16 src_y;CARD16 src_w;CARD16 src_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;CARD16 width;CARD16 height;CARD8 send_event;CARD8 pad1;CARD16 pad2;};
struct _1463B1446DFC3BE3591F88FAF0B4315C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cursor;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;};
struct _160641F2D897670075418D2E6B733231 {unsigned __int8 e_ident[16];Elf32_Half e_type;Elf32_Half e_machine;Elf32_Word e_version;Elf32_Addr e_entry;Elf32_Off e_phoff;Elf32_Off e_shoff;Elf32_Word e_flags;Elf32_Half e_ehsize;Elf32_Half e_phentsize;Elf32_Half e_phnum;Elf32_Half e_shentsize;Elf32_Half e_shnum;Elf32_Half e_shstrndx;};
struct _16B1457F639623288195B3438C14DD7C {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;BOOL set;uint8_t pad0;uint16_t deviceid;uint32_t pad1;uint32_t pad2;uint32_t pad3;uint32_t pad4;uint32_t pad5;};
struct _19958847318214F780EFE5EAB3B1A0C9 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 num_classes;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _1A68CE477B37BE31DCB043B6F4664E49 {CARD8 reqType;BYTE num_auths;CARD16 length;CARD32 acid;};
struct _1B5F367B5963C48BD3F34F9922AB12D3 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 src;CARD32 dst;CARD32 maskFormat;CARD32 glyphset;INT16 xSrc;INT16 ySrc;};
struct _1BDC7C7F49C92F644328BBE26F29D5DE {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD8 unused0;CARD8 unused1;CARD8 unused2;CARD8 depth;CARD32 wid;CARD32 parent;CARD32 left;CARD32 right;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 c_class;CARD32 visual;CARD32 mask;};
struct _1D1C51FD6E0EDC1C8CC0D22E01FA7C4E {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 x;CARD32 y;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _1E42E411FAE309B90570872BD6DA89F0 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 width;CARD32 height;CARD32 window;CARD32 screen;CARD32 pad2;CARD32 pad3;};
struct _1E68C84E6BE3B673D767CBEC47B3DECA {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 visual;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _2178B426BC8C8AE0F5D29E93EB059F03 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 maxNames;CARD16 nbytes;CARD16 pad2;};
struct _2427DE1D26AE87CC436F1C07EF51166C {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 displayedBuffer;CARD8 updateAction;CARD8 updateHint;CARD8 windowMode;CARD8 unused0;CARD16 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;};
struct _242BB1C523CD001B2A53A1A084DAE0C6 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 src;CARD32 dst;CARD32 maskFormat;INT16 xSrc;INT16 ySrc;};
struct _246DDDA2B420E716CCF540DCDA3D282B {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _2736801EDAA297EDD6CADD7FD51E7640 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 property;CARD32 type;CARD32 longOffset;CARD32 longLength;BOOL delete;BOOL pending;CARD16 pad1;};
struct _297345D7B065E1B097A8423BD8077946 {BYTE type;CARD8 pad;CARD16 sequenceNumber;CARD32 length;CARD16 minWidth;CARD16 minHeight;CARD16 maxWidth;CARD16 maxHeight;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _2A2BB2E6A1A637B547E2DF81ADC3376A {BYTE type;BYTE errorCode;CARD16 sequenceNumber;CARD32 resourceID;CARD16 minorCode;CARD8 majorCode;BYTE pad1;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _2D59FDEE4261500A2FE9AC0FF5270F5C {CARD8 type;CARD8 category;CARD16 sequenceNumber;CARD32 length;CARD8 elementHeader;BOOL clientSwapped;CARD16 pad1;CARD32 idBase;CARD32 serverTime;CARD32 recordedSequenceNumber;CARD32 pad3;CARD32 pad4;};
struct _2D6D05448839E8D39EF22D0A7A7B9E49 {BYTE type;CARD8 present;CARD16 sequenceNumber;CARD32 length;CARD16 major_version;CARD16 minor_version;CARD8 major_opcode;CARD8 first_event;CARD8 num_events;CARD8 first_error;CARD8 num_errors;CARD8 pad1;CARD16 pad2;};
struct _2DE9659B7EEC2253521CC6BF2372B999 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 state;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _31DC1A9A30C8BE83503485AFF4563DAB {unsigned __int8 e_ident[16];Elf64_Half e_type;Elf64_Half e_machine;Elf64_Word e_version;Elf64_Addr e_entry;Elf64_Off e_phoff;Elf64_Off e_shoff;Elf64_Word e_flags;Elf64_Half e_ehsize;Elf64_Half e_phentsize;Elf64_Half e_phnum;Elf64_Half e_shentsize;Elf64_Half e_shnum;Elf64_Half e_shstrndx;};
struct _3208E1BA8126707DC1A488F29A0DED72 {CARD8 type;BOOL enabled;CARD16 sequenceNumber;CARD32 length;CARD8 elementHeader;CARD8 pad;CARD16 pad0;CARD32 nClients;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _322E4D740D2A723112F8227414848916 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _33AF8112BACFF99F66629433CE03587D {CARD32 flags;CARD8 char_range_min_char_high;CARD8 char_range_min_char_low;CARD8 char_range_max_char_high;CARD8 char_range_max_char_low;CARD8 draw_direction;CARD8 pad;CARD8 default_char_high;CARD8 default_char_low;INT16 min_bounds_left;INT16 min_bounds_right;INT16 min_bounds_width;INT16 min_bounds_ascent;INT16 min_bounds_descent;CARD16 min_bounds_attributes;INT16 max_bounds_left;INT16 max_bounds_right;INT16 max_bounds_width;INT16 max_bounds_ascent;INT16 max_bounds_descent;CARD16 max_bounds_attributes;INT16 font_ascent;INT16 font_descent;};
struct _3578C73785DC808474EBF8D1E351F2D3 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 src;CARD32 dst;CARD32 colorScale;CARD32 alphaScale;INT16 xSrc;INT16 ySrc;INT16 xDst;INT16 yDst;CARD16 width;CARD16 height;};
struct _366B0E14DFFB947D75CD3E464CBAF37C {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 newTimestamp;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _38AB55CADF3218184FF2A828A7079C62 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 nEvents;CARD8 axes;CARD8 mode;BYTE pad1;BYTE pad2;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _3C4960FCBBDB3233211578F053843777 {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;CARD8 format;CARD8 pad1;CARD16 pad2;};
struct _3C68DE36615A2A96935F4E8A62136411 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 selection;CARD32 time;};
struct _3D278926CADFDD0A67AC279ACD531B59 {BYTE type;CARD8 keyspermod;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _3DA4CDB67EF3124D6BB6A4128B3FCD7C {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 xhot;CARD16 yhot;CARD32 cursorSerial;CARD32 pad2;CARD32 pad3;};
struct _3DAB27C0C642F6AD6A1592659EA9CCF3 {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 newTimestamp;CARD32 newConfigTimestamp;CARD32 root;CARD16 subpixelOrder;CARD16 pad4;CARD32 pad5;CARD32 pad6;};
struct _3F2E090B53825C071BE42E5C77B221DD {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _3FC3C3386C6C3548296DFC9EB081B6FE {BYTE type;CARD8 ordering;CARD16 sequenceNumber;CARD32 length;CARD32 nrects;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _4098D4947D8DDC1E7B8C97E1A94B6364 {BYTE type;CARD8 pad;CARD16 sequenceNumber;CARD32 length;CARD32 output;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _41C7698D6770F38A993CF1591C6D9C21 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 m;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _431497C136870E9873948068EF0F03D8 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 fid;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _44C6D9B4A8493A71FE6AEB2BA1147362 {BYTE type;CARD8 extension;CARD16 sequenceNumber;CARD32 length;CARD16 evtype;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _47789CAF959FABE2F5D937697F56BE05 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;CARD32 property;CARD32 type;CARD32 longOffset;CARD32 longLength;BOOL delete;BOOL pending;CARD16 pad1;};
struct _4856EFEBDD7E53CA21A9CBFC75FEF206 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _4C0A166D0FCB5B830093FB9F7D7DFC34 {CARD8 reqType;CARD8 pad;CARD16 length;CARD32 drawable;CARD32 gc;INT16 x;INT16 y;};
struct _4CEF0DA0B6BB912CC29F60746948E744 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 pad;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _4DBA840A262C58E6AC422C7E2FFFF3EA {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;INT16 dx;INT16 dy;};
struct _4DCAC2088B3F168EF4BFBCEA383ECFD2 {CARD8 reqType;CARD8 format;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;};
struct _4E2DFB9F6290197309D31FB10928FA58 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _5017C5E321C1F8BFCB8C657324B6EA8C {BYTE type;BOOL pad;CARD16 sequenceNumber;CARD32 length;CARD16 size;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _5077D3CC3DD590AF02C9E55403D17F9F {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Atom message_type;int format;union _5077D3CC3DD590AF02C9E55403D17F9F___7DEDE306671FD382A7675926A9A7F037 data;};
struct _53D806E392066563D2EB8AD5676DF4C5 {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD16 size;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _548F59098DBA4939E643BBEF2AD26EEA {int type;unsigned __int64 serial;int send_event;Display *display;Window owner;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct _5588D47BF677798F0DBD9E168C93317B {BYTE type;CARD8 compression;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _56236F995320E9550D01648098F1E75E {CARD8 reqType;CARD8 mode;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 format;BYTE pad[3];CARD32 nUnits;};
struct _5C2B60FA26E73A1BF39A96E97412C65C {CARD8 reqType;BOOL contiguous;CARD16 length;CARD32 cmap;CARD16 colors;CARD16 planes;};
struct _5C360CD6F7BDFED17568144DDDEE5A5E {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 width_actual;CARD16 height_actual;CARD16 num_palette_entries;CARD16 entry_bytes;CARD8 component_order[4];CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _5C7A236BA0562DB05D77CA85FA8CD202 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 replies_hint;CARD32 num_chars;CARD32 nbytes;};
struct _5C8033F90A64FC4676BFB935617D1B44 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 configlen;CARD16 modulelen;CARD16 loglen;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _5CD4A96D42C01A4BC625F6F1B381D291 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 picture;CARD32 region;INT16 xOrigin;INT16 yOrigin;};
struct _5CFC2639D93A82964D22ABF82B05BF7F {BYTE type;CARD8 majorVersion;CARD16 sequenceNumber;CARD32 length;CARD16 minorVersion;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _5E5FECD46FC629FFA3831CFFFA8A0613 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 width;CARD32 height;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _5E8F645B7662834A694E868B27EBBB24 {BYTE type;CARD8 nExtensions;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _5F0218706A29D3B501048FD21A470406 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 inputCount;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _5FD5198515091F6F9684846B8D2DAFFB {BYTE type;CARD8 flags;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _61B607A2274ED5109A268B0B2173104D {Elf64_Word p_type;Elf64_Word p_flags;Elf64_Off p_offset;Elf64_Addr p_vaddr;Elf64_Addr p_paddr;Elf64_Xword p_filesz;Elf64_Xword p_memsz;Elf64_Xword p_align;};
struct _621D16500987A711CC39A0AD4484DBF8 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 timeout;CARD16 interval;BOOL preferBlanking;BOOL allowExposures;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _624041EF38A3D722ECC431A5F82DF930 {BYTE type;CARD8 auth_index;CARD16 sequenceNumber;CARD32 length;CARD16 status;CARD16 pad;};
struct _62E4225A05F3FA192F1EADC1962F3FA7 {BYTE type;BYTE unused;CARD16 sequenceNumber;CARD32 buffer;BYTE state;CARD8 unused1;CARD16 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;CARD32 unused6;CARD32 unused7;};
struct _649615F18ACD2676C0117F64906D4BB8 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 crtc;CARD32 timestamp;CARD16 left;CARD16 top;CARD16 width;CARD16 height;CARD16 track_left;CARD16 track_top;CARD16 track_width;CARD16 track_height;INT16 border_left;INT16 border_top;INT16 border_right;INT16 border_bottom;};
struct _64A10EE371E893EA59638110B65879C5 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 number;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _65CC1628E84FE837888FBDC426B5411E {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 flags;CARD32 clocks;CARD32 maxclocks;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _67EB8B73AFD8C3C32B210944A0EE6A33 {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 lbxLength;CARD32 xLength;CARD32 visual;CARD8 compressionMethod;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _68EFEC536F03412D58850C40CDE6BAE5 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xRenderColor color;};
struct _69E09FDE2534802BF7D73EA82BFCF169 {BYTE type;BOOL is_param_recognized;CARD16 sequenceNumber;CARD32 length;CARD32 value_hi;CARD32 value_lo;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _6B16D0CDF8A6D24951AF7FC52FCEB99B {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 vpage;CARD32 pad;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _6B48FEBDDFB0C4A6A52F69D91E3552AD {BYTE type;CARD8 pad;CARD16 sequenceNumber;CARD32 length;CARD32 timestamp;CARD32 configTimestamp;CARD16 nCrtcs;CARD16 nOutputs;CARD16 nModes;CARD16 nbytesNames;CARD32 pad1;CARD32 pad2;};
struct _6C157D281FCCF3AD18E5920BAFADC6E6 {Elf64_Word sh_name;Elf64_Word sh_type;Elf64_Xword sh_flags;Elf64_Addr sh_addr;Elf64_Off sh_offset;Elf64_Xword sh_size;Elf64_Word sh_link;Elf64_Word sh_info;Elf64_Xword sh_addralign;Elf64_Xword sh_entsize;};
struct _6C531080E0330861B126A2833D727845 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cid;CARD32 source;CARD32 mask;CARD16 sourceChar;CARD16 maskChar;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;};
struct _6E58DE7E5977316D543695706C282257 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;BOOL onoff;CARD8 pad1;CARD16 pad2;};
struct _6FB552EA524F38554FA8528F506D34FD {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cid;CARD32 source;CARD32 mask;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;CARD16 x;CARD16 y;};
struct _70E4CC7E54BA43D6E5622AB555079691 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad2;};
struct _7223AFE63A8123EF6F49E197890FAA10 {CARD8 reqType;BOOL range;CARD16 length;CARD32 fid;CARD32 num_ranges;};
struct _7286F01C0F25CC9697D9D7CFCD5C4B3B {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 standby;CARD16 suspend;CARD16 off;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _728753621D8EDC45EC3551358A89F0F0 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 provider;CARD32 property;BOOL pending;BOOL range;CARD16 pad;};
struct _73354D6822628524A3CBE7BEEEBEA7FE {BYTE type;BYTE pad0;CARD16 sequenceNumber;CARD32 length;BOOL pending;BOOL range;BOOL immutable;BYTE pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7374270A99571F2A61066392503F95BA {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;INT16 xOrigin;INT16 yOrigin;};
struct _748E6396DB81A71CC67026C5868B0A61 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 status;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _749257863A78ACF83BA10F9F553F4560 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 request;CARD8 firstKeyCode;CARD8 count;BYTE pad1;CARD32 time;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _75FC8135A7E79B969971564222AED43C {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;CARD32 id;INT16 src_x;INT16 src_y;CARD16 src_w;CARD16 src_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;CARD16 width;CARD16 height;};
struct _769EDCF54321544EF8E3F46B10230032 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 output;CARD32 property;BOOL pending;BOOL range;CARD16 pad;};
struct _76C432023C30A60D6F0CA03B71EF1A2A {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 focus;CARD32 time;CARD8 revertTo;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;};
struct _77B5DA89F8222E8D6D7C1ABF47542A30 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 drawable;CARD32 gc;};
struct _78B46019F679C5E70AAD7C2ED28277AC {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 mask;CARD8 deviceid;CARD8 feedbackid;BYTE pad1;BYTE pad2;};
struct _7905F1106D6192C786F48B3D63EB8F32 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;};
struct _7A75335468D0F989B2CF91A04174818E {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 dst;xRenderColor color;};
struct _7B1AACD52ED53B3363F77B2C48FE4393 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;CARD16 count;CARD8 mode;BYTE pad;};
struct _7CA3BFA0E2ACF16B623A64955922766D {CARD8 reqType;BYTE alloc;CARD16 length;CARD32 mid;CARD32 window;CARD32 visual;};
struct _7D044E98E295B1AE6D053F4E096E3E34 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _7F1527F4980126EB9203A44DB3E05AC8 {u_char vers;u_char type;u_char answer;u_char pad;u_int32_t id_num;struct osockaddr addr;struct osockaddr ctl_addr;int32_t pid;char l_name[12];char r_name[12];char r_tty[16];};
struct _80262239D5DEFAC7F5C75EBAC6CCD93C {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 num_classes;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _82CA72D52CE6587547984538D976BD84 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 mousetype;CARD32 baudrate;CARD32 samplerate;CARD32 resolution;CARD32 buttons;BOOL emulate3buttons;BOOL chordmiddle;CARD16 pad2;CARD32 emulate3timeout;CARD32 flags;CARD32 devnamelen;};
struct _82D86B5B3C9D9E6A7BE98808A956EE82 {CARD8 reqType;BYTE coordMode;CARD16 length;CARD32 drawable;CARD32 gc;};
struct _85FDB541DDB6AD166616600B6EEC2237 {Dwarf_Small fp_base_op;Dwarf_Small fp_extended_op;Dwarf_Half fp_register;Dwarf_Unsigned fp_offset;Dwarf_Off fp_instr_offset;};
struct _86FF50E5653523180B04F1ED7D105C35 {BYTE type;CARD8 pad;CARD16 sequenceNumber;CARD32 length;CARD32 timestamp;CARD16 nProviders;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _896D23E0DCE5181A858CD1FDEDFC63B0 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 count;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _8DDBCDCB4EEBED7E3946A9A0AA381214 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 mem1;CARD32 mem2;CARD32 size;CARD32 offset;CARD32 extra;CARD32 pad2;};
struct _8E399329B49199432AAC98786CEB8DFC {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 barrier;CARD32 window;INT16 x1;INT16 y1;INT16 x2;INT16 y2;CARD32 directions;CARD16 pad;CARD16 num_devices;};
struct _8E9D6FDA341A5CD3E2BA41AECEFC8DB5 {BYTE type;CARD8 revertTo;CARD16 sequenceNumber;CARD32 length;CARD32 focus;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _8ED1EDE36117F631290006C3E9446427 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;INT16 xOff;INT16 yOff;};
struct _8ED815E5FBCF56EC30B814FDB5559582 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 xhot;CARD16 yhot;CARD32 cursorSerial;CARD32 cursorName;CARD16 nbytes;CARD16 pad;};
struct _8F4F122E327FAA30019691AE8AD7A3FD {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 mode;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _90E70BB8598364AAEAF6E156E433A864 {BYTE type;CARD8 num_resolutions;CARD16 sequenceNumber;CARD32 length;};
struct _91B6CB490464A345E007449761AA48F2 {CARD8 reqType;BOOL contiguous;CARD16 length;CARD32 cmap;CARD16 colors;CARD16 red;CARD16 green;CARD16 blue;};
struct _91DA6C1759B9453440D37A912FAA4391 {BYTE type;BOOL onOff;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _923A7E11775A94934B3B1E345D223966 {uint8_t reqType;uint8_t ReqType;uint16_t length;uint32_t src_win;uint32_t dst_win;FP1616 src_x;FP1616 src_y;uint16_t src_width;uint16_t src_height;FP1616 dst_x;FP1616 dst_y;uint16_t deviceid;uint16_t pad1;};
struct _925C5E9ADF13AF08F8E4BE2898EADC8C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 mask;};
struct _92C41753C7AFA0CB8157A9B4DAA6D4C8 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;xRenderTransform transform;};
struct _932C98117C7FBC3E6D86F96BD678D2D1 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 number;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _95F74D7453875C15752E25CB7F1BF0CB {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 time;CARD32 window;BYTE mode;CARD8 deviceid;BYTE pad1;BYTE pad2;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;};
struct _975F191B774855E1091B820C10595CF2 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 x;CARD16 y;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _9763FFEA107F886AC733AD6B5D71CF1E {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _9B8DBD56B2ADF437D63C1746D87B8C1A {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 physicalScreen;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _9C8855C5416F841FBC956426CB420C87 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 modifier_device;CARD8 key;CARD8 grabbed_device;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _9C9793AFB485CBCDC1723AA9DA7467C7 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 drawable;BOOL onoff;CARD8 pad1;CARD16 pad2;};
struct _9C9B4F43840092878ABB719655C0F912 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 property;CARD32 type;CARD32 longOffset;CARD32 longLength;CARD8 deviceid;BOOL delete;CARD16 pad;};
struct _9D856B837113E1B9C553BEF8F42066D9 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;INT16 vid_x;INT16 vid_y;CARD16 vid_w;CARD16 vid_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;};
struct _9ED58EEAFF80161A60B7DFF5CDA307D2 {BYTE type;CARD8 keysperkeycode;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _A03D8E09E1901FA73C4A77E2D3267500 {BYTE type;CARD8 nOpts;CARD16 sequenceNumber;CARD32 length;CARD32 optDataStart;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _A043DEDA58AACB0ED59B54E1362CDED0 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 max_request_size;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _A1AC26B3F52FABB6E699F530F015B0DD {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xPointFixed p1;xPointFixed p2;CARD32 nStops;};
struct _A23F2D0A331F720D631E2B6171CC3ECA {CARD8 reqType;BYTE pad;CARD16 length;CARD32 id;};
struct _A27B2EF13B029B6AC017266492BED372 {CARD8 reqType;BYTE pad;CARD16 length;INT16 timeout;INT16 interval;BYTE preferBlank;BYTE allowExpose;CARD16 pad2;};
struct _A27C0735E8A7EB8595B640D9B7BEF349 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 default_root;CARD32 root_visual;CARD32 default_colormap;CARD32 black_pixel;CARD32 white_pixel;BOOL single_screen;BOOL app_group_leader;CARD16 pad2;};
struct _A2FB221EC01549407EDCF016C4C0632F {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 status;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _A365B987896F695263E94A4D93A744FD {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 offset;CARD32 width;CARD32 bank_size;CARD32 ram_size;CARD32 pad4;CARD32 pad5;};
struct _A400BCBF43F87F2088946A887ADD242F {BYTE type;CARD8 nExtensions;CARD16 sequenceNumber;CARD32 length;};
struct _A4A7C3BD565590D1E17F737ABF60719A {BYTE type;CARD8 capabilities;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 uid;CARD32 gid;CARD32 signature;CARD32 pad1;CARD32 pad2;};
struct _A56827FA99728A529A1C213E34F0D83D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 time;CARD8 mode;CARD8 deviceid;BYTE pad1;BYTE pad2;};
struct _A8C15E0CCC4F1BB7303BFAC73A97A837 {CARD8 type;BYTE state;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 tilOrSince;CARD32 idle;CARD32 eventMask;BYTE kind;CARD8 pad0;CARD16 pad1;CARD32 pad2;};
struct _AC93509FFB6B9C1B98C9154A5D973C79 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 modifier_device;CARD8 button;CARD8 grabbed_device;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _AEEA76D8CE49243D0419CEF55BCA8374 {BYTE type;BOOL pad;CARD16 sequenceNumber;CARD32 length;CARD32 red;CARD32 green;CARD32 blue;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _B030971557B6948BCB07CDE1436E426E {BYTE type;CARD8 enabled;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _B2F7B8A6150007A0765871980FCF4D2A {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 gc;CARD32 region;INT16 xOrigin;INT16 yOrigin;};
struct _B3154DDC89CC03C065CC7D94E90D12B0 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 start_id;CARD32 count;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _B36C03EE0DB03800CDBEDA1CF8CFFD5F {XExtData *ext_data;Font fid;unsigned int direction;unsigned int min_char_or_byte2;unsigned int max_char_or_byte2;unsigned int min_byte1;unsigned int max_byte1;int all_chars_exist;unsigned int default_char;int n_properties;XFontProp *properties;XCharStruct min_bounds;XCharStruct max_bounds;XCharStruct *per_char;int ascent;int descent;};
struct _B39400A659C1078B091D331E19541038 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 app_group;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _B4B234DF51BFD6860BC6DFAD9B63C9C2 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 result;CARD32 pad;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _B5E8E02F7A52D99CF4C865E96F59C543 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 attribute;INT32 value;};
struct _B753CC28BE97AA51EF6C665DC0F564ED {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 crtc;CARD32 timestamp;CARD32 configTimestamp;INT16 x;INT16 y;CARD32 mode;CARD16 rotation;CARD16 pad;};
struct _B8340C644CDB6E95F3781F01B22F6B41 {BYTE type;CARD8 num_catalogues;CARD16 sequenceNumber;CARD32 length;};
struct _B8E9EA4A4551E0BACF327E18B2707DE7 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 attributes;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _BB307DE81D005F0ABA15BB97E20A0808 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 normalInfo;CARD16 stereoInfo;CARD32 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;};
struct _BD71CB07C4DDF44AC99036AEC3635494 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _BDC2BC4E1FC4E3665C531F87A904F1CB {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD32 time;CARD8 request;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _C1A851173DD816DDF7F0E0D062CEFEE2 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cursor;CARD32 time;CARD16 eventMask;CARD16 pad2;};
struct _C636080007C4706D90F0D4DC955336B1 {BYTE type;BOOL pad;CARD16 sequenceNumber;CARD32 length;CARD32 permissions;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _C7406CB336B739A87F2A2E6FB42BC742 {CARD8 reqType;CARD8 flags;CARD16 length;CARD32 cmap;CARD32 pixel;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _C889EC8CC43E7C0CC7EDA4C569652F40 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 eventMask;CARD16 bufferIndex;CARD8 side;CARD8 unused0;CARD32 unused1;CARD32 unused2;CARD32 unused3;};
struct _C9AC95BFF7586B97AA4528D76B874D4D {CARD32 window;xDbeSwapAction swapAction;CARD8 pad1;CARD16 pad2;};
struct _CBEB826488D526BABFC41413DDE1C327 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 modecount;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _CF062F67C3439FCE826EEADEB80EF798 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 atomsStart;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _CF8EABCA377A8F90C7BBBD004ED67F2E {int x;int y;int width;int height;int border_width;int depth;Visual *visual;Window root;int c_class;int bit_gravity;int win_gravity;int backing_store;unsigned __int64 backing_planes;unsigned __int64 backing_pixel;int save_under;Colormap colormap;int map_installed;int map_state;__int64 all_event_masks;__int64 your_event_mask;__int64 do_not_propagate_mask;int override_redirect;Screen *screen;};
struct _CF9B220DED91D4DB6D14DD6E06C7164B {__io_read_fn *read;__io_write_fn *write;__io_seek_fn *seek;__io_close_fn *close;};
struct _CFD68B7ADBC82BE7EABF4FDEA780590F {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 major_version;CARD16 minor_version;BOOL present;CARD8 pad1;CARD8 pad2;CARD8 pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _D293DB0BD17AE7654E9C3A224EBA1B54 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 num_extents;};
struct _D32AD62C57B9AFC5935156850A4EC9F1 {Dwarf_Small fp_base_op;Dwarf_Small fp_extended_op;Dwarf_Half fp_register;Dwarf_Unsigned fp_offset_or_block_len;Dwarf_Small *fp_expr_block;Dwarf_Off fp_instr_offset;};
struct _D4B7CCBA990A156E447947BB060E0786 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcGC;CARD32 dstGC;CARD32 mask;};
struct _D70593ABB97D9ADE4A069324C98D63AE {BYTE type;CARD8 format;CARD16 sequenceNumber;CARD32 length;CARD32 propertyType;CARD32 bytesAfter;CARD32 nItems;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _D9975735FE375B63E13B12CE4075213A {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 screenCount;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _DA4CA76774A2C175F5D0B77BF61D79A2 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DA732864DAD897F0B587BCCAD8E078EE {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DB0E3B2132CB3BCDB478CD47716D7AA6 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 start;CARD32 stop;};
struct _DB0EFD4055EE50FF77A024DEFEA8EE37 {Elf64_Word st_name;unsigned __int8 st_info;unsigned __int8 st_other;Elf64_Section st_shndx;Elf64_Addr st_value;Elf64_Xword st_size;};
struct _DB2D4F6E439022CA547DF8AA2CE83D6E {CARD32 id;CARD8 type;CARD8 depth;CARD16 pad1;xDirectFormat dirent;CARD32 colormap;};
struct _DC32A0924BDC2649CEA8C5E8AC72EF13 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 mid;CARD32 srcCmap;};
struct _DF21E726BD65398407620C5BBBA9E08C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 property;};
struct _E0F65D5058ACC2BC5F9AF2EDFFAF29D1 {CARD32 windowId;CARD32 defaultColormap;CARD32 whitePixel;CARD32 blackPixel;CARD32 currentInputMask;CARD16 pixWidth;CARD16 pixHeight;CARD16 mmWidth;CARD16 mmHeight;CARD16 minInstalledMaps;CARD16 maxInstalledMaps;CARD32 rootVisualID;CARD8 backingStore;BOOL saveUnders;CARD8 rootDepth;CARD8 nDepths;};
struct _E253BFAEF58A5A0733BD8E7952BEDE5F {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 numberBuffer;CARD16 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;CARD32 unused6;};
struct _E55E0FA3BC2293A808012744A07CC3F2 {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 timestamp;CARD32 capabilities;CARD16 nCrtcs;CARD16 nOutputs;CARD16 nAssociatedProviders;CARD16 nameLength;CARD32 pad1;CARD32 pad2;};
struct _E5FCE84481A5DA4B542276D3CC112A29 {BYTE type;BYTE event_code;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;};
struct _E5FEC4B44082A4B8B21FC86BB58EB49C {BYTE type;CARD8 keySymsPerKeyCode;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _E63B05C5B736EEB1B492508D1A96BE3C {BYTE type;CARD8 pad;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _E7F9FD2C37FD56671DBF7E32D3F10830 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Atom atom;Time time;int state;};
struct _E8D391135C8469DFAA1B91EC6A7D7277 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 offset;CARD32 flags;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _E979E361A2908732FE24CBF47752810D {BYTE type;CARD8 otherid_valid;CARD16 sequenceNumber;CARD32 length;CARD32 otherid;BYTE cachable;BYTE pad1;CARD16 pad2;};
struct _E98D3537A10D6D7A36EB2CF02D2A733B {BYTE type;BOOL same;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _EBA30041B1367D967CE55670260EF592 {int type;unsigned __int64 serial;int send_event;Display *display;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct _EC87D4E5EFECFC4D155F79244EABA9BB {CARD8 reqType;BYTE mode;CARD16 length;CARD32 window;};
struct _EDE17C06FAF221A5878FFED27CF569B6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD32 time;CARD16 event_count;CARD8 this_device_mode;CARD8 other_devices_mode;BOOL ownerEvents;CARD8 deviceid;CARD16 pad01;};
struct _EE866C64B9E084E52F8894370051FA3D {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 nElts;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _EF54914952AB89C7E0EBAF949772487D {BYTE type;BOOL enabled;CARD16 sequenceNumber;CARD32 length;CARD16 nHosts;CARD16 pad1;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _EFD6C7D4777DD13E0B1CDD145692A98C {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD16 server_major_version;CARD16 server_minor_version;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _F059149F541946541B5DFE9F6EB20E96 {fsOffset32 name;fsOffset32 value;CARD8 type;BYTE pad0;CARD16 pad1;};
struct _F0BD037E525ACFEA0C1F272EFA8FD580 {CARD8 reqType;BOOL delete;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD32 longOffset;CARD32 longLength;};
struct _F1BE47758A5CB841C0CD1587E7EC02C0 {BYTE type;BYTE state;CARD16 sequenceNumber;CARD32 time;CARD32 atom;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD16 pad5;CARD8 pad4;CARD8 deviceid;};
struct _F1CA5290AFDA1F8F382C2CF8549939AD {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 flags;CARD32 pad;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _F1E1BB7F23F71F625712F6F0DB53C50A {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _F21D8018CF145B47A329D27C35E96B99 {CARD8 reqType;BOOL oddLength;CARD16 length;CARD32 fid;};
struct _F2B249C6E9F478F0CD898D371C46DBB5 {uint16_t type;uint16_t length;uint16_t sourceid;uint16_t number;uint32_t label;FP3232 min;FP3232 max;FP3232 value;uint32_t resolution;uint8_t mode;uint8_t pad1;uint16_t pad2;};
struct _F2B759443FC190F802FE53FB7862F04C {CARD8 c_class;CARD8 id;CARD16 length;CARD32 resolution;INT32 min_value;INT32 max_value;};
struct _F38DCD124B444AE28722F96474B80F5D {BYTE type;CARD8 nElts;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _F57445CCAF99E2554B974CAECD301767 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 time;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _F5EF5DA862DE88FCCA82FCE0F474E907 {CARD8 reqType;CARD8 depth;CARD16 length;CARD32 wid;CARD32 parent;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 c_class;CARD32 visual;CARD32 mask;};
struct _F683121DA6B0B811B23B9D483FF7482A {CARD8 reqType;BYTE pad;CARD16 length;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;CARD32 time;};
struct _F7503CDF5949AE94D9EE93F1613B3477 {uint16_t deviceid;uint16_t attachment;uint8_t use;BOOL enabled;uint16_t pad;uint32_t flags;};
struct _FCC23D59EDC7C9AEBCA8416FDF631F7E {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 valueMask;};
struct _FD8FCB430836D04139012301F63EB9C6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 start;CARD32 stop;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _FE8C559F4B68F5A3A5D9DBCE5E9919CF {BYTE type;CARD8 success;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _FED59B4CD78CD28406B031702718F8F9 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Atom selection;Time time;};
struct _FF16F36C84D77908C186E6C9218E9417 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 kbdtype;CARD32 rate;CARD32 delay;BOOL servnumlock;BOOL pad2;CARD16 pad3;CARD32 pad4;CARD32 pad5;};
struct xcb_create_glyph_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cid;xcb_font_t source_font;xcb_font_t mask_font;uint16_t source_char;uint16_t mask_char;uint16_t fore_red;uint16_t fore_green;uint16_t fore_blue;uint16_t back_red;uint16_t back_green;uint16_t back_blue;};
struct xcb_glx_delete_textures_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_feedback_buffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t size;int32_t type;};
struct xcb_glx_gen_queries_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_get_color_table_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_glx_get_pixel_mapfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t map;};
struct xcb_glx_get_queryiv_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_poly_fill_rectangle_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_randr_get_crtc_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;xcb_timestamp_t config_timestamp;};
struct xcb_randr_set_crtc_config_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;uint8_t pad0[20];};
struct xcb_record_enable_context_reply_t {uint8_t response_type;uint8_t category;uint16_t sequence;uint32_t length;xcb_record_element_header_t element_header;uint8_t client_swapped;uint8_t pad0[2];uint32_t xid_base;uint32_t server_time;uint32_t rec_sequence_num;uint8_t pad1[8];};
struct xcb_set_clip_rectangles_request_t {uint8_t major_opcode;uint8_t ordering;uint16_t length;xcb_gcontext_t gc;int16_t clip_x_origin;int16_t clip_y_origin;};
struct xcb_sync_change_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;xcb_sync_int64_t amount;};
struct xcb_sync_create_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t id;xcb_sync_int64_t initial_value;};
struct xcb_test_compare_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_cursor_t cursor;};
struct xcb_xv_get_port_attribute_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int32_t value;};
struct xcb_xvmc_create_surface_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_surface_t surface_id;xcb_xvmc_context_t context_id;};
struct xcb_dri2_swap_interval_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t interval;};
struct xcb_glx_get_clip_plane_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t plane;};
struct xcb_glx_get_materialfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t face;uint32_t pname;};
struct xcb_glx_get_materialiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t face;uint32_t pname;};
struct xcb_glx_vendor_private_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t vendor_code;xcb_glx_context_tag_t context_tag;};
struct xcb_dri2_authenticate_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint32_t magic;};
struct xcb_dri2_swap_buffers_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t target_msc_hi;uint32_t target_msc_lo;uint32_t divisor_hi;uint32_t divisor_lo;uint32_t remainder_hi;uint32_t remainder_lo;};
struct xcb_get_motion_events_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;xcb_timestamp_t start;xcb_timestamp_t stop;};
struct xcb_get_selection_owner_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t owner;};
struct xcb_glx_get_color_table_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;uint8_t pad2[12];};
struct xcb_glx_get_histogram_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;uint8_t reset;};
struct xcb_glx_get_pixel_mapfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_queryiv_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_envfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_tex_enviv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_tex_gendv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t coord;uint32_t pname;};
struct xcb_glx_get_tex_genfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t coord;uint32_t pname;};
struct xcb_glx_get_tex_geniv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t coord;uint32_t pname;};
struct xcb_glx_pbuffer_clobber_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint16_t event_type;uint16_t draw_type;xcb_glx_drawable_t drawable;uint32_t b_mask;uint16_t aux_buffer;uint16_t x;uint16_t y;uint16_t width;uint16_t height;uint16_t count;uint8_t pad1[4];};
struct xcb_glx_select_buffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t size;};
struct xcb_input_grab_device_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t grab_window;xcb_timestamp_t time;uint16_t num_classes;uint8_t this_device_mode;uint8_t other_device_mode;uint8_t owner_events;uint8_t device_id;uint8_t pad0[2];};
struct xcb_randr_create_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_randr_mode_info_t mode_info;};
struct xcb_render_add_glyphs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t glyphset;uint32_t glyphs_len;};
struct xcb_rotate_properties_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;uint16_t atoms_len;int16_t delta;};
struct xcb_shape_query_extents_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t bounding_shaped;uint8_t clip_shaped;uint8_t pad1[2];int16_t bounding_shape_extents_x;int16_t bounding_shape_extents_y;uint16_t bounding_shape_extents_width;uint16_t bounding_shape_extents_height;int16_t clip_shape_extents_x;int16_t clip_shape_extents_y;uint16_t clip_shape_extents_width;uint16_t clip_shape_extents_height;};
struct xcb_store_named_color_request_t {uint8_t major_opcode;uint8_t flags;uint16_t length;xcb_colormap_t cmap;uint32_t pixel;uint16_t name_len;uint8_t pad0[2];};
struct xcb_sync_change_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t id;uint32_t value_mask;};
struct xcb_sync_create_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t id;uint32_t value_mask;};
struct xcb_sync_create_fence_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;xcb_sync_fence_t fence;uint8_t initially_triggered;};
struct xcb_sync_set_priority_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t id;int32_t priority;};
struct xcb_xfixes_fetch_region_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_rectangle_t extents;uint8_t pad1[16];};
struct xcb_xkb_access_x_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;xcb_keycode_t keycode;uint16_t detailt;uint16_t slowKeysDelay;uint16_t debounceDelay;uint8_t pad0[16];};
struct xcb_xkb_get_device_info_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint16_t present;uint16_t supported;uint16_t unsupported;uint16_t nDeviceLedFBs;uint8_t firstBtnWanted;uint8_t nBtnsWanted;uint8_t firstBtnRtrn;uint8_t nBtnsRtrn;uint8_t totalBtns;uint8_t hasOwnState;uint16_t dfltKbdFB;uint16_t dfltLedFB;uint8_t pad0[2];xcb_atom_t devType;uint16_t nameLen;};
struct xcb_xkb_get_kbd_by_name_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;xcb_keycode_t minKeyCode;xcb_keycode_t maxKeyCode;uint8_t loaded;uint8_t newKeyboard;uint16_t found;uint16_t reported;uint8_t pad0[16];};
struct xcb_dri2_copy_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t region;uint32_t dest;uint32_t src;};
struct xcb_dri2_get_buffers_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t count;};
struct xcb_glx_gen_textures_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_get_booleanv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t pname;};
struct xcb_glx_get_integerv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;};
struct xcb_glx_get_materialfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_materialiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_is_query_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t id;};
struct xcb_glx_render_large_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint16_t request_num;uint16_t request_total;uint32_t data_len;};
struct xcb_glx_swap_buffers_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;xcb_glx_drawable_t drawable;};
struct xcb_record_get_context_reply_t {uint8_t response_type;uint8_t enabled;uint16_t sequence;uint32_t length;xcb_record_element_header_t element_header;uint8_t pad0[3];uint32_t num_intercepted_clients;uint8_t pad1[16];};
struct xcb_render_add_traps_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;int16_t x_off;int16_t y_off;};
struct xcb_render_composite_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t mask;xcb_render_picture_t dst;int16_t src_x;int16_t src_y;int16_t mask_x;int16_t mask_y;int16_t dst_x;int16_t dst_y;uint16_t width;uint16_t height;};
struct xcb_screensaver_notify_event_t {uint8_t response_type;uint8_t code;uint16_t sequence;uint8_t state;uint8_t pad0;uint16_t sequence_number;xcb_timestamp_t time;xcb_window_t root;xcb_window_t window;uint8_t kind;uint8_t forced;uint8_t pad1[14];};
struct xcb_sync_query_counter_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_sync_int64_t counter_value;};
struct xcb_sync_set_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;xcb_sync_int64_t value;};
struct xcb_xinerama_get_state_reply_t {uint8_t response_type;uint8_t state;uint16_t sequence;uint32_t length;xcb_window_t window;};
struct xcb_xkb_get_geometry_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];xcb_atom_t name;};
struct xcb_xkb_set_geometry_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t nShapes;uint8_t nSections;xcb_atom_t name;uint16_t widthMM;uint16_t heightMM;uint16_t nProperties;uint16_t nColors;uint16_t nDoodads;uint16_t nKeyAliases;uint8_t baseColorNdx;uint8_t labelColorNdx;uint8_t pad0[2];};
struct xcb_configure_request_event_t {uint8_t response_type;uint8_t stack_mode;uint16_t sequence;xcb_window_t parent;xcb_window_t window;xcb_window_t sibling;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint16_t value_mask;};
struct xcb_damage_subtract_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_damage_damage_t damage;xcb_xfixes_region_t repair;xcb_xfixes_region_t parts;};
struct xcb_delete_property_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;xcb_atom_t property;};
struct xcb_glx_get_doublev_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;};
struct xcb_glx_get_histogram_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;uint8_t pad2[12];};
struct xcb_glx_get_lightfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t light;uint32_t pname;};
struct xcb_glx_get_lightiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t light;uint32_t pname;};
struct xcb_glx_get_tex_envfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_enviv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_gendv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float64_t datum;uint8_t pad2[8];};
struct xcb_glx_get_tex_genfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_geniv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_image_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;int32_t height;int32_t depth;uint8_t pad2[4];};
struct xcb_glx_render_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t mode;};
struct xcb_input_bell_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;int8_t percent;uint8_t pad0[3];int16_t pitch;int16_t duration;};
struct xcb_randr_create_mode_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_randr_mode_t mode;uint8_t pad1[20];};
struct xcb_randr_set_panning_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;};
struct xcb_reparent_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;xcb_window_t parent;int16_t x;int16_t y;};
struct xcb_set_input_focus_request_t {uint8_t major_opcode;uint8_t revert_to;uint16_t length;xcb_window_t focus;xcb_timestamp_t time;};
struct xcb_sync_get_priority_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int32_t priority;};
struct xcb_configure_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;xcb_window_t above_sibling;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t override_redirect;uint8_t pad1;};
struct xcb_dri2_get_param_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t param;};
struct xcb_glx_get_floatv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;};
struct xcb_glx_get_integerv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_minmax_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;uint8_t reset;};
struct xcb_glx_get_string_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t name;};
struct xcb_glx_is_query_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;};
struct xcb_glx_is_texture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t texture;};
struct xcb_glx_make_current_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_context_tag_t context_tag;uint8_t pad1[20];};
struct xcb_poly_rectangle_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_xkb_get_geometry_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;xcb_atom_t name;uint8_t found;uint8_t pad0;uint16_t widthMM;uint16_t heightMM;uint16_t nProperties;uint16_t nColors;uint16_t nShapes;uint16_t nSections;uint16_t nDoodads;uint16_t nKeyAliases;uint8_t baseColorNdx;uint8_t labelColorNdx;};
struct xcb_xv_ungrab_port_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_timestamp_t time;};
struct xcb_colormap_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;xcb_colormap_t colormap;uint8_t _new;uint8_t state;uint8_t pad1[2];};
struct xcb_create_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cid;xcb_pixmap_t source;xcb_pixmap_t mask;uint16_t fore_red;uint16_t fore_green;uint16_t fore_blue;uint16_t back_red;uint16_t back_green;uint16_t back_blue;uint16_t x;uint16_t y;};
struct xcb_create_pixmap_request_t {uint8_t major_opcode;uint8_t depth;uint16_t length;xcb_pixmap_t pid;xcb_drawable_t drawable;uint16_t width;uint16_t height;};
struct xcb_damage_create_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_damage_damage_t damage;xcb_drawable_t drawable;uint8_t level;uint8_t pad0[3];};
struct xcb_dri2_wait_msc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t target_msc_hi;uint32_t target_msc_lo;uint32_t divisor_hi;uint32_t divisor_lo;uint32_t remainder_hi;uint32_t remainder_lo;};
struct xcb_dri2_wait_sbc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t target_sbc_hi;uint32_t target_sbc_lo;};
struct xcb_get_input_focus_reply_t {uint8_t response_type;uint8_t revert_to;uint16_t sequence;uint32_t length;xcb_window_t focus;};
struct xcb_glx_gen_lists_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t range;};
struct xcb_glx_get_doublev_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float64_t datum;uint8_t pad2[8];};
struct xcb_glx_get_lightfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_lightiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_mapdv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t query;};
struct xcb_glx_get_mapfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t query;};
struct xcb_glx_get_mapiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t query;};
struct xcb_grab_keyboard_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;xcb_timestamp_t time;uint8_t pointer_mode;uint8_t keyboard_mode;uint8_t pad0[2];};
struct xcb_poly_fill_arc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_reparent_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;xcb_window_t parent;int16_t x;int16_t y;uint8_t override_redirect;uint8_t pad1[3];};
struct xcb_xkb_get_names_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t pad0[2];uint32_t which;};
struct xcb_xv_stop_video_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;};
struct _xkbSetDebuggingFlagsReply {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 currentFlags;CARD32 currentCtrls;CARD32 supportedFlags;CARD32 supportedCtrls;CARD32 pad1;CARD32 pad2;};
struct xcb_dri2_connect_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint32_t driver_type;};
struct xcb_glx_get_floatv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_is_texture_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;};
struct xcb_glx_new_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t list;uint32_t mode;};
struct xcb_gravity_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;int16_t x;int16_t y;};
struct xcb_input_focus_in_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t window;uint8_t mode;uint8_t device_id;uint8_t pad0[18];};
struct xcb_poly_segment_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_warp_pointer_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t src_window;xcb_window_t dst_window;int16_t src_x;int16_t src_y;uint16_t src_width;uint16_t src_height;int16_t dst_x;int16_t dst_y;};
struct xcb_xkb_map_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t ptrBtnActions;uint16_t changed;xcb_keycode_t minKeyCode;xcb_keycode_t maxKeyCode;uint8_t firstType;uint8_t nTypes;xcb_keycode_t firstKeySym;uint8_t nKeySyms;xcb_keycode_t firstKeyAct;uint8_t nKeyActs;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehavior;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint16_t virtualMods;uint8_t pad0[2];};
struct xcb_xv_grab_port_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_timestamp_t time;};
struct _XF86MiscSetMouseSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD32 mousetype;CARD32 baudrate;CARD32 samplerate;CARD32 resolution;CARD32 buttons;BOOL emulate3buttons;BOOL chordmiddle;CARD16 devnamelen;CARD32 emulate3timeout;CARD32 flags;};
struct _xkbExtensionDeviceNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 reason;CARD16 ledClass;CARD16 ledID;CARD32 ledsDefined;CARD32 ledState;CARD8 firstBtn;CARD8 nBtns;CARD16 supported;CARD16 unsupported;CARD16 pad3;};
struct xcb_create_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t parent;xcb_window_t window;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t override_redirect;uint8_t pad1;};
struct xcb_free_colors_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint32_t plane_mask;};
struct xcb_glx_get_error_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int32_t error;};
struct xcb_glx_get_mapdv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float64_t datum;uint8_t pad2[8];};
struct xcb_glx_get_mapfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_mapiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_is_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t list;};
struct xcb_grab_button_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;uint16_t event_mask;uint8_t pointer_mode;uint8_t keyboard_mode;xcb_window_t confine_to;xcb_cursor_t cursor;uint8_t button;uint8_t pad0;uint16_t modifiers;};
struct xcb_render_pictforminfo_t {xcb_render_pictformat_t id;uint8_t type;uint8_t depth;uint8_t pad0[2];xcb_render_directformat_t dirent;xcb_colormap_t colormap;};
struct xcb_shm_get_image_reply_t {uint8_t response_type;uint8_t depth;uint16_t sequence;uint32_t length;xcb_visualid_t visual;uint32_t size;};
struct xcb_xkb_get_map_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t full;uint16_t partial;uint8_t firstType;uint8_t nTypes;xcb_keycode_t firstKeySym;uint8_t nKeySyms;xcb_keycode_t firstKeyAction;uint8_t nKeyActions;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehaviors;uint16_t virtualMods;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint8_t pad0[2];};
struct xcb_xkb_get_names_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint32_t which;xcb_keycode_t minKeyCode;xcb_keycode_t maxKeyCode;uint8_t nTypes;uint8_t groupNames;uint16_t virtualMods;xcb_keycode_t firstKey;uint8_t nKeys;uint32_t indicators;uint8_t nRadioGroups;uint8_t nKeyAliases;uint16_t nKTLevels;uint8_t pad0[4];};
struct xcb_xkb_get_state_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint8_t mods;uint8_t baseMods;uint8_t latchedMods;uint8_t lockedMods;uint8_t group;uint8_t lockedGroup;int16_t baseGroup;int16_t latchedGroup;uint8_t compatState;uint8_t grabMods;uint8_t compatGrabMods;uint8_t lookupMods;uint8_t compatLookupMods;uint8_t pad0;uint16_t ptrBtnState;uint8_t pad1[6];};
struct xcb_xkb_set_map_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t present;uint16_t flags;xcb_keycode_t minKeyCode;xcb_keycode_t maxKeyCode;uint8_t firstType;uint8_t nTypes;xcb_keycode_t firstKeySym;uint8_t nKeySyms;uint16_t totalSyms;xcb_keycode_t firstKeyAction;uint8_t nKeyActions;uint16_t totalActions;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehaviors;uint8_t totalKeyBehaviors;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;uint8_t totalKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;uint8_t totalModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint8_t totalVModMapKeys;uint16_t virtualMods;};
struct xcb_clear_area_request_t {uint8_t major_opcode;uint8_t exposures;uint16_t length;xcb_window_t window;int16_t x;int16_t y;uint16_t width;uint16_t height;};
struct xcb_damage_add_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;xcb_xfixes_region_t region;};
struct xcb_get_property_reply_t {uint8_t response_type;uint8_t format;uint16_t sequence;uint32_t length;xcb_atom_t type;uint32_t bytes_after;uint32_t value_len;uint8_t pad0[12];};
struct xcb_poly_point_request_t {uint8_t major_opcode;uint8_t coordinate_mode;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_send_event_request_t {uint8_t major_opcode;uint8_t propagate;uint16_t length;xcb_window_t destination;uint32_t event_mask;char event[32];};
struct xcb_shm_attach_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shm_seg_t shmseg;uint32_t shmid;uint8_t read_only;uint8_t pad0[3];};
struct xcb_ungrab_key_request_t {uint8_t major_opcode;xcb_keycode_t key;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;uint8_t pad0[2];};
struct xcb_xevie_send_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xevie_event_t event;uint32_t data_type;uint8_t pad0[64];};
struct Dwarf_Regtable_Entry3_s {Dwarf_Small dw_offset_relevant;Dwarf_Small dw_value_type;Dwarf_Half dw_regnum;Dwarf_Unsigned dw_offset_or_block_len;Dwarf_Ptr dw_block_ptr;};
struct _XEVIGetVisualInfoReply {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 n_info;CARD32 n_conflicts;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _XF86MiscSetKbdSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD32 kbdtype;CARD32 rate;CARD32 delay;BOOL servnumlock;BOOL pad1;CARD16 pad2;};
struct _xkbShapeDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 colorNdx;CARD8 shapeNdx;CARD16 pad1;CARD32 pad2;};
struct btrfs_ioctl_vol_args_v2 {__s64 fd;__u64 transid;__u64 flags;btrfs_ioctl_vol_args_v2___0E1BBE3C4D92C29D6483496511BFB0E5 __anonymous0;char name[4040];};
struct xcb_change_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t gc;uint32_t value_mask;};
struct xcb_fill_poly_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;uint8_t shape;uint8_t coordinate_mode;uint8_t pad1[2];};
struct xcb_glx_is_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;};
struct xcb_intern_atom_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_atom_t atom;};
struct xcb_poly_line_request_t {uint8_t major_opcode;uint8_t coordinate_mode;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_xkb_get_map_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint8_t pad0[2];xcb_keycode_t minKeyCode;xcb_keycode_t maxKeyCode;uint16_t present;uint8_t firstType;uint8_t nTypes;uint8_t totalTypes;xcb_keycode_t firstKeySym;uint16_t totalSyms;uint8_t nKeySyms;xcb_keycode_t firstKeyAction;uint16_t totalActions;uint8_t nKeyActions;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehaviors;uint8_t totalKeyBehaviors;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;uint8_t totalKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;uint8_t totalModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint8_t totalVModMapKeys;uint8_t pad1;uint16_t virtualMods;};
struct _xSyncChangeCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 cid;INT32 value_hi;CARD32 value_lo;};
struct _xSyncCreateCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 cid;INT32 initial_value_hi;CARD32 initial_value_lo;};
struct _xkbGetDeviceInfoReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 present;CARD16 supported;CARD16 unsupported;CARD16 nDeviceLedFBs;CARD8 firstBtnWanted;CARD8 nBtnsWanted;CARD8 firstBtnRtrn;CARD8 nBtnsRtrn;CARD8 totalBtns;BOOL hasOwnState;CARD16 dfltKbdFB;CARD16 dfltLedFB;CARD16 pad;CARD32 devType;};
struct _xkbLogoDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 colorNdx;CARD8 shapeNdx;CARD16 pad1;CARD32 pad2;};
struct _xkbTextDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD16 width;CARD16 height;CARD8 colorNdx;CARD8 pad1;CARD16 pad2;};
struct ib_uverbs_attach_mcast {__u8 gid[16];__u32 qp_handle;__u16 mlid;__u16 reserved;__u64 driver_data[];};
struct ib_uverbs_detach_mcast {__u8 gid[16];__u32 qp_handle;__u16 mlid;__u16 reserved;__u64 driver_data[];};
struct xcb_grab_key_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;xcb_keycode_t key;uint8_t pointer_mode;uint8_t keyboard_mode;uint8_t pad0[3];};
struct xcb_poly_arc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_query_tree_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t root;xcb_window_t parent;uint16_t children_len;uint8_t pad1[14];};
struct xcb_xv_encoding_info_t {xcb_xv_encoding_t encoding;uint16_t name_size;uint16_t width;uint16_t height;uint8_t pad0[2];xcb_xv_rational_t rate;};
struct _xkbGetKbdByNameReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 minKeyCode;CARD8 maxKeyCode;BOOL loaded;BOOL newKeyboard;CARD16 found;CARD16 reported;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbNewKeyboardNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 oldDeviceID;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 oldMinKeyCode;CARD8 oldMaxKeyCode;CARD8 requestMajor;CARD8 requestMinor;CARD16 changed;CARD8 detail;CARD8 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbSetNamedIndicator {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 ledClass;CARD16 ledID;CARD16 pad1;CARD32 indicator;BOOL setState;BOOL on;BOOL setMap;BOOL createMap;CARD8 pad2;CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;};
struct _xkbUseExtensionReply {BYTE type;BOOL supported;CARD16 sequenceNumber;CARD32 length;CARD16 serverMajor;CARD16 serverMinor;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct kvm_pit_channel_state {__u32 count;__u16 latched_count;__u8 count_latched;__u8 status_latched;__u8 status;__u8 read_state;__u8 write_state;__u8 write_latch;__u8 rw_mode;__u8 mode;__u8 bcd;__u8 gate;__s64 count_load_time;};
struct xcb_copy_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t src_gc;xcb_gcontext_t dst_gc;uint32_t value_mask;};
struct xcb_get_image_reply_t {uint8_t response_type;uint8_t depth;uint16_t sequence;uint32_t length;xcb_visualid_t visual;uint8_t pad0[20];};
struct xcb_xkb_text_doodad_t {xcb_atom_t name;uint8_t type;uint8_t priority;int16_t top;int16_t left;int16_t angle;uint16_t width;uint16_t height;uint8_t colorNdx;uint8_t pad0[3];};
struct _QueryEncodingsReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 num_encodings;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _QueryExtensionReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 version;CARD16 revision;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _xExtendedVisualInfo {CARD32 core_visual_id;INT8 screen;INT8 level;CARD8 transparency_type;CARD8 pad0;CARD32 transparency_value;CARD8 min_hw_colormaps;CARD8 max_hw_colormaps;CARD16 num_colormap_conflicts;};
struct _xSyncCreateFenceReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 d;CARD32 fid;BOOL initially_triggered;CARD8 pad0;CARD16 pad1;};
struct _xkbGetGeometryReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 name;BOOL found;CARD8 pad;CARD16 widthMM;CARD16 heightMM;CARD16 nProperties;CARD16 nColors;CARD16 nShapes;CARD16 nSections;CARD16 nDoodads;CARD16 nKeyAliases;CARD8 baseColorNdx;CARD8 labelColorNdx;};
struct blk_user_trace_setup {char name[32];__u16 act_mask;__u32 buf_size;__u32 buf_nr;__u64 start_lba;__u64 end_lba;__u32 pid;};
struct omap3isp_hist_config {__u32 buf_size;__u16 config_counter;__u8 num_acc_frames;__u16 hist_bins;__u8 cfa;__u8 wg[4];__u8 num_regions;struct omap3isp_hist_region region[4];};
struct _QueryAdaptorsReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 num_adaptors;CARD16 pads3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _xSyncSetCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 cid;INT32 value_hi;CARD32 value_lo;};
struct _xkbCompatMapNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 changedGroups;CARD16 firstSI;CARD16 nSI;CARD16 nTotalSI;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbIndicatorNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 pad2;CARD32 state;CARD32 changed;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbSectionWireDesc {CARD32 name;INT16 top;INT16 left;CARD16 width;CARD16 height;INT16 angle;CARD8 priority;CARD8 nRows;CARD8 nDoodads;CARD8 nOverlays;CARD16 pad;};
union autofs_packet_union {struct autofs_packet_hdr hdr;struct autofs_packet_missing missing;struct autofs_packet_expire expire;struct autofs_packet_expire_multi expire_multi;};
struct ib_user_mad_hdr_old {__u32 id;__u32 status;__u32 timeout_ms;__u32 retries;__u32 length;__be32 qpn;__be32 qkey;__be16 lid;__u8 sl;__u8 path_bits;__u8 grh_present;__u8 gid_index;__u8 hop_limit;__u8 traffic_class;__u8 gid[16];__be32 flow_label;};
struct __attribute__((packed)) rds_info_tcp_socket {__be32 local_addr;__be16 local_port;__be32 peer_addr;__be16 peer_port;uint64_t hdr_rem;uint64_t data_rem;uint32_t last_sent_nxt;uint32_t last_expected_una;uint32_t last_seen_una;};
struct _LbxChangeProperty {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 format;CARD8 mode;BYTE pad[2];CARD32 nUnits;};
struct _ScreenSaverNotify {CARD8 type;BYTE state;CARD16 sequenceNumber;CARD32 timestamp;CARD32 root;CARD32 window;BYTE kind;BYTE forced;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbControlsNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 numGroups;CARD16 pad1;CARD32 changedControls;CARD32 enabledControls;CARD32 enabledControlChanges;CARD8 keycode;CARD8 eventType;CARD8 requestMajor;CARD8 requestMinor;CARD32 pad2;};
struct _xkbLatchLockState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 affectModLocks;CARD8 modLocks;BOOL lockGroup;CARD8 groupLock;CARD8 affectModLatches;CARD8 modLatches;CARD8 pad;BOOL latchGroup;INT16 groupLatch;};
struct icmp6_router_renum {struct icmp6_hdr rr_hdr;uint8_t rr_segnum;uint8_t rr_flags;uint16_t rr_maxdelay;uint32_t rr_reserved;};
struct ip_vs_service_user {__u16 protocol;__be32 addr;__be16 port;__u32 fwmark;char sched_name[16];unsigned int flags;unsigned int timeout;__be32 netmask;};
struct __attribute__((packed)) nw_modify_dos_info {__le32 attributes;__le16 creationDate;__le16 creationTime;__u32 creatorID;__le16 modifyDate;__le16 modifyTime;__u32 modifierID;__u16 archiveDate;__u16 archiveTime;__u32 archiverID;__le16 lastAccessDate;__u16 inheritanceGrantMask;__u16 inheritanceRevokeMask;__u32 maximumSpace;};
struct xt_osf_user_finger {struct xt_osf_wc wss;__u8 ttl;__u8 df;__u16 ss;__u16 mss;__u16 opt_num;char genre[32];char version[32];char subtype[32];struct xt_osf_opt opt[40];};
struct _ErrorInfo_struct {__u8 ScsiStatus;__u8 SenseLen;__u16 CommandStatus;__u32 ResidualCnt;MoreErrInfo_struct MoreErrInfo;__u8 SenseInfo[32];};
struct _ShapeSelectInput {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;BYTE enable;BYTE pad1;CARD16 pad2;};
struct _ShmGetImageReply {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 visual;CARD32 size;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _xSyncSetPriority {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 id;INT32 priority;};
struct _xkbAccessXNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 keycode;CARD16 detail;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbGetNamesReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 which;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 nTypes;CARD8 groupNames;CARD16 virtualMods;CARD8 firstKey;CARD8 nKeys;CARD32 indicators;CARD8 nRadioGroups;CARD8 nKeyAliases;CARD16 nKTLevels;CARD32 pad3;};
struct dvb_frontend_info {char name[128];fe_type_t type;__u32 frequency_min;__u32 frequency_max;__u32 frequency_stepsize;__u32 frequency_tolerance;__u32 symbol_rate_min;__u32 symbol_rate_max;__u32 symbol_rate_tolerance;__u32 notifier_delay;fe_caps_t caps;};
struct ib_uverbs_qp_attr {__u32 qp_attr_mask;__u32 qp_state;__u32 cur_qp_state;__u32 path_mtu;__u32 path_mig_state;__u32 qkey;__u32 rq_psn;__u32 sq_psn;__u32 dest_qp_num;__u32 qp_access_flags;struct ib_uverbs_ah_attr ah_attr;struct ib_uverbs_ah_attr alt_ah_attr;__u32 max_send_wr;__u32 max_recv_wr;__u32 max_send_sge;__u32 max_recv_sge;__u32 max_inline_data;__u16 pkey_index;__u16 alt_pkey_index;__u8 en_sqd_async_notify;__u8 sq_draining;__u8 max_rd_atomic;__u8 max_dest_rd_atomic;__u8 min_rnr_timer;__u8 port_num;__u8 timeout;__u8 retry_cnt;__u8 rnr_retry;__u8 alt_port_num;__u8 alt_timeout;__u8 reserved[5];};
struct ib_uverbs_send_wr {__u64 wr_id;__u32 num_sge;__u32 opcode;__u32 send_flags;union ib_uverbs_send_wr___3DB9C648727C4FF416E200CBAEEA3871 ex;union ib_uverbs_send_wr___4F4DBB4A013B7CDDF32B22AB6FF4564A wr;};
struct media_entity_desc {__u32 id;char name[32];__u32 type;__u32 revision;__u32 flags;__u32 group_id;__u16 pads;__u16 links;__u32 reserved[4];media_entity_desc___9E42CBFF0EED595DF14563FE61FEA7B4 __anonymous0;};
struct rwrt_feature_desc {__be16 feature_code;unsigned __int8 reserved1 : 2;unsigned __int8 feature_version : 4;unsigned __int8 persistent : 1;unsigned __int8 curr : 1;__u8 add_len;__u32 last_lba;__u32 block_size;__u16 blocking;unsigned __int8 reserved2 : 7;unsigned __int8 page_present : 1;__u8 reserved3;};
struct sctp_assoc_change {__u16 sac_type;__u16 sac_flags;__u32 sac_length;__u16 sac_state;__u16 sac_error;__u16 sac_outbound_streams;__u16 sac_inbound_streams;sctp_assoc_t sac_assoc_id;__u8 sac_info[];};
struct __attribute__((packed)) __attribute__((aligned(4))) sctp_paddr_change {__u16 spc_type;__u16 spc_flags;__u32 spc_length;struct sockaddr_storage spc_aaddr;int spc_state;int spc_error;sctp_assoc_t spc_assoc_id;};
struct sctp_remote_error {__u16 sre_type;__u16 sre_flags;__u32 sre_length;__u16 sre_error;sctp_assoc_t sre_assoc_id;__u8 sre_data[];};
struct xcb_xkb_section_t {xcb_atom_t name;int16_t top;int16_t left;uint16_t width;uint16_t height;int16_t angle;uint8_t priority;uint8_t nRows;uint8_t nDoodads;uint8_t nOverlays;uint8_t pad0[2];};
struct xfrm_user_migrate {xfrm_address_t old_daddr;xfrm_address_t old_saddr;xfrm_address_t new_daddr;xfrm_address_t new_saddr;__u8 proto;__u8 mode;__u16 reserved;__u32 reqid;__u16 old_family;__u16 new_family;};
struct _ShapeRectangles {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 op;CARD8 destKind;CARD8 ordering;CARD8 pad0;CARD32 dest;INT16 xOff;INT16 yOff;};
struct ib_user_path_rec {__u8 dgid[16];__u8 sgid[16];__be16 dlid;__be16 slid;__u32 raw_traffic;__be32 flow_label;__u32 reversible;__u32 mtu;__be16 pkey;__u8 hop_limit;__u8 traffic_class;__u8 numb_path;__u8 sl;__u8 mtu_selector;__u8 rate_selector;__u8 rate;__u8 packet_life_time_selector;__u8 packet_life_time;__u8 preference;};
struct ip_vs_dest_entry {__be32 addr;__be16 port;unsigned int conn_flags;int weight;__u32 u_threshold;__u32 l_threshold;__u32 activeconns;__u32 inactconns;__u32 persistconns;struct ip_vs_stats_user stats;};
struct jffs2_raw_dirent {jint16_t magic;jint16_t nodetype;jint32_t totlen;jint32_t hdr_crc;jint32_t pino;jint32_t version;jint32_t ino;jint32_t mctime;__u8 nsize;__u8 type;__u8 unused[2];jint32_t node_crc;jint32_t name_crc;__u8 name[];};
struct mdp_superblock_1 {__le32 magic;__le32 major_version;__le32 feature_map;__le32 pad0;__u8 set_uuid[16];char set_name[32];__le64 ctime;__le32 level;__le32 layout;__le64 size;__le32 chunksize;__le32 raid_disks;__le32 bitmap_offset;__le32 new_level;__le64 reshape_position;__le32 delta_disks;__le32 new_layout;__le32 new_chunk;__le32 new_offset;__le64 data_offset;__le64 data_size;__le64 super_offset;__le64 recovery_offset;__le32 dev_number;__le32 cnt_corrected_read;__u8 device_uuid[16];__u8 devflags;__u8 bblog_shift;__le16 bblog_size;__le32 bblog_offset;__le64 utime;__le64 events;__le64 resync_offset;__le32 sb_csum;__le32 max_dev;__u8 pad3[32];__le16 dev_roles[];};
struct __attribute__((packed)) __attribute__((aligned(4))) sctp_paddrparams {sctp_assoc_t spp_assoc_id;struct sockaddr_storage spp_address;__u32 spp_hbinterval;__u16 spp_pathmaxrxt;__u32 spp_pathmtu;__u32 spp_sackdelay;__u32 spp_flags;};
struct signalfd_siginfo {uint32_t ssi_signo;int32_t ssi_errno;int32_t ssi_code;uint32_t ssi_pid;uint32_t ssi_uid;int32_t ssi_fd;uint32_t ssi_tid;uint32_t ssi_band;uint32_t ssi_overrun;uint32_t ssi_trapno;int32_t ssi_status;int32_t ssi_int;uint64_t ssi_ptr;uint64_t ssi_utime;uint64_t ssi_stime;uint64_t ssi_addr;uint8_t __pad[48];};
struct spi_ioc_transfer {__u64 tx_buf;__u64 rx_buf;__u32 len;__u32 speed_hz;__u16 delay_usecs;__u8 bits_per_word;__u8 cs_change;__u32 pad;};
struct xcb_visualtype_t {xcb_visualid_t visual_id;uint8_t _class;uint8_t bits_per_rgb_value;uint16_t colormap_entries;uint32_t red_mask;uint32_t green_mask;uint32_t blue_mask;uint8_t pad0[4];};
struct SVCXPRT__xp_ops {bool_t (*xp_recv)(SVCXPRT *xprt, struct rpc_msg *msg);enum xprt_stat (*xp_stat)(SVCXPRT *xprt);bool_t (*xp_getargs)(SVCXPRT *xprt, xdrproc_t xdr_args, caddr_t args_ptr);bool_t (*xp_reply)(SVCXPRT *xprt, struct rpc_msg *msg);bool_t (*xp_freeargs)(SVCXPRT *xprt, xdrproc_t xdr_args, caddr_t args_ptr);void (*xp_destroy)(SVCXPRT *xprt);};
union _LUNAddr_struct {__u8 LunAddrBytes[8];SCSI3Addr_struct SCSI3Lun[4];PhysDevAddr_struct PhysDev;LogDevAddr_struct LogDev;};
struct _LbxGetProperty {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 delete;BYTE pad[3];CARD32 longOffset;CARD32 longLength;};
struct _xkbNamesNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 changed;CARD8 firstType;CARD8 nTypes;CARD8 firstLevelName;CARD8 nLevelNames;CARD8 pad2;CARD8 nRadioGroups;CARD8 nAliases;CARD8 changedGroupNames;CARD16 changedVirtualMods;CARD8 firstKey;CARD8 nKeys;CARD32 changedIndicators;CARD32 pad3;};
struct _xkbRowWireDesc {INT16 top;INT16 left;CARD8 nKeys;BOOL vertical;CARD16 pad;};
struct jffs2_raw_inode {jint16_t magic;jint16_t nodetype;jint32_t totlen;jint32_t hdr_crc;jint32_t ino;jint32_t version;jmode_t mode;jint16_t uid;jint16_t gid;jint32_t isize;jint32_t atime;jint32_t mtime;jint32_t ctime;jint32_t offset;jint32_t csize;jint32_t dsize;__u8 compr;__u8 usercompr;jint16_t flags;jint32_t data_crc;jint32_t node_crc;__u8 data[];};
struct kvm_vcpu_events {struct kvm_vcpu_events___1CFDC73C128D5D93EB72FA493B7308C8 exception;kvm_vcpu_events___23BE99AFA671DB58DC2BAA381F92428C __anonymous0;struct kvm_vcpu_events___59E0C1196A233DB3DDF4599083599B26 nmi;__u32 sipi_vector;__u32 flags;__u32 reserved[10];};
struct msdos_dir_entry {__u8 name[11];__u8 attr;__u8 lcase;__u8 ctime_cs;__le16 ctime;__le16 cdate;__le16 adate;__le16 starthi;__le16 time;__le16 date;__le16 start;__le32 size;};
struct __attribute__((packed)) rds_info_socket {uint32_t sndbuf;__be32 bound_addr;__be32 connected_addr;__be16 bound_port;__be16 connected_port;uint32_t rcvbuf;uint64_t inum;};
struct sockaddr_l2tpip {__kernel_sa_family_t l2tp_family;__be16 l2tp_unused;struct in_addr l2tp_addr;__u32 l2tp_conn_id;unsigned __int8 __pad[4];};
struct PartitionBlock {__be32 pb_ID;__be32 pb_SummedLongs;__s32 pb_ChkSum;__u32 pb_HostID;__be32 pb_Next;__u32 pb_Flags;__u32 pb_Reserved1[2];__u32 pb_DevFlags;__u8 pb_DriveName[32];__u32 pb_Reserved2[15];__be32 pb_Environment[17];__u32 pb_EReserved[15];};
struct _XkbBellNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;int percent;int pitch;int duration;int bell_class;int bell_id;Atom name;Window window;int event_only;};
struct atmtcp_control {struct atmtcp_hdr hdr;int type;atm_kptr_t vcc;struct sockaddr_atmpvc addr;struct atm_qos qos;int result;};
struct authunix_parms {u_long aup_time;char *aup_machname;__uid_t aup_uid;__gid_t aup_gid;u_int aup_len;__gid_t *aup_gids;};
struct dlm_plock_info {__u32 version[3];__u8 optype;__u8 ex;__u8 wait;__u8 flags;__u32 pid;__s32 nodeid;__s32 rv;__u32 fsid;__u64 number;__u64 start;__u64 end;__u64 owner;};
struct ncp_mount_data {int version;unsigned int ncp_fd;__kernel_uid_t mounted_uid;__kernel_pid_t wdog_pid;unsigned __int8 mounted_vol[17];unsigned int time_out;unsigned int retry_count;unsigned int flags;__kernel_uid_t uid;__kernel_gid_t gid;__kernel_mode_t file_mode;__kernel_mode_t dir_mode;};
struct __attribute__((packed)) __attribute__((aligned(4))) sctp_paddrinfo {sctp_assoc_t spinfo_assoc_id;struct sockaddr_storage spinfo_address;__s32 spinfo_state;__u32 spinfo_cwnd;__u32 spinfo_srtt;__u32 spinfo_rto;__u32 spinfo_mtu;};
struct v4l2_queryctrl {__u32 id;__u32 type;__u8 name[32];__s32 minimum;__s32 maximum;__s32 step;__s32 default_value;__u32 flags;__u32 reserved[2];};
struct xfrm_usersa_id {xfrm_address_t daddr;__be32 spi;__u16 family;__u8 proto;};
struct _ShapeCombine {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 op;CARD8 destKind;CARD8 srcKind;CARD8 junk;CARD32 dest;INT16 xOff;INT16 yOff;CARD32 src;};
struct _xkbMapNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 ptrBtnActions;CARD16 changed;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD16 virtualMods;CARD16 pad1;};
struct dlm_lock_data {__u16 version;__u32 lockspace_id;int nodeid;int ownpid;__u32 id;__u32 remid;__u64 xid;__s8 status;__s8 grmode;__s8 rqmode;unsigned __int64 timestamp;int resource_namelen;char resource_name[64];};
struct kvm_ioeventfd {__u64 datamatch;__u64 addr;__u32 len;__s32 fd;__u32 flags;__u8 pad[36];};
struct xcb_xkb_key_t {xcb_xkb_string8_t name[4];int16_t gap;uint8_t shapeNdx;uint8_t colorNdx;};
typedef int (*NextLfwiFunc)(pointer client, FontPathElementPtr fpe, char **name, int *namelen, FontInfoPtr *info, int *numFonts, pointer c_private);
struct _FillPolyReq {CARD8 reqType;BYTE pad;CARD16 length;CARD32 drawable;CARD32 gc;BYTE shape;BYTE coordMode;CARD16 pad1;};
struct _PutImageReq {CARD8 reqType;CARD8 format;CARD16 length;CARD32 drawable;CARD32 gc;CARD16 width;CARD16 height;INT16 dstX;INT16 dstY;CARD8 leftPad;CARD8 depth;CARD16 pad;};
struct _ShapeNotify {BYTE type;BYTE kind;CARD16 sequenceNumber;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 time;BYTE shaped;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _ShapeOffset {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 destKind;CARD8 junk1;CARD16 junk2;CARD32 dest;INT16 xOff;INT16 yOff;};
struct _ShmGetImage {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;CARD8 format;CARD8 pad0;CARD8 pad1;CARD8 pad2;CARD32 shmseg;CARD32 offset;};
struct _ShmPutImage {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 drawable;CARD32 gc;CARD16 totalWidth;CARD16 totalHeight;CARD16 srcX;CARD16 srcY;CARD16 srcWidth;CARD16 srcHeight;INT16 dstX;INT16 dstY;CARD8 depth;CARD8 format;CARD8 sendEvent;CARD8 bpad;CARD32 shmseg;CARD32 offset;};
struct _XkbNamesRec {Atom keycodes;Atom geometry;Atom symbols;Atom types;Atom compat;Atom vmods[16];Atom indicators[32];Atom groups[4];XkbKeyNamePtr keys;XkbKeyAliasPtr key_aliases;Atom *radio_groups;Atom phys_symbols;unsigned __int8 num_keys;unsigned __int8 num_key_aliases;unsigned __int16 num_rg;};
struct __gconv_step {struct __gconv_loaded_object *__shlib_handle;const char *__modname;int __counter;char *__from_name;char *__to_name;__gconv_fct __fct;__gconv_btowc_fct __btowc_fct;__gconv_init_fct __init_fct;__gconv_end_fct __end_fct;int __min_needed_from;int __max_needed_from;int __min_needed_to;int __max_needed_to;int __stateful;void *__data;};
struct _xkbAnyEvent {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct audio_status {int AV_sync_state;int mute_state;audio_play_state_t play_state;audio_stream_source_t stream_source;audio_channel_select_t channel_select;int bypass_mode;audio_mixer_t mixer_state;};
struct bcm_msg_head {__u32 opcode;__u32 flags;__u32 count;struct timeval ival1;struct timeval ival2;canid_t can_id;__u32 nframes;struct can_frame frames[];};
struct dl_phdr_info {Elf64_Addr dlpi_addr;const char *dlpi_name;const Elf64_Phdr *dlpi_phdr;Elf64_Half dlpi_phnum;unsigned __int64 dlpi_adds;unsigned __int64 dlpi_subs;size_t dlpi_tls_modid;void *dlpi_tls_data;};
struct elf_prstatus {struct elf_siginfo pr_info;__int16 pr_cursig;unsigned __int64 pr_sigpend;unsigned __int64 pr_sighold;__pid_t pr_pid;__pid_t pr_ppid;__pid_t pr_pgrp;__pid_t pr_sid;struct timeval pr_utime;struct timeval pr_stime;struct timeval pr_cutime;struct timeval pr_cstime;elf_gregset_t pr_reg;int pr_fpvalid;};
struct in_ctrl_info {__u8 Last_NHRP_CIE_code;__u8 Last_Q2931_cause_value;__u8 eg_MPC_ATM_addr[20];__be32 tag;__be32 in_dst_ip;__u16 holding_time;__u32 request_id;};
struct __attribute__((packed)) setup_header {__u8 setup_sects;__u16 root_flags;__u32 syssize;__u16 ram_size;__u16 vid_mode;__u16 root_dev;__u16 boot_flag;__u16 jump;__u32 header;__u16 version;__u32 realmode_swtch;__u16 start_sys;__u16 kernel_version;__u8 type_of_loader;__u8 loadflags;__u16 setup_move_size;__u32 code32_start;__u32 ramdisk_image;__u32 ramdisk_size;__u32 bootsect_kludge;__u16 heap_end_ptr;__u8 ext_loader_ver;__u8 ext_loader_type;__u32 cmd_line_ptr;__u32 initrd_addr_max;__u32 kernel_alignment;__u8 relocatable_kernel;__u8 min_alignment;__u16 xloadflags;__u32 cmdline_size;__u32 hardware_subarch;__u64 hardware_subarch_data;__u32 payload_offset;__u32 payload_length;__u64 setup_data;__u64 pref_address;__u32 init_size;__u32 handover_offset;};
struct sockaddr_ipx {sa_family_t sipx_family;u_int16_t sipx_port;u_int32_t sipx_network;unsigned __int8 sipx_node[6];u_int8_t sipx_type;unsigned __int8 sipx_zero;};
struct video_status {int video_blank;video_play_state_t play_state;video_stream_source_t stream_source;video_format_t video_format;video_displayformat_t display_format;};
union COFF_auxent {struct COFF_auxent___8BBA864C406C799E487F50DA03CFED8B x_sym;union COFF_auxent___A007460A5209B8A49642556855958EDD x_file;struct COFF_auxent___DEE18EBA7EBA49272E803725DF2433AA x_scn;struct COFF_auxent___0711A204FF8D49621BD1F59D962A7168 x_tv;};
struct _SetBugMode {CARD8 reqType;CARD8 mitReqType;CARD16 length;BOOL onOff;BYTE pad0;CARD16 pad1;};
struct _XkbKeyType {XkbModsRec mods;unsigned __int8 num_levels;unsigned __int8 map_count;XkbKTMapEntryPtr map;XkbModsPtr preserve;Atom name;Atom *level_names;};
struct _XkbOverlay {Atom name;XkbSectionPtr section_under;unsigned __int16 num_rows;unsigned __int16 sz_rows;XkbOverlayRowPtr rows;XkbBoundsPtr bounds;};
struct _XkbSection {Atom name;unsigned __int8 priority;__int16 top;__int16 left;unsigned __int16 width;unsigned __int16 height;__int16 angle;unsigned __int16 num_rows;unsigned __int16 num_doodads;unsigned __int16 num_overlays;unsigned __int16 sz_rows;unsigned __int16 sz_doodads;unsigned __int16 sz_overlays;XkbRowPtr rows;XkbDoodadPtr doodads;XkbBoundsRec bounds;struct _XkbOverlay *overlays;};
struct __port_info {__u64 designated_root;__u64 designated_bridge;__u16 port_id;__u16 designated_port;__u32 path_cost;__u32 designated_cost;__u8 state;__u8 top_change_ack;__u8 config_pending;__u8 unused0;__u32 message_age_timer_value;__u32 forward_delay_timer_value;__u32 hold_timer_value;};
struct gfs2_rindex {__be64 ri_addr;__be32 ri_length;__u32 __pad;__be64 ri_data0;__be32 ri_data;__be32 ri_bitbytes;__u8 ri_reserved[64];};
struct kvm_segment {__u64 base;__u32 limit;__u16 selector;__u8 type;__u8 present;__u8 dpl;__u8 db;__u8 s;__u8 l;__u8 g;__u8 avl;__u8 unusable;__u8 padding;};
struct sockaddr_dn {__u16 sdn_family;__u8 sdn_flags;__u8 sdn_objnum;__le16 sdn_objnamel;__u8 sdn_objname[16];struct dn_naddr sdn_add;};
struct v4l2_buffer {__u32 index;__u32 type;__u32 bytesused;__u32 flags;__u32 field;struct timeval timestamp;struct v4l2_timecode timecode;__u32 sequence;__u32 memory;union v4l2_buffer___60C6B35876E0AE46B602D9AFD0188855 m;__u32 length;__u32 reserved2;__u32 reserved;};
struct v4l2_output {__u32 index;__u8 name[32];__u32 type;__u32 audioset;__u32 modulator;v4l2_std_id std;__u32 capabilities;__u32 reserved[3];};
struct xcb_setup_t {uint8_t status;uint8_t pad0;uint16_t protocol_major_version;uint16_t protocol_minor_version;uint16_t length;uint32_t release_number;uint32_t resource_id_base;uint32_t resource_id_mask;uint32_t motion_buffer_size;uint16_t vendor_len;uint16_t maximum_request_length;uint8_t roots_len;uint8_t pixmap_formats_len;uint8_t image_byte_order;uint8_t bitmap_format_bit_order;uint8_t bitmap_format_scanline_unit;uint8_t bitmap_format_scanline_pad;xcb_keycode_t min_keycode;xcb_keycode_t max_keycode;uint8_t pad1[4];};
struct ypmap_parms {domainname domain;mapname map;u_int ordernum;peername peer;};
struct _ShapeMask {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 op;CARD8 destKind;CARD16 junk;CARD32 dest;INT16 xOff;INT16 yOff;CARD32 src;};
struct _XevieSend {CARD8 reqType;CARD8 xevieReqType;CARD16 length;xEvent event;CARD32 dataType;};
struct elf64_phdr {Elf64_Word __p_type;Elf64_Word p_flags;Elf64_Off p_offset;Elf64_Addr p_vaddr;Elf64_Addr p_paddr;Elf64_Xword p_filesz;Elf64_Xword p_memsz;Elf64_Xword p_align;};
struct elf64_shdr {Elf64_Word sh_name;Elf64_Word sh_type;Elf64_Xword sh_flags;Elf64_Addr sh_addr;Elf64_Off sh_offset;Elf64_Xword sh_size;Elf64_Word sh_link;Elf64_Word sh_info;Elf64_Xword sh_addralign;Elf64_Xword sh_entsize;};
struct ib_ucm_req {__u32 id;__u32 qpn;__u32 qp_type;__u32 psn;__be64 sid;__u64 data;__u64 primary_path;__u64 alternate_path;__u8 len;__u8 peer_to_peer;__u8 responder_resources;__u8 initiator_depth;__u8 remote_cm_response_timeout;__u8 flow_control;__u8 local_cm_response_timeout;__u8 retry_count;__u8 rnr_retry_count;__u8 max_cm_retries;__u8 srq;__u8 reserved[5];};
struct ipc64_perm {__kernel_key_t key;__kernel_uid32_t uid;__kernel_gid32_t gid;__kernel_uid32_t cuid;__kernel_gid32_t cgid;__kernel_mode_t mode;unsigned __int8 __pad1[];unsigned __int16 seq;unsigned __int16 __pad2;unsigned __int64 __unused1;unsigned __int64 __unused2;};
struct shmid64_ds {struct ipc64_perm shm_perm;size_t shm_segsz;__kernel_time_t shm_atime;__kernel_time_t shm_dtime;__kernel_time_t shm_ctime;__kernel_pid_t shm_cpid;__kernel_pid_t shm_lpid;unsigned __int64 shm_nattch;unsigned __int64 __unused4;unsigned __int64 __unused5;};
struct tcp_md5sig {struct sockaddr_storage tcpm_addr;u_int16_t __tcpm_pad1;u_int16_t tcpm_keylen;u_int32_t __tcpm_pad2;u_int8_t tcpm_key[80];};
struct v4l2_input {__u32 index;__u8 name[32];__u32 type;__u32 audioset;__u32 tuner;v4l2_std_id std;__u32 status;__u32 capabilities;__u32 reserved[3];};
struct v4l2_tuner {__u32 index;__u8 name[32];__u32 type;__u32 capability;__u32 rangelow;__u32 rangehigh;__u32 rxsubchans;__u32 audmode;__s32 signal;__s32 afc;__u32 reserved[4];};
struct _xt_align {__u8 u8;__u16 u16;__u32 u32;__u64 u64;};
struct bfs_inode {__le16 i_ino;__u16 i_unused;__le32 i_sblock;__le32 i_eblock;__le32 i_eoffset;__le32 i_vtype;__le32 i_mode;__le32 i_uid;__le32 i_gid;__le32 i_nlink;__le32 i_atime;__le32 i_mtime;__le32 i_ctime;__u32 i_padding[4];};
struct elf32_hdr {unsigned __int8 e_ident[16];Elf32_Half e_type;Elf32_Half e_machine;Elf32_Word e_version;Elf32_Addr e_entry;Elf32_Off e_phoff;Elf32_Off e_shoff;Elf32_Word e_flags;Elf32_Half e_ehsize;Elf32_Half e_phentsize;Elf32_Half e_phnum;Elf32_Half e_shentsize;Elf32_Half e_shnum;Elf32_Half e_shstrndx;};
struct elf64_hdr {unsigned __int8 e_ident[16];Elf64_Half e_type;Elf64_Half e_machine;Elf64_Word e_version;Elf64_Addr e_entry;Elf64_Off e_phoff;Elf64_Off e_shoff;Elf64_Word e_flags;Elf64_Half e_ehsize;Elf64_Half e_phentsize;Elf64_Half e_phnum;Elf64_Half e_shentsize;Elf64_Half e_shnum;Elf64_Half e_shstrndx;};
struct elf64_sym {Elf64_Word st_name;unsigned __int8 st_info;unsigned __int8 st_other;Elf64_Half st_shndx;Elf64_Addr st_value;Elf64_Xword st_size;};
struct rex_start {struct rex_start___4E8F7DC4996D24194F1417703DE27DA2 rst_cmd;rexstring rst_host;rexstring rst_fsname;rexstring rst_dirwithin;struct rex_start___27D82728F37DDE14700CB9E3D9A87412 rst_env;u_int rst_port0;u_int rst_port1;u_int rst_port2;u_int rst_flags;};
struct __attribute__((packed)) sadb_comb {__u8 sadb_comb_auth;__u8 sadb_comb_encrypt;__u16 sadb_comb_flags;__u16 sadb_comb_auth_minbits;__u16 sadb_comb_auth_maxbits;__u16 sadb_comb_encrypt_minbits;__u16 sadb_comb_encrypt_maxbits;__u32 sadb_comb_reserved;__u32 sadb_comb_soft_allocations;__u32 sadb_comb_hard_allocations;__u64 sadb_comb_soft_bytes;__u64 sadb_comb_hard_bytes;__u64 sadb_comb_soft_addtime;__u64 sadb_comb_hard_addtime;__u64 sadb_comb_soft_usetime;__u64 sadb_comb_hard_usetime;};
struct taskstats {__u16 version;__u32 ac_exitcode;__u8 ac_flag;__u8 ac_nice;__attribute__((aligned(8))) __u64 cpu_count;__u64 cpu_delay_total;__u64 blkio_count;__u64 blkio_delay_total;__u64 swapin_count;__u64 swapin_delay_total;__u64 cpu_run_real_total;__u64 cpu_run_virtual_total;char ac_comm[32];__attribute__((aligned(8))) __u8 ac_sched;__u8 ac_pad[3];__attribute__((aligned(8))) __u32 ac_uid;__u32 ac_gid;__u32 ac_pid;__u32 ac_ppid;__u32 ac_btime;__attribute__((aligned(8))) __u64 ac_etime;__u64 ac_utime;__u64 ac_stime;__u64 ac_minflt;__u64 ac_majflt;__u64 coremem;__u64 virtmem;__u64 hiwater_rss;__u64 hiwater_vm;__u64 read_char;__u64 write_char;__u64 read_syscalls;__u64 write_syscalls;__u64 read_bytes;__u64 write_bytes;__u64 cancelled_write_bytes;__u64 nvcsw;__u64 nivcsw;__u64 ac_utimescaled;__u64 ac_stimescaled;__u64 cpu_scaled_run_real_total;__u64 freepages_count;__u64 freepages_delay_total;};
struct _IO_FILE {int _flags;char *_IO_read_ptr;char *_IO_read_end;char *_IO_read_base;char *_IO_write_base;char *_IO_write_ptr;char *_IO_write_end;char *_IO_buf_base;char *_IO_buf_end;char *_IO_save_base;char *_IO_backup_base;char *_IO_save_end;struct _IO_marker *_markers;struct _IO_FILE *_chain;int _fileno;int _flags2;__off_t _old_offset;unsigned __int16 _cur_column;signed __int8 _vtable_offset;char _shortbuf[1];_IO_lock_t *_lock;__off64_t _offset;void *__pad1;void *__pad2;void *__pad3;void *__pad4;size_t __pad5;int _mode;char _unused2[20];};
struct _i2o_hrt {__u16 num_entries;__u8 entry_len;__u8 hrt_version;__u32 change_ind;i2o_hrt_entry hrt_entry[1];};
struct dm_ioctl {__u32 version[3];__u32 data_size;__u32 data_start;__u32 target_count;__s32 open_count;__u32 flags;__u32 event_nr;__u32 padding;__u64 dev;char name[128];char uuid[129];char data[7];};
struct formnode {unsigned __int16 status;__int16 rows;__int16 cols;int currow;int curcol;int toprow;int begincol;__int16 maxfield;__int16 maxpage;__int16 curpage;Form_Options opts;WINDOW *win;WINDOW *sub;WINDOW *w;FIELD **field;FIELD *current;_PAGE *page;void *usrptr;void (*forminit)(struct formnode *);void (*formterm)(struct formnode *);void (*fieldinit)(struct formnode *);void (*fieldterm)(struct formnode *);};
struct ipc_perm {__key_t __key;__uid_t uid;__gid_t gid;__uid_t cuid;__gid_t cgid;unsigned __int16 mode;unsigned __int16 __pad1;unsigned __int16 __seq;unsigned __int16 __pad2;__syscall_ulong_t __unused1;__syscall_ulong_t __unused2;};
struct statfs64 {__fsword_t f_type;__fsword_t f_bsize;__fsblkcnt64_t f_blocks;__fsblkcnt64_t f_bfree;__fsblkcnt64_t f_bavail;__fsfilcnt64_t f_files;__fsfilcnt64_t f_ffree;__fsid_t f_fsid;__fsword_t f_namelen;__fsword_t f_frsize;__fsword_t f_flags;__fsword_t f_spare[4];};
struct SVCXPRT {int xp_sock;u_short xp_port;const struct SVCXPRT__xp_ops *xp_ops;int xp_addrlen;struct sockaddr_in xp_raddr;struct opaque_auth xp_verf;caddr_t xp_p1;caddr_t xp_p2;char xp_pad[256];};
struct __ns_rr {char name[1025];u_int16_t type;u_int16_t rr_class;u_int32_t ttl;u_int16_t rdlength;const u_char *rdata;};
struct _ftsent {struct _ftsent *fts_cycle;struct _ftsent *fts_parent;struct _ftsent *fts_link;__int64 fts_number;void *fts_pointer;char *fts_accpath;char *fts_path;int fts_errno;int fts_symfd;u_short fts_pathlen;u_short fts_namelen;ino_t fts_ino;dev_t fts_dev;nlink_t fts_nlink;__int16 fts_level;u_short fts_info;u_short fts_flags;u_short fts_instr;struct stat *fts_statp;char fts_name[1];};
struct aiocb64 {int aio_fildes;int aio_lio_opcode;int aio_reqprio;void *aio_buf;size_t aio_nbytes;struct sigevent aio_sigevent;struct aiocb *__next_prio;int __abs_prio;int __policy;int __error_code;__ssize_t __return_value;__off64_t aio_offset;char __unused[32];};
struct __attribute__((packed)) cld_msg {uint8_t cm_vers;uint8_t cm_cmd;int16_t cm_status;uint32_t cm_xid;__attribute__((packed)) union cld_msg___4B56EB8A9D6FEFEB7556C99AA13CA4F5 cm_u;};
struct kvm_fpu {__u8 fpr[8][16];__u16 fcw;__u16 fsw;__u8 ftwx;__u8 pad1;__u16 last_opcode;__u64 last_ip;__u64 last_dp;__u8 xmm[16][16];__u32 mxcsr;__u32 pad2;};
struct __attribute__((packed)) sadb_sa {__u16 sadb_sa_len;__u16 sadb_sa_exttype;__be32 sadb_sa_spi;__u8 sadb_sa_replay;__u8 sadb_sa_state;__u8 sadb_sa_auth;__u8 sadb_sa_encrypt;__u32 sadb_sa_flags;};
struct sysinfo {__kernel_long_t uptime;__kernel_ulong_t loads[3];__kernel_ulong_t totalram;__kernel_ulong_t freeram;__kernel_ulong_t sharedram;__kernel_ulong_t bufferram;__kernel_ulong_t totalswap;__kernel_ulong_t freeswap;__u16 procs;__u16 pad;__kernel_ulong_t totalhigh;__kernel_ulong_t freehigh;__u32 mem_unit;char _f[];};
struct cn_msg {struct cb_id id;__u32 seq;__u32 ack;__u16 len;__u16 flags;__u8 data[];};
struct statfs {__fsword_t f_type;__fsword_t f_bsize;__fsblkcnt_t f_blocks;__fsblkcnt_t f_bfree;__fsblkcnt_t f_bavail;__fsfilcnt_t f_files;__fsfilcnt_t f_ffree;__fsid_t f_fsid;__fsword_t f_namelen;__fsword_t f_frsize;__fsword_t f_flags;__fsword_t f_spare[4];};
struct aiocb {int aio_fildes;int aio_lio_opcode;int aio_reqprio;void *aio_buf;size_t aio_nbytes;struct sigevent aio_sigevent;struct aiocb *__next_prio;int __abs_prio;int __policy;int __error_code;__ssize_t __return_value;__off_t aio_offset;char __pad[];char __unused[32];};
struct utmpx {__int16 ut_type;__pid_t ut_pid;char ut_line[32];char ut_id[4];char ut_user[32];char ut_host[256];struct __exit_status ut_exit;__int32_t ut_session;struct utmpx___4FC64FD635E0E5C6E29ADA80B3E686D5 ut_tv;__int32_t ut_addr_v6[4];char __unused[20];};
struct user {struct user_regs_struct regs;int u_fpvalid;struct user_fpregs_struct i387;unsigned __int64 u_tsize;unsigned __int64 u_dsize;unsigned __int64 u_ssize;unsigned __int64 start_code;unsigned __int64 start_stack;__int64 signal;int reserved;user___14E988142F1DB33DBF0B6F42088802D2 __anonymous0;user___1E59340A5D06056FAFB2C11BCCCBF73A __anonymous1;unsigned __int64 magic;char u_comm[32];unsigned __int64 u_debugreg[8];};
struct utmp {__int16 ut_type;pid_t ut_pid;char ut_line[32];char ut_id[4];char ut_user[32];char ut_host[256];struct exit_status ut_exit;int32_t ut_session;struct utmp___D1644BFB760C8D02595F7CD5DC7921A3 ut_tv;int32_t ut_addr_v6[4];char __unused[20];};
struct mce {__u64 status;__u64 misc;__u64 addr;__u64 mcgstatus;__u64 ip;__u64 tsc;__u64 time;__u8 cpuvendor;__u8 inject_flags;__u16 pad;__u32 cpuid;__u8 cs;__u8 bank;__u8 cpu;__u8 finished;__u32 extcpu;__u32 socketid;__u32 apicid;__u64 mcgcap;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___06CC3EE1C785FF4C65A358F81D4770E3 {CARD32 pad00;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BOOL sameScreen;BYTE pad1;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F0E773388BCCF7D4D022A846E01785CC {CARD32 pad00;CARD32 event;CARD32 window;CARD32 aboveSibling;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BOOL override;BYTE bpad;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F0EDD24BB588AB1974F0CC5CC47343A0 {CARD32 pad00;CARD32 parent;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BOOL override;BYTE bpad;};
union ethtool_rx_ntuple_flow_spec___49C1EC9C75B2A393400303E9A6ECBAF2 {struct ethtool_tcpip4_spec tcp_ip4_spec;struct ethtool_tcpip4_spec udp_ip4_spec;struct ethtool_tcpip4_spec sctp_ip4_spec;struct ethtool_ah_espip4_spec ah_ip4_spec;struct ethtool_ah_espip4_spec esp_ip4_spec;struct ethtool_usrip4_spec usr_ip4_spec;struct ethhdr ether_spec;__u8 hdata[72];};
union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351 {union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___C37227497D6F74F01EA58293C74B5A27 integer;union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___05719DDC85B8D2B16E2A67EB61F3015B integer64;union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___56EF40E009C635B406D22EE789E37734 enumerated;union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351___8AF31E8B5E1384F211913090B725D1EF bytes;struct snd_aes_iec958 iec958;};
union sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C {struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___1AAAF31CDB477A122FA4B8DB27C17EE4 at;struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___A2C680A566487F30C6207078F99D1152 util;union sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___E4FE2715AED4C6C7BAE0E08F234A7CEC dgm;struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___4F2B88AF6086A93C20CDE0CF8C7B9238 rfm;struct sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C___F08C5679DFE1125AD1988C42E32336AC dbg;};
struct xcb_xkb_get_kbd_by_name_replies_t___other_names {uint8_t otherDeviceID;uint32_t which;xcb_keycode_t otherMinKeyCode;xcb_keycode_t otherMaxKeyCode;uint8_t nTypes;uint8_t groupNames;uint16_t virtualMods;xcb_keycode_t firstKey;uint8_t nKeys;uint32_t indicators;uint8_t nRadioGroups;uint8_t nKeyAliases;uint16_t nKTLevels;uint8_t pad0[4];xcb_xkb_get_kbd_by_name_replies_other_names_value_list_t valueList;};
struct xcb_glx_get_compressed_tex_image_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;};
struct xcb_xfixes_create_region_from_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_window_t window;xcb_shape_kind_t kind;uint8_t pad0[3];};
struct xcb_xkb_get_kbd_by_name_replies_t___key_names {uint8_t keyDeviceID;uint32_t which;xcb_keycode_t keyMinKeyCode;xcb_keycode_t keyMaxKeyCode;uint8_t nTypes;uint8_t groupNames;uint16_t virtualMods;xcb_keycode_t firstKey;uint8_t nKeys;uint32_t indicators;uint8_t nRadioGroups;uint8_t nKeyAliases;uint16_t nKTLevels;uint8_t pad0[4];xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t valueList;};
struct xcb_glx_create_context_attribs_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;xcb_glx_fbconfig_t fbconfig;uint32_t screen;xcb_glx_context_t share_list;uint8_t is_direct;uint8_t pad0[3];uint32_t num_attribs;};
struct xcb_xfixes_get_cursor_image_and_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t xhot;uint16_t yhot;uint32_t cursor_serial;xcb_atom_t cursor_atom;uint16_t nbytes;uint8_t pad1[2];};
struct xcb_xfixes_set_picture_clip_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_xfixes_region_t region;int16_t x_origin;int16_t y_origin;};
struct xcb_glx_get_tex_level_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;uint32_t pname;};
struct xcb_glx_get_tex_level_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;uint32_t pname;};
struct xcb_xfixes_select_selection_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_atom_t selection;uint32_t event_mask;};
struct xcb_randr_change_output_property_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_atom_t property;xcb_atom_t type;uint8_t format;uint8_t mode;uint8_t pad0[2];uint32_t num_units;};
union archdr___4ABDB8A35AA038764FD59B8E94C5785D {struct arc_rfc1201 rfc1201;struct arc_rfc1051 rfc1051;struct arc_eth_encap eth_encap;struct arc_cap cap;__u8 raw[];};
struct xcb_xkb_get_kbd_by_name_replies_t___types {uint8_t getmap_type;uint8_t typeDeviceID;uint16_t getmap_sequence;uint32_t getmap_length;uint8_t pad0[2];xcb_keycode_t typeMinKeyCode;xcb_keycode_t typeMaxKeyCode;uint16_t present;uint8_t firstType;uint8_t nTypes;uint8_t totalTypes;xcb_keycode_t firstKeySym;uint16_t totalSyms;uint8_t nKeySyms;xcb_keycode_t firstKeyAction;uint16_t totalActions;uint8_t nKeyActions;xcb_keycode_t firstKeyBehavior;uint8_t nKeyBehaviors;uint8_t totalKeyBehaviors;xcb_keycode_t firstKeyExplicit;uint8_t nKeyExplicit;uint8_t totalKeyExplicit;xcb_keycode_t firstModMapKey;uint8_t nModMapKeys;uint8_t totalModMapKeys;xcb_keycode_t firstVModMapKey;uint8_t nVModMapKeys;uint8_t totalVModMapKeys;uint8_t pad1;uint16_t virtualMods;xcb_xkb_get_kbd_by_name_replies_types_map_t map;};
struct xcb_randr_get_output_property_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_output_t output;xcb_atom_t property;xcb_atom_t type;uint32_t long_offset;uint32_t long_length;uint8_t _delete;uint8_t pending;uint8_t pad0[2];};
struct xcb_xfixes_set_gc_clip_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_gcontext_t gc;xcb_xfixes_region_t region;int16_t x_origin;int16_t y_origin;};
struct xcb_glx_make_context_current_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t old_context_tag;xcb_glx_drawable_t drawable;xcb_glx_drawable_t read_drawable;xcb_glx_context_t context;};
struct xcb_record_register_clients_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;xcb_record_element_header_t element_header;uint8_t pad0[3];uint32_t num_client_specs;uint32_t num_ranges;};
struct xcb_glx_create_new_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;xcb_glx_fbconfig_t fbconfig;uint32_t screen;uint32_t render_type;xcb_glx_context_t share_list;uint8_t is_direct;uint8_t pad0[3];};
struct xcb_xvmc_create_subpicture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_subpicture_t subpicture_id;xcb_xvmc_context_t context;uint32_t xvimage_id;uint16_t width;uint16_t height;};
struct xcb_randr_set_screen_config_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;xcb_timestamp_t new_timestamp;xcb_timestamp_t config_timestamp;xcb_window_t root;uint16_t subpixel_order;uint8_t pad0[10];};
struct xcb_record_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;xcb_record_element_header_t element_header;uint8_t pad0[3];uint32_t num_client_specs;uint32_t num_ranges;};
struct xcb_xfixes_selection_notify_event_t {uint8_t response_type;uint8_t subtype;uint16_t sequence;xcb_window_t window;xcb_window_t owner;xcb_atom_t selection;xcb_timestamp_t timestamp;xcb_timestamp_t selection_timestamp;uint8_t pad0[8];};
struct xcb_xv_set_port_attribute_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_atom_t attribute;int32_t value;};
struct xcb_input_device_key_press_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;uint8_t device_id;};
struct xcb_input_get_device_focus_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t focus;xcb_timestamp_t time;uint8_t revert_to;uint8_t pad1[15];};
struct _03C803DDC9061B143F519D4D73BD5571 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 eventMask;BYTE pointerMode;BYTE keyboardMode;CARD32 confineTo;CARD32 cursor;CARD8 button;BYTE pad;CARD16 modifiers;};
struct _0F4B06D36BC906735A699C1D59FCE038 {BYTE type;BOOL sameScreen;CARD16 sequenceNumber;CARD32 length;CARD32 child;INT16 dstX;INT16 dstY;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _11DD07E0BD355014207FDEFC87674481 {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 buffer;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD8 unused0;CARD8 unused1;CARD8 unused2;BOOL exposures;};
struct _15146D0240F64972E1BB855D6E1C4620 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT32 priority;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _19D622DBC46A6E651ECC62511BF64658 {CARD8 reqType;CARD8 dbeReqType;CARD16 length;CARD32 window;xDbeBackBuffer buffer;xDbeSwapAction swapAction;CARD8 pad1;CARD16 pad2;};
struct _1BB85DE3512B339811D8B67FC16B212D {BYTE type;CARD8 deviceid;CARD16 sequenceNumber;KeyButMask device_state;CARD8 num_valuators;CARD8 first_valuator;INT32 valuator0;INT32 valuator1;INT32 valuator2;INT32 valuator3;INT32 valuator4;INT32 valuator5;};
struct _1CFFE104D7DFB51E74C0A01BE327DA92 {CARD8 reqType;BOOL range;CARD16 length;CARD32 fid;fsBitmapFormat format;CARD32 num_ranges;};
struct _20B3D843FDD34C018CF0822ABEE24A07 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;BOOL triggered;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _2A73BF0E4CA9808D683BEEEFEEB2900C {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 event_mask;};
struct _2A859DA02CD5E3593B5918B42FA7FFEB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 destination;CARD8 deviceid;BOOL propagate;CARD16 count;CARD8 num_events;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _2E669CC187FBBB2ECC14F5757D46E269 {Dwarf_Addr ld_lopc;Dwarf_Addr ld_hipc;Dwarf_Half ld_cents;Dwarf_Loc *ld_s;Dwarf_Small ld_from_loclist;Dwarf_Unsigned ld_section_offset;};
struct _37BE2491590EE7EB76B44447C3CB76CA {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 root;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _37CF6FD3D8604C440825361FBCF768B5 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 event_count;CARD16 modifiers;CARD8 modifier_device;CARD8 grabbed_device;CARD8 key;BYTE this_device_mode;BYTE other_devices_mode;BOOL ownerEvents;BYTE pad1;BYTE pad2;};
struct _3B81704CAFF80915670BCDC93E5E5502 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcDrawable;CARD32 dstDrawable;CARD32 gc;INT16 srcX;INT16 srcY;INT16 dstX;INT16 dstY;CARD16 width;CARD16 height;};
struct _3BE679DC1FFA371624A790DBC1F4853A {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 fontid;};
struct _3D6C9E6FC2A1930EF06F70ECE24ED2E6 {BYTE type;CARD8 nameLength;CARD16 sequenceNumber;CARD32 length;CARD32 nReplies;CARD32 font_header_flags;CARD8 font_hdr_char_range_min_char_high;CARD8 font_hdr_char_range_min_char_low;CARD8 font_hdr_char_range_max_char_high;CARD8 font_hdr_char_range_max_char_low;CARD8 font_header_draw_direction;CARD8 font_header_pad;CARD8 font_header_default_char_high;CARD8 font_header_default_char_low;INT16 font_header_min_bounds_left;INT16 font_header_min_bounds_right;INT16 font_header_min_bounds_width;INT16 font_header_min_bounds_ascent;INT16 font_header_min_bounds_descent;CARD16 font_header_min_bounds_attributes;INT16 font_header_max_bounds_left;INT16 font_header_max_bounds_right;INT16 font_header_max_bounds_width;INT16 font_header_max_bounds_ascent;INT16 font_header_max_bounds_descent;CARD16 font_header_max_bounds_attributes;INT16 font_header_font_ascent;INT16 font_header_font_descent;};
struct _3E18A7AAF5D17F3F11EB968C0A78AED4 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 font_header_flags;CARD8 font_hdr_char_range_min_char_high;CARD8 font_hdr_char_range_min_char_low;CARD8 font_hdr_char_range_max_char_high;CARD8 font_hdr_char_range_max_char_low;CARD8 font_header_draw_direction;CARD8 font_header_pad;CARD8 font_header_default_char_high;CARD8 font_header_default_char_low;INT16 font_header_min_bounds_left;INT16 font_header_min_bounds_right;INT16 font_header_min_bounds_width;INT16 font_header_min_bounds_ascent;INT16 font_header_min_bounds_descent;CARD16 font_header_min_bounds_attributes;INT16 font_header_max_bounds_left;INT16 font_header_max_bounds_right;INT16 font_header_max_bounds_width;INT16 font_header_max_bounds_ascent;INT16 font_header_max_bounds_descent;CARD16 font_header_max_bounds_attributes;INT16 font_header_font_ascent;INT16 font_header_font_descent;};
struct _45331FD382D3B76DE50383933A2C35C9 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcDrawable;CARD32 dstDrawable;CARD32 gc;INT16 srcX;INT16 srcY;INT16 dstX;INT16 dstY;CARD16 width;CARD16 height;CARD32 bitPlane;};
struct _4F622AD2F1F50F32A9A86AA5D4320B7D {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xPointFixed inner;xPointFixed outer;INT32 inner_radius;INT32 outer_radius;CARD32 nStops;};
struct _53B2C5E872CF4691EFE90F887D66B7FD {CARD8 reqType;BOOL exposures;CARD16 length;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct _5763F2EC7349805D26B2ED34581CC2B6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD8 grabbed_device;CARD8 modifier_device;CARD16 event_count;CARD16 modifiers;BYTE this_device_mode;BYTE other_devices_mode;CARD8 button;BOOL ownerEvents;BYTE pad1;BYTE pad2;};
struct _5E29C5FF94304EAD83140C47151323A4 {CARD8 reqType;BYTE ordering;CARD16 length;CARD32 gc;INT16 xOrigin;INT16 yOrigin;};
struct _5F6963A5B3CCD1D3B53748FF8C021BB0 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT16 width;INT16 height;INT16 shiftX;INT16 shiftY;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _616DFE8EE921B679729534094133FEFF {BYTE type;BOOL sameScreen;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 child;INT16 rootX;INT16 rootY;INT16 winX;INT16 winY;CARD16 mask;CARD16 pad1;CARD32 pad;};
struct _67BA815F7CB0308CE8EF90A300D23A50 {CARD8 c_class;CARD8 id;CARD16 length;INT8 percent;BYTE pad1;BYTE pad2;BYTE pad3;INT16 pitch;INT16 duration;};
struct _69EBDB3A774B1AFC7F282884D9B780FC {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 bad_length;};
struct _6B88FAC29A9971BB7647F24C04F63FBE {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD8 vendorLength;CARD8 modelLength;CARD8 nhsync;CARD8 nvsync;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _6B8E614C81B948CB69ED41556D403C37 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 displayNameLength;CARD32 logicalScreen;CARD16 screenWindowWidth;CARD16 screenWindowHeight;INT16 screenWindowXoffset;INT16 screenWindowYoffset;CARD16 rootWindowWidth;CARD16 rootWindowHeight;INT16 rootWindowXoffset;INT16 rootWindowYoffset;INT16 rootWindowXorigin;INT16 rootWindowYorigin;};
struct _7250734D77F79F0949305E641023FE62 {CARD8 reqType;BOOL propagate;CARD16 length;CARD32 destination;CARD32 eventMask;xEvent event;};
struct _79FC17A0C7A3F31E1105D33CC8C2AA30 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 eventMask;BYTE pointerMode;BYTE keyboardMode;CARD32 confineTo;CARD32 cursor;CARD32 time;};
struct _7AC6EBFF84C7D5C6D4B5835EAB8E1003 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 inputType;CARD32 physicalScreen;CARD32 physicalId;CARD32 nameLength;BOOL isCore;BOOL sendsCore;BOOL detached;CARD8 pad0;CARD32 pad1;};
struct _81227E6A2E975B2588700A3A20196845 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 power_level;BOOL state;CARD8 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _8BBFFC8A8A28EE3AA7AE1BC2A0B06E26 {XExtData *ext_data;struct _XPrivate *private1;int fd;int private2;int proto_major_version;int proto_minor_version;char *vendor;XID private3;XID private4;XID private5;int private6;XID (*resource_alloc)(struct _XDisplay *);int byte_order;int bitmap_unit;int bitmap_pad;int bitmap_bit_order;int nformats;ScreenFormat *pixmap_format;int private8;int release;struct _XPrivate *private9;struct _XPrivate *private10;int qlen;unsigned __int64 last_request_read;unsigned __int64 request;XPointer private11;XPointer private12;XPointer private13;XPointer private14;unsigned int max_request_size;struct _XrmHashBucketRec *db;int (*private15)(struct _XDisplay *);char *display_name;int default_screen;int nscreens;Screen *screens;unsigned __int64 motion_buffer;unsigned __int64 private16;int min_keycode;int max_keycode;XPointer private17;XPointer private18;int private19;char *xdefaults;};
struct _914C84823AB334B2B6A44B1454234A7D {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 timestamp;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 mode;CARD16 rotation;CARD16 rotations;CARD16 nOutput;CARD16 nPossibleOutput;};
struct _9260E9DF4F900591ED372CA82BEE9A23 {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 acid;};
struct _94FA839E2A2E2CDB2FF04022E6E0CAA1 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD32 time;BYTE pointerMode;BYTE keyboardMode;CARD16 pad;};
struct _9F32140EDDFB9662C56CD8A9697883BB {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 timestamp;CARD16 left;CARD16 top;CARD16 width;CARD16 height;CARD16 track_left;CARD16 track_top;CARD16 track_width;CARD16 track_height;INT16 border_left;INT16 border_top;INT16 border_right;INT16 border_bottom;};
struct _A35F2E1A5E531ECFC152E2BA15F78A6A {BYTE type;BOOL globalAutoRepeat;CARD16 sequenceNumber;CARD32 length;CARD32 ledMask;CARD8 keyClickPercent;CARD8 bellPercent;CARD16 bellPitch;CARD16 bellDuration;CARD16 pad;BYTE map[32];};
struct _A55E8F963C5B6AC40AFF9FD81070CC8F {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD32 time;CARD8 num_keys;CARD8 num_buttons;CARD8 num_valuators;CARD8 classes_reported;CARD8 buttons[4];CARD8 keys[4];INT32 valuator0;INT32 valuator1;INT32 valuator2;};
struct _A7019015FC7C2C37D01376608F5D1FF2 {CARD8 c_class;CARD8 id;CARD16 length;CARD8 key;CARD8 auto_repeat_mode;INT8 click;INT8 percent;INT16 pitch;INT16 duration;CARD32 led_mask;CARD32 led_values;};
struct _AAD518AFB58856180F72F894AD441DEE {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD8 boundingShaped;CARD8 clipShaped;CARD16 unused1;INT16 xBoundingShape;INT16 yBoundingShape;CARD16 widthBoundingShape;CARD16 heightBoundingShape;INT16 xClipShape;INT16 yClipShape;CARD16 widthClipShape;CARD16 heightClipShape;CARD32 pad1;};
struct _AE25578E94EB9DEB13D122608361EF67 {BYTE type;BOOL sharedPixmaps;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD16 uid;CARD16 gid;CARD8 pixmapFormat;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _B4654CD279B33E607B3273E64CC6A8CF {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT32 value_hi;CARD32 value_lo;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _B466B6127C4D0EA4542034CCB3136555 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xPointFixed center;INT32 angle;CARD32 nStops;};
struct _B6C2B50A2126E272B3960EB4DC4F6604 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;BOOL capable;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _BC0C03DE100E0ADBA9BE7AF77D01715A {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcWid;CARD32 dstWid;INT16 srcX;INT16 srcY;};
struct _C19E6F380814408DFD31968534DDA3C5 {CARD8 reqType;BYTE pad;CARD16 length;INT16 accelNum;INT16 accelDenum;INT16 threshold;BOOL doAccel;BOOL doThresh;};
struct _C32D75228195D08F6D42072DC87ED14F {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;BOOL present;CARD8 major_opcode;CARD8 first_event;CARD8 first_error;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _D0A88ECD5B9151D3C71E69B7AE3ECA15 {BYTE type;CARD8 backingStore;CARD16 sequenceNumber;CARD32 length;CARD32 visualID;CARD16 c_class;CARD8 bitGravity;CARD8 winGravity;CARD32 backingBitPlanes;CARD32 backingPixel;BOOL saveUnder;BOOL mapInstalled;CARD8 mapState;BOOL override;CARD32 colormap;CARD32 allEventMasks;CARD32 yourEventMask;CARD16 doNotPropagateMask;CARD16 pad;};
struct _D53EE25F80C41C95CC04B700465E64D8 {CARD8 reqType;BYTE nChars;CARD16 length;CARD32 drawable;CARD32 gc;INT16 x;INT16 y;};
struct _E520267D12BF4FCD5BA9F753AB237D0B {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 dest;BYTE destKind;CARD8 pad1;CARD16 pad2;INT16 xOff;INT16 yOff;CARD32 region;};
struct _E67E3CE40ADACFAFDB3FFE1938BD0D7E {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;xRenderTransform pendingTransform;BYTE hasTransforms;CARD8 pad0;CARD16 pad1;xRenderTransform currentTransform;CARD32 pad2;CARD16 pendingNbytesFilter;CARD16 pendingNparamsFilter;CARD16 currentNbytesFilter;CARD16 currentNparamsFilter;};
struct _E77CCBE5D8B1F0833042AA57AE35DB28 {CARD8 reqType;CARD8 xtReqType;CARD16 length;BYTE type;BYTE detail;CARD16 pad0;CARD32 time;CARD32 root;CARD32 pad1;CARD32 pad2;INT16 rootX;INT16 rootY;CARD32 pad3;CARD16 pad4;CARD8 pad5;CARD8 deviceid;};
struct _E97BFE069D0E69649C7DF89B8901896C {BYTE type;BYTE event_code;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;BOOL added;BOOL deleted;CARD16 pad;};
struct _EF8F73C6C596F3380A5120BEC2D3F264 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT32 nCounters;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _F52D9FC92091A8183F87E95DDBDC622D {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcWid;CARD32 dstWid;INT16 srcX;INT16 srcY;CARD16 srcWidth;CARD16 srcHeight;INT16 dstX;INT16 dstY;};
struct _F8536B884003ADBD90188302B8AD267C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD16 nAtoms;INT16 nPositions;};
struct _F97BA04A84B56701784896B95A4002D0 {CARD8 c_class;CARD8 id;CARD16 length;CARD16 pitch;CARD16 duration;CARD32 led_mask;CARD32 led_values;BOOL global_auto_repeat;CARD8 click;CARD8 percent;BYTE pad;BYTE auto_repeats[32];};
struct _FCE16AE268B388C13B857015D638E9ED {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;};
struct _FEC8B8888F3B689040694BF1F630E941 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 key;BYTE pointerMode;BYTE keyboardMode;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _FF2B271BD07173775CE163A4BE842405 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 parent;INT16 x;INT16 y;};
struct xcb_get_window_attributes_reply_t {uint8_t response_type;uint8_t backing_store;uint16_t sequence;uint32_t length;xcb_visualid_t visual;uint16_t _class;uint8_t bit_gravity;uint8_t win_gravity;uint32_t backing_planes;uint32_t backing_pixel;uint8_t save_under;uint8_t map_is_installed;uint8_t map_state;uint8_t override_redirect;xcb_colormap_t colormap;uint32_t all_event_masks;uint32_t your_event_mask;uint16_t do_not_propagate_mask;uint8_t pad0[2];};
struct xcb_randr_get_output_info_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;xcb_randr_crtc_t crtc;uint32_t mm_width;uint32_t mm_height;uint8_t connection;uint8_t subpixel_order;uint16_t num_crtcs;uint16_t num_modes;uint16_t num_preferred;uint16_t num_clones;uint16_t name_len;};
struct xcb_randr_get_screen_info_reply_t {uint8_t response_type;uint8_t rotations;uint16_t sequence;uint32_t length;xcb_window_t root;xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;uint16_t nSizes;uint16_t sizeID;uint16_t rotation;uint16_t rate;uint16_t nInfo;uint8_t pad0[2];};
struct xcb_set_selection_owner_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t owner;xcb_atom_t selection;xcb_timestamp_t time;};
struct xcb_translate_coordinates_reply_t {uint8_t response_type;uint8_t same_screen;uint16_t sequence;uint32_t length;xcb_window_t child;int16_t dst_x;int16_t dst_y;};
struct xcb_xkb_get_device_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t wanted;uint8_t allButtons;uint8_t firstButton;uint8_t nButtons;uint8_t pad0;xcb_xkb_led_class_spec_t ledClass;xcb_xkb_id_spec_t ledID;};
struct xcb_glx_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;xcb_visualid_t visual;uint32_t screen;xcb_glx_context_t share_list;uint8_t is_direct;uint8_t pad0[3];};
struct xcb_glx_create_pbuffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;xcb_glx_fbconfig_t fbconfig;xcb_glx_pbuffer_t pbuffer;uint32_t num_attribs;};
struct xcb_list_fonts_with_info_reply_t {uint8_t response_type;uint8_t name_len;uint16_t sequence;uint32_t length;xcb_charinfo_t min_bounds;uint8_t pad0[4];xcb_charinfo_t max_bounds;uint8_t pad1[4];uint16_t min_char_or_byte2;uint16_t max_char_or_byte2;uint16_t default_char;uint16_t properties_len;uint8_t draw_direction;uint8_t min_byte1;uint8_t max_byte1;uint8_t all_chars_exist;int16_t font_ascent;int16_t font_descent;uint32_t replies_hint;};
struct xcb_convert_selection_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t requestor;xcb_atom_t selection;xcb_atom_t target;xcb_atom_t property;xcb_timestamp_t time;};
struct xcb_glx_get_tex_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_randr_set_panning_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;xcb_timestamp_t timestamp;uint16_t left;uint16_t top;uint16_t width;uint16_t height;uint16_t track_left;uint16_t track_top;uint16_t track_width;uint16_t track_height;int16_t border_left;int16_t border_top;int16_t border_right;int16_t border_bottom;};
struct xcb_render_trapezoids_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_sync_counter_notify_event_t {uint8_t response_type;uint8_t kind;uint16_t sequence;xcb_sync_counter_t counter;xcb_sync_int64_t wait_value;xcb_sync_int64_t counter_value;xcb_timestamp_t timestamp;uint16_t count;uint8_t destroyed;uint8_t pad0;};
struct xcb_xkb_controls_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t numGroups;uint8_t pad0[2];uint32_t changedControls;uint32_t enabledControls;uint32_t enabledControlChanges;xcb_keycode_t keycode;uint8_t eventType;uint8_t requestMajor;uint8_t requestMinor;uint8_t pad1[4];};
struct xcb_glx_copy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t src;xcb_glx_context_t dest;uint32_t mask;xcb_glx_context_tag_t src_context_tag;};
struct xcb_glx_delete_lists_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t list;int32_t range;};
struct xcb_glx_make_current_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_drawable_t drawable;xcb_glx_context_t context;xcb_glx_context_tag_t old_context_tag;};
struct xcb_glx_pixel_storef_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;xcb_glx_float32_t datum;};
struct xcb_glx_pixel_storei_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;int32_t datum;};
struct xcb_query_text_extents_reply_t {uint8_t response_type;uint8_t draw_direction;uint16_t sequence;uint32_t length;int16_t font_ascent;int16_t font_descent;int16_t overall_ascent;int16_t overall_descent;int32_t overall_width;int32_t overall_left;int32_t overall_right;};
struct xcb_render_tri_strip_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_render_triangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_xkb_action_message_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;xcb_keycode_t keycode;uint8_t press;uint8_t keyEventFollows;uint8_t mods;uint8_t group;xcb_xkb_string8_t message[8];uint8_t pad0[10];};
struct xcb_change_property_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;xcb_window_t window;xcb_atom_t property;xcb_atom_t type;uint8_t format;uint8_t pad0[3];uint32_t data_len;};
struct xcb_create_colormap_request_t {uint8_t major_opcode;uint8_t alloc;uint16_t length;xcb_colormap_t mid;xcb_window_t window;xcb_visualid_t visual;};
struct xcb_glx_read_pixels_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t x;int32_t y;int32_t width;int32_t height;uint32_t format;uint32_t type;uint8_t swap_bytes;uint8_t lsb_first;};
struct xcb_randr_get_panning_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;uint16_t left;uint16_t top;uint16_t width;uint16_t height;uint16_t track_left;uint16_t track_top;uint16_t track_width;uint16_t track_height;int16_t border_left;int16_t border_top;int16_t border_right;int16_t border_bottom;};
struct xcb_selection_request_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_window_t owner;xcb_window_t requestor;xcb_atom_t selection;xcb_atom_t target;xcb_atom_t property;};
struct xcb_sync_alarm_notify_event_t {uint8_t response_type;uint8_t kind;uint16_t sequence;xcb_sync_alarm_t alarm;xcb_sync_int64_t counter_value;xcb_sync_int64_t alarm_value;xcb_timestamp_t timestamp;uint8_t state;uint8_t pad0[3];};
struct xcb_test_fake_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t type;uint8_t detail;uint8_t pad0[2];uint32_t time;xcb_window_t root;uint8_t pad1[8];int16_t rootX;int16_t rootY;uint8_t pad2[7];uint8_t deviceid;};
struct xcb_glx_use_x_font_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;xcb_font_t font;uint32_t first;uint32_t count;uint32_t list_base;};
struct xcb_render_tri_fan_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_selection_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_window_t requestor;xcb_atom_t selection;xcb_atom_t target;xcb_atom_t property;};
struct xcb_sync_query_alarm_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_sync_trigger_t trigger;xcb_sync_int64_t delta;uint8_t events;uint8_t state;uint8_t pad1[2];};
struct xcb_xkb_get_controls_reply_t {uint8_t response_type;uint8_t deviceID;uint16_t sequence;uint32_t length;uint8_t mouseKeysDfltBtn;uint8_t numGroups;uint8_t groupsWrap;uint8_t internalModsMask;uint8_t ignoreLockModsMask;uint8_t internalModsRealMods;uint8_t ignoreLockModsRealMods;uint8_t pad0;uint16_t internalModsVmods;uint16_t ignoreLockModsVmods;uint16_t repeatDelay;uint16_t repeatInterval;uint16_t slowKeysDelay;uint16_t debounceDelay;uint16_t mouseKeysDelay;uint16_t mouseKeysInterval;uint16_t mouseKeysTimeToMax;uint16_t mouseKeysMaxSpeed;int16_t mouseKeysCurve;xcb_xkb_ax_option_t accessXOption;uint16_t accessXTimeout;xcb_xkb_ax_option_t accessXTimeoutOptionsMask;xcb_xkb_ax_option_t accessXTimeoutOptionsValues;uint8_t pad1[2];uint32_t accessXTimeoutMask;uint32_t accessXTimeoutValues;uint32_t enabledControls;uint8_t perKeyRepeat[32];};
struct xcb_xkb_names_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t pad0;uint16_t changed;uint8_t firstType;uint8_t nTypes;uint8_t firstLevelName;uint8_t nLevelNames;uint8_t pad1;uint8_t nRadioGroups;uint8_t nKeyAliases;uint8_t changedGroupNames;uint16_t changedVirtualMods;xcb_keycode_t firstKey;uint8_t nKeys;uint32_t changedIndicators;uint8_t pad2[4];};
struct xcb_xkb_state_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t mods;uint8_t baseMods;uint8_t latchedMods;uint8_t lockedMods;uint8_t group;int16_t baseGroup;int16_t latchedGroup;uint8_t lockedGroup;uint8_t compatState;uint8_t grabMods;uint8_t compatGrabMods;uint8_t lookupMods;uint8_t compatLoockupMods;uint16_t ptrBtnState;uint16_t changed;xcb_keycode_t keycode;uint8_t eventType;uint8_t requestMajor;uint8_t requestMinor;};
struct ethtool_rx_ntuple_flow_spec {__u32 flow_type;union ethtool_rx_ntuple_flow_spec___49C1EC9C75B2A393400303E9A6ECBAF2 h_u;union ethtool_rx_ntuple_flow_spec___49C1EC9C75B2A393400303E9A6ECBAF2 m_u;__u16 vlan_tag;__u16 vlan_tag_mask;__u64 data;__u64 data_mask;__s32 action;};
struct ib_uverbs_query_device_resp {__u64 fw_ver;__be64 node_guid;__be64 sys_image_guid;__u64 max_mr_size;__u64 page_size_cap;__u32 vendor_id;__u32 vendor_part_id;__u32 hw_ver;__u32 max_qp;__u32 max_qp_wr;__u32 device_cap_flags;__u32 max_sge;__u32 max_sge_rd;__u32 max_cq;__u32 max_cqe;__u32 max_mr;__u32 max_pd;__u32 max_qp_rd_atom;__u32 max_ee_rd_atom;__u32 max_res_rd_atom;__u32 max_qp_init_rd_atom;__u32 max_ee_init_rd_atom;__u32 atomic_cap;__u32 max_ee;__u32 max_rdd;__u32 max_mw;__u32 max_raw_ipv6_qp;__u32 max_raw_ethy_qp;__u32 max_mcast_grp;__u32 max_mcast_qp_attach;__u32 max_total_mcast_qp_attach;__u32 max_ah;__u32 max_fmr;__u32 max_map_per_fmr;__u32 max_srq;__u32 max_srq_wr;__u32 max_srq_sge;__u16 max_pkeys;__u8 local_ca_ack_delay;__u8 phys_port_cnt;__u8 reserved[4];};
struct xcb_image_text_16_request_t {uint8_t major_opcode;uint8_t string_len;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_property_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;xcb_atom_t atom;xcb_timestamp_t time;uint8_t state;uint8_t pad1[3];};
struct xcb_randr_output_property_t {xcb_window_t window;xcb_randr_output_t output;xcb_atom_t atom;xcb_timestamp_t timestamp;uint8_t status;uint8_t pad0[11];};
struct xcb_selection_clear_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_window_t owner;xcb_atom_t selection;};
struct xcb_xkb_bell_notify_event_t {uint8_t response_type;uint8_t xkbType;uint16_t sequence;xcb_timestamp_t time;uint8_t deviceID;uint8_t bellClass;uint8_t bellID;uint8_t percent;uint16_t pitch;uint16_t duration;xcb_atom_t name;xcb_window_t window;uint8_t eventOnly;uint8_t pad0[7];};
struct xcb_xkb_set_names_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint16_t virtualMods;uint32_t which;uint8_t firstType;uint8_t nTypes;uint8_t firstKTLevelt;uint8_t nKTLevels;uint32_t indicators;uint8_t groupNames;uint8_t nRadioGroups;xcb_keycode_t firstKey;uint8_t nKeys;uint8_t nKeyAliases;uint8_t pad0;uint16_t totalKTLevelNames;};
struct xcb_xv_video_notify_event_t {uint8_t response_type;uint8_t reason;uint16_t sequence;xcb_timestamp_t time;xcb_drawable_t drawable;xcb_xv_port_t port;};
struct _xkbGetNamedIndicatorReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 indicator;BOOL found;BOOL on;BOOL realIndicator;CARD8 ndx;CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 mods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;BOOL supported;CARD8 pad1;CARD16 pad2;};
struct xcb_client_message_event_t {uint8_t response_type;uint8_t format;uint16_t sequence;xcb_window_t window;xcb_atom_t type;xcb_client_message_data_t data;};
struct xcb_get_property_request_t {uint8_t major_opcode;uint8_t _delete;uint16_t length;xcb_window_t window;xcb_atom_t property;xcb_atom_t type;uint32_t long_offset;uint32_t long_length;};
struct xcb_grab_pointer_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;uint16_t event_mask;uint8_t pointer_mode;uint8_t keyboard_mode;xcb_window_t confine_to;xcb_cursor_t cursor;xcb_timestamp_t time;};
struct xcb_image_text_8_request_t {uint8_t major_opcode;uint8_t string_len;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_poly_text_16_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_shape_offset_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_kind_t destination_kind;uint8_t pad0[3];xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;};
struct xcb_shm_completion_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;uint16_t minor_event;uint8_t major_event;uint8_t pad1;xcb_shm_seg_t shmseg;uint32_t offset;};
struct _BIG_IOCTL_Command_struct {LUNAddr_struct LUN_info;RequestBlock_struct Request;ErrorInfo_struct error_info;__u32 malloc_size;__u32 buf_size;__u8 *buf;};
struct _ScreenSaverSetAttributes {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BYTE c_class;CARD8 depth;CARD32 visualID;CARD32 mask;};
struct xcb_motion_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;uint8_t pad0;};
struct xcb_poly_text_8_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_query_pointer_reply_t {uint8_t response_type;uint8_t same_screen;uint16_t sequence;uint32_t length;xcb_window_t root;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t win_x;int16_t win_y;uint16_t mask;uint8_t pad0[2];};
struct _xSyncCounterNotifyEvent {BYTE type;BYTE kind;CARD16 sequenceNumber;CARD32 counter;INT32 wait_value_hi;CARD32 wait_value_lo;INT32 counter_value_hi;CARD32 counter_value_lo;CARD32 time;CARD16 count;BOOL destroyed;BYTE pad0;};
struct xcb_enter_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t mode;uint8_t same_screen_focus;};
struct xcb_get_geometry_reply_t {uint8_t response_type;uint8_t depth;uint16_t sequence;uint32_t length;xcb_window_t root;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t pad0[2];};
struct _LbxQueryExtensionReply {BYTE type;CARD8 numReqs;CARD16 sequenceNumber;CARD32 length;BOOL present;CARD8 major_opcode;CARD8 first_event;CARD8 first_error;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct fanotify_event_metadata {__u32 event_len;__u8 vers;__u8 reserved;__u16 metadata_len;__attribute__((aligned(8))) __u64 mask;__s32 fd;__s32 pid;};
struct ib_uverbs_query_qp_resp {struct ib_uverbs_qp_dest dest;struct ib_uverbs_qp_dest alt_dest;__u32 max_send_wr;__u32 max_recv_wr;__u32 max_send_sge;__u32 max_recv_sge;__u32 max_inline_data;__u32 qkey;__u32 rq_psn;__u32 sq_psn;__u32 dest_qp_num;__u32 qp_access_flags;__u16 pkey_index;__u16 alt_pkey_index;__u8 qp_state;__u8 cur_qp_state;__u8 path_mtu;__u8 path_mig_state;__u8 sq_draining;__u8 max_rd_atomic;__u8 max_dest_rd_atomic;__u8 min_rnr_timer;__u8 port_num;__u8 timeout;__u8 retry_cnt;__u8 rnr_retry;__u8 alt_port_num;__u8 alt_timeout;__u8 sq_sig_all;__u8 reserved[5];__u64 driver_data[];};
struct xcb_copy_area_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t src_drawable;xcb_drawable_t dst_drawable;xcb_gcontext_t gc;int16_t src_x;int16_t src_y;int16_t dst_x;int16_t dst_y;uint16_t width;uint16_t height;};
struct xcb_create_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t cid;xcb_drawable_t drawable;uint32_t value_mask;};
struct xcb_get_image_request_t {uint8_t major_opcode;uint8_t format;uint16_t length;xcb_drawable_t drawable;int16_t x;int16_t y;uint16_t width;uint16_t height;uint32_t plane_mask;};
struct xcb_put_image_request_t {uint8_t major_opcode;uint8_t format;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;uint16_t width;uint16_t height;int16_t dst_x;int16_t dst_y;uint8_t left_pad;uint8_t depth;uint8_t pad0[2];};
struct _xSyncAlarmNotifyEvent {BYTE type;BYTE kind;CARD16 sequenceNumber;CARD32 alarm;INT32 counter_value_hi;CARD32 counter_value_lo;INT32 alarm_value_hi;CARD32 alarm_value_lo;CARD32 time;CARD8 state;BYTE pad0;BYTE pad1;BYTE pad2;};
struct xcb_query_font_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_charinfo_t min_bounds;uint8_t pad1[4];xcb_charinfo_t max_bounds;uint8_t pad2[4];uint16_t min_char_or_byte2;uint16_t max_char_or_byte2;uint16_t default_char;uint16_t properties_len;uint8_t draw_direction;uint8_t min_byte1;uint8_t max_byte1;uint8_t all_chars_exist;int16_t font_ascent;int16_t font_descent;uint32_t char_infos_len;};
struct _IOCTL_Command_struct {LUNAddr_struct LUN_info;RequestBlock_struct Request;ErrorInfo_struct error_info;__u16 buf_size;__u8 *buf;};
struct dmx_pes_filter_params {__u16 pid;dmx_input_t input;dmx_output_t output;dmx_pes_type_t pes_type;__u32 flags;};
struct _xkbGetControlsReply {BYTE type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 mkDfltBtn;CARD8 numGroups;CARD8 groupsWrap;CARD8 internalMods;CARD8 ignoreLockMods;CARD8 internalRealMods;CARD8 ignoreLockRealMods;CARD8 pad1;CARD16 internalVMods;CARD16 ignoreLockVMods;CARD16 repeatDelay;CARD16 repeatInterval;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD16 mkDelay;CARD16 mkInterval;CARD16 mkTimeToMax;CARD16 mkMaxSpeed;INT16 mkCurve;CARD16 axOptions;CARD16 axTimeout;CARD16 axtOptsMask;CARD16 axtOptsValues;CARD16 pad2;CARD32 axtCtrlsMask;CARD32 axtCtrlsValues;CARD32 enabledCtrls;BYTE perKeyRepeat[32];};
struct ib_uverbs_modify_qp {struct ib_uverbs_qp_dest dest;struct ib_uverbs_qp_dest alt_dest;__u32 qp_handle;__u32 attr_mask;__u32 qkey;__u32 rq_psn;__u32 sq_psn;__u32 dest_qp_num;__u32 qp_access_flags;__u16 pkey_index;__u16 alt_pkey_index;__u8 qp_state;__u8 cur_qp_state;__u8 path_mtu;__u8 path_mig_state;__u8 en_sqd_async_notify;__u8 max_rd_atomic;__u8 max_dest_rd_atomic;__u8 min_rnr_timer;__u8 port_num;__u8 timeout;__u8 retry_cnt;__u8 rnr_retry;__u8 alt_port_num;__u8 alt_timeout;__u8 reserved[2];__u64 driver_data[];};
struct ip_vs_service_entry {__u16 protocol;__be32 addr;__be16 port;__u32 fwmark;char sched_name[16];unsigned int flags;unsigned int timeout;__be32 netmask;unsigned int num_dests;struct ip_vs_stats_user stats;};
union _xkbDoodadWireDesc {xkbAnyDoodadWireDesc any;xkbShapeDoodadWireDesc shape;xkbTextDoodadWireDesc text;xkbIndicatorDoodadWireDesc indicator;xkbLogoDoodadWireDesc logo;};
union ethtool_flow_union {struct ethtool_tcpip4_spec tcp_ip4_spec;struct ethtool_tcpip4_spec udp_ip4_spec;struct ethtool_tcpip4_spec sctp_ip4_spec;struct ethtool_ah_espip4_spec ah_ip4_spec;struct ethtool_ah_espip4_spec esp_ip4_spec;struct ethtool_usrip4_spec usr_ip4_spec;struct ethhdr ether_spec;__u8 hdata[52];};
struct _xkbActionMessage {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 keycode;BOOL press;BOOL keyEventFollows;CARD8 mods;CARD8 group;CARD8 message[8];CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbGetStateReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 mods;CARD8 baseMods;CARD8 latchedMods;CARD8 lockedMods;CARD8 group;CARD8 lockedGroup;INT16 baseGroup;INT16 latchedGroup;CARD8 compatState;CARD8 grabMods;CARD8 compatGrabMods;CARD8 lookupMods;CARD8 compatLookupMods;CARD8 pad1;CARD16 ptrBtnState;CARD16 pad2;CARD32 pad3;};
union snd_codec_options {struct snd_enc_wma wma;struct snd_enc_vorbis vorbis;struct snd_enc_real real;struct snd_enc_flac flac;struct snd_enc_generic generic;};
struct snd_ctl_elem_info {struct snd_ctl_elem_id id;snd_ctl_elem_type_t type;unsigned int access;unsigned int count;__kernel_pid_t owner;union snd_ctl_elem_info___2BB1CA6F1CB5911962F266705D4C43E4 value;union snd_ctl_elem_info___F0D55FA891E3966931869115E5BD8961 dimen;unsigned __int8 reserved[56];};
struct __attribute__((packed)) virtio_blk_config {__u64 capacity;__u32 size_max;__u32 seg_max;struct virtio_blk_config__virtio_blk_geometry geometry;__u32 blk_size;__u8 physical_block_exp;__u8 alignment_offset;__u16 min_io_size;__u32 opt_io_size;__u8 wce;};
struct autofs_v5_packet {struct autofs_packet_hdr hdr;autofs_wqt_t wait_queue_token;__u32 dev;__u64 ino;__u32 uid;__u32 gid;__u32 pid;__u32 tgid;__u32 len;char name[256];};
struct __attribute__((packed)) rds_info_message {uint64_t seq;uint32_t len;__be32 laddr;__be32 faddr;__be16 lport;__be16 fport;uint8_t flags;};
struct sctp_send_failed {__u16 ssf_type;__u16 ssf_flags;__u32 ssf_length;__u32 ssf_error;struct sctp_sndrcvinfo ssf_info;sctp_assoc_t ssf_assoc_id;__u8 ssf_data[];};
struct _xkbSetControls {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 affectInternalMods;CARD8 internalMods;CARD8 affectIgnoreLockMods;CARD8 ignoreLockMods;CARD16 affectInternalVMods;CARD16 internalVMods;CARD16 affectIgnoreLockVMods;CARD16 ignoreLockVMods;CARD8 mkDfltBtn;CARD8 groupsWrap;CARD16 axOptions;CARD16 pad1;CARD32 affectEnabledCtrls;CARD32 enabledCtrls;CARD32 changeCtrls;CARD16 repeatDelay;CARD16 repeatInterval;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD16 mkDelay;CARD16 mkInterval;CARD16 mkTimeToMax;CARD16 mkMaxSpeed;INT16 mkCurve;CARD16 axTimeout;CARD32 axtCtrlsMask;CARD32 axtCtrlsValues;CARD16 axtOptsMask;CARD16 axtOptsValues;BYTE perKeyRepeat[32];};
struct _xkbStateNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 mods;CARD8 baseMods;CARD8 latchedMods;CARD8 lockedMods;CARD8 group;INT16 baseGroup;INT16 latchedGroup;CARD8 lockedGroup;CARD8 compatState;CARD8 grabMods;CARD8 compatGrabMods;CARD8 lookupMods;CARD8 compatLookupMods;CARD16 ptrBtnState;CARD16 changed;CARD8 keycode;CARD8 eventType;CARD8 requestMajor;CARD8 requestMinor;};
struct dlm_lock_params {__u8 mode;__u8 namelen;__u16 unused;__u32 flags;__u32 lkid;__u32 parent;__u64 xid;__u64 timeout;void *castparam;void *castaddr;void *bastparam;void *bastaddr;struct dlm_lksb *lksb;char lvb[32];char name[];};
struct ib_ucm_sidr_req {__u32 id;__u32 timeout;__be64 sid;__u64 data;__u64 path;__u16 reserved_pkey;__u8 len;__u8 max_cm_retries;__u8 reserved[4];};
struct ib_user_mad_hdr {__u32 id;__u32 status;__u32 timeout_ms;__u32 retries;__u32 length;__be32 qpn;__be32 qkey;__be16 lid;__u8 sl;__u8 path_bits;__u8 grh_present;__u8 gid_index;__u8 hop_limit;__u8 traffic_class;__u8 gid[16];__be32 flow_label;__u16 pkey_index;__u8 reserved[6];};
struct ip_vs_get_dests {__u16 protocol;__be32 addr;__be16 port;__u32 fwmark;unsigned int num_dests;struct ip_vs_dest_entry entrytable[];};
struct _xkbBellNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 bellClass;CARD8 bellID;CARD8 percent;CARD16 pitch;CARD16 duration;CARD32 name;CARD32 window;BOOL eventOnly;CARD8 pad1;CARD16 pad2;CARD32 pad3;};
struct __attribute__((packed)) nw_info_struct {__u32 spaceAlloc;__le32 attributes;__u16 flags;__le32 dataStreamSize;__le32 totalStreamSize;__u16 numberOfStreams;__le16 creationTime;__le16 creationDate;__u32 creatorID;__le16 modifyTime;__le16 modifyDate;__u32 modifierID;__le16 lastAccessDate;__u16 archiveTime;__u16 archiveDate;__u32 archiverID;__u16 inheritedRightsMask;__le32 dirEntNum;__le32 DosDirNum;__u32 volNumber;__u32 EADataSize;__u32 EAKeyCount;__u32 EAKeySize;__u32 NSCreator;__u8 nameLen;__u8 entryName[256];};
struct snd_pcm_status {snd_pcm_state_t state;struct timespec trigger_tstamp;struct timespec tstamp;snd_pcm_uframes_t appl_ptr;snd_pcm_uframes_t hw_ptr;snd_pcm_sframes_t delay;snd_pcm_uframes_t avail;snd_pcm_uframes_t avail_max;snd_pcm_uframes_t overrange;snd_pcm_state_t suspended_state;__u32 reserved_alignment;struct timespec audio_tstamp;unsigned __int8 reserved[40];};
struct xfrm_user_tmpl {struct xfrm_id id;__u16 family;xfrm_address_t saddr;__u32 reqid;__u8 mode;__u8 share;__u8 optional;__u32 aalgos;__u32 ealgos;__u32 calgos;};
struct _libc_fpstate {__uint16_t cwd;__uint16_t swd;__uint16_t ftw;__uint16_t fop;__uint64_t rip;__uint64_t rdp;__uint32_t mxcsr;__uint32_t mxcr_mask;struct _libc_fpxreg _st[8];struct _libc_xmmreg _xmm[16];__uint32_t padding[24];};
struct fs_quota_stat {__s8 qs_version;__u16 qs_flags;__s8 qs_pad;fs_qfilestat_t qs_uquota;fs_qfilestat_t qs_gquota;__u32 qs_incoredqs;__s32 qs_btimelimit;__s32 qs_itimelimit;__s32 qs_rtbtimelimit;__u16 qs_bwarnlimit;__u16 qs_iwarnlimit;};
struct __attribute__((packed)) ubi_mkvol_req {__s32 vol_id;__s32 alignment;__s64 bytes;__s8 vol_type;__s8 padding1;__s16 name_len;__s8 padding2[4];char name[128];};
struct v4l2_standard {__u32 index;v4l2_std_id id;__u8 name[24];struct v4l2_fract frameperiod;__u32 framelines;__u32 reserved[4];};
struct xfrm_selector {xfrm_address_t daddr;xfrm_address_t saddr;__be16 dport;__be16 dport_mask;__be16 sport;__be16 sport_mask;__u16 family;__u8 prefixlen_d;__u8 prefixlen_s;__u8 proto;int ifindex;__kernel_uid32_t user;};
struct XDR__xdr_ops {bool_t (*x_getlong)(XDR *xdrs, __int64 *lp);bool_t (*x_putlong)(XDR *xdrs, const __int64 *lp);bool_t (*x_getbytes)(XDR *xdrs, caddr_t addr, u_int len);bool_t (*x_putbytes)(XDR *xdrs, const char *addr, u_int len);u_int (*x_getpostn)(const XDR *xdrs);bool_t (*x_setpostn)(XDR *xdrs, u_int pos);int32_t *(*x_inline)(XDR *xdrs, u_int len);void (*x_destroy)(XDR *xdrs);bool_t (*x_getint32)(XDR *xdrs, int32_t *ip);bool_t (*x_putint32)(XDR *xdrs, const int32_t *ip);};
struct cramfs_super {__u32 magic;__u32 size;__u32 flags;__u32 future;__u8 signature[16];struct cramfs_info fsid;__u8 name[16];struct cramfs_inode root;};
struct hdspm_status {uint8_t card_type;enum hdspm_syncsource autosync_source;uint64_t card_clock;uint32_t master_period;union hdspm_status___9A4D23CEA97C8F2269F11F81D9BD27E8 card_specific;};
struct ib_uverbs_wc {__u64 wr_id;__u32 status;__u32 opcode;__u32 vendor_err;__u32 byte_len;union ib_uverbs_wc___3DB9C648727C4FF416E200CBAEEA3871 ex;__u32 qp_num;__u32 src_qp;__u32 wc_flags;__u16 pkey_index;__u16 slid;__u8 sl;__u8 dlid_path_bits;__u8 port_num;__u8 reserved;};
struct _XkbChanges {unsigned __int16 device_spec;unsigned __int16 state_changes;XkbMapChangesRec map;XkbControlsChangesRec ctrls;XkbIndicatorChangesRec indicators;XkbNameChangesRec names;XkbCompatChangesRec compat;};
struct sctp_status {sctp_assoc_t sstat_assoc_id;__s32 sstat_state;__u32 sstat_rwnd;__u16 sstat_unackdata;__u16 sstat_penddata;__u16 sstat_instrms;__u16 sstat_outstrms;__u32 sstat_fragmentation_point;struct sctp_paddrinfo sstat_primary;};
struct _ShmAttach {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 shmseg;CARD32 shmid;BOOL readOnly;BYTE pad0;CARD16 pad1;};
union _XkbDoodad {XkbAnyDoodadRec any;XkbShapeDoodadRec shape;XkbTextDoodadRec text;XkbIndicatorDoodadRec indicator;XkbLogoDoodadRec logo;};
struct _fpstate {__uint16_t cwd;__uint16_t swd;__uint16_t ftw;__uint16_t fop;__uint64_t rip;__uint64_t rdp;__uint32_t mxcsr;__uint32_t mxcr_mask;struct _fpxreg _st[8];struct _xmmreg _xmm[16];__uint32_t padding[24];};
struct arpt_arp {struct in_addr src;struct in_addr tgt;struct in_addr smsk;struct in_addr tmsk;__u8 arhln;__u8 arhln_mask;struct arpt_devaddr_info src_devaddr;struct arpt_devaddr_info tgt_devaddr;__be16 arpop;__be16 arpop_mask;__be16 arhrd;__be16 arhrd_mask;__be16 arpro;__be16 arpro_mask;char iniface[16];char outiface[16];unsigned __int8 iniface_mask[16];unsigned __int8 outiface_mask[16];__u8 flags;__u16 invflags;};
struct _win_st {__int16 _cury;__int16 _curx;__int16 _maxy;__int16 _maxx;__int16 _begy;__int16 _begx;__int16 _flags;attr_t _attrs;chtype _bkgd;bool _notimeout;bool _clear;bool _leaveok;bool _scroll;bool _idlok;bool _idcok;bool _immed;bool _sync;bool _use_keypad;int _delay;struct ldat *_line;__int16 _regtop;__int16 _regbottom;int _parx;int _pary;WINDOW *_parent;struct _win_st__pdat _pad;__int16 _yoffset;cchar_t _bkgrnd;};
struct svc_req {rpcprog_t rq_prog;rpcvers_t rq_vers;rpcproc_t rq_proc;struct opaque_auth rq_cred;caddr_t rq_clntcred;SVCXPRT *rq_xprt;};
struct tagMENU {__int16 height;__int16 width;__int16 rows;__int16 cols;__int16 frows;__int16 fcols;__int16 arows;__int16 namelen;__int16 desclen;__int16 marklen;__int16 itemlen;__int16 spc_desc;__int16 spc_cols;__int16 spc_rows;char *pattern;__int16 pindex;WINDOW *win;WINDOW *sub;WINDOW *userwin;WINDOW *usersub;ITEM **items;__int16 nitems;ITEM *curitem;__int16 toprow;chtype fore;chtype back;chtype grey;unsigned __int8 pad;Menu_Hook menuinit;Menu_Hook menuterm;Menu_Hook iteminit;Menu_Hook itemterm;void *userptr;char *mark;Menu_Options opt;unsigned __int16 status;};
struct iocb {__u64 aio_data;__u32 aio_key;__u32 aio_reserved1;__u16 aio_lio_opcode;__s16 aio_reqprio;__u32 aio_fildes;__u64 aio_buf;__u64 aio_nbytes;__s64 aio_offset;__u64 aio_reserved2;__u32 aio_flags;__u32 aio_resfd;};
union _i2o_hrt_entry___D55E159E5D75E3EA17BD777F24FDBACF {i2o_pci_bus pci_bus;i2o_local_bus local_bus;i2o_isa_bus isa_bus;i2o_eisa_bus eisa_bus;i2o_mca_bus mca_bus;i2o_other_bus other_bus;};
union v4l2_format___11C340EB5DA759242BAA851A9D990106 {struct v4l2_pix_format pix;struct v4l2_pix_format_mplane pix_mp;struct v4l2_window win;struct v4l2_vbi_format vbi;struct v4l2_sliced_vbi_format sliced;__u8 raw_data[200];};
struct xcb_xfixes_set_window_shape_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t dest;xcb_shape_kind_t dest_kind;uint8_t pad0[3];int16_t x_offset;int16_t y_offset;xcb_xfixes_region_t region;};
struct xcb_render_composite_glyphs_16_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;xcb_render_glyphset_t glyphset;int16_t src_x;int16_t src_y;};
struct xcb_render_composite_glyphs_32_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;xcb_render_glyphset_t glyphset;int16_t src_x;int16_t src_y;};
struct xcb_screensaver_set_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t _class;uint8_t depth;xcb_visualid_t visual;uint32_t value_mask;};
union icmp___893B68B5BC55935E15A63F398B6517AD {u_char ih_pptr;struct in_addr ih_gwaddr;struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_idseq ih_idseq;u_int32_t ih_void;struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_pmtu ih_pmtu;struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_rtradv ih_rtradv;};
struct xcb_render_composite_glyphs_8_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;xcb_render_glyphset_t glyphset;int16_t src_x;int16_t src_y;};
struct xcb_xkb_get_named_indicator_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;xcb_xkb_led_class_spec_t ledClass;xcb_xkb_id_spec_t ledID;uint8_t pad0[2];xcb_atom_t indicator;};
struct xcb_glx_create_glx_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;xcb_visualid_t visual;xcb_pixmap_t pixmap;xcb_glx_pixmap_t glx_pixmap;};
struct xcb_randr_set_crtc_config_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;int16_t x;int16_t y;xcb_randr_mode_t mode;uint16_t rotation;uint8_t pad0[2];};
struct xcb_render_create_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t pid;xcb_drawable_t drawable;xcb_render_pictformat_t format;uint32_t value_mask;};
struct _050D667D91EB5E6EF621582721732C5C {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;fsRange range;};
struct _0F63C52D50F31C01632B7951AEFCA4FD {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;fsResolution resolution;};
struct _20372CCC7895932BACE6325FD7981C66 {xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;};
struct _254D69ABE7D19BD30B5C577476AC4C63 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint32_t detail;uint32_t root;uint32_t event;uint32_t child;FP1616 root_x;FP1616 root_y;FP1616 event_x;FP1616 event_y;uint16_t buttons_len;uint16_t valuators_len;uint16_t sourceid;uint16_t pad0;uint32_t flags;xXIModifierInfo mods;xXIGroupInfo group;};
struct _281923904974B9915ABD548A82CFE427 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 counter;CARD32 value_type;INT32 wait_value_hi;CARD32 wait_value_lo;CARD32 test_type;INT32 delta_hi;CARD32 delta_lo;BOOL events;BYTE state;BYTE pad0;BYTE pad1;};
struct _2D0C5444B9314DA523692ACDBC5F4808 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint32_t eventid;uint32_t root;uint32_t event;uint32_t barrier;uint32_t dtime;uint32_t flags;uint16_t sourceid;int16_t pad;FP1616 root_x;FP1616 root_y;FP3232 dx;FP3232 dy;};
struct _5342985482DA4551756A03BE632E6931 {XExtData *ext_data;struct _XDisplay *display;Window root;int width;int height;int mwidth;int mheight;int ndepths;Depth *depths;int root_depth;Visual *root_visual;GC default_gc;Colormap cmap;unsigned __int64 white_pixel;unsigned __int64 black_pixel;int max_maps;int min_maps;int backing_store;int save_unders;__int64 root_input_mask;};
struct _54527827121C21F3031526454FE9C7A8 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 fid;fsBitmapFormatMask format_mask;fsBitmapFormat format_hint;};
struct _8C2FD448F8CF6A602A866F997822A598 {BYTE type;CARD8 backingStore;CARD16 sequenceNumber;CARD32 length;CARD32 visualID;CARD16 c_class;CARD8 bitGravity;CARD8 winGravity;CARD32 backingBitPlanes;CARD32 backingPixel;BOOL saveUnder;BOOL mapInstalled;CARD8 mapState;BOOL override;CARD32 colormap;CARD32 allEventMasks;CARD32 yourEventMask;CARD16 doNotPropagateMask;CARD16 pad1;CARD32 root;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD8 depth;CARD8 pad2;};
struct _B17A026830C769E803D493B7F2598A70 {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;fsBitmapFormat format;};
struct _BB397765FF281DD1E4BC80FF297308E9 {uint8_t repType;uint8_t RepType;uint16_t sequenceNumber;uint32_t length;uint32_t root;uint32_t child;FP1616 root_x;FP1616 root_y;FP1616 win_x;FP1616 win_y;uint8_t same_screen;uint8_t pad0;uint16_t buttons_len;xXIModifierInfo mods;xXIGroupInfo group;};
struct _C30FF1240D2A8075F6967DECC9305E3F {BYTE type;CARD8 drawDirection;CARD16 sequenceNumber;CARD32 length;INT16 fontAscent;INT16 fontDescent;INT16 overallAscent;INT16 overallDescent;INT32 overallWidth;INT32 overallLeft;INT32 overallRight;CARD32 pad;};
union _CF90EBC219EB1F519A4BDB6194EF3B11 {__u8 type;struct dvd_physical physical;struct dvd_copyright copyright;struct dvd_disckey disckey;struct dvd_bca bca;struct dvd_manufact manufact;};
union _D8231012D0728EC3472C30FA3109CEFA {Display *display;GC gc;Visual *visual;Screen *screen;ScreenFormat *pixmap_format;XFontStruct *font;};
struct xcb_xvmc_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_context_t context_id;xcb_xv_port_t port_id;xcb_xvmc_surface_t surface_id;uint16_t width;uint16_t height;uint32_t flags;};
struct xcb_xfixes_cursor_notify_event_t {uint8_t response_type;uint8_t subtype;uint16_t sequence;xcb_window_t window;uint32_t cursor_serial;xcb_timestamp_t timestamp;xcb_atom_t name;uint8_t pad0[12];};
struct xcb_glx_create_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;xcb_glx_fbconfig_t fbconfig;xcb_pixmap_t pixmap;xcb_glx_pixmap_t glx_pixmap;uint32_t num_attribs;};
struct xcb_glx_create_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;xcb_glx_fbconfig_t fbconfig;xcb_window_t window;xcb_glx_window_t glx_window;uint32_t num_attribs;};
struct xcb_randr_get_crtc_info_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;xcb_timestamp_t timestamp;int16_t x;int16_t y;uint16_t width;uint16_t height;xcb_randr_mode_t mode;uint16_t rotation;uint16_t rotations;uint16_t num_outputs;uint16_t num_possible_outputs;};
struct xcb_shm_create_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_pixmap_t pid;xcb_drawable_t drawable;uint16_t width;uint16_t height;uint8_t depth;uint8_t pad0[3];xcb_shm_seg_t shmseg;uint32_t offset;};
struct xcb_shape_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_op_t operation;xcb_shape_kind_t destination_kind;uint8_t ordering;uint8_t pad0;xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;};
struct xcb_xkb_set_controls_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;uint8_t affectInternalRealMods;uint8_t internalRealMods;uint8_t affectIgnoreLockRealMods;uint8_t ignoreLockRealMods;uint16_t affectInternalVirtualMods;uint16_t internalVirtualMods;uint16_t affectIgnoreLockVirtualMods;uint16_t ignoreLockVirtualMods;uint8_t mouseKeysDfltBtn;uint8_t groupsWrap;xcb_xkb_ax_option_t accessXOptions;uint8_t pad0[2];uint32_t affectEnabledControls;uint32_t enabledControls;uint32_t changeControls;uint16_t repeatDelay;uint16_t repeatInterval;uint16_t slowKeysDelay;uint16_t debounceDelay;uint16_t mouseKeysDelay;uint16_t mouseKeysInterval;uint16_t mouseKeysTimeToMax;uint16_t mouseKeysMaxSpeed;int16_t mouseKeysCurve;uint16_t accessXTimeout;uint32_t accessXTimeoutMask;uint32_t accessXTimeoutValues;xcb_xkb_ax_option_t accessXTimeoutOptionsMask;xcb_xkb_ax_option_t accessXTimeoutOptionsValues;uint8_t perKeyRepeat[32];};
struct xcb_input_kbd_feedback_ctl_t {uint8_t class_id;uint8_t id;uint16_t len;xcb_input_key_code_t key;uint8_t auto_repeat_mode;int8_t key_click_percent;int8_t bell_percent;int16_t bell_pitch;int16_t bell_duration;uint32_t led_mask;uint32_t led_values;};
struct xcb_create_window_request_t {uint8_t major_opcode;uint8_t depth;uint16_t length;xcb_window_t wid;xcb_window_t parent;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint16_t _class;xcb_visualid_t visual;uint32_t value_mask;};
struct xcb_shape_combine_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_op_t operation;xcb_shape_kind_t destination_kind;xcb_shape_kind_t source_kind;uint8_t pad0;xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;xcb_window_t source_window;};
struct xcb_shm_get_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;int16_t x;int16_t y;uint16_t width;uint16_t height;uint32_t plane_mask;uint8_t format;uint8_t pad0[3];xcb_shm_seg_t shmseg;uint32_t offset;};
struct Dwarf_Obj_Access_Methods_s {int (*get_section_info)(void *obj, Dwarf_Half section_index, Dwarf_Obj_Access_Section *return_section, int *error);Dwarf_Endianness (*get_byte_order)(void *obj);Dwarf_Small (*get_length_size)(void *obj);Dwarf_Small (*get_pointer_size)(void *obj);Dwarf_Unsigned (*get_section_count)(void *obj);int (*load_section)(void *obj, Dwarf_Half section_index, Dwarf_Small **return_data, int *error);int (*relocate_a_section)(void *obj, Dwarf_Half section_index, Dwarf_Debug dbg, int *error);};
struct xcb_xv_get_still_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_xv_get_video_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_xv_port_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_xv_port_t port;xcb_atom_t attribute;int32_t value;};
struct xcb_xv_put_still_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_xv_put_video_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_damage_notify_event_t {uint8_t response_type;uint8_t level;uint16_t sequence;xcb_drawable_t drawable;xcb_damage_damage_t damage;xcb_timestamp_t timestamp;xcb_rectangle_t area;xcb_rectangle_t geometry;};
struct xcb_button_press_event_t {uint8_t response_type;xcb_button_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;uint8_t pad0;};
struct xcb_copy_plane_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t src_drawable;xcb_drawable_t dst_drawable;xcb_gcontext_t gc;int16_t src_x;int16_t src_y;int16_t dst_x;int16_t dst_y;uint16_t width;uint16_t height;uint32_t bit_plane;};
struct xcb_shape_notify_event_t {uint8_t response_type;xcb_shape_kind_t shape_kind;uint16_t sequence;xcb_window_t affected_window;int16_t extents_x;int16_t extents_y;uint16_t extents_width;uint16_t extents_height;xcb_timestamp_t server_time;uint8_t shaped;uint8_t pad0[11];};
union autofs_v5_packet_union {struct autofs_packet_hdr hdr;struct autofs_v5_packet v5_packet;autofs_packet_missing_indirect_t missing_indirect;autofs_packet_expire_indirect_t expire_indirect;autofs_packet_missing_direct_t missing_direct;autofs_packet_expire_direct_t expire_direct;};
struct xcb_key_press_event_t {uint8_t response_type;xcb_keycode_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;uint8_t pad0;};
struct dvb_ofdm_parameters {fe_bandwidth_t bandwidth;fe_code_rate_t code_rate_HP;fe_code_rate_t code_rate_LP;fe_modulation_t constellation;fe_transmit_mode_t transmission_mode;fe_guard_interval_t guard_interval;fe_hierarchy_t hierarchy_information;};
struct CLIENT__clnt_ops {enum clnt_stat (*cl_call)(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);void (*cl_abort)(void);void (*cl_geterr)(CLIENT *, struct rpc_err *);bool_t (*cl_freeres)(CLIENT *, xdrproc_t, caddr_t);void (*cl_destroy)(CLIENT *);bool_t (*cl_control)(CLIENT *, int, char *);};
union jffs2_node_union {struct jffs2_raw_inode i;struct jffs2_raw_dirent d;struct jffs2_raw_xattr x;struct jffs2_raw_xref r;struct jffs2_raw_summary s;struct jffs2_unknown_node u;};
struct fs_disk_quota {__s8 d_version;__s8 d_flags;__u16 d_fieldmask;__u32 d_id;__u64 d_blk_hardlimit;__u64 d_blk_softlimit;__u64 d_ino_hardlimit;__u64 d_ino_softlimit;__u64 d_bcount;__u64 d_icount;__s32 d_itimer;__s32 d_btimer;__u16 d_iwarns;__u16 d_bwarns;__s32 d_padding2;__u64 d_rtb_hardlimit;__u64 d_rtb_softlimit;__u64 d_rtbcount;__s32 d_rtbtimer;__u16 d_rtbwarns;__s16 d_padding3;char d_padding4[8];};
struct xcb_screen_t {xcb_window_t root;xcb_colormap_t default_colormap;uint32_t white_pixel;uint32_t black_pixel;uint32_t current_input_masks;uint16_t width_in_pixels;uint16_t height_in_pixels;uint16_t width_in_millimeters;uint16_t height_in_millimeters;uint16_t min_installed_maps;uint16_t max_installed_maps;xcb_visualid_t root_visual;uint8_t backing_stores;uint8_t save_unders;uint8_t root_depth;uint8_t allowed_depths_len;};
struct _xkbBell {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 bellClass;CARD16 bellID;INT8 percent;BOOL forceSound;BOOL eventOnly;CARD8 pad1;INT16 pitch;INT16 duration;CARD16 pad2;CARD32 name;CARD32 window;};
struct msqid_ds {struct ipc_perm msg_perm;__time_t msg_stime;__time_t msg_rtime;__time_t msg_ctime;__syscall_ulong_t __msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;__pid_t msg_lspid;__pid_t msg_lrpid;__syscall_ulong_t __unused4;__syscall_ulong_t __unused5;};
struct shmid_ds {struct ipc_perm shm_perm;size_t shm_segsz;__time_t shm_atime;__time_t shm_dtime;__time_t shm_ctime;__pid_t shm_cpid;__pid_t shm_lpid;shmatt_t shm_nattch;__syscall_ulong_t __unused4;__syscall_ulong_t __unused5;};
union _FF42BAC5ED235A895D76875BB02F1547___41B0E947727B04B281BBEA4B1896A8BE {int _pad[28];struct ____41B0E947727B04B281BBEA4B1896A8BE___DDF278A5B88F81FEC3CBEE828E282CB3 _kill;struct ____41B0E947727B04B281BBEA4B1896A8BE___F43D85AC31CEBD8CC07B08111ABDF065 _timer;struct ____41B0E947727B04B281BBEA4B1896A8BE___002955E8B5DE3B92E30DFEF7AB65BFE2 _rt;struct ____41B0E947727B04B281BBEA4B1896A8BE___8A1A9DC09BDADE4F3456EDCC5E429445 _sigchld;struct ____41B0E947727B04B281BBEA4B1896A8BE___394784BEE55B7018BCA7354475FB2ABC _sigfault;struct ____41B0E947727B04B281BBEA4B1896A8BE___A0026EAD564A6656D0C8BDAAC752A4B0 _sigpoll;struct ____41B0E947727B04B281BBEA4B1896A8BE___4B29161E04CAD4BCDD788B201A5E8E5E _sigsys;};
union fc_bsg_request___6D97E0FCCC65F66D321CF0BDF9DCBB2C {struct fc_bsg_host_add_rport h_addrport;struct fc_bsg_host_del_rport h_delrport;struct fc_bsg_host_els h_els;struct fc_bsg_host_ct h_ct;struct fc_bsg_host_vendor h_vendor;struct fc_bsg_rport_els r_els;struct fc_bsg_rport_ct r_ct;};
struct xcb_xkb_set_named_indicator_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;xcb_xkb_led_class_spec_t ledClass;xcb_xkb_id_spec_t ledID;uint8_t pad0[2];xcb_atom_t indicator;uint8_t setState;uint8_t on;uint8_t setMap;uint8_t createMap;uint8_t pad1;uint8_t map_flags;uint8_t map_whichGroups;uint8_t map_groups;uint8_t map_whichMods;uint8_t map_realMods;uint16_t map_vmods;uint32_t map_ctrls;};
struct _3982B52BB2F6F242AE0CDAAD29A77640 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;CARD32 nUniqCharInfos;CARD32 shmid;CARD32 shmsegoffset;};
struct _92276D725373BB3B16F8CB5C6778E662 {BYTE type;CARD8 nameLength;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nReplies;};
struct _A4EF4A77E40471EF410BD1BFBD9E090A {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 root_x;INT16 root_y;INT16 event_x;INT16 event_y;KeyButMask state;BOOL same_screen;CARD8 deviceid;};
struct _DA12207DA6457E73E677233E4BD11235 {uint8_t type;uint8_t extension;uint16_t sequenceNumber;uint32_t length;uint16_t evtype;uint16_t deviceid;uint32_t time;uint16_t sourceid;uint8_t mode;uint8_t detail;uint32_t root;uint32_t event;uint32_t child;FP1616 root_x;FP1616 root_y;FP1616 event_x;FP1616 event_y;BOOL same_screen;BOOL focus;uint16_t buttons_len;xXIModifierInfo mods;xXIGroupInfo group;};
struct xcb_shm_put_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;uint16_t total_width;uint16_t total_height;uint16_t src_x;uint16_t src_y;uint16_t src_width;uint16_t src_height;int16_t dst_x;int16_t dst_y;uint8_t depth;uint8_t format;uint8_t send_event;uint8_t pad0;xcb_shm_seg_t shmseg;uint32_t offset;};
struct xcb_xv_put_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;uint32_t id;int16_t src_x;int16_t src_y;uint16_t src_w;uint16_t src_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;uint16_t width;uint16_t height;};
struct xcb_randr_output_change_t {xcb_timestamp_t timestamp;xcb_timestamp_t config_timestamp;xcb_window_t window;xcb_randr_output_t output;xcb_randr_crtc_t crtc;xcb_randr_mode_t mode;uint16_t rotation;uint8_t connection;uint8_t subpixel_order;};
struct xcb_shape_mask_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_op_t operation;xcb_shape_kind_t destination_kind;uint8_t pad0[2];xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;xcb_pixmap_t source_bitmap;};
struct xcb_randr_crtc_change_t {xcb_timestamp_t timestamp;xcb_window_t window;xcb_randr_crtc_t crtc;xcb_randr_mode_t mode;uint16_t rotation;uint8_t pad0[2];int16_t x;int16_t y;uint16_t width;uint16_t height;};
union capi_ioctl_struct {__u32 contr;capi_register_params rparams;__u8 manufacturer[64];capi_version version;__u8 serial[8];capi_profile profile;capi_manufacturer_cmd cmd;__u16 errcode;};
struct _xQueryFontReply {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;};
struct _XkbGeometry {Atom name;unsigned __int16 width_mm;unsigned __int16 height_mm;char *label_font;XkbColorPtr label_color;XkbColorPtr base_color;unsigned __int16 sz_properties;unsigned __int16 sz_colors;unsigned __int16 sz_shapes;unsigned __int16 sz_sections;unsigned __int16 sz_doodads;unsigned __int16 sz_key_aliases;unsigned __int16 num_properties;unsigned __int16 num_colors;unsigned __int16 num_shapes;unsigned __int16 num_sections;unsigned __int16 num_doodads;unsigned __int16 num_key_aliases;XkbPropertyPtr properties;XkbColorPtr colors;XkbShapePtr shapes;XkbSectionPtr sections;XkbDoodadPtr doodads;XkbKeyAliasPtr key_aliases;};
struct _XcmsCCC {Display *dpy;int screenNumber;Visual *visual;XcmsColor clientWhitePt;XcmsCompressionProc gamutCompProc;XPointer gamutCompClientData;XcmsWhiteAdjustProc whitePtAdjProc;XPointer whitePtAdjClientData;XcmsPerScrnInfo *pPerScrnInfo;};
struct xcb_xkb_get_kbd_by_name_replies_t {struct xcb_xkb_get_kbd_by_name_replies_t___types types;struct xcb_xkb_get_kbd_by_name_replies_t___compat_map compat_map;struct xcb_xkb_get_kbd_by_name_replies_t___client_symbols client_symbols;struct xcb_xkb_get_kbd_by_name_replies_t___server_symbols server_symbols;struct xcb_xkb_get_kbd_by_name_replies_t___indicator_maps indicator_maps;struct xcb_xkb_get_kbd_by_name_replies_t___key_names key_names;struct xcb_xkb_get_kbd_by_name_replies_t___other_names other_names;struct xcb_xkb_get_kbd_by_name_replies_t___geometry geometry;};
struct xcb_xv_shm_put_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;xcb_shm_seg_t shmseg;uint32_t id;uint32_t offset;int16_t src_x;int16_t src_y;uint16_t src_w;uint16_t src_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;uint16_t width;uint16_t height;uint8_t send_event;uint8_t pad0[3];};
struct omap3isp_h3a_af_config {__u32 buf_size;__u16 config_counter;struct omap3isp_h3a_af_hmf hmf;struct omap3isp_h3a_af_iir iir;struct omap3isp_h3a_af_paxel paxel;enum omap3isp_h3a_af_rgbpos rgb_pos;enum omap3isp_h3a_af_fvmode fvmode;__u8 alaw_enable;};
typedef int (*OpenFontFunc)(pointer client, FontPathElementPtr fpe, Mask flags, char *name, int namelen, fsBitmapFormat format, fsBitmapFormatMask fmask, XID id, FontPtr *pFont, char **aliasName, FontPtr non_cachable_font);
struct __res_state {int retrans;int retry;u_long options;int nscount;struct sockaddr_in nsaddr_list[3];u_short id;char *dnsrch[7];char defdname[256];u_long pfcode;unsigned __int32 ndots : 4;unsigned __int32 nsort : 4;unsigned __int32 ipv6_unavail : 1;unsigned __int32 unused : 23;struct __res_state___A41D3F045172AF5618492D381489FAF0 sort_list[10];res_send_qhook qhook;res_send_rhook rhook;int res_h_errno;int _vcsock;u_int _flags;union __res_state___E19F19286CA79C25813C29B2F37D7904 _u;};
struct _XkbDesc {struct _XDisplay *dpy;unsigned __int16 flags;unsigned __int16 device_spec;KeyCode min_key_code;KeyCode max_key_code;XkbControlsPtr ctrls;XkbServerMapPtr server;XkbClientMapPtr map;XkbIndicatorPtr indicators;XkbNamesPtr names;XkbCompatMapPtr compat;XkbGeometryPtr geom;};
struct _Font {int refcnt;FontInfoRec info;char bit;char byte;char glyph;char scan;fsBitmapFormat format;int (*get_glyphs)(FontPtr, unsigned __int64, unsigned __int8 *, FontEncoding, unsigned __int64 *, CharInfoPtr *);int (*get_metrics)(FontPtr, unsigned __int64, unsigned __int8 *, FontEncoding, unsigned __int64 *, xCharInfo **);void (*unload_font)(FontPtr);void (*unload_glyphs)(FontPtr);FontPathElementPtr fpe;pointer svrPrivate;pointer fontPrivate;pointer fpePrivate;int maxPrivate;pointer *devPrivates;};
union _CC029EE2801424412B933EF9795F5046___199E9548C3C848AC2EFDDFCE03257421 {XcmsRGB RGB;XcmsRGBi RGBi;XcmsCIEXYZ CIEXYZ;XcmsCIEuvY CIEuvY;XcmsCIExyY CIExyY;XcmsCIELab CIELab;XcmsCIELuv CIELuv;XcmsTekHVC TekHVC;XcmsPad Pad;};
union edd_device_params___77E84888D903973077CE4CFDC6BFCF35 {__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5355185EB8EFB70EF804337A514801F4 ata;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___83773ADBAD3B93FDD4B93390256209A7 atapi;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___88F788ECB28BCCE1F1BB53FF78063EDE scsi;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___A8715AB24EE22E2A929A76D7931F76D0 usb;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___835C5C2F1D39D04DA38329CAD2148D35 i1394;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5D4484EFAC362B9C4E377EE9D3C2BA2F fibre;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___16150796182201030812428BD2F4D48E i2o;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5D56A3B05DC79D2B39CE2065DB667513 raid;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___5355185EB8EFB70EF804337A514801F4 sata;__attribute__((packed)) struct edd_device_params___77E84888D903973077CE4CFDC6BFCF35___67AFCD26D9906A14E8CE0368700EBABB unknown;};
union proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A {struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A___5875BC7EBFDF39B43C4D68A641A956DA ack;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__fork_proc_event fork;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__exec_proc_event exec;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__id_proc_event id;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__sid_proc_event sid;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__ptrace_proc_event ptrace;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__comm_proc_event comm;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__coredump_proc_event coredump;struct proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A__exit_proc_event exit;};
union _FCCE1A1F8B9F9C96C548060B126B0081 {__u8 type;struct dvd_lu_send_agid lsa;struct dvd_host_send_challenge hsc;struct dvd_send_key lsk;struct dvd_lu_send_challenge lsc;struct dvd_send_key hsk;struct dvd_lu_send_title_key lstk;struct dvd_lu_send_asf lsasf;struct dvd_host_send_rpcstate hrpcs;struct dvd_lu_send_rpcstate lrpcs;};
struct xcb_xkb_bell_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xkb_device_spec_t deviceSpec;xcb_xkb_bell_class_spec_t bellClass;xcb_xkb_id_spec_t bellID;int8_t percent;uint8_t forceSound;uint8_t eventOnly;uint8_t pad0;int16_t pitch;int16_t duration;uint8_t pad1[2];xcb_atom_t name;xcb_window_t window;};
struct xfrm_usersa_info {struct xfrm_selector sel;struct xfrm_id id;xfrm_address_t saddr;struct xfrm_lifetime_cfg lft;struct xfrm_lifetime_cur curlft;struct xfrm_stats stats;__u32 seq;__u32 reqid;__u16 family;__u8 mode;__u8 replay_window;__u8 flags;};
union fw_cdev_event {struct fw_cdev_event_common common;struct fw_cdev_event_bus_reset bus_reset;struct fw_cdev_event_response response;struct fw_cdev_event_request request;struct fw_cdev_event_request2 request2;struct fw_cdev_event_iso_interrupt iso_interrupt;struct fw_cdev_event_iso_interrupt_mc iso_interrupt_mc;struct fw_cdev_event_iso_resource iso_resource;struct fw_cdev_event_phy_packet phy_packet;};
struct td_thrinfo {td_thragent_t *ti_ta_p;unsigned int ti_user_flags;thread_t ti_tid;char *ti_tls;psaddr_t ti_startfunc;psaddr_t ti_stkbase;__int64 ti_stksize;psaddr_t ti_ro_area;int ti_ro_size;td_thr_state_e ti_state;unsigned __int8 ti_db_suspended;td_thr_type_e ti_type;intptr_t ti_pc;intptr_t ti_sp;__int16 ti_flags;int ti_pri;lwpid_t ti_lid;sigset_t ti_sigmask;unsigned __int8 ti_traceme;unsigned __int8 ti_preemptflag;unsigned __int8 ti_pirecflag;sigset_t ti_pending;td_thr_events_t ti_events;};
union sctp_notification {struct sctp_notification___C5201E10A3BA1990E1BB7800BD4B4755 sn_header;struct sctp_assoc_change sn_assoc_change;struct sctp_paddr_change sn_paddr_change;struct sctp_remote_error sn_remote_error;struct sctp_send_failed sn_send_failed;struct sctp_shutdown_event sn_shutdown_event;struct sctp_adaptation_event sn_adaptation_event;struct sctp_pdapi_event sn_pdapi_event;struct sctp_authkey_event sn_authkey_event;struct sctp_sender_dry_event sn_sender_dry_event;};
union xcb_xkb_behavior_t {xcb_xkb_common_behavior_t common;xcb_xkb_default_behavior_t _default;xcb_xkb_lock_behavior_t lock;xcb_xkb_radio_group_behavior_t radioGroup;xcb_xkb_overlay_1_behavior_t overlay1;xcb_xkb_overlay_2_behavior_t overlay2;xcb_xkb_permament_lock_behavior_t permamentLock;xcb_xkb_permament_radio_group_behavior_t permamentRadioGroup;xcb_xkb_permament_overlay_1_behavior_t permamentOverlay1;xcb_xkb_permament_overlay_2_behavior_t permamentOverlay2;uint8_t type;};
struct stat64 {__dev_t st_dev;__ino64_t st_ino;__nlink_t st_nlink;__mode_t st_mode;__uid_t st_uid;__gid_t st_gid;int __pad0;__dev_t st_rdev;__off_t st_size;__blksize_t st_blksize;__blkcnt64_t st_blocks;struct timespec st_atim;struct timespec st_mtim;struct timespec st_ctim;__syscall_slong_t __unused[3];};
struct stat {__dev_t st_dev;__ino_t st_ino;__nlink_t st_nlink;__mode_t st_mode;__uid_t st_uid;__gid_t st_gid;int __pad0;__dev_t st_rdev;__off_t st_size;__blksize_t st_blksize;__blkcnt_t st_blocks;struct timespec st_atim;struct timespec st_mtim;struct timespec st_ctim;__syscall_slong_t __unused[3];};
union _xkbEvent___1A318C185F777B9ECB86573CC964DEF2 {xkbAnyEvent any;xkbNewKeyboardNotify new_kbd;xkbMapNotify map;xkbStateNotify state;xkbControlsNotify ctrls;xkbIndicatorNotify indicators;xkbNamesNotify names;xkbCompatMapNotify compat;xkbBellNotify bell;xkbActionMessage message;xkbAccessXNotify accessx;xkbExtensionDeviceNotify device;};
struct _XExten {struct _XExten *next;XExtCodes codes;CreateGCType create_GC;CopyGCType copy_GC;FlushGCType flush_GC;FreeGCType free_GC;CreateFontType create_Font;FreeFontType free_Font;CloseDisplayType close_display;ErrorType error;ErrorStringType error_string;char *name;PrintErrorType error_values;BeforeFlushType before_flush;struct _XExten *next_flush;};
union _XkbAction {XkbAnyAction any;XkbModAction mods;XkbGroupAction group;XkbISOAction iso;XkbPtrAction ptr;XkbPtrBtnAction btn;XkbPtrDfltAction dflt;XkbSwitchScreenAction screen;XkbCtrlsAction ctrls;XkbMessageAction msg;XkbRedirectKeyAction redirect;XkbDeviceBtnAction devbtn;XkbDeviceValuatorAction devval;unsigned __int8 type;};
union _XkbEvent {int type;XkbAnyEvent any;XkbNewKeyboardNotifyEvent new_kbd;XkbMapNotifyEvent map;XkbStateNotifyEvent state;XkbControlsNotifyEvent ctrls;XkbIndicatorNotifyEvent indicators;XkbNamesNotifyEvent names;XkbCompatMapNotifyEvent compat;XkbBellNotifyEvent bell;XkbActionMessageEvent message;XkbAccessXNotifyEvent accessx;XkbExtensionDeviceNotifyEvent device;XEvent core;};
struct _FPEFunctions {NameCheckFunc name_check;InitFpeFunc init_fpe;ResetFpeFunc reset_fpe;FreeFpeFunc free_fpe;OpenFontFunc open_font;CloseFontFunc close_font;ListFontsFunc list_fonts;StartLaFunc start_list_fonts_and_aliases;NextLaFunc list_next_font_or_alias;StartLfwiFunc start_list_fonts_with_info;NextLfwiFunc list_next_font_with_info;WakeupFpeFunc wakeup_fpe;ClientDiedFunc client_died;LoadGlyphsFunc load_glyphs;SetPathFunc set_path_hook;};
struct _XDisplay {XExtData *ext_data;struct _XFreeFuncs *free_funcs;int fd;int conn_checker;int proto_major_version;int proto_minor_version;char *vendor;XID resource_base;XID resource_mask;XID resource_id;int resource_shift;XID (*resource_alloc)(struct _XDisplay *);int byte_order;int bitmap_unit;int bitmap_pad;int bitmap_bit_order;int nformats;ScreenFormat *pixmap_format;int vnumber;int release;struct _XSQEvent *head;struct _XSQEvent *tail;int qlen;unsigned __int64 last_request_read;unsigned __int64 request;char *last_req;char *buffer;char *bufptr;char *bufmax;unsigned int max_request_size;struct _XrmHashBucketRec *db;int (*synchandler)(struct _XDisplay *);char *display_name;int default_screen;int nscreens;Screen *screens;unsigned __int64 motion_buffer;unsigned __int64 flags;int min_keycode;int max_keycode;KeySym *keysyms;XModifierKeymap *modifiermap;int keysyms_per_keycode;char *xdefaults;char *scratch_buffer;unsigned __int64 scratch_length;int ext_number;struct _XExten *ext_procs;int (**event_vec)(Display *, XEvent *, xEvent *);int (**wire_vec)(Display *, XEvent *, xEvent *);KeySym lock_meaning;struct _XLockInfo *lock;struct _XInternalAsync *async_handlers;unsigned __int64 bigreq_size;struct _XLockPtrs *lock_fns;void (*idlist_alloc)(Display *, XID *, int);struct _XKeytrans *key_bindings;Font cursor_font;struct _XDisplayAtoms *atoms;unsigned int mode_switch;unsigned int num_lock;struct _XContextDB *context_db;int (**error_vec)(Display *, XErrorEvent *, xError *);struct _XDisplay___40E717ABED307E15FC65B9096F5C7074 cms;struct _XIMFilter *im_filters;struct _XSQEvent *qfree;unsigned __int64 next_event_serial_num;struct _XExten *flushes;struct _XConnectionInfo *im_fd_info;int im_fd_length;struct _XConnWatchInfo *conn_watchers;int watcher_count;XPointer filedes;int (*savedsynchandler)(Display *);XID resource_max;int xcmisc_opcode;struct _XkbInfoRec *xkb_info;struct _XtransConnInfo *trans_conn;struct _X11XCBPrivate *xcb;unsigned int next_cookie;int (**generic_event_vec)(Display *, XGenericEventCookie *, xEvent *);int (**generic_event_copy_vec)(Display *, XGenericEventCookie *, XGenericEventCookie *);void *cookiejar;};
struct rusage {struct timeval ru_utime;struct timeval ru_stime;rusage___C8E0368DFE215138D5FE989391EDF66A __anonymous0;rusage___432FF46A9027D949EED7182447443219 __anonymous1;rusage___E7EE59A34ECBA4FFAE4E24E03E23B031 __anonymous2;rusage___D61F8409E13EA6E11D92C6D9757A1531 __anonymous3;rusage___1358501C97B7AC417CB67978351D7ED8 __anonymous4;rusage___BE0BA0CA85EE8DDDB4C2D45E2D812E33 __anonymous5;rusage___C0F0170E03C25EB818136FFBEB1A4400 __anonymous6;rusage___053CCAE027B5BFCB43679F38B0BBAFFB __anonymous7;rusage___9F5E3C17DD7C53B5A698FB11C246C70B __anonymous8;rusage___5B25822D21B23C62AAC800B59197C0E9 __anonymous9;rusage___C564AC21F6E5BE8C627FEDECB4652ACF __anonymous10;rusage___C83E8E9C9ADD361154E0D8EBED847957 __anonymous11;rusage___2C815BBF04E92D15CDB4A45E8AD3A3E5 __anonymous12;rusage___3B4947AE73BD84433438D8F38CADF7D5 __anonymous13;};
union xcb_xkb_action_t {xcb_xkb_sa_no_action_t noaction;xcb_xkb_sa_set_mods_t setmods;xcb_xkb_sa_latch_mods_t latchmods;xcb_xkb_sa_lock_mods_t lockmods;xcb_xkb_sa_set_group_t setgroup;xcb_xkb_sa_latch_group_t latchgroup;xcb_xkb_sa_lock_group_t lockgroup;xcb_xkb_sa_move_ptr_t moveptr;xcb_xkb_sa_ptr_btn_t ptrbtn;xcb_xkb_sa_lock_ptr_btn_t lockptrbtn;xcb_xkb_sa_set_ptr_dflt_t setptrdflt;xcb_xkb_sa_iso_lock_t isolock;xcb_xkb_sa_terminate_t terminate;xcb_xkb_sa_switch_screen_t switchscreen;xcb_xkb_sa_set_controls_t setcontrols;xcb_xkb_sa_lock_controls_t lockcontrols;xcb_xkb_sa_action_message_t message;xcb_xkb_sa_redirect_key_t redirect;xcb_xkb_sa_device_btn_t devbtn;xcb_xkb_sa_lock_device_btn_t lockdevbtn;xcb_xkb_sa_device_valuator_t devval;uint8_t type;};
union _XEvent {int type;XAnyEvent xany;XKeyEvent xkey;XButtonEvent xbutton;XMotionEvent xmotion;XCrossingEvent xcrossing;XFocusChangeEvent xfocus;XExposeEvent xexpose;XGraphicsExposeEvent xgraphicsexpose;XNoExposeEvent xnoexpose;XVisibilityEvent xvisibility;XCreateWindowEvent xcreatewindow;XDestroyWindowEvent xdestroywindow;XUnmapEvent xunmap;XMapEvent xmap;XMapRequestEvent xmaprequest;XReparentEvent xreparent;XConfigureEvent xconfigure;XGravityEvent xgravity;XResizeRequestEvent xresizerequest;XConfigureRequestEvent xconfigurerequest;XCirculateEvent xcirculate;XCirculateRequestEvent xcirculaterequest;XPropertyEvent xproperty;XSelectionClearEvent xselectionclear;XSelectionRequestEvent xselectionrequest;XSelectionEvent xselection;XColormapEvent xcolormap;XClientMessageEvent xclient;XMappingEvent xmapping;XErrorEvent xerror;XKeymapEvent xkeymap;XGenericEvent xgeneric;XGenericEventCookie xcookie;__int64 pad[24];};
union _B20031452D9C70A13D819C8DDA3A0BA9 {xGenericReply generic;xGetGeometryReply geom;xQueryTreeReply tree;xInternAtomReply atom;xGetAtomNameReply atomName;xGetPropertyReply property;xListPropertiesReply listProperties;xGetSelectionOwnerReply selection;xGrabPointerReply grabPointer;xGrabKeyboardReply grabKeyboard;xQueryPointerReply pointer;xGetMotionEventsReply motionEvents;xTranslateCoordsReply coords;xGetInputFocusReply inputFocus;xQueryTextExtentsReply textExtents;xListFontsReply fonts;xGetFontPathReply fontPath;xGetImageReply image;xListInstalledColormapsReply colormaps;xAllocColorReply allocColor;xAllocNamedColorReply allocNamedColor;xAllocColorCellsReply colorCells;xAllocColorPlanesReply colorPlanes;xQueryColorsReply colors;xLookupColorReply lookupColor;xQueryBestSizeReply bestSize;xQueryExtensionReply extension;xListExtensionsReply extensions;xSetModifierMappingReply setModifierMapping;xGetModifierMappingReply getModifierMapping;xSetPointerMappingReply setPointerMapping;xGetKeyboardMappingReply getKeyboardMapping;xGetPointerMappingReply getPointerMapping;xGetPointerControlReply pointerControl;xGetScreenSaverReply screenSaver;xListHostsReply hosts;xError error;xEvent event;};
union xt_connlimit_info___2316CCD6442B00724D40925D6B9B4268___185FF880A31D1CBC1AF0F20DFB0DEDD2 {__be32 v4_mask;__be32 v6_mask[4];};
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct rejected_reply___D36433C375B856769A86CDA2CFADE497___C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct snd_ctl_event___B1C3D1BE79EA6FA03579F1A08F6F0A3D___F4D573410A5F3854575F2E2B75797C20 {unsigned int mask;struct snd_ctl_elem_id id;};
struct sockaddr_can___F47FAF2DB8D039FA9C579D1D02AFD16F___888F1D5EABBD72B66F9BAD01300731CD {canid_t rx_id;canid_t tx_id;};
struct fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F___C39E03481AFE0E573C312A59C4C671D6 {__be32 _sp_r_a_tov;};
struct fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F___E76D94573918C22570AE3AA9276993EE {__be16 _sp_tot_seq;__be16 _sp_rel_off;};
struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___CC6BD5761BCACBE21B81D4A929CF3C3D {struct kvm_debug_exit_arch arch;};
struct objdata___B3007D6063AF66DF722E8A0D3E39E00C___C5CA305DAC14A48247D92F909AB77E9C {u_int po_data_len;char *po_data_val;};
struct rpc_err___055F5448726BC1208A44545720AB7286___C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct icmp___EEC48C5976A17953B310258F40698883___E13592CBDF627F773A21D4C55E8BB1FD {struct ip idi_ip;};
struct _6DF3DE276417BF858702C9AB9AD460CB___471377A4EE616195936A53166C2E8985 {Elf32_Word gt_g_value;Elf32_Word gt_bytes;};
struct _6DF3DE276417BF858702C9AB9AD460CB___C80D1A5D569DC2D014AF103056E679B8 {Elf32_Word gt_current_g_value;Elf32_Word gt_unused;};
struct nf_conntrack_man_proto___AA6E5880199E696CC896E03DACE929E6 {__be16 key;};
struct nf_conntrack_man_proto___B48BD05349DE676D76CC685BEB0DC163 {__be16 port;};
struct nf_conntrack_man_proto___B56350B8BCA52A0B7CED2F9F39DFA71F {__be16 id;};
union __attribute__((packed)) usb_functionfs_event___2FE4DF590A0960BC953C17B3843D0178 {struct usb_ctrlrequest setup;};
union gfs2_meta_header___36B1B7A4DC3E2283F03CC74A1F220CF9 {__be32 mh_jid;__be32 __pad1;};
union snd_pcm_sync_ptr___6C91CFB586BA7C43700D4DD67E507598 {struct snd_pcm_mmap_control control;unsigned __int8 reserved[64];};
union snd_pcm_sync_ptr___B547EC122A9F3EBA28D1B9F9B8E2C390 {struct snd_pcm_mmap_status status;unsigned __int8 reserved[64];};
struct directory_obj___1F9DB6EC5B4D38C4C9C3429D1A4D637D {u_int do_servers_len;nis_server *do_servers_val;};
struct directory_obj___C1C9E10248BAA10524C7D0EEA27D2609 {u_int do_armask_len;oar_mask *do_armask_val;};
union snd_ctl_event___B1C3D1BE79EA6FA03579F1A08F6F0A3D {struct snd_ctl_event___B1C3D1BE79EA6FA03579F1A08F6F0A3D___F4D573410A5F3854575F2E2B75797C20 elem;unsigned __int8 data8[60];};
union key_netstres___2176196DCBB8522A9A1E300DB0535BE5 {key_netstarg knet;};
union klm_testrply___40F9D261D31BF2147C1606393BAB8476 {struct klm_holder holder;};
union sockaddr_can___F47FAF2DB8D039FA9C579D1D02AFD16F {struct sockaddr_can___F47FAF2DB8D039FA9C579D1D02AFD16F___888F1D5EABBD72B66F9BAD01300731CD tp;};
struct vfs_cap_data___1A090B8EA054F4F02D05FCE87D20A421 {__le32 permitted;__le32 inheritable;};
union arpt_mangle___966621F5207D1D909BB79365A6E3D80A {struct in_addr tgt_ip;};
union arpt_mangle___F65E77752E3CFFFEA995A77A594CEF9A {struct in_addr src_ip;};
union cryptkeyres___EF36972044157FC290EE2FE4EF835697 {des_block deskey;};
struct nis_taglist___D5235F6F3B62BCE7910AF756FE53E6D0 {u_int tags_len;nis_tag *tags_val;};
struct ib_request___284138CD61DEACF1E3B0F8ADC9D2B817 {u_int ibr_srch_len;nis_attr *ibr_srch_val;};
struct ib_request___2D577313DCD2E74CD5A0055993933E3C {u_int ibr_cbhost_len;nis_server *ibr_cbhost_val;};
struct ib_request___BC4F227684F3C8C9122828D0FF4C6B30 {u_int ibr_obj_len;nis_object *ibr_obj_val;};
struct log_result___946B3E427CBAEF2C8E64E80E43621ACD {u_int lr_entries_len;log_entry *lr_entries_val;};
struct nis_result___4B6B45C3F1C3815D68D653B8D499AE33 {u_int objects_len;nis_object *objects_val;};
struct nis_server___DA92845B88BF4FFBAAA2281E50DC5AF5 {u_int ep_len;endpoint *ep_val;};
struct ns_request___C16B7AFEC0429C3BD747A37F4D827FFD {u_int ns_object_len;nis_object *ns_object_val;};
union ypresp_all___438EB5C0F713AEE99C9EADC1C626DC0A {ypresp_key_val val;};
union desparams___F38C3328E965CE3ADB16864418918AD0 {u_char UDES_data[16];u_char *UDES_buf;};
struct dump_args___00C533AE8545A66FA38641508A3DC473 {u_int da_cbhost_len;nis_server *da_cbhost_val;};
struct entry_col___E942B815045DEE9FABC14DA0AE6314FC {u_int ec_value_len;char *ec_value_val;};
struct entry_obj___9954B692FACAC347CBA764979909DFF4 {u_int en_cols_len;entry_col *en_cols_val;};
struct fd_result___864956CB4DA79F92CA310E20E4E9B271 {u_int signature_len;char *signature_val;};
struct fd_result___E188DDB4946479B1B04909415F6D7A2E {u_int dir_data_len;char *dir_data_val;};
struct log_entry___1E639176190539C4AF5A837E820AE922 {u_int le_attrs_len;nis_attr *le_attrs_val;};
struct table_obj___37F826B7C2AFF7B3E483E0E1EE89ED51 {u_int ta_cols_len;table_col *ta_cols_val;};
struct link_obj___6E2208C80A69EAD3D69988E63D048B29 {u_int li_attrs_len;nis_attr *li_attrs_val;};
struct nis_attr___F2081D9F3F0358B3A954C101A2B200CE {u_int zattr_val_len;char *zattr_val_val;};
struct unixcred___B86B6406BF4F2F34B5DC36D552B35DA0 {u_int gids_len;u_int *gids_val;};
union ifaddr___0DF00F875CAF96EB397809642F17405E {struct sockaddr ifu_broadaddr;struct sockaddr ifu_dstaddr;};
union vifctl___1C189D187363D064D33CA1A5631EE3F5 {struct in_addr vifc_lcl_addr;int vifc_lcl_ifindex;};
union rip___AFFF135AAACB9FA320A59FAF8451ECA8 {struct netinfo ru_nets[1];char ru_tracefile[1];};
union tsp___E78A65B7E52D74DB905DCAA7AEC02B40 {struct timeval tspu_time;char tspu_hopcnt;};
struct xcb_record_element_header_iterator_t {xcb_record_element_header_t *data;int rem;int index;};
struct xcb_xkb_bell_class_spec_iterator_t {xcb_xkb_bell_class_spec_t *data;int rem;int index;};
struct _00580D67DBBDE0DF5EC3B468D69A2E22 {Elf64_Word l_name;Elf64_Word l_time_stamp;Elf64_Word l_checksum;Elf64_Word l_version;Elf64_Word l_flags;};
struct _0D364CBB4DE5622667695AC90920144B {u_int valdat_len;char *valdat_val;};
struct _12883A0710B467FBB4742064A9BE69DF {Elf32_Word vda_name;Elf32_Word vda_next;};
struct _149F28F052847359C6CBD46BA265755A {u_int yp_buf_len;char *yp_buf_val;};
struct _19DEE1C64F7EC3DDB040A3404BEC0D9F {u_int utmp_array_len;rusers_utmp *utmp_array_val;};
struct _271D5A48EF70FFAE3A8D1DC7505162EA {struct _ftsent *fts_cur;struct _ftsent *fts_child;struct _ftsent **fts_array;dev_t fts_dev;char *fts_path;int fts_rfd;int fts_pathlen;int fts_nitems;int (*fts_compar)(const void *, const void *);int fts_options;};
struct _2FC37C12F50461D7B99376C23209E757 {Elf64_Half si_boundto;Elf64_Half si_flags;};
struct _34681C3D6FB58953006C9844DC50C14F {BYTE type;BYTE map[31];};
struct _45BD469DC424D3F368EE6E10DDB8D8EE {Elf32_Word l_name;Elf32_Word l_time_stamp;Elf32_Word l_checksum;Elf32_Word l_version;Elf32_Word l_flags;};
union _4A6884A56FE442900684DB208A74F8AB {__be32 a4;__be32 a6[4];};
struct _5EDD4B4F882E321F07D8AFF023DDDD7D {u_int keydat_len;char *keydat_val;};
struct _618636EC27B0E4EC9B44F71D22005A57 {int w;int h;video_format_t aspect_ratio;};
struct _636E06EF14FC653C9FA755BCE21D4A3F {char *chars;int nchars;int delta;Font font;};
struct _70B44F1B75B46BEFA77A9E3E77B6A4A4 {__le32 xtnt_blk;__le32 xtnt_size;};
struct _8A4D2DD0535D3740C9D9302B62B9E8F3 {Elf32_Word n_namesz;Elf32_Word n_descsz;Elf32_Word n_type;};
struct _909A0603F1AED8DD09B6D1E58BF56A67 {unsigned int filter;IXJ_FILTER_FREQ freq;char enable;};
struct _9375A326D5D02800B5E28ACECE8480CB {int num_orientation;XOrientation *orientation;};
struct _BA1C9873524F37DFA28FC6E8B2A0BC7B {int x;int y;int width;int height;int border_width;Window sibling;int stack_mode;};
struct _C9793B2A88A40550F3E6FCBE57C78800 {u_int sprayarr_len;char *sprayarr_val;};
struct _CA18D99C52BF47BA3661A7BE783B3F23 {Elf64_Word n_namesz;Elf64_Word n_descsz;Elf64_Word n_type;};
struct _D30E1CD2E9753287075FA3466243327C {Elf32_Word hwp_flags1;Elf32_Word hwp_flags2;};
struct _D758E79311354DDC9AF0CC7E7C22CD10 {Elf64_Word vda_name;Elf64_Word vda_next;};
struct _E4BD27FA28615E7C40C852B0946EB2BB {sctp_assoc_t associd;int sd;};
struct _FE43560485AD2DF497423A9D2646B91A {Elf32_Half si_boundto;Elf32_Half si_flags;};
struct _FF42BAC5ED235A895D76875BB02F1547 {int si_signo;int si_errno;int si_code;union _FF42BAC5ED235A895D76875BB02F1547___41B0E947727B04B281BBEA4B1896A8BE _sifields;};
struct xcb_record_client_spec_iterator_t {xcb_record_client_spec_t *data;int rem;int index;};
struct xcb_xkb_led_class_spec_iterator_t {xcb_xkb_led_class_spec_t *data;int rem;int index;};
struct xcb_input_event_class_iterator_t {xcb_input_event_class_t *data;int rem;int index;};
struct xcb_render_pictformat_iterator_t {xcb_render_pictformat_t *data;int rem;int index;};
struct xcb_x_print_pcontext_iterator_t {xcb_x_print_pcontext_t *data;int rem;int index;};
struct xcb_glx_context_tag_iterator_t {xcb_glx_context_tag_t *data;int rem;int index;};
struct xcb_render_glyphset_iterator_t {xcb_render_glyphset_t *data;int rem;int index;};
struct xcb_xkb_device_spec_iterator_t {xcb_xkb_device_spec_t *data;int rem;int index;};
struct xcb_xvmc_subpicture_iterator_t {xcb_xvmc_subpicture_t *data;int rem;int index;};
struct xcb_input_device_time_coord_t {xcb_timestamp_t time;};
struct xcb_input_key_code_iterator_t {xcb_input_key_code_t *data;int rem;int index;};
struct xcb_record_context_iterator_t {xcb_record_context_t *data;int rem;int index;};
struct xcb_render_picture_iterator_t {xcb_render_picture_t *data;int rem;int index;};
typedef void (*_Unwind_Exception_Cleanup_Fn)(_Unwind_Reason_Code, struct _Unwind_Exception *);
struct xcb_damage_damage_iterator_t {xcb_damage_damage_t *data;int rem;int index;};
struct xcb_xfixes_region_iterator_t {xcb_xfixes_region_t *data;int rem;int index;};
struct nfulnl_msg_packet_timestamp {__attribute__((aligned(8))) __be64 sec;__attribute__((aligned(8))) __be64 usec;};
struct __attribute__((packed)) usb_functionfs_strings_head {__le32 magic;__le32 length;__le32 str_count;__le32 lang_count;};
struct xcb_glx_drawable_iterator_t {xcb_glx_drawable_t *data;int rem;int index;};
struct xcb_glx_fbconfig_iterator_t {xcb_glx_fbconfig_t *data;int rem;int index;};
struct xcb_randr_output_iterator_t {xcb_randr_output_t *data;int rem;int index;};
struct xcb_render_fixed_iterator_t {xcb_render_fixed_t *data;int rem;int index;};
struct xcb_render_glyph_iterator_t {xcb_render_glyph_t *data;int rem;int index;};
struct xcb_sync_counter_iterator_t {xcb_sync_counter_t *data;int rem;int index;};
struct xcb_xvmc_context_iterator_t {xcb_xvmc_context_t *data;int rem;int index;};
struct xcb_xvmc_surface_iterator_t {xcb_xvmc_surface_t *data;int rem;int index;};
struct nfqnl_msg_packet_timestamp {__attribute__((aligned(8))) __be64 sec;__attribute__((aligned(8))) __be64 usec;};
struct xcb_glx_context_iterator_t {xcb_glx_context_t *data;int rem;int index;};
struct xcb_glx_pbuffer_iterator_t {xcb_glx_pbuffer_t *data;int rem;int index;};
struct xcb_xkb_id_spec_iterator_t {xcb_xkb_id_spec_t *data;int rem;int index;};
struct xcb_xv_encoding_iterator_t {xcb_xv_encoding_t *data;int rem;int index;};
struct __attribute__((packed)) usb_functionfs_descs_head {__le32 magic;__le32 length;__le32 fs_count;__le32 hs_count;};
struct xcb_glx_bool32_iterator_t {xcb_glx_bool32_t *data;int rem;int index;};
struct xcb_glx_pixmap_iterator_t {xcb_glx_pixmap_t *data;int rem;int index;};
struct xcb_glx_window_iterator_t {xcb_glx_window_t *data;int rem;int index;};
struct xcb_randr_crtc_iterator_t {xcb_randr_crtc_t *data;int rem;int index;};
struct xcb_randr_mode_iterator_t {xcb_randr_mode_t *data;int rem;int index;};
struct xcb_shape_kind_iterator_t {xcb_shape_kind_t *data;int rem;int index;};
struct xcb_sync_alarm_iterator_t {xcb_sync_alarm_t *data;int rem;int index;};
struct xcb_sync_fence_iterator_t {xcb_sync_fence_t *data;int rem;int index;};
struct xcb_timestamp_iterator_t {xcb_timestamp_t *data;int rem;int index;};
struct btrfs_ioctl_search_args {struct btrfs_ioctl_search_key key;char buf[3992];};
typedef __io_write_fn cookie_write_function_t;
struct xcb_colormap_iterator_t {xcb_colormap_t *data;int rem;int index;};
struct xcb_drawable_iterator_t {xcb_drawable_t *data;int rem;int index;};
struct xcb_fontable_iterator_t {xcb_fontable_t *data;int rem;int index;};
struct xcb_gcontext_iterator_t {xcb_gcontext_t *data;int rem;int index;};
struct xcb_shape_op_iterator_t {xcb_shape_op_t *data;int rem;int index;};
struct xcb_visualid_iterator_t {xcb_visualid_t *data;int rem;int index;};
typedef __io_read_fn cookie_read_function_t;
typedef __io_seek_fn cookie_seek_function_t;
struct xcb_keycode_iterator_t {xcb_keycode_t *data;int rem;int index;};
struct xcb_render_transform_t {xcb_render_fixed_t matrix11;xcb_render_fixed_t matrix12;xcb_render_fixed_t matrix13;xcb_render_fixed_t matrix21;xcb_render_fixed_t matrix22;xcb_render_fixed_t matrix23;xcb_render_fixed_t matrix31;xcb_render_fixed_t matrix32;xcb_render_fixed_t matrix33;};
struct xcb_shm_seg_iterator_t {xcb_shm_seg_t *data;int rem;int index;};
struct xcb_xv_port_iterator_t {xcb_xv_port_t *data;int rem;int index;};
struct __attribute__((packed)) i2400m_bootrom_header {__le32 command;__le32 target_addr;__le32 data_size;__le32 block_checksum;char payload[];};
struct ib_ucm_lap_event_resp {struct ib_user_path_rec path;};
struct ifla_vxlan_port_range {__be16 low;__be16 high;};
struct nfqnl_msg_verdict_hdr {__be32 verdict;__be32 id;};
struct reiserfs_xattr_header {__le32 h_magic;__le32 h_hash;};
struct tipc_name_table_query {__be32 depth;__be32 type;__be32 lowbound;__be32 upbound;};
struct v4l2_frmival_stepwise {struct v4l2_fract min;struct v4l2_fract max;struct v4l2_fract step;};
struct virtio_balloon_config {__le32 num_pages;__le32 actual;};
struct xcb_button_iterator_t {xcb_button_t *data;int rem;int index;};
struct xcb_cursor_iterator_t {xcb_cursor_t *data;int rem;int index;};
struct xcb_keysym_iterator_t {xcb_keysym_t *data;int rem;int index;};
struct xcb_pixmap_iterator_t {xcb_pixmap_t *data;int rem;int index;};
struct xcb_render_pointfix_t {xcb_render_fixed_t x;xcb_render_fixed_t y;};
struct xcb_render_triangle_t {xcb_render_pointfix_t p1;xcb_render_pointfix_t p2;xcb_render_pointfix_t p3;};
struct xcb_window_iterator_t {xcb_window_t *data;int rem;int index;};
struct xt_set_info_target_v0 {struct xt_set_info_v0 add_set;struct xt_set_info_v0 del_set;};
struct xt_set_info_target_v1 {struct xt_set_info add_set;struct xt_set_info del_set;};
struct kvm_mmu_op_flush_tlb {struct kvm_mmu_op_header header;};
struct ovs_action_push_vlan {__be16 vlan_tpid;__be16 vlan_tci;};
struct snd_pcm_channel_info {unsigned int channel;__kernel_off_t offset;unsigned int first;unsigned int step;};
struct __attribute__((packed)) usb_cdc_speed_change {__le32 DLBitRRate;__le32 ULBitRate;};
struct xcb_render_linefix_t {xcb_render_pointfix_t p1;xcb_render_pointfix_t p2;};
struct xcb_render_spanfix_t {xcb_render_fixed_t l;xcb_render_fixed_t r;xcb_render_fixed_t y;};
struct xt_set_info_match_v0 {struct xt_set_info_v0 match_set;};
struct xt_set_info_match_v1 {struct xt_set_info match_set;};
struct cyclades_idle_stats {__kernel_time_t in_use;__kernel_time_t recv_idle;__kernel_time_t xmit_idle;unsigned __int64 recv_bytes;unsigned __int64 xmit_bytes;unsigned __int64 overruns;unsigned __int64 frame_errs;unsigned __int64 parity_errs;};
struct xcb_atom_iterator_t {xcb_atom_t *data;int rem;int index;};
struct xcb_font_iterator_t {xcb_font_t *data;int rem;int index;};
typedef XcmsDIConversionProc XcmsConversionProc;
struct dvb_vsb_parameters {fe_modulation_t modulation;};
struct gfs2_statfs_change {__be64 sc_total;__be64 sc_free;__be64 sc_dinodes;};
struct __attribute__((packed)) i2400m_pl_data_hdr {__le32 reserved;};
struct ip_set_req_get_set {unsigned int op;unsigned int version;union ip_set_name_index set;};
struct ip_vs_get_services {unsigned int num_services;struct ip_vs_service_entry entrytable[];};
struct ptp_perout_request {struct ptp_clock_time start;struct ptp_clock_time period;unsigned int index;unsigned int flags;unsigned int rsv[4];};
struct _XIMHotKeyTrigger {KeySym keysym;int modifier;int modifier_mask;};
struct nd_router_solicit {struct icmp6_hdr nd_rs_hdr;};
struct sctp_getaddrs_old {sctp_assoc_t assoc_id;int addr_num;struct sockaddr *addrs;};
struct __attribute__((packed)) usb_cdc_ncm_dpe16 {__le16 wDatagramIndex;__le16 wDatagramLength;};
struct __attribute__((packed)) usb_cdc_ncm_dpe32 {__le32 dwDatagramIndex;__le32 dwDatagramLength;};
struct xcb_render_trap_t {xcb_render_spanfix_t top;xcb_render_spanfix_t bot;};
struct Dwarf_Regtable_s {struct Dwarf_Regtable_Entry_s rules[66];};
struct dccp_hdr_request {__be32 dccph_req_service;};
struct ebt_mac_wormhash {int table[257];int poolsize;struct ebt_mac_wormhash_tuple pool[];};
struct ipmi_req_settime {struct ipmi_req req;int retries;unsigned int retry_time_ms;};
struct phone_capability {char desc[80];phone_cap captype;int cap;int handle;};
struct phone_codec_data {phone_codec type;unsigned __int16 buf_min;unsigned __int16 buf_opt;unsigned __int16 buf_max;};
struct snd_timer_status {struct timespec tstamp;unsigned int resolution;unsigned int lost;unsigned int overrun;unsigned int queue;unsigned __int8 reserved[64];};
typedef XcmsConversionProc *XcmsFuncListPtr;
struct fat_boot_fsinfo {__le32 signature1;__le32 reserved1[120];__le32 signature2;__le32 free_clusters;__le32 next_cluster;__le32 reserved2[4];};
struct fc_els_rnid_cid {__be64 rnid_wwpn;__be64 rnid_wwnn;};
struct fuse_statfs_out {struct fuse_kstatfs st;};
struct gfs2_inum_range {__be64 ir_start;__be64 ir_length;};
struct ptp_extts_event {struct ptp_clock_time t;unsigned int index;unsigned int flags;unsigned int rsv[2];};
struct short_hand_verf {struct opaque_auth new_cred;};
struct snd_timer_tread {int event;struct timespec tstamp;unsigned int val;};
struct __attribute__((packed)) usb_port_status {__le16 wPortStatus;__le16 wPortChange;};
struct xt_entry_target {union xt_entry_target___47536B2923186FE397875189D0BFAE98 u;unsigned __int8 data[];};
struct xt_error_target {struct xt_entry_target target;char errorname[30];};
typedef Elf32_Addr Elf32_Conflict;
struct ip_mreq_source {struct in_addr imr_multiaddr;struct in_addr imr_interface;struct in_addr imr_sourceaddr;};
struct ppp_comp_stats {struct compstat c;struct compstat d;};
struct ptp_sys_offset {unsigned int n_samples;unsigned int rsv[3];struct ptp_clock_time ts[51];};
struct tipc_link_info {__be32 dest;__be32 up;char str[60];};
struct tipc_node_info {__be32 addr;__be32 up;};
struct __attribute__((packed)) usb_hub_status {__le16 wHubStatus;__le16 wHubChange;};
struct xt_entry_match {union xt_entry_match___8E55A9EB6D888BA8224CC5A309ED6718 u;unsigned __int8 data[];};
typedef XrmHashTable XrmSearchList[];
typedef void (*__action_fn_t)(const void *nodep, VISIT value, int level);
struct bp_whoami_arg {bp_address client_address;};
struct hdlcdrv_ioctl {int cmd;union hdlcdrv_ioctl___3EABF1CC9C5D017A39C9F4CBC11E5536 data;};
struct kvm_pit_state {struct kvm_pit_channel_state channels[3];};
struct rstat_timeval {u_int tv_sec;u_int tv_usec;};
struct snd_ctl_event {int type;union snd_ctl_event___B1C3D1BE79EA6FA03579F1A08F6F0A3D data;};
struct sockaddr_tipc {unsigned __int16 family;unsigned __int8 addrtype;signed __int8 scope;union sockaddr_tipc___E58F941474A2167ADFB4DB3CD3C86AFF addr;};
typedef int td_key_iter_f(thread_key_t, void (*)(void *), void *);
typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;
struct dccp_hdr_ext {__be32 dccph_seq_low;};
struct fc_ns_gid_pn {__be64 fn_wwpn;};
struct __attribute__((packed)) hippi_fp_hdr {__be32 fixed;__be32 d2_size;};
typedef __le16 qnx4_nlink_t;
typedef __le16 qnx4_nxtnt_t;
struct spraytimeval {u_int sec;u_int usec;};
struct tcf_meta_hdr {struct tcf_meta_val left;struct tcf_meta_val right;};
struct fc_els_lesb {__be32 lesb_link_fail;__be32 lesb_sync_loss;__be32 lesb_sig_loss;__be32 lesb_prim_err;__be32 lesb_inv_word;__be32 lesb_inv_crc;};
struct fuse_lk_out {struct fuse_file_lock lk;};
struct nis_taglist {struct nis_taglist___D5235F6F3B62BCE7910AF756FE53E6D0 tags;};
struct ovs_key_tcp {__be16 tcp_src;__be16 tcp_dst;};
struct ovs_key_udp {__be16 udp_src;__be16 udp_dst;};
struct pps_kparams {int api_version;int mode;struct pps_ktime assert_off_tu;struct pps_ktime clear_off_tu;};
typedef __le16 qnx4_mgid_t;
typedef __le16 qnx4_mode_t;
typedef __le16 qnx4_muid_t;
struct rusers_utmp {char *ut_user;char *ut_line;char *ut_host;int ut_type;int ut_time;u_int ut_idle;};
struct sioc_sg_req {struct in_addr src;struct in_addr grp;unsigned __int64 pktcnt;unsigned __int64 bytecnt;unsigned __int64 wrong_if;};
struct xdr_discrim {int value;xdrproc_t proc;};
struct zatm_t_hist {struct timeval real;struct timeval expected;};
struct argp_child {const struct argp *argp;int flags;const char *header;int group;};
struct arpreq_old {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;struct sockaddr arp_netmask;};
struct atmmpc_ioc {int dev_num;__be32 ipaddr;int type;};
struct can_filter {canid_t can_id;canid_t can_mask;};
struct cback_data {struct cback_data___8577E6F7A3DA394015609B473F63AD7B entries;};
union cdrom_addr {struct cdrom_msf0 msf;int lba;};
struct __attribute__((packed)) i2400m_pld {__le32 val;};
struct in_pktinfo {int ipi_ifindex;struct in_addr ipi_spec_dst;struct in_addr ipi_addr;};
struct itimerspec {struct timespec it_interval;struct timespec it_value;};
struct ntptimeval {struct timeval time;__int64 maxerror;__int64 esterror;__int64 tai;__int64 __unused1;__int64 __unused2;__int64 __unused3;__int64 __unused4;};
struct pppoe_addr {sid_t sid;unsigned __int8 remote[6];char dev[16];};
typedef __le32 qnx4_off_t;
struct tc_u32_key {__be32 mask;__be32 val;int off;int offmask;};
struct _xkbEvent {union _xkbEvent___1A318C185F777B9ECB86573CC964DEF2 u;};
struct entry_obj {char *en_type;struct entry_obj___9954B692FACAC347CBA764979909DFF4 en_cols;};
struct fc_ns_fts {__be32 ff_type_map[8];};
struct gfs2_inum {__be64 no_formal_ino;__be64 no_addr;};
struct itimerval {struct timeval it_interval;struct timeval it_value;};
struct nbd_reply {__be32 magic;__be32 error;char handle[8];};
struct __attribute__((packed)) pppoe_tag {__be16 tag_type;__be16 tag_len;char tag_data[];};
struct v4l2_clip {struct v4l2_rect c;struct v4l2_clip *next;};
struct fc_ns_ff {__be32 fd_feat[32];};
struct in6_addr {union in6_addr___B80A5568EDCB3DEA112C17957211D170 __in6_u;};
struct ip_mreqn {struct in_addr imr_multiaddr;struct in_addr imr_address;int imr_ifindex;};
struct knfsd_fh {unsigned int fh_size;union knfsd_fh___925CA116668CC790A9CAB8C177903946 fh_base;};
struct nis_attr {char *zattr_ndx;struct nis_attr___F2081D9F3F0358B3A954C101A2B200CE zattr_val;};
struct nlmsgerr {int error;struct nlmsghdr msg;};
struct tlv_desc {__be16 tlv_len;__be16 tlv_type;};
struct tostruct {u_long selfpc;__int64 count;u_long link;};
struct ltchars {u_int six;char chars[6];u_int mode;};
struct mmsghdr {struct msghdr msg_hdr;unsigned int msg_len;};
struct netobj {u_int n_len;char *n_bytes;};
struct rawarc {u_long raw_frompc;u_long raw_selfpc;__int64 raw_count;};
struct sgttyb {u_int four;char chars[4];u_int flags;};
struct tchars {u_int six;char chars[6];};
struct stats {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;int if_opackets;};
union br_mdb_entry___3B884394841494F5C5BD79CCBB95D21B___A23C08DB19462DC1007FAED6DA7C98CC {__be32 ip4;struct in6_addr ip6;};
struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F60DFC41729ECCA7C121C44CBFE60E95 {CARD32 pad00;CARD32 window;union _xEvent______F60DFC41729ECCA7C121C44CBFE60E95___82F47A5C57D4899F304609D6061CA549 u;};
union _6954A090FF674864C2EF0B367DFBE910___4C8070B9675DF490D49D1F7749E052FB {struct ____4C8070B9675DF490D49D1F7749E052FB___CB6A6FBD4AABDC204CA09785462A5EAC u;struct ____4C8070B9675DF490D49D1F7749E052FB___554023DFD94A0D1F1DC623A35C397FCE event;};
union btrfs_ioctl_dev_replace_args___8CED39FF33B2CC36321DD496F5286BEA {struct btrfs_ioctl_dev_replace_start_params start;struct btrfs_ioctl_dev_replace_status_params status;};
union snd_seq_ev_queue_control___BD7710A1463C8082981532940790AA20 {signed int value;union snd_seq_timestamp time;unsigned int position;struct snd_seq_queue_skew skew;unsigned int d32[2];unsigned __int8 d8[8];};
union mei_connect_client_data___A40A474C8C4A815854F508746723EC79 {uuid_le in_client_uuid;struct mei_client out_client_properties;};
union v4l2_mpeg_vbi_fmt_ivtv___EF14CA7044B5CADA38B858153B761553 {struct v4l2_mpeg_vbi_itv0 itv0;struct v4l2_mpeg_vbi_ITV0 ITV0;};
union v4l2_dv_timings_cap___BBA7AD257D986D794DDFA325331581FD {struct v4l2_bt_timings_cap bt;__u32 raw_data[32];};
union tc_fq_codel_xstats___63E5352AB2938D62EC3B11B547C81E55 {struct tc_fq_codel_qd_stats qdisc_stats;struct tc_fq_codel_cl_stats class_stats;};
union usb_gadgetfs_event___5A876FC4CBDC178B2CD4FCE0CED7F161 {enum usb_device_speed speed;struct usb_ctrlrequest setup;};
union v4l2_frmivalenum___93B3680D9D1B117CA0A49F04AB26F1D3 {struct v4l2_fract discrete;struct v4l2_frmival_stepwise stepwise;};
union fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4 {struct fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4___9AE2B409811208BBEC845B39EFD02679 fat16;struct fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4___719E9A969D439A9871DE8EAA9BE35CAF fat32;};
union net_dm_user_msg___15ACACB6C2BBBF436ECFD1AF3E0A1DF0 {struct net_dm_config_msg user;struct net_dm_alert_msg alert;};
union v4l2_dv_timings___96E49C2E99AC3243D1D72E7D0CCE1702 {struct v4l2_bt_timings bt;__u32 reserved[32];};
union accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023 {struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___C081DE2363A7D6E022ACDA68492DBB3F AR_versions;struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___BFD7413E14FC21CAB05150D69A0647C0 AR_results;};
union rejected_reply___D36433C375B856769A86CDA2CFADE497 {struct rejected_reply___D36433C375B856769A86CDA2CFADE497___C081DE2363A7D6E022ACDA68492DBB3F RJ_versions;enum auth_stat RJ_why;};
union sockaddr_pppox___E63C2AB07B6ED8C642925DD42DC4C468 {struct pppoe_addr pppoe;struct pptp_addr pptp;};
union ebt_802_3_hdr___5C10EBC4813C05B19E3AE7B3F350E3AD {struct hdr_ui ui;struct hdr_ni ni;};
struct br_mdb_entry___3B884394841494F5C5BD79CCBB95D21B {union br_mdb_entry___3B884394841494F5C5BD79CCBB95D21B___A23C08DB19462DC1007FAED6DA7C98CC u;__be16 proto;};
union fc_bsg_reply___DCDC26EFCFC60F96113FB0BD491A52D4 {struct fc_bsg_host_vendor_reply vendor_reply;struct fc_bsg_ctels_reply ctels_reply;};
union kvm_irqchip___0F8588548802CF435BA0DA1F00B7AD77 {char dummy[512];struct kvm_pic_state pic;struct kvm_ioapic_state ioapic;};
union fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F {struct fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F___E76D94573918C22570AE3AA9276993EE sp_plogi;struct fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F___C39E03481AFE0E573C312A59C4C671D6 sp_flogi_acc;};
union ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314 {struct ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314__ip6_hdrctl ip6_un1;uint8_t ip6_un2_vfc;};
union _6DF3DE276417BF858702C9AB9AD460CB {struct _6DF3DE276417BF858702C9AB9AD460CB___C80D1A5D569DC2D014AF103056E679B8 gt_header;struct _6DF3DE276417BF858702C9AB9AD460CB___471377A4EE616195936A53166C2E8985 gt_entry;};
struct _8FAAC4C6A9B09454B312C1AFE3312BB1 {XPointer client_data;XICProc callback;};
struct _CC029EE2801424412B933EF9795F5046 {union _CC029EE2801424412B933EF9795F5046___199E9548C3C848AC2EFDDFCE03257421 spec;unsigned __int64 pixel;XcmsColorFormat format;};
struct _E1655291D14CE59495117F42FECB583D {XPointer client_data;XIMProc callback;};
struct __attribute__((packed)) i2400m_tlv_config_d2h_data_format {struct i2400m_tlv_hdr hdr;__u8 format;__u8 reserved[3];};
struct __attribute__((packed)) i2400m_tlv_config_dl_host_reorder {struct i2400m_tlv_hdr hdr;__u8 reorder;__u8 reserved[3];};
struct __attribute__((packed)) i2400m_tlv_config_idle_parameters {struct i2400m_tlv_hdr hdr;__le32 idle_timeout;__le32 idle_paging_interval;};
struct btrfs_ioctl_received_subvol_args {char uuid[16];__u64 stransid;__u64 rtransid;struct btrfs_ioctl_timespec stime;struct btrfs_ioctl_timespec rtime;__u64 flags;__u64 reserved[16];};
struct __attribute__((packed)) i2400m_tlv_detailed_device_info {struct i2400m_tlv_hdr hdr;__u8 reserved1[400];__u8 mac_address[6];__u8 reserved2[2];};
struct __attribute__((packed)) i2400m_tlv_config_idle_timeout {struct i2400m_tlv_hdr hdr;__le32 timeout;};
struct __attribute__((packed)) i2400m_tlv_l4_message_versions {struct i2400m_tlv_hdr hdr;__le16 major;__le16 minor;__le16 branch;__le16 reserved;};
struct __attribute__((packed)) i2400m_tlv_rf_switches_status {struct i2400m_tlv_hdr hdr;__u8 sw_rf_switch;__u8 hw_rf_switch;__u8 reserved[2];};
struct btrfs_ioctl_dev_replace_args {__u64 cmd;__u64 result;btrfs_ioctl_dev_replace_args___8CED39FF33B2CC36321DD496F5286BEA __anonymous0;__u64 spare[64];};
struct __attribute__((packed)) i2400m_tlv_device_reset_type {struct i2400m_tlv_hdr hdr;__le32 reset_type;};
struct virtio_net_hdr_mrg_rxbuf {struct virtio_net_hdr hdr;__u16 num_buffers;};
struct xcb_sync_waitcondition_t {xcb_sync_trigger_t trigger;xcb_sync_int64_t event_threshold;};
struct __attribute__((packed)) i2400m_tlv_media_status {struct i2400m_tlv_hdr hdr;__le32 media_status;};
struct __attribute__((packed)) i2400m_tlv_rf_operation {struct i2400m_tlv_hdr hdr;__le32 status;};
struct __attribute__((packed)) i2400m_tlv_system_state {struct i2400m_tlv_hdr hdr;__le32 state;};
struct kvm_coalesced_mmio_ring {__u32 first;__u32 last;struct kvm_coalesced_mmio coalesced_mmio[];};
struct ib_uverbs_poll_cq_resp {__u32 count;__u32 reserved;struct ib_uverbs_wc wc[];};
struct __attribute__((packed)) v4l2_mpeg_vbi_fmt_ivtv {__u8 magic[4];v4l2_mpeg_vbi_fmt_ivtv___EF14CA7044B5CADA38B858153B761553 __anonymous0;};
struct xcb_render_trapezoid_t {xcb_render_fixed_t top;xcb_render_fixed_t bottom;xcb_render_linefix_t left;xcb_render_linefix_t right;};
struct kvm_irq_routing_entry {__u32 gsi;__u32 type;__u32 flags;__u32 pad;union kvm_irq_routing_entry___D9076952D2DFC423F3B6B09BF4822D49 u;};
struct snd_seq_remove_events {unsigned int remove_mode;union snd_seq_timestamp time;unsigned __int8 queue;struct snd_seq_addr dest;unsigned __int8 channel;int type;char tag;int reserved[10];};
struct xt_set_info_target_v2 {struct xt_set_info add_set;struct xt_set_info del_set;__u32 flags;__u32 timeout;};
struct __attribute__((packed)) usb_functionfs_event {__attribute__((packed)) union usb_functionfs_event___2FE4DF590A0960BC953C17B3843D0178 u;__u8 type;__u8 _pad[3];};
struct xt_hashlimit_mtinfo1 {char name[16];struct hashlimit_cfg1 cfg;struct xt_hashlimit_htable *hinfo;};
struct elf32_fdpic_loadmap {Elf32_Half version;Elf32_Half nsegs;struct elf32_fdpic_loadseg segs[];};
struct nd_neighbor_solicit {struct icmp6_hdr nd_ns_hdr;struct in6_addr nd_ns_target;};
struct v4l2_dv_timings_cap {__u32 type;__u32 reserved[3];v4l2_dv_timings_cap___BBA7AD257D986D794DDFA325331581FD __anonymous0;};
struct cdrom_multisession {union cdrom_addr addr;__u8 xa_flag;__u8 addr_format;};
struct full_sockaddr_ax25 {struct sockaddr_ax25 fsa_ax25;ax25_address fsa_digipeater[8];};
struct nd_neighbor_advert {struct icmp6_hdr nd_na_hdr;struct in6_addr nd_na_target;};
struct snd_rawmidi_status {int stream;struct timespec tstamp;size_t avail;size_t xruns;unsigned __int8 reserved[16];};
struct tc_fq_codel_xstats {__u32 type;tc_fq_codel_xstats___63E5352AB2938D62EC3B11B547C81E55 __anonymous0;};
struct usb_gadgetfs_event {union usb_gadgetfs_event___5A876FC4CBDC178B2CD4FCE0CED7F161 u;enum usb_gadgetfs_event_type type;};
struct Dwarf_Regtable3_s {struct Dwarf_Regtable_Entry3_s rt3_cfa_rule;Dwarf_Half rt3_reg_table_size;struct Dwarf_Regtable_Entry3_s *rt3_rules;};
struct ethtool_rx_ntuple {__u32 cmd;struct ethtool_rx_ntuple_flow_spec fs;};
struct xfrm_userspi_info {struct xfrm_usersa_info info;__u32 min;__u32 max;};
struct cdrom_read_audio {union cdrom_addr addr;__u8 addr_format;int nframes;__u8 *buf;};
struct nd_router_advert {struct icmp6_hdr nd_ra_hdr;uint32_t nd_ra_reachable;uint32_t nd_ra_retransmit;};
struct snd_pcm_sync_ptr {unsigned int flags;union snd_pcm_sync_ptr___B547EC122A9F3EBA28D1B9F9B8E2C390 s;union snd_pcm_sync_ptr___6C91CFB586BA7C43700D4DD67E507598 c;};
struct v4l2_decoder_cmd {__u32 cmd;__u32 flags;v4l2_decoder_cmd___47AB84F5DEDCCEE308915E970C3AE9BB __anonymous0;};
struct v4l2_frmivalenum {__u32 index;__u32 pixel_format;__u32 width;__u32 height;__u32 type;v4l2_frmivalenum___93B3680D9D1B117CA0A49F04AB26F1D3 __anonymous0;__u32 reserved[2];};
struct xfrm_user_expire {struct xfrm_usersa_info state;__u8 hard;};
struct xfrm_user_report {__u8 proto;struct xfrm_selector sel;};
struct fc_els_rls_resp {__u8 rls_cmd;__u8 rls_resv[3];struct fc_els_lesb rls_lesb;};
struct fuse_direntplus {struct fuse_entry_out entry_out;struct fuse_dirent dirent;};
struct __attribute__((packed)) i2400m_l3l4_hdr {__le16 type;__le16 length;__le16 version;__le16 resv1;__le16 status;__le16 resv2;struct i2400m_tlv_hdr pl[];};
struct kvm_debug_guest {__u32 enabled;__u32 pad;struct kvm_breakpoint breakpoints[4];__u32 singlestep;};
struct kvm_irq_routing {__u32 nr;__u32 flags;struct kvm_irq_routing_entry entries[];};
struct media_link_desc {struct media_pad_desc source;struct media_pad_desc sink;__u32 flags;__u32 reserved[2];};
struct __attribute__((packed)) v4l2_dv_timings {__u32 type;v4l2_dv_timings___96E49C2E99AC3243D1D72E7D0CCE1702 __anonymous0;};
struct v4l2_streamparm {__u32 type;union v4l2_streamparm___27A26CB990F090CF49B51711EB49A596 parm;};
struct _i2o_hrt_entry {__u32 adapter_id;unsigned __int32 parent_tid : 12;unsigned __int32 state : 4;unsigned __int32 bus_num : 8;unsigned __int32 bus_type : 8;union _i2o_hrt_entry___D55E159E5D75E3EA17BD777F24FDBACF bus;};
struct cdrom_tocentry {__u8 cdte_track;unsigned __int8 cdte_adr : 4;unsigned __int8 cdte_ctrl : 4;__u8 cdte_format;union cdrom_addr cdte_addr;__u8 cdte_datamode;};
struct __attribute__((packed)) fc_bsg_request {uint32_t msgcode;union fc_bsg_request___6D97E0FCCC65F66D321CF0BDF9DCBB2C rqst_data;};
struct kvm_pit_state2 {struct kvm_pit_channel_state channels[3];__u32 flags;__u32 reserved[9];};
struct rejected_reply {enum reject_stat rj_stat;union rejected_reply___D36433C375B856769A86CDA2CFADE497 ru;};
struct __attribute__((packed)) sockaddr_pppox {__kernel_sa_family_t sa_family;unsigned int sa_protocol;union sockaddr_pppox___E63C2AB07B6ED8C642925DD42DC4C468 sa_addr;};
struct __attribute__((packed)) v4l2_querymenu {__u32 id;__u32 index;v4l2_querymenu___F0EB35073D18D1D762C948D5819F4E2D __anonymous0;__u32 reserved;};
union xt_policy_addr {struct in_addr a4;struct in6_addr a6;};
struct cdrom_subchnl {__u8 cdsc_format;__u8 cdsc_audiostatus;unsigned __int8 cdsc_adr : 4;unsigned __int8 cdsc_ctrl : 4;__u8 cdsc_trk;__u8 cdsc_ind;union cdrom_addr cdsc_absaddr;union cdrom_addr cdsc_reladdr;};
struct __attribute__((packed)) cgw_frame_mod {struct can_frame cf;__u8 modtype;};
struct sockaddr_caif {__kernel_sa_family_t family;union sockaddr_caif___E4C4F9461816B6635631D5FC2034AC6C u;};
struct video_command {__u32 cmd;__u32 flags;video_command___33EDB0D7B1B9386905594C9DF664C3AC __anonymous0;};
struct fc_bsg_reply {uint32_t result;uint32_t reply_payload_rcv_len;union fc_bsg_reply___DCDC26EFCFC60F96113FB0BD491A52D4 reply_data;};
struct fc_ns_rft_id {struct fc_ns_fid fr_fid;struct fc_ns_fts fr_fts;};
struct key_netstres {keystatus status;union key_netstres___2176196DCBB8522A9A1E300DB0535BE5 key_netstres_u;};
struct klm_testrply {klm_stats stat;union klm_testrply___40F9D261D31BF2147C1606393BAB8476 klm_testrply_u;};
struct nlm_shareres {netobj cookie;nlm_stats stat;int sequence;};
struct sockaddr_can {__kernel_sa_family_t can_family;int can_ifindex;union sockaddr_can___F47FAF2DB8D039FA9C579D1D02AFD16F can_addr;};
struct uvesafb_task {__u8 flags;int buf_len;struct v86_regs regs;};
struct vfs_cap_data {__le32 magic_etc;struct vfs_cap_data___1A090B8EA054F4F02D05FCE87D20A421 data[2];};
struct cryptkeyres {keystatus status;union cryptkeyres___EF36972044157FC290EE2FE4EF835697 cryptkeyres_u;};
struct ib_user_mad {struct ib_user_mad_hdr hdr;__u64 data[];};
struct kvm_irqchip {__u32 chip_id;__u32 pad;union kvm_irqchip___0F8588548802CF435BA0DA1F00B7AD77 chip;};
struct nd_redirect {struct icmp6_hdr nd_rd_hdr;struct in6_addr nd_rd_target;struct in6_addr nd_rd_dst;};
struct v4l2_format {__u32 type;union v4l2_format___11C340EB5DA759242BAA851A9D990106 fmt;};
struct xt_bpf_info {__u16 bpf_program_num_elem;struct sock_filter bpf_program[64];struct sk_filter *filter;};
struct atmlec_msg {atmlec_msg_type type;int sizeoftlvs;union atmlec_msg___A8D3B8DB3B0F5DBF98AB914765B782E4 content;};
struct ip6_rthdr0 {uint8_t ip6r0_nxt;uint8_t ip6r0_len;uint8_t ip6r0_type;uint8_t ip6r0_segleft;uint8_t ip6r0_reserved;uint8_t ip6r0_slmap[3];struct in6_addr ip6r0_addr[];};
struct ns_request {nis_name ns_name;struct ns_request___C16B7AFEC0429C3BD747A37F4D827FFD ns_object;};
struct semid64_ds {struct ipc64_perm sem_perm;__kernel_time_t sem_otime;__kernel_time_t sem_ctime;unsigned __int64 sem_nsems;unsigned __int64 __unused3;unsigned __int64 __unused4;};
struct spraycumul {u_int counter;spraytimeval clock;};
struct statsswtch {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;u_int avenrun[3];rstat_timeval boottime;int if_opackets;};
struct ypresp_all {bool_t more;union ypresp_all___438EB5C0F713AEE99C9EADC1C626DC0A ypresp_all_u;};
struct call_body {u_long cb_rpcvers;u_long cb_prog;u_long cb_vers;u_long cb_proc;struct opaque_auth cb_cred;struct opaque_auth cb_verf;};
struct entry_col {uint32_t ec_flags;struct entry_col___E942B815045DEE9FABC14DA0AE6314FC ec_value;};
struct inftl_oob {struct inftl_bci b;union inftl_uci u;};
struct pps_kinfo {__u32 assert_sequence;__u32 clear_sequence;struct pps_ktime assert_tu;struct pps_ktime clear_tu;int current_mode;};
struct snd_codec {__u32 id;__u32 ch_in;__u32 ch_out;__u32 sample_rate;__u32 bit_rate;__u32 rate_control;__u32 profile;__u32 level;__u32 ch_mode;__u32 format;__u32 align;union snd_codec_options options;__u32 reserved[3];};
struct statstime {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;int avenrun[3];rstat_timeval boottime;rstat_timeval curtime;int if_opackets;};
struct table_obj {char *ta_type;int ta_maxcol;u_char ta_sep;struct table_obj___37F826B7C2AFF7B3E483E0E1EE89ED51 ta_cols;char *ta_path;};
struct ypreq_xfr {ypmap_parms map_parms;u_int transid;u_int prog;u_int port;};
struct atm_blli {unsigned __int8 l2_proto;union atm_blli___0572EE5627218739C843F51EF75EFA8A l2;unsigned __int8 l3_proto;union atm_blli___F33FFBC35AC6DBBD1109622F8FE46785 l3;};
struct klm_lock {char *server_name;netobj fh;int pid;u_int l_offset;u_int l_len;};
struct nftl_oob {struct nftl_bci b;union nftl_uci u;};
struct nlm_lock {char *caller_name;netobj fh;netobj oh;int svid;u_int l_offset;u_int l_len;};
struct unixcred {u_int uid;u_int gid;struct unixcred___B86B6406BF4F2F34B5DC36D552B35DA0 gids;};
struct atm_sap {struct atm_bhli bhli;struct atm_blli blli[3];};
struct __attribute__((packed)) fddihdr {__u8 fc;__u8 daddr[6];__u8 saddr[6];union fddihdr___938C6FB260523AB5682B137AC0052733 hdr;};
struct ip6_hdr {union ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314 ip6_ctlun;struct in6_addr ip6_src;struct in6_addr ip6_dst;};
struct mld_hdr {struct icmp6_hdr mld_icmp6_hdr;struct in6_addr mld_addr;};
struct nlm_res {netobj cookie;nlm_stat stat;};
struct archdr {struct arc_hardware hard;union archdr___4ABDB8A35AA038764FD59B8E94C5785D soft;};
struct ifaddr {struct sockaddr ifa_addr;union ifaddr___0DF00F875CAF96EB397809642F17405E ifa_ifu;struct iface *ifa_ifp;struct ifaddr *ifa_next;};
struct xt_u32 {struct xt_u32_test tests[11];__u8 ntests;__u8 invert;};
struct ifreq {union ifreq___4AF2B49FDDB54BAFABDFAE063E6E4A98 ifr_ifrn;union ifreq___75060FE57352FD064152EAF8FAEB1426 ifr_ifru;};
struct term {TERMTYPE type;__int16 Filedes;struct termios Ottyb;struct termios Nttyb;int _baudrate;char *_termname;};
struct rip {u_char rip_cmd;u_char rip_vers;u_char rip_res1[2];union rip___AFFF135AAACB9FA320A59FAF8451ECA8 ripun;};
union _9E6A7A2F5B8444BF3F540E884EB664C9___1C1E9EA25555F3A04518B10EE9DF4602 {struct ____1C1E9EA25555F3A04518B10EE9DF4602___CB6A6FBD4AABDC204CA09785462A5EAC u;struct ____1C1E9EA25555F3A04518B10EE9DF4602___5BEEE552B0DC6B217341171DE42CA55F videoNotify;struct ____1C1E9EA25555F3A04518B10EE9DF4602___FA18AEC49CDA3F922B926DB83731E944 portNotify;};
union dlm_write_request___9167CBF46B13F18B48FAFD6E250329B3 {struct dlm_lock_params lock;struct dlm_lspace_params lspace;struct dlm_purge_params purge;};
union k_message___206C2CB577A0C945CCF3D164C4BDBFF4 {in_ctrl_info in_info;eg_ctrl_info eg_info;struct mpc_parameters params;};
union rpc_err___055F5448726BC1208A44545720AB7286 {int RE_errno;enum auth_stat RE_why;struct rpc_err___055F5448726BC1208A44545720AB7286___C081DE2363A7D6E022ACDA68492DBB3F RE_vers;struct rpc_err___055F5448726BC1208A44545720AB7286___B2A2E5E144C6CE84264379628A685064 RE_lb;};
union _CFB4FEE1CB4302FAF2C3A1BC0E8F3BDD {__u8 raw;struct sctp_initmsg init;struct sctp_sndrcvinfo sndrcv;};
union xcb_randr_notify_data_t {xcb_randr_crtc_change_t cc;xcb_randr_output_change_t oc;xcb_randr_output_property_t op;};
struct xcb_xkb_set_behavior_t {xcb_keycode_t keycode;xcb_xkb_behavior_t behavior;uint8_t pad0;};
struct ib_uverbs_create_ah {__u64 response;__u64 user_handle;__u32 pd_handle;__u32 reserved;struct ib_uverbs_ah_attr attr;};
struct ib_uverbs_post_send {__u64 response;__u32 qp_handle;__u32 wr_count;__u32 sge_count;__u32 wqe_size;struct ib_uverbs_send_wr send_wr[];};
struct nd_opt_prefix_info {uint8_t nd_opt_pi_type;uint8_t nd_opt_pi_len;uint8_t nd_opt_pi_prefix_len;uint8_t nd_opt_pi_flags_reserved;uint32_t nd_opt_pi_valid_time;uint32_t nd_opt_pi_preferred_time;uint32_t nd_opt_pi_reserved2;struct in6_addr nd_opt_pi_prefix;};
struct snd_ctl_elem_value {struct snd_ctl_elem_id id;unsigned __int32 indirect : 1;union snd_ctl_elem_value___577985C162E51FD3A2B7EC3E2CD9E351 value;struct timespec tstamp;unsigned __int8 reserved[112];};
struct xfrm_userpolicy_id {struct xfrm_selector sel;__u32 index;__u8 dir;};
struct __attribute__((aligned(16))) _Unwind_Exception {_Unwind_Exception_Class exception_class;_Unwind_Exception_Cleanup_Fn exception_cleanup;_Unwind_Word private_1;_Unwind_Word private_2;};
struct dlm_write_request {__u32 version[3];__u8 cmd;__u8 is64bit;__u8 unused[2];union dlm_write_request___9167CBF46B13F18B48FAFD6E250329B3 i;};
struct __attribute__((packed)) usb_cdc_ncm_ndp16 {__le32 dwSignature;__le16 wLength;__le16 wNextNdpIndex;struct usb_cdc_ncm_dpe16 dpe16[];};
struct __attribute__((packed)) usb_cdc_ncm_ndp32 {__le32 dwSignature;__le16 wLength;__le16 wReserved6;__le32 dwNextNdpIndex;__le32 dwReserved12;struct usb_cdc_ncm_dpe32 dpe32[];};
struct gfs2_meta_header {__be32 mh_magic;__be32 mh_type;__be64 __pad0;__be32 mh_format;gfs2_meta_header___36B1B7A4DC3E2283F03CC74A1F220CF9 __anonymous0;};
struct inet_diag_req_v2 {__u8 sdiag_family;__u8 sdiag_protocol;__u8 idiag_ext;__u8 pad;__u32 idiag_states;struct inet_diag_sockid id;};
struct snd_compr_params {struct snd_compressed_buffer buffer;struct snd_codec codec;__u8 no_wake_mode;};
struct _XcmsColorSpace {const char *prefix;XcmsColorFormat id;XcmsParseStringProc parseString;XcmsFuncListPtr to_CIEXYZ;XcmsFuncListPtr from_CIEXYZ;int inverse_flag;};
struct fc_els_rpl_resp {__u8 rpl_cmd;__u8 rpl_resv1;__be16 rpl_plen;__u8 rpl_resv2;__u8 rpl_llen[3];__u8 rpl_resv3;__u8 rpl_index[3];struct fc_els_pnb rpl_pnb[1];};
struct fc_els_rps_resp {__u8 rps_cmd;__u8 rps_resv[2];__u8 rps_flag;__u8 rps_resv2[2];__be16 rps_status;struct fc_els_lesb rps_lesb;};
struct gfs2_log_header {struct gfs2_meta_header lh_header;__be64 lh_sequence;__be32 lh_flags;__be32 lh_tail;__be32 lh_blkno;__be32 lh_hash;};
struct pppol2tpv3_addr {__kernel_pid_t pid;int fd;struct sockaddr_in addr;__u32 s_tunnel;__u32 s_session;__u32 d_tunnel;__u32 d_session;};
struct rds_atomic_args {rds_rdma_cookie_t cookie;uint64_t local_addr;uint64_t remote_addr;rds_atomic_args___F92BFCF0AE7692DF19980549DF229223 __anonymous0;uint64_t flags;uint64_t user_token;};
struct accepted_reply {struct opaque_auth ar_verf;enum accept_stat ar_stat;union accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023 ru;};
struct xfrm_aevent_id {struct xfrm_usersa_id sa_id;xfrm_address_t saddr;__u32 flags;__u32 reqid;};
struct ebt_802_3_hdr {__u8 daddr[6];__u8 saddr[6];__be16 len;union ebt_802_3_hdr___5C10EBC4813C05B19E3AE7B3F350E3AD llc;};
struct igmpv3_report {__u8 type;__u8 resv1;__be16 csum;__be16 resv2;__be16 ngrec;struct igmpv3_grec grec[];};
struct pppol2tp_addr {__kernel_pid_t pid;int fd;struct sockaddr_in addr;__u16 s_tunnel;__u16 s_session;__u16 d_tunnel;__u16 d_session;};
struct __attribute__((packed)) ubi_rnvol_req {__s32 count;__s8 padding1[12];struct ubi_rnvol_req___F09893DCAECAFD0B6ABDD7E485962E11 ents[32];};
struct br_mdb_entry {__u32 ifindex;__u8 state;struct br_mdb_entry___3B884394841494F5C5BD79CCBB95D21B addr;};
struct cryptkeyarg2 {netnamestr remotename;netobj remotekey;des_block deskey;};
struct __attribute__((packed)) dtv_fe_stats {__u8 len;struct dtv_stats stat[4];};
struct nlm_cancargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm_lock alock;};
struct nlm_lockargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm_lock alock;bool_t reclaim;int state;};
struct nlm_testargs {netobj cookie;bool_t exclusive;struct nlm_lock alock;};
struct rr_pco_match {uint8_t rpm_code;uint8_t rpm_len;uint8_t rpm_ordinal;uint8_t rpm_matchlen;uint8_t rpm_minlen;uint8_t rpm_maxlen;uint16_t rpm_reserved;struct in6_addr rpm_prefix;};
struct xt_osf_nlmsg {struct xt_osf_user_finger f;struct iphdr ip;struct tcphdr tcp;};
struct arpt_mangle {char src_devaddr[16];char tgt_devaddr[16];union arpt_mangle___F65E77752E3CFFFEA995A77A594CEF9A u_s;union arpt_mangle___966621F5207D1D909BB79365A6E3D80A u_t;u_int8_t flags;int target;};
struct arpt_entry {struct arpt_arp arp;__u16 target_offset;__u16 next_offset;unsigned int comefrom;struct xt_counters counters;unsigned __int8 elems[];};
struct log_result {nis_error lr_status;netobj lr_cookie;struct log_result___946B3E427CBAEF2C8E64E80E43621ACD lr_entries;};
struct msqid64_ds {struct ipc64_perm msg_perm;__kernel_time_t msg_stime;__kernel_time_t msg_rtime;__kernel_time_t msg_ctime;unsigned __int64 __msg_cbytes;unsigned __int64 msg_qnum;unsigned __int64 msg_qbytes;__kernel_pid_t msg_lspid;__kernel_pid_t msg_lrpid;unsigned __int64 __unused4;unsigned __int64 __unused5;};
struct nlm_holder {bool_t exclusive;int svid;netobj oh;u_int l_offset;u_int l_len;};
struct rr_pco_use {uint8_t rpu_uselen;uint8_t rpu_keeplen;uint8_t rpu_ramask;uint8_t rpu_raflags;uint32_t rpu_vltime;uint32_t rpu_pltime;uint32_t rpu_flags;struct in6_addr rpu_prefix;};
struct v4l2_event {__u32 type;union v4l2_event___8B28A54845FF2EA0761A5ED508965B6E u;__u32 pending;__u32 sequence;struct timespec timestamp;__u32 id;__u32 reserved[8];};
struct dump_args {nis_name da_dir;uint32_t da_time;struct dump_args___00C533AE8545A66FA38641508A3DC473 da_cbhost;};
struct fb_cursor {__u16 set;__u16 enable;__u16 rop;const char *mask;struct fbcurpos hot;struct fb_image image;};
struct __attribute__((packed)) hippi_hdr {struct hippi_fp_hdr fp;struct hippi_le_hdr le;struct hippi_snap_hdr snap;};
struct in6_rtmsg {struct in6_addr rtmsg_dst;struct in6_addr rtmsg_src;struct in6_addr rtmsg_gateway;u_int32_t rtmsg_type;u_int16_t rtmsg_dst_len;u_int16_t rtmsg_src_len;u_int32_t rtmsg_metric;unsigned __int64 rtmsg_info;u_int32_t rtmsg_flags;int rtmsg_ifindex;};
struct ipt_entry {struct ipt_ip ip;unsigned int nfcache;__u16 target_offset;__u16 next_offset;unsigned int comefrom;struct xt_counters counters;unsigned __int8 elems[];};
struct kvm_sregs {struct kvm_segment cs;struct kvm_segment ds;struct kvm_segment es;struct kvm_segment fs;struct kvm_segment gs;struct kvm_segment ss;struct kvm_segment tr;struct kvm_segment ldt;struct kvm_dtable gdt;struct kvm_dtable idt;__u64 cr0;__u64 cr2;__u64 cr3;__u64 cr4;__u64 cr8;__u64 efer;__u64 apic_base;__u64 interrupt_bitmap[4];};
struct nlm_share {char *caller_name;netobj fh;netobj oh;fsh_mode mode;fsh_access access;};
struct __attribute__((packed)) pppoe_hdr {unsigned __int8 type : 4;unsigned __int8 ver : 4;__u8 code;__be16 sid;__be16 length;struct pppoe_tag tag[];};
struct ip6t_ip6 {struct in6_addr src;struct in6_addr dst;struct in6_addr smsk;struct in6_addr dmsk;char iniface[16];char outiface[16];unsigned __int8 iniface_mask[16];unsigned __int8 outiface_mask[16];__u16 proto;__u8 tos;__u8 flags;__u8 invflags;};
struct link_obj {zotypes li_rtype;struct link_obj___6E2208C80A69EAD3D69988E63D048B29 li_attrs;nis_name li_name;};
struct semid_ds {struct ipc_perm sem_perm;__time_t sem_otime;__syscall_ulong_t __unused1;__time_t sem_ctime;__syscall_ulong_t __unused2;__syscall_ulong_t sem_nsems;__syscall_ulong_t __unused3;__syscall_ulong_t __unused4;};
struct _xstate {struct _fpstate fpstate;struct _xsave_hdr xstate_hdr;struct _ymmh_state ymmh;};
struct ip6t_rt {__u32 rt_type;__u32 segsleft[2];__u32 hdrlen;__u8 flags;__u8 invflags;struct in6_addr addrs[16];__u8 addrnr;};
struct vifctl {vifi_t vifc_vifi;unsigned __int8 vifc_flags;unsigned __int8 vifc_threshold;unsigned int vifc_rate_limit;vifctl___1C189D187363D064D33CA1A5631EE3F5 __anonymous0;struct in_addr vifc_rmt_addr;};
struct tsp {u_char tsp_type;u_char tsp_vers;u_short tsp_seq;union tsp___E78A65B7E52D74DB905DCAA7AEC02B40 tsp_u;char tsp_name[64];};
union dvb_frontend_parameters___E55F16FEE6BC5557BD32C16048937597 {struct dvb_qpsk_parameters qpsk;struct dvb_qam_parameters qam;struct dvb_ofdm_parameters ofdm;struct dvb_vsb_parameters vsb;};
struct xcb_render_set_picture_transform_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_transform_t transform;};
struct xcb_randr_set_crtc_transform_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_randr_crtc_t crtc;xcb_render_transform_t transform;uint16_t filter_len;uint8_t pad0[2];};
struct xcb_randr_get_crtc_transform_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_render_transform_t pending_transform;uint8_t has_transforms;uint8_t pad1[3];xcb_render_transform_t current_transform;uint8_t pad2[4];uint16_t pending_len;uint16_t pending_nparams;uint16_t current_len;uint16_t current_nparams;};
union nf_conntrack_man_proto {__be16 all;struct nf_conntrack_man_proto___B48BD05349DE676D76CC685BEB0DC163 tcp;struct nf_conntrack_man_proto___B48BD05349DE676D76CC685BEB0DC163 udp;struct nf_conntrack_man_proto___B56350B8BCA52A0B7CED2F9F39DFA71F icmp;struct nf_conntrack_man_proto___B48BD05349DE676D76CC685BEB0DC163 dccp;struct nf_conntrack_man_proto___B48BD05349DE676D76CC685BEB0DC163 sctp;struct nf_conntrack_man_proto___AA6E5880199E696CC896E03DACE929E6 gre;};
struct ib_ucm_req_event_resp {struct ib_user_path_rec primary_path;struct ib_user_path_rec alternate_path;__be64 remote_ca_guid;__u32 remote_qkey;__u32 remote_qpn;__u32 qp_type;__u32 starting_psn;__u8 responder_resources;__u8 initiator_depth;__u8 local_cm_response_timeout;__u8 flow_control;__u8 remote_cm_response_timeout;__u8 retry_count;__u8 rnr_retry_count;__u8 srq;__u8 port;__u8 reserved[7];};
struct ethtool_rx_flow_spec {__u32 flow_type;union ethtool_flow_union h_u;struct ethtool_flow_ext h_ext;union ethtool_flow_union m_u;struct ethtool_flow_ext m_ext;__u64 ring_cookie;__u32 location;};
struct xfrm_user_mapping {struct xfrm_usersa_id id;__u32 reqid;xfrm_address_t old_saddr;xfrm_address_t new_saddr;__be16 old_sport;__be16 new_sport;};
struct fat_boot_sector {__u8 ignored[3];__u8 system_id[8];__u8 sector_size[2];__u8 sec_per_clus;__le16 reserved;__u8 fats;__u8 dir_entries[2];__u8 sectors[2];__u8 media;__le16 fat_length;__le16 secs_track;__le16 heads;__le32 hidden;__le32 total_sect;fat_boot_sector___FF847CCECE972F384F6F2A83D5FB7CE4 __anonymous0;};
struct __attribute__((packed)) i2400m_msg_hdr {i2400m_msg_hdr___22B7D1DBBF1ADFD158475D81DBFFC78D __anonymous0;i2400m_msg_hdr___2714A6542DBCB9EFDD6DA7143E760F28 __anonymous1;__le16 num_pls;__le16 rsv1;__le16 padding;__le16 rsv2;struct i2400m_pld pld[];};
struct ebt_ip6_info {struct in6_addr saddr;struct in6_addr daddr;struct in6_addr smsk;struct in6_addr dmsk;__u8 tclass;__u8 protocol;__u8 bitmask;__u8 invflags;ebt_ip6_info___26363C14217845B81957C820750DD008 __anonymous0;ebt_ip6_info___AB7A6A2EFD5D2D8A9CC0BEC5B58393A0 __anonymous1;};
union nf_inet_addr {__u32 all[4];__be32 ip;__be32 ip6[4];struct in_addr in;struct in6_addr in6;};
struct sockaddr_in6 {sa_family_t sin6_family;in_port_t sin6_port;uint32_t sin6_flowinfo;struct in6_addr sin6_addr;uint32_t sin6_scope_id;};
struct gfs2_dirent {struct gfs2_inum de_inum;__be32 de_hash;__be16 de_rec_len;__be16 de_name_len;__be16 de_type;__u8 __pad[14];};
struct rex_ttymode {sgttyb basic;tchars more;ltchars yetmore;u_int andmore;};
struct fc_els_csp {__u8 sp_hi_ver;__u8 sp_lo_ver;__be16 sp_bb_cred;__be16 sp_features;__be16 sp_bb_data;union fc_els_csp___F70C8E95E86CACEF8CF2DD52B5C7D69F sp_u;__be32 sp_e_d_tov;};
struct nis_result {nis_error status;struct nis_result___4B6B45C3F1C3815D68D653B8D499AE33 objects;netobj cookie;uint32_t zticks;uint32_t dticks;uint32_t aticks;uint32_t cticks;};
struct nis_server {nis_name name;struct nis_server___DA92845B88BF4FFBAAA2281E50DC5AF5 ep;uint32_t key_type;netobj pkey;};
struct proc_event {enum proc_event__what what;__u32 cpu;__attribute__((aligned(8))) __u64 timestamp_ns;union proc_event___0EB4AFF4D590FD9FD3BA0EA85B8E943A event_data;};
struct tc_u32_sel {unsigned __int8 flags;unsigned __int8 offshift;unsigned __int8 nkeys;__be16 offmask;__u16 off;__int16 offoff;__int16 hoff;__be32 hmask;struct tc_u32_key keys[];};
struct desparams {u_char des_key[8];enum desdir des_dir;enum desmode des_mode;u_char des_ivec[8];unsigned int des_len;union desparams___F38C3328E965CE3ADB16864418918AD0 UDES;};
struct fd_result {nis_error status;nis_name source;struct fd_result___E188DDB4946479B1B04909415F6D7A2E dir_data;struct fd_result___864956CB4DA79F92CA310E20E4E9B271 signature;};
struct gfs2_rgrp {struct gfs2_meta_header rg_header;__be32 rg_flags;__be32 rg_free;__be32 rg_dinodes;__be32 __pad;__be64 rg_igeneration;__u8 rg_reserved[80];};
struct rr_result {uint16_t rrr_flags;uint8_t rrr_ordinal;uint8_t rrr_matchedlen;uint32_t rrr_ifid;struct in6_addr rrr_prefix;};
struct ucontext {unsigned __int64 uc_flags;struct ucontext *uc_link;stack_t uc_stack;mcontext_t uc_mcontext;__sigset_t uc_sigmask;struct _libc_fpstate __fpregs_mem;};
struct mrt6msg {__u8 im6_mbz;__u8 im6_msgtype;__u16 im6_mif;__u32 im6_pad;struct in6_addr im6_src;struct in6_addr im6_dst;};
struct xcb_render_create_linear_gradient_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_pointfix_t p1;xcb_render_pointfix_t p2;uint32_t num_stops;};
union icmp___EEC48C5976A17953B310258F40698883 {struct icmp___EEC48C5976A17953B310258F40698883___18EAF2C5161535AE6831887B3FEB9817 id_ts;struct icmp___EEC48C5976A17953B310258F40698883___E13592CBDF627F773A21D4C55E8BB1FD id_ip;struct icmp_ra_addr id_radv;u_int32_t id_mask;u_int8_t id_data[1];};
struct xfrm_userpolicy_info {struct xfrm_selector sel;struct xfrm_lifetime_cfg lft;struct xfrm_lifetime_cur curlft;__u32 priority;__u32 index;__u8 dir;__u8 action;__u8 flags;__u8 share;};
struct xt_conntrack_mtinfo1 {union nf_inet_addr origsrc_addr;union nf_inet_addr origsrc_mask;union nf_inet_addr origdst_addr;union nf_inet_addr origdst_mask;union nf_inet_addr replsrc_addr;union nf_inet_addr replsrc_mask;union nf_inet_addr repldst_addr;union nf_inet_addr repldst_mask;__u32 expires_min;__u32 expires_max;__u16 l4proto;__be16 origsrc_port;__be16 origdst_port;__be16 replsrc_port;__be16 repldst_port;__u16 match_flags;__u16 invert_flags;__u8 state_mask;__u8 status_mask;};
struct xfrm_user_acquire {struct xfrm_id id;xfrm_address_t saddr;struct xfrm_selector sel;struct xfrm_userpolicy_info policy;__u32 aalgos;__u32 ealgos;__u32 calgos;__u32 seq;};
struct sockaddr_l2tpip6 {__kernel_sa_family_t l2tp_family;__be16 l2tp_unused;__be32 l2tp_flowinfo;struct in6_addr l2tp_addr;__u32 l2tp_scope_id;__u32 l2tp_conn_id;};
struct directory_obj {nis_name do_name;nstype do_type;struct directory_obj___1F9DB6EC5B4D38C4C9C3429D1A4D637D do_servers;uint32_t do_ttl;struct directory_obj___C1C9E10248BAA10524C7D0EEA27D2609 do_armask;};
struct ip6_tnl_parm {char name[16];int link;__u8 proto;__u8 encap_limit;__u8 hop_limit;__be32 flowinfo;__u32 flags;struct in6_addr laddr;struct in6_addr raddr;};
struct gfs2_leaf {struct gfs2_meta_header lf_header;__be16 lf_depth;__be16 lf_entries;__be32 lf_dirent_format;__be64 lf_next;__u8 lf_reserved[64];};
struct k_message {__u16 type;__be32 ip_mask;__u8 MPS_ctrl[20];union k_message___206C2CB577A0C945CCF3D164C4BDBFF4 content;struct atm_qos qos;};
struct gfs2_sb {struct gfs2_meta_header sb_header;__be32 sb_fs_format;__be32 sb_multihost_format;__u32 __pad0;__be32 sb_bsize;__be32 sb_bsize_shift;__u32 __pad1;struct gfs2_inum sb_master_dir;struct gfs2_inum __pad2;struct gfs2_inum sb_root_dir;char sb_lockproto[64];char sb_locktable[64];struct gfs2_inum __pad3;struct gfs2_inum __pad4;__u8 sb_uuid[16];};
struct xcb_render_create_conical_gradient_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_pointfix_t center;xcb_render_fixed_t angle;uint32_t num_stops;};
struct xcb_render_create_radial_gradient_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_pointfix_t inner;xcb_render_pointfix_t outer;xcb_render_fixed_t inner_radius;xcb_render_fixed_t outer_radius;uint32_t num_stops;};
union objdata___B3007D6063AF66DF722E8A0D3E39E00C {struct directory_obj di_data;struct group_obj gr_data;struct table_obj ta_data;struct entry_obj en_data;struct link_obj li_data;struct objdata___B3007D6063AF66DF722E8A0D3E39E00C___C5CA305DAC14A48247D92F909AB77E9C po_data;};
struct __attribute__((packed)) edd_device_params {__u16 length;__u16 info_flags;__u32 num_default_cylinders;__u32 num_default_heads;__u32 sectors_per_track;__u64 number_of_sectors;__u16 bytes_per_sector;__u32 dpte_ptr;__u16 key;__u8 device_path_info_length;__u8 reserved2;__u16 reserved3;__u8 host_bus_type[4];__u8 interface_type[8];union edd_device_params___B6096C794879D9A5D7ABB0EDCEE73243 interface_path;union edd_device_params___77E84888D903973077CE4CFDC6BFCF35 device_path;__u8 reserved4;__u8 checksum;};
struct ip6_tnl_parm2 {char name[16];int link;__u8 proto;__u8 encap_limit;__u8 hop_limit;__be32 flowinfo;__u32 flags;struct in6_addr laddr;struct in6_addr raddr;__be16 i_flags;__be16 o_flags;__be32 i_key;__be32 o_key;};
struct atmsvc_msg {enum atmsvc_msg_type type;atm_kptr_t vcc;atm_kptr_t listen_vcc;int reply;struct sockaddr_atmpvc pvc;struct sockaddr_atmsvc local;struct atm_qos qos;struct atm_sap sap;unsigned int session;struct sockaddr_atmsvc svc;};
struct ib_request {nis_name ibr_name;struct ib_request___284138CD61DEACF1E3B0F8ADC9D2B817 ibr_srch;uint32_t ibr_flags;struct ib_request___BC4F227684F3C8C9122828D0FF4C6B30 ibr_obj;struct ib_request___2D577313DCD2E74CD5A0055993933E3C ibr_cbhost;u_int ibr_bufsize;netobj ibr_cookie;};
struct gfs2_dinode {struct gfs2_meta_header di_header;struct gfs2_inum di_num;__be32 di_mode;__be32 di_uid;__be32 di_gid;__be32 di_nlink;__be64 di_size;__be64 di_blocks;__be64 di_atime;__be64 di_mtime;__be64 di_ctime;__be32 di_major;__be32 di_minor;__be64 di_goal_meta;__be64 di_goal_data;__be64 di_generation;__be32 di_flags;__be32 di_payload_format;__u16 __pad1;__be16 di_height;__u32 __pad2;__u16 __pad3;__be16 di_depth;__be32 di_entries;struct gfs2_inum __pad4;__be64 di_eattr;__be32 di_atime_nsec;__be32 di_mtime_nsec;__be32 di_ctime_nsec;__u8 di_reserved[44];};
union ib_ucm_event_resp___4F0FE8C059D2B0E7A4098317275AB69C {struct ib_ucm_req_event_resp req_resp;struct ib_ucm_rep_event_resp rep_resp;struct ib_ucm_rej_event_resp rej_resp;struct ib_ucm_mra_event_resp mra_resp;struct ib_ucm_lap_event_resp lap_resp;struct ib_ucm_apr_event_resp apr_resp;struct ib_ucm_sidr_req_event_resp sidr_req_resp;struct ib_ucm_sidr_rep_event_resp sidr_rep_resp;__u32 send_status;};
struct qnx4_inode_entry {char di_fname[16];qnx4_off_t di_size;qnx4_xtnt_t di_first_xtnt;__le32 di_xblk;__le32 di_ftime;__le32 di_mtime;__le32 di_atime;__le32 di_ctime;qnx4_nxtnt_t di_num_xtnts;qnx4_mode_t di_mode;qnx4_muid_t di_uid;qnx4_mgid_t di_gid;qnx4_nlink_t di_nlink;__u8 di_zero[4];qnx4_ftype_t di_type;__u8 di_status;};
union kvm_run___A194019CF89D0E9161B41DDFC9778C55 {struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___A1B67C45776BD8EF9064084D47210D40 hw;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___A9751E5CD96116865FFC28C49DDEBD33 fail_entry;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___EDA0495B17FF03E79A1AEDDCBD8E1B5C ex;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___7EAD3D9EE1A56EB81EC14AA86DEFD2DA io;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___CC6BD5761BCACBE21B81D4A929CF3C3D debug;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8B28E511ABDF7664AE4A66D9651FF4E2 mmio;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8BD831D3F26E755231EE226110EFBC25 hypercall;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___9A8CADB17020C23A50EF184344A8FCB4 tpr_access;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___2604A667C73FB069A2304F8E765BD24B s390_sieic;__u64 s390_reset_flags;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___BD1B4A354AF725BA74D732704C5A145B s390_ucontrol;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___00575168428C2A87979258BF9A2B69BD dcr;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___CC925405885A04949E6CA336967D4693 internal;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___E359DA8D54736DEF55DE0FF520F1219C osi;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___0D41B3811F015B06FF7F97F1123DECB6 papr_hcall;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___649D61653448803413F3B321FF9BAB70 s390_tsch;struct kvm_run___A194019CF89D0E9161B41DDFC9778C55___8C611F25D4ACBFD17F2D17F4C0FF238C epr;char padding[256];};
union _xEvent___8D9F8CFA4742D6E00DB874B9F876609D {struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___CB6A6FBD4AABDC204CA09785462A5EAC u;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___06CC3EE1C785FF4C65A358F81D4770E3 keyButtonPointer;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___B652DCB1C62512FA77E4252B8A422175 enterLeave;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___D4E6015299E8C3BAFA52E0C7400AB6A6 focus;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___99F5A2754EC45011AB028BB1CC2CE3C7 expose;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___316B218C709051C178B3BB07E6B18196 graphicsExposure;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___E3E63ACF9DBDF6C56161A285CC120760 noExposure;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0F73BC087B0175F837E61BF86166AB84 visibility;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F0EDD24BB588AB1974F0CC5CC47343A0 createNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___3F936A3A9A06092B5B70BD26A7DFD789 destroyNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___674F3E4AE65A41A1BBF2ACE37596CB1B unmapNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___3284E488B37AEC742A022E833068D497 mapNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___210E680417EC90CA260E4854A6751754 mapRequest;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___C927E5D571B5CC43049437141E992D5C reparent;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F0E773388BCCF7D4D022A846E01785CC configureNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___CF45A70F1381AC3E41639336F8DCFD08 configureRequest;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___9C75AB6DDEADA42926A4005EFC1B4241 gravity;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___5A60174FC6A07BE0049C674473C6C1C3 resizeRequest;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___EDE3B33B7AF26E05A2A60AEE6589519E circulate;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___40ECE1105C1C479EC11371480E0EAEEE property;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___B56843D1A807D13D0FEC0C0069626892 selectionClear;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0782806FB5FEE125636C30F93EC424E5 selectionRequest;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___9E59406F0409BDE74EEED2CE1F683A76 selectionNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___0D5E0D9ECA38FABF7ACF740E3D46813C colormap;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___4D6B1C2E2FE6C1124CAB2311E897D1AB mappingNotify;struct _xEvent___8D9F8CFA4742D6E00DB874B9F876609D___F60DFC41729ECCA7C121C44CBFE60E95 clientMessage;};
struct xt_policy_elem___506B8192831C4DA2E38D1FD681CA6263___00E7F3FC1EA1F2190C2936946F94EE86 {union xt_policy_addr saddr;union xt_policy_addr smask;union xt_policy_addr daddr;union xt_policy_addr dmask;};
union xt_policy_elem___506B8192831C4DA2E38D1FD681CA6263 {xt_policy_elem___506B8192831C4DA2E38D1FD681CA6263___00E7F3FC1EA1F2190C2936946F94EE86 __anonymous0;};
union nlm_testrply___25E723FE95144319ADEDD57F4FF59DDE {struct nlm_holder holder;};
union getcredres___C5134A0BDA290BA80D31944F899AB902 {unixcred cred;};
struct _6954A090FF674864C2EF0B367DFBE910 {union _6954A090FF674864C2EF0B367DFBE910___4C8070B9675DF490D49D1F7749E052FB u;};
struct _9E6A7A2F5B8444BF3F540E884EB664C9 {union _9E6A7A2F5B8444BF3F540E884EB664C9___1C1E9EA25555F3A04518B10EE9DF4602 u;};
struct snd_seq_ev_queue_control {unsigned __int8 queue;unsigned __int8 pad[3];union snd_seq_ev_queue_control___BD7710A1463C8082981532940790AA20 param;};
struct mei_connect_client_data {mei_connect_client_data___A40A474C8C4A815854F508746723EC79 __anonymous0;};
struct xt_standard_target {struct xt_entry_target target;int verdict;};
struct qnx4_super_block {struct qnx4_inode_entry RootDir;struct qnx4_inode_entry Inode;struct qnx4_inode_entry Boot;struct qnx4_inode_entry AltBoot;};
struct net_dm_user_msg {union net_dm_user_msg___15ACACB6C2BBBF436ECFD1AF3E0A1DF0 u;};
struct klm_unlockargs {struct klm_lock alock;};
struct xt_tee_tginfo {union nf_inet_addr gw;char oif[16];struct xt_tee_priv *priv;};
struct sioc_sg_req6 {struct sockaddr_in6 src;struct sockaddr_in6 grp;unsigned __int64 pktcnt;unsigned __int64 bytecnt;unsigned __int64 wrong_if;};
struct in6_pktinfo {struct in6_addr ipi6_addr;unsigned int ipi6_ifindex;};
struct ipv6_mreq {struct in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
struct _xEvent {union _xEvent___8D9F8CFA4742D6E00DB874B9F876609D u;};
union xt_connlimit_info___2316CCD6442B00724D40925D6B9B4268 {union nf_inet_addr mask;xt_connlimit_info___2316CCD6442B00724D40925D6B9B4268___185FF880A31D1CBC1AF0F20DFB0DEDD2 __anonymous0;};
union reply_body___3176F759A4E4A0B30BE44C0FA3C218CC {struct accepted_reply RP_ar;struct rejected_reply RP_dr;};
struct v4l2_enum_dv_timings {__u32 index;__u32 reserved[3];struct v4l2_dv_timings timings;};
struct __attribute__((packed)) sockaddr_pppol2tpv3 {__kernel_sa_family_t sa_family;unsigned int sa_protocol;struct pppol2tpv3_addr pppol2tp;};
struct v4l2_create_buffers {__u32 index;__u32 count;__u32 memory;struct v4l2_format format;__u32 reserved[8];};
struct xfrm_user_polexpire {struct xfrm_userpolicy_info pol;__u8 hard;};
struct nf_nat_ipv4_range {unsigned int flags;__be32 min_ip;__be32 max_ip;union nf_conntrack_man_proto min;union nf_conntrack_man_proto max;};
struct __attribute__((packed)) sockaddr_pppol2tp {__kernel_sa_family_t sa_family;unsigned int sa_protocol;struct pppol2tp_addr pppol2tp;};
struct xt_iprange_mtinfo {union nf_inet_addr src_min;union nf_inet_addr src_max;union nf_inet_addr dst_min;union nf_inet_addr dst_max;__u8 flags;};
struct arpt_get_entries {char name[32];unsigned int size;struct arpt_entry entrytable[];};
struct ipt_get_entries {char name[32];unsigned int size;struct ipt_entry entrytable[];};
struct ifpppcstatsreq {struct ifreq b;struct ppp_comp_stats stats;};
struct nlm_unlockargs {netobj cookie;struct nlm_lock alock;};
struct ifpppstatsreq {struct ifreq b;struct ppp_stats stats;};
struct arpt_replace {char name[32];unsigned int valid_hooks;unsigned int num_entries;unsigned int size;unsigned int hook_entry[3];unsigned int underflow[3];unsigned int num_counters;struct xt_counters *counters;struct arpt_entry entries[];};
struct klm_lockargs {bool_t block;bool_t exclusive;struct klm_lock alock;};
struct klm_testargs {bool_t exclusive;struct klm_lock alock;};
struct nf_nat_range {unsigned int flags;union nf_inet_addr min_addr;union nf_inet_addr max_addr;union nf_conntrack_man_proto min_proto;union nf_conntrack_man_proto max_proto;};
struct nlm_testrply {nlm_stats stat;union nlm_testrply___25E723FE95144319ADEDD57F4FF59DDE nlm_testrply_u;};
struct ip6_mtuinfo {struct sockaddr_in6 ip6m_addr;uint32_t ip6m_mtu;};
struct ipt_replace {char name[32];unsigned int valid_hooks;unsigned int num_entries;unsigned int size;unsigned int hook_entry[5];unsigned int underflow[5];unsigned int num_counters;struct xt_counters *counters;struct ipt_entry entries[];};
struct nlm_testres {netobj cookie;nlm_testrply stat;};
struct getcredres {keystatus status;union getcredres___C5134A0BDA290BA80D31944F899AB902 getcredres_u;};
struct reply_body {enum reply_stat rp_stat;union reply_body___3176F759A4E4A0B30BE44C0FA3C218CC ru;};
struct pps_fdata {struct pps_kinfo info;struct pps_ktime timeout;};
struct objdata {zotypes zo_type;union objdata___B3007D6063AF66DF722E8A0D3E39E00C objdata_u;};
struct rpc_err {enum clnt_stat re_status;union rpc_err___055F5448726BC1208A44545720AB7286 ru;};
union dtv_property___B98ACA724107A4780966790F8E6F51AE {__u32 data;struct dtv_fe_stats st;struct dtv_property___B98ACA724107A4780966790F8E6F51AE___E85D121AEF2FD57774AEAE3C80475EA9 buffer;};
struct xcb_randr_notify_event_t {uint8_t response_type;uint8_t subCode;uint16_t sequence;xcb_randr_notify_data_t u;};
struct xt_tproxy_target_info_v1 {__u32 mark_mask;__u32 mark_value;union nf_inet_addr laddr;__be16 lport;};
struct dvb_frontend_parameters {__u32 frequency;fe_spectral_inversion_t inversion;union dvb_frontend_parameters___E55F16FEE6BC5557BD32C16048937597 u;};
struct xt_conntrack_mtinfo3 {union nf_inet_addr origsrc_addr;union nf_inet_addr origsrc_mask;union nf_inet_addr origdst_addr;union nf_inet_addr origdst_mask;union nf_inet_addr replsrc_addr;union nf_inet_addr replsrc_mask;union nf_inet_addr repldst_addr;union nf_inet_addr repldst_mask;__u32 expires_min;__u32 expires_max;__u16 l4proto;__u16 origsrc_port;__u16 origdst_port;__u16 replsrc_port;__u16 repldst_port;__u16 match_flags;__u16 invert_flags;__u16 state_mask;__u16 status_mask;__u16 origsrc_port_high;__u16 origdst_port_high;__u16 replsrc_port_high;__u16 repldst_port_high;};
struct gfs2_log_descriptor {struct gfs2_meta_header ld_header;__be32 ld_type;__be32 ld_length;__be32 ld_data1;__be32 ld_data2;__u8 ld_reserved[32];};
struct pppol2tpv3in6_addr {__kernel_pid_t pid;int fd;__u32 s_tunnel;__u32 s_session;__u32 d_tunnel;__u32 d_session;struct sockaddr_in6 addr;};
struct ib_ucm_event_resp {__u64 uid;__u32 id;__u32 event;__u32 present;__u32 reserved;union ib_ucm_event_resp___4F0FE8C059D2B0E7A4098317275AB69C u;};
struct xt_connlimit_info {union {union nf_inet_addr mask;xt_connlimit_info___2316CCD6442B00724D40925D6B9B4268 __anonymous0;};unsigned int limit;__u32 flags;struct xt_connlimit_data *data;};
struct pppol2tpin6_addr {__kernel_pid_t pid;int fd;__u16 s_tunnel;__u16 s_session;__u16 d_tunnel;__u16 d_session;struct sockaddr_in6 addr;};
struct ip6t_npt_tginfo {union nf_inet_addr src_pfx;union nf_inet_addr dst_pfx;__u8 src_pfx_len;__u8 dst_pfx_len;__sum16 adjustment;};
struct xt_ipvs_mtinfo {union nf_inet_addr vaddr;union nf_inet_addr vmask;__be16 vport;__u8 l4proto;__u8 fwd_method;__be16 vportctl;__u8 invert;__u8 bitmask;};
struct ethtool_rxnfc {__u32 cmd;__u32 flow_type;__u64 data;struct ethtool_rx_flow_spec fs;__u32 rule_cnt;__u32 rule_locs[];};
struct nlm_shareargs {netobj cookie;nlm_share share;bool_t reclaim;};
struct ip6t_entry {struct ip6t_ip6 ipv6;unsigned int nfcache;__u16 target_offset;__u16 next_offset;unsigned int comefrom;struct xt_counters counters;unsigned __int8 elems[];};
struct __attribute__((packed)) edd_info {__u8 device;__u8 version;__u16 interface_support;__u16 legacy_max_cylinder;__u8 legacy_max_head;__u8 legacy_sectors_per_track;struct edd_device_params params;};
struct mf6cctl {struct sockaddr_in6 mf6cc_origin;struct sockaddr_in6 mf6cc_mcastgrp;mifi_t mf6cc_parent;struct if_set mf6cc_ifset;};
struct xt_conntrack_mtinfo2 {union nf_inet_addr origsrc_addr;union nf_inet_addr origsrc_mask;union nf_inet_addr origdst_addr;union nf_inet_addr origdst_mask;union nf_inet_addr replsrc_addr;union nf_inet_addr replsrc_mask;union nf_inet_addr repldst_addr;union nf_inet_addr repldst_mask;__u32 expires_min;__u32 expires_max;__u16 l4proto;__be16 origsrc_port;__be16 origdst_port;__be16 replsrc_port;__be16 repldst_port;__u16 match_flags;__u16 invert_flags;__u16 state_mask;__u16 status_mask;};
struct xt_recent_mtinfo_v1 {__u32 seconds;__u32 hit_count;__u8 check_set;__u8 invert;char name[200];__u8 side;union nf_inet_addr mask;};
struct __attribute__((packed)) fc_els_flogi {__u8 fl_cmd;__u8 _fl_resvd[3];struct fc_els_csp fl_csp;__be64 fl_wwpn;__be64 fl_wwnn;struct fc_els_cssp fl_cssp[4];__u8 fl_vend[16];};
struct nis_object {nis_oid zo_oid;nis_name zo_name;nis_name zo_owner;nis_name zo_group;nis_name zo_domain;uint32_t zo_access;uint32_t zo_ttl;objdata zo_data;};
struct icmp {u_int8_t icmp_type;u_int8_t icmp_code;u_int16_t icmp_cksum;union icmp___893B68B5BC55935E15A63F398B6517AD icmp_hun;union icmp___EEC48C5976A17953B310258F40698883 icmp_dun;};
struct xt_policy_elem {xt_policy_elem___506B8192831C4DA2E38D1FD681CA6263 __anonymous0;__be32 spi;__u32 reqid;__u8 proto;__u8 mode;struct xt_policy_spec match;struct xt_policy_spec invert;};
struct log_entry {uint32_t le_time;log_entry_t le_type;nis_name le_princp;nis_name le_name;struct log_entry___1E639176190539C4AF5A837E820AE922 le_attrs;nis_object le_object;};
struct kvm_run {__u8 request_interrupt_window;__u8 padding1[7];__u32 exit_reason;__u8 ready_for_interrupt_injection;__u8 if_flag;__u8 padding2[2];__u64 cr8;__u64 apic_base;kvm_run___A194019CF89D0E9161B41DDFC9778C55 __anonymous0;__u64 kvm_valid_regs;__u64 kvm_dirty_regs;union kvm_run___F43018F8AEE5B5844153EFD33BC1C430 s;};
union snd_seq_event___C9940212CE0DEEA5F05F1BFFC3461EB8 {struct snd_seq_ev_note note;struct snd_seq_ev_ctrl control;struct snd_seq_ev_raw8 raw8;struct snd_seq_ev_raw32 raw32;struct snd_seq_ev_ext ext;struct snd_seq_ev_queue_control queue;union snd_seq_timestamp time;struct snd_seq_addr addr;struct snd_seq_connect connect;struct snd_seq_result result;struct snd_seq_ev_quote quote;};
struct __attribute__((packed)) boot_params {struct screen_info screen_info;struct apm_bios_info apm_bios_info;__u8 _pad2[4];__u64 tboot_addr;struct ist_info ist_info;__u8 _pad3[16];__u8 hd0_info[16];__u8 hd1_info[16];struct sys_desc_table sys_desc_table;struct olpc_ofw_header olpc_ofw_header;__u32 ext_ramdisk_image;__u32 ext_ramdisk_size;__u32 ext_cmd_line_ptr;__u8 _pad4[116];struct edid_info edid_info;struct efi_info efi_info;__u32 alt_mem_k;__u32 scratch;__u8 e820_entries;__u8 eddbuf_entries;__u8 edd_mbr_sig_buf_entries;__u8 kbd_status;__u8 secure_boot;__u8 _pad5[2];__u8 sentinel;__u8 _pad6[1];struct setup_header hdr;__u8 _pad7[40];__u32 edd_mbr_sig_buffer[16];struct e820entry e820_map[128];__u8 _pad8[48];struct edd_info eddbuf[6];__u8 _pad9[276];};
struct nf_nat_ipv4_multi_range_compat {unsigned int rangesize;struct nf_nat_ipv4_range range[1];};
struct edd {unsigned int mbr_signature[16];struct edd_info edd_info[6];unsigned __int8 mbr_signature_nr;unsigned __int8 edd_info_nr;};
union rpc_msg___7D774571B4FAB0E4BBD540829030FA52 {struct call_body RM_cmb;struct reply_body RM_rmb;};
struct __attribute__((packed)) sockaddr_pppol2tpv3in6 {__kernel_sa_family_t sa_family;unsigned int sa_protocol;struct pppol2tpv3in6_addr pppol2tp;};
struct __attribute__((packed)) sockaddr_pppol2tpin6 {__kernel_sa_family_t sa_family;unsigned int sa_protocol;struct pppol2tpin6_addr pppol2tp;};
struct dvb_frontend_event {fe_status_t status;struct dvb_frontend_parameters parameters;};
struct ip6t_get_entries {char name[32];unsigned int size;struct ip6t_entry entrytable[];};
struct xt_policy_info {struct xt_policy_elem pol[4];__u16 flags;__u16 len;};
struct ip6t_standard {struct ip6t_entry entry;struct xt_standard_target target;};
struct rpc_createerr {enum clnt_stat cf_stat;struct rpc_err cf_error;};
struct __attribute__((packed)) dtv_property {__u32 cmd;__u32 reserved[3];union dtv_property___B98ACA724107A4780966790F8E6F51AE u;int result;};
struct ip6t_replace {char name[32];unsigned int valid_hooks;unsigned int num_entries;unsigned int size;unsigned int hook_entry[5];unsigned int underflow[5];unsigned int num_counters;struct xt_counters *counters;struct ip6t_entry entries[];};
struct ip6t_error {struct ip6t_entry entry;struct xt_error_target target;};
struct rpc_msg {u_long rm_xid;enum msg_type rm_direction;union rpc_msg___7D774571B4FAB0E4BBD540829030FA52 ru;};
struct snd_seq_event {snd_seq_event_type_t type;unsigned __int8 flags;char tag;unsigned __int8 queue;union snd_seq_timestamp time;struct snd_seq_addr source;struct snd_seq_addr dest;union snd_seq_event___C9940212CE0DEEA5F05F1BFFC3461EB8 data;};
struct snd_seq_event_bounce {int err;struct snd_seq_event event;};



#endif
